
prj_stm32n6_cam_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024710  34180750  34180750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bb0  341a4e60  341a4e60  00024e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .version      00000010  341a8a10  341a8a10  00028a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  341a8a20  341a8a20  0002a940  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  341a8a20  341a8a20  00028a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  341a8a28  341a8a28  0002a940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  341a8a28  341a8a28  00028a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  341a8a2c  341a8a2c  00028a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000194  341c0000  341a8a30  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .mtk_exctbl   00000d40  341c0400  341a8bc4  00029400  2**10
                  CONTENTS, ALLOC, LOAD, DATA
 11 .noncacheable 00000000  341c1140  341c1140  0002a940  2**0
                  CONTENTS
 12 .gnu.sgstubs  00000020  341a9920  341a9920  0002a920  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .bss          00002588  341c1140  341c1140  0002b140  2**3
                  ALLOC
 14 .noinit       000022d8  341c36c8  341c36c8  0002b140  2**3
                  ALLOC
 15 ._user_heap_stack 00000a00  341c59a0  341c59a0  0002b140  2**0
                  ALLOC
 16 .ARM.attributes 00000044  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY
 17 .debug_info   00045c92  00000000  00000000  0002a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000090a0  00000000  00000000  00070616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003988  00000000  00000000  000796b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002c09  00000000  00000000  0007d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0005ef0f  00000000  00000000  0007fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00054f17  00000000  00000000  000deb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0022f28b  00000000  00000000  00133a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000003c9  00000000  00000000  00362cfa  2**0
                  CONTENTS, READONLY
 25 .iar.rtmodel  000001b0  00000000  00000000  003630c3  2**0
                  CONTENTS, READONLY
 26 .iar_vfe_header 0000000c  00000000  00000000  00363274  2**2
                  CONTENTS, READONLY
 27 .iar.debug_frame 00000112  00000000  00000000  00363280  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00010064  00000000  00000000  00363394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 000000a3  00000000  00000000  003733f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34180750 <__do_global_dtors_aux>:
34180750:	b510      	push	{r4, lr}
34180752:	4c05      	ldr	r4, [pc, #20]	@ (34180768 <__do_global_dtors_aux+0x18>)
34180754:	7823      	ldrb	r3, [r4, #0]
34180756:	b933      	cbnz	r3, 34180766 <__do_global_dtors_aux+0x16>
34180758:	4b04      	ldr	r3, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x1c>)
3418075a:	b113      	cbz	r3, 34180762 <__do_global_dtors_aux+0x12>
3418075c:	4804      	ldr	r0, [pc, #16]	@ (34180770 <__do_global_dtors_aux+0x20>)
3418075e:	f3af 8000 	nop.w
34180762:	2301      	movs	r3, #1
34180764:	7023      	strb	r3, [r4, #0]
34180766:	bd10      	pop	{r4, pc}
34180768:	341c1140 	.word	0x341c1140
3418076c:	00000000 	.word	0x00000000
34180770:	341a4e48 	.word	0x341a4e48

34180774 <frame_dummy>:
34180774:	b508      	push	{r3, lr}
34180776:	4b03      	ldr	r3, [pc, #12]	@ (34180784 <frame_dummy+0x10>)
34180778:	b11b      	cbz	r3, 34180782 <frame_dummy+0xe>
3418077a:	4903      	ldr	r1, [pc, #12]	@ (34180788 <frame_dummy+0x14>)
3418077c:	4803      	ldr	r0, [pc, #12]	@ (3418078c <frame_dummy+0x18>)
3418077e:	f3af 8000 	nop.w
34180782:	bd08      	pop	{r3, pc}
34180784:	00000000 	.word	0x00000000
34180788:	341c1144 	.word	0x341c1144
3418078c:	341a4e48 	.word	0x341a4e48

34180790 <knl_dispatch_entry>:
	.thumb_func
	.globl Csym(knl_dispatch_entry)

Csym(knl_dispatch_entry):	
/*----------------- Start dispatch processing. -----------------*/
	ldr	r0, =Csym(knl_dispatch_disabled)
34180790:	4828      	ldr	r0, [pc, #160]	@ (34180834 <l_dispatch_200+0x16>)
	ldr	r1, =1
34180792:	f04f 0101 	mov.w	r1, #1
	str	r1, [r0]			// Dispatch disable
34180796:	6001      	str	r1, [r0, #0]

	ldr	r0, =Csym(knl_ctxtsk)
34180798:	4827      	ldr	r0, [pc, #156]	@ (34180838 <l_dispatch_200+0x1a>)
	ldr	r1, [r0]			// R1 = ctxtsk
3418079a:	6801      	ldr	r1, [r0, #0]
	cmp	r1, #0
3418079c:	2900      	cmp	r1, #0
	bne	l_dispatch_000
3418079e:	d102      	bne.n	341807a6 <l_dispatch_000>
#if USE_SPMON
	ldr	r2, =INTERNAL_RAM_START
	msr	msplim, r2
#endif
	// Set temporal stack
	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)
341807a0:	f8df d098 	ldr.w	sp, [pc, #152]	@ 3418083c <l_dispatch_200+0x1e>
#if USE_SPMON
	ldr	r2, =Csym(knl_tmp_stack)
	msr	msplim, r2
#endif

	b	l_dispatch_100
341807a4:	e011      	b.n	341807ca <l_dispatch_100>

341807a6 <l_dispatch_000>:

/*----------------- Save "ctxtsk" context. -----------------*/
l_dispatch_000: 
	push	{r4-r11}
341807a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	push	{lr}
341807aa:	b500      	push	{lr}

#if USE_FPU			// Save FPU register
	ldr	r2, [r1, #TCB_tskatr]
341807ac:	690a      	ldr	r2, [r1, #16]
	ands	r2, r2, #TA_FPU
341807ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
	beq	l_dispatch_010			// ctxtsk is not a TA_FPU attribute.
341807b2:	d005      	beq.n	341807c0 <l_dispatch_010>

	ands	r3,lr, #EXPRN_NO_FPU
341807b4:	f01e 0310 	ands.w	r3, lr, #16
	bne	l_dispatch_010			// ctxtsk does not execute FPU instructions.
341807b8:	d102      	bne.n	341807c0 <l_dispatch_010>

	vpush	{s16-s31}			// Push FPU register (S16-S31)
341807ba:	ed2d 8a10 	vpush	{s16-s31}
	push	{r3}				//FPU usage flag
341807be:	b408      	push	{r3}

341807c0 <l_dispatch_010>:

l_dispatch_010:			// End of FPU register save process
#endif /* USE_FPU */

	str	sp, [r1, #TCB_tskctxb + CTXB_ssp]	// Save 'ssp' to TCB
341807c0:	f8c1 d018 	str.w	sp, [r1, #24]

	ldr	r2, =0
341807c4:	f04f 0200 	mov.w	r2, #0
	str	r2, [r0]			// ctxtsk = NULL
341807c8:	6002      	str	r2, [r0, #0]

341807ca <l_dispatch_100>:


/*----------------- Dispatch from "ctxtsk" to "schedtsk" -----------------*/
l_dispatch_100:
	ldr	r4, =Csym(knl_ctxtsk)
341807ca:	4c1b      	ldr	r4, [pc, #108]	@ (34180838 <l_dispatch_200+0x1a>)
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
341807cc:	4d1c      	ldr	r5, [pc, #112]	@ (34180840 <l_dispatch_200+0x22>)
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
341807ce:	4e1d      	ldr	r6, [pc, #116]	@ (34180844 <l_dispatch_200+0x26>)

341807d0 <l_dispatch_110>:

l_dispatch_110:
	ldr	r2, =INTPRI_VAL(INTPRI_MAX_EXTINT_PRI)	// Disable interruput
341807d0:	f04f 0210 	mov.w	r2, #16
	msr	basepri, r2
341807d4:	f382 8811 	msr	BASEPRI, r2

	ldr	r8, [r5]			// R8 = schedtsk
341807d8:	f8d5 8000 	ldr.w	r8, [r5]
	cmp	r8, #0				// Is there 'schedtsk'?
341807dc:	f1b8 0f00 	cmp.w	r8, #0
	bne	l_dispatch_120
341807e0:	d10d      	bne.n	341807fe <l_dispatch_120>

	/* Moves to power saving mode because there are no tasks that can be run. */
	ldr	ip, [r6]			// Is 'low_pow' disabled?
341807e2:	f8d6 c000 	ldr.w	ip, [r6]
	cmp	ip, #0
341807e6:	f1bc 0f00 	cmp.w	ip, #0
	it	eq
341807ea:	bf08      	it	eq
	bleq	Csym(low_pow)			// call low_pow()
341807ec:	f022 f92a 	bleq	341a2a44 <low_pow>

	ldr	r2, =0
341807f0:	f04f 0200 	mov.w	r2, #0
	msr	basepri, r2			// Enable interruput
341807f4:	f382 8811 	msr	BASEPRI, r2
	isb
341807f8:	f3bf 8f6f 	isb	sy

	b	l_dispatch_110
341807fc:	e7e8      	b.n	341807d0 <l_dispatch_110>

341807fe <l_dispatch_120>:

l_dispatch_120:			// Switch to 'schedtsk'
	str	r8, [r4]			// ctxtsk = schedtsk
341807fe:	f8c4 8000 	str.w	r8, [r4]
#if USE_SPMON
	ldr	r2, =INTERNAL_RAM_START
	msr	msplim, r2
#endif

	ldr	sp, [r8, #TCB_tskctxb + CTXB_ssp]	// Restore 'ssp' from TCB
34180802:	f8d8 d018 	ldr.w	sp, [r8, #24]
#endif

/*----------------- Restore "schedtsk" context. -----------------*/

#if USE_FPU			// Restore FPU context
	ldr	r0, [r8, #TCB_tskatr]
34180806:	f8d8 0010 	ldr.w	r0, [r8, #16]
	ands	r0, r0, #TA_FPU
3418080a:	f410 5080 	ands.w	r0, r0, #4096	@ 0x1000
	beq	l_dispatch_200			// schedtsk is not a TA_FPU attribute.
3418080e:	d006      	beq.n	3418081e <l_dispatch_200>

	ldr	r3,[sp]				// load FPU usage flag
34180810:	9b00      	ldr	r3, [sp, #0]
	ands	r3, r3, #EXPRN_NO_FPU
34180812:	f013 0310 	ands.w	r3, r3, #16
	bne	l_dispatch_200			// schedtsk does not execute FPU instructions.
34180816:	d102      	bne.n	3418081e <l_dispatch_200>

	pop	{r3}
34180818:	bc08      	pop	{r3}
	vpop	{s16-s31}			// Pop FPU register (S16-S31)
3418081a:	ecbd 8a10 	vpop	{s16-s31}

3418081e <l_dispatch_200>:

l_dispatch_200:			//  End of FPU register restore process
#endif	/* USE_FPU */

	pop	{lr}
3418081e:	f85d eb04 	ldr.w	lr, [sp], #4
	pop	{r4-r11}
34180822:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	ldr	r0, =Csym(knl_dispatch_disabled)
34180826:	4803      	ldr	r0, [pc, #12]	@ (34180834 <l_dispatch_200+0x16>)
	ldr	r1, =0
34180828:	f04f 0100 	mov.w	r1, #0
	str	r1, [r0]			// Dispatch enable
3418082c:	6001      	str	r1, [r0, #0]

	msr	basepri, r1			// Enable inperrupt
3418082e:	f381 8811 	msr	BASEPRI, r1

	bx	lr
34180832:	4770      	bx	lr
	ldr	r0, =Csym(knl_dispatch_disabled)
34180834:	341c4994 	.word	0x341c4994
	ldr	r0, =Csym(knl_ctxtsk)
34180838:	341c4998 	.word	0x341c4998
	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)
3418083c:	341c2920 	.word	0x341c2920
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
34180840:	341c499c 	.word	0x341c499c
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
34180844:	341c281c 	.word	0x341c281c

34180848 <IHUdlOiUXA>:
34180848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418084c:	4604      	mov	r4, r0
3418084e:	ed2d 8b10 	vpush	{d8-d15}
34180852:	b086      	sub	sp, #24
34180854:	ed91 0a01 	vldr	s0, [r1, #4]
34180858:	eeb8 1b40 	vcvt.f64.u32	d1, s0
3418085c:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 34180a20 <??IHUdlOiUXA_0>
34180860:	f504 7524 	add.w	r5, r4, #656	@ 0x290
34180864:	f104 0648 	add.w	r6, r4, #72	@ 0x48
34180868:	ee21 1b03 	vmul.f64	d1, d1, d3
3418086c:	edd1 0a00 	vldr	s1, [r1]
34180870:	ed95 3b06 	vldr	d3, [r5, #24]
34180874:	ed96 4b00 	vldr	d4, [r6]
34180878:	eeb8 2b60 	vcvt.f64.u32	d2, s1
3418087c:	ed91 cb02 	vldr	d12, [r1, #8]
34180880:	ed91 db04 	vldr	d13, [r1, #16]
34180884:	ee84 4b03 	vdiv.f64	d4, d4, d3
34180888:	ed96 bb04 	vldr	d11, [r6, #16]
3418088c:	eefc 0bc4 	vcvt.u32.f64	s1, d4
34180890:	eeb8 4b60 	vcvt.f64.u32	d4, s1
34180894:	ee24 ab03 	vmul.f64	d10, d4, d3
34180898:	ed95 3b04 	vldr	d3, [r5, #16]
3418089c:	ed8d 3b02 	vstr	d3, [sp, #8]
341808a0:	ed95 4b00 	vldr	d4, [r5]
341808a4:	ed8d 4b04 	vstr	d4, [sp, #16]
341808a8:	eefc 0bca 	vcvt.u32.f64	s1, d10
341808ac:	ed95 3b02 	vldr	d3, [r5, #8]
341808b0:	ee10 8a90 	vmov	r8, s1
341808b4:	ed8d 3b00 	vstr	d3, [sp]
341808b8:	edd5 0a09 	vldr	s1, [r5, #36]	@ 0x24
341808bc:	eeb7 3ae0 	vcvt.f64.f32	d3, s1
341808c0:	2001      	movs	r0, #1
341808c2:	eeb5 3b40 	vcmp.f64	d3, #0.0
341808c6:	ed9f 8bc9 	vldr	d8, [pc, #804]	@ 34180bec <??DataTable1>
341808ca:	ed9f 9bc8 	vldr	d9, [pc, #800]	@ 34180bec <??DataTable1>
341808ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341808d2:	dc06      	bgt.n	341808e2 <??IHUdlOiUXA_1>
341808d4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
341808d6:	f8df 0910 	ldr.w	r0, [pc, #2320]	@ 341811e8 <??DataTable4>
341808da:	4788      	blx	r1
341808dc:	f04f 30ff 	mov.w	r0, #4294967295
341808e0:	e17f      	b.n	34180be2 <??IHUdlOiUXA_2>

341808e2 <??IHUdlOiUXA_1>:
341808e2:	eeb8 0b40 	vcvt.f64.u32	d0, s0
341808e6:	ed9f 5bc3 	vldr	d5, [pc, #780]	@ 34180bf4 <??DataTable1_1>
341808ea:	ee20 0b05 	vmul.f64	d0, d0, d5
341808ee:	eeb4 2b40 	vcmp.f64	d2, d0
341808f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341808f6:	d514      	bpl.n	34180922 <??IHUdlOiUXA_3>
341808f8:	ed96 6b0a 	vldr	d6, [r6, #40]	@ 0x28
341808fc:	ed9f 4bbf 	vldr	d4, [pc, #764]	@ 34180bfc <??DataTable1_2>
34180900:	ed9f 7bc0 	vldr	d7, [pc, #768]	@ 34180c04 <??DataTable1_3>
34180904:	ee36 0b04 	vadd.f64	d0, d6, d4
34180908:	eeb4 0b47 	vcmp.f64	d0, d7
3418090c:	ed86 0b0a 	vstr	d0, [r6, #40]	@ 0x28
34180910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180914:	db05      	blt.n	34180922 <??IHUdlOiUXA_3>
34180916:	f8df 28d4 	ldr.w	r2, [pc, #2260]	@ 341811ec <??DataTable4_1>
3418091a:	f8df 38d4 	ldr.w	r3, [pc, #2260]	@ 341811f0 <??DataTable4_2>
3418091e:	e9c6 230a 	strd	r2, r3, [r6, #40]	@ 0x28

34180922 <??IHUdlOiUXA_3>:
34180922:	f000 fa1b 	bl	34180d5c <?Subroutine1>

34180926 <??CrossCallReturnLabel_3>:
34180926:	d514      	bpl.n	34180952 <??IHUdlOiUXA_4>
34180928:	ed96 0b0a 	vldr	d0, [r6, #40]	@ 0x28
3418092c:	ed9f 2bb7 	vldr	d2, [pc, #732]	@ 34180c0c <??DataTable1_4>
34180930:	ed9f 5bb8 	vldr	d5, [pc, #736]	@ 34180c14 <??DataTable1_5>
34180934:	ee30 0b02 	vadd.f64	d0, d0, d2
34180938:	eeb4 0b45 	vcmp.f64	d0, d5
3418093c:	ed86 0b0a 	vstr	d0, [r6, #40]	@ 0x28
34180940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180944:	d505      	bpl.n	34180952 <??IHUdlOiUXA_4>
34180946:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
3418094a:	f8df 38a8 	ldr.w	r3, [pc, #2216]	@ 341811f4 <??DataTable4_3>
3418094e:	e9c6 230a 	strd	r2, r3, [r6, #40]	@ 0x28

34180952 <??IHUdlOiUXA_4>:
34180952:	7a31      	ldrb	r1, [r6, #8]
34180954:	f104 0778 	add.w	r7, r4, #120	@ 0x78
34180958:	eeb0 ebcd 	vabs.f64	d14, d13
3418095c:	eeb0 fbcc 	vabs.f64	d15, d12
34180960:	2901      	cmp	r1, #1
34180962:	d131      	bne.n	341809c8 <??IHUdlOiUXA_5>
34180964:	ee3c 0b4d 	vsub.f64	d0, d12, d13
34180968:	ed9f 2bac 	vldr	d2, [pc, #688]	@ 34180c1c <??DataTable1_6>
3418096c:	ee80 8b02 	vdiv.f64	d8, d0, d2
34180970:	eeb0 1bc8 	vabs.f64	d1, d8
34180974:	ee3c 0b0d 	vadd.f64	d0, d12, d13
34180978:	ed9f 5ba8 	vldr	d5, [pc, #672]	@ 34180c1c <??DataTable1_6>
3418097c:	eeb4 3b41 	vcmp.f64	d3, d1
34180980:	ee80 9b05 	vdiv.f64	d9, d0, d5
34180984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180988:	bfa2      	ittt	ge
3418098a:	eeb0 0bc9 	vabsge.f64	d0, d9
3418098e:	eeb4 3b40 	vcmpge.f64	d3, d0
34180992:	eef1 fa10 	vmrsge	APSR_nzcv, fpscr
34180996:	db02      	blt.n	3418099e <??IHUdlOiUXA_6>
34180998:	2000      	movs	r0, #0
3418099a:	7038      	strb	r0, [r7, #0]
3418099c:	e023      	b.n	341809e6 <??IHUdlOiUXA_7>

3418099e <??IHUdlOiUXA_6>:
3418099e:	eeb0 0bc9 	vabs.f64	d0, d9
341809a2:	eeb4 3b40 	vcmp.f64	d3, d0
341809a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341809aa:	d51c      	bpl.n	341809e6 <??IHUdlOiUXA_7>
341809ac:	ee89 0b08 	vdiv.f64	d0, d9, d8
341809b0:	ed95 2a0a 	vldr	s4, [r5, #40]	@ 0x28
341809b4:	eeb0 0bc0 	vabs.f64	d0, d0
341809b8:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
341809bc:	eeb4 0b42 	vcmp.f64	d0, d2
341809c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341809c4:	db0f      	blt.n	341809e6 <??IHUdlOiUXA_7>
341809c6:	e00d      	b.n	341809e4 <??IHUdlOiUXA_8>

341809c8 <??IHUdlOiUXA_5>:
341809c8:	eeb0 1b4f 	vmov.f64	d1, d15
341809cc:	eeb4 1b4e 	vcmp.f64	d1, d14
341809d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341809d4:	bf48      	it	mi
341809d6:	eeb0 1b4e 	vmovmi.f64	d1, d14
341809da:	eeb4 3b41 	vcmp.f64	d3, d1
341809de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341809e2:	db00      	blt.n	341809e6 <??IHUdlOiUXA_7>

341809e4 <??IHUdlOiUXA_8>:
341809e4:	2000      	movs	r0, #0

341809e6 <??IHUdlOiUXA_7>:
341809e6:	2100      	movs	r1, #0
341809e8:	7631      	strb	r1, [r6, #24]
341809ea:	2800      	cmp	r0, #0
341809ec:	d06e      	beq.n	34180acc <??IHUdlOiUXA_9>
341809ee:	eef7 0bcb 	vcvt.f32.f64	s1, d11
341809f2:	eeb7 0bc1 	vcvt.f32.f64	s0, d1
341809f6:	f023 fe97 	bl	341a4728 <powf>
341809fa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
341809fe:	eeb2 2b04 	vmov.f64	d2, #36	@ 0x41200000  10.0
34180a02:	eeb4 eb4f 	vcmp.f64	d14, d15
34180a06:	ee20 0b02 	vmul.f64	d0, d0, d2
34180a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a0e:	d50b      	bpl.n	34180a28 <??IHUdlOiUXA_10>
34180a10:	ed9f 4b76 	vldr	d4, [pc, #472]	@ 34180bec <??DataTable1>
34180a14:	eeb4 cb44 	vcmp.f64	d12, d4
34180a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a1c:	d50b      	bpl.n	34180a36 <??IHUdlOiUXA_11>
34180a1e:	e00d      	b.n	34180a3c <??IHUdlOiUXA_12>

34180a20 <??IHUdlOiUXA_0>:
34180a20:	3333 3333 3333 3fc3                         333333.?

34180a28 <??IHUdlOiUXA_10>:
34180a28:	ed9f 2b70 	vldr	d2, [pc, #448]	@ 34180bec <??DataTable1>
34180a2c:	eeb4 db42 	vcmp.f64	d13, d2
34180a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180a34:	d502      	bpl.n	34180a3c <??IHUdlOiUXA_12>

34180a36 <??IHUdlOiUXA_11>:
34180a36:	ee3a 0b00 	vadd.f64	d0, d10, d0
34180a3a:	e001      	b.n	34180a40 <??IHUdlOiUXA_13>

34180a3c <??IHUdlOiUXA_12>:
34180a3c:	ee3a 0b40 	vsub.f64	d0, d10, d0

34180a40 <??IHUdlOiUXA_13>:
34180a40:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
34180a44:	ed90 1b04 	vldr	d1, [r0, #16]
34180a48:	f000 f8ec 	bl	34180c24 <?Subroutine2>

34180a4c <??CrossCallReturnLabel_7>:
34180a4c:	bf44      	itt	mi
34180a4e:	ed9d bb00 	vldrmi	d11, [sp]
34180a52:	eeb0 0b41 	vmovmi.f64	d0, d1
34180a56:	ed90 1b02 	vldr	d1, [r0, #8]
34180a5a:	f000 fb77 	bl	3418114c <?Subroutine3>

34180a5e <??CrossCallReturnLabel_10>:
34180a5e:	bf44      	itt	mi
34180a60:	ed9d bb00 	vldrmi	d11, [sp]
34180a64:	eeb0 0b41 	vmovmi.f64	d0, d1
34180a68:	ed95 1b06 	vldr	d1, [r5, #24]
34180a6c:	ee80 0b01 	vdiv.f64	d0, d0, d1
34180a70:	7a31      	ldrb	r1, [r6, #8]
34180a72:	eebc 0bc0 	vcvt.u32.f64	s0, d0
34180a76:	eeb8 0b40 	vcvt.f64.u32	d0, s0
34180a7a:	ee20 ab01 	vmul.f64	d10, d0, d1
34180a7e:	2901      	cmp	r1, #1
34180a80:	d15a      	bne.n	34180b38 <??IHUdlOiUXA_14>
34180a82:	8801      	ldrh	r1, [r0, #0]
34180a84:	ee00 8a10 	vmov	s0, r8
34180a88:	eeb8 cb40 	vcvt.f64.u32	d12, s0
34180a8c:	2903      	cmp	r1, #3
34180a8e:	d21e      	bcs.n	34180ace <??IHUdlOiUXA_15>
34180a90:	f104 0380 	add.w	r3, r4, #128	@ 0x80
34180a94:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
34180a98:	f104 0298 	add.w	r2, r4, #152	@ 0x98
34180a9c:	ed81 cb00 	vstr	d12, [r1]
34180aa0:	8801      	ldrh	r1, [r0, #0]
34180aa2:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
34180aa6:	f104 01b0 	add.w	r1, r4, #176	@ 0xb0
34180aaa:	ed83 ab00 	vstr	d10, [r3]
34180aae:	8802      	ldrh	r2, [r0, #0]
34180ab0:	f104 03b8 	add.w	r3, r4, #184	@ 0xb8
34180ab4:	eb01 1102 	add.w	r1, r1, r2, lsl #4
34180ab8:	ed81 8b00 	vstr	d8, [r1]
34180abc:	8801      	ldrh	r1, [r0, #0]
34180abe:	eb03 1201 	add.w	r2, r3, r1, lsl #4
34180ac2:	ed82 9b00 	vstr	d9, [r2]
34180ac6:	8801      	ldrh	r1, [r0, #0]
34180ac8:	1c49      	adds	r1, r1, #1
34180aca:	8001      	strh	r1, [r0, #0]

34180acc <??IHUdlOiUXA_9>:
34180acc:	e034      	b.n	34180b38 <??IHUdlOiUXA_14>

34180ace <??IHUdlOiUXA_15>:
34180ace:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
34180ad2:	ee3a 0b40 	vsub.f64	d0, d10, d0
34180ad6:	eeb0 1bc0 	vabs.f64	d1, d0
34180ada:	ed95 2a0b 	vldr	s4, [r5, #44]	@ 0x2c
34180ade:	eeb7 0ac2 	vcvt.f64.f32	d0, s4
34180ae2:	f000 f89f 	bl	34180c24 <?Subroutine2>

34180ae6 <??CrossCallReturnLabel_8>:
34180ae6:	db22      	blt.n	34180b2e <??IHUdlOiUXA_16>
34180ae8:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
34180aec:	ee3a 1b41 	vsub.f64	d1, d10, d1
34180af0:	eeb0 1bc1 	vabs.f64	d1, d1
34180af4:	f000 f896 	bl	34180c24 <?Subroutine2>

34180af8 <??CrossCallReturnLabel_9>:
34180af8:	d519      	bpl.n	34180b2e <??IHUdlOiUXA_16>
34180afa:	ed97 2b12 	vldr	d2, [r7, #72]	@ 0x48
34180afe:	ee38 0b42 	vsub.f64	d0, d8, d2
34180b02:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
34180b06:	ee39 1b41 	vsub.f64	d1, d9, d1
34180b0a:	ee20 0b00 	vmul.f64	d0, d0, d0
34180b0e:	ee01 0b01 	vmla.f64	d0, d1, d1
34180b12:	f023 fb45 	bl	341a41a0 <sqrt>
34180b16:	ed95 1a0c 	vldr	s2, [r5, #48]	@ 0x30
34180b1a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34180b1e:	f000 fb15 	bl	3418114c <?Subroutine3>

34180b22 <??CrossCallReturnLabel_11>:
34180b22:	d504      	bpl.n	34180b2e <??IHUdlOiUXA_16>
34180b24:	2001      	movs	r0, #1
34180b26:	7038      	strb	r0, [r7, #0]
34180b28:	eeb0 ab4c 	vmov.f64	d10, d12
34180b2c:	e004      	b.n	34180b38 <??IHUdlOiUXA_14>

34180b2e <??IHUdlOiUXA_16>:
34180b2e:	7839      	ldrb	r1, [r7, #0]
34180b30:	2901      	cmp	r1, #1
34180b32:	bf04      	itt	eq
34180b34:	2200      	moveq	r2, #0
34180b36:	703a      	strbeq	r2, [r7, #0]

34180b38 <??IHUdlOiUXA_14>:
34180b38:	7838      	ldrb	r0, [r7, #0]
34180b3a:	bb30      	cbnz	r0, 34180b8a <??IHUdlOiUXA_17>

34180b3c <??IHUdlOiUXA_18>:
34180b3c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
34180b40:	3180      	adds	r1, #128	@ 0x80
34180b42:	ed91 0b02 	vldr	d0, [r1, #8]
34180b46:	ed91 1b08 	vldr	d1, [r1, #32]
34180b4a:	ed81 0b00 	vstr	d0, [r1]
34180b4e:	ed81 1b06 	vstr	d1, [r1, #24]
34180b52:	eb04 1100 	add.w	r1, r4, r0, lsl #4
34180b56:	1c40      	adds	r0, r0, #1
34180b58:	31b0      	adds	r1, #176	@ 0xb0
34180b5a:	ed91 0b04 	vldr	d0, [r1, #16]
34180b5e:	ed91 1b06 	vldr	d1, [r1, #24]
34180b62:	ed81 0b00 	vstr	d0, [r1]
34180b66:	ed81 1b02 	vstr	d1, [r1, #8]
34180b6a:	2801      	cmp	r0, #1
34180b6c:	dde6      	ble.n	34180b3c <??IHUdlOiUXA_18>
34180b6e:	ed95 0b06 	vldr	d0, [r5, #24]
34180b72:	ed96 1b00 	vldr	d1, [r6]
34180b76:	f000 f8f6 	bl	34180d66 <?Subroutine0>

34180b7a <??CrossCallReturnLabel_0>:
34180b7a:	ed87 0b06 	vstr	d0, [r7, #24]
34180b7e:	ed87 ab0c 	vstr	d10, [r7, #48]	@ 0x30
34180b82:	ed87 8b16 	vstr	d8, [r7, #88]	@ 0x58
34180b86:	ed87 9b18 	vstr	d9, [r7, #96]	@ 0x60

34180b8a <??IHUdlOiUXA_17>:
34180b8a:	eebc 0bca 	vcvt.u32.f64	s0, d10
34180b8e:	ee10 0a10 	vmov	r0, s0
34180b92:	4580      	cmp	r8, r0
34180b94:	bf1c      	itt	ne
34180b96:	2001      	movne	r0, #1
34180b98:	7630      	strbne	r0, [r6, #24]
34180b9a:	ed96 0b08 	vldr	d0, [r6, #32]
34180b9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
34180ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ba6:	bfc4      	itt	gt
34180ba8:	2001      	movgt	r0, #1
34180baa:	7630      	strbgt	r0, [r6, #24]
34180bac:	7e30      	ldrb	r0, [r6, #24]
34180bae:	b910      	cbnz	r0, 34180bb6 <??IHUdlOiUXA_19>
34180bb0:	ed9d 0b00 	vldr	d0, [sp]
34180bb4:	e00a      	b.n	34180bcc <??IHUdlOiUXA_20>

34180bb6 <??IHUdlOiUXA_19>:
34180bb6:	ed9d 0b02 	vldr	d0, [sp, #8]
34180bba:	eeb4 bb40 	vcmp.f64	d11, d0
34180bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180bc2:	bf44      	itt	mi
34180bc4:	ed9d 1b04 	vldrmi	d1, [sp, #16]
34180bc8:	ee3b 0b01 	vaddmi.f64	d0, d11, d1

34180bcc <??IHUdlOiUXA_20>:
34180bcc:	ed86 0b04 	vstr	d0, [r6, #16]
34180bd0:	ed95 0b06 	vldr	d0, [r5, #24]
34180bd4:	ee8a 1b00 	vdiv.f64	d1, d10, d0
34180bd8:	f000 f8c7 	bl	34180d6a <??Subroutine0_0>

34180bdc <??CrossCallReturnLabel_1>:
34180bdc:	ed86 0b00 	vstr	d0, [r6]
34180be0:	2001      	movs	r0, #1

34180be2 <??IHUdlOiUXA_2>:
34180be2:	b006      	add	sp, #24
34180be4:	ecbd 8b10 	vpop	{d8-d15}
34180be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34180bec <??DataTable1>:
	...

34180bf4 <??DataTable1_1>:
34180bf4:	999a 9999 9999 3fa9                         .......?

34180bfc <??DataTable1_2>:
34180bfc:	147b 47ae 7ae1 3f84                         {..G.z.?

34180c04 <??DataTable1_3>:
34180c04:	3335 3333 3333 3fc3                         533333.?

34180c0c <??DataTable1_4>:
34180c0c:	147b 47ae 7ae1 bf84                         {..G.z..

34180c14 <??DataTable1_5>:
34180c14:	1111 1111 1111 3fb1                         .......?

34180c1c <??DataTable1_6>:
34180c1c:	3bcd 667f a09e 3ff6                         .;.f...?

34180c24 <?Subroutine2>:
34180c24:	eeb4 1b40 	vcmp.f64	d1, d0
34180c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c2c:	4770      	bx	lr

34180c2e <olBkEfVABz>:
34180c2e:	f500 712a 	add.w	r1, r0, #680	@ 0x2a8
34180c32:	b5f0      	push	{r4, r5, r6, r7, lr}
34180c34:	ed91 0b00 	vldr	d0, [r1]
34180c38:	ed90 1b12 	vldr	d1, [r0, #72]	@ 0x48
34180c3c:	f000 f893 	bl	34180d66 <?Subroutine0>

34180c40 <??CrossCallReturnLabel_2>:
34180c40:	ed90 1b1a 	vldr	d1, [r0, #104]	@ 0x68
34180c44:	eeb5 1b40 	vcmp.f64	d1, #0.0
34180c48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34180c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c50:	bfc8      	it	gt
34180c52:	eeb7 0bc1 	vcvtgt.f32.f64	s0, d1
34180c56:	f100 02e8 	add.w	r2, r0, #232	@ 0xe8
34180c5a:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
34180c5e:	ed92 1b02 	vldr	d1, [r2, #8]
34180c62:	f000 f87b 	bl	34180d5c <?Subroutine1>

34180c66 <??CrossCallReturnLabel_4>:
34180c66:	bf48      	it	mi
34180c68:	eeb7 0bc1 	vcvtmi.f32.f64	s0, d1
34180c6c:	ed92 1b00 	vldr	d1, [r2]
34180c70:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
34180c74:	eeb4 3b41 	vcmp.f64	d3, d1
34180c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180c7c:	bf48      	it	mi
34180c7e:	eeb7 0bc1 	vcvtmi.f32.f64	s0, d1
34180c82:	eeb7 1ac0 	vcvt.f64.f32	d1, s0
34180c86:	ed80 1b12 	vstr	d1, [r0, #72]	@ 0x48
34180c8a:	ed91 0a02 	vldr	s0, [r1, #8]
34180c8e:	f8d0 1274 	ldr.w	r1, [r0, #628]	@ 0x274
34180c92:	edd1 0a00 	vldr	s1, [r1]
34180c96:	eeb7 2ae0 	vcvt.f64.f32	d2, s1
34180c9a:	f000 f85f 	bl	34180d5c <?Subroutine1>

34180c9e <??CrossCallReturnLabel_5>:
34180c9e:	bf48      	it	mi
34180ca0:	eeb1 0a40 	vnegmi.f32	s0, s0
34180ca4:	2100      	movs	r1, #0
34180ca6:	e000      	b.n	34180caa <??olBkEfVABz_0>

34180ca8 <??olBkEfVABz_1>:
34180ca8:	1c49      	adds	r1, r1, #1

34180caa <??olBkEfVABz_0>:
34180caa:	8a13      	ldrh	r3, [r2, #16]
34180cac:	b28c      	uxth	r4, r1
34180cae:	1e5d      	subs	r5, r3, #1
34180cb0:	42ac      	cmp	r4, r5
34180cb2:	d24d      	bcs.n	34180d50 <??olBkEfVABz_2>
34180cb4:	b28b      	uxth	r3, r1
34180cb6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
34180cba:	ed90 2b12 	vldr	d2, [r0, #72]	@ 0x48
34180cbe:	edd6 0a44 	vldr	s1, [r6, #272]	@ 0x110
34180cc2:	ee70 0a80 	vadd.f32	s1, s1, s0
34180cc6:	eeb7 1ae0 	vcvt.f64.f32	d1, s1
34180cca:	f000 f847 	bl	34180d5c <?Subroutine1>

34180cce <??CrossCallReturnLabel_6>:
34180cce:	dbeb      	blt.n	34180ca8 <??olBkEfVABz_1>
34180cd0:	2144      	movs	r1, #68	@ 0x44
34180cd2:	434b      	muls	r3, r1
34180cd4:	18c1      	adds	r1, r0, r3
34180cd6:	f501 7290 	add.w	r2, r1, #288	@ 0x120

34180cda <??olBkEfVABz_3>:
34180cda:	ed90 0b1a 	vldr	d0, [r0, #104]	@ 0x68
34180cde:	eeb5 0b40 	vcmp.f64	d0, #0.0
34180ce2:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
34180ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180cea:	dc07      	bgt.n	34180cfc <??olBkEfVABz_4>
34180cec:	f8d0 1274 	ldr.w	r1, [r0, #628]	@ 0x274
34180cf0:	ed91 0a00 	vldr	s0, [r1]
34180cf4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180cf8:	ed80 0b12 	vstr	d0, [r0, #72]	@ 0x48

34180cfc <??olBkEfVABz_4>:
34180cfc:	2100      	movs	r1, #0

34180cfe <??olBkEfVABz_5>:
34180cfe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
34180d02:	eb02 0381 	add.w	r3, r2, r1, lsl #2
34180d06:	685c      	ldr	r4, [r3, #4]
34180d08:	eb00 0281 	add.w	r2, r0, r1, lsl #2
34180d0c:	1c49      	adds	r1, r1, #1
34180d0e:	6054      	str	r4, [r2, #4]
34180d10:	2904      	cmp	r1, #4
34180d12:	d3f4      	bcc.n	34180cfe <??olBkEfVABz_5>
34180d14:	2100      	movs	r1, #0

34180d16 <??olBkEfVABz_6>:
34180d16:	230c      	movs	r3, #12
34180d18:	2200      	movs	r2, #0
34180d1a:	434b      	muls	r3, r1

34180d1c <??olBkEfVABz_7>:
34180d1c:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
34180d20:	18c4      	adds	r4, r0, r3
34180d22:	eb04 0482 	add.w	r4, r4, r2, lsl #2
34180d26:	441d      	add	r5, r3
34180d28:	eb05 0682 	add.w	r6, r5, r2, lsl #2
34180d2c:	6977      	ldr	r7, [r6, #20]
34180d2e:	1c52      	adds	r2, r2, #1
34180d30:	2a03      	cmp	r2, #3
34180d32:	6167      	str	r7, [r4, #20]
34180d34:	d3f2      	bcc.n	34180d1c <??olBkEfVABz_7>
34180d36:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
34180d3a:	eb02 0381 	add.w	r3, r2, r1, lsl #2
34180d3e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
34180d40:	eb00 0281 	add.w	r2, r0, r1, lsl #2
34180d44:	1c49      	adds	r1, r1, #1
34180d46:	6394      	str	r4, [r2, #56]	@ 0x38
34180d48:	2903      	cmp	r1, #3
34180d4a:	d3e4      	bcc.n	34180d16 <??olBkEfVABz_6>
34180d4c:	2001      	movs	r0, #1
34180d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

34180d50 <??olBkEfVABz_2>:
34180d50:	2144      	movs	r1, #68	@ 0x44
34180d52:	434b      	muls	r3, r1
34180d54:	18c1      	adds	r1, r0, r3
34180d56:	f101 02dc 	add.w	r2, r1, #220	@ 0xdc
34180d5a:	e7be      	b.n	34180cda <??olBkEfVABz_3>

34180d5c <?Subroutine1>:
34180d5c:	eeb4 1b42 	vcmp.f64	d1, d2
34180d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180d64:	4770      	bx	lr

34180d66 <?Subroutine0>:
34180d66:	ee81 1b00 	vdiv.f64	d1, d1, d0

34180d6a <??Subroutine0_0>:
34180d6a:	eebc 1bc1 	vcvt.u32.f64	s2, d1
34180d6e:	eeb8 1b41 	vcvt.f64.u32	d1, s2
34180d72:	ee21 0b00 	vmul.f64	d0, d1, d0
34180d76:	4770      	bx	lr

34180d78 <evision_api_awb_new>:
34180d78:	b510      	push	{r4, lr}
34180d7a:	b090      	sub	sp, #64	@ 0x40
34180d7c:	0001      	movs	r1, r0
34180d7e:	bf08      	it	eq
34180d80:	2000      	moveq	r0, #0
34180d82:	d012      	beq.n	34180daa <??evision_api_awb_new_0>
34180d84:	f8df 4470 	ldr.w	r4, [pc, #1136]	@ 341811f8 <??DataTable4_4>
34180d88:	2100      	movs	r1, #0
34180d8a:	7021      	strb	r1, [r4, #0]
34180d8c:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34180d90:	f8df 3468 	ldr.w	r3, [pc, #1128]	@ 341811fc <??DataTable4_5>
34180d94:	f20f 4298 	addw	r2, pc, #1176	@ 0x498
34180d98:	2140      	movs	r1, #64	@ 0x40
34180d9a:	4668      	mov	r0, sp
34180d9c:	f022 f974 	bl	341a3088 <sniprintf>
34180da0:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
34180da4:	4668      	mov	r0, sp
34180da6:	4788      	blx	r1
34180da8:	4620      	mov	r0, r4

34180daa <??evision_api_awb_new_0>:
34180daa:	b010      	add	sp, #64	@ 0x40
34180dac:	bd10      	pop	{r4, pc}

34180dae <evision_api_awb_delete>:
34180dae:	b910      	cbnz	r0, 34180db6 <??evision_api_awb_delete_0>
34180db0:	f04f 30ff 	mov.w	r0, #4294967295
34180db4:	4770      	bx	lr

34180db6 <??evision_api_awb_delete_0>:
34180db6:	2001      	movs	r0, #1
34180db8:	4770      	bx	lr

34180dba <evision_api_awb_set_profile>:
34180dba:	b5f0      	push	{r4, r5, r6, r7, lr}
34180dbc:	ed80 0a00 	vstr	s0, [r0]
34180dc0:	2400      	movs	r4, #0

34180dc2 <??evision_api_awb_set_profile_0>:
34180dc2:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
34180dc6:	eb00 0584 	add.w	r5, r0, r4, lsl #2
34180dca:	1c64      	adds	r4, r4, #1
34180dcc:	606e      	str	r6, [r5, #4]
34180dce:	2c03      	cmp	r4, #3
34180dd0:	d9f7      	bls.n	34180dc2 <??evision_api_awb_set_profile_0>
34180dd2:	2100      	movs	r1, #0

34180dd4 <??evision_api_awb_set_profile_1>:
34180dd4:	250c      	movs	r5, #12
34180dd6:	434d      	muls	r5, r1
34180dd8:	2400      	movs	r4, #0
34180dda:	1957      	adds	r7, r2, r5

34180ddc <??evision_api_awb_set_profile_2>:
34180ddc:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
34180de0:	1946      	adds	r6, r0, r5
34180de2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
34180de6:	1c64      	adds	r4, r4, #1
34180de8:	f8c6 c014 	str.w	ip, [r6, #20]
34180dec:	2c03      	cmp	r4, #3
34180dee:	d3f5      	bcc.n	34180ddc <??evision_api_awb_set_profile_2>
34180df0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
34180df4:	eb00 0481 	add.w	r4, r0, r1, lsl #2
34180df8:	1c49      	adds	r1, r1, #1
34180dfa:	63a5      	str	r5, [r4, #56]	@ 0x38
34180dfc:	2903      	cmp	r1, #3
34180dfe:	d3e9      	bcc.n	34180dd4 <??evision_api_awb_set_profile_1>
34180e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

34180e02 <evision_api_awb_init_profiles>:
34180e02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34180e06:	ea5f 0b00 	movs.w	fp, r0
34180e0a:	ed2d 8b04 	vpush	{d8-d9}
34180e0e:	4608      	mov	r0, r1
34180e10:	b0c6      	sub	sp, #280	@ 0x118
34180e12:	eeb0 8b40 	vmov.f64	d8, d0
34180e16:	eeb0 9b41 	vmov.f64	d9, d1
34180e1a:	4611      	mov	r1, r2
34180e1c:	461f      	mov	r7, r3
34180e1e:	bf08      	it	eq
34180e20:	f04f 30ff 	moveq.w	r0, #4294967295
34180e24:	f000 8186 	beq.w	34181134 <??evision_api_awb_init_profiles_0>
34180e28:	4603      	mov	r3, r0
34180e2a:	2400      	movs	r4, #0
34180e2c:	f8df 03d0 	ldr.w	r0, [pc, #976]	@ 34181200 <??DataTable4_6>
34180e30:	e9cb 4012 	strd	r4, r0, [fp, #72]	@ 0x48
34180e34:	f10b 0050 	add.w	r0, fp, #80	@ 0x50
34180e38:	2600      	movs	r6, #0
34180e3a:	f8df 53c8 	ldr.w	r5, [pc, #968]	@ 34181204 <??DataTable4_7>
34180e3e:	e9c0 6502 	strd	r6, r5, [r0, #8]
34180e42:	2200      	movs	r2, #0
34180e44:	7402      	strb	r2, [r0, #16]
34180e46:	f10b 0450 	add.w	r4, fp, #80	@ 0x50
34180e4a:	f8df 53bc 	ldr.w	r5, [pc, #956]	@ 34181208 <??DataTable4_8>
34180e4e:	e9c4 6506 	strd	r6, r5, [r4, #24]
34180e52:	f8df 43b8 	ldr.w	r4, [pc, #952]	@ 3418120c <??DataTable4_9>
34180e56:	f8df 53b8 	ldr.w	r5, [pc, #952]	@ 34181210 <??DataTable4_10>
34180e5a:	e9c0 4508 	strd	r4, r5, [r0, #32]
34180e5e:	f8ab 20e0 	strh.w	r2, [fp, #224]	@ 0xe0
34180e62:	2000      	movs	r0, #0
34180e64:	f88b 0078 	strb.w	r0, [fp, #120]	@ 0x78
34180e68:	2201      	movs	r2, #1
34180e6a:	f50b 741d 	add.w	r4, fp, #628	@ 0x274
34180e6e:	80a2      	strh	r2, [r4, #4]
34180e70:	f50b 7420 	add.w	r4, fp, #640	@ 0x280
34180e74:	f8df 2394 	ldr.w	r2, [pc, #916]	@ 3418120c <??DataTable4_9>
34180e78:	e9c4 2504 	strd	r2, r5, [r4, #16]
34180e7c:	f8df 5384 	ldr.w	r5, [pc, #900]	@ 34181204 <??DataTable4_7>
34180e80:	e9c4 0506 	strd	r0, r5, [r4, #24]
34180e84:	f8df 538c 	ldr.w	r5, [pc, #908]	@ 34181214 <??DataTable4_11>
34180e88:	e9c4 0508 	strd	r0, r5, [r4, #32]
34180e8c:	f8df 5388 	ldr.w	r5, [pc, #904]	@ 34181218 <??DataTable4_12>
34180e90:	e9c4 0500 	strd	r0, r5, [r4]
34180e94:	f8df 5384 	ldr.w	r5, [pc, #900]	@ 3418121c <??DataTable4_13>
34180e98:	e9c4 0502 	strd	r0, r5, [r4, #8]
34180e9c:	4dd9      	ldr	r5, [pc, #868]	@ (34181204 <??DataTable4_7>)
34180e9e:	e9c4 050a 	strd	r0, r5, [r4, #40]	@ 0x28
34180ea2:	48df      	ldr	r0, [pc, #892]	@ (34181220 <??DataTable4_14>)
34180ea4:	6320      	str	r0, [r4, #48]	@ 0x30
34180ea6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
34180eaa:	6362      	str	r2, [r4, #52]	@ 0x34
34180eac:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
34180eb0:	63a0      	str	r0, [r4, #56]	@ 0x38
34180eb2:	4adc      	ldr	r2, [pc, #880]	@ (34181224 <??DataTable4_15>)
34180eb4:	63e2      	str	r2, [r4, #60]	@ 0x3c
34180eb6:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
34180eba:	6420      	str	r0, [r4, #64]	@ 0x40
34180ebc:	f8df 9368 	ldr.w	r9, [pc, #872]	@ 34181228 <??DataTable4_16>
34180ec0:	f04f 3aff 	mov.w	sl, #4294967295
34180ec4:	001a      	movs	r2, r3
34180ec6:	f000 8120 	beq.w	3418110a <??evision_api_awb_init_profiles_1>
34180eca:	2b05      	cmp	r3, #5
34180ecc:	f200 811d 	bhi.w	3418110a <??evision_api_awb_init_profiles_1>
34180ed0:	ed97 0a00 	vldr	s0, [r7]
34180ed4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180ed8:	eeb4 0b48 	vcmp.f64	d0, d8
34180edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ee0:	d50e      	bpl.n	34180f00 <??evision_api_awb_init_profiles_2>
34180ee2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
34180ee4:	f109 0044 	add.w	r0, r9, #68	@ 0x44
34180ee8:	4788      	blx	r1
34180eea:	ed97 0a00 	vldr	s0, [r7]
34180eee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180ef2:	ed8d 0b02 	vstr	d0, [sp, #8]
34180ef6:	ed8d 8b00 	vstr	d8, [sp]
34180efa:	f109 02cc 	add.w	r2, r9, #204	@ 0xcc
34180efe:	e01e      	b.n	34180f3e <??evision_api_awb_init_profiles_3>

34180f00 <??evision_api_awb_init_profiles_2>:
34180f00:	f04f 0844 	mov.w	r8, #68	@ 0x44
34180f04:	fb08 f503 	mul.w	r5, r8, r3
34180f08:	1978      	adds	r0, r7, r5
34180f0a:	f1a0 0244 	sub.w	r2, r0, #68	@ 0x44
34180f0e:	ed92 0a00 	vldr	s0, [r2]
34180f12:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180f16:	eeb4 9b40 	vcmp.f64	d9, d0
34180f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180f1e:	d514      	bpl.n	34180f4a <??evision_api_awb_init_profiles_4>
34180f20:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
34180f22:	f509 7096 	add.w	r0, r9, #300	@ 0x12c
34180f26:	4788      	blx	r1
34180f28:	1978      	adds	r0, r7, r5
34180f2a:	f509 72da 	add.w	r2, r9, #436	@ 0x1b4
34180f2e:	ed90 0a00 	vldr	s0, [r0]
34180f32:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180f36:	ed8d 0b02 	vstr	d0, [sp, #8]
34180f3a:	ed8d 9b00 	vstr	d9, [sp]

34180f3e <??evision_api_awb_init_profiles_3>:
34180f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34180f42:	a806      	add	r0, sp, #24
34180f44:	f022 f8a0 	bl	341a3088 <sniprintf>
34180f48:	e0e6      	b.n	34181118 <??evision_api_awb_init_profiles_5>

34180f4a <??evision_api_awb_init_profiles_4>:
34180f4a:	2500      	movs	r5, #0
34180f4c:	1e58      	subs	r0, r3, #1
34180f4e:	e001      	b.n	34180f54 <??evision_api_awb_init_profiles_6>

34180f50 <??evision_api_awb_init_profiles_7>:
34180f50:	1c6d      	adds	r5, r5, #1
34180f52:	b2ad      	uxth	r5, r5

34180f54 <??evision_api_awb_init_profiles_6>:
34180f54:	4285      	cmp	r5, r0
34180f56:	d224      	bcs.n	34180fa2 <??evision_api_awb_init_profiles_8>
34180f58:	fb08 f605 	mul.w	r6, r8, r5
34180f5c:	19ba      	adds	r2, r7, r6
34180f5e:	ed92 0a00 	vldr	s0, [r2]
34180f62:	f107 0244 	add.w	r2, r7, #68	@ 0x44
34180f66:	1992      	adds	r2, r2, r6
34180f68:	edd2 0a00 	vldr	s1, [r2]
34180f6c:	eeb4 0a60 	vcmp.f32	s0, s1
34180f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180f74:	dbec      	blt.n	34180f50 <??evision_api_awb_init_profiles_7>
34180f76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
34180f78:	f509 7005 	add.w	r0, r9, #532	@ 0x214
34180f7c:	4788      	blx	r1
34180f7e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
34180f82:	1980      	adds	r0, r0, r6
34180f84:	1c69      	adds	r1, r5, #1
34180f86:	ed90 0a00 	vldr	s0, [r0]
34180f8a:	9102      	str	r1, [sp, #8]
34180f8c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34180f90:	19b9      	adds	r1, r7, r6
34180f92:	ed8d 0b04 	vstr	d0, [sp, #16]
34180f96:	f000 f8d2 	bl	3418113e <?Subroutine4>

34180f9a <??CrossCallReturnLabel_13>:
34180f9a:	462b      	mov	r3, r5
34180f9c:	f509 721e 	add.w	r2, r9, #632	@ 0x278
34180fa0:	e05e      	b.n	34181060 <??evision_api_awb_init_profiles_9>

34180fa2 <??evision_api_awb_init_profiles_8>:
34180fa2:	460d      	mov	r5, r1
34180fa4:	2600      	movs	r6, #0
34180fa6:	4639      	mov	r1, r7
34180fa8:	e015      	b.n	34180fd6 <??evision_api_awb_init_profiles_10>

34180faa <??evision_api_awb_init_profiles_11>:
34180faa:	fb08 f706 	mul.w	r7, r8, r6
34180fae:	19ca      	adds	r2, r1, r7
34180fb0:	edd2 0a00 	vldr	s1, [r2]
34180fb4:	eef4 0a40 	vcmp.f32	s1, s0
34180fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180fbc:	da2f      	bge.n	3418101e <??evision_api_awb_init_profiles_12>
34180fbe:	f101 0c44 	add.w	ip, r1, #68	@ 0x44
34180fc2:	44bc      	add	ip, r7
34180fc4:	ed9c 1a00 	vldr	s2, [ip]
34180fc8:	eeb4 0a41 	vcmp.f32	s0, s2
34180fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180fd0:	da25      	bge.n	3418101e <??evision_api_awb_init_profiles_12>
34180fd2:	1c76      	adds	r6, r6, #1
34180fd4:	b2b6      	uxth	r6, r6

34180fd6 <??evision_api_awb_init_profiles_10>:
34180fd6:	4286      	cmp	r6, r0
34180fd8:	d248      	bcs.n	3418106c <??evision_api_awb_init_profiles_13>
34180fda:	eb05 0786 	add.w	r7, r5, r6, lsl #2
34180fde:	1e9a      	subs	r2, r3, #2
34180fe0:	ed97 0a00 	vldr	s0, [r7]
34180fe4:	4296      	cmp	r6, r2
34180fe6:	d2e0      	bcs.n	34180faa <??evision_api_awb_init_profiles_11>
34180fe8:	edd7 0a01 	vldr	s1, [r7, #4]
34180fec:	eeb4 0a60 	vcmp.f32	s0, s1
34180ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180ff4:	dbd9      	blt.n	34180faa <??evision_api_awb_init_profiles_11>
34180ff6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
34180ff8:	f509 7034 	add.w	r0, r9, #720	@ 0x2d0
34180ffc:	4788      	blx	r1
34180ffe:	ed97 0a01 	vldr	s0, [r7, #4]
34181002:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34181006:	1c70      	adds	r0, r6, #1
34181008:	eb05 0186 	add.w	r1, r5, r6, lsl #2
3418100c:	ed8d 0b04 	vstr	d0, [sp, #16]
34181010:	9002      	str	r0, [sp, #8]
34181012:	f000 f894 	bl	3418113e <?Subroutine4>

34181016 <??CrossCallReturnLabel_14>:
34181016:	4633      	mov	r3, r6
34181018:	f509 7250 	add.w	r2, r9, #832	@ 0x340
3418101c:	e020      	b.n	34181060 <??evision_api_awb_init_profiles_9>

3418101e <??evision_api_awb_init_profiles_12>:
3418101e:	46a8      	mov	r8, r5
34181020:	460d      	mov	r5, r1
34181022:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
34181024:	f509 706b 	add.w	r0, r9, #940	@ 0x3ac
34181028:	4788      	blx	r1
3418102a:	f105 0044 	add.w	r0, r5, #68	@ 0x44
3418102e:	4438      	add	r0, r7
34181030:	19ea      	adds	r2, r5, r7
34181032:	ed90 0a00 	vldr	s0, [r0]
34181036:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3418103a:	ed8d 0b04 	vstr	d0, [sp, #16]
3418103e:	ed92 1a00 	vldr	s2, [r2]
34181042:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34181046:	eb08 0186 	add.w	r1, r8, r6, lsl #2
3418104a:	ed8d 1b02 	vstr	d1, [sp, #8]
3418104e:	ed91 2a00 	vldr	s4, [r1]
34181052:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
34181056:	ed8d 2b00 	vstr	d2, [sp]
3418105a:	4633      	mov	r3, r6
3418105c:	f209 4204 	addw	r2, r9, #1028	@ 0x404

34181060 <??evision_api_awb_init_profiles_9>:
34181060:	f44f 7180 	mov.w	r1, #256	@ 0x100
34181064:	a806      	add	r0, sp, #24
34181066:	f022 f80f 	bl	341a3088 <sniprintf>
3418106a:	e055      	b.n	34181118 <??evision_api_awb_init_profiles_5>

3418106c <??evision_api_awb_init_profiles_13>:
3418106c:	f10b 02e0 	add.w	r2, fp, #224	@ 0xe0
34181070:	8313      	strh	r3, [r2, #24]
34181072:	ed82 8b02 	vstr	d8, [r2, #8]
34181076:	ed82 9b04 	vstr	d9, [r2, #16]
3418107a:	2200      	movs	r2, #0
3418107c:	460c      	mov	r4, r1
3418107e:	f8ad 3000 	strh.w	r3, [sp]
34181082:	e007      	b.n	34181094 <??evision_api_awb_init_profiles_14>

34181084 <??evision_api_awb_init_profiles_15>:
34181084:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
34181088:	eb0b 0182 	add.w	r1, fp, r2, lsl #2
3418108c:	1c52      	adds	r2, r2, #1
3418108e:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
34181092:	b292      	uxth	r2, r2

34181094 <??evision_api_awb_init_profiles_14>:
34181094:	4282      	cmp	r2, r0
34181096:	d3f5      	bcc.n	34181084 <??evision_api_awb_init_profiles_15>
34181098:	f04f 0a00 	mov.w	sl, #0
3418109c:	f8bd 5000 	ldrh.w	r5, [sp]
341810a0:	e00d      	b.n	341810be <??evision_api_awb_init_profiles_16>

341810a2 <??evision_api_awb_init_profiles_17>:
341810a2:	fb08 f70a 	mul.w	r7, r8, sl
341810a6:	2244      	movs	r2, #68	@ 0x44
341810a8:	4438      	add	r0, r7
341810aa:	19e1      	adds	r1, r4, r7
341810ac:	f022 f975 	bl	341a339a <__aeabi_memcpy>
341810b0:	59e1      	ldr	r1, [r4, r7]
341810b2:	eb0b 008a 	add.w	r0, fp, sl, lsl #2
341810b6:	f10a 0a01 	add.w	sl, sl, #1
341810ba:	f8c0 10fc 	str.w	r1, [r0, #252]	@ 0xfc

341810be <??evision_api_awb_init_profiles_16>:
341810be:	f50b 7090 	add.w	r0, fp, #288	@ 0x120
341810c2:	45aa      	cmp	sl, r5
341810c4:	dbed      	blt.n	341810a2 <??evision_api_awb_init_profiles_17>
341810c6:	f50b 731d 	add.w	r3, fp, #628	@ 0x274
341810ca:	6018      	str	r0, [r3, #0]
341810cc:	2101      	movs	r1, #1
341810ce:	e017      	b.n	34181100 <??evision_api_awb_init_profiles_18>

341810d0 <??evision_api_awb_init_profiles_19>:
341810d0:	fb08 f201 	mul.w	r2, r8, r1
341810d4:	681c      	ldr	r4, [r3, #0]
341810d6:	ed9b 0b12 	vldr	d0, [fp, #72]	@ 0x48
341810da:	ed94 1a00 	vldr	s2, [r4]
341810de:	1884      	adds	r4, r0, r2
341810e0:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
341810e4:	ed94 2a00 	vldr	s4, [r4]
341810e8:	ee31 1b40 	vsub.f64	d1, d1, d0
341810ec:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
341810f0:	ee32 0b40 	vsub.f64	d0, d2, d0
341810f4:	f000 f82a 	bl	3418114c <?Subroutine3>

341810f8 <??CrossCallReturnLabel_12>:
341810f8:	bf44      	itt	mi
341810fa:	1882      	addmi	r2, r0, r2
341810fc:	601a      	strmi	r2, [r3, #0]
341810fe:	1c49      	adds	r1, r1, #1

34181100 <??evision_api_awb_init_profiles_18>:
34181100:	42a9      	cmp	r1, r5
34181102:	dbe5      	blt.n	341810d0 <??evision_api_awb_init_profiles_19>
34181104:	f04f 0a01 	mov.w	sl, #1
34181108:	e009      	b.n	3418111e <??evision_api_awb_init_profiles_20>

3418110a <??evision_api_awb_init_profiles_1>:
3418110a:	2305      	movs	r3, #5
3418110c:	464a      	mov	r2, r9
3418110e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34181112:	a806      	add	r0, sp, #24
34181114:	f021 ffb8 	bl	341a3088 <sniprintf>

34181118 <??evision_api_awb_init_profiles_5>:
34181118:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3418111a:	a806      	add	r0, sp, #24
3418111c:	4788      	blx	r1

3418111e <??evision_api_awb_init_profiles_20>:
3418111e:	2001      	movs	r0, #1
34181120:	f88b 0050 	strb.w	r0, [fp, #80]	@ 0x50
34181124:	f1ba 0f01 	cmp.w	sl, #1
34181128:	bf08      	it	eq
3418112a:	f88b 0000 	strbeq.w	r0, [fp]
3418112e:	4658      	mov	r0, fp
34181130:	f7ff fd7d 	bl	34180c2e <olBkEfVABz>

34181134 <??evision_api_awb_init_profiles_0>:
34181134:	b046      	add	sp, #280	@ 0x118
34181136:	ecbd 8b04 	vpop	{d8-d9}
3418113a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

3418113e <?Subroutine4>:
3418113e:	ed91 1a00 	vldr	s2, [r1]
34181142:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34181146:	ed8d 1b00 	vstr	d1, [sp]
3418114a:	4770      	bx	lr

3418114c <?Subroutine3>:
3418114c:	eeb4 0b41 	vcmp.f64	d0, d1
34181150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181154:	4770      	bx	lr

34181156 <evision_api_awb_run_average>:
34181156:	b570      	push	{r4, r5, r6, lr}
34181158:	b08c      	sub	sp, #48	@ 0x30
3418115a:	4604      	mov	r4, r0
3418115c:	4d33      	ldr	r5, [pc, #204]	@ (3418122c <??DataTable4_17>)
3418115e:	b92a      	cbnz	r2, 3418116c <??evision_api_awb_run_average_0>
34181160:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
34181164:	4628      	mov	r0, r5
34181166:	2600      	movs	r6, #0
34181168:	4788      	blx	r1
3418116a:	e019      	b.n	341811a0 <??evision_api_awb_run_average_1>

3418116c <??evision_api_awb_run_average_0>:
3418116c:	aa0a      	add	r2, sp, #40	@ 0x28
3418116e:	a908      	add	r1, sp, #32
34181170:	a806      	add	r0, sp, #24
34181172:	ed93 2b04 	vldr	d2, [r3, #16]
34181176:	ed93 1b02 	vldr	d1, [r3, #8]
3418117a:	ed93 0b00 	vldr	d0, [r3]
3418117e:	f000 f85f 	bl	34181240 <nkLIjwHbXS>
34181182:	4606      	mov	r6, r0
34181184:	a806      	add	r0, sp, #24
34181186:	2101      	movs	r1, #1
34181188:	ed90 0b02 	vldr	d0, [r0, #8]
3418118c:	ed8d 0b02 	vstr	d0, [sp, #8]
34181190:	ed90 0b04 	vldr	d0, [r0, #16]
34181194:	ed8d 0b04 	vstr	d0, [sp, #16]
34181198:	9100      	str	r1, [sp, #0]
3418119a:	9101      	str	r1, [sp, #4]
3418119c:	2e01      	cmp	r6, #1
3418119e:	d004      	beq.n	341811aa <??evision_api_awb_run_average_2>

341811a0 <??evision_api_awb_run_average_1>:
341811a0:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
341811a4:	f105 0064 	add.w	r0, r5, #100	@ 0x64
341811a8:	e019      	b.n	341811de <??evision_api_awb_run_average_3>

341811aa <??evision_api_awb_run_average_2>:
341811aa:	4669      	mov	r1, sp
341811ac:	4620      	mov	r0, r4
341811ae:	f7ff fb4b 	bl	34180848 <IHUdlOiUXA>
341811b2:	4606      	mov	r6, r0
341811b4:	2801      	cmp	r0, #1
341811b6:	d004      	beq.n	341811c2 <??evision_api_awb_run_average_4>
341811b8:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
341811bc:	f105 0090 	add.w	r0, r5, #144	@ 0x90
341811c0:	e00d      	b.n	341811de <??evision_api_awb_run_average_3>

341811c2 <??evision_api_awb_run_average_4>:
341811c2:	f894 0060 	ldrb.w	r0, [r4, #96]	@ 0x60
341811c6:	2801      	cmp	r0, #1
341811c8:	d10a      	bne.n	341811e0 <??evision_api_awb_run_average_5>
341811ca:	4620      	mov	r0, r4
341811cc:	f7ff fd2f 	bl	34180c2e <olBkEfVABz>
341811d0:	4606      	mov	r6, r0
341811d2:	2801      	cmp	r0, #1
341811d4:	d004      	beq.n	341811e0 <??evision_api_awb_run_average_5>
341811d6:	f8d4 12c8 	ldr.w	r1, [r4, #712]	@ 0x2c8
341811da:	f105 00c4 	add.w	r0, r5, #196	@ 0xc4

341811de <??evision_api_awb_run_average_3>:
341811de:	4788      	blx	r1

341811e0 <??evision_api_awb_run_average_5>:
341811e0:	4630      	mov	r0, r6
341811e2:	b00c      	add	sp, #48	@ 0x30
341811e4:	bd70      	pop	{r4, r5, r6, pc}
	...

341811e8 <??DataTable4>:
341811e8:	5e24 341a                                   $^.4

341811ec <??DataTable4_1>:
341811ec:	3334 3333                                   4333

341811f0 <??DataTable4_2>:
341811f0:	3333 3fc3                                   33.?

341811f4 <??DataTable4_3>:
341811f4:	1111 3fb1                                   ...?

341811f8 <??DataTable4_4>:
341811f8:	1160 341c                                   `..4

341811fc <??DataTable4_5>:
341811fc:	8a10 341a                                   ...4

34181200 <??DataTable4_6>:
34181200:	8800 40b3                                   ...@

34181204 <??DataTable4_7>:
34181204:	0000 3ff0                                   ...?

34181208 <??DataTable4_8>:
34181208:	0000 bff0                                   ....

3418120c <??DataTable4_9>:
3418120c:	999a 9999                                   ....

34181210 <??DataTable4_10>:
34181210:	9999 3fb9                                   ...?

34181214 <??DataTable4_11>:
34181214:	0000 4008                                   ...@

34181218 <??DataTable4_12>:
34181218:	0000 4024                                   ..$@

3418121c <??DataTable4_13>:
3418121c:	a000 406e                                   ..n@

34181220 <??DataTable4_14>:
34181220:	0000 4248                                   ..HB

34181224 <??DataTable4_15>:
34181224:	0000 432f                                   ../C

34181228 <??DataTable4_16>:
34181228:	5998 341a                                   .Y.4

3418122c <??DataTable4_17>:
3418122c:	5e64 341a                                   d^.4

34181230 <?_16>:
34181230:	7665 7369 6f69 206e 5741 2042 2576 0073     evision AWB v%s.

34181240 <nkLIjwHbXS>:
34181240:	b570      	push	{r4, r5, r6, lr}
34181242:	ed9f 4b44 	vldr	d4, [pc, #272]	@ 34181354 <??DataTable2_1>
34181246:	ed2d 8b08 	vpush	{d8-d11}
3418124a:	4604      	mov	r4, r0
3418124c:	eeb4 0b44 	vcmp.f64	d0, d4
34181250:	b084      	sub	sp, #16
34181252:	483f      	ldr	r0, [pc, #252]	@ (34181350 <??DataTable2>)
34181254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181258:	bf5e      	ittt	pl
3418125a:	ed9f 6b3e 	vldrpl	d6, [pc, #248]	@ 34181354 <??DataTable2_1>
3418125e:	eeb4 1b46 	vcmppl.f64	d1, d6
34181262:	eef1 fa10 	vmrspl	APSR_nzcv, fpscr
34181266:	bf5c      	itt	pl
34181268:	eeb4 2b44 	vcmppl.f64	d2, d4
3418126c:	eef1 fa10 	vmrspl	APSR_nzcv, fpscr
34181270:	d502      	bpl.n	34181278 <??nkLIjwHbXS_0>
34181272:	f000 f88f 	bl	34181394 <?Subroutine0>

34181276 <??CrossCallReturnLabel_0>:
34181276:	e015      	b.n	341812a4 <??nkLIjwHbXS_1>

34181278 <??nkLIjwHbXS_0>:
34181278:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 3418135c <??DataTable2_2>
3418127c:	eeb4 0b44 	vcmp.f64	d0, d4
34181280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34181284:	bfbe      	ittt	lt
34181286:	ed9f 6b35 	vldrlt	d6, [pc, #212]	@ 3418135c <??DataTable2_2>
3418128a:	eeb4 1b46 	vcmplt.f64	d1, d6
3418128e:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
34181292:	bfbc      	itt	lt
34181294:	eeb4 2b44 	vcmplt.f64	d2, d4
34181298:	eef1 fa10 	vmrslt	APSR_nzcv, fpscr
3418129c:	db05      	blt.n	341812aa <??nkLIjwHbXS_2>
3418129e:	f000 f879 	bl	34181394 <?Subroutine0>

341812a2 <??CrossCallReturnLabel_1>:
341812a2:	3040      	adds	r0, #64	@ 0x40

341812a4 <??nkLIjwHbXS_1>:
341812a4:	f021 fe80 	bl	341a2fa8 <iprintf>
341812a8:	e00e      	b.n	341812c8 <??nkLIjwHbXS_3>

341812aa <??nkLIjwHbXS_2>:
341812aa:	bf00      	nop
341812ac:	f20f 05fc 	addw	r5, pc, #252	@ 0xfc
341812b0:	a63c      	add	r6, pc, #240	@ (adr r6, 341813a4 <?_3>)
341812b2:	2c00      	cmp	r4, #0
341812b4:	bf18      	it	ne
341812b6:	2900      	cmpne	r1, #0
341812b8:	d009      	beq.n	341812ce <??nkLIjwHbXS_4>
341812ba:	b9a2      	cbnz	r2, 341812e6 <??nkLIjwHbXS_5>
341812bc:	4633      	mov	r3, r6
341812be:	462a      	mov	r2, r5

341812c0 <??nkLIjwHbXS_6>:
341812c0:	4629      	mov	r1, r5
341812c2:	3080      	adds	r0, #128	@ 0x80
341812c4:	f021 fe70 	bl	341a2fa8 <iprintf>

341812c8 <??nkLIjwHbXS_3>:
341812c8:	f04f 30ff 	mov.w	r0, #4294967295
341812cc:	e03c      	b.n	34181348 <??nkLIjwHbXS_7>

341812ce <??nkLIjwHbXS_4>:
341812ce:	2a00      	cmp	r2, #0
341812d0:	bf0c      	ite	eq
341812d2:	4633      	moveq	r3, r6
341812d4:	462b      	movne	r3, r5
341812d6:	2900      	cmp	r1, #0
341812d8:	bf0c      	ite	eq
341812da:	4632      	moveq	r2, r6
341812dc:	462a      	movne	r2, r5
341812de:	2c00      	cmp	r4, #0
341812e0:	d1ee      	bne.n	341812c0 <??nkLIjwHbXS_6>
341812e2:	4635      	mov	r5, r6
341812e4:	e7ec      	b.n	341812c0 <??nkLIjwHbXS_6>

341812e6 <??nkLIjwHbXS_5>:
341812e6:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34181364 <??DataTable2_3>
341812ea:	ee20 6b07 	vmul.f64	d6, d0, d7
341812ee:	ed9f 9b1f 	vldr	d9, [pc, #124]	@ 3418136c <??DataTable2_4>
341812f2:	eeb3 4b00 	vmov.f64	d4, #48	@ 0x41800000  16.0
341812f6:	ee01 6b09 	vmla.f64	d6, d1, d9
341812fa:	ed9f 3b1e 	vldr	d3, [pc, #120]	@ 34181374 <??DataTable2_5>
341812fe:	ee02 6b04 	vmla.f64	d6, d2, d4
34181302:	ee06 4b03 	vmla.f64	d4, d6, d3
34181306:	eebb bb0a 	vmov.f64	d11, #186	@ 0xc1d00000 -26.0
3418130a:	ed84 4b00 	vstr	d4, [r4]
3418130e:	ee20 5b0b 	vmul.f64	d5, d0, d11
34181312:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 3418137c <??DataTable2_6>
34181316:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 34181384 <??DataTable2_7>
3418131a:	ee01 5b07 	vmla.f64	d5, d1, d7
3418131e:	ee20 0b04 	vmul.f64	d0, d0, d4
34181322:	ed9f 8b1a 	vldr	d8, [pc, #104]	@ 3418138c <??DataTable2_8>
34181326:	ee02 5b04 	vmla.f64	d5, d2, d4
3418132a:	ee01 0b08 	vmla.f64	d0, d1, d8
3418132e:	eeba 9b04 	vmov.f64	d9, #164	@ 0xc1200000 -10.0
34181332:	ee25 6b03 	vmul.f64	d6, d5, d3
34181336:	ee02 0b09 	vmla.f64	d0, d2, d9
3418133a:	ed81 6b00 	vstr	d6, [r1]
3418133e:	ee20 1b03 	vmul.f64	d1, d0, d3
34181342:	ed82 1b00 	vstr	d1, [r2]
34181346:	2001      	movs	r0, #1

34181348 <??nkLIjwHbXS_7>:
34181348:	b004      	add	sp, #16
3418134a:	ecbd 8b08 	vpop	{d8-d11}
3418134e:	bd70      	pop	{r4, r5, r6, pc}

34181350 <??DataTable2>:
34181350:	5f60 341a                                   `_.4

34181354 <??DataTable2_1>:
	...

3418135c <??DataTable2_2>:
3418135c:	0001 0000 e000 406f                         ......o@

34181364 <??DataTable2_3>:
34181364:	0000 0000 8000 4047                         ......G@

3418136c <??DataTable2_4>:
3418136c:	0000 0000 a000 4063                         ......c@

34181374 <??DataTable2_5>:
34181374:	0000 0000 0000 3f70                         ......p?

3418137c <??DataTable2_6>:
3418137c:	0000 0000 8000 c055                         ......U.

34181384 <??DataTable2_7>:
34181384:	0000 0000 0000 405c                         ......\@

3418138c <??DataTable2_8>:
3418138c:	0000 0000 8000 c059                         ......Y.

34181394 <?Subroutine0>:
34181394:	ed8d 2b02 	vstr	d2, [sp, #8]
34181398:	ed8d 1b00 	vstr	d1, [sp]
3418139c:	ec53 2b10 	vmov	r2, r3, d0
341813a0:	4770      	bx	lr
	...

341813a4 <?_3>:
341813a4:	6e69 6176 696c 0064                         invalid.

341813ac <?_4>:
341813ac:	6176 696c 0064 0000                         valid...

341813b4 <evision_api_st_ae_new>:
341813b4:	b510      	push	{r4, lr}
341813b6:	b090      	sub	sp, #64	@ 0x40
341813b8:	0001      	movs	r1, r0
341813ba:	bf08      	it	eq
341813bc:	2000      	moveq	r0, #0
341813be:	d00e      	beq.n	341813de <??evision_api_st_ae_new_0>
341813c0:	4c9f      	ldr	r4, [pc, #636]	@ (34181640 <??DataTable3>)
341813c2:	2100      	movs	r1, #0
341813c4:	7021      	strb	r1, [r4, #0]
341813c6:	65a0      	str	r0, [r4, #88]	@ 0x58
341813c8:	f8df 328c 	ldr.w	r3, [pc, #652]	@ 34181658 <??DataTable3_5>
341813cc:	a2a5      	add	r2, pc, #660	@ (adr r2, 34181664 <?_0>)
341813ce:	2140      	movs	r1, #64	@ 0x40
341813d0:	4668      	mov	r0, sp
341813d2:	f021 fe59 	bl	341a3088 <sniprintf>
341813d6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
341813d8:	4668      	mov	r0, sp
341813da:	4788      	blx	r1
341813dc:	4620      	mov	r0, r4

341813de <??evision_api_st_ae_new_0>:
341813de:	b010      	add	sp, #64	@ 0x40
341813e0:	bd10      	pop	{r4, pc}

341813e2 <evision_api_st_ae_delete>:
341813e2:	b910      	cbnz	r0, 341813ea <??evision_api_st_ae_delete_0>
341813e4:	f04f 30ff 	mov.w	r0, #4294967295
341813e8:	4770      	bx	lr

341813ea <??evision_api_st_ae_delete_0>:
341813ea:	2001      	movs	r0, #1
341813ec:	4770      	bx	lr

341813ee <ccVZEiRwGt>:
341813ee:	b530      	push	{r4, r5, lr}
341813f0:	2138      	movs	r1, #56	@ 0x38
341813f2:	220a      	movs	r2, #10
341813f4:	6101      	str	r1, [r0, #16]
341813f6:	6142      	str	r2, [r0, #20]
341813f8:	2164      	movs	r1, #100	@ 0x64
341813fa:	222d      	movs	r2, #45	@ 0x2d
341813fc:	6181      	str	r1, [r0, #24]
341813fe:	61c2      	str	r2, [r0, #28]
34181400:	2178      	movs	r1, #120	@ 0x78
34181402:	f240 52dc 	movw	r2, #1500	@ 0x5dc
34181406:	6201      	str	r1, [r0, #32]
34181408:	6242      	str	r2, [r0, #36]	@ 0x24
3418140a:	f241 7170 	movw	r1, #6000	@ 0x1770
3418140e:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
34181412:	6281      	str	r1, [r0, #40]	@ 0x28
34181414:	62c2      	str	r2, [r0, #44]	@ 0x2c
34181416:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
3418141a:	4d8a      	ldr	r5, [pc, #552]	@ (34181644 <??DataTable3_1>)
3418141c:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
34181420:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
34181424:	4b8d      	ldr	r3, [pc, #564]	@ (3418165c <??DataTable3_6>)
34181426:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
3418142a:	2105      	movs	r1, #5
3418142c:	6501      	str	r1, [r0, #80]	@ 0x50
3418142e:	f248 01e8 	movw	r1, #33000	@ 0x80e8
34181432:	6441      	str	r1, [r0, #68]	@ 0x44
34181434:	2400      	movs	r4, #0
34181436:	2201      	movs	r2, #1
34181438:	2164      	movs	r1, #100	@ 0x64
3418143a:	6404      	str	r4, [r0, #64]	@ 0x40
3418143c:	6482      	str	r2, [r0, #72]	@ 0x48
3418143e:	64c1      	str	r1, [r0, #76]	@ 0x4c
34181440:	bd30      	pop	{r4, r5, pc}

34181442 <evision_api_st_ae_init>:
34181442:	b510      	push	{r4, lr}
34181444:	0004      	movs	r4, r0
34181446:	d102      	bne.n	3418144e <??evision_api_st_ae_init_0>
34181448:	f04f 30ff 	mov.w	r0, #4294967295
3418144c:	bd10      	pop	{r4, pc}

3418144e <??evision_api_st_ae_init_0>:
3418144e:	f7ff ffce 	bl	341813ee <ccVZEiRwGt>
34181452:	2001      	movs	r0, #1
34181454:	7020      	strb	r0, [r4, #0]
34181456:	bd10      	pop	{r4, pc}

34181458 <evision_api_st_ae_process>:
34181458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418145c:	0004      	movs	r4, r0
3418145e:	bf08      	it	eq
34181460:	f04f 30ff 	moveq.w	r0, #4294967295
34181464:	d013      	beq.n	3418148e <??evision_api_st_ae_process_0>
34181466:	7820      	ldrb	r0, [r4, #0]
34181468:	2801      	cmp	r0, #1
3418146a:	d10d      	bne.n	34181488 <??evision_api_st_ae_process_1>
3418146c:	2002      	movs	r0, #2
3418146e:	7020      	strb	r0, [r4, #0]

34181470 <??evision_api_st_ae_process_2>:
34181470:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
34181472:	4610      	mov	r0, r2
34181474:	468c      	mov	ip, r1
34181476:	f8c4 c008 	str.w	ip, [r4, #8]
3418147a:	6060      	str	r0, [r4, #4]
3418147c:	4565      	cmp	r5, ip
3418147e:	bf3c      	itt	cc
34181480:	6c61      	ldrcc	r1, [r4, #68]	@ 0x44
34181482:	4288      	cmpcc	r0, r1
34181484:	d204      	bcs.n	34181490 <??evision_api_st_ae_process_3>
34181486:	e0d6      	b.n	34181636 <??evision_api_st_ae_process_4>

34181488 <??evision_api_st_ae_process_1>:
34181488:	2802      	cmp	r0, #2
3418148a:	d0f1      	beq.n	34181470 <??evision_api_st_ae_process_2>
3418148c:	2000      	movs	r0, #0

3418148e <??evision_api_st_ae_process_0>:
3418148e:	e0d4      	b.n	3418163a <??evision_api_st_ae_process_5>

34181490 <??evision_api_st_ae_process_3>:
34181490:	6922      	ldr	r2, [r4, #16]
34181492:	4619      	mov	r1, r3
34181494:	ee01 1a10 	vmov	s2, r1
34181498:	ee00 2a10 	vmov	s0, r2
3418149c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
341814a0:	eeb8 1b41 	vcvt.f64.u32	d1, s2
341814a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
341814a8:	6d27      	ldr	r7, [r4, #80]	@ 0x50
341814aa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
341814ae:	ee31 2b03 	vadd.f64	d2, d1, d3
341814b2:	ee80 2b02 	vdiv.f64	d2, d0, d2
341814b6:	eeb7 0bc2 	vcvt.f32.f64	s0, d2
341814ba:	42bb      	cmp	r3, r7
341814bc:	d248      	bcs.n	34181550 <??evision_api_st_ae_process_6>
341814be:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
341814c2:	eeb4 0a60 	vcmp.f32	s0, s1
341814c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341814ca:	d441      	bmi.n	34181550 <??evision_api_st_ae_process_6>
341814cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341814ce:	4288      	cmp	r0, r1
341814d0:	d21d      	bcs.n	3418150e <??evision_api_st_ae_process_7>
341814d2:	2800      	cmp	r0, #0
341814d4:	bf14      	ite	ne
341814d6:	ee00 0a90 	vmovne	s1, r0
341814da:	eddf 0a5b 	vldreq	s1, [pc, #364]	@ 34181648 <??DataTable3_2>
341814de:	eef8 0ae0 	vcvt.f32.s32	s1, s1
341814e2:	ee60 0a80 	vmul.f32	s1, s1, s0
341814e6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
341814ea:	ee10 2a90 	vmov	r2, s1
341814ee:	4291      	cmp	r1, r2
341814f0:	da2c      	bge.n	3418154c <??evision_api_st_ae_process_8>
341814f2:	ee00 1a90 	vmov	s1, r1
341814f6:	ee01 0a90 	vmov	s3, r0
341814fa:	eeb8 1ae0 	vcvt.f32.s32	s2, s1
341814fe:	eef8 1a61 	vcvt.f32.u32	s3, s3
34181502:	ee81 1a21 	vdiv.f32	s2, s2, s3
34181506:	ee80 0a01 	vdiv.f32	s0, s0, s2
3418150a:	edc4 0a01 	vstr	s1, [r4, #4]

3418150e <??evision_api_st_ae_process_7>:
3418150e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 3418164c <??DataTable3_3>
34181512:	eeb4 0a60 	vcmp.f32	s0, s1
34181516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418151a:	db16      	blt.n	3418154a <??evision_api_st_ae_process_9>
3418151c:	4665      	mov	r5, ip
3418151e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34181522:	f022 fe09 	bl	341a4138 <log10>
34181526:	eeb3 2b04 	vmov.f64	d2, #52	@ 0x41a00000  20.0
3418152a:	ee20 0b02 	vmul.f64	d0, d0, d2
3418152e:	ed9f 4b48 	vldr	d4, [pc, #288]	@ 34181650 <??DataTable3_4>
34181532:	ee20 3b04 	vmul.f64	d3, d0, d4
34181536:	eebd 3bc3 	vcvt.s32.f64	s6, d3
3418153a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3418153c:	ee13 0a10 	vmov	r0, s6
34181540:	1940      	adds	r0, r0, r5
34181542:	4281      	cmp	r1, r0
34181544:	bfc8      	it	gt
34181546:	4601      	movgt	r1, r0
34181548:	60a1      	str	r1, [r4, #8]

3418154a <??evision_api_st_ae_process_9>:
3418154a:	e075      	b.n	34181638 <??evision_api_st_ae_process_10>

3418154c <??evision_api_st_ae_process_8>:
3418154c:	6062      	str	r2, [r4, #4]
3418154e:	e073      	b.n	34181638 <??evision_api_st_ae_process_10>

34181550 <??evision_api_st_ae_process_6>:
34181550:	ebb2 0e03 	subs.w	lr, r2, r3
34181554:	4671      	mov	r1, lr
34181556:	bf48      	it	mi
34181558:	4249      	negmi	r1, r1
3418155a:	69e7      	ldr	r7, [r4, #28]
3418155c:	428f      	cmp	r7, r1
3418155e:	bf28      	it	cs
34181560:	6a66      	ldrcs	r6, [r4, #36]	@ 0x24
34181562:	d204      	bcs.n	3418156e <??evision_api_st_ae_process_11>
34181564:	6a27      	ldr	r7, [r4, #32]
34181566:	42b9      	cmp	r1, r7
34181568:	bf2c      	ite	cs
3418156a:	6ae6      	ldrcs	r6, [r4, #44]	@ 0x2c
3418156c:	6aa6      	ldrcc	r6, [r4, #40]	@ 0x28

3418156e <??evision_api_st_ae_process_11>:
3418156e:	69a1      	ldr	r1, [r4, #24]
34181570:	1ad7      	subs	r7, r2, r3
34181572:	4379      	muls	r1, r7
34181574:	6967      	ldr	r7, [r4, #20]
34181576:	eb07 0902 	add.w	r9, r7, r2
3418157a:	4599      	cmp	r9, r3
3418157c:	d21d      	bcs.n	341815ba <??evision_api_st_ae_process_12>
3418157e:	f06f 0210 	mvn.w	r2, #16
34181582:	fba2 8706 	umull	r8, r7, r2, r6
34181586:	f04f 0a14 	mov.w	sl, #20
3418158a:	17f3      	asrs	r3, r6, #31
3418158c:	fb8a ab01 	smull	sl, fp, sl, r1
34181590:	fb12 7703 	smlabb	r7, r2, r3, r7
34181594:	45bb      	cmp	fp, r7
34181596:	dc17      	bgt.n	341815c8 <??evision_api_st_ae_process_13>
34181598:	db01      	blt.n	3418159e <??evision_api_st_ae_process_14>
3418159a:	45c2      	cmp	sl, r8
3418159c:	d214      	bcs.n	341815c8 <??evision_api_st_ae_process_13>

3418159e <??evision_api_st_ae_process_14>:
3418159e:	ee00 6a10 	vmov	s0, r6
341815a2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
341815a6:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 34181660 <??DataTable3_7>
341815aa:	ee20 0a20 	vmul.f32	s0, s0, s1
341815ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
341815b2:	ee10 1a10 	vmov	r1, s0
341815b6:	4249      	negs	r1, r1
341815b8:	e006      	b.n	341815c8 <??evision_api_st_ae_process_13>

341815ba <??evision_api_st_ae_process_12>:
341815ba:	1bd2      	subs	r2, r2, r7
341815bc:	4293      	cmp	r3, r2
341815be:	da3b      	bge.n	34181638 <??evision_api_st_ae_process_10>
341815c0:	428e      	cmp	r6, r1
341815c2:	bfc8      	it	gt
341815c4:	460e      	movgt	r6, r1
341815c6:	4631      	mov	r1, r6

341815c8 <??evision_api_st_ae_process_13>:
341815c8:	b3b1      	cbz	r1, 34181638 <??evision_api_st_ae_process_10>
341815ca:	45ac      	cmp	ip, r5
341815cc:	d12c      	bne.n	34181628 <??evision_api_st_ae_process_15>
341815ce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
341815d0:	4290      	cmp	r0, r2
341815d2:	d301      	bcc.n	341815d8 <??evision_api_st_ae_process_16>
341815d4:	2900      	cmp	r1, #0
341815d6:	d527      	bpl.n	34181628 <??evision_api_st_ae_process_15>

341815d8 <??evision_api_st_ae_process_16>:
341815d8:	1c43      	adds	r3, r0, #1
341815da:	fb0e fe03 	mul.w	lr, lr, r3
341815de:	ee00 0a90 	vmov	s1, r0
341815e2:	eeb8 1be0 	vcvt.f64.s32	d1, s1
341815e6:	ee00 ea10 	vmov	s0, lr
341815ea:	2900      	cmp	r1, #0
341815ec:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
341815f0:	d508      	bpl.n	34181604 <??evision_api_st_ae_process_17>
341815f2:	ed94 2b0e 	vldr	d2, [r4, #56]	@ 0x38
341815f6:	ee00 1b02 	vmla.f64	d1, d0, d2
341815fa:	eebd 0bc1 	vcvt.s32.f64	s0, d1
341815fe:	ee10 0a10 	vmov	r0, s0
34181602:	e007      	b.n	34181614 <??evision_api_st_ae_process_18>

34181604 <??evision_api_st_ae_process_17>:
34181604:	ed94 3b0c 	vldr	d3, [r4, #48]	@ 0x30
34181608:	ee00 1b03 	vmla.f64	d1, d0, d3
3418160c:	eefd 0bc1 	vcvt.s32.f64	s1, d1
34181610:	ee10 0a90 	vmov	r0, s1

34181614 <??evision_api_st_ae_process_18>:
34181614:	6c21      	ldr	r1, [r4, #64]	@ 0x40
34181616:	4281      	cmp	r1, r0
34181618:	bfb8      	it	lt
3418161a:	4601      	movlt	r1, r0
3418161c:	4610      	mov	r0, r2
3418161e:	4288      	cmp	r0, r1
34181620:	bfc8      	it	gt
34181622:	4608      	movgt	r0, r1
34181624:	6060      	str	r0, [r4, #4]
34181626:	e007      	b.n	34181638 <??evision_api_st_ae_process_10>

34181628 <??evision_api_st_ae_process_15>:
34181628:	448c      	add	ip, r1
3418162a:	45ac      	cmp	ip, r5
3418162c:	db03      	blt.n	34181636 <??evision_api_st_ae_process_4>
3418162e:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
34181630:	4565      	cmp	r5, ip
34181632:	bfc8      	it	gt
34181634:	4665      	movgt	r5, ip

34181636 <??evision_api_st_ae_process_4>:
34181636:	60a5      	str	r5, [r4, #8]

34181638 <??evision_api_st_ae_process_10>:
34181638:	2001      	movs	r0, #1

3418163a <??evision_api_st_ae_process_5>:
3418163a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

34181640 <??DataTable3>:
34181640:	1430 341c                                   0..4

34181644 <??DataTable3_1>:
34181644:	7ae1 3f94                                   .z.?

34181648 <??DataTable3_2>:
34181648:	0001 0000                                   ....

3418164c <??DataTable3_3>:
3418164c:	0001 3f80                                   ...?

34181650 <??DataTable3_4>:
34181650:	0000 0000 4000 408f                         .....@.@

34181658 <??DataTable3_5>:
34181658:	8a18 341a                                   ...4

3418165c <??DataTable3_6>:
3418165c:	624d 3f70                                   Mbp?

34181660 <??DataTable3_7>:
34181660:	999a 3f59                                   ..Y?

34181664 <?_0>:
34181664:	7665 7369 6f69 206e 5453 412d 2045 2576     evision ST-AE v%
34181674:	0073 0000                                   s...

34181678 <__aeabi_ldivmod>:
34181678:	b97b      	cbnz	r3, 3418169a <__aeabi_ldivmod+0x22>
3418167a:	b972      	cbnz	r2, 3418169a <__aeabi_ldivmod+0x22>
3418167c:	2900      	cmp	r1, #0
3418167e:	bfbe      	ittt	lt
34181680:	2000      	movlt	r0, #0
34181682:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
34181686:	e006      	blt.n	34181696 <__aeabi_ldivmod+0x1e>
34181688:	bf08      	it	eq
3418168a:	2800      	cmpeq	r0, #0
3418168c:	bf1c      	itt	ne
3418168e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34181692:	f04f 30ff 	movne.w	r0, #4294967295
34181696:	f000 b9fb 	b.w	34181a90 <__aeabi_idiv0>
3418169a:	f1ad 0c08 	sub.w	ip, sp, #8
3418169e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341816a2:	2900      	cmp	r1, #0
341816a4:	db09      	blt.n	341816ba <__aeabi_ldivmod+0x42>
341816a6:	2b00      	cmp	r3, #0
341816a8:	db1a      	blt.n	341816e0 <__aeabi_ldivmod+0x68>
341816aa:	f000 f84d 	bl	34181748 <__udivmoddi4>
341816ae:	f8dd e004 	ldr.w	lr, [sp, #4]
341816b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341816b6:	b004      	add	sp, #16
341816b8:	4770      	bx	lr
341816ba:	4240      	negs	r0, r0
341816bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
341816c0:	2b00      	cmp	r3, #0
341816c2:	db1b      	blt.n	341816fc <__aeabi_ldivmod+0x84>
341816c4:	f000 f840 	bl	34181748 <__udivmoddi4>
341816c8:	f8dd e004 	ldr.w	lr, [sp, #4]
341816cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341816d0:	b004      	add	sp, #16
341816d2:	4240      	negs	r0, r0
341816d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
341816d8:	4252      	negs	r2, r2
341816da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341816de:	4770      	bx	lr
341816e0:	4252      	negs	r2, r2
341816e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
341816e6:	f000 f82f 	bl	34181748 <__udivmoddi4>
341816ea:	f8dd e004 	ldr.w	lr, [sp, #4]
341816ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341816f2:	b004      	add	sp, #16
341816f4:	4240      	negs	r0, r0
341816f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
341816fa:	4770      	bx	lr
341816fc:	4252      	negs	r2, r2
341816fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34181702:	f000 f821 	bl	34181748 <__udivmoddi4>
34181706:	f8dd e004 	ldr.w	lr, [sp, #4]
3418170a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
3418170e:	b004      	add	sp, #16
34181710:	4252      	negs	r2, r2
34181712:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34181716:	4770      	bx	lr

34181718 <__aeabi_uldivmod>:
34181718:	b953      	cbnz	r3, 34181730 <__aeabi_uldivmod+0x18>
3418171a:	b94a      	cbnz	r2, 34181730 <__aeabi_uldivmod+0x18>
3418171c:	2900      	cmp	r1, #0
3418171e:	bf08      	it	eq
34181720:	2800      	cmpeq	r0, #0
34181722:	bf1c      	itt	ne
34181724:	f04f 31ff 	movne.w	r1, #4294967295
34181728:	f04f 30ff 	movne.w	r0, #4294967295
3418172c:	f000 b9b0 	b.w	34181a90 <__aeabi_idiv0>
34181730:	f1ad 0c08 	sub.w	ip, sp, #8
34181734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34181738:	f000 f806 	bl	34181748 <__udivmoddi4>
3418173c:	f8dd e004 	ldr.w	lr, [sp, #4]
34181740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34181744:	b004      	add	sp, #16
34181746:	4770      	bx	lr

34181748 <__udivmoddi4>:
34181748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418174c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
3418174e:	4688      	mov	r8, r1
34181750:	4604      	mov	r4, r0
34181752:	468e      	mov	lr, r1
34181754:	2b00      	cmp	r3, #0
34181756:	d14a      	bne.n	341817ee <__udivmoddi4+0xa6>
34181758:	428a      	cmp	r2, r1
3418175a:	4617      	mov	r7, r2
3418175c:	d95f      	bls.n	3418181e <__udivmoddi4+0xd6>
3418175e:	fab2 f682 	clz	r6, r2
34181762:	b14e      	cbz	r6, 34181778 <__udivmoddi4+0x30>
34181764:	f1c6 0320 	rsb	r3, r6, #32
34181768:	fa01 fe06 	lsl.w	lr, r1, r6
3418176c:	40b7      	lsls	r7, r6
3418176e:	40b4      	lsls	r4, r6
34181770:	fa20 f303 	lsr.w	r3, r0, r3
34181774:	ea43 0e0e 	orr.w	lr, r3, lr
34181778:	ea4f 4817 	mov.w	r8, r7, lsr #16
3418177c:	fa1f fc87 	uxth.w	ip, r7
34181780:	0c23      	lsrs	r3, r4, #16
34181782:	fbbe f1f8 	udiv	r1, lr, r8
34181786:	fb08 ee11 	mls	lr, r8, r1, lr
3418178a:	fb01 f20c 	mul.w	r2, r1, ip
3418178e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34181792:	429a      	cmp	r2, r3
34181794:	d907      	bls.n	341817a6 <__udivmoddi4+0x5e>
34181796:	18fb      	adds	r3, r7, r3
34181798:	f101 30ff 	add.w	r0, r1, #4294967295
3418179c:	d202      	bcs.n	341817a4 <__udivmoddi4+0x5c>
3418179e:	429a      	cmp	r2, r3
341817a0:	f200 8154 	bhi.w	34181a4c <__udivmoddi4+0x304>
341817a4:	4601      	mov	r1, r0
341817a6:	1a9b      	subs	r3, r3, r2
341817a8:	b2a2      	uxth	r2, r4
341817aa:	fbb3 f0f8 	udiv	r0, r3, r8
341817ae:	fb08 3310 	mls	r3, r8, r0, r3
341817b2:	fb00 fc0c 	mul.w	ip, r0, ip
341817b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
341817ba:	4594      	cmp	ip, r2
341817bc:	d90b      	bls.n	341817d6 <__udivmoddi4+0x8e>
341817be:	18ba      	adds	r2, r7, r2
341817c0:	f100 33ff 	add.w	r3, r0, #4294967295
341817c4:	bf2c      	ite	cs
341817c6:	2401      	movcs	r4, #1
341817c8:	2400      	movcc	r4, #0
341817ca:	4594      	cmp	ip, r2
341817cc:	d902      	bls.n	341817d4 <__udivmoddi4+0x8c>
341817ce:	2c00      	cmp	r4, #0
341817d0:	f000 813f 	beq.w	34181a52 <__udivmoddi4+0x30a>
341817d4:	4618      	mov	r0, r3
341817d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
341817da:	eba2 020c 	sub.w	r2, r2, ip
341817de:	2100      	movs	r1, #0
341817e0:	b11d      	cbz	r5, 341817ea <__udivmoddi4+0xa2>
341817e2:	40f2      	lsrs	r2, r6
341817e4:	2300      	movs	r3, #0
341817e6:	e9c5 2300 	strd	r2, r3, [r5]
341817ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341817ee:	428b      	cmp	r3, r1
341817f0:	d905      	bls.n	341817fe <__udivmoddi4+0xb6>
341817f2:	b10d      	cbz	r5, 341817f8 <__udivmoddi4+0xb0>
341817f4:	e9c5 0100 	strd	r0, r1, [r5]
341817f8:	2100      	movs	r1, #0
341817fa:	4608      	mov	r0, r1
341817fc:	e7f5      	b.n	341817ea <__udivmoddi4+0xa2>
341817fe:	fab3 f183 	clz	r1, r3
34181802:	2900      	cmp	r1, #0
34181804:	d14e      	bne.n	341818a4 <__udivmoddi4+0x15c>
34181806:	4543      	cmp	r3, r8
34181808:	f0c0 8112 	bcc.w	34181a30 <__udivmoddi4+0x2e8>
3418180c:	4282      	cmp	r2, r0
3418180e:	f240 810f 	bls.w	34181a30 <__udivmoddi4+0x2e8>
34181812:	4608      	mov	r0, r1
34181814:	2d00      	cmp	r5, #0
34181816:	d0e8      	beq.n	341817ea <__udivmoddi4+0xa2>
34181818:	e9c5 4e00 	strd	r4, lr, [r5]
3418181c:	e7e5      	b.n	341817ea <__udivmoddi4+0xa2>
3418181e:	2a00      	cmp	r2, #0
34181820:	f000 80ac 	beq.w	3418197c <__udivmoddi4+0x234>
34181824:	fab2 f682 	clz	r6, r2
34181828:	2e00      	cmp	r6, #0
3418182a:	f040 80bb 	bne.w	341819a4 <__udivmoddi4+0x25c>
3418182e:	1a8b      	subs	r3, r1, r2
34181830:	ea4f 4e12 	mov.w	lr, r2, lsr #16
34181834:	b2bc      	uxth	r4, r7
34181836:	2101      	movs	r1, #1
34181838:	0c02      	lsrs	r2, r0, #16
3418183a:	b280      	uxth	r0, r0
3418183c:	fbb3 fcfe 	udiv	ip, r3, lr
34181840:	fb0e 331c 	mls	r3, lr, ip, r3
34181844:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
34181848:	fb04 f20c 	mul.w	r2, r4, ip
3418184c:	429a      	cmp	r2, r3
3418184e:	d90e      	bls.n	3418186e <__udivmoddi4+0x126>
34181850:	18fb      	adds	r3, r7, r3
34181852:	f10c 38ff 	add.w	r8, ip, #4294967295
34181856:	bf2c      	ite	cs
34181858:	f04f 0901 	movcs.w	r9, #1
3418185c:	f04f 0900 	movcc.w	r9, #0
34181860:	429a      	cmp	r2, r3
34181862:	d903      	bls.n	3418186c <__udivmoddi4+0x124>
34181864:	f1b9 0f00 	cmp.w	r9, #0
34181868:	f000 80ec 	beq.w	34181a44 <__udivmoddi4+0x2fc>
3418186c:	46c4      	mov	ip, r8
3418186e:	1a9b      	subs	r3, r3, r2
34181870:	fbb3 f8fe 	udiv	r8, r3, lr
34181874:	fb0e 3318 	mls	r3, lr, r8, r3
34181878:	fb04 f408 	mul.w	r4, r4, r8
3418187c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34181880:	4294      	cmp	r4, r2
34181882:	d90b      	bls.n	3418189c <__udivmoddi4+0x154>
34181884:	18ba      	adds	r2, r7, r2
34181886:	f108 33ff 	add.w	r3, r8, #4294967295
3418188a:	bf2c      	ite	cs
3418188c:	2001      	movcs	r0, #1
3418188e:	2000      	movcc	r0, #0
34181890:	4294      	cmp	r4, r2
34181892:	d902      	bls.n	3418189a <__udivmoddi4+0x152>
34181894:	2800      	cmp	r0, #0
34181896:	f000 80d1 	beq.w	34181a3c <__udivmoddi4+0x2f4>
3418189a:	4698      	mov	r8, r3
3418189c:	1b12      	subs	r2, r2, r4
3418189e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
341818a2:	e79d      	b.n	341817e0 <__udivmoddi4+0x98>
341818a4:	f1c1 0620 	rsb	r6, r1, #32
341818a8:	408b      	lsls	r3, r1
341818aa:	fa08 f401 	lsl.w	r4, r8, r1
341818ae:	fa00 f901 	lsl.w	r9, r0, r1
341818b2:	fa22 f706 	lsr.w	r7, r2, r6
341818b6:	fa28 f806 	lsr.w	r8, r8, r6
341818ba:	408a      	lsls	r2, r1
341818bc:	431f      	orrs	r7, r3
341818be:	fa20 f306 	lsr.w	r3, r0, r6
341818c2:	0c38      	lsrs	r0, r7, #16
341818c4:	4323      	orrs	r3, r4
341818c6:	fa1f fc87 	uxth.w	ip, r7
341818ca:	0c1c      	lsrs	r4, r3, #16
341818cc:	fbb8 fef0 	udiv	lr, r8, r0
341818d0:	fb00 881e 	mls	r8, r0, lr, r8
341818d4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
341818d8:	fb0e f80c 	mul.w	r8, lr, ip
341818dc:	45a0      	cmp	r8, r4
341818de:	d90e      	bls.n	341818fe <__udivmoddi4+0x1b6>
341818e0:	193c      	adds	r4, r7, r4
341818e2:	f10e 3aff 	add.w	sl, lr, #4294967295
341818e6:	bf2c      	ite	cs
341818e8:	f04f 0b01 	movcs.w	fp, #1
341818ec:	f04f 0b00 	movcc.w	fp, #0
341818f0:	45a0      	cmp	r8, r4
341818f2:	d903      	bls.n	341818fc <__udivmoddi4+0x1b4>
341818f4:	f1bb 0f00 	cmp.w	fp, #0
341818f8:	f000 80b8 	beq.w	34181a6c <__udivmoddi4+0x324>
341818fc:	46d6      	mov	lr, sl
341818fe:	eba4 0408 	sub.w	r4, r4, r8
34181902:	fa1f f883 	uxth.w	r8, r3
34181906:	fbb4 f3f0 	udiv	r3, r4, r0
3418190a:	fb00 4413 	mls	r4, r0, r3, r4
3418190e:	fb03 fc0c 	mul.w	ip, r3, ip
34181912:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
34181916:	45a4      	cmp	ip, r4
34181918:	d90e      	bls.n	34181938 <__udivmoddi4+0x1f0>
3418191a:	193c      	adds	r4, r7, r4
3418191c:	f103 30ff 	add.w	r0, r3, #4294967295
34181920:	bf2c      	ite	cs
34181922:	f04f 0801 	movcs.w	r8, #1
34181926:	f04f 0800 	movcc.w	r8, #0
3418192a:	45a4      	cmp	ip, r4
3418192c:	d903      	bls.n	34181936 <__udivmoddi4+0x1ee>
3418192e:	f1b8 0f00 	cmp.w	r8, #0
34181932:	f000 809f 	beq.w	34181a74 <__udivmoddi4+0x32c>
34181936:	4603      	mov	r3, r0
34181938:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
3418193c:	eba4 040c 	sub.w	r4, r4, ip
34181940:	fba0 ec02 	umull	lr, ip, r0, r2
34181944:	4564      	cmp	r4, ip
34181946:	4673      	mov	r3, lr
34181948:	46e0      	mov	r8, ip
3418194a:	d302      	bcc.n	34181952 <__udivmoddi4+0x20a>
3418194c:	d107      	bne.n	3418195e <__udivmoddi4+0x216>
3418194e:	45f1      	cmp	r9, lr
34181950:	d205      	bcs.n	3418195e <__udivmoddi4+0x216>
34181952:	ebbe 0302 	subs.w	r3, lr, r2
34181956:	eb6c 0c07 	sbc.w	ip, ip, r7
3418195a:	3801      	subs	r0, #1
3418195c:	46e0      	mov	r8, ip
3418195e:	b15d      	cbz	r5, 34181978 <__udivmoddi4+0x230>
34181960:	ebb9 0203 	subs.w	r2, r9, r3
34181964:	eb64 0408 	sbc.w	r4, r4, r8
34181968:	fa04 f606 	lsl.w	r6, r4, r6
3418196c:	fa22 f301 	lsr.w	r3, r2, r1
34181970:	40cc      	lsrs	r4, r1
34181972:	431e      	orrs	r6, r3
34181974:	e9c5 6400 	strd	r6, r4, [r5]
34181978:	2100      	movs	r1, #0
3418197a:	e736      	b.n	341817ea <__udivmoddi4+0xa2>
3418197c:	fbb1 fcf2 	udiv	ip, r1, r2
34181980:	0c01      	lsrs	r1, r0, #16
34181982:	4614      	mov	r4, r2
34181984:	b280      	uxth	r0, r0
34181986:	4696      	mov	lr, r2
34181988:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
3418198c:	2620      	movs	r6, #32
3418198e:	4690      	mov	r8, r2
34181990:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34181994:	4610      	mov	r0, r2
34181996:	fbb1 f1f2 	udiv	r1, r1, r2
3418199a:	eba3 0308 	sub.w	r3, r3, r8
3418199e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
341819a2:	e74b      	b.n	3418183c <__udivmoddi4+0xf4>
341819a4:	40b7      	lsls	r7, r6
341819a6:	f1c6 0320 	rsb	r3, r6, #32
341819aa:	fa01 f206 	lsl.w	r2, r1, r6
341819ae:	fa21 f803 	lsr.w	r8, r1, r3
341819b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
341819b6:	fa20 f303 	lsr.w	r3, r0, r3
341819ba:	b2bc      	uxth	r4, r7
341819bc:	40b0      	lsls	r0, r6
341819be:	4313      	orrs	r3, r2
341819c0:	0c02      	lsrs	r2, r0, #16
341819c2:	0c19      	lsrs	r1, r3, #16
341819c4:	b280      	uxth	r0, r0
341819c6:	fbb8 f9fe 	udiv	r9, r8, lr
341819ca:	fb0e 8819 	mls	r8, lr, r9, r8
341819ce:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
341819d2:	fb09 f804 	mul.w	r8, r9, r4
341819d6:	4588      	cmp	r8, r1
341819d8:	d951      	bls.n	34181a7e <__udivmoddi4+0x336>
341819da:	1879      	adds	r1, r7, r1
341819dc:	f109 3cff 	add.w	ip, r9, #4294967295
341819e0:	bf2c      	ite	cs
341819e2:	f04f 0a01 	movcs.w	sl, #1
341819e6:	f04f 0a00 	movcc.w	sl, #0
341819ea:	4588      	cmp	r8, r1
341819ec:	d902      	bls.n	341819f4 <__udivmoddi4+0x2ac>
341819ee:	f1ba 0f00 	cmp.w	sl, #0
341819f2:	d031      	beq.n	34181a58 <__udivmoddi4+0x310>
341819f4:	eba1 0108 	sub.w	r1, r1, r8
341819f8:	fbb1 f9fe 	udiv	r9, r1, lr
341819fc:	fb09 f804 	mul.w	r8, r9, r4
34181a00:	fb0e 1119 	mls	r1, lr, r9, r1
34181a04:	b29b      	uxth	r3, r3
34181a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34181a0a:	4543      	cmp	r3, r8
34181a0c:	d235      	bcs.n	34181a7a <__udivmoddi4+0x332>
34181a0e:	18fb      	adds	r3, r7, r3
34181a10:	f109 31ff 	add.w	r1, r9, #4294967295
34181a14:	bf2c      	ite	cs
34181a16:	f04f 0a01 	movcs.w	sl, #1
34181a1a:	f04f 0a00 	movcc.w	sl, #0
34181a1e:	4543      	cmp	r3, r8
34181a20:	d2bb      	bcs.n	3418199a <__udivmoddi4+0x252>
34181a22:	f1ba 0f00 	cmp.w	sl, #0
34181a26:	d1b8      	bne.n	3418199a <__udivmoddi4+0x252>
34181a28:	f1a9 0102 	sub.w	r1, r9, #2
34181a2c:	443b      	add	r3, r7
34181a2e:	e7b4      	b.n	3418199a <__udivmoddi4+0x252>
34181a30:	1a84      	subs	r4, r0, r2
34181a32:	eb68 0203 	sbc.w	r2, r8, r3
34181a36:	2001      	movs	r0, #1
34181a38:	4696      	mov	lr, r2
34181a3a:	e6eb      	b.n	34181814 <__udivmoddi4+0xcc>
34181a3c:	443a      	add	r2, r7
34181a3e:	f1a8 0802 	sub.w	r8, r8, #2
34181a42:	e72b      	b.n	3418189c <__udivmoddi4+0x154>
34181a44:	f1ac 0c02 	sub.w	ip, ip, #2
34181a48:	443b      	add	r3, r7
34181a4a:	e710      	b.n	3418186e <__udivmoddi4+0x126>
34181a4c:	3902      	subs	r1, #2
34181a4e:	443b      	add	r3, r7
34181a50:	e6a9      	b.n	341817a6 <__udivmoddi4+0x5e>
34181a52:	443a      	add	r2, r7
34181a54:	3802      	subs	r0, #2
34181a56:	e6be      	b.n	341817d6 <__udivmoddi4+0x8e>
34181a58:	eba7 0808 	sub.w	r8, r7, r8
34181a5c:	f1a9 0c02 	sub.w	ip, r9, #2
34181a60:	4441      	add	r1, r8
34181a62:	fbb1 f9fe 	udiv	r9, r1, lr
34181a66:	fb09 f804 	mul.w	r8, r9, r4
34181a6a:	e7c9      	b.n	34181a00 <__udivmoddi4+0x2b8>
34181a6c:	f1ae 0e02 	sub.w	lr, lr, #2
34181a70:	443c      	add	r4, r7
34181a72:	e744      	b.n	341818fe <__udivmoddi4+0x1b6>
34181a74:	3b02      	subs	r3, #2
34181a76:	443c      	add	r4, r7
34181a78:	e75e      	b.n	34181938 <__udivmoddi4+0x1f0>
34181a7a:	4649      	mov	r1, r9
34181a7c:	e78d      	b.n	3418199a <__udivmoddi4+0x252>
34181a7e:	eba1 0108 	sub.w	r1, r1, r8
34181a82:	46cc      	mov	ip, r9
34181a84:	fbb1 f9fe 	udiv	r9, r1, lr
34181a88:	fb09 f804 	mul.w	r8, r9, r4
34181a8c:	e7b8      	b.n	34181a00 <__udivmoddi4+0x2b8>
34181a8e:	bf00      	nop

34181a90 <__aeabi_idiv0>:
34181a90:	4770      	bx	lr
34181a92:	bf00      	nop

34181a94 <inthdr_btn>:
	.task		= task_btn,
	.tskatr		= TA_HLNG | TA_RNG3,
};

LOCAL void inthdr_btn(UINT intno)
{
34181a94:	b580      	push	{r7, lr}
34181a96:	b082      	sub	sp, #8
34181a98:	af00      	add	r7, sp, #0
34181a9a:	6078      	str	r0, [r7, #4]
	ClearInt(BTNINT_EXTI);
34181a9c:	f240 1039 	movw	r0, #313	@ 0x139
34181aa0:	f021 f93c 	bl	341a2d1c <ClearInt>
	tk_wup_tsk(tskid_btn);
34181aa4:	4b05      	ldr	r3, [pc, #20]	@ (34181abc <inthdr_btn+0x28>)
34181aa6:	681b      	ldr	r3, [r3, #0]
34181aa8:	4618      	mov	r0, r3
34181aaa:	f01f fadb 	bl	341a1064 <tk_wup_tsk>

	ClearInt(intno);
34181aae:	6878      	ldr	r0, [r7, #4]
34181ab0:	f021 f934 	bl	341a2d1c <ClearInt>
}
34181ab4:	bf00      	nop
34181ab6:	3708      	adds	r7, #8
34181ab8:	46bd      	mov	sp, r7
34181aba:	bd80      	pop	{r7, pc}
34181abc:	341c1490 	.word	0x341c1490

34181ac0 <task_btn>:
LOCAL void task_btn(INT stacd, void *exinf)
{
34181ac0:	b580      	push	{r7, lr}
34181ac2:	b086      	sub	sp, #24
34181ac4:	af02      	add	r7, sp, #8
34181ac6:	6078      	str	r0, [r7, #4]
34181ac8:	6039      	str	r1, [r7, #0]
	BOOL	is_video_running = TRUE;
34181aca:	2301      	movs	r3, #1
34181acc:	60fb      	str	r3, [r7, #12]

	/* Interrupt handler definition */
	tk_def_int(BTNINT_IRQ, &dint_btn);
34181ace:	4916      	ldr	r1, [pc, #88]	@ (34181b28 <task_btn+0x68>)
34181ad0:	2021      	movs	r0, #33	@ 0x21
34181ad2:	f01d ff1f 	bl	3419f914 <tk_def_int>
	SetIntMode(BTNINT_EXTI, IM_EDGE | IM_LOW);
34181ad6:	2101      	movs	r1, #1
34181ad8:	f240 1039 	movw	r0, #313	@ 0x139
34181adc:	f021 f93b 	bl	341a2d56 <SetIntMode>
	EnableInt(BTNINT_EXTI, 0);
34181ae0:	2100      	movs	r1, #0
34181ae2:	f240 1039 	movw	r0, #313	@ 0x139
34181ae6:	f021 f8f9 	bl	341a2cdc <EnableInt>
	EnableInt(BTNINT_IRQ, 10);
34181aea:	210a      	movs	r1, #10
34181aec:	2021      	movs	r0, #33	@ 0x21
34181aee:	f021 f8f5 	bl	341a2cdc <EnableInt>

	while(1) {
		tk_slp_tsk(TMO_FEVR);
34181af2:	f04f 30ff 	mov.w	r0, #4294967295
34181af6:	f01f fa49 	bl	341a0f8c <tk_slp_tsk>

		if(is_video_running) {
34181afa:	68fb      	ldr	r3, [r7, #12]
34181afc:	2b00      	cmp	r3, #0
34181afe:	d007      	beq.n	34181b10 <task_btn+0x50>
			HAL_DCMIPP_CSI_PIPE_Stop(&hdcmipp, DCMIPP_PIPE1, DCMIPP_VIRTUAL_CHANNEL0);
34181b00:	2200      	movs	r2, #0
34181b02:	2101      	movs	r1, #1
34181b04:	4809      	ldr	r0, [pc, #36]	@ (34181b2c <task_btn+0x6c>)
34181b06:	f003 fbb9 	bl	3418527c <HAL_DCMIPP_CSI_PIPE_Stop>
			is_video_running = FALSE;
34181b0a:	2300      	movs	r3, #0
34181b0c:	60fb      	str	r3, [r7, #12]
34181b0e:	e7f0      	b.n	34181af2 <task_btn+0x32>
		} else {
			HAL_DCMIPP_CSI_PIPE_Start(&hdcmipp, DCMIPP_PIPE1, DCMIPP_VIRTUAL_CHANNEL0 , BUFFER_ADDRESS, DCMIPP_MODE_CONTINUOUS);
34181b10:	2300      	movs	r3, #0
34181b12:	9300      	str	r3, [sp, #0]
34181b14:	4b06      	ldr	r3, [pc, #24]	@ (34181b30 <task_btn+0x70>)
34181b16:	2200      	movs	r2, #0
34181b18:	2101      	movs	r1, #1
34181b1a:	4804      	ldr	r0, [pc, #16]	@ (34181b2c <task_btn+0x6c>)
34181b1c:	f003 fb44 	bl	341851a8 <HAL_DCMIPP_CSI_PIPE_Start>
			is_video_running = TRUE;
34181b20:	2301      	movs	r3, #1
34181b22:	60fb      	str	r3, [r7, #12]
		tk_slp_tsk(TMO_FEVR);
34181b24:	e7e5      	b.n	34181af2 <task_btn+0x32>
34181b26:	bf00      	nop
34181b28:	341c0000 	.word	0x341c0000
34181b2c:	341c1498 	.word	0x341c1498
34181b30:	34200000 	.word	0x34200000

34181b34 <task_cam>:
	.stksz		= 1024,
	.task		= task_cam,
	.tskatr		= TA_HLNG | TA_RNG3,
};
LOCAL void task_cam(INT stacd, void *exinf)
{
34181b34:	b580      	push	{r7, lr}
34181b36:	b082      	sub	sp, #8
34181b38:	af00      	add	r7, sp, #0
34181b3a:	6078      	str	r0, [r7, #4]
34181b3c:	6039      	str	r1, [r7, #0]
	while(1) {
		if( ISP_BackgroundProcess(&hcamera_isp) != ISP_OK) break;
34181b3e:	4808      	ldr	r0, [pc, #32]	@ (34181b60 <task_cam+0x2c>)
34181b40:	f01b f9e2 	bl	3419cf08 <ISP_BackgroundProcess>
34181b44:	4603      	mov	r3, r0
34181b46:	2b00      	cmp	r3, #0
34181b48:	d103      	bne.n	34181b52 <task_cam+0x1e>
		tk_dly_tsk(100);
34181b4a:	2064      	movs	r0, #100	@ 0x64
34181b4c:	f01f fb18 	bl	341a1180 <tk_dly_tsk>
		if( ISP_BackgroundProcess(&hcamera_isp) != ISP_OK) break;
34181b50:	e7f5      	b.n	34181b3e <task_cam+0xa>
34181b52:	bf00      	nop
	}
	tk_ext_tsk();
34181b54:	f01f f992 	bl	341a0e7c <tk_ext_tsk>
}
34181b58:	bf00      	nop
34181b5a:	3708      	adds	r7, #8
34181b5c:	46bd      	mov	sp, r7
34181b5e:	bd80      	pop	{r7, pc}
34181b60:	341c154c 	.word	0x341c154c

34181b64 <usermain>:

/*
 * User Main function
 */
EXPORT INT usermain(void)
{
34181b64:	b580      	push	{r7, lr}
34181b66:	af00      	add	r7, sp, #0
	tm_putstring((UB*)"Start User-main program.\n");
34181b68:	4810      	ldr	r0, [pc, #64]	@ (34181bac <usermain+0x48>)
34181b6a:	f020 f955 	bl	341a1e18 <tm_putstring>

	/* Create & Start Tasks */
	tskid_btn = tk_cre_tsk(&ctsk_sw);
34181b6e:	4810      	ldr	r0, [pc, #64]	@ (34181bb0 <usermain+0x4c>)
34181b70:	f01f f836 	bl	341a0be0 <tk_cre_tsk>
34181b74:	4603      	mov	r3, r0
34181b76:	4a0f      	ldr	r2, [pc, #60]	@ (34181bb4 <usermain+0x50>)
34181b78:	6013      	str	r3, [r2, #0]
	tk_sta_tsk(tskid_btn, 0);
34181b7a:	4b0e      	ldr	r3, [pc, #56]	@ (34181bb4 <usermain+0x50>)
34181b7c:	681b      	ldr	r3, [r3, #0]
34181b7e:	2100      	movs	r1, #0
34181b80:	4618      	mov	r0, r3
34181b82:	f01f f8db 	bl	341a0d3c <tk_sta_tsk>

	tskid_cam = tk_cre_tsk(&ctsk_cam);
34181b86:	480c      	ldr	r0, [pc, #48]	@ (34181bb8 <usermain+0x54>)
34181b88:	f01f f82a 	bl	341a0be0 <tk_cre_tsk>
34181b8c:	4603      	mov	r3, r0
34181b8e:	4a0b      	ldr	r2, [pc, #44]	@ (34181bbc <usermain+0x58>)
34181b90:	6013      	str	r3, [r2, #0]
	tk_sta_tsk(tskid_cam, 0);
34181b92:	4b0a      	ldr	r3, [pc, #40]	@ (34181bbc <usermain+0x58>)
34181b94:	681b      	ldr	r3, [r3, #0]
34181b96:	2100      	movs	r1, #0
34181b98:	4618      	mov	r0, r3
34181b9a:	f01f f8cf 	bl	341a0d3c <tk_sta_tsk>

	tk_slp_tsk(TMO_FEVR);
34181b9e:	f04f 30ff 	mov.w	r0, #4294967295
34181ba2:	f01f f9f3 	bl	341a0f8c <tk_slp_tsk>
	return 0;
34181ba6:	2300      	movs	r3, #0
34181ba8:	4618      	mov	r0, r3
34181baa:	bd80      	pop	{r7, pc}
34181bac:	341a4e60 	.word	0x341a4e60
34181bb0:	341c0008 	.word	0x341c0008
34181bb4:	341c1490 	.word	0x341c1490
34181bb8:	341c0020 	.word	0x341c0020
34181bbc:	341c1494 	.word	0x341c1494

34181bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34181bc0:	b580      	push	{r7, lr}
34181bc2:	b090      	sub	sp, #64	@ 0x40
34181bc4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  ISP_AppliHelpersTypeDef appliHelpers = {0};
34181bc6:	f107 0314 	add.w	r3, r7, #20
34181bca:	2224      	movs	r2, #36	@ 0x24
34181bcc:	2100      	movs	r1, #0
34181bce:	4618      	mov	r0, r3
34181bd0:	f021 fb68 	bl	341a32a4 <memset>

  /* Enable D-Cache---------------------------------------------------------*/
  // SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34181bd4:	f002 fc56 	bl	34184484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34181bd8:	f000 f87e 	bl	34181cd8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED_GREEN);
34181bdc:	2000      	movs	r0, #0
34181bde:	f001 fa71 	bl	341830c4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
34181be2:	2001      	movs	r0, #1
34181be4:	f001 fa6e 	bl	341830c4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER1, BUTTON_MODE_EXTI);
34181be8:	2101      	movs	r1, #1
34181bea:	2000      	movs	r0, #0
34181bec:	f001 faf2 	bl	341831d4 <BSP_PB_Init>
    /* UART log */
#if USE_COM_LOG
  COM_InitTypeDef COM_Init;

  /* Initialize COM init structure */
  COM_Init.BaudRate   = 115200;
34181bf0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
34181bf4:	607b      	str	r3, [r7, #4]
  COM_Init.WordLength = COM_WORDLENGTH_8B;
34181bf6:	2300      	movs	r3, #0
34181bf8:	60bb      	str	r3, [r7, #8]
  COM_Init.StopBits   = COM_STOPBITS_1;
34181bfa:	2300      	movs	r3, #0
34181bfc:	81bb      	strh	r3, [r7, #12]
  COM_Init.Parity     = COM_PARITY_NONE;
34181bfe:	2300      	movs	r3, #0
34181c00:	81fb      	strh	r3, [r7, #14]
  COM_Init.HwFlowCtl  = COM_HWCONTROL_NONE;
34181c02:	2300      	movs	r3, #0
34181c04:	823b      	strh	r3, [r7, #16]

  BSP_COM_Init(COM1, &COM_Init);
34181c06:	1d3b      	adds	r3, r7, #4
34181c08:	4619      	mov	r1, r3
34181c0a:	2000      	movs	r0, #0
34181c0c:	f001 fb88 	bl	34183320 <BSP_COM_Init>

  if (BSP_COM_SelectLogPort(COM1) != BSP_ERROR_NONE)
34181c10:	2000      	movs	r0, #0
34181c12:	f001 fbdf 	bl	341833d4 <BSP_COM_SelectLogPort>
34181c16:	4603      	mov	r3, r0
34181c18:	2b00      	cmp	r3, #0
34181c1a:	d001      	beq.n	34181c20 <main+0x60>
  {
    Error_Handler();
34181c1c:	f000 fb1c 	bl	34182258 <Error_Handler>
  }
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DCMIPP_Init();
34181c20:	f000 f90e 	bl	34181e40 <MX_DCMIPP_Init>

  /* Initialize the IMX335 Sensor ----------------------------- */
  IMX335_Probe(IMX335_R2592_1944, IMX335_RAW_RGGB10);
34181c24:	210a      	movs	r1, #10
34181c26:	2006      	movs	r0, #6
34181c28:	f000 fa26 	bl	34182078 <IMX335_Probe>

  /* USER CODE BEGIN 2 */
  LCD_Init(FRAME_WIDTH, FRAME_HEIGHT);
34181c2c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
34181c30:	f44f 7048 	mov.w	r0, #800	@ 0x320
34181c34:	f000 f99a 	bl	34181f6c <LCD_Init>

  /* Fill init struct with Camera driver helpers */
  appliHelpers.GetSensorInfo = GetSensorInfoHelper;
34181c38:	4b1e      	ldr	r3, [pc, #120]	@ (34181cb4 <main+0xf4>)
34181c3a:	623b      	str	r3, [r7, #32]
  appliHelpers.SetSensorGain = SetSensorGainHelper;
34181c3c:	4b1e      	ldr	r3, [pc, #120]	@ (34181cb8 <main+0xf8>)
34181c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  appliHelpers.GetSensorGain = GetSensorGainHelper;
34181c40:	4b1e      	ldr	r3, [pc, #120]	@ (34181cbc <main+0xfc>)
34181c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  appliHelpers.SetSensorExposure = SetSensorExposureHelper;
34181c44:	4b1e      	ldr	r3, [pc, #120]	@ (34181cc0 <main+0x100>)
34181c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  appliHelpers.GetSensorExposure = GetSensorExposureHelper;
34181c48:	4b1e      	ldr	r3, [pc, #120]	@ (34181cc4 <main+0x104>)
34181c4a:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize the Image Signal Processing middleware */
  if(ISP_Init(&hcamera_isp, &hdcmipp, 0, &appliHelpers, ISP_IQParamCacheInit[0]) != ISP_OK)
34181c4c:	4b1e      	ldr	r3, [pc, #120]	@ (34181cc8 <main+0x108>)
34181c4e:	681b      	ldr	r3, [r3, #0]
34181c50:	f107 0214 	add.w	r2, r7, #20
34181c54:	9300      	str	r3, [sp, #0]
34181c56:	4613      	mov	r3, r2
34181c58:	2200      	movs	r2, #0
34181c5a:	491c      	ldr	r1, [pc, #112]	@ (34181ccc <main+0x10c>)
34181c5c:	481c      	ldr	r0, [pc, #112]	@ (34181cd0 <main+0x110>)
34181c5e:	f01a ff85 	bl	3419cb6c <ISP_Init>
34181c62:	4603      	mov	r3, r0
34181c64:	2b00      	cmp	r3, #0
34181c66:	d001      	beq.n	34181c6c <main+0xac>
  {
    Error_Handler();
34181c68:	f000 faf6 	bl	34182258 <Error_Handler>
  }

  if (HAL_DCMIPP_CSI_PIPE_Start(&hdcmipp, DCMIPP_PIPE1, DCMIPP_VIRTUAL_CHANNEL0 , BUFFER_ADDRESS, DCMIPP_MODE_CONTINUOUS) != HAL_OK)
34181c6c:	2300      	movs	r3, #0
34181c6e:	9300      	str	r3, [sp, #0]
34181c70:	4b18      	ldr	r3, [pc, #96]	@ (34181cd4 <main+0x114>)
34181c72:	2200      	movs	r2, #0
34181c74:	2101      	movs	r1, #1
34181c76:	4815      	ldr	r0, [pc, #84]	@ (34181ccc <main+0x10c>)
34181c78:	f003 fa96 	bl	341851a8 <HAL_DCMIPP_CSI_PIPE_Start>
34181c7c:	4603      	mov	r3, r0
34181c7e:	2b00      	cmp	r3, #0
34181c80:	d001      	beq.n	34181c86 <main+0xc6>
  {
    Error_Handler();
34181c82:	f000 fae9 	bl	34182258 <Error_Handler>
  }

  /* Start the Image Signal Processing */
  if (ISP_Start(&hcamera_isp) != ISP_OK)
34181c86:	4812      	ldr	r0, [pc, #72]	@ (34181cd0 <main+0x110>)
34181c88:	f01b f836 	bl	3419ccf8 <ISP_Start>
34181c8c:	4603      	mov	r3, r0
34181c8e:	2b00      	cmp	r3, #0
34181c90:	d001      	beq.n	34181c96 <main+0xd6>
  {
    Error_Handler();
34181c92:	f000 fae1 	bl	34182258 <Error_Handler>
  }

  void knl_start_mtkernel(void);
  knl_start_mtkernel();
34181c96:	f020 fdef 	bl	341a2878 <knl_start_mtkernel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    BSP_LED_Toggle(LED_GREEN);
34181c9a:	2000      	movs	r0, #0
34181c9c:	f001 fa80 	bl	341831a0 <BSP_LED_Toggle>
    if (ISP_BackgroundProcess(&hcamera_isp) != ISP_OK)
34181ca0:	480b      	ldr	r0, [pc, #44]	@ (34181cd0 <main+0x110>)
34181ca2:	f01b f931 	bl	3419cf08 <ISP_BackgroundProcess>
34181ca6:	4603      	mov	r3, r0
34181ca8:	2b00      	cmp	r3, #0
34181caa:	d0f6      	beq.n	34181c9a <main+0xda>
    {
      BSP_LED_Toggle(LED_RED);
34181cac:	2001      	movs	r0, #1
34181cae:	f001 fa77 	bl	341831a0 <BSP_LED_Toggle>
    BSP_LED_Toggle(LED_GREEN);
34181cb2:	e7f2      	b.n	34181c9a <main+0xda>
34181cb4:	34182121 	.word	0x34182121
34181cb8:	34182145 	.word	0x34182145
34181cbc:	34182171 	.word	0x34182171
34181cc0:	34182195 	.word	0x34182195
34181cc4:	341821c1 	.word	0x341821c1
34181cc8:	341c0038 	.word	0x341c0038
34181ccc:	341c1498 	.word	0x341c1498
34181cd0:	341c154c 	.word	0x341c154c
34181cd4:	34200000 	.word	0x34200000

34181cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34181cd8:	b580      	push	{r7, lr}
34181cda:	b0b6      	sub	sp, #216	@ 0xd8
34181cdc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34181cde:	f107 0398 	add.w	r3, r7, #152	@ 0x98
34181ce2:	2240      	movs	r2, #64	@ 0x40
34181ce4:	2100      	movs	r1, #0
34181ce6:	4618      	mov	r0, r3
34181ce8:	f021 fadc 	bl	341a32a4 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34181cec:	463b      	mov	r3, r7
34181cee:	2298      	movs	r2, #152	@ 0x98
34181cf0:	2100      	movs	r1, #0
34181cf2:	4618      	mov	r0, r3
34181cf4:	f021 fad6 	bl	341a32a4 <memset>

  /** Configure the System Power Supply */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY ) != HAL_OK)
34181cf8:	2000      	movs	r0, #0
34181cfa:	f009 fe15 	bl	3418b928 <HAL_PWREx_ConfigSupply>
34181cfe:	4603      	mov	r3, r0
34181d00:	2b00      	cmp	r3, #0
34181d02:	d001      	beq.n	34181d08 <SystemClock_Config+0x30>
  {
    Error_Handler();
34181d04:	f000 faa8 	bl	34182258 <Error_Handler>
  }

  /** Enable HSI
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34181d08:	2302      	movs	r3, #2
34181d0a:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34181d0c:	2308      	movs	r3, #8
34181d0e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34181d10:	2300      	movs	r3, #0
34181d12:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34181d14:	2300      	movs	r3, #0
34181d16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34181d18:	2300      	movs	r3, #0
34181d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34181d1c:	2300      	movs	r3, #0
34181d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34181d20:	2300      	movs	r3, #0
34181d22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34181d24:	2300      	movs	r3, #0
34181d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34181d28:	463b      	mov	r3, r7
34181d2a:	4618      	mov	r0, r3
34181d2c:	f00a f944 	bl	3418bfb8 <HAL_RCC_OscConfig>
34181d30:	4603      	mov	r3, r0
34181d32:	2b00      	cmp	r3, #0
34181d34:	d001      	beq.n	34181d3a <SystemClock_Config+0x62>
  {
    Error_Handler();
34181d36:	f000 fa8f 	bl	34182258 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and
 if necessary switch to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34181d3a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
34181d3e:	4618      	mov	r0, r3
34181d40:	f00b fbee 	bl	3418d520 <HAL_RCC_GetClockConfig>
  if((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34181d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
34181d48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34181d4c:	d004      	beq.n	34181d58 <SystemClock_Config+0x80>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34181d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  if((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34181d52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34181d56:	d112      	bne.n	34181d7e <SystemClock_Config+0xa6>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_SYSCLK);
34181d58:	2303      	movs	r3, #3
34181d5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34181d5e:	2300      	movs	r3, #0
34181d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34181d64:	2300      	movs	r3, #0
34181d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34181d6a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
34181d6e:	4618      	mov	r0, r3
34181d70:	f00a fe42 	bl	3418c9f8 <HAL_RCC_ClockConfig>
34181d74:	4603      	mov	r3, r0
34181d76:	2b00      	cmp	r3, #0
34181d78:	d001      	beq.n	34181d7e <SystemClock_Config+0xa6>
    {
      Error_Handler();
34181d7a:	f000 fa6d 	bl	34182258 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34181d7e:	2300      	movs	r3, #0
34181d80:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34181d82:	2302      	movs	r3, #2
34181d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34181d86:	2300      	movs	r3, #0
34181d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34181d8a:	2304      	movs	r3, #4
34181d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL1.PLLN = 75;
34181d8e:	234b      	movs	r3, #75	@ 0x4b
34181d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34181d92:	2300      	movs	r3, #0
34181d94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34181d96:	2301      	movs	r3, #1
34181d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34181d9a:	2301      	movs	r3, #1
34181d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34181d9e:	2300      	movs	r3, #0
34181da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34181da2:	2300      	movs	r3, #0
34181da4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34181da6:	2300      	movs	r3, #0
34181da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34181daa:	463b      	mov	r3, r7
34181dac:	4618      	mov	r0, r3
34181dae:	f00a f903 	bl	3418bfb8 <HAL_RCC_OscConfig>
34181db2:	4603      	mov	r3, r0
34181db4:	2b00      	cmp	r3, #0
34181db6:	d001      	beq.n	34181dbc <SystemClock_Config+0xe4>
  {
    Error_Handler();
34181db8:	f000 fa4e 	bl	34182258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34181dbc:	237f      	movs	r3, #127	@ 0x7f
34181dbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34181dc2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34181dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34181dca:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34181dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34181dd2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34181dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34181dda:	2300      	movs	r3, #0
34181ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34181de0:	2300      	movs	r3, #0
34181de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34181de6:	2300      	movs	r3, #0
34181de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34181dec:	2300      	movs	r3, #0
34181dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181df2:	2300      	movs	r3, #0
34181df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34181df8:	2302      	movs	r3, #2
34181dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181dfe:	2300      	movs	r3, #0
34181e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
34181e04:	2303      	movs	r3, #3
34181e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181e0a:	2300      	movs	r3, #0
34181e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 3;
34181e10:	2303      	movs	r3, #3
34181e12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181e16:	2300      	movs	r3, #0
34181e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 3;
34181e1c:	2303      	movs	r3, #3
34181e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34181e22:	f107 0398 	add.w	r3, r7, #152	@ 0x98
34181e26:	4618      	mov	r0, r3
34181e28:	f00a fde6 	bl	3418c9f8 <HAL_RCC_ClockConfig>
34181e2c:	4603      	mov	r3, r0
34181e2e:	2b00      	cmp	r3, #0
34181e30:	d001      	beq.n	34181e36 <SystemClock_Config+0x15e>
  {
    Error_Handler();
34181e32:	f000 fa11 	bl	34182258 <Error_Handler>
  }
}
34181e36:	bf00      	nop
34181e38:	37d8      	adds	r7, #216	@ 0xd8
34181e3a:	46bd      	mov	sp, r7
34181e3c:	bd80      	pop	{r7, pc}
	...

34181e40 <MX_DCMIPP_Init>:
  * @brief DCMIPP Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMIPP_Init(void)
{
34181e40:	b580      	push	{r7, lr}
34181e42:	b090      	sub	sp, #64	@ 0x40
34181e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMIPP_Init 0 */
  /* USER CODE END DCMIPP_Init 0 */
  DCMIPP_PipeConfTypeDef pPipeConf = {0};
34181e46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
34181e4a:	2200      	movs	r2, #0
34181e4c:	601a      	str	r2, [r3, #0]
34181e4e:	605a      	str	r2, [r3, #4]
34181e50:	609a      	str	r2, [r3, #8]
  DCMIPP_CSI_PIPE_ConfTypeDef pCSIPipeConf = {0};
34181e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
34181e56:	2200      	movs	r2, #0
34181e58:	601a      	str	r2, [r3, #0]
34181e5a:	605a      	str	r2, [r3, #4]
34181e5c:	609a      	str	r2, [r3, #8]
  DCMIPP_CSI_ConfTypeDef csiconf = {0};
34181e5e:	f107 031c 	add.w	r3, r7, #28
34181e62:	2200      	movs	r2, #0
34181e64:	601a      	str	r2, [r3, #0]
34181e66:	605a      	str	r2, [r3, #4]
34181e68:	609a      	str	r2, [r3, #8]
  DCMIPP_DownsizeTypeDef DonwsizeConf ={0};
34181e6a:	1d3b      	adds	r3, r7, #4
34181e6c:	2200      	movs	r2, #0
34181e6e:	601a      	str	r2, [r3, #0]
34181e70:	605a      	str	r2, [r3, #4]
34181e72:	609a      	str	r2, [r3, #8]
34181e74:	60da      	str	r2, [r3, #12]
34181e76:	611a      	str	r2, [r3, #16]
34181e78:	615a      	str	r2, [r3, #20]

  /* Set DCMIPP instance */
  hdcmipp.Instance = DCMIPP;
34181e7a:	4b3a      	ldr	r3, [pc, #232]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181e7c:	4a3a      	ldr	r2, [pc, #232]	@ (34181f68 <MX_DCMIPP_Init+0x128>)
34181e7e:	601a      	str	r2, [r3, #0]
  if (HAL_DCMIPP_Init(&hdcmipp) != HAL_OK)
34181e80:	4838      	ldr	r0, [pc, #224]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181e82:	f002 fcfd 	bl	34184880 <HAL_DCMIPP_Init>
34181e86:	4603      	mov	r3, r0
34181e88:	2b00      	cmp	r3, #0
34181e8a:	d001      	beq.n	34181e90 <MX_DCMIPP_Init+0x50>
  {
    Error_Handler();
34181e8c:	f000 f9e4 	bl	34182258 <Error_Handler>
  }

  /* Configure the CSI */
  csiconf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34181e90:	2301      	movs	r3, #1
34181e92:	623b      	str	r3, [r7, #32]
  csiconf.NumberOfLanes   = DCMIPP_CSI_TWO_DATA_LANES;
34181e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181e98:	61fb      	str	r3, [r7, #28]
  csiconf.PHYBitrate      = DCMIPP_CSI_PHY_BT_1600;
34181e9a:	232c      	movs	r3, #44	@ 0x2c
34181e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if(HAL_DCMIPP_CSI_SetConfig(&hdcmipp, &csiconf) != HAL_OK)
34181e9e:	f107 031c 	add.w	r3, r7, #28
34181ea2:	4619      	mov	r1, r3
34181ea4:	482f      	ldr	r0, [pc, #188]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181ea6:	f002 fd2f 	bl	34184908 <HAL_DCMIPP_CSI_SetConfig>
34181eaa:	4603      	mov	r3, r0
34181eac:	2b00      	cmp	r3, #0
34181eae:	d001      	beq.n	34181eb4 <MX_DCMIPP_Init+0x74>
  {
    Error_Handler();
34181eb0:	f000 f9d2 	bl	34182258 <Error_Handler>
  }
  /* Configure the Virtual Channel 0 */
  /* Set Virtual Channel config */
  if(HAL_DCMIPP_CSI_SetVCConfig(&hdcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10) != HAL_OK)
34181eb4:	2203      	movs	r2, #3
34181eb6:	2100      	movs	r1, #0
34181eb8:	482a      	ldr	r0, [pc, #168]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181eba:	f003 f84f 	bl	34184f5c <HAL_DCMIPP_CSI_SetVCConfig>
34181ebe:	4603      	mov	r3, r0
34181ec0:	2b00      	cmp	r3, #0
34181ec2:	d001      	beq.n	34181ec8 <MX_DCMIPP_Init+0x88>
  {
    Error_Handler();
34181ec4:	f000 f9c8 	bl	34182258 <Error_Handler>
  }

  /* Configure the serial Pipe */
  pCSIPipeConf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34181ec8:	2300      	movs	r3, #0
34181eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCSIPipeConf.DataTypeIDA  = DCMIPP_DT_RAW10;
34181ecc:	232b      	movs	r3, #43	@ 0x2b
34181ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pCSIPipeConf.DataTypeIDB  = DCMIPP_DT_RAW10; /* Don't Care */
34181ed0:	232b      	movs	r3, #43	@ 0x2b
34181ed2:	633b      	str	r3, [r7, #48]	@ 0x30


  if (HAL_DCMIPP_CSI_PIPE_SetConfig(&hdcmipp, DCMIPP_PIPE1, &pCSIPipeConf) != HAL_OK)
34181ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
34181ed8:	461a      	mov	r2, r3
34181eda:	2101      	movs	r1, #1
34181edc:	4821      	ldr	r0, [pc, #132]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181ede:	f002 fecd 	bl	34184c7c <HAL_DCMIPP_CSI_PIPE_SetConfig>
34181ee2:	4603      	mov	r3, r0
34181ee4:	2b00      	cmp	r3, #0
34181ee6:	d001      	beq.n	34181eec <MX_DCMIPP_Init+0xac>
  {
    Error_Handler();
34181ee8:	f000 f9b6 	bl	34182258 <Error_Handler>
  }

  pPipeConf.FrameRate  = DCMIPP_FRAME_RATE_ALL;
34181eec:	2300      	movs	r3, #0
34181eee:	637b      	str	r3, [r7, #52]	@ 0x34
  pPipeConf.PixelPackerFormat = DCMIPP_PIXEL_PACKER_FORMAT_RGB565_1;
34181ef0:	2301      	movs	r3, #1
34181ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Set Pitch for Main and Ancillary Pipes */
  pPipeConf.PixelPipePitch  = 1600 ; /* Number of bytes */
34181ef4:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
34181ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Configure Pipe */
  if (HAL_DCMIPP_PIPE_SetConfig(&hdcmipp, DCMIPP_PIPE1, &pPipeConf) != HAL_OK)
34181efa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
34181efe:	461a      	mov	r2, r3
34181f00:	2101      	movs	r1, #1
34181f02:	4818      	ldr	r0, [pc, #96]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181f04:	f003 f896 	bl	34185034 <HAL_DCMIPP_PIPE_SetConfig>
34181f08:	4603      	mov	r3, r0
34181f0a:	2b00      	cmp	r3, #0
34181f0c:	d001      	beq.n	34181f12 <MX_DCMIPP_Init+0xd2>
  {
    Error_Handler();
34181f0e:	f000 f9a3 	bl	34182258 <Error_Handler>
  }

  /* Configure the downsize */
  DonwsizeConf.HRatio      = 25656;
34181f12:	f246 4338 	movw	r3, #25656	@ 0x6438
34181f16:	613b      	str	r3, [r7, #16]
  DonwsizeConf.VRatio      = 33161;
34181f18:	f248 1389 	movw	r3, #33161	@ 0x8189
34181f1c:	60fb      	str	r3, [r7, #12]
  DonwsizeConf.HSize       = 800;
34181f1e:	f44f 7348 	mov.w	r3, #800	@ 0x320
34181f22:	60bb      	str	r3, [r7, #8]
  DonwsizeConf.VSize       = 480;
34181f24:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
34181f28:	607b      	str	r3, [r7, #4]
  DonwsizeConf.HDivFactor  = 316;
34181f2a:	f44f 739e 	mov.w	r3, #316	@ 0x13c
34181f2e:	61bb      	str	r3, [r7, #24]
  DonwsizeConf.VDivFactor  = 253;
34181f30:	23fd      	movs	r3, #253	@ 0xfd
34181f32:	617b      	str	r3, [r7, #20]

  if(HAL_DCMIPP_PIPE_SetDownsizeConfig(&hdcmipp, DCMIPP_PIPE1, &DonwsizeConf) != HAL_OK)
34181f34:	1d3b      	adds	r3, r7, #4
34181f36:	461a      	mov	r2, r3
34181f38:	2101      	movs	r1, #1
34181f3a:	480a      	ldr	r0, [pc, #40]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181f3c:	f004 f99c 	bl	34186278 <HAL_DCMIPP_PIPE_SetDownsizeConfig>
34181f40:	4603      	mov	r3, r0
34181f42:	2b00      	cmp	r3, #0
34181f44:	d001      	beq.n	34181f4a <MX_DCMIPP_Init+0x10a>
  {
    Error_Handler();
34181f46:	f000 f987 	bl	34182258 <Error_Handler>
  }
  if(HAL_DCMIPP_PIPE_EnableDownsize(&hdcmipp, DCMIPP_PIPE1) != HAL_OK)
34181f4a:	2101      	movs	r1, #1
34181f4c:	4805      	ldr	r0, [pc, #20]	@ (34181f64 <MX_DCMIPP_Init+0x124>)
34181f4e:	f004 fa63 	bl	34186418 <HAL_DCMIPP_PIPE_EnableDownsize>
34181f52:	4603      	mov	r3, r0
34181f54:	2b00      	cmp	r3, #0
34181f56:	d001      	beq.n	34181f5c <MX_DCMIPP_Init+0x11c>
  {
    Error_Handler();
34181f58:	f000 f97e 	bl	34182258 <Error_Handler>
  }
  /* USER CODE BEGIN DCMIPP_Init 2 */
  /* USER CODE END DCMIPP_Init 2 */
}
34181f5c:	bf00      	nop
34181f5e:	3740      	adds	r7, #64	@ 0x40
34181f60:	46bd      	mov	sp, r7
34181f62:	bd80      	pop	{r7, pc}
34181f64:	341c1498 	.word	0x341c1498
34181f68:	58002000 	.word	0x58002000

34181f6c <LCD_Init>:

static void LCD_Init(uint32_t Width, uint32_t Height)
{
34181f6c:	b580      	push	{r7, lr}
34181f6e:	b090      	sub	sp, #64	@ 0x40
34181f70:	af00      	add	r7, sp, #0
34181f72:	6078      	str	r0, [r7, #4]
34181f74:	6039      	str	r1, [r7, #0]
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
34181f76:	f107 030c 	add.w	r3, r7, #12
34181f7a:	2234      	movs	r2, #52	@ 0x34
34181f7c:	2100      	movs	r1, #0
34181f7e:	4618      	mov	r0, r3
34181f80:	f021 f990 	bl	341a32a4 <memset>

  hltdc.Instance = LTDC;
34181f84:	4b39      	ldr	r3, [pc, #228]	@ (3418206c <LCD_Init+0x100>)
34181f86:	4a3a      	ldr	r2, [pc, #232]	@ (34182070 <LCD_Init+0x104>)
34181f88:	601a      	str	r2, [r3, #0]

  hltdc.Instance = LTDC;
34181f8a:	4b38      	ldr	r3, [pc, #224]	@ (3418206c <LCD_Init+0x100>)
34181f8c:	4a38      	ldr	r2, [pc, #224]	@ (34182070 <LCD_Init+0x104>)
34181f8e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
34181f90:	4b36      	ldr	r3, [pc, #216]	@ (3418206c <LCD_Init+0x100>)
34181f92:	2200      	movs	r2, #0
34181f94:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
34181f96:	4b35      	ldr	r3, [pc, #212]	@ (3418206c <LCD_Init+0x100>)
34181f98:	2200      	movs	r2, #0
34181f9a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
34181f9c:	4b33      	ldr	r3, [pc, #204]	@ (3418206c <LCD_Init+0x100>)
34181f9e:	2200      	movs	r2, #0
34181fa0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
34181fa2:	4b32      	ldr	r3, [pc, #200]	@ (3418206c <LCD_Init+0x100>)
34181fa4:	2200      	movs	r2, #0
34181fa6:	611a      	str	r2, [r3, #16]

  hltdc.Init.HorizontalSync     = RK050HR18_HSYNC - 1;
34181fa8:	4b30      	ldr	r3, [pc, #192]	@ (3418206c <LCD_Init+0x100>)
34181faa:	2203      	movs	r2, #3
34181fac:	615a      	str	r2, [r3, #20]
  hltdc.Init.AccumulatedHBP     = RK050HR18_HSYNC + RK050HR18_HBP - 1;
34181fae:	4b2f      	ldr	r3, [pc, #188]	@ (3418206c <LCD_Init+0x100>)
34181fb0:	2207      	movs	r2, #7
34181fb2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedActiveW = RK050HR18_HSYNC + Width + RK050HR18_HBP -1;
34181fb4:	687b      	ldr	r3, [r7, #4]
34181fb6:	3307      	adds	r3, #7
34181fb8:	4a2c      	ldr	r2, [pc, #176]	@ (3418206c <LCD_Init+0x100>)
34181fba:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc.Init.TotalWidth         = RK050HR18_HSYNC + Width + RK050HR18_HBP + RK050HR18_HFP - 1;
34181fbc:	687b      	ldr	r3, [r7, #4]
34181fbe:	330b      	adds	r3, #11
34181fc0:	4a2a      	ldr	r2, [pc, #168]	@ (3418206c <LCD_Init+0x100>)
34181fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hltdc.Init.VerticalSync       = RK050HR18_VSYNC - 1;
34181fc4:	4b29      	ldr	r3, [pc, #164]	@ (3418206c <LCD_Init+0x100>)
34181fc6:	2203      	movs	r2, #3
34181fc8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedVBP     = RK050HR18_VSYNC + RK050HR18_VBP - 1;
34181fca:	4b28      	ldr	r3, [pc, #160]	@ (3418206c <LCD_Init+0x100>)
34181fcc:	2207      	movs	r2, #7
34181fce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveH = RK050HR18_VSYNC + Height + RK050HR18_VBP -1 ;
34181fd0:	683b      	ldr	r3, [r7, #0]
34181fd2:	3307      	adds	r3, #7
34181fd4:	4a25      	ldr	r2, [pc, #148]	@ (3418206c <LCD_Init+0x100>)
34181fd6:	6293      	str	r3, [r2, #40]	@ 0x28
  hltdc.Init.TotalHeigh         = RK050HR18_VSYNC + Height + RK050HR18_VBP + RK050HR18_VFP - 1;
34181fd8:	683b      	ldr	r3, [r7, #0]
34181fda:	330b      	adds	r3, #11
34181fdc:	4a23      	ldr	r2, [pc, #140]	@ (3418206c <LCD_Init+0x100>)
34181fde:	6313      	str	r3, [r2, #48]	@ 0x30

  hltdc.Init.Backcolor.Blue  = 0x0;
34181fe0:	4b22      	ldr	r3, [pc, #136]	@ (3418206c <LCD_Init+0x100>)
34181fe2:	2200      	movs	r2, #0
34181fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0xFF;
34181fe8:	4b20      	ldr	r3, [pc, #128]	@ (3418206c <LCD_Init+0x100>)
34181fea:	22ff      	movs	r2, #255	@ 0xff
34181fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red   = 0x0;
34181ff0:	4b1e      	ldr	r3, [pc, #120]	@ (3418206c <LCD_Init+0x100>)
34181ff2:	2200      	movs	r2, #0
34181ff4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  if(HAL_LTDC_Init(&hltdc) != HAL_OK)
34181ff8:	481c      	ldr	r0, [pc, #112]	@ (3418206c <LCD_Init+0x100>)
34181ffa:	f008 fa0d 	bl	3418a418 <HAL_LTDC_Init>
34181ffe:	4603      	mov	r3, r0
34182000:	2b00      	cmp	r3, #0
34182002:	d001      	beq.n	34182008 <LCD_Init+0x9c>
  {
    Error_Handler();
34182004:	f000 f928 	bl	34182258 <Error_Handler>
  }

  pLayerCfg.WindowX0       = 0;
34182008:	2300      	movs	r3, #0
3418200a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowX1       = Width;
3418200c:	687b      	ldr	r3, [r7, #4]
3418200e:	613b      	str	r3, [r7, #16]
  pLayerCfg.WindowY0       = 0;
34182010:	2300      	movs	r3, #0
34182012:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowY1       = Height;
34182014:	683b      	ldr	r3, [r7, #0]
34182016:	61bb      	str	r3, [r7, #24]
  pLayerCfg.PixelFormat    = LTDC_PIXEL_FORMAT_RGB565;
34182018:	2304      	movs	r3, #4
3418201a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.FBStartAdress  = BUFFER_ADDRESS;
3418201c:	4b15      	ldr	r3, [pc, #84]	@ (34182074 <LCD_Init+0x108>)
3418201e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
34182020:	23ff      	movs	r3, #255	@ 0xff
34182022:	623b      	str	r3, [r7, #32]
  pLayerCfg.Alpha0 = 0;
34182024:	2300      	movs	r3, #0
34182026:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
34182028:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
3418202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3418202e:	2307      	movs	r3, #7
34182030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageWidth = Width;
34182032:	687b      	ldr	r3, [r7, #4]
34182034:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.ImageHeight = Height;
34182036:	683b      	ldr	r3, [r7, #0]
34182038:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.Backcolor.Blue = 0;
3418203a:	2300      	movs	r3, #0
3418203c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pLayerCfg.Backcolor.Green = 0;
34182040:	2300      	movs	r3, #0
34182042:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pLayerCfg.Backcolor.Red = 0;
34182046:	2300      	movs	r3, #0
34182048:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if(HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LTDC_LAYER_1))
3418204c:	f107 030c 	add.w	r3, r7, #12
34182050:	2200      	movs	r2, #0
34182052:	4619      	mov	r1, r3
34182054:	4805      	ldr	r0, [pc, #20]	@ (3418206c <LCD_Init+0x100>)
34182056:	f008 fb1f 	bl	3418a698 <HAL_LTDC_ConfigLayer>
3418205a:	4603      	mov	r3, r0
3418205c:	2b00      	cmp	r3, #0
3418205e:	d001      	beq.n	34182064 <LCD_Init+0xf8>
  {
    Error_Handler();
34182060:	f000 f8fa 	bl	34182258 <Error_Handler>
  }
}
34182064:	bf00      	nop
34182066:	3740      	adds	r7, #64	@ 0x40
34182068:	46bd      	mov	sp, r7
3418206a:	bd80      	pop	{r7, pc}
3418206c:	341c14a4 	.word	0x341c14a4
34182070:	58001000 	.word	0x58001000
34182074:	34200000 	.word	0x34200000

34182078 <IMX335_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static void IMX335_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
34182078:	b580      	push	{r7, lr}
3418207a:	b08a      	sub	sp, #40	@ 0x28
3418207c:	af00      	add	r7, sp, #0
3418207e:	6078      	str	r0, [r7, #4]
34182080:	6039      	str	r1, [r7, #0]
  IMX335_IO_t              IOCtx;
  uint32_t                 id;

  /* Configure the camera driver */
  IOCtx.Address     = CAMERA_IMX335_ADDRESS;
34182082:	2334      	movs	r3, #52	@ 0x34
34182084:	833b      	strh	r3, [r7, #24]
  IOCtx.Init        = BSP_I2C1_Init;
34182086:	4b20      	ldr	r3, [pc, #128]	@ (34182108 <IMX335_Probe+0x90>)
34182088:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C1_DeInit;
3418208a:	4b20      	ldr	r3, [pc, #128]	@ (3418210c <IMX335_Probe+0x94>)
3418208c:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C1_ReadReg16;
3418208e:	4b20      	ldr	r3, [pc, #128]	@ (34182110 <IMX335_Probe+0x98>)
34182090:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C1_WriteReg16;
34182092:	4b20      	ldr	r3, [pc, #128]	@ (34182114 <IMX335_Probe+0x9c>)
34182094:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
34182096:	4b20      	ldr	r3, [pc, #128]	@ (34182118 <IMX335_Probe+0xa0>)
34182098:	627b      	str	r3, [r7, #36]	@ 0x24

  if (IMX335_RegisterBusIO(&IMX335Obj, &IOCtx) != IMX335_OK)
3418209a:	f107 0310 	add.w	r3, r7, #16
3418209e:	4619      	mov	r1, r3
341820a0:	481e      	ldr	r0, [pc, #120]	@ (3418211c <IMX335_Probe+0xa4>)
341820a2:	f000 fd7d 	bl	34182ba0 <IMX335_RegisterBusIO>
341820a6:	4603      	mov	r3, r0
341820a8:	2b00      	cmp	r3, #0
341820aa:	d002      	beq.n	341820b2 <IMX335_Probe+0x3a>
  {
    Error_Handler();
341820ac:	f000 f8d4 	bl	34182258 <Error_Handler>
341820b0:	e027      	b.n	34182102 <IMX335_Probe+0x8a>
  }
  else if (IMX335_ReadID(&IMX335Obj, &id) != IMX335_OK)
341820b2:	f107 030c 	add.w	r3, r7, #12
341820b6:	4619      	mov	r1, r3
341820b8:	4818      	ldr	r0, [pc, #96]	@ (3418211c <IMX335_Probe+0xa4>)
341820ba:	f000 fe07 	bl	34182ccc <IMX335_ReadID>
341820be:	4603      	mov	r3, r0
341820c0:	2b00      	cmp	r3, #0
341820c2:	d002      	beq.n	341820ca <IMX335_Probe+0x52>
  {
    Error_Handler();
341820c4:	f000 f8c8 	bl	34182258 <Error_Handler>
341820c8:	e01b      	b.n	34182102 <IMX335_Probe+0x8a>
  }
  else
  {
    if (id != (uint32_t) IMX335_CHIP_ID)
341820ca:	68fb      	ldr	r3, [r7, #12]
341820cc:	2b00      	cmp	r3, #0
341820ce:	d002      	beq.n	341820d6 <IMX335_Probe+0x5e>
    {
      Error_Handler();
341820d0:	f000 f8c2 	bl	34182258 <Error_Handler>
341820d4:	e015      	b.n	34182102 <IMX335_Probe+0x8a>
    }
    else
    {
      if (IMX335_Init(&IMX335Obj, Resolution, PixelFormat) != IMX335_OK)
341820d6:	683a      	ldr	r2, [r7, #0]
341820d8:	6879      	ldr	r1, [r7, #4]
341820da:	4810      	ldr	r0, [pc, #64]	@ (3418211c <IMX335_Probe+0xa4>)
341820dc:	f000 fda2 	bl	34182c24 <IMX335_Init>
341820e0:	4603      	mov	r3, r0
341820e2:	2b00      	cmp	r3, #0
341820e4:	d002      	beq.n	341820ec <IMX335_Probe+0x74>
      {
        Error_Handler();
341820e6:	f000 f8b7 	bl	34182258 <Error_Handler>
341820ea:	e00a      	b.n	34182102 <IMX335_Probe+0x8a>
      }
      else if(IMX335_SetFrequency(&IMX335Obj, IMX335_INCK_24MHZ)!= IMX335_OK)
341820ec:	2102      	movs	r1, #2
341820ee:	480b      	ldr	r0, [pc, #44]	@ (3418211c <IMX335_Probe+0xa4>)
341820f0:	f000 ff0e 	bl	34182f10 <IMX335_SetFrequency>
341820f4:	4603      	mov	r3, r0
341820f6:	2b00      	cmp	r3, #0
341820f8:	d002      	beq.n	34182100 <IMX335_Probe+0x88>
      {
        Error_Handler();
341820fa:	f000 f8ad 	bl	34182258 <Error_Handler>
341820fe:	e000      	b.n	34182102 <IMX335_Probe+0x8a>
      }
      else
      {
        return;
34182100:	bf00      	nop
      }
    }
  }
}
34182102:	3728      	adds	r7, #40	@ 0x28
34182104:	46bd      	mov	sp, r7
34182106:	bd80      	pop	{r7, pc}
34182108:	341836ed 	.word	0x341836ed
3418210c:	34183761 	.word	0x34183761
34182110:	34183889 	.word	0x34183889
34182114:	3418382d 	.word	0x3418382d
34182118:	34183a41 	.word	0x34183a41
3418211c:	341c15d8 	.word	0x341c15d8

34182120 <GetSensorInfoHelper>:
/**
  * @brief  ISP Middleware helper. Camera sensor info getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorInfoHelper(uint32_t Instance, ISP_SensorInfoTypeDef *SensorInfo)
{
34182120:	b580      	push	{r7, lr}
34182122:	b082      	sub	sp, #8
34182124:	af00      	add	r7, sp, #0
34182126:	6078      	str	r0, [r7, #4]
34182128:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  return (ISP_StatusTypeDef) IMX335_GetSensorInfo(&IMX335Obj, (IMX335_SensorInfo_t *) SensorInfo);
3418212a:	6839      	ldr	r1, [r7, #0]
3418212c:	4804      	ldr	r0, [pc, #16]	@ (34182140 <GetSensorInfoHelper+0x20>)
3418212e:	f000 fdf1 	bl	34182d14 <IMX335_GetSensorInfo>
34182132:	4603      	mov	r3, r0
34182134:	b2db      	uxtb	r3, r3
}
34182136:	4618      	mov	r0, r3
34182138:	3708      	adds	r7, #8
3418213a:	46bd      	mov	sp, r7
3418213c:	bd80      	pop	{r7, pc}
3418213e:	bf00      	nop
34182140:	341c15d8 	.word	0x341c15d8

34182144 <SetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef SetSensorGainHelper(uint32_t Instance, int32_t Gain)
{
34182144:	b580      	push	{r7, lr}
34182146:	b082      	sub	sp, #8
34182148:	af00      	add	r7, sp, #0
3418214a:	6078      	str	r0, [r7, #4]
3418214c:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_gain = Gain;
3418214e:	4a06      	ldr	r2, [pc, #24]	@ (34182168 <SetSensorGainHelper+0x24>)
34182150:	683b      	ldr	r3, [r7, #0]
34182152:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetGain(&IMX335Obj, Gain);
34182154:	6839      	ldr	r1, [r7, #0]
34182156:	4805      	ldr	r0, [pc, #20]	@ (3418216c <SetSensorGainHelper+0x28>)
34182158:	f000 fe1a 	bl	34182d90 <IMX335_SetGain>
3418215c:	4603      	mov	r3, r0
3418215e:	b2db      	uxtb	r3, r3
}
34182160:	4618      	mov	r0, r3
34182162:	3708      	adds	r7, #8
34182164:	46bd      	mov	sp, r7
34182166:	bd80      	pop	{r7, pc}
34182168:	341c1600 	.word	0x341c1600
3418216c:	341c15d8 	.word	0x341c15d8

34182170 <GetSensorGainHelper>:
/**
  * @brief  ISP Middleware helper. Camera gain getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorGainHelper(uint32_t Instance, int32_t *Gain)
{
34182170:	b480      	push	{r7}
34182172:	b083      	sub	sp, #12
34182174:	af00      	add	r7, sp, #0
34182176:	6078      	str	r0, [r7, #4]
34182178:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Gain = isp_gain;
3418217a:	4b05      	ldr	r3, [pc, #20]	@ (34182190 <GetSensorGainHelper+0x20>)
3418217c:	681a      	ldr	r2, [r3, #0]
3418217e:	683b      	ldr	r3, [r7, #0]
34182180:	601a      	str	r2, [r3, #0]
  return ISP_OK;
34182182:	2300      	movs	r3, #0
}
34182184:	4618      	mov	r0, r3
34182186:	370c      	adds	r7, #12
34182188:	46bd      	mov	sp, r7
3418218a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418218e:	4770      	bx	lr
34182190:	341c1600 	.word	0x341c1600

34182194 <SetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure setter
  * @retval ISP Status
  */
static ISP_StatusTypeDef SetSensorExposureHelper(uint32_t Instance, int32_t Exposure)
{
34182194:	b580      	push	{r7, lr}
34182196:	b082      	sub	sp, #8
34182198:	af00      	add	r7, sp, #0
3418219a:	6078      	str	r0, [r7, #4]
3418219c:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  isp_exposure = Exposure;
3418219e:	4a06      	ldr	r2, [pc, #24]	@ (341821b8 <SetSensorExposureHelper+0x24>)
341821a0:	683b      	ldr	r3, [r7, #0]
341821a2:	6013      	str	r3, [r2, #0]
  return (ISP_StatusTypeDef) IMX335_SetExposure(&IMX335Obj, Exposure);
341821a4:	6839      	ldr	r1, [r7, #0]
341821a6:	4805      	ldr	r0, [pc, #20]	@ (341821bc <SetSensorExposureHelper+0x28>)
341821a8:	f000 fe4a 	bl	34182e40 <IMX335_SetExposure>
341821ac:	4603      	mov	r3, r0
341821ae:	b2db      	uxtb	r3, r3
}
341821b0:	4618      	mov	r0, r3
341821b2:	3708      	adds	r7, #8
341821b4:	46bd      	mov	sp, r7
341821b6:	bd80      	pop	{r7, pc}
341821b8:	341c1604 	.word	0x341c1604
341821bc:	341c15d8 	.word	0x341c15d8

341821c0 <GetSensorExposureHelper>:
/**
  * @brief  ISP Middleware helper. Camera exposure getter
  * @retval ISP Status
  */
static ISP_StatusTypeDef GetSensorExposureHelper(uint32_t Instance, int32_t *Exposure)
{
341821c0:	b480      	push	{r7}
341821c2:	b083      	sub	sp, #12
341821c4:	af00      	add	r7, sp, #0
341821c6:	6078      	str	r0, [r7, #4]
341821c8:	6039      	str	r1, [r7, #0]
  UNUSED(Instance);
  *Exposure = isp_exposure;
341821ca:	4b05      	ldr	r3, [pc, #20]	@ (341821e0 <GetSensorExposureHelper+0x20>)
341821cc:	681a      	ldr	r2, [r3, #0]
341821ce:	683b      	ldr	r3, [r7, #0]
341821d0:	601a      	str	r2, [r3, #0]
  return ISP_OK;
341821d2:	2300      	movs	r3, #0
}
341821d4:	4618      	mov	r0, r3
341821d6:	370c      	adds	r7, #12
341821d8:	46bd      	mov	sp, r7
341821da:	f85d 7b04 	ldr.w	r7, [sp], #4
341821de:	4770      	bx	lr
341821e0:	341c1604 	.word	0x341c1604

341821e4 <HAL_DCMIPP_PIPE_FrameEventCallback>:

void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341821e4:	b480      	push	{r7}
341821e6:	b083      	sub	sp, #12
341821e8:	af00      	add	r7, sp, #0
341821ea:	6078      	str	r0, [r7, #4]
341821ec:	6039      	str	r1, [r7, #0]
  NbMainFrames++;
341821ee:	4b05      	ldr	r3, [pc, #20]	@ (34182204 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
341821f0:	681b      	ldr	r3, [r3, #0]
341821f2:	3301      	adds	r3, #1
341821f4:	4a03      	ldr	r2, [pc, #12]	@ (34182204 <HAL_DCMIPP_PIPE_FrameEventCallback+0x20>)
341821f6:	6013      	str	r3, [r2, #0]
}
341821f8:	bf00      	nop
341821fa:	370c      	adds	r7, #12
341821fc:	46bd      	mov	sp, r7
341821fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34182202:	4770      	bx	lr
34182204:	341c15d4 	.word	0x341c15d4

34182208 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34182208:	b580      	push	{r7, lr}
3418220a:	b082      	sub	sp, #8
3418220c:	af00      	add	r7, sp, #0
3418220e:	6078      	str	r0, [r7, #4]
34182210:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  /* Update the frame counter and call the ISP statistics handler */
  switch (Pipe)
34182212:	683b      	ldr	r3, [r7, #0]
34182214:	2b02      	cmp	r3, #2
34182216:	d014      	beq.n	34182242 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x3a>
34182218:	683b      	ldr	r3, [r7, #0]
3418221a:	2b02      	cmp	r3, #2
3418221c:	d815      	bhi.n	3418224a <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
3418221e:	683b      	ldr	r3, [r7, #0]
34182220:	2b00      	cmp	r3, #0
34182222:	d003      	beq.n	3418222c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x24>
34182224:	683b      	ldr	r3, [r7, #0]
34182226:	2b01      	cmp	r3, #1
34182228:	d004      	beq.n	34182234 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>
      break;
    case DCMIPP_PIPE2 :
      ISP_IncAncillaryFrameId(&hcamera_isp);
      break;
  }
}
3418222a:	e00e      	b.n	3418224a <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncDumpFrameId(&hcamera_isp);
3418222c:	4809      	ldr	r0, [pc, #36]	@ (34182254 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
3418222e:	f01a feae 	bl	3419cf8e <ISP_IncDumpFrameId>
      break;
34182232:	e00a      	b.n	3418224a <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncMainFrameId(&hcamera_isp);
34182234:	4807      	ldr	r0, [pc, #28]	@ (34182254 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34182236:	f01a fe94 	bl	3419cf62 <ISP_IncMainFrameId>
      ISP_GatherStatistics(&hcamera_isp);
3418223a:	4806      	ldr	r0, [pc, #24]	@ (34182254 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
3418223c:	f01a fe86 	bl	3419cf4c <ISP_GatherStatistics>
      break;
34182240:	e003      	b.n	3418224a <HAL_DCMIPP_PIPE_VsyncEventCallback+0x42>
      ISP_IncAncillaryFrameId(&hcamera_isp);
34182242:	4804      	ldr	r0, [pc, #16]	@ (34182254 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x4c>)
34182244:	f01a fe98 	bl	3419cf78 <ISP_IncAncillaryFrameId>
      break;
34182248:	bf00      	nop
}
3418224a:	bf00      	nop
3418224c:	3708      	adds	r7, #8
3418224e:	46bd      	mov	sp, r7
34182250:	bd80      	pop	{r7, pc}
34182252:	bf00      	nop
34182254:	341c154c 	.word	0x341c154c

34182258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34182258:	b580      	push	{r7, lr}
3418225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
    HAL_Delay(250);
3418225c:	20fa      	movs	r0, #250	@ 0xfa
3418225e:	f002 f97b 	bl	34184558 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
34182262:	2001      	movs	r0, #1
34182264:	f000 ff9c 	bl	341831a0 <BSP_LED_Toggle>
    HAL_Delay(250);
34182268:	bf00      	nop
3418226a:	e7f7      	b.n	3418225c <Error_Handler+0x4>

3418226c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
3418226c:	b480      	push	{r7}
3418226e:	b083      	sub	sp, #12
34182270:	af00      	add	r7, sp, #0
34182272:	6078      	str	r0, [r7, #4]
34182274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* Infinite loop */
  while (1)
34182276:	bf00      	nop
34182278:	e7fd      	b.n	34182276 <assert_failed+0xa>
	...

3418227c <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
3418227c:	b480      	push	{r7}
3418227e:	b085      	sub	sp, #20
34182280:	af00      	add	r7, sp, #0
34182282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34182284:	4a07      	ldr	r2, [pc, #28]	@ (341822a4 <LL_MEM_EnableClock+0x28>)
34182286:	687b      	ldr	r3, [r7, #4]
34182288:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
3418228c:	4b05      	ldr	r3, [pc, #20]	@ (341822a4 <LL_MEM_EnableClock+0x28>)
3418228e:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34182292:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182294:	68fb      	ldr	r3, [r7, #12]
}
34182296:	bf00      	nop
34182298:	3714      	adds	r7, #20
3418229a:	46bd      	mov	sp, r7
3418229c:	f85d 7b04 	ldr.w	r7, [sp], #4
341822a0:	4770      	bx	lr
341822a2:	bf00      	nop
341822a4:	56028000 	.word	0x56028000

341822a8 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
341822a8:	b480      	push	{r7}
341822aa:	b085      	sub	sp, #20
341822ac:	af00      	add	r7, sp, #0
341822ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
341822b0:	4a07      	ldr	r2, [pc, #28]	@ (341822d0 <LL_AHB3_GRP1_EnableClock+0x28>)
341822b2:	687b      	ldr	r3, [r7, #4]
341822b4:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
341822b8:	4b05      	ldr	r3, [pc, #20]	@ (341822d0 <LL_AHB3_GRP1_EnableClock+0x28>)
341822ba:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
341822be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341822c0:	68fb      	ldr	r3, [r7, #12]
}
341822c2:	bf00      	nop
341822c4:	3714      	adds	r7, #20
341822c6:	46bd      	mov	sp, r7
341822c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341822cc:	4770      	bx	lr
341822ce:	bf00      	nop
341822d0:	56028000 	.word	0x56028000

341822d4 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
341822d4:	b480      	push	{r7}
341822d6:	b085      	sub	sp, #20
341822d8:	af00      	add	r7, sp, #0
341822da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
341822dc:	4a07      	ldr	r2, [pc, #28]	@ (341822fc <LL_AHB4_GRP1_EnableClock+0x28>)
341822de:	687b      	ldr	r3, [r7, #4]
341822e0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
341822e4:	4b05      	ldr	r3, [pc, #20]	@ (341822fc <LL_AHB4_GRP1_EnableClock+0x28>)
341822e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
341822ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341822ec:	68fb      	ldr	r3, [r7, #12]
}
341822ee:	bf00      	nop
341822f0:	3714      	adds	r7, #20
341822f2:	46bd      	mov	sp, r7
341822f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341822f8:	4770      	bx	lr
341822fa:	bf00      	nop
341822fc:	56028000 	.word	0x56028000

34182300 <LL_APB5_GRP1_EnableClock>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
34182300:	b480      	push	{r7}
34182302:	b085      	sub	sp, #20
34182304:	af00      	add	r7, sp, #0
34182306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
34182308:	4a07      	ldr	r2, [pc, #28]	@ (34182328 <LL_APB5_GRP1_EnableClock+0x28>)
3418230a:	687b      	ldr	r3, [r7, #4]
3418230c:	f8c2 3a7c 	str.w	r3, [r2, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
34182310:	4b05      	ldr	r3, [pc, #20]	@ (34182328 <LL_APB5_GRP1_EnableClock+0x28>)
34182312:	f8d3 327c 	ldr.w	r3, [r3, #636]	@ 0x27c
34182316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34182318:	68fb      	ldr	r3, [r7, #12]
}
3418231a:	bf00      	nop
3418231c:	3714      	adds	r7, #20
3418231e:	46bd      	mov	sp, r7
34182320:	f85d 7b04 	ldr.w	r7, [sp], #4
34182324:	4770      	bx	lr
34182326:	bf00      	nop
34182328:	56028000 	.word	0x56028000

3418232c <LL_APB5_GRP1_ForceReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ForceReset(uint32_t Periphs)
{
3418232c:	b480      	push	{r7}
3418232e:	b083      	sub	sp, #12
34182330:	af00      	add	r7, sp, #0
34182332:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34182334:	4a04      	ldr	r2, [pc, #16]	@ (34182348 <LL_APB5_GRP1_ForceReset+0x1c>)
34182336:	687b      	ldr	r3, [r7, #4]
34182338:	f8c2 3a3c 	str.w	r3, [r2, #2620]	@ 0xa3c
}
3418233c:	bf00      	nop
3418233e:	370c      	adds	r7, #12
34182340:	46bd      	mov	sp, r7
34182342:	f85d 7b04 	ldr.w	r7, [sp], #4
34182346:	4770      	bx	lr
34182348:	56028000 	.word	0x56028000

3418234c <LL_APB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
3418234c:	b480      	push	{r7}
3418234e:	b083      	sub	sp, #12
34182350:	af00      	add	r7, sp, #0
34182352:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34182354:	4b06      	ldr	r3, [pc, #24]	@ (34182370 <LL_APB5_GRP1_ReleaseReset+0x24>)
34182356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418235a:	461a      	mov	r2, r3
3418235c:	687b      	ldr	r3, [r7, #4]
3418235e:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
}
34182362:	bf00      	nop
34182364:	370c      	adds	r7, #12
34182366:	46bd      	mov	sp, r7
34182368:	f85d 7b04 	ldr.w	r7, [sp], #4
3418236c:	4770      	bx	lr
3418236e:	bf00      	nop
34182370:	56028000 	.word	0x56028000

34182374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34182374:	b480      	push	{r7}
34182376:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34182378:	bf00      	nop
3418237a:	46bd      	mov	sp, r7
3418237c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182380:	4770      	bx	lr
	...

34182384 <HAL_DCMIPP_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmipp: DCMIPP handle pointer
* @retval None
*/
void HAL_DCMIPP_MspInit(DCMIPP_HandleTypeDef* hdcmipp)
{
34182384:	b580      	push	{r7, lr}
34182386:	b0f0      	sub	sp, #448	@ 0x1c0
34182388:	af00      	add	r7, sp, #0
3418238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
34182392:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34182394:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182398:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
3418239c:	4618      	mov	r0, r3
3418239e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
341823a2:	461a      	mov	r2, r3
341823a4:	2100      	movs	r1, #0
341823a6:	f020 ff7d 	bl	341a32a4 <memset>
  RAMCFG_HandleTypeDef hramcfg  = {0};
341823aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341823ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
341823b2:	461a      	mov	r2, r3
341823b4:	2300      	movs	r3, #0
341823b6:	6013      	str	r3, [r2, #0]
341823b8:	6053      	str	r3, [r2, #4]
341823ba:	6093      	str	r3, [r2, #8]
  RIMC_MasterConfig_t RIMC_master = {0};
341823bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341823c0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
341823c4:	461a      	mov	r2, r3
341823c6:	2300      	movs	r3, #0
341823c8:	6013      	str	r3, [r2, #0]
341823ca:	6053      	str	r3, [r2, #4]
  if(hdcmipp->Instance==DCMIPP)
341823cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341823d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
341823d4:	681b      	ldr	r3, [r3, #0]
341823d6:	681b      	ldr	r3, [r3, #0]
341823d8:	4a88      	ldr	r2, [pc, #544]	@ (341825fc <HAL_DCMIPP_MspInit+0x278>)
341823da:	4293      	cmp	r3, r2
341823dc:	f040 8108 	bne.w	341825f0 <HAL_DCMIPP_MspInit+0x26c>
  {
    /* USER CODE BEGIN DCMIPP_MspInit 0 */
    /*** Enable peripheral clock ***/
    /* Enable DCMIPP clock */
    __HAL_RCC_DCMIPP_CLK_ENABLE();
341823e0:	2004      	movs	r0, #4
341823e2:	f7ff ff8d 	bl	34182300 <LL_APB5_GRP1_EnableClock>

    __HAL_RCC_DCMIPP_FORCE_RESET();
341823e6:	2004      	movs	r0, #4
341823e8:	f7ff ffa0 	bl	3418232c <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_DCMIPP_RELEASE_RESET();
341823ec:	2004      	movs	r0, #4
341823ee:	f7ff ffad 	bl	3418234c <LL_APB5_GRP1_ReleaseReset>

    /*** Configure the NVIC for DCMIPP ***/
    /* NVIC configuration for DCMIPP transfer complete interrupt */
    HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
341823f2:	2200      	movs	r2, #0
341823f4:	2107      	movs	r1, #7
341823f6:	2030      	movs	r0, #48	@ 0x30
341823f8:	f002 f9c2 	bl	34184780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
341823fc:	2030      	movs	r0, #48	@ 0x30
341823fe:	f002 fa19 	bl	34184834 <HAL_NVIC_EnableIRQ>

    /*** Enable peripheral clock ***/
    /* Enable CSI clock */
    __HAL_RCC_CSI_CLK_ENABLE();
34182402:	2040      	movs	r0, #64	@ 0x40
34182404:	f7ff ff7c 	bl	34182300 <LL_APB5_GRP1_EnableClock>

    __HAL_RCC_CSI_FORCE_RESET();
34182408:	2040      	movs	r0, #64	@ 0x40
3418240a:	f7ff ff8f 	bl	3418232c <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_CSI_RELEASE_RESET();
3418240e:	2040      	movs	r0, #64	@ 0x40
34182410:	f7ff ff9c 	bl	3418234c <LL_APB5_GRP1_ReleaseReset>

    /*** Configure the NVIC for CSI ***/
    /* NVIC configuration for CSI transfer complete interrupt */
    HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
34182414:	2200      	movs	r2, #0
34182416:	2107      	movs	r1, #7
34182418:	202f      	movs	r0, #47	@ 0x2f
3418241a:	f002 f9b1 	bl	34184780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CSI_IRQn);
3418241e:	202f      	movs	r0, #47	@ 0x2f
34182420:	f002 fa08 	bl	34184834 <HAL_NVIC_EnableIRQ>
    /* Configure DCMIPP clock to IC17 with PLL1  */
    /* PLL1_VCO Input = HSI_VALUE/PLLM = 64 Mhz / 4 = 16 */
    /* PLL1_VCO Output = PLL3_VCO Input * PLLN = 16 Mhz * 75 = 1200 */
    /* PLLLCDCLK = PLL3_VCO Output/(PLLP1 * PLLP2) = 1200/4 = 300Mhz */
    /* DCMIPP clock frequency = PLLLCDCLK = 300 Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
34182424:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182428:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
3418242c:	f04f 0210 	mov.w	r2, #16
34182430:	f04f 0300 	mov.w	r3, #0
34182434:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
34182438:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418243c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34182440:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34182444:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    PeriphClkInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34182448:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418244c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34182450:	2200      	movs	r2, #0
34182452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    PeriphClkInitStruct.ICSelection[RCC_IC17].ClockDivider = 4;
34182456:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418245a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
3418245e:	2204      	movs	r2, #4
34182460:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34182464:	f107 0330 	add.w	r3, r7, #48	@ 0x30
34182468:	4618      	mov	r0, r3
3418246a:	f00c ff47 	bl	3418f2fc <HAL_RCCEx_PeriphCLKConfig>
3418246e:	4603      	mov	r3, r0
34182470:	2b00      	cmp	r3, #0
34182472:	d001      	beq.n	34182478 <HAL_DCMIPP_MspInit+0xf4>
    {
      Error_Handler();
34182474:	f7ff fef0 	bl	34182258 <Error_Handler>
    }

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CSI;
34182478:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418247c:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
34182480:	f04f 0208 	mov.w	r2, #8
34182484:	f04f 0300 	mov.w	r3, #0
34182488:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3418248c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182490:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34182494:	2200      	movs	r2, #0
34182496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PeriphClkInitStruct.ICSelection[RCC_IC18].ClockDivider = 60;
3418249a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418249e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
341824a2:	223c      	movs	r2, #60	@ 0x3c
341824a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341824a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
341824ac:	4618      	mov	r0, r3
341824ae:	f00c ff25 	bl	3418f2fc <HAL_RCCEx_PeriphCLKConfig>
341824b2:	4603      	mov	r3, r0
341824b4:	2b00      	cmp	r3, #0
341824b6:	d001      	beq.n	341824bc <HAL_DCMIPP_MspInit+0x138>
    {
      Error_Handler();
341824b8:	f7ff fece 	bl	34182258 <Error_Handler>
    }

    /* IMX335 Sensor HW Reset */
    /* Enable GPIO clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
341824bc:	2004      	movs	r0, #4
341824be:	f7ff ff09 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
341824c2:	2008      	movs	r0, #8
341824c4:	f7ff ff06 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>

    GPIO_InitTypeDef gpio_init_structure = {0};
341824c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341824cc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
341824d0:	461a      	mov	r2, r3
341824d2:	2300      	movs	r3, #0
341824d4:	6013      	str	r3, [r2, #0]
341824d6:	6053      	str	r3, [r2, #4]
341824d8:	6093      	str	r3, [r2, #8]
341824da:	60d3      	str	r3, [r2, #12]
341824dc:	6113      	str	r3, [r2, #16]

    /* Initialize camera NRST pin */
    gpio_init_structure.Pin       = GPIO_PIN_8;
341824de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341824e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
341824e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
341824ea:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Pull      = GPIO_NOPULL;
341824ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341824f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
341824f4:	2200      	movs	r2, #0
341824f6:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
341824f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341824fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34182500:	2201      	movs	r2, #1
34182502:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34182504:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182508:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
3418250c:	2203      	movs	r2, #3
3418250e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
34182510:	f107 0308 	add.w	r3, r7, #8
34182514:	4619      	mov	r1, r3
34182516:	483a      	ldr	r0, [pc, #232]	@ (34182600 <HAL_DCMIPP_MspInit+0x27c>)
34182518:	f006 f988 	bl	3418882c <HAL_GPIO_Init>

    /* Initialize camera EN pin */
    gpio_init_structure.Pin       = GPIO_PIN_2;
3418251c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182520:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34182524:	2204      	movs	r2, #4
34182526:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Pull      = GPIO_NOPULL;
34182528:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
3418252c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34182530:	2200      	movs	r2, #0
34182532:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34182534:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182538:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
3418253c:	2201      	movs	r2, #1
3418253e:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34182540:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182544:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
34182548:	2203      	movs	r2, #3
3418254a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3418254c:	f107 0308 	add.w	r3, r7, #8
34182550:	4619      	mov	r1, r3
34182552:	482c      	ldr	r0, [pc, #176]	@ (34182604 <HAL_DCMIPP_MspInit+0x280>)
34182554:	f006 f96a 	bl	3418882c <HAL_GPIO_Init>

    /* Camera sensor Power-On sequence */
    /* Assert the camera Enable and NRST pins */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
34182558:	2201      	movs	r2, #1
3418255a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418255e:	4828      	ldr	r0, [pc, #160]	@ (34182600 <HAL_DCMIPP_MspInit+0x27c>)
34182560:	f006 fe92 	bl	34189288 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
34182564:	2200      	movs	r2, #0
34182566:	2104      	movs	r1, #4
34182568:	4826      	ldr	r0, [pc, #152]	@ (34182604 <HAL_DCMIPP_MspInit+0x280>)
3418256a:	f006 fe8d 	bl	34189288 <HAL_GPIO_WritePin>
    HAL_Delay(200);   /* NRST and Enable signals asserted during 200ms */
3418256e:	20c8      	movs	r0, #200	@ 0xc8
34182570:	f001 fff2 	bl	34184558 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
34182574:	2201      	movs	r2, #1
34182576:	2104      	movs	r1, #4
34182578:	4822      	ldr	r0, [pc, #136]	@ (34182604 <HAL_DCMIPP_MspInit+0x280>)
3418257a:	f006 fe85 	bl	34189288 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* NRST de-asserted during 3ms */
3418257e:	2003      	movs	r0, #3
34182580:	f001 ffea 	bl	34184558 <HAL_Delay>

    /* SRAM3 and SRAM4 memories clock enable */
    LL_MEM_EnableClock(LL_MEM_AXISRAM3);
34182584:	2001      	movs	r0, #1
34182586:	f7ff fe79 	bl	3418227c <LL_MEM_EnableClock>
    LL_MEM_EnableClock(LL_MEM_AXISRAM4);
3418258a:	2002      	movs	r0, #2
3418258c:	f7ff fe76 	bl	3418227c <LL_MEM_EnableClock>

    /* Power On AXSRAM3 and AXISRAM4 */
    hramcfg.Instance = RAMCFG_SRAM3_AXI;
34182590:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
34182594:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
34182598:	4a1b      	ldr	r2, [pc, #108]	@ (34182608 <HAL_DCMIPP_MspInit+0x284>)
3418259a:	601a      	str	r2, [r3, #0]
    HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3418259c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
341825a0:	4618      	mov	r0, r3
341825a2:	f009 fa15 	bl	3418b9d0 <HAL_RAMCFG_EnableAXISRAM>

    hramcfg.Instance = RAMCFG_SRAM4_AXI;
341825a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341825aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
341825ae:	4a17      	ldr	r2, [pc, #92]	@ (3418260c <HAL_DCMIPP_MspInit+0x288>)
341825b0:	601a      	str	r2, [r3, #0]
    HAL_RAMCFG_EnableAXISRAM(&hramcfg);
341825b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
341825b6:	4618      	mov	r0, r3
341825b8:	f009 fa0a 	bl	3418b9d0 <HAL_RAMCFG_EnableAXISRAM>

    __HAL_RCC_RIFSC_CLK_ENABLE();
341825bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
341825c0:	f7ff fe72 	bl	341822a8 <LL_AHB3_GRP1_EnableClock>

    RIMC_master.MasterCID = RIF_CID_1;
341825c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341825c8:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
341825cc:	2202      	movs	r2, #2
341825ce:	601a      	str	r2, [r3, #0]
    RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
341825d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
341825d4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
341825d8:	2203      	movs	r2, #3
341825da:	605a      	str	r2, [r3, #4]

    HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
341825dc:	f107 031c 	add.w	r3, r7, #28
341825e0:	4619      	mov	r1, r3
341825e2:	2009      	movs	r0, #9
341825e4:	f017 fca0 	bl	34199f28 <HAL_RIF_RIMC_ConfigMasterAttributes>
    HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
341825e8:	2103      	movs	r1, #3
341825ea:	4809      	ldr	r0, [pc, #36]	@ (34182610 <HAL_DCMIPP_MspInit+0x28c>)
341825ec:	f017 fd46 	bl	3419a07c <HAL_RIF_RISC_SetSlaveSecureAttributes>
    /* USER CODE END DCMIPP_MspInit 1 */
  }

}
341825f0:	bf00      	nop
341825f2:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
341825f6:	46bd      	mov	sp, r7
341825f8:	bd80      	pop	{r7, pc}
341825fa:	bf00      	nop
341825fc:	58002000 	.word	0x58002000
34182600:	56020800 	.word	0x56020800
34182604:	56020c00 	.word	0x56020c00
34182608:	52023100 	.word	0x52023100
3418260c:	52023180 	.word	0x52023180
34182610:	2000001d 	.word	0x2000001d

34182614 <HAL_LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
34182614:	b580      	push	{r7, lr}
34182616:	b0ee      	sub	sp, #440	@ 0x1b8
34182618:	af00      	add	r7, sp, #0
3418261a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3418261e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
34182622:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef  gpio_init_structure = {0};
34182624:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182628:	2200      	movs	r2, #0
3418262a:	601a      	str	r2, [r3, #0]
3418262c:	605a      	str	r2, [r3, #4]
3418262e:	609a      	str	r2, [r3, #8]
34182630:	60da      	str	r2, [r3, #12]
34182632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34182634:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34182638:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
3418263c:	4618      	mov	r0, r3
3418263e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34182642:	461a      	mov	r2, r3
34182644:	2100      	movs	r1, #0
34182646:	f020 fe2d 	bl	341a32a4 <memset>
  RIMC_MasterConfig_t RIMC_master = {0};
3418264a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3418264e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
34182652:	461a      	mov	r2, r3
34182654:	2300      	movs	r3, #0
34182656:	6013      	str	r3, [r2, #0]
34182658:	6053      	str	r3, [r2, #4]

  if (hltdc->Instance == LTDC)
3418265a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3418265e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
34182662:	681b      	ldr	r3, [r3, #0]
34182664:	681b      	ldr	r3, [r3, #0]
34182666:	4a79      	ldr	r2, [pc, #484]	@ (3418284c <HAL_LTDC_MspInit+0x238>)
34182668:	4293      	cmp	r3, r2
3418266a:	f040 80ea 	bne.w	34182842 <HAL_LTDC_MspInit+0x22e>
  {
    __HAL_RCC_LTDC_CLK_ENABLE();
3418266e:	2002      	movs	r0, #2
34182670:	f7ff fe46 	bl	34182300 <LL_APB5_GRP1_EnableClock>

    __HAL_RCC_LTDC_FORCE_RESET();
34182674:	2002      	movs	r0, #2
34182676:	f7ff fe59 	bl	3418232c <LL_APB5_GRP1_ForceReset>
    __HAL_RCC_LTDC_RELEASE_RESET();
3418267a:	2002      	movs	r0, #2
3418267c:	f7ff fe66 	bl	3418234c <LL_APB5_GRP1_ReleaseReset>
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
34182680:	2001      	movs	r0, #1
34182682:	f7ff fe27 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
34182686:	2002      	movs	r0, #2
34182688:	f7ff fe24 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
3418268c:	2008      	movs	r0, #8
3418268e:	f7ff fe21 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
34182692:	2010      	movs	r0, #16
34182694:	f7ff fe1e 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
34182698:	2040      	movs	r0, #64	@ 0x40
3418269a:	f7ff fe1b 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
3418269e:	2080      	movs	r0, #128	@ 0x80
341826a0:	f7ff fe18 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
341826a4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
341826a8:	f7ff fe14 	bl	341822d4 <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
341826ac:	2302      	movs	r3, #2
341826ae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    gpio_init_structure.Pull      = GPIO_NOPULL;
341826b2:	2300      	movs	r3, #0
341826b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
341826b8:	2302      	movs	r3, #2
341826ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
341826be:	f248 1387 	movw	r3, #33159	@ 0x8187
341826c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341826c6:	230e      	movs	r3, #14
341826c8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
341826cc:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
341826d0:	4619      	mov	r1, r3
341826d2:	485f      	ldr	r0, [pc, #380]	@ (34182850 <HAL_LTDC_MspInit+0x23c>)
341826d4:	f006 f8aa 	bl	3418882c <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
341826d8:	f64f 0314 	movw	r3, #63508	@ 0xf814
341826dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341826e0:	230e      	movs	r3, #14
341826e2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
341826e6:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
341826ea:	4619      	mov	r1, r3
341826ec:	4859      	ldr	r0, [pc, #356]	@ (34182854 <HAL_LTDC_MspInit+0x240>)
341826ee:	f006 f89d 	bl	3418882c <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
341826f2:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
341826f6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
341826fa:	230e      	movs	r3, #14
341826fc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
34182700:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182704:	4619      	mov	r1, r3
34182706:	4854      	ldr	r0, [pc, #336]	@ (34182858 <HAL_LTDC_MspInit+0x244>)
34182708:	f006 f890 	bl	3418882c <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
3418270c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34182710:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34182714:	230e      	movs	r3, #14
34182716:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3418271a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
3418271e:	4619      	mov	r1, r3
34182720:	484e      	ldr	r0, [pc, #312]	@ (3418285c <HAL_LTDC_MspInit+0x248>)
34182722:	f006 f883 	bl	3418882c <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
34182726:	f641 1343 	movw	r3, #6467	@ 0x1943
3418272a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3418272e:	230e      	movs	r3, #14
34182730:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34182734:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182738:	4619      	mov	r1, r3
3418273a:	4849      	ldr	r0, [pc, #292]	@ (34182860 <HAL_LTDC_MspInit+0x24c>)
3418273c:	f006 f876 	bl	3418882c <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
34182740:	2358      	movs	r3, #88	@ 0x58
34182742:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
34182746:	230e      	movs	r3, #14
34182748:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3418274c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182750:	4619      	mov	r1, r3
34182752:	4844      	ldr	r0, [pc, #272]	@ (34182864 <HAL_LTDC_MspInit+0x250>)
34182754:	f006 f86a 	bl	3418882c <HAL_GPIO_Init>

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
34182758:	2302      	movs	r3, #2
3418275a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3418275e:	2301      	movs	r3, #1
34182760:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
34182764:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182768:	4619      	mov	r1, r3
3418276a:	483c      	ldr	r0, [pc, #240]	@ (3418285c <HAL_LTDC_MspInit+0x248>)
3418276c:	f006 f85e 	bl	3418882c <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
34182770:	2348      	movs	r3, #72	@ 0x48
34182772:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34182776:	2301      	movs	r3, #1
34182778:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3418277c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
34182780:	4619      	mov	r1, r3
34182782:	4839      	ldr	r0, [pc, #228]	@ (34182868 <HAL_LTDC_MspInit+0x254>)
34182784:	f006 f852 	bl	3418882c <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
34182788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418278c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34182790:	2301      	movs	r3, #1
34182792:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
34182796:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
3418279a:	4619      	mov	r1, r3
3418279c:	4830      	ldr	r0, [pc, #192]	@ (34182860 <HAL_LTDC_MspInit+0x24c>)
3418279e:	f006 f845 	bl	3418882c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
341827a2:	2201      	movs	r2, #1
341827a4:	2108      	movs	r1, #8
341827a6:	4830      	ldr	r0, [pc, #192]	@ (34182868 <HAL_LTDC_MspInit+0x254>)
341827a8:	f006 fd6e 	bl	34189288 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
341827ac:	2201      	movs	r2, #1
341827ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
341827b2:	482b      	ldr	r0, [pc, #172]	@ (34182860 <HAL_LTDC_MspInit+0x24c>)
341827b4:	f006 fd68 	bl	34189288 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
341827b8:	2201      	movs	r2, #1
341827ba:	2140      	movs	r1, #64	@ 0x40
341827bc:	482a      	ldr	r0, [pc, #168]	@ (34182868 <HAL_LTDC_MspInit+0x254>)
341827be:	f006 fd63 	bl	34189288 <HAL_GPIO_WritePin>
    /* LCD clock configuration */
    /* PLL1_VCO Input = HSI_VALUE/PLLM = 64 Mhz / 4 = 16 */
    /* PLL1_VCO Output = PLL3_VCO Input * PLLN = 16 Mhz * 75 = 1200 */
    /* PLLLCDCLK = PLL3_VCO Output/(PLLP1 * PLLP2) = 1200/48 = 25Mhz */
    /* LTDC clock frequency = PLLLCDCLK = 25 Mhz */
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
341827c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341827c6:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
341827ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
341827ce:	f04f 0300 	mov.w	r3, #0
341827d2:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
341827d6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341827da:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341827de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
341827e2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockSelection = RCC_ICCLKSOURCE_PLL1;
341827e6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341827ea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341827ee:	2200      	movs	r2, #0
341827f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 48;
341827f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
341827f8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341827fc:	2230      	movs	r2, #48	@ 0x30
341827fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34182802:	f107 0310 	add.w	r3, r7, #16
34182806:	4618      	mov	r0, r3
34182808:	f00c fd78 	bl	3418f2fc <HAL_RCCEx_PeriphCLKConfig>
3418280c:	4603      	mov	r3, r0
3418280e:	2b00      	cmp	r3, #0
34182810:	d001      	beq.n	34182816 <HAL_LTDC_MspInit+0x202>
    {
      Error_Handler();
34182812:	f7ff fd21 	bl	34182258 <Error_Handler>
    }

    RIMC_master.MasterCID = RIF_CID_1;
34182816:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
3418281a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
3418281e:	2202      	movs	r2, #2
34182820:	601a      	str	r2, [r3, #0]
    RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34182822:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34182826:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
3418282a:	2203      	movs	r2, #3
3418282c:	605a      	str	r2, [r3, #4]

    HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3418282e:	f107 0308 	add.w	r3, r7, #8
34182832:	4619      	mov	r1, r3
34182834:	200a      	movs	r0, #10
34182836:	f017 fb77 	bl	34199f28 <HAL_RIF_RIMC_ConfigMasterAttributes>
    HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3418283a:	2103      	movs	r1, #3
3418283c:	480b      	ldr	r0, [pc, #44]	@ (3418286c <HAL_LTDC_MspInit+0x258>)
3418283e:	f017 fc1d 	bl	3419a07c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  }
}
34182842:	bf00      	nop
34182844:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
34182848:	46bd      	mov	sp, r7
3418284a:	bd80      	pop	{r7, pc}
3418284c:	58001000 	.word	0x58001000
34182850:	56020000 	.word	0x56020000
34182854:	56020400 	.word	0x56020400
34182858:	56020c00 	.word	0x56020c00
3418285c:	56021000 	.word	0x56021000
34182860:	56021800 	.word	0x56021800
34182864:	56021c00 	.word	0x56021c00
34182868:	56024000 	.word	0x56024000
3418286c:	30000007 	.word	0x30000007

34182870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34182870:	b480      	push	{r7}
34182872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34182874:	bf00      	nop
34182876:	e7fd      	b.n	34182874 <NMI_Handler+0x4>

34182878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34182878:	b480      	push	{r7}
3418287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
3418287c:	bf00      	nop
3418287e:	e7fd      	b.n	3418287c <HardFault_Handler+0x4>

34182880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34182880:	b480      	push	{r7}
34182882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34182884:	bf00      	nop
34182886:	e7fd      	b.n	34182884 <MemManage_Handler+0x4>

34182888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34182888:	b480      	push	{r7}
3418288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
3418288c:	bf00      	nop
3418288e:	e7fd      	b.n	3418288c <BusFault_Handler+0x4>

34182890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34182890:	b480      	push	{r7}
34182892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34182894:	bf00      	nop
34182896:	e7fd      	b.n	34182894 <UsageFault_Handler+0x4>

34182898 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34182898:	b480      	push	{r7}
3418289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
3418289c:	bf00      	nop
3418289e:	e7fd      	b.n	3418289c <SecureFault_Handler+0x4>

341828a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
341828a0:	b480      	push	{r7}
341828a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
341828a4:	bf00      	nop
341828a6:	46bd      	mov	sp, r7
341828a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341828ac:	4770      	bx	lr

341828ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
341828ae:	b480      	push	{r7}
341828b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
341828b2:	bf00      	nop
341828b4:	46bd      	mov	sp, r7
341828b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341828ba:	4770      	bx	lr

341828bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
341828bc:	b480      	push	{r7}
341828be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
341828c0:	bf00      	nop
341828c2:	46bd      	mov	sp, r7
341828c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341828c8:	4770      	bx	lr

341828ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
341828ca:	b580      	push	{r7, lr}
341828cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
341828ce:	f001 fe23 	bl	34184518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
341828d2:	bf00      	nop
341828d4:	bd80      	pop	{r7, pc}
	...

341828d8 <CSI_IRQHandler>:

void CSI_IRQHandler(void)
{
341828d8:	b580      	push	{r7, lr}
341828da:	af00      	add	r7, sp, #0
  HAL_DCMIPP_CSI_IRQHandler(&hdcmipp);
341828dc:	4802      	ldr	r0, [pc, #8]	@ (341828e8 <CSI_IRQHandler+0x10>)
341828de:	f002 ff13 	bl	34185708 <HAL_DCMIPP_CSI_IRQHandler>
}
341828e2:	bf00      	nop
341828e4:	bd80      	pop	{r7, pc}
341828e6:	bf00      	nop
341828e8:	341c1498 	.word	0x341c1498

341828ec <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
341828ec:	b580      	push	{r7, lr}
341828ee:	af00      	add	r7, sp, #0
  HAL_DCMIPP_IRQHandler(&hdcmipp);
341828f0:	4802      	ldr	r0, [pc, #8]	@ (341828fc <DCMIPP_IRQHandler+0x10>)
341828f2:	f002 fd25 	bl	34185340 <HAL_DCMIPP_IRQHandler>
}
341828f6:	bf00      	nop
341828f8:	bd80      	pop	{r7, pc}
341828fa:	bf00      	nop
341828fc:	341c1498 	.word	0x341c1498

34182900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34182900:	b580      	push	{r7, lr}
34182902:	b086      	sub	sp, #24
34182904:	af00      	add	r7, sp, #0
34182906:	60f8      	str	r0, [r7, #12]
34182908:	60b9      	str	r1, [r7, #8]
3418290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
3418290c:	2300      	movs	r3, #0
3418290e:	617b      	str	r3, [r7, #20]
34182910:	e00a      	b.n	34182928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
34182912:	f3af 8000 	nop.w
34182916:	4601      	mov	r1, r0
34182918:	68bb      	ldr	r3, [r7, #8]
3418291a:	1c5a      	adds	r2, r3, #1
3418291c:	60ba      	str	r2, [r7, #8]
3418291e:	b2ca      	uxtb	r2, r1
34182920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34182922:	697b      	ldr	r3, [r7, #20]
34182924:	3301      	adds	r3, #1
34182926:	617b      	str	r3, [r7, #20]
34182928:	697a      	ldr	r2, [r7, #20]
3418292a:	687b      	ldr	r3, [r7, #4]
3418292c:	429a      	cmp	r2, r3
3418292e:	dbf0      	blt.n	34182912 <_read+0x12>
  }

  return len;
34182930:	687b      	ldr	r3, [r7, #4]
}
34182932:	4618      	mov	r0, r3
34182934:	3718      	adds	r7, #24
34182936:	46bd      	mov	sp, r7
34182938:	bd80      	pop	{r7, pc}

3418293a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
3418293a:	b580      	push	{r7, lr}
3418293c:	b086      	sub	sp, #24
3418293e:	af00      	add	r7, sp, #0
34182940:	60f8      	str	r0, [r7, #12]
34182942:	60b9      	str	r1, [r7, #8]
34182944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34182946:	2300      	movs	r3, #0
34182948:	617b      	str	r3, [r7, #20]
3418294a:	e009      	b.n	34182960 <_write+0x26>
  {
    __io_putchar(*ptr++);
3418294c:	68bb      	ldr	r3, [r7, #8]
3418294e:	1c5a      	adds	r2, r3, #1
34182950:	60ba      	str	r2, [r7, #8]
34182952:	781b      	ldrb	r3, [r3, #0]
34182954:	4618      	mov	r0, r3
34182956:	f000 fd53 	bl	34183400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3418295a:	697b      	ldr	r3, [r7, #20]
3418295c:	3301      	adds	r3, #1
3418295e:	617b      	str	r3, [r7, #20]
34182960:	697a      	ldr	r2, [r7, #20]
34182962:	687b      	ldr	r3, [r7, #4]
34182964:	429a      	cmp	r2, r3
34182966:	dbf1      	blt.n	3418294c <_write+0x12>
  }
  return len;
34182968:	687b      	ldr	r3, [r7, #4]
}
3418296a:	4618      	mov	r0, r3
3418296c:	3718      	adds	r7, #24
3418296e:	46bd      	mov	sp, r7
34182970:	bd80      	pop	{r7, pc}

34182972 <_close>:

int _close(int file)
{
34182972:	b480      	push	{r7}
34182974:	b083      	sub	sp, #12
34182976:	af00      	add	r7, sp, #0
34182978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
3418297a:	f04f 33ff 	mov.w	r3, #4294967295
}
3418297e:	4618      	mov	r0, r3
34182980:	370c      	adds	r7, #12
34182982:	46bd      	mov	sp, r7
34182984:	f85d 7b04 	ldr.w	r7, [sp], #4
34182988:	4770      	bx	lr

3418298a <_fstat>:


int _fstat(int file, struct stat *st)
{
3418298a:	b480      	push	{r7}
3418298c:	b083      	sub	sp, #12
3418298e:	af00      	add	r7, sp, #0
34182990:	6078      	str	r0, [r7, #4]
34182992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34182994:	683b      	ldr	r3, [r7, #0]
34182996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418299a:	605a      	str	r2, [r3, #4]
  return 0;
3418299c:	2300      	movs	r3, #0
}
3418299e:	4618      	mov	r0, r3
341829a0:	370c      	adds	r7, #12
341829a2:	46bd      	mov	sp, r7
341829a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341829a8:	4770      	bx	lr

341829aa <_isatty>:

int _isatty(int file)
{
341829aa:	b480      	push	{r7}
341829ac:	b083      	sub	sp, #12
341829ae:	af00      	add	r7, sp, #0
341829b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
341829b2:	2301      	movs	r3, #1
}
341829b4:	4618      	mov	r0, r3
341829b6:	370c      	adds	r7, #12
341829b8:	46bd      	mov	sp, r7
341829ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341829be:	4770      	bx	lr

341829c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
341829c0:	b480      	push	{r7}
341829c2:	b085      	sub	sp, #20
341829c4:	af00      	add	r7, sp, #0
341829c6:	60f8      	str	r0, [r7, #12]
341829c8:	60b9      	str	r1, [r7, #8]
341829ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
341829cc:	2300      	movs	r3, #0
}
341829ce:	4618      	mov	r0, r3
341829d0:	3714      	adds	r7, #20
341829d2:	46bd      	mov	sp, r7
341829d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341829d8:	4770      	bx	lr
	...

341829dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
341829dc:	b580      	push	{r7, lr}
341829de:	b086      	sub	sp, #24
341829e0:	af00      	add	r7, sp, #0
341829e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
341829e4:	4a14      	ldr	r2, [pc, #80]	@ (34182a38 <_sbrk+0x5c>)
341829e6:	4b15      	ldr	r3, [pc, #84]	@ (34182a3c <_sbrk+0x60>)
341829e8:	1ad3      	subs	r3, r2, r3
341829ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
341829ec:	697b      	ldr	r3, [r7, #20]
341829ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
341829f0:	4b13      	ldr	r3, [pc, #76]	@ (34182a40 <_sbrk+0x64>)
341829f2:	681b      	ldr	r3, [r3, #0]
341829f4:	2b00      	cmp	r3, #0
341829f6:	d102      	bne.n	341829fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
341829f8:	4b11      	ldr	r3, [pc, #68]	@ (34182a40 <_sbrk+0x64>)
341829fa:	4a12      	ldr	r2, [pc, #72]	@ (34182a44 <_sbrk+0x68>)
341829fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
341829fe:	4b10      	ldr	r3, [pc, #64]	@ (34182a40 <_sbrk+0x64>)
34182a00:	681a      	ldr	r2, [r3, #0]
34182a02:	687b      	ldr	r3, [r7, #4]
34182a04:	4413      	add	r3, r2
34182a06:	693a      	ldr	r2, [r7, #16]
34182a08:	429a      	cmp	r2, r3
34182a0a:	d207      	bcs.n	34182a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
34182a0c:	f020 fc98 	bl	341a3340 <__errno>
34182a10:	4603      	mov	r3, r0
34182a12:	220c      	movs	r2, #12
34182a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
34182a16:	f04f 33ff 	mov.w	r3, #4294967295
34182a1a:	e009      	b.n	34182a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34182a1c:	4b08      	ldr	r3, [pc, #32]	@ (34182a40 <_sbrk+0x64>)
34182a1e:	681b      	ldr	r3, [r3, #0]
34182a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
34182a22:	4b07      	ldr	r3, [pc, #28]	@ (34182a40 <_sbrk+0x64>)
34182a24:	681a      	ldr	r2, [r3, #0]
34182a26:	687b      	ldr	r3, [r7, #4]
34182a28:	4413      	add	r3, r2
34182a2a:	4a05      	ldr	r2, [pc, #20]	@ (34182a40 <_sbrk+0x64>)
34182a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
34182a2e:	68fb      	ldr	r3, [r7, #12]
}
34182a30:	4618      	mov	r0, r3
34182a32:	3718      	adds	r7, #24
34182a34:	46bd      	mov	sp, r7
34182a36:	bd80      	pop	{r7, pc}
34182a38:	34200000 	.word	0x34200000
34182a3c:	00000800 	.word	0x00000800
34182a40:	341c1608 	.word	0x341c1608
34182a44:	341c59a0 	.word	0x341c59a0

34182a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34182a48:	480f      	ldr	r0, [pc, #60]	@ (34182a88 <LoopForever+0x4>)
  msr   MSPLIM, r0
34182a4a:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34182a4e:	480f      	ldr	r0, [pc, #60]	@ (34182a8c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34182a50:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34182a52:	f001 fa73 	bl	34183f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34182a56:	480e      	ldr	r0, [pc, #56]	@ (34182a90 <LoopForever+0xc>)
  ldr r1, =_edata
34182a58:	490e      	ldr	r1, [pc, #56]	@ (34182a94 <LoopForever+0x10>)
  ldr r2, =_sidata
34182a5a:	4a0f      	ldr	r2, [pc, #60]	@ (34182a98 <LoopForever+0x14>)
  movs r3, #0
34182a5c:	2300      	movs	r3, #0
  b LoopCopyDataInit
34182a5e:	e002      	b.n	34182a66 <LoopCopyDataInit>

34182a60 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34182a60:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34182a62:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34182a64:	3304      	adds	r3, #4

34182a66 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34182a66:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34182a68:	428c      	cmp	r4, r1
  bcc CopyDataInit
34182a6a:	d3f9      	bcc.n	34182a60 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34182a6c:	4a0b      	ldr	r2, [pc, #44]	@ (34182a9c <LoopForever+0x18>)
  ldr r4, =_ebss
34182a6e:	4c0c      	ldr	r4, [pc, #48]	@ (34182aa0 <LoopForever+0x1c>)
  movs r3, #0
34182a70:	2300      	movs	r3, #0
  b LoopFillZerobss
34182a72:	e001      	b.n	34182a78 <LoopFillZerobss>

34182a74 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34182a74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34182a76:	3204      	adds	r2, #4

34182a78 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34182a78:	42a2      	cmp	r2, r4
  bcc FillZerobss
34182a7a:	d3fb      	bcc.n	34182a74 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34182a7c:	f020 fc66 	bl	341a334c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34182a80:	f7ff f89e 	bl	34181bc0 <main>

34182a84 <LoopForever>:

LoopForever:
  b LoopForever
34182a84:	e7fe      	b.n	34182a84 <LoopForever>
34182a86:	0000      	.short	0x0000
  ldr   r0, =_sstack
34182a88:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
34182a8c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34182a90:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34182a94:	341c0194 	.word	0x341c0194
  ldr r2, =_sidata
34182a98:	341a8a30 	.word	0x341a8a30
  ldr r2, =_sbss
34182a9c:	341c1140 	.word	0x341c1140
  ldr r4, =_ebss
34182aa0:	341c36c8 	.word	0x341c36c8

34182aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34182aa4:	e7fe      	b.n	34182aa4 <ADC1_2_IRQHandler>

34182aa6 <IMX335_WriteTable>:

/** @defgroup IMX335_Private_Functions Private Functions
  * @{
  */
static int32_t IMX335_WriteTable(IMX335_Object_t *pObj, const struct regval *regs, uint32_t size)
{
34182aa6:	b580      	push	{r7, lr}
34182aa8:	b086      	sub	sp, #24
34182aaa:	af00      	add	r7, sp, #0
34182aac:	60f8      	str	r0, [r7, #12]
34182aae:	60b9      	str	r1, [r7, #8]
34182ab0:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = IMX335_OK;
34182ab2:	2300      	movs	r3, #0
34182ab4:	613b      	str	r3, [r7, #16]

  /* Set registers */
  for(index=0; index<size ; index++)
34182ab6:	2300      	movs	r3, #0
34182ab8:	617b      	str	r3, [r7, #20]
34182aba:	e01c      	b.n	34182af6 <IMX335_WriteTable+0x50>
  {
    if(ret != IMX335_ERROR)
34182abc:	693b      	ldr	r3, [r7, #16]
34182abe:	f1b3 3fff 	cmp.w	r3, #4294967295
34182ac2:	d015      	beq.n	34182af0 <IMX335_WriteTable+0x4a>
    {
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34182ac4:	68fb      	ldr	r3, [r7, #12]
34182ac6:	f103 0018 	add.w	r0, r3, #24
34182aca:	697b      	ldr	r3, [r7, #20]
34182acc:	009b      	lsls	r3, r3, #2
34182ace:	68ba      	ldr	r2, [r7, #8]
34182ad0:	4413      	add	r3, r2
34182ad2:	8819      	ldrh	r1, [r3, #0]
34182ad4:	697b      	ldr	r3, [r7, #20]
34182ad6:	009b      	lsls	r3, r3, #2
34182ad8:	68ba      	ldr	r2, [r7, #8]
34182ada:	4413      	add	r3, r2
34182adc:	1c9a      	adds	r2, r3, #2
34182ade:	2301      	movs	r3, #1
34182ae0:	f000 fa97 	bl	34183012 <imx335_write_reg>
34182ae4:	4603      	mov	r3, r0
34182ae6:	2b00      	cmp	r3, #0
34182ae8:	d002      	beq.n	34182af0 <IMX335_WriteTable+0x4a>
      {
        ret = IMX335_ERROR;
34182aea:	f04f 33ff 	mov.w	r3, #4294967295
34182aee:	613b      	str	r3, [r7, #16]
  for(index=0; index<size ; index++)
34182af0:	697b      	ldr	r3, [r7, #20]
34182af2:	3301      	adds	r3, #1
34182af4:	617b      	str	r3, [r7, #20]
34182af6:	697a      	ldr	r2, [r7, #20]
34182af8:	687b      	ldr	r3, [r7, #4]
34182afa:	429a      	cmp	r2, r3
34182afc:	d3de      	bcc.n	34182abc <IMX335_WriteTable+0x16>
      }
    }
  }
  return ret;
34182afe:	693b      	ldr	r3, [r7, #16]
}
34182b00:	4618      	mov	r0, r3
34182b02:	3718      	adds	r7, #24
34182b04:	46bd      	mov	sp, r7
34182b06:	bd80      	pop	{r7, pc}

34182b08 <IMX335_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval IMX335_OK
  */
static int32_t IMX335_Delay(IMX335_Object_t *pObj, uint32_t Delay)
{
34182b08:	b580      	push	{r7, lr}
34182b0a:	b084      	sub	sp, #16
34182b0c:	af00      	add	r7, sp, #0
34182b0e:	6078      	str	r0, [r7, #4]
34182b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
34182b12:	687b      	ldr	r3, [r7, #4]
34182b14:	695b      	ldr	r3, [r3, #20]
34182b16:	4798      	blx	r3
34182b18:	4603      	mov	r3, r0
34182b1a:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
34182b1c:	bf00      	nop
34182b1e:	687b      	ldr	r3, [r7, #4]
34182b20:	695b      	ldr	r3, [r3, #20]
34182b22:	4798      	blx	r3
34182b24:	4603      	mov	r3, r0
34182b26:	461a      	mov	r2, r3
34182b28:	68fb      	ldr	r3, [r7, #12]
34182b2a:	1ad3      	subs	r3, r2, r3
34182b2c:	683a      	ldr	r2, [r7, #0]
34182b2e:	429a      	cmp	r2, r3
34182b30:	d8f5      	bhi.n	34182b1e <IMX335_Delay+0x16>
  {
  }
  return IMX335_OK;
34182b32:	2300      	movs	r3, #0
}
34182b34:	4618      	mov	r0, r3
34182b36:	3710      	adds	r7, #16
34182b38:	46bd      	mov	sp, r7
34182b3a:	bd80      	pop	{r7, pc}

34182b3c <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34182b3c:	b590      	push	{r4, r7, lr}
34182b3e:	b087      	sub	sp, #28
34182b40:	af00      	add	r7, sp, #0
34182b42:	60f8      	str	r0, [r7, #12]
34182b44:	607a      	str	r2, [r7, #4]
34182b46:	461a      	mov	r2, r3
34182b48:	460b      	mov	r3, r1
34182b4a:	817b      	strh	r3, [r7, #10]
34182b4c:	4613      	mov	r3, r2
34182b4e:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
34182b50:	68fb      	ldr	r3, [r7, #12]
34182b52:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34182b54:	697b      	ldr	r3, [r7, #20]
34182b56:	691c      	ldr	r4, [r3, #16]
34182b58:	697b      	ldr	r3, [r7, #20]
34182b5a:	8918      	ldrh	r0, [r3, #8]
34182b5c:	893b      	ldrh	r3, [r7, #8]
34182b5e:	8979      	ldrh	r1, [r7, #10]
34182b60:	687a      	ldr	r2, [r7, #4]
34182b62:	47a0      	blx	r4
34182b64:	4603      	mov	r3, r0
}
34182b66:	4618      	mov	r0, r3
34182b68:	371c      	adds	r7, #28
34182b6a:	46bd      	mov	sp, r7
34182b6c:	bd90      	pop	{r4, r7, pc}

34182b6e <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34182b6e:	b590      	push	{r4, r7, lr}
34182b70:	b087      	sub	sp, #28
34182b72:	af00      	add	r7, sp, #0
34182b74:	60f8      	str	r0, [r7, #12]
34182b76:	607a      	str	r2, [r7, #4]
34182b78:	461a      	mov	r2, r3
34182b7a:	460b      	mov	r3, r1
34182b7c:	817b      	strh	r3, [r7, #10]
34182b7e:	4613      	mov	r3, r2
34182b80:	813b      	strh	r3, [r7, #8]
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;
34182b82:	68fb      	ldr	r3, [r7, #12]
34182b84:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
34182b86:	697b      	ldr	r3, [r7, #20]
34182b88:	68dc      	ldr	r4, [r3, #12]
34182b8a:	697b      	ldr	r3, [r7, #20]
34182b8c:	8918      	ldrh	r0, [r3, #8]
34182b8e:	893b      	ldrh	r3, [r7, #8]
34182b90:	8979      	ldrh	r1, [r7, #10]
34182b92:	687a      	ldr	r2, [r7, #4]
34182b94:	47a0      	blx	r4
34182b96:	4603      	mov	r3, r0
}
34182b98:	4618      	mov	r0, r3
34182b9a:	371c      	adds	r7, #28
34182b9c:	46bd      	mov	sp, r7
34182b9e:	bd90      	pop	{r4, r7, pc}

34182ba0 <IMX335_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
34182ba0:	b580      	push	{r7, lr}
34182ba2:	b084      	sub	sp, #16
34182ba4:	af00      	add	r7, sp, #0
34182ba6:	6078      	str	r0, [r7, #4]
34182ba8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
34182baa:	687b      	ldr	r3, [r7, #4]
34182bac:	2b00      	cmp	r3, #0
34182bae:	d103      	bne.n	34182bb8 <IMX335_RegisterBusIO+0x18>
  {
    ret = IMX335_ERROR;
34182bb0:	f04f 33ff 	mov.w	r3, #4294967295
34182bb4:	60fb      	str	r3, [r7, #12]
34182bb6:	e02c      	b.n	34182c12 <IMX335_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
34182bb8:	683b      	ldr	r3, [r7, #0]
34182bba:	681a      	ldr	r2, [r3, #0]
34182bbc:	687b      	ldr	r3, [r7, #4]
34182bbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
34182bc0:	683b      	ldr	r3, [r7, #0]
34182bc2:	685a      	ldr	r2, [r3, #4]
34182bc4:	687b      	ldr	r3, [r7, #4]
34182bc6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
34182bc8:	683b      	ldr	r3, [r7, #0]
34182bca:	891a      	ldrh	r2, [r3, #8]
34182bcc:	687b      	ldr	r3, [r7, #4]
34182bce:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
34182bd0:	683b      	ldr	r3, [r7, #0]
34182bd2:	68da      	ldr	r2, [r3, #12]
34182bd4:	687b      	ldr	r3, [r7, #4]
34182bd6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34182bd8:	683b      	ldr	r3, [r7, #0]
34182bda:	691a      	ldr	r2, [r3, #16]
34182bdc:	687b      	ldr	r3, [r7, #4]
34182bde:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
34182be0:	683b      	ldr	r3, [r7, #0]
34182be2:	695a      	ldr	r2, [r3, #20]
34182be4:	687b      	ldr	r3, [r7, #4]
34182be6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
34182be8:	687b      	ldr	r3, [r7, #4]
34182bea:	4a0c      	ldr	r2, [pc, #48]	@ (34182c1c <IMX335_RegisterBusIO+0x7c>)
34182bec:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
34182bee:	687b      	ldr	r3, [r7, #4]
34182bf0:	4a0b      	ldr	r2, [pc, #44]	@ (34182c20 <IMX335_RegisterBusIO+0x80>)
34182bf2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
34182bf4:	687b      	ldr	r3, [r7, #4]
34182bf6:	687a      	ldr	r2, [r7, #4]
34182bf8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
34182bfa:	687b      	ldr	r3, [r7, #4]
34182bfc:	681b      	ldr	r3, [r3, #0]
34182bfe:	2b00      	cmp	r3, #0
34182c00:	d004      	beq.n	34182c0c <IMX335_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
34182c02:	687b      	ldr	r3, [r7, #4]
34182c04:	681b      	ldr	r3, [r3, #0]
34182c06:	4798      	blx	r3
34182c08:	60f8      	str	r0, [r7, #12]
34182c0a:	e002      	b.n	34182c12 <IMX335_RegisterBusIO+0x72>
    }
    else
    {
      ret = IMX335_ERROR;
34182c0c:	f04f 33ff 	mov.w	r3, #4294967295
34182c10:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
34182c12:	68fb      	ldr	r3, [r7, #12]
}
34182c14:	4618      	mov	r0, r3
34182c16:	3710      	adds	r7, #16
34182c18:	46bd      	mov	sp, r7
34182c1a:	bd80      	pop	{r7, pc}
34182c1c:	34182b3d 	.word	0x34182b3d
34182c20:	34182b6f 	.word	0x34182b6f

34182c24 <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
34182c24:	b580      	push	{r7, lr}
34182c26:	b086      	sub	sp, #24
34182c28:	af00      	add	r7, sp, #0
34182c2a:	60f8      	str	r0, [r7, #12]
34182c2c:	60b9      	str	r1, [r7, #8]
34182c2e:	607a      	str	r2, [r7, #4]
  int32_t ret = IMX335_OK;
34182c30:	2300      	movs	r3, #0
34182c32:	617b      	str	r3, [r7, #20]
  uint8_t tmp;

  if(pObj->IsInitialized == 0U)
34182c34:	68fb      	ldr	r3, [r7, #12]
34182c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
34182c3a:	2b00      	cmp	r3, #0
34182c3c:	d13d      	bne.n	34182cba <IMX335_Init+0x96>
  {
    switch (Resolution)
34182c3e:	68bb      	ldr	r3, [r7, #8]
34182c40:	2b06      	cmp	r3, #6
34182c42:	d10b      	bne.n	34182c5c <IMX335_Init+0x38>
    {
      case IMX335_R2592_1944:
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
34182c44:	2254      	movs	r2, #84	@ 0x54
34182c46:	491f      	ldr	r1, [pc, #124]	@ (34182cc4 <IMX335_Init+0xa0>)
34182c48:	68f8      	ldr	r0, [r7, #12]
34182c4a:	f7ff ff2c 	bl	34182aa6 <IMX335_WriteTable>
34182c4e:	4603      	mov	r3, r0
34182c50:	2b00      	cmp	r3, #0
34182c52:	d007      	beq.n	34182c64 <IMX335_Init+0x40>
        {
          ret = IMX335_ERROR;
34182c54:	f04f 33ff 	mov.w	r3, #4294967295
34182c58:	617b      	str	r3, [r7, #20]
        }
        break;
34182c5a:	e003      	b.n	34182c64 <IMX335_Init+0x40>
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
34182c5c:	f04f 33ff 	mov.w	r3, #4294967295
34182c60:	617b      	str	r3, [r7, #20]
34182c62:	e000      	b.n	34182c66 <IMX335_Init+0x42>
        break;
34182c64:	bf00      	nop
    }

    if(!ret)
34182c66:	697b      	ldr	r3, [r7, #20]
34182c68:	2b00      	cmp	r3, #0
34182c6a:	d126      	bne.n	34182cba <IMX335_Init+0x96>
    {
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
34182c6c:	2205      	movs	r2, #5
34182c6e:	4916      	ldr	r1, [pc, #88]	@ (34182cc8 <IMX335_Init+0xa4>)
34182c70:	68f8      	ldr	r0, [r7, #12]
34182c72:	f7ff ff18 	bl	34182aa6 <IMX335_WriteTable>
34182c76:	4603      	mov	r3, r0
34182c78:	2b00      	cmp	r3, #0
34182c7a:	d003      	beq.n	34182c84 <IMX335_Init+0x60>
      {
        ret = IMX335_ERROR;
34182c7c:	f04f 33ff 	mov.w	r3, #4294967295
34182c80:	617b      	str	r3, [r7, #20]
34182c82:	e01a      	b.n	34182cba <IMX335_Init+0x96>
      }
      else
      {
        /* Start streaming */
        tmp = IMX335_MODE_STREAMING;
34182c84:	2300      	movs	r3, #0
34182c86:	74fb      	strb	r3, [r7, #19]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1) != IMX335_OK)
34182c88:	68fb      	ldr	r3, [r7, #12]
34182c8a:	f103 0018 	add.w	r0, r3, #24
34182c8e:	f107 0213 	add.w	r2, r7, #19
34182c92:	2301      	movs	r3, #1
34182c94:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
34182c98:	f000 f9bb 	bl	34183012 <imx335_write_reg>
34182c9c:	4603      	mov	r3, r0
34182c9e:	2b00      	cmp	r3, #0
34182ca0:	d003      	beq.n	34182caa <IMX335_Init+0x86>
        {
          ret = IMX335_ERROR;
34182ca2:	f04f 33ff 	mov.w	r3, #4294967295
34182ca6:	617b      	str	r3, [r7, #20]
34182ca8:	e007      	b.n	34182cba <IMX335_Init+0x96>
        }
        else
        {
          IMX335_Delay(pObj, 20);
34182caa:	2114      	movs	r1, #20
34182cac:	68f8      	ldr	r0, [r7, #12]
34182cae:	f7ff ff2b 	bl	34182b08 <IMX335_Delay>
          pObj->IsInitialized = 1U;
34182cb2:	68fb      	ldr	r3, [r7, #12]
34182cb4:	2201      	movs	r2, #1
34182cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
34182cba:	697b      	ldr	r3, [r7, #20]
}
34182cbc:	4618      	mov	r0, r3
34182cbe:	3718      	adds	r7, #24
34182cc0:	46bd      	mov	sp, r7
34182cc2:	bd80      	pop	{r7, pc}
34182cc4:	341a6280 	.word	0x341a6280
34182cc8:	341a63d0 	.word	0x341a63d0

34182ccc <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
34182ccc:	b580      	push	{r7, lr}
34182cce:	b084      	sub	sp, #16
34182cd0:	af00      	add	r7, sp, #0
34182cd2:	6078      	str	r0, [r7, #4]
34182cd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
34182cd6:	687b      	ldr	r3, [r7, #4]
34182cd8:	681b      	ldr	r3, [r3, #0]
34182cda:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
34182cdc:	687b      	ldr	r3, [r7, #4]
34182cde:	f103 0018 	add.w	r0, r3, #24
34182ce2:	f107 020b 	add.w	r2, r7, #11
34182ce6:	2301      	movs	r3, #1
34182ce8:	f643 1112 	movw	r1, #14610	@ 0x3912
34182cec:	f000 f97a 	bl	34182fe4 <imx335_read_reg>
34182cf0:	4603      	mov	r3, r0
34182cf2:	2b00      	cmp	r3, #0
34182cf4:	d003      	beq.n	34182cfe <IMX335_ReadID+0x32>
  {
    ret = IMX335_ERROR;
34182cf6:	f04f 33ff 	mov.w	r3, #4294967295
34182cfa:	60fb      	str	r3, [r7, #12]
34182cfc:	e005      	b.n	34182d0a <IMX335_ReadID+0x3e>
  }
  else
  {
    *Id = tmp;
34182cfe:	7afb      	ldrb	r3, [r7, #11]
34182d00:	461a      	mov	r2, r3
34182d02:	683b      	ldr	r3, [r7, #0]
34182d04:	601a      	str	r2, [r3, #0]
    ret = IMX335_OK;
34182d06:	2300      	movs	r3, #0
34182d08:	60fb      	str	r3, [r7, #12]
  }

  /* Component status */
  return ret;
34182d0a:	68fb      	ldr	r3, [r7, #12]
}
34182d0c:	4618      	mov	r0, r3
34182d0e:	3710      	adds	r7, #16
34182d10:	46bd      	mov	sp, r7
34182d12:	bd80      	pop	{r7, pc}

34182d14 <IMX335_GetSensorInfo>:
  * @param  pObj   pointer to component object
  * @param  Info   pointer to sensor info
  * @retval Component status
  */
int32_t IMX335_GetSensorInfo(IMX335_Object_t *pObj, IMX335_SensorInfo_t *Info)
{
34182d14:	b480      	push	{r7}
34182d16:	b083      	sub	sp, #12
34182d18:	af00      	add	r7, sp, #0
34182d1a:	6078      	str	r0, [r7, #4]
34182d1c:	6039      	str	r1, [r7, #0]
  if ((!pObj) || (Info == NULL))
34182d1e:	687b      	ldr	r3, [r7, #4]
34182d20:	2b00      	cmp	r3, #0
34182d22:	d002      	beq.n	34182d2a <IMX335_GetSensorInfo+0x16>
34182d24:	683b      	ldr	r3, [r7, #0]
34182d26:	2b00      	cmp	r3, #0
34182d28:	d102      	bne.n	34182d30 <IMX335_GetSensorInfo+0x1c>
  {
    return IMX335_ERROR;
34182d2a:	f04f 33ff 	mov.w	r3, #4294967295
34182d2e:	e025      	b.n	34182d7c <IMX335_GetSensorInfo+0x68>
  }

  if (sizeof(Info->name) >= strlen(IMX335_NAME) + 1)
  {
    strcpy(Info->name, IMX335_NAME);
34182d30:	683b      	ldr	r3, [r7, #0]
34182d32:	4a15      	ldr	r2, [pc, #84]	@ (34182d88 <IMX335_GetSensorInfo+0x74>)
34182d34:	6810      	ldr	r0, [r2, #0]
34182d36:	6018      	str	r0, [r3, #0]
34182d38:	8891      	ldrh	r1, [r2, #4]
34182d3a:	7992      	ldrb	r2, [r2, #6]
34182d3c:	8099      	strh	r1, [r3, #4]
34182d3e:	719a      	strb	r2, [r3, #6]
  else
  {
    return IMX335_ERROR;
  }

  Info->bayer_pattern = IMX335_BAYER_PATTERN;
34182d40:	683b      	ldr	r3, [r7, #0]
34182d42:	2200      	movs	r2, #0
34182d44:	f883 2020 	strb.w	r2, [r3, #32]
  Info->color_depth = IMX335_COLOR_DEPTH;
34182d48:	683b      	ldr	r3, [r7, #0]
34182d4a:	220a      	movs	r2, #10
34182d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  Info->width = IMX335_WIDTH;
34182d50:	683b      	ldr	r3, [r7, #0]
34182d52:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
34182d56:	625a      	str	r2, [r3, #36]	@ 0x24
  Info->height = IMX335_HEIGHT;
34182d58:	683b      	ldr	r3, [r7, #0]
34182d5a:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
34182d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  Info->gain_min = IMX335_GAIN_MIN;
34182d60:	683b      	ldr	r3, [r7, #0]
34182d62:	2200      	movs	r2, #0
34182d64:	62da      	str	r2, [r3, #44]	@ 0x2c
  Info->gain_max = IMX335_GAIN_MAX;
34182d66:	683b      	ldr	r3, [r7, #0]
34182d68:	4a08      	ldr	r2, [pc, #32]	@ (34182d8c <IMX335_GetSensorInfo+0x78>)
34182d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  Info->exposure_min = IMX335_EXPOSURE_MIN;
34182d6c:	683b      	ldr	r3, [r7, #0]
34182d6e:	2200      	movs	r2, #0
34182d70:	635a      	str	r2, [r3, #52]	@ 0x34
  Info->exposure_max = IMX335_EXPOSURE_MAX;
34182d72:	683b      	ldr	r3, [r7, #0]
34182d74:	f248 12f2 	movw	r2, #33266	@ 0x81f2
34182d78:	639a      	str	r2, [r3, #56]	@ 0x38

  return IMX335_OK;
34182d7a:	2300      	movs	r3, #0
}
34182d7c:	4618      	mov	r0, r3
34182d7e:	370c      	adds	r7, #12
34182d80:	46bd      	mov	sp, r7
34182d82:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d86:	4770      	bx	lr
34182d88:	341a4e7c 	.word	0x341a4e7c
34182d8c:	00011940 	.word	0x00011940

34182d90 <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
34182d90:	b580      	push	{r7, lr}
34182d92:	b084      	sub	sp, #16
34182d94:	af00      	add	r7, sp, #0
34182d96:	6078      	str	r0, [r7, #4]
34182d98:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
34182d9a:	2300      	movs	r3, #0
34182d9c:	60fb      	str	r3, [r7, #12]
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
34182d9e:	683b      	ldr	r3, [r7, #0]
34182da0:	4a25      	ldr	r2, [pc, #148]	@ (34182e38 <IMX335_SetGain+0xa8>)
34182da2:	4293      	cmp	r3, r2
34182da4:	dc02      	bgt.n	34182dac <IMX335_SetGain+0x1c>
34182da6:	683b      	ldr	r3, [r7, #0]
34182da8:	2b00      	cmp	r3, #0
34182daa:	da03      	bge.n	34182db4 <IMX335_SetGain+0x24>
  {
    ret = IMX335_ERROR;
34182dac:	f04f 33ff 	mov.w	r3, #4294967295
34182db0:	60fb      	str	r3, [r7, #12]
34182db2:	e03c      	b.n	34182e2e <IMX335_SetGain+0x9e>
  }
  else
  {
    /* Convert to IMX335 gain unit (0.3 dB = 300 mdB) */
    gain /= IMX335_GAIN_UNIT_MDB;
34182db4:	683b      	ldr	r3, [r7, #0]
34182db6:	4a21      	ldr	r2, [pc, #132]	@ (34182e3c <IMX335_SetGain+0xac>)
34182db8:	fb82 1203 	smull	r1, r2, r2, r3
34182dbc:	1152      	asrs	r2, r2, #5
34182dbe:	17db      	asrs	r3, r3, #31
34182dc0:	1ad3      	subs	r3, r2, r3
34182dc2:	603b      	str	r3, [r7, #0]

    hold = 1;
34182dc4:	2301      	movs	r3, #1
34182dc6:	72fb      	strb	r3, [r7, #11]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182dc8:	687b      	ldr	r3, [r7, #4]
34182dca:	f103 0018 	add.w	r0, r3, #24
34182dce:	f107 020b 	add.w	r2, r7, #11
34182dd2:	2301      	movs	r3, #1
34182dd4:	f243 0101 	movw	r1, #12289	@ 0x3001
34182dd8:	f000 f91b 	bl	34183012 <imx335_write_reg>
34182ddc:	4603      	mov	r3, r0
34182dde:	2b00      	cmp	r3, #0
34182de0:	d003      	beq.n	34182dea <IMX335_SetGain+0x5a>
    {
      ret = IMX335_ERROR;
34182de2:	f04f 33ff 	mov.w	r3, #4294967295
34182de6:	60fb      	str	r3, [r7, #12]
34182de8:	e021      	b.n	34182e2e <IMX335_SetGain+0x9e>
    }
    else
    {
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
34182dea:	687b      	ldr	r3, [r7, #4]
34182dec:	f103 0018 	add.w	r0, r3, #24
34182df0:	463a      	mov	r2, r7
34182df2:	2302      	movs	r3, #2
34182df4:	f243 01e8 	movw	r1, #12520	@ 0x30e8
34182df8:	f000 f90b 	bl	34183012 <imx335_write_reg>
34182dfc:	4603      	mov	r3, r0
34182dfe:	2b00      	cmp	r3, #0
34182e00:	d003      	beq.n	34182e0a <IMX335_SetGain+0x7a>
      {
        ret = IMX335_ERROR;
34182e02:	f04f 33ff 	mov.w	r3, #4294967295
34182e06:	60fb      	str	r3, [r7, #12]
34182e08:	e011      	b.n	34182e2e <IMX335_SetGain+0x9e>
      }
      else
      {
        hold = 0;
34182e0a:	2300      	movs	r3, #0
34182e0c:	72fb      	strb	r3, [r7, #11]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182e0e:	687b      	ldr	r3, [r7, #4]
34182e10:	f103 0018 	add.w	r0, r3, #24
34182e14:	f107 020b 	add.w	r2, r7, #11
34182e18:	2301      	movs	r3, #1
34182e1a:	f243 0101 	movw	r1, #12289	@ 0x3001
34182e1e:	f000 f8f8 	bl	34183012 <imx335_write_reg>
34182e22:	4603      	mov	r3, r0
34182e24:	2b00      	cmp	r3, #0
34182e26:	d002      	beq.n	34182e2e <IMX335_SetGain+0x9e>
        {
          ret = IMX335_ERROR;
34182e28:	f04f 33ff 	mov.w	r3, #4294967295
34182e2c:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

return ret;
34182e2e:	68fb      	ldr	r3, [r7, #12]
}
34182e30:	4618      	mov	r0, r3
34182e32:	3710      	adds	r7, #16
34182e34:	46bd      	mov	sp, r7
34182e36:	bd80      	pop	{r7, pc}
34182e38:	00011940 	.word	0x00011940
34182e3c:	1b4e81b5 	.word	0x1b4e81b5

34182e40 <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
34182e40:	b580      	push	{r7, lr}
34182e42:	b086      	sub	sp, #24
34182e44:	af00      	add	r7, sp, #0
34182e46:	6078      	str	r0, [r7, #4]
34182e48:	6039      	str	r1, [r7, #0]
  int32_t ret = IMX335_OK;
34182e4a:	2300      	movs	r3, #0
34182e4c:	617b      	str	r3, [r7, #20]
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
34182e4e:	687b      	ldr	r3, [r7, #4]
34182e50:	f103 0018 	add.w	r0, r3, #24
34182e54:	f107 0210 	add.w	r2, r7, #16
34182e58:	2304      	movs	r3, #4
34182e5a:	f243 0130 	movw	r1, #12336	@ 0x3030
34182e5e:	f000 f8c1 	bl	34182fe4 <imx335_read_reg>
34182e62:	4603      	mov	r3, r0
34182e64:	2b00      	cmp	r3, #0
34182e66:	d003      	beq.n	34182e70 <IMX335_SetExposure+0x30>
  {
    ret = IMX335_ERROR;
34182e68:	f04f 33ff 	mov.w	r3, #4294967295
34182e6c:	617b      	str	r3, [r7, #20]
34182e6e:	e047      	b.n	34182f00 <IMX335_SetExposure+0xc0>
  }
  else
  {
    shutter = ( vmax - (exposure /((uint32_t) IMX335_1H_PERIOD_USEC)));
34182e70:	6939      	ldr	r1, [r7, #16]
34182e72:	683a      	ldr	r2, [r7, #0]
34182e74:	4b25      	ldr	r3, [pc, #148]	@ (34182f0c <IMX335_SetExposure+0xcc>)
34182e76:	fba3 0302 	umull	r0, r3, r3, r2
34182e7a:	1ad2      	subs	r2, r2, r3
34182e7c:	0852      	lsrs	r2, r2, #1
34182e7e:	4413      	add	r3, r2
34182e80:	089b      	lsrs	r3, r3, #2
34182e82:	1acb      	subs	r3, r1, r3
34182e84:	60fb      	str	r3, [r7, #12]

    if (shutter < IMX335_SHUTTER_MIN)
34182e86:	68fb      	ldr	r3, [r7, #12]
34182e88:	2b08      	cmp	r3, #8
34182e8a:	d803      	bhi.n	34182e94 <IMX335_SetExposure+0x54>
    {
      ret = IMX335_ERROR;
34182e8c:	f04f 33ff 	mov.w	r3, #4294967295
34182e90:	617b      	str	r3, [r7, #20]
34182e92:	e035      	b.n	34182f00 <IMX335_SetExposure+0xc0>
    }
    else
    {
      hold = 1;
34182e94:	2301      	movs	r3, #1
34182e96:	72fb      	strb	r3, [r7, #11]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182e98:	687b      	ldr	r3, [r7, #4]
34182e9a:	f103 0018 	add.w	r0, r3, #24
34182e9e:	f107 020b 	add.w	r2, r7, #11
34182ea2:	2301      	movs	r3, #1
34182ea4:	f243 0101 	movw	r1, #12289	@ 0x3001
34182ea8:	f000 f8b3 	bl	34183012 <imx335_write_reg>
34182eac:	4603      	mov	r3, r0
34182eae:	2b00      	cmp	r3, #0
34182eb0:	d003      	beq.n	34182eba <IMX335_SetExposure+0x7a>
      {
        ret = IMX335_ERROR;
34182eb2:	f04f 33ff 	mov.w	r3, #4294967295
34182eb6:	617b      	str	r3, [r7, #20]
34182eb8:	e022      	b.n	34182f00 <IMX335_SetExposure+0xc0>
      }
      else
      {
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
34182eba:	687b      	ldr	r3, [r7, #4]
34182ebc:	f103 0018 	add.w	r0, r3, #24
34182ec0:	f107 020c 	add.w	r2, r7, #12
34182ec4:	2303      	movs	r3, #3
34182ec6:	f243 0158 	movw	r1, #12376	@ 0x3058
34182eca:	f000 f8a2 	bl	34183012 <imx335_write_reg>
34182ece:	4603      	mov	r3, r0
34182ed0:	2b00      	cmp	r3, #0
34182ed2:	d003      	beq.n	34182edc <IMX335_SetExposure+0x9c>
        {
          ret = IMX335_ERROR;
34182ed4:	f04f 33ff 	mov.w	r3, #4294967295
34182ed8:	617b      	str	r3, [r7, #20]
34182eda:	e011      	b.n	34182f00 <IMX335_SetExposure+0xc0>
        }
        else
        {
          hold = 0;
34182edc:	2300      	movs	r3, #0
34182ede:	72fb      	strb	r3, [r7, #11]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34182ee0:	687b      	ldr	r3, [r7, #4]
34182ee2:	f103 0018 	add.w	r0, r3, #24
34182ee6:	f107 020b 	add.w	r2, r7, #11
34182eea:	2301      	movs	r3, #1
34182eec:	f243 0101 	movw	r1, #12289	@ 0x3001
34182ef0:	f000 f88f 	bl	34183012 <imx335_write_reg>
34182ef4:	4603      	mov	r3, r0
34182ef6:	2b00      	cmp	r3, #0
34182ef8:	d002      	beq.n	34182f00 <IMX335_SetExposure+0xc0>
          {
            ret = IMX335_ERROR;
34182efa:	f04f 33ff 	mov.w	r3, #4294967295
34182efe:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
34182f00:	697b      	ldr	r3, [r7, #20]
}
34182f02:	4618      	mov	r0, r3
34182f04:	3718      	adds	r7, #24
34182f06:	46bd      	mov	sp, r7
34182f08:	bd80      	pop	{r7, pc}
34182f0a:	bf00      	nop
34182f0c:	24924925 	.word	0x24924925

34182f10 <IMX335_SetFrequency>:
  * @param  pObj  pointer to component object
  * @param  frequency in Mhz
  * @retval Component status
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
34182f10:	b580      	push	{r7, lr}
34182f12:	b084      	sub	sp, #16
34182f14:	af00      	add	r7, sp, #0
34182f16:	6078      	str	r0, [r7, #4]
34182f18:	6039      	str	r1, [r7, #0]
  uint32_t ret = IMX335_OK;
34182f1a:	2300      	movs	r3, #0
34182f1c:	60fb      	str	r3, [r7, #12]

  switch (frequency)
34182f1e:	683b      	ldr	r3, [r7, #0]
34182f20:	3b01      	subs	r3, #1
34182f22:	2b03      	cmp	r3, #3
34182f24:	d83a      	bhi.n	34182f9c <IMX335_SetFrequency+0x8c>
34182f26:	a201      	add	r2, pc, #4	@ (adr r2, 34182f2c <IMX335_SetFrequency+0x1c>)
34182f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34182f2c:	34182f85 	.word	0x34182f85
34182f30:	34182f6d 	.word	0x34182f6d
34182f34:	34182f55 	.word	0x34182f55
34182f38:	34182f3d 	.word	0x34182f3d
  {
    case IMX335_INCK_74MHZ:
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
34182f3c:	2207      	movs	r2, #7
34182f3e:	4924      	ldr	r1, [pc, #144]	@ (34182fd0 <IMX335_SetFrequency+0xc0>)
34182f40:	6878      	ldr	r0, [r7, #4]
34182f42:	f7ff fdb0 	bl	34182aa6 <IMX335_WriteTable>
34182f46:	4603      	mov	r3, r0
34182f48:	2b00      	cmp	r3, #0
34182f4a:	d033      	beq.n	34182fb4 <IMX335_SetFrequency+0xa4>
      {
        ret = IMX335_ERROR;
34182f4c:	f04f 33ff 	mov.w	r3, #4294967295
34182f50:	60fb      	str	r3, [r7, #12]
      }
      break;
34182f52:	e02f      	b.n	34182fb4 <IMX335_SetFrequency+0xa4>
    case IMX335_INCK_27MHZ:
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
34182f54:	2207      	movs	r2, #7
34182f56:	491f      	ldr	r1, [pc, #124]	@ (34182fd4 <IMX335_SetFrequency+0xc4>)
34182f58:	6878      	ldr	r0, [r7, #4]
34182f5a:	f7ff fda4 	bl	34182aa6 <IMX335_WriteTable>
34182f5e:	4603      	mov	r3, r0
34182f60:	2b00      	cmp	r3, #0
34182f62:	d029      	beq.n	34182fb8 <IMX335_SetFrequency+0xa8>
      {
        ret = IMX335_ERROR;
34182f64:	f04f 33ff 	mov.w	r3, #4294967295
34182f68:	60fb      	str	r3, [r7, #12]
      }
      break;
34182f6a:	e025      	b.n	34182fb8 <IMX335_SetFrequency+0xa8>
    case IMX335_INCK_24MHZ:
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
34182f6c:	2207      	movs	r2, #7
34182f6e:	491a      	ldr	r1, [pc, #104]	@ (34182fd8 <IMX335_SetFrequency+0xc8>)
34182f70:	6878      	ldr	r0, [r7, #4]
34182f72:	f7ff fd98 	bl	34182aa6 <IMX335_WriteTable>
34182f76:	4603      	mov	r3, r0
34182f78:	2b00      	cmp	r3, #0
34182f7a:	d01f      	beq.n	34182fbc <IMX335_SetFrequency+0xac>
      {
        ret = IMX335_ERROR;
34182f7c:	f04f 33ff 	mov.w	r3, #4294967295
34182f80:	60fb      	str	r3, [r7, #12]
      }
      break;
34182f82:	e01b      	b.n	34182fbc <IMX335_SetFrequency+0xac>
    case IMX335_INCK_18MHZ:
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
34182f84:	2207      	movs	r2, #7
34182f86:	4915      	ldr	r1, [pc, #84]	@ (34182fdc <IMX335_SetFrequency+0xcc>)
34182f88:	6878      	ldr	r0, [r7, #4]
34182f8a:	f7ff fd8c 	bl	34182aa6 <IMX335_WriteTable>
34182f8e:	4603      	mov	r3, r0
34182f90:	2b00      	cmp	r3, #0
34182f92:	d015      	beq.n	34182fc0 <IMX335_SetFrequency+0xb0>
      {
        ret = IMX335_ERROR;
34182f94:	f04f 33ff 	mov.w	r3, #4294967295
34182f98:	60fb      	str	r3, [r7, #12]
      }
      break;
34182f9a:	e011      	b.n	34182fc0 <IMX335_SetFrequency+0xb0>
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34182f9c:	2207      	movs	r2, #7
34182f9e:	4910      	ldr	r1, [pc, #64]	@ (34182fe0 <IMX335_SetFrequency+0xd0>)
34182fa0:	6878      	ldr	r0, [r7, #4]
34182fa2:	f7ff fd80 	bl	34182aa6 <IMX335_WriteTable>
34182fa6:	4603      	mov	r3, r0
34182fa8:	2b00      	cmp	r3, #0
34182faa:	d00b      	beq.n	34182fc4 <IMX335_SetFrequency+0xb4>
      {
        ret = IMX335_ERROR;
34182fac:	f04f 33ff 	mov.w	r3, #4294967295
34182fb0:	60fb      	str	r3, [r7, #12]
      }
      break;
34182fb2:	e007      	b.n	34182fc4 <IMX335_SetFrequency+0xb4>
      break;
34182fb4:	bf00      	nop
34182fb6:	e006      	b.n	34182fc6 <IMX335_SetFrequency+0xb6>
      break;
34182fb8:	bf00      	nop
34182fba:	e004      	b.n	34182fc6 <IMX335_SetFrequency+0xb6>
      break;
34182fbc:	bf00      	nop
34182fbe:	e002      	b.n	34182fc6 <IMX335_SetFrequency+0xb6>
      break;
34182fc0:	bf00      	nop
34182fc2:	e000      	b.n	34182fc6 <IMX335_SetFrequency+0xb6>
      break;
34182fc4:	bf00      	nop
  };

  return ret;
34182fc6:	68fb      	ldr	r3, [r7, #12]
}
34182fc8:	4618      	mov	r0, r3
34182fca:	3710      	adds	r7, #16
34182fcc:	46bd      	mov	sp, r7
34182fce:	bd80      	pop	{r7, pc}
34182fd0:	341a63e4 	.word	0x341a63e4
34182fd4:	341a6400 	.word	0x341a6400
34182fd8:	341a641c 	.word	0x341a641c
34182fdc:	341a6438 	.word	0x341a6438
34182fe0:	341a6454 	.word	0x341a6454

34182fe4 <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34182fe4:	b590      	push	{r4, r7, lr}
34182fe6:	b085      	sub	sp, #20
34182fe8:	af00      	add	r7, sp, #0
34182fea:	60f8      	str	r0, [r7, #12]
34182fec:	607a      	str	r2, [r7, #4]
34182fee:	461a      	mov	r2, r3
34182ff0:	460b      	mov	r3, r1
34182ff2:	817b      	strh	r3, [r7, #10]
34182ff4:	4613      	mov	r3, r2
34182ff6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34182ff8:	68fb      	ldr	r3, [r7, #12]
34182ffa:	685c      	ldr	r4, [r3, #4]
34182ffc:	68fb      	ldr	r3, [r7, #12]
34182ffe:	6898      	ldr	r0, [r3, #8]
34183000:	893b      	ldrh	r3, [r7, #8]
34183002:	8979      	ldrh	r1, [r7, #10]
34183004:	687a      	ldr	r2, [r7, #4]
34183006:	47a0      	blx	r4
34183008:	4603      	mov	r3, r0
}
3418300a:	4618      	mov	r0, r3
3418300c:	3714      	adds	r7, #20
3418300e:	46bd      	mov	sp, r7
34183010:	bd90      	pop	{r4, r7, pc}

34183012 <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
34183012:	b590      	push	{r4, r7, lr}
34183014:	b085      	sub	sp, #20
34183016:	af00      	add	r7, sp, #0
34183018:	60f8      	str	r0, [r7, #12]
3418301a:	607a      	str	r2, [r7, #4]
3418301c:	461a      	mov	r2, r3
3418301e:	460b      	mov	r3, r1
34183020:	817b      	strh	r3, [r7, #10]
34183022:	4613      	mov	r3, r2
34183024:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
34183026:	68fb      	ldr	r3, [r7, #12]
34183028:	681c      	ldr	r4, [r3, #0]
3418302a:	68fb      	ldr	r3, [r7, #12]
3418302c:	6898      	ldr	r0, [r3, #8]
3418302e:	893b      	ldrh	r3, [r7, #8]
34183030:	8979      	ldrh	r1, [r7, #10]
34183032:	687a      	ldr	r2, [r7, #4]
34183034:	47a0      	blx	r4
34183036:	4603      	mov	r3, r0
}
34183038:	4618      	mov	r0, r3
3418303a:	3714      	adds	r7, #20
3418303c:	46bd      	mov	sp, r7
3418303e:	bd90      	pop	{r4, r7, pc}

34183040 <LL_AHB4_GRP1_EnableClock>:
{
34183040:	b480      	push	{r7}
34183042:	b085      	sub	sp, #20
34183044:	af00      	add	r7, sp, #0
34183046:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34183048:	4a07      	ldr	r2, [pc, #28]	@ (34183068 <LL_AHB4_GRP1_EnableClock+0x28>)
3418304a:	687b      	ldr	r3, [r7, #4]
3418304c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34183050:	4b05      	ldr	r3, [pc, #20]	@ (34183068 <LL_AHB4_GRP1_EnableClock+0x28>)
34183052:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34183056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34183058:	68fb      	ldr	r3, [r7, #12]
}
3418305a:	bf00      	nop
3418305c:	3714      	adds	r7, #20
3418305e:	46bd      	mov	sp, r7
34183060:	f85d 7b04 	ldr.w	r7, [sp], #4
34183064:	4770      	bx	lr
34183066:	bf00      	nop
34183068:	56028000 	.word	0x56028000

3418306c <LL_APB1_GRP1_EnableClock>:
{
3418306c:	b480      	push	{r7}
3418306e:	b085      	sub	sp, #20
34183070:	af00      	add	r7, sp, #0
34183072:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENSR1, Periphs);
34183074:	4a07      	ldr	r2, [pc, #28]	@ (34183094 <LL_APB1_GRP1_EnableClock+0x28>)
34183076:	687b      	ldr	r3, [r7, #4]
34183078:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3418307c:	4b05      	ldr	r3, [pc, #20]	@ (34183094 <LL_APB1_GRP1_EnableClock+0x28>)
3418307e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34183082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34183084:	68fb      	ldr	r3, [r7, #12]
}
34183086:	bf00      	nop
34183088:	3714      	adds	r7, #20
3418308a:	46bd      	mov	sp, r7
3418308c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183090:	4770      	bx	lr
34183092:	bf00      	nop
34183094:	56028000 	.word	0x56028000

34183098 <LL_APB2_GRP1_EnableClock>:
{
34183098:	b480      	push	{r7}
3418309a:	b085      	sub	sp, #20
3418309c:	af00      	add	r7, sp, #0
3418309e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
341830a0:	4a07      	ldr	r2, [pc, #28]	@ (341830c0 <LL_APB2_GRP1_EnableClock+0x28>)
341830a2:	687b      	ldr	r3, [r7, #4]
341830a4:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
341830a8:	4b05      	ldr	r3, [pc, #20]	@ (341830c0 <LL_APB2_GRP1_EnableClock+0x28>)
341830aa:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
341830ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341830b0:	68fb      	ldr	r3, [r7, #12]
}
341830b2:	bf00      	nop
341830b4:	3714      	adds	r7, #20
341830b6:	46bd      	mov	sp, r7
341830b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341830bc:	4770      	bx	lr
341830be:	bf00      	nop
341830c0:	56028000 	.word	0x56028000

341830c4 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
341830c4:	b580      	push	{r7, lr}
341830c6:	b088      	sub	sp, #32
341830c8:	af00      	add	r7, sp, #0
341830ca:	4603      	mov	r3, r0
341830cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
341830ce:	2300      	movs	r3, #0
341830d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  switch(Led)
341830d2:	79fb      	ldrb	r3, [r7, #7]
341830d4:	2b00      	cmp	r3, #0
341830d6:	d002      	beq.n	341830de <BSP_LED_Init+0x1a>
341830d8:	2b01      	cmp	r3, #1
341830da:	d007      	beq.n	341830ec <BSP_LED_Init+0x28>
341830dc:	e00a      	b.n	341830f4 <BSP_LED_Init+0x30>
  {
    case LED1:
      HAL_PWREx_EnableVddIO2();
341830de:	f008 fc57 	bl	3418b990 <HAL_PWREx_EnableVddIO2>
      LED1_GPIO_CLK_ENABLE();
341830e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
341830e6:	f7ff ffab 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
      break;
341830ea:	e007      	b.n	341830fc <BSP_LED_Init+0x38>

    case LED2:

      LED2_GPIO_CLK_ENABLE();
341830ec:	2040      	movs	r0, #64	@ 0x40
341830ee:	f7ff ffa7 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
      break;
341830f2:	e003      	b.n	341830fc <BSP_LED_Init+0x38>

    default:
      ret = BSP_ERROR_WRONG_PARAM;
341830f4:	f06f 0301 	mvn.w	r3, #1
341830f8:	61fb      	str	r3, [r7, #28]
      break;
341830fa:	bf00      	nop
  }

  if (ret == BSP_ERROR_NONE)
341830fc:	69fb      	ldr	r3, [r7, #28]
341830fe:	2b00      	cmp	r3, #0
34183100:	d118      	bne.n	34183134 <BSP_LED_Init+0x70>
  {
    /* configure the GPIO_LED pin */
    gpio_init_structure.Pin = LED_PIN [Led];
34183102:	79fb      	ldrb	r3, [r7, #7]
34183104:	4a0e      	ldr	r2, [pc, #56]	@ (34183140 <BSP_LED_Init+0x7c>)
34183106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418310a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3418310c:	2301      	movs	r3, #1
3418310e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
34183110:	2300      	movs	r3, #0
34183112:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34183114:	2303      	movs	r3, #3
34183116:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
34183118:	79fb      	ldrb	r3, [r7, #7]
3418311a:	4a0a      	ldr	r2, [pc, #40]	@ (34183144 <BSP_LED_Init+0x80>)
3418311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34183120:	f107 0208 	add.w	r2, r7, #8
34183124:	4611      	mov	r1, r2
34183126:	4618      	mov	r0, r3
34183128:	f005 fb80 	bl	3418882c <HAL_GPIO_Init>

    /* By default, turn off LED */
    BSP_LED_Off(Led);
3418312c:	79fb      	ldrb	r3, [r7, #7]
3418312e:	4618      	mov	r0, r3
34183130:	f000 f80a 	bl	34183148 <BSP_LED_Off>
  }

  return ret;
34183134:	69fb      	ldr	r3, [r7, #28]
}
34183136:	4618      	mov	r0, r3
34183138:	3720      	adds	r7, #32
3418313a:	46bd      	mov	sp, r7
3418313c:	bd80      	pop	{r7, pc}
3418313e:	bf00      	nop
34183140:	341a6470 	.word	0x341a6470
34183144:	341c0044 	.word	0x341c0044

34183148 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
34183148:	b580      	push	{r7, lr}
3418314a:	b082      	sub	sp, #8
3418314c:	af00      	add	r7, sp, #0
3418314e:	4603      	mov	r3, r0
34183150:	71fb      	strb	r3, [r7, #7]
  if(Led == LED1)
34183152:	79fb      	ldrb	r3, [r7, #7]
34183154:	2b00      	cmp	r3, #0
34183156:	d10d      	bne.n	34183174 <BSP_LED_Off+0x2c>
  {
    /* LED1 High active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
34183158:	79fb      	ldrb	r3, [r7, #7]
3418315a:	4a0f      	ldr	r2, [pc, #60]	@ (34183198 <BSP_LED_Off+0x50>)
3418315c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
34183160:	79fb      	ldrb	r3, [r7, #7]
34183162:	4a0e      	ldr	r2, [pc, #56]	@ (3418319c <BSP_LED_Off+0x54>)
34183164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34183168:	b29b      	uxth	r3, r3
3418316a:	2200      	movs	r2, #0
3418316c:	4619      	mov	r1, r3
3418316e:	f006 f88b 	bl	34189288 <HAL_GPIO_WritePin>
  }else
  {
    /* LED2 Low active */
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
  }
}
34183172:	e00c      	b.n	3418318e <BSP_LED_Off+0x46>
    HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
34183174:	79fb      	ldrb	r3, [r7, #7]
34183176:	4a08      	ldr	r2, [pc, #32]	@ (34183198 <BSP_LED_Off+0x50>)
34183178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
3418317c:	79fb      	ldrb	r3, [r7, #7]
3418317e:	4a07      	ldr	r2, [pc, #28]	@ (3418319c <BSP_LED_Off+0x54>)
34183180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34183184:	b29b      	uxth	r3, r3
34183186:	2201      	movs	r2, #1
34183188:	4619      	mov	r1, r3
3418318a:	f006 f87d 	bl	34189288 <HAL_GPIO_WritePin>
}
3418318e:	bf00      	nop
34183190:	3708      	adds	r7, #8
34183192:	46bd      	mov	sp, r7
34183194:	bd80      	pop	{r7, pc}
34183196:	bf00      	nop
34183198:	341c0044 	.word	0x341c0044
3418319c:	341a6470 	.word	0x341a6470

341831a0 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
341831a0:	b580      	push	{r7, lr}
341831a2:	b082      	sub	sp, #8
341831a4:	af00      	add	r7, sp, #0
341831a6:	4603      	mov	r3, r0
341831a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
341831aa:	79fb      	ldrb	r3, [r7, #7]
341831ac:	4a07      	ldr	r2, [pc, #28]	@ (341831cc <BSP_LED_Toggle+0x2c>)
341831ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
341831b2:	79fb      	ldrb	r3, [r7, #7]
341831b4:	4906      	ldr	r1, [pc, #24]	@ (341831d0 <BSP_LED_Toggle+0x30>)
341831b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
341831ba:	b29b      	uxth	r3, r3
341831bc:	4619      	mov	r1, r3
341831be:	4610      	mov	r0, r2
341831c0:	f006 f88e 	bl	341892e0 <HAL_GPIO_TogglePin>
}
341831c4:	bf00      	nop
341831c6:	3708      	adds	r7, #8
341831c8:	46bd      	mov	sp, r7
341831ca:	bd80      	pop	{r7, pc}
341831cc:	341c0044 	.word	0x341c0044
341831d0:	341a6470 	.word	0x341a6470

341831d4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
341831d4:	b580      	push	{r7, lr}
341831d6:	b088      	sub	sp, #32
341831d8:	af00      	add	r7, sp, #0
341831da:	4603      	mov	r3, r0
341831dc:	460a      	mov	r2, r1
341831de:	71fb      	strb	r3, [r7, #7]
341831e0:	4613      	mov	r3, r2
341831e2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef             gpio_init_structure       = {0};
341831e4:	f107 030c 	add.w	r3, r7, #12
341831e8:	2200      	movs	r2, #0
341831ea:	601a      	str	r2, [r3, #0]
341831ec:	605a      	str	r2, [r3, #4]
341831ee:	609a      	str	r2, [r3, #8]
341831f0:	60da      	str	r2, [r3, #12]
341831f2:	611a      	str	r2, [r3, #16]
                                                            BSP_BUTTON_TAMP_IT_PRIORITY};
  static const uint32_t        BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER1_EXTI_LINE,
                                                            BUTTON_TAMP_EXTI_LINE};

  /* Enable the BUTTON clock */
  if (Button == BUTTON_USER1)
341831f4:	79fb      	ldrb	r3, [r7, #7]
341831f6:	2b00      	cmp	r3, #0
341831f8:	d103      	bne.n	34183202 <BSP_PB_Init+0x2e>
  {
    BUTTON_USER1_GPIO_CLK_ENABLE();
341831fa:	2004      	movs	r0, #4
341831fc:	f7ff ff20 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
34183200:	e002      	b.n	34183208 <BSP_PB_Init+0x34>
  }
  else /* BUTTON_TAMP */
  {
    BUTTON_TAMP_GPIO_CLK_ENABLE();
34183202:	2010      	movs	r0, #16
34183204:	f7ff ff1c 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
  }
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
34183208:	79fb      	ldrb	r3, [r7, #7]
3418320a:	4a31      	ldr	r2, [pc, #196]	@ (341832d0 <BSP_PB_Init+0xfc>)
3418320c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34183210:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull  = GPIO_PULLDOWN;
34183212:	2302      	movs	r3, #2
34183214:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
34183216:	2300      	movs	r3, #0
34183218:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
3418321a:	79bb      	ldrb	r3, [r7, #6]
3418321c:	2b00      	cmp	r3, #0
3418321e:	d10c      	bne.n	3418323a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
34183220:	2300      	movs	r3, #0
34183222:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
34183224:	79fb      	ldrb	r3, [r7, #7]
34183226:	4a2b      	ldr	r2, [pc, #172]	@ (341832d4 <BSP_PB_Init+0x100>)
34183228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418322c:	f107 020c 	add.w	r2, r7, #12
34183230:	4611      	mov	r1, r2
34183232:	4618      	mov	r0, r3
34183234:	f005 fafa 	bl	3418882c <HAL_GPIO_Init>
34183238:	e044      	b.n	341832c4 <BSP_PB_Init+0xf0>
  }
  else if(ButtonMode == BUTTON_MODE_EXTI)
3418323a:	79bb      	ldrb	r3, [r7, #6]
3418323c:	2b01      	cmp	r3, #1
3418323e:	d13e      	bne.n	341832be <BSP_PB_Init+0xea>
  {

    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
34183240:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
34183244:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
34183246:	79fb      	ldrb	r3, [r7, #7]
34183248:	4a22      	ldr	r2, [pc, #136]	@ (341832d4 <BSP_PB_Init+0x100>)
3418324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418324e:	f107 020c 	add.w	r2, r7, #12
34183252:	4611      	mov	r1, r2
34183254:	4618      	mov	r0, r3
34183256:	f005 fae9 	bl	3418882c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
3418325a:	79fa      	ldrb	r2, [r7, #7]
3418325c:	4613      	mov	r3, r2
3418325e:	005b      	lsls	r3, r3, #1
34183260:	4413      	add	r3, r2
34183262:	009b      	lsls	r3, r3, #2
34183264:	4a1c      	ldr	r2, [pc, #112]	@ (341832d8 <BSP_PB_Init+0x104>)
34183266:	441a      	add	r2, r3
34183268:	79fb      	ldrb	r3, [r7, #7]
3418326a:	491c      	ldr	r1, [pc, #112]	@ (341832dc <BSP_PB_Init+0x108>)
3418326c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34183270:	4619      	mov	r1, r3
34183272:	4610      	mov	r0, r2
34183274:	f005 fa98 	bl	341887a8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
34183278:	79fa      	ldrb	r2, [r7, #7]
3418327a:	4613      	mov	r3, r2
3418327c:	005b      	lsls	r3, r3, #1
3418327e:	4413      	add	r3, r2
34183280:	009b      	lsls	r3, r3, #2
34183282:	4a15      	ldr	r2, [pc, #84]	@ (341832d8 <BSP_PB_Init+0x104>)
34183284:	1898      	adds	r0, r3, r2
34183286:	79fb      	ldrb	r3, [r7, #7]
34183288:	4a15      	ldr	r2, [pc, #84]	@ (341832e0 <BSP_PB_Init+0x10c>)
3418328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418328e:	461a      	mov	r2, r3
34183290:	2100      	movs	r1, #0
34183292:	f005 fa5d 	bl	34188750 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
34183296:	79fb      	ldrb	r3, [r7, #7]
34183298:	4a12      	ldr	r2, [pc, #72]	@ (341832e4 <BSP_PB_Init+0x110>)
3418329a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
3418329e:	79fb      	ldrb	r3, [r7, #7]
341832a0:	4a11      	ldr	r2, [pc, #68]	@ (341832e8 <BSP_PB_Init+0x114>)
341832a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341832a6:	2200      	movs	r2, #0
341832a8:	4619      	mov	r1, r3
341832aa:	f001 fa69 	bl	34184780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
341832ae:	79fb      	ldrb	r3, [r7, #7]
341832b0:	4a0c      	ldr	r2, [pc, #48]	@ (341832e4 <BSP_PB_Init+0x110>)
341832b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
341832b6:	4618      	mov	r0, r3
341832b8:	f001 fabc 	bl	34184834 <HAL_NVIC_EnableIRQ>
341832bc:	e002      	b.n	341832c4 <BSP_PB_Init+0xf0>

  }
  else
  {
    /* Bad value of ButtonMode parameter */
    return BSP_ERROR_WRONG_PARAM;
341832be:	f06f 0301 	mvn.w	r3, #1
341832c2:	e000      	b.n	341832c6 <BSP_PB_Init+0xf2>
  }

  return BSP_ERROR_NONE;
341832c4:	2300      	movs	r3, #0
}
341832c6:	4618      	mov	r0, r3
341832c8:	3720      	adds	r7, #32
341832ca:	46bd      	mov	sp, r7
341832cc:	bd80      	pop	{r7, pc}
341832ce:	bf00      	nop
341832d0:	341a6478 	.word	0x341a6478
341832d4:	341c004c 	.word	0x341c004c
341832d8:	341c160c 	.word	0x341c160c
341832dc:	341a6480 	.word	0x341a6480
341832e0:	341c0054 	.word	0x341c0054
341832e4:	341a647c 	.word	0x341a647c
341832e8:	341c005c 	.word	0x341c005c

341832ec <BUTTON_USER1_EXTI_Callback>:
/**
  * @brief  Button User 1 (B2) EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER1_EXTI_Callback(void)
{
341832ec:	b580      	push	{r7, lr}
341832ee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER1);
341832f0:	2000      	movs	r0, #0
341832f2:	f000 f809 	bl	34183308 <BSP_PB_Callback>
}
341832f6:	bf00      	nop
341832f8:	bd80      	pop	{r7, pc}

341832fa <BUTTON_TAMP_EXTI_Callback>:
/**
  * @brief  Button TAMP (B4) EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_TAMP_EXTI_Callback(void)
{
341832fa:	b580      	push	{r7, lr}
341832fc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_TAMP);
341832fe:	2001      	movs	r0, #1
34183300:	f000 f802 	bl	34183308 <BSP_PB_Callback>
}
34183304:	bf00      	nop
34183306:	bd80      	pop	{r7, pc}

34183308 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
34183308:	b480      	push	{r7}
3418330a:	b083      	sub	sp, #12
3418330c:	af00      	add	r7, sp, #0
3418330e:	4603      	mov	r3, r0
34183310:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
34183312:	bf00      	nop
34183314:	370c      	adds	r7, #12
34183316:	46bd      	mov	sp, r7
34183318:	f85d 7b04 	ldr.w	r7, [sp], #4
3418331c:	4770      	bx	lr
	...

34183320 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  * @retval BSP status
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
34183320:	b580      	push	{r7, lr}
34183322:	b084      	sub	sp, #16
34183324:	af00      	add	r7, sp, #0
34183326:	4603      	mov	r3, r0
34183328:	6039      	str	r1, [r7, #0]
3418332a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
3418332c:	2300      	movs	r3, #0
3418332e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
34183330:	79fb      	ldrb	r3, [r7, #7]
34183332:	2b01      	cmp	r3, #1
34183334:	d903      	bls.n	3418333e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34183336:	f06f 0301 	mvn.w	r3, #1
3418333a:	60fb      	str	r3, [r7, #12]
3418333c:	e041      	b.n	341833c2 <BSP_COM_Init+0xa2>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
3418333e:	79fa      	ldrb	r2, [r7, #7]
34183340:	79fb      	ldrb	r3, [r7, #7]
34183342:	4922      	ldr	r1, [pc, #136]	@ (341833cc <BSP_COM_Init+0xac>)
34183344:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
34183348:	4921      	ldr	r1, [pc, #132]	@ (341833d0 <BSP_COM_Init+0xb0>)
3418334a:	2094      	movs	r0, #148	@ 0x94
3418334c:	fb00 f303 	mul.w	r3, r0, r3
34183350:	440b      	add	r3, r1
34183352:	601a      	str	r2, [r3, #0]

    /* Init the UART Msp */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
34183354:	79fb      	ldrb	r3, [r7, #7]
34183356:	2294      	movs	r2, #148	@ 0x94
34183358:	fb02 f303 	mul.w	r3, r2, r3
3418335c:	4a1c      	ldr	r2, [pc, #112]	@ (341833d0 <BSP_COM_Init+0xb0>)
3418335e:	4413      	add	r3, r2
34183360:	4618      	mov	r0, r3
34183362:	f000 f8cd 	bl	34183500 <UART_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (ret == BSP_ERROR_NONE)
34183366:	68fb      	ldr	r3, [r7, #12]
34183368:	2b00      	cmp	r3, #0
3418336a:	d12a      	bne.n	341833c2 <BSP_COM_Init+0xa2>
    {
      if (COM == COM1)
3418336c:	79fb      	ldrb	r3, [r7, #7]
3418336e:	2b00      	cmp	r3, #0
34183370:	d110      	bne.n	34183394 <BSP_COM_Init+0x74>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34183372:	79fb      	ldrb	r3, [r7, #7]
34183374:	2294      	movs	r2, #148	@ 0x94
34183376:	fb02 f303 	mul.w	r3, r2, r3
3418337a:	4a15      	ldr	r2, [pc, #84]	@ (341833d0 <BSP_COM_Init+0xb0>)
3418337c:	4413      	add	r3, r2
3418337e:	6839      	ldr	r1, [r7, #0]
34183380:	4618      	mov	r0, r3
34183382:	f000 f859 	bl	34183438 <MX_USART1_Init>
34183386:	4603      	mov	r3, r0
34183388:	2b00      	cmp	r3, #0
3418338a:	d01a      	beq.n	341833c2 <BSP_COM_Init+0xa2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
3418338c:	f06f 0303 	mvn.w	r3, #3
34183390:	60fb      	str	r3, [r7, #12]
34183392:	e016      	b.n	341833c2 <BSP_COM_Init+0xa2>
        }
      }
      else if (COM == COM2)
34183394:	79fb      	ldrb	r3, [r7, #7]
34183396:	2b01      	cmp	r3, #1
34183398:	d110      	bne.n	341833bc <BSP_COM_Init+0x9c>
      {
        if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3418339a:	79fb      	ldrb	r3, [r7, #7]
3418339c:	2294      	movs	r2, #148	@ 0x94
3418339e:	fb02 f303 	mul.w	r3, r2, r3
341833a2:	4a0b      	ldr	r2, [pc, #44]	@ (341833d0 <BSP_COM_Init+0xb0>)
341833a4:	4413      	add	r3, r2
341833a6:	6839      	ldr	r1, [r7, #0]
341833a8:	4618      	mov	r0, r3
341833aa:	f000 f877 	bl	3418349c <MX_USART2_Init>
341833ae:	4603      	mov	r3, r0
341833b0:	2b00      	cmp	r3, #0
341833b2:	d006      	beq.n	341833c2 <BSP_COM_Init+0xa2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
341833b4:	f06f 0303 	mvn.w	r3, #3
341833b8:	60fb      	str	r3, [r7, #12]
341833ba:	e002      	b.n	341833c2 <BSP_COM_Init+0xa2>
        }
      }
      else /* COM = ??? */
      {
        ret = BSP_ERROR_WRONG_PARAM;
341833bc:	f06f 0301 	mvn.w	r3, #1
341833c0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
341833c2:	68fb      	ldr	r3, [r7, #12]
}
341833c4:	4618      	mov	r0, r3
341833c6:	3710      	adds	r7, #16
341833c8:	46bd      	mov	sp, r7
341833ca:	bd80      	pop	{r7, pc}
341833cc:	341c003c 	.word	0x341c003c
341833d0:	341c1624 	.word	0x341c1624

341833d4 <BSP_COM_SelectLogPort>:
  * @param  COM COM port to be activated.
  *          This parameter can be COM1 or COM2.
  * @retval BSP status
  */
int32_t BSP_COM_SelectLogPort(COM_TypeDef COM)
{
341833d4:	b480      	push	{r7}
341833d6:	b083      	sub	sp, #12
341833d8:	af00      	add	r7, sp, #0
341833da:	4603      	mov	r3, r0
341833dc:	71fb      	strb	r3, [r7, #7]
  if(COM_ActiveLogPort != COM)
341833de:	4b07      	ldr	r3, [pc, #28]	@ (341833fc <BSP_COM_SelectLogPort+0x28>)
341833e0:	781b      	ldrb	r3, [r3, #0]
341833e2:	79fa      	ldrb	r2, [r7, #7]
341833e4:	429a      	cmp	r2, r3
341833e6:	d002      	beq.n	341833ee <BSP_COM_SelectLogPort+0x1a>
  {
    COM_ActiveLogPort = COM;
341833e8:	4a04      	ldr	r2, [pc, #16]	@ (341833fc <BSP_COM_SelectLogPort+0x28>)
341833ea:	79fb      	ldrb	r3, [r7, #7]
341833ec:	7013      	strb	r3, [r2, #0]
  }
  return BSP_ERROR_NONE;
341833ee:	2300      	movs	r3, #0
}
341833f0:	4618      	mov	r0, r3
341833f2:	370c      	adds	r7, #12
341833f4:	46bd      	mov	sp, r7
341833f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341833fa:	4770      	bx	lr
341833fc:	341c174c 	.word	0x341c174c

34183400 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
34183400:	b580      	push	{r7, lr}
34183402:	b082      	sub	sp, #8
34183404:	af00      	add	r7, sp, #0
34183406:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
34183408:	4b09      	ldr	r3, [pc, #36]	@ (34183430 <__io_putchar+0x30>)
3418340a:	781b      	ldrb	r3, [r3, #0]
3418340c:	461a      	mov	r2, r3
3418340e:	2394      	movs	r3, #148	@ 0x94
34183410:	fb02 f303 	mul.w	r3, r2, r3
34183414:	4a07      	ldr	r2, [pc, #28]	@ (34183434 <__io_putchar+0x34>)
34183416:	1898      	adds	r0, r3, r2
34183418:	1d39      	adds	r1, r7, #4
3418341a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3418341e:	2201      	movs	r2, #1
34183420:	f017 fb16 	bl	3419aa50 <HAL_UART_Transmit>
  return ch;
34183424:	687b      	ldr	r3, [r7, #4]
}
34183426:	4618      	mov	r0, r3
34183428:	3708      	adds	r7, #8
3418342a:	46bd      	mov	sp, r7
3418342c:	bd80      	pop	{r7, pc}
3418342e:	bf00      	nop
34183430:	341c174c 	.word	0x341c174c
34183434:	341c1624 	.word	0x341c1624

34183438 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
34183438:	b580      	push	{r7, lr}
3418343a:	b082      	sub	sp, #8
3418343c:	af00      	add	r7, sp, #0
3418343e:	6078      	str	r0, [r7, #4]
34183440:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_UART[COM1];
34183442:	4b15      	ldr	r3, [pc, #84]	@ (34183498 <MX_USART1_Init+0x60>)
34183444:	681a      	ldr	r2, [r3, #0]
34183446:	687b      	ldr	r3, [r7, #4]
34183448:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
3418344a:	683b      	ldr	r3, [r7, #0]
3418344c:	681a      	ldr	r2, [r3, #0]
3418344e:	687b      	ldr	r3, [r7, #4]
34183450:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
34183452:	687b      	ldr	r3, [r7, #4]
34183454:	220c      	movs	r2, #12
34183456:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
34183458:	683b      	ldr	r3, [r7, #0]
3418345a:	895b      	ldrh	r3, [r3, #10]
3418345c:	461a      	mov	r2, r3
3418345e:	687b      	ldr	r3, [r7, #4]
34183460:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
34183462:	683b      	ldr	r3, [r7, #0]
34183464:	685a      	ldr	r2, [r3, #4]
34183466:	687b      	ldr	r3, [r7, #4]
34183468:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
3418346a:	683b      	ldr	r3, [r7, #0]
3418346c:	891b      	ldrh	r3, [r3, #8]
3418346e:	461a      	mov	r2, r3
34183470:	687b      	ldr	r3, [r7, #4]
34183472:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
34183474:	683b      	ldr	r3, [r7, #0]
34183476:	899b      	ldrh	r3, [r3, #12]
34183478:	461a      	mov	r2, r3
3418347a:	687b      	ldr	r3, [r7, #4]
3418347c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
3418347e:	687b      	ldr	r3, [r7, #4]
34183480:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34183484:	61da      	str	r2, [r3, #28]

  return HAL_UART_Init(huart);
34183486:	6878      	ldr	r0, [r7, #4]
34183488:	f017 f95c 	bl	3419a744 <HAL_UART_Init>
3418348c:	4603      	mov	r3, r0
}
3418348e:	4618      	mov	r0, r3
34183490:	3708      	adds	r7, #8
34183492:	46bd      	mov	sp, r7
34183494:	bd80      	pop	{r7, pc}
34183496:	bf00      	nop
34183498:	341c003c 	.word	0x341c003c

3418349c <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
3418349c:	b580      	push	{r7, lr}
3418349e:	b082      	sub	sp, #8
341834a0:	af00      	add	r7, sp, #0
341834a2:	6078      	str	r0, [r7, #4]
341834a4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_UART[COM2];
341834a6:	4b15      	ldr	r3, [pc, #84]	@ (341834fc <MX_USART2_Init+0x60>)
341834a8:	685a      	ldr	r2, [r3, #4]
341834aa:	687b      	ldr	r3, [r7, #4]
341834ac:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
341834ae:	683b      	ldr	r3, [r7, #0]
341834b0:	681a      	ldr	r2, [r3, #0]
341834b2:	687b      	ldr	r3, [r7, #4]
341834b4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
341834b6:	687b      	ldr	r3, [r7, #4]
341834b8:	220c      	movs	r2, #12
341834ba:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
341834bc:	683b      	ldr	r3, [r7, #0]
341834be:	895b      	ldrh	r3, [r3, #10]
341834c0:	461a      	mov	r2, r3
341834c2:	687b      	ldr	r3, [r7, #4]
341834c4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
341834c6:	683b      	ldr	r3, [r7, #0]
341834c8:	685a      	ldr	r2, [r3, #4]
341834ca:	687b      	ldr	r3, [r7, #4]
341834cc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
341834ce:	683b      	ldr	r3, [r7, #0]
341834d0:	891b      	ldrh	r3, [r3, #8]
341834d2:	461a      	mov	r2, r3
341834d4:	687b      	ldr	r3, [r7, #4]
341834d6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
341834d8:	683b      	ldr	r3, [r7, #0]
341834da:	899b      	ldrh	r3, [r3, #12]
341834dc:	461a      	mov	r2, r3
341834de:	687b      	ldr	r3, [r7, #4]
341834e0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
341834e2:	687b      	ldr	r3, [r7, #4]
341834e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
341834e8:	61da      	str	r2, [r3, #28]

  return HAL_UART_Init(huart);
341834ea:	6878      	ldr	r0, [r7, #4]
341834ec:	f017 f92a 	bl	3419a744 <HAL_UART_Init>
341834f0:	4603      	mov	r3, r0
}
341834f2:	4618      	mov	r0, r3
341834f4:	3708      	adds	r7, #8
341834f6:	46bd      	mov	sp, r7
341834f8:	bd80      	pop	{r7, pc}
341834fa:	bf00      	nop
341834fc:	341c003c 	.word	0x341c003c

34183500 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
34183500:	b580      	push	{r7, lr}
34183502:	b090      	sub	sp, #64	@ 0x40
34183504:	af00      	add	r7, sp, #0
34183506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
34183508:	4a40      	ldr	r2, [pc, #256]	@ (3418360c <UART_MspInit+0x10c>)
3418350a:	f107 0320 	add.w	r3, r7, #32
3418350e:	e892 0003 	ldmia.w	r2, {r0, r1}
34183512:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
34183516:	4a3e      	ldr	r2, [pc, #248]	@ (34183610 <UART_MspInit+0x110>)
34183518:	f107 0318 	add.w	r3, r7, #24
3418351c:	e892 0003 	ldmia.w	r2, {r0, r1}
34183520:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
34183524:	4b3b      	ldr	r3, [pc, #236]	@ (34183614 <UART_MspInit+0x114>)
34183526:	681b      	ldr	r3, [r3, #0]
34183528:	617b      	str	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
3418352a:	4b3b      	ldr	r3, [pc, #236]	@ (34183618 <UART_MspInit+0x118>)
3418352c:	681b      	ldr	r3, [r3, #0]
3418352e:	613b      	str	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
34183530:	f240 7307 	movw	r3, #1799	@ 0x707
34183534:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
34183536:	f240 7307 	movw	r3, #1799	@ 0x707
3418353a:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
3418353c:	687b      	ldr	r3, [r7, #4]
3418353e:	681b      	ldr	r3, [r3, #0]
34183540:	4a36      	ldr	r2, [pc, #216]	@ (3418361c <UART_MspInit+0x11c>)
34183542:	4293      	cmp	r3, r2
34183544:	d10c      	bne.n	34183560 <UART_MspInit+0x60>
  {
    COM = COM1;
34183546:	2300      	movs	r3, #0
34183548:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
3418354c:	2010      	movs	r0, #16
3418354e:	f7ff fd77 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34183552:	2010      	movs	r0, #16
34183554:	f7ff fd74 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
34183558:	2010      	movs	r0, #16
3418355a:	f7ff fd9d 	bl	34183098 <LL_APB2_GRP1_EnableClock>
3418355e:	e011      	b.n	34183584 <UART_MspInit+0x84>
  }
  else if (huart->Instance == COM2_UART)
34183560:	687b      	ldr	r3, [r7, #4]
34183562:	681b      	ldr	r3, [r3, #0]
34183564:	4a2e      	ldr	r2, [pc, #184]	@ (34183620 <UART_MspInit+0x120>)
34183566:	4293      	cmp	r3, r2
34183568:	d14b      	bne.n	34183602 <UART_MspInit+0x102>
  {
    COM = COM2;
3418356a:	2301      	movs	r3, #1
3418356c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM2_TX_GPIO_CLK_ENABLE();
34183570:	2008      	movs	r0, #8
34183572:	f7ff fd65 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
    COM2_RX_GPIO_CLK_ENABLE();
34183576:	2020      	movs	r0, #32
34183578:	f7ff fd62 	bl	34183040 <LL_AHB4_GRP1_EnableClock>
    COM2_CLK_ENABLE();
3418357c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
34183580:	f7ff fd74 	bl	3418306c <LL_APB1_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
34183584:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34183588:	005b      	lsls	r3, r3, #1
3418358a:	3340      	adds	r3, #64	@ 0x40
3418358c:	443b      	add	r3, r7
3418358e:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
34183592:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34183594:	2302      	movs	r3, #2
34183596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34183598:	2302      	movs	r3, #2
3418359a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
3418359c:	2301      	movs	r3, #1
3418359e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
341835a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
341835a4:	3340      	adds	r3, #64	@ 0x40
341835a6:	443b      	add	r3, r7
341835a8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
341835ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
341835ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
341835b2:	009b      	lsls	r3, r3, #2
341835b4:	3340      	adds	r3, #64	@ 0x40
341835b6:	443b      	add	r3, r7
341835b8:	f853 3c20 	ldr.w	r3, [r3, #-32]
341835bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
341835c0:	4611      	mov	r1, r2
341835c2:	4618      	mov	r0, r3
341835c4:	f005 f932 	bl	3418882c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
341835c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
341835cc:	005b      	lsls	r3, r3, #1
341835ce:	3340      	adds	r3, #64	@ 0x40
341835d0:	443b      	add	r3, r7
341835d2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
341835d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
341835d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
341835dc:	3340      	adds	r3, #64	@ 0x40
341835de:	443b      	add	r3, r7
341835e0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
341835e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
341835e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
341835ea:	009b      	lsls	r3, r3, #2
341835ec:	3340      	adds	r3, #64	@ 0x40
341835ee:	443b      	add	r3, r7
341835f0:	f853 3c28 	ldr.w	r3, [r3, #-40]
341835f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
341835f8:	4611      	mov	r1, r2
341835fa:	4618      	mov	r0, r3
341835fc:	f005 f916 	bl	3418882c <HAL_GPIO_Init>
34183600:	e000      	b.n	34183604 <UART_MspInit+0x104>
      return;
34183602:	bf00      	nop
}
34183604:	3740      	adds	r7, #64	@ 0x40
34183606:	46bd      	mov	sp, r7
34183608:	bd80      	pop	{r7, pc}
3418360a:	bf00      	nop
3418360c:	341a4e9c 	.word	0x341a4e9c
34183610:	341a4ea4 	.word	0x341a4ea4
34183614:	341a4eac 	.word	0x341a4eac
34183618:	341a4eb0 	.word	0x341a4eb0
3418361c:	52001000 	.word	0x52001000
34183620:	50004400 	.word	0x50004400

34183624 <LL_AHB4_GRP1_EnableClock>:
{
34183624:	b480      	push	{r7}
34183626:	b085      	sub	sp, #20
34183628:	af00      	add	r7, sp, #0
3418362a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3418362c:	4a07      	ldr	r2, [pc, #28]	@ (3418364c <LL_AHB4_GRP1_EnableClock+0x28>)
3418362e:	687b      	ldr	r3, [r7, #4]
34183630:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34183634:	4b05      	ldr	r3, [pc, #20]	@ (3418364c <LL_AHB4_GRP1_EnableClock+0x28>)
34183636:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3418363a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3418363c:	68fb      	ldr	r3, [r7, #12]
}
3418363e:	bf00      	nop
34183640:	3714      	adds	r7, #20
34183642:	46bd      	mov	sp, r7
34183644:	f85d 7b04 	ldr.w	r7, [sp], #4
34183648:	4770      	bx	lr
3418364a:	bf00      	nop
3418364c:	56028000 	.word	0x56028000

34183650 <LL_APB1_GRP1_EnableClock>:
{
34183650:	b480      	push	{r7}
34183652:	b085      	sub	sp, #20
34183654:	af00      	add	r7, sp, #0
34183656:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENSR1, Periphs);
34183658:	4a07      	ldr	r2, [pc, #28]	@ (34183678 <LL_APB1_GRP1_EnableClock+0x28>)
3418365a:	687b      	ldr	r3, [r7, #4]
3418365c:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
34183660:	4b05      	ldr	r3, [pc, #20]	@ (34183678 <LL_APB1_GRP1_EnableClock+0x28>)
34183662:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34183666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34183668:	68fb      	ldr	r3, [r7, #12]
}
3418366a:	bf00      	nop
3418366c:	3714      	adds	r7, #20
3418366e:	46bd      	mov	sp, r7
34183670:	f85d 7b04 	ldr.w	r7, [sp], #4
34183674:	4770      	bx	lr
34183676:	bf00      	nop
34183678:	56028000 	.word	0x56028000

3418367c <LL_APB1_GRP1_DisableClock>:
{
3418367c:	b480      	push	{r7}
3418367e:	b083      	sub	sp, #12
34183680:	af00      	add	r7, sp, #0
34183682:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENCR1, Periphs);
34183684:	4b06      	ldr	r3, [pc, #24]	@ (341836a0 <LL_APB1_GRP1_DisableClock+0x24>)
34183686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418368a:	461a      	mov	r2, r3
3418368c:	687b      	ldr	r3, [r7, #4]
3418368e:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
34183692:	bf00      	nop
34183694:	370c      	adds	r7, #12
34183696:	46bd      	mov	sp, r7
34183698:	f85d 7b04 	ldr.w	r7, [sp], #4
3418369c:	4770      	bx	lr
3418369e:	bf00      	nop
341836a0:	56028000 	.word	0x56028000

341836a4 <LL_APB1_GRP1_ForceReset>:
{
341836a4:	b480      	push	{r7}
341836a6:	b083      	sub	sp, #12
341836a8:	af00      	add	r7, sp, #0
341836aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
341836ac:	4a04      	ldr	r2, [pc, #16]	@ (341836c0 <LL_APB1_GRP1_ForceReset+0x1c>)
341836ae:	687b      	ldr	r3, [r7, #4]
341836b0:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
}
341836b4:	bf00      	nop
341836b6:	370c      	adds	r7, #12
341836b8:	46bd      	mov	sp, r7
341836ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341836be:	4770      	bx	lr
341836c0:	56028000 	.word	0x56028000

341836c4 <LL_APB1_GRP1_ReleaseReset>:
{
341836c4:	b480      	push	{r7}
341836c6:	b083      	sub	sp, #12
341836c8:	af00      	add	r7, sp, #0
341836ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
341836cc:	4b06      	ldr	r3, [pc, #24]	@ (341836e8 <LL_APB1_GRP1_ReleaseReset+0x24>)
341836ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341836d2:	461a      	mov	r2, r3
341836d4:	687b      	ldr	r3, [r7, #4]
341836d6:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
}
341836da:	bf00      	nop
341836dc:	370c      	adds	r7, #12
341836de:	46bd      	mov	sp, r7
341836e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341836e4:	4770      	bx	lr
341836e6:	bf00      	nop
341836e8:	56028000 	.word	0x56028000

341836ec <BSP_I2C1_Init>:
/**
  * @brief  Initializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
341836ec:	b580      	push	{r7, lr}
341836ee:	b082      	sub	sp, #8
341836f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
341836f2:	2300      	movs	r3, #0
341836f4:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
341836f6:	4b16      	ldr	r3, [pc, #88]	@ (34183750 <BSP_I2C1_Init+0x64>)
341836f8:	4a16      	ldr	r2, [pc, #88]	@ (34183754 <BSP_I2C1_Init+0x68>)
341836fa:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
341836fc:	4b16      	ldr	r3, [pc, #88]	@ (34183758 <BSP_I2C1_Init+0x6c>)
341836fe:	681b      	ldr	r3, [r3, #0]
34183700:	2b00      	cmp	r3, #0
34183702:	d11f      	bne.n	34183744 <BSP_I2C1_Init+0x58>
  {
    I2c1InitCounter++;
34183704:	4b14      	ldr	r3, [pc, #80]	@ (34183758 <BSP_I2C1_Init+0x6c>)
34183706:	681b      	ldr	r3, [r3, #0]
34183708:	3301      	adds	r3, #1
3418370a:	4a13      	ldr	r2, [pc, #76]	@ (34183758 <BSP_I2C1_Init+0x6c>)
3418370c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3418370e:	4810      	ldr	r0, [pc, #64]	@ (34183750 <BSP_I2C1_Init+0x64>)
34183710:	f006 fa1e 	bl	34189b50 <HAL_I2C_GetState>
34183714:	4603      	mov	r3, r0
34183716:	2b00      	cmp	r3, #0
34183718:	d114      	bne.n	34183744 <BSP_I2C1_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
3418371a:	480d      	ldr	r0, [pc, #52]	@ (34183750 <BSP_I2C1_Init+0x64>)
3418371c:	f000 f8e2 	bl	341838e4 <I2C1_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
34183720:	f009 fee8 	bl	3418d4f4 <HAL_RCC_GetPCLK1Freq>
34183724:	4603      	mov	r3, r0
34183726:	490d      	ldr	r1, [pc, #52]	@ (3418375c <BSP_I2C1_Init+0x70>)
34183728:	4618      	mov	r0, r3
3418372a:	f000 f991 	bl	34183a50 <I2C_GetTiming>
3418372e:	4603      	mov	r3, r0
34183730:	4619      	mov	r1, r3
34183732:	4807      	ldr	r0, [pc, #28]	@ (34183750 <BSP_I2C1_Init+0x64>)
34183734:	f000 f838 	bl	341837a8 <MX_I2C1_Init>
34183738:	4603      	mov	r3, r0
3418373a:	2b00      	cmp	r3, #0
3418373c:	d002      	beq.n	34183744 <BSP_I2C1_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
3418373e:	f06f 0307 	mvn.w	r3, #7
34183742:	607b      	str	r3, [r7, #4]
      }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 1) */
    }
  }

  return ret;
34183744:	687b      	ldr	r3, [r7, #4]
}
34183746:	4618      	mov	r0, r3
34183748:	3708      	adds	r7, #8
3418374a:	46bd      	mov	sp, r7
3418374c:	bd80      	pop	{r7, pc}
3418374e:	bf00      	nop
34183750:	341c2158 	.word	0x341c2158
34183754:	50005400 	.word	0x50005400
34183758:	341c1750 	.word	0x341c1750
3418375c:	000186a0 	.word	0x000186a0

34183760 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitializes I2C1 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
34183760:	b580      	push	{r7, lr}
34183762:	b082      	sub	sp, #8
34183764:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
34183766:	2300      	movs	r3, #0
34183768:	607b      	str	r3, [r7, #4]

  I2c1InitCounter--;
3418376a:	4b0d      	ldr	r3, [pc, #52]	@ (341837a0 <BSP_I2C1_DeInit+0x40>)
3418376c:	681b      	ldr	r3, [r3, #0]
3418376e:	3b01      	subs	r3, #1
34183770:	4a0b      	ldr	r2, [pc, #44]	@ (341837a0 <BSP_I2C1_DeInit+0x40>)
34183772:	6013      	str	r3, [r2, #0]

  if (I2c1InitCounter == 0U)
34183774:	4b0a      	ldr	r3, [pc, #40]	@ (341837a0 <BSP_I2C1_DeInit+0x40>)
34183776:	681b      	ldr	r3, [r3, #0]
34183778:	2b00      	cmp	r3, #0
3418377a:	d10b      	bne.n	34183794 <BSP_I2C1_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C1_MspDeInit(&hbus_i2c1);
3418377c:	4809      	ldr	r0, [pc, #36]	@ (341837a4 <BSP_I2C1_DeInit+0x44>)
3418377e:	f000 f8f3 	bl	34183968 <I2C1_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
34183782:	4808      	ldr	r0, [pc, #32]	@ (341837a4 <BSP_I2C1_DeInit+0x44>)
34183784:	f005 ff18 	bl	341895b8 <HAL_I2C_DeInit>
34183788:	4603      	mov	r3, r0
3418378a:	2b00      	cmp	r3, #0
3418378c:	d002      	beq.n	34183794 <BSP_I2C1_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
3418378e:	f06f 0307 	mvn.w	r3, #7
34183792:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
34183794:	687b      	ldr	r3, [r7, #4]
}
34183796:	4618      	mov	r0, r3
34183798:	3708      	adds	r7, #8
3418379a:	46bd      	mov	sp, r7
3418379c:	bd80      	pop	{r7, pc}
3418379e:	bf00      	nop
341837a0:	341c1750 	.word	0x341c1750
341837a4:	341c2158 	.word	0x341c2158

341837a8 <MX_I2C1_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
341837a8:	b580      	push	{r7, lr}
341837aa:	b084      	sub	sp, #16
341837ac:	af00      	add	r7, sp, #0
341837ae:	6078      	str	r0, [r7, #4]
341837b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
341837b2:	2300      	movs	r3, #0
341837b4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
341837b6:	687b      	ldr	r3, [r7, #4]
341837b8:	683a      	ldr	r2, [r7, #0]
341837ba:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
341837bc:	687b      	ldr	r3, [r7, #4]
341837be:	2200      	movs	r2, #0
341837c0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
341837c2:	687b      	ldr	r3, [r7, #4]
341837c4:	2201      	movs	r2, #1
341837c6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
341837c8:	687b      	ldr	r3, [r7, #4]
341837ca:	2200      	movs	r2, #0
341837cc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
341837ce:	687b      	ldr	r3, [r7, #4]
341837d0:	2200      	movs	r2, #0
341837d2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
341837d4:	687b      	ldr	r3, [r7, #4]
341837d6:	2200      	movs	r2, #0
341837d8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
341837da:	687b      	ldr	r3, [r7, #4]
341837dc:	2200      	movs	r2, #0
341837de:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
341837e0:	687b      	ldr	r3, [r7, #4]
341837e2:	2200      	movs	r2, #0
341837e4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
341837e6:	6878      	ldr	r0, [r7, #4]
341837e8:	f005 fd9c 	bl	34189324 <HAL_I2C_Init>
341837ec:	4603      	mov	r3, r0
341837ee:	2b00      	cmp	r3, #0
341837f0:	d002      	beq.n	341837f8 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
341837f2:	2301      	movs	r3, #1
341837f4:	73fb      	strb	r3, [r7, #15]
341837f6:	e014      	b.n	34183822 <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
341837f8:	2300      	movs	r3, #0
341837fa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
341837fc:	68b9      	ldr	r1, [r7, #8]
341837fe:	6878      	ldr	r0, [r7, #4]
34183800:	f006 fce8 	bl	3418a1d4 <HAL_I2CEx_ConfigAnalogFilter>
34183804:	4603      	mov	r3, r0
34183806:	2b00      	cmp	r3, #0
34183808:	d002      	beq.n	34183810 <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
3418380a:	2301      	movs	r3, #1
3418380c:	73fb      	strb	r3, [r7, #15]
3418380e:	e008      	b.n	34183822 <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
34183810:	2100      	movs	r1, #0
34183812:	6878      	ldr	r0, [r7, #4]
34183814:	f006 fd70 	bl	3418a2f8 <HAL_I2CEx_ConfigDigitalFilter>
34183818:	4603      	mov	r3, r0
3418381a:	2b00      	cmp	r3, #0
3418381c:	d001      	beq.n	34183822 <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
3418381e:	2301      	movs	r3, #1
34183820:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
34183822:	7bfb      	ldrb	r3, [r7, #15]
}
34183824:	4618      	mov	r0, r3
34183826:	3710      	adds	r7, #16
34183828:	46bd      	mov	sp, r7
3418382a:	bd80      	pop	{r7, pc}

3418382c <BSP_I2C1_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
3418382c:	b580      	push	{r7, lr}
3418382e:	b088      	sub	sp, #32
34183830:	af02      	add	r7, sp, #8
34183832:	60ba      	str	r2, [r7, #8]
34183834:	461a      	mov	r2, r3
34183836:	4603      	mov	r3, r0
34183838:	81fb      	strh	r3, [r7, #14]
3418383a:	460b      	mov	r3, r1
3418383c:	81bb      	strh	r3, [r7, #12]
3418383e:	4613      	mov	r3, r2
34183840:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
34183842:	89b9      	ldrh	r1, [r7, #12]
34183844:	89f8      	ldrh	r0, [r7, #14]
34183846:	88fb      	ldrh	r3, [r7, #6]
34183848:	9300      	str	r3, [sp, #0]
3418384a:	68bb      	ldr	r3, [r7, #8]
3418384c:	2202      	movs	r2, #2
3418384e:	f000 f8ab 	bl	341839a8 <I2C1_WriteReg>
34183852:	4603      	mov	r3, r0
34183854:	2b00      	cmp	r3, #0
34183856:	d102      	bne.n	3418385e <BSP_I2C1_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
34183858:	2300      	movs	r3, #0
3418385a:	617b      	str	r3, [r7, #20]
3418385c:	e00c      	b.n	34183878 <BSP_I2C1_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3418385e:	4809      	ldr	r0, [pc, #36]	@ (34183884 <BSP_I2C1_WriteReg16+0x58>)
34183860:	f006 f984 	bl	34189b6c <HAL_I2C_GetError>
34183864:	4603      	mov	r3, r0
34183866:	2b04      	cmp	r3, #4
34183868:	d103      	bne.n	34183872 <BSP_I2C1_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3418386a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
3418386e:	617b      	str	r3, [r7, #20]
34183870:	e002      	b.n	34183878 <BSP_I2C1_WriteReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34183872:	f06f 0303 	mvn.w	r3, #3
34183876:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
34183878:	697b      	ldr	r3, [r7, #20]
}
3418387a:	4618      	mov	r0, r3
3418387c:	3718      	adds	r7, #24
3418387e:	46bd      	mov	sp, r7
34183880:	bd80      	pop	{r7, pc}
34183882:	bf00      	nop
34183884:	341c2158 	.word	0x341c2158

34183888 <BSP_I2C1_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
34183888:	b580      	push	{r7, lr}
3418388a:	b088      	sub	sp, #32
3418388c:	af02      	add	r7, sp, #8
3418388e:	60ba      	str	r2, [r7, #8]
34183890:	461a      	mov	r2, r3
34183892:	4603      	mov	r3, r0
34183894:	81fb      	strh	r3, [r7, #14]
34183896:	460b      	mov	r3, r1
34183898:	81bb      	strh	r3, [r7, #12]
3418389a:	4613      	mov	r3, r2
3418389c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
3418389e:	89b9      	ldrh	r1, [r7, #12]
341838a0:	89f8      	ldrh	r0, [r7, #14]
341838a2:	88fb      	ldrh	r3, [r7, #6]
341838a4:	9300      	str	r3, [sp, #0]
341838a6:	68bb      	ldr	r3, [r7, #8]
341838a8:	2202      	movs	r2, #2
341838aa:	f000 f8a3 	bl	341839f4 <I2C1_ReadReg>
341838ae:	4603      	mov	r3, r0
341838b0:	2b00      	cmp	r3, #0
341838b2:	d102      	bne.n	341838ba <BSP_I2C1_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
341838b4:	2300      	movs	r3, #0
341838b6:	617b      	str	r3, [r7, #20]
341838b8:	e00c      	b.n	341838d4 <BSP_I2C1_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
341838ba:	4809      	ldr	r0, [pc, #36]	@ (341838e0 <BSP_I2C1_ReadReg16+0x58>)
341838bc:	f006 f956 	bl	34189b6c <HAL_I2C_GetError>
341838c0:	4603      	mov	r3, r0
341838c2:	2b04      	cmp	r3, #4
341838c4:	d103      	bne.n	341838ce <BSP_I2C1_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
341838c6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
341838ca:	617b      	str	r3, [r7, #20]
341838cc:	e002      	b.n	341838d4 <BSP_I2C1_ReadReg16+0x4c>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
341838ce:	f06f 0303 	mvn.w	r3, #3
341838d2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */
  return ret;
341838d4:	697b      	ldr	r3, [r7, #20]
}
341838d6:	4618      	mov	r0, r3
341838d8:	3718      	adds	r7, #24
341838da:	46bd      	mov	sp, r7
341838dc:	bd80      	pop	{r7, pc}
341838de:	bf00      	nop
341838e0:	341c2158 	.word	0x341c2158

341838e4 <I2C1_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *phi2c)
{
341838e4:	b580      	push	{r7, lr}
341838e6:	b088      	sub	sp, #32
341838e8:	af00      	add	r7, sp, #0
341838ea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Enable PWR for I2C1 pins */
  HAL_PWREx_EnableVddIO4();
341838ec:	f008 f860 	bl	3418b9b0 <HAL_PWREx_EnableVddIO4>

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
341838f0:	2080      	movs	r0, #128	@ 0x80
341838f2:	f7ff fe97 	bl	34183624 <LL_AHB4_GRP1_EnableClock>
  /* Enable SDA GPIO clock */
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
341838f6:	2004      	movs	r0, #4
341838f8:	f7ff fe94 	bl	34183624 <LL_AHB4_GRP1_EnableClock>

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_PIN;
341838fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
34183900:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34183902:	2312      	movs	r3, #18
34183904:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34183906:	2300      	movs	r3, #0
34183908:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3418390a:	2302      	movs	r3, #2
3418390c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3418390e:	2304      	movs	r3, #4
34183910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
34183912:	f107 030c 	add.w	r3, r7, #12
34183916:	4619      	mov	r1, r3
34183918:	4811      	ldr	r0, [pc, #68]	@ (34183960 <I2C1_MspInit+0x7c>)
3418391a:	f004 ff87 	bl	3418882c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_PIN;
3418391e:	2302      	movs	r3, #2
34183920:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
34183922:	2312      	movs	r3, #18
34183924:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
34183926:	2300      	movs	r3, #0
34183928:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3418392a:	2302      	movs	r3, #2
3418392c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
3418392e:	2304      	movs	r3, #4
34183930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
34183932:	f107 030c 	add.w	r3, r7, #12
34183936:	4619      	mov	r1, r3
34183938:	480a      	ldr	r0, [pc, #40]	@ (34183964 <I2C1_MspInit+0x80>)
3418393a:	f004 ff77 	bl	3418882c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
3418393e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34183942:	f7ff fe85 	bl	34183650 <LL_APB1_GRP1_EnableClock>

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
34183946:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
3418394a:	f7ff feab 	bl	341836a4 <LL_APB1_GRP1_ForceReset>

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
3418394e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34183952:	f7ff feb7 	bl	341836c4 <LL_APB1_GRP1_ReleaseReset>
}
34183956:	bf00      	nop
34183958:	3720      	adds	r7, #32
3418395a:	46bd      	mov	sp, r7
3418395c:	bd80      	pop	{r7, pc}
3418395e:	bf00      	nop
34183960:	56021c00 	.word	0x56021c00
34183964:	56020800 	.word	0x56020800

34183968 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *phi2c)
{
34183968:	b580      	push	{r7, lr}
3418396a:	b088      	sub	sp, #32
3418396c:	af00      	add	r7, sp, #0
3418396e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C1_SCL_PIN;
34183970:	f44f 7300 	mov.w	r3, #512	@ 0x200
34183974:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
34183976:	68fb      	ldr	r3, [r7, #12]
34183978:	4619      	mov	r1, r3
3418397a:	4809      	ldr	r0, [pc, #36]	@ (341839a0 <I2C1_MspDeInit+0x38>)
3418397c:	f005 fab6 	bl	34188eec <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_PIN;
34183980:	2302      	movs	r3, #2
34183982:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
34183984:	68fb      	ldr	r3, [r7, #12]
34183986:	4619      	mov	r1, r3
34183988:	4806      	ldr	r0, [pc, #24]	@ (341839a4 <I2C1_MspDeInit+0x3c>)
3418398a:	f005 faaf 	bl	34188eec <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
3418398e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34183992:	f7ff fe73 	bl	3418367c <LL_APB1_GRP1_DisableClock>
}
34183996:	bf00      	nop
34183998:	3720      	adds	r7, #32
3418399a:	46bd      	mov	sp, r7
3418399c:	bd80      	pop	{r7, pc}
3418399e:	bf00      	nop
341839a0:	56021c00 	.word	0x56021c00
341839a4:	56020800 	.word	0x56020800

341839a8 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
341839a8:	b580      	push	{r7, lr}
341839aa:	b088      	sub	sp, #32
341839ac:	af04      	add	r7, sp, #16
341839ae:	607b      	str	r3, [r7, #4]
341839b0:	4603      	mov	r3, r0
341839b2:	81fb      	strh	r3, [r7, #14]
341839b4:	460b      	mov	r3, r1
341839b6:	81bb      	strh	r3, [r7, #12]
341839b8:	4613      	mov	r3, r2
341839ba:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
341839bc:	8978      	ldrh	r0, [r7, #10]
341839be:	89ba      	ldrh	r2, [r7, #12]
341839c0:	89f9      	ldrh	r1, [r7, #14]
341839c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
341839c6:	9302      	str	r3, [sp, #8]
341839c8:	8b3b      	ldrh	r3, [r7, #24]
341839ca:	9301      	str	r3, [sp, #4]
341839cc:	687b      	ldr	r3, [r7, #4]
341839ce:	9300      	str	r3, [sp, #0]
341839d0:	4603      	mov	r3, r0
341839d2:	4807      	ldr	r0, [pc, #28]	@ (341839f0 <I2C1_WriteReg+0x48>)
341839d4:	f005 fe72 	bl	341896bc <HAL_I2C_Mem_Write>
341839d8:	4603      	mov	r3, r0
341839da:	2b00      	cmp	r3, #0
341839dc:	d101      	bne.n	341839e2 <I2C1_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
341839de:	2300      	movs	r3, #0
341839e0:	e001      	b.n	341839e6 <I2C1_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
341839e2:	f06f 0307 	mvn.w	r3, #7
}
341839e6:	4618      	mov	r0, r3
341839e8:	3710      	adds	r7, #16
341839ea:	46bd      	mov	sp, r7
341839ec:	bd80      	pop	{r7, pc}
341839ee:	bf00      	nop
341839f0:	341c2158 	.word	0x341c2158

341839f4 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
341839f4:	b580      	push	{r7, lr}
341839f6:	b088      	sub	sp, #32
341839f8:	af04      	add	r7, sp, #16
341839fa:	607b      	str	r3, [r7, #4]
341839fc:	4603      	mov	r3, r0
341839fe:	81fb      	strh	r3, [r7, #14]
34183a00:	460b      	mov	r3, r1
34183a02:	81bb      	strh	r3, [r7, #12]
34183a04:	4613      	mov	r3, r2
34183a06:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
34183a08:	8978      	ldrh	r0, [r7, #10]
34183a0a:	89ba      	ldrh	r2, [r7, #12]
34183a0c:	89f9      	ldrh	r1, [r7, #14]
34183a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34183a12:	9302      	str	r3, [sp, #8]
34183a14:	8b3b      	ldrh	r3, [r7, #24]
34183a16:	9301      	str	r3, [sp, #4]
34183a18:	687b      	ldr	r3, [r7, #4]
34183a1a:	9300      	str	r3, [sp, #0]
34183a1c:	4603      	mov	r3, r0
34183a1e:	4807      	ldr	r0, [pc, #28]	@ (34183a3c <I2C1_ReadReg+0x48>)
34183a20:	f005 ff6e 	bl	34189900 <HAL_I2C_Mem_Read>
34183a24:	4603      	mov	r3, r0
34183a26:	2b00      	cmp	r3, #0
34183a28:	d101      	bne.n	34183a2e <I2C1_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
34183a2a:	2300      	movs	r3, #0
34183a2c:	e001      	b.n	34183a32 <I2C1_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
34183a2e:	f06f 0307 	mvn.w	r3, #7
}
34183a32:	4618      	mov	r0, r3
34183a34:	3710      	adds	r7, #16
34183a36:	46bd      	mov	sp, r7
34183a38:	bd80      	pop	{r7, pc}
34183a3a:	bf00      	nop
34183a3c:	341c2158 	.word	0x341c2158

34183a40 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
34183a40:	b580      	push	{r7, lr}
34183a42:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
34183a44:	f000 fd7c 	bl	34184540 <HAL_GetTick>
34183a48:	4603      	mov	r3, r0
}
34183a4a:	4618      	mov	r0, r3
34183a4c:	bd80      	pop	{r7, pc}
	...

34183a50 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
34183a50:	b580      	push	{r7, lr}
34183a52:	b086      	sub	sp, #24
34183a54:	af00      	add	r7, sp, #0
34183a56:	6078      	str	r0, [r7, #4]
34183a58:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
34183a5a:	2300      	movs	r3, #0
34183a5c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
34183a5e:	687b      	ldr	r3, [r7, #4]
34183a60:	2b00      	cmp	r3, #0
34183a62:	d06b      	beq.n	34183b3c <I2C_GetTiming+0xec>
34183a64:	683b      	ldr	r3, [r7, #0]
34183a66:	2b00      	cmp	r3, #0
34183a68:	d068      	beq.n	34183b3c <I2C_GetTiming+0xec>
  {
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34183a6a:	2300      	movs	r3, #0
34183a6c:	613b      	str	r3, [r7, #16]
34183a6e:	e060      	b.n	34183b32 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34183a70:	4a35      	ldr	r2, [pc, #212]	@ (34183b48 <I2C_GetTiming+0xf8>)
34183a72:	693b      	ldr	r3, [r7, #16]
34183a74:	212c      	movs	r1, #44	@ 0x2c
34183a76:	fb01 f303 	mul.w	r3, r1, r3
34183a7a:	4413      	add	r3, r2
34183a7c:	3304      	adds	r3, #4
34183a7e:	681b      	ldr	r3, [r3, #0]
34183a80:	683a      	ldr	r2, [r7, #0]
34183a82:	429a      	cmp	r2, r3
34183a84:	d352      	bcc.n	34183b2c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
34183a86:	4a30      	ldr	r2, [pc, #192]	@ (34183b48 <I2C_GetTiming+0xf8>)
34183a88:	693b      	ldr	r3, [r7, #16]
34183a8a:	212c      	movs	r1, #44	@ 0x2c
34183a8c:	fb01 f303 	mul.w	r3, r1, r3
34183a90:	4413      	add	r3, r2
34183a92:	3308      	adds	r3, #8
34183a94:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
34183a96:	683a      	ldr	r2, [r7, #0]
34183a98:	429a      	cmp	r2, r3
34183a9a:	d847      	bhi.n	34183b2c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
34183a9c:	6939      	ldr	r1, [r7, #16]
34183a9e:	6878      	ldr	r0, [r7, #4]
34183aa0:	f000 f856 	bl	34183b50 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
34183aa4:	6939      	ldr	r1, [r7, #16]
34183aa6:	6878      	ldr	r0, [r7, #4]
34183aa8:	f000 f940 	bl	34183d2c <I2C_Compute_SCLL_SCLH>
34183aac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
34183aae:	68fb      	ldr	r3, [r7, #12]
34183ab0:	2b7f      	cmp	r3, #127	@ 0x7f
34183ab2:	d842      	bhi.n	34183b3a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34183ab4:	4925      	ldr	r1, [pc, #148]	@ (34183b4c <I2C_GetTiming+0xfc>)
34183ab6:	68fa      	ldr	r2, [r7, #12]
34183ab8:	4613      	mov	r3, r2
34183aba:	009b      	lsls	r3, r3, #2
34183abc:	4413      	add	r3, r2
34183abe:	009b      	lsls	r3, r3, #2
34183ac0:	440b      	add	r3, r1
34183ac2:	681b      	ldr	r3, [r3, #0]
34183ac4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34183ac6:	4821      	ldr	r0, [pc, #132]	@ (34183b4c <I2C_GetTiming+0xfc>)
34183ac8:	68fa      	ldr	r2, [r7, #12]
34183aca:	4613      	mov	r3, r2
34183acc:	009b      	lsls	r3, r3, #2
34183ace:	4413      	add	r3, r2
34183ad0:	009b      	lsls	r3, r3, #2
34183ad2:	4403      	add	r3, r0
34183ad4:	3304      	adds	r3, #4
34183ad6:	681b      	ldr	r3, [r3, #0]
34183ad8:	051b      	lsls	r3, r3, #20
34183ada:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34183ade:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34183ae0:	481a      	ldr	r0, [pc, #104]	@ (34183b4c <I2C_GetTiming+0xfc>)
34183ae2:	68fa      	ldr	r2, [r7, #12]
34183ae4:	4613      	mov	r3, r2
34183ae6:	009b      	lsls	r3, r3, #2
34183ae8:	4413      	add	r3, r2
34183aea:	009b      	lsls	r3, r3, #2
34183aec:	4403      	add	r3, r0
34183aee:	3308      	adds	r3, #8
34183af0:	681b      	ldr	r3, [r3, #0]
34183af2:	041b      	lsls	r3, r3, #16
34183af4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
34183af8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
34183afa:	4814      	ldr	r0, [pc, #80]	@ (34183b4c <I2C_GetTiming+0xfc>)
34183afc:	68fa      	ldr	r2, [r7, #12]
34183afe:	4613      	mov	r3, r2
34183b00:	009b      	lsls	r3, r3, #2
34183b02:	4413      	add	r3, r2
34183b04:	009b      	lsls	r3, r3, #2
34183b06:	4403      	add	r3, r0
34183b08:	330c      	adds	r3, #12
34183b0a:	681b      	ldr	r3, [r3, #0]
34183b0c:	021b      	lsls	r3, r3, #8
34183b0e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
34183b10:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
34183b12:	480e      	ldr	r0, [pc, #56]	@ (34183b4c <I2C_GetTiming+0xfc>)
34183b14:	68fa      	ldr	r2, [r7, #12]
34183b16:	4613      	mov	r3, r2
34183b18:	009b      	lsls	r3, r3, #2
34183b1a:	4413      	add	r3, r2
34183b1c:	009b      	lsls	r3, r3, #2
34183b1e:	4403      	add	r3, r0
34183b20:	3310      	adds	r3, #16
34183b22:	681b      	ldr	r3, [r3, #0]
34183b24:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
34183b26:	430b      	orrs	r3, r1
34183b28:	617b      	str	r3, [r7, #20]
        }
        break;
34183b2a:	e006      	b.n	34183b3a <I2C_GetTiming+0xea>
    for (speed = 0; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS; speed++)
34183b2c:	693b      	ldr	r3, [r7, #16]
34183b2e:	3301      	adds	r3, #1
34183b30:	613b      	str	r3, [r7, #16]
34183b32:	693b      	ldr	r3, [r7, #16]
34183b34:	2b02      	cmp	r3, #2
34183b36:	d99b      	bls.n	34183a70 <I2C_GetTiming+0x20>
34183b38:	e000      	b.n	34183b3c <I2C_GetTiming+0xec>
        break;
34183b3a:	bf00      	nop
      }
    }
  }

  return ret;
34183b3c:	697b      	ldr	r3, [r7, #20]
}
34183b3e:	4618      	mov	r0, r3
34183b40:	3718      	adds	r7, #24
34183b42:	46bd      	mov	sp, r7
34183b44:	bd80      	pop	{r7, pc}
34183b46:	bf00      	nop
34183b48:	341a6488 	.word	0x341a6488
34183b4c:	341c1754 	.word	0x341c1754

34183b50 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
34183b50:	b480      	push	{r7}
34183b52:	b08f      	sub	sp, #60	@ 0x3c
34183b54:	af00      	add	r7, sp, #0
34183b56:	6078      	str	r0, [r7, #4]
34183b58:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
34183b5a:	2310      	movs	r3, #16
34183b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
34183b5e:	687b      	ldr	r3, [r7, #4]
34183b60:	085a      	lsrs	r2, r3, #1
34183b62:	4b6e      	ldr	r3, [pc, #440]	@ (34183d1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
34183b64:	4413      	add	r3, r2
34183b66:	687a      	ldr	r2, [r7, #4]
34183b68:	fbb3 f3f2 	udiv	r3, r3, r2
34183b6c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
34183b6e:	2332      	movs	r3, #50	@ 0x32
34183b70:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
34183b72:	f44f 7382 	mov.w	r3, #260	@ 0x104
34183b76:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34183b78:	4a69      	ldr	r2, [pc, #420]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183b7a:	683b      	ldr	r3, [r7, #0]
34183b7c:	212c      	movs	r1, #44	@ 0x2c
34183b7e:	fb01 f303 	mul.w	r3, r1, r3
34183b82:	4413      	add	r3, r2
34183b84:	3324      	adds	r3, #36	@ 0x24
34183b86:	681b      	ldr	r3, [r3, #0]
34183b88:	4618      	mov	r0, r3
34183b8a:	4a65      	ldr	r2, [pc, #404]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183b8c:	683b      	ldr	r3, [r7, #0]
34183b8e:	212c      	movs	r1, #44	@ 0x2c
34183b90:	fb01 f303 	mul.w	r3, r1, r3
34183b94:	4413      	add	r3, r2
34183b96:	330c      	adds	r3, #12
34183b98:	681b      	ldr	r3, [r3, #0]
34183b9a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34183b9c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34183b9e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
34183ba0:	495f      	ldr	r1, [pc, #380]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183ba2:	683b      	ldr	r3, [r7, #0]
34183ba4:	202c      	movs	r0, #44	@ 0x2c
34183ba6:	fb00 f303 	mul.w	r3, r0, r3
34183baa:	440b      	add	r3, r1
34183bac:	3328      	adds	r3, #40	@ 0x28
34183bae:	681b      	ldr	r3, [r3, #0]
34183bb0:	3303      	adds	r3, #3
34183bb2:	69f9      	ldr	r1, [r7, #28]
34183bb4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
34183bb8:	1ad3      	subs	r3, r2, r3
34183bba:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34183bbc:	4a58      	ldr	r2, [pc, #352]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183bbe:	683b      	ldr	r3, [r7, #0]
34183bc0:	212c      	movs	r1, #44	@ 0x2c
34183bc2:	fb01 f303 	mul.w	r3, r1, r3
34183bc6:	4413      	add	r3, r2
34183bc8:	3310      	adds	r3, #16
34183bca:	681b      	ldr	r3, [r3, #0]
34183bcc:	4618      	mov	r0, r3
34183bce:	4a54      	ldr	r2, [pc, #336]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183bd0:	683b      	ldr	r3, [r7, #0]
34183bd2:	212c      	movs	r1, #44	@ 0x2c
34183bd4:	fb01 f303 	mul.w	r3, r1, r3
34183bd8:	4413      	add	r3, r2
34183bda:	3320      	adds	r3, #32
34183bdc:	681b      	ldr	r3, [r3, #0]
34183bde:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
34183be0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34183be2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
34183be4:	494e      	ldr	r1, [pc, #312]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183be6:	683b      	ldr	r3, [r7, #0]
34183be8:	202c      	movs	r0, #44	@ 0x2c
34183bea:	fb00 f303 	mul.w	r3, r0, r3
34183bee:	440b      	add	r3, r1
34183bf0:	3328      	adds	r3, #40	@ 0x28
34183bf2:	681b      	ldr	r3, [r3, #0]
34183bf4:	3304      	adds	r3, #4
34183bf6:	69f9      	ldr	r1, [r7, #28]
34183bf8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
34183bfc:	1ad3      	subs	r3, r2, r3
34183bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
34183c00:	4a47      	ldr	r2, [pc, #284]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183c02:	683b      	ldr	r3, [r7, #0]
34183c04:	212c      	movs	r1, #44	@ 0x2c
34183c06:	fb01 f303 	mul.w	r3, r1, r3
34183c0a:	4413      	add	r3, r2
34183c0c:	3320      	adds	r3, #32
34183c0e:	681b      	ldr	r3, [r3, #0]
34183c10:	4618      	mov	r0, r3
34183c12:	4a43      	ldr	r2, [pc, #268]	@ (34183d20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
34183c14:	683b      	ldr	r3, [r7, #0]
34183c16:	212c      	movs	r1, #44	@ 0x2c
34183c18:	fb01 f303 	mul.w	r3, r1, r3
34183c1c:	4413      	add	r3, r2
34183c1e:	3314      	adds	r3, #20
34183c20:	681b      	ldr	r3, [r3, #0]
34183c22:	4403      	add	r3, r0
34183c24:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
34183c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183c28:	2b00      	cmp	r3, #0
34183c2a:	dc01      	bgt.n	34183c30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
34183c2c:	2300      	movs	r3, #0
34183c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
34183c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183c32:	2b00      	cmp	r3, #0
34183c34:	dc01      	bgt.n	34183c3a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
34183c36:	2300      	movs	r3, #0
34183c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
34183c3a:	2300      	movs	r3, #0
34183c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
34183c3e:	e062      	b.n	34183d06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
34183c40:	2300      	movs	r3, #0
34183c42:	627b      	str	r3, [r7, #36]	@ 0x24
34183c44:	e059      	b.n	34183cfa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
34183c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183c48:	3301      	adds	r3, #1
34183c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34183c4c:	3201      	adds	r2, #1
34183c4e:	fb03 f202 	mul.w	r2, r3, r2
34183c52:	69fb      	ldr	r3, [r7, #28]
34183c54:	fb02 f303 	mul.w	r3, r2, r3
34183c58:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
34183c5a:	693b      	ldr	r3, [r7, #16]
34183c5c:	68fa      	ldr	r2, [r7, #12]
34183c5e:	429a      	cmp	r2, r3
34183c60:	d348      	bcc.n	34183cf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
34183c62:	2300      	movs	r3, #0
34183c64:	623b      	str	r3, [r7, #32]
34183c66:	e042      	b.n	34183cee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
34183c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183c6a:	3301      	adds	r3, #1
34183c6c:	6a3a      	ldr	r2, [r7, #32]
34183c6e:	fb03 f202 	mul.w	r2, r3, r2
34183c72:	69fb      	ldr	r3, [r7, #28]
34183c74:	fb02 f303 	mul.w	r3, r2, r3
34183c78:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
34183c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183c7c:	68ba      	ldr	r2, [r7, #8]
34183c7e:	429a      	cmp	r2, r3
34183c80:	d332      	bcc.n	34183ce8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
34183c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183c84:	68ba      	ldr	r2, [r7, #8]
34183c86:	429a      	cmp	r2, r3
34183c88:	d82e      	bhi.n	34183ce8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
34183c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34183c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34183c8e:	429a      	cmp	r2, r3
34183c90:	d02a      	beq.n	34183ce8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
34183c92:	4b24      	ldr	r3, [pc, #144]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183c94:	681a      	ldr	r2, [r3, #0]
34183c96:	4924      	ldr	r1, [pc, #144]	@ (34183d28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
34183c98:	4613      	mov	r3, r2
34183c9a:	009b      	lsls	r3, r3, #2
34183c9c:	4413      	add	r3, r2
34183c9e:	009b      	lsls	r3, r3, #2
34183ca0:	440b      	add	r3, r1
34183ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34183ca4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
34183ca6:	4b1f      	ldr	r3, [pc, #124]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183ca8:	681a      	ldr	r2, [r3, #0]
34183caa:	491f      	ldr	r1, [pc, #124]	@ (34183d28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
34183cac:	4613      	mov	r3, r2
34183cae:	009b      	lsls	r3, r3, #2
34183cb0:	4413      	add	r3, r2
34183cb2:	009b      	lsls	r3, r3, #2
34183cb4:	440b      	add	r3, r1
34183cb6:	3304      	adds	r3, #4
34183cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34183cba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
34183cbc:	4b19      	ldr	r3, [pc, #100]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183cbe:	681a      	ldr	r2, [r3, #0]
34183cc0:	4919      	ldr	r1, [pc, #100]	@ (34183d28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
34183cc2:	4613      	mov	r3, r2
34183cc4:	009b      	lsls	r3, r3, #2
34183cc6:	4413      	add	r3, r2
34183cc8:	009b      	lsls	r3, r3, #2
34183cca:	440b      	add	r3, r1
34183ccc:	3308      	adds	r3, #8
34183cce:	6a3a      	ldr	r2, [r7, #32]
34183cd0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
34183cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183cd4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
34183cd6:	4b13      	ldr	r3, [pc, #76]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183cd8:	681b      	ldr	r3, [r3, #0]
34183cda:	3301      	adds	r3, #1
34183cdc:	4a11      	ldr	r2, [pc, #68]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183cde:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
34183ce0:	4b10      	ldr	r3, [pc, #64]	@ (34183d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
34183ce2:	681b      	ldr	r3, [r3, #0]
34183ce4:	2b7f      	cmp	r3, #127	@ 0x7f
34183ce6:	d812      	bhi.n	34183d0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
34183ce8:	6a3b      	ldr	r3, [r7, #32]
34183cea:	3301      	adds	r3, #1
34183cec:	623b      	str	r3, [r7, #32]
34183cee:	6a3b      	ldr	r3, [r7, #32]
34183cf0:	2b0f      	cmp	r3, #15
34183cf2:	d9b9      	bls.n	34183c68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
34183cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183cf6:	3301      	adds	r3, #1
34183cf8:	627b      	str	r3, [r7, #36]	@ 0x24
34183cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183cfc:	2b0f      	cmp	r3, #15
34183cfe:	d9a2      	bls.n	34183c46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
34183d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183d02:	3301      	adds	r3, #1
34183d04:	62bb      	str	r3, [r7, #40]	@ 0x28
34183d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183d08:	2b0f      	cmp	r3, #15
34183d0a:	d999      	bls.n	34183c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
34183d0c:	e000      	b.n	34183d10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
34183d0e:	bf00      	nop
          }
        }
      }
    }
  }
}
34183d10:	373c      	adds	r7, #60	@ 0x3c
34183d12:	46bd      	mov	sp, r7
34183d14:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d18:	4770      	bx	lr
34183d1a:	bf00      	nop
34183d1c:	3b9aca00 	.word	0x3b9aca00
34183d20:	341a6488 	.word	0x341a6488
34183d24:	341c2154 	.word	0x341c2154
34183d28:	341c1754 	.word	0x341c1754

34183d2c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
34183d2c:	b480      	push	{r7}
34183d2e:	b093      	sub	sp, #76	@ 0x4c
34183d30:	af00      	add	r7, sp, #0
34183d32:	6078      	str	r0, [r7, #4]
34183d34:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
34183d36:	f04f 33ff 	mov.w	r3, #4294967295
34183d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
34183d3c:	687b      	ldr	r3, [r7, #4]
34183d3e:	085a      	lsrs	r2, r3, #1
34183d40:	4b7a      	ldr	r3, [pc, #488]	@ (34183f2c <I2C_Compute_SCLL_SCLH+0x200>)
34183d42:	4413      	add	r3, r2
34183d44:	687a      	ldr	r2, [r7, #4]
34183d46:	fbb3 f3f2 	udiv	r3, r3, r2
34183d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
34183d4c:	4a78      	ldr	r2, [pc, #480]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183d4e:	683b      	ldr	r3, [r7, #0]
34183d50:	212c      	movs	r1, #44	@ 0x2c
34183d52:	fb01 f303 	mul.w	r3, r1, r3
34183d56:	4413      	add	r3, r2
34183d58:	681b      	ldr	r3, [r3, #0]
34183d5a:	085a      	lsrs	r2, r3, #1
34183d5c:	4b73      	ldr	r3, [pc, #460]	@ (34183f2c <I2C_Compute_SCLL_SCLH+0x200>)
34183d5e:	4413      	add	r3, r2
34183d60:	4973      	ldr	r1, [pc, #460]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183d62:	683a      	ldr	r2, [r7, #0]
34183d64:	202c      	movs	r0, #44	@ 0x2c
34183d66:	fb00 f202 	mul.w	r2, r0, r2
34183d6a:	440a      	add	r2, r1
34183d6c:	6812      	ldr	r2, [r2, #0]
34183d6e:	fbb3 f3f2 	udiv	r3, r3, r2
34183d72:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
34183d74:	2332      	movs	r3, #50	@ 0x32
34183d76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
34183d78:	4a6d      	ldr	r2, [pc, #436]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183d7a:	683b      	ldr	r3, [r7, #0]
34183d7c:	212c      	movs	r1, #44	@ 0x2c
34183d7e:	fb01 f303 	mul.w	r3, r1, r3
34183d82:	4413      	add	r3, r2
34183d84:	3328      	adds	r3, #40	@ 0x28
34183d86:	681a      	ldr	r2, [r3, #0]
34183d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183d8a:	fb02 f303 	mul.w	r3, r2, r3
34183d8e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
34183d90:	4a67      	ldr	r2, [pc, #412]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183d92:	683b      	ldr	r3, [r7, #0]
34183d94:	212c      	movs	r1, #44	@ 0x2c
34183d96:	fb01 f303 	mul.w	r3, r1, r3
34183d9a:	4413      	add	r3, r2
34183d9c:	3304      	adds	r3, #4
34183d9e:	681b      	ldr	r3, [r3, #0]
34183da0:	4a62      	ldr	r2, [pc, #392]	@ (34183f2c <I2C_Compute_SCLL_SCLH+0x200>)
34183da2:	fbb2 f3f3 	udiv	r3, r2, r3
34183da6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
34183da8:	4a61      	ldr	r2, [pc, #388]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183daa:	683b      	ldr	r3, [r7, #0]
34183dac:	212c      	movs	r1, #44	@ 0x2c
34183dae:	fb01 f303 	mul.w	r3, r1, r3
34183db2:	4413      	add	r3, r2
34183db4:	3308      	adds	r3, #8
34183db6:	681b      	ldr	r3, [r3, #0]
34183db8:	4a5c      	ldr	r2, [pc, #368]	@ (34183f2c <I2C_Compute_SCLL_SCLH+0x200>)
34183dba:	fbb2 f3f3 	udiv	r3, r2, r3
34183dbe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
34183dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183dc2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
34183dc4:	2300      	movs	r3, #0
34183dc6:	637b      	str	r3, [r7, #52]	@ 0x34
34183dc8:	e0a3      	b.n	34183f12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
34183dca:	495a      	ldr	r1, [pc, #360]	@ (34183f34 <I2C_Compute_SCLL_SCLH+0x208>)
34183dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34183dce:	4613      	mov	r3, r2
34183dd0:	009b      	lsls	r3, r3, #2
34183dd2:	4413      	add	r3, r2
34183dd4:	009b      	lsls	r3, r3, #2
34183dd6:	440b      	add	r3, r1
34183dd8:	681b      	ldr	r3, [r3, #0]
34183dda:	1c5a      	adds	r2, r3, #1
34183ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183dde:	fb02 f303 	mul.w	r3, r2, r3
34183de2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
34183de4:	2300      	movs	r3, #0
34183de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
34183de8:	e08c      	b.n	34183f04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
34183dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34183dec:	6a3b      	ldr	r3, [r7, #32]
34183dee:	441a      	add	r2, r3
34183df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34183df2:	3301      	adds	r3, #1
34183df4:	6979      	ldr	r1, [r7, #20]
34183df6:	fb03 f101 	mul.w	r1, r3, r1
34183dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183dfc:	005b      	lsls	r3, r3, #1
34183dfe:	440b      	add	r3, r1
34183e00:	4413      	add	r3, r2
34183e02:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
34183e04:	4a4a      	ldr	r2, [pc, #296]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183e06:	683b      	ldr	r3, [r7, #0]
34183e08:	212c      	movs	r1, #44	@ 0x2c
34183e0a:	fb01 f303 	mul.w	r3, r1, r3
34183e0e:	4413      	add	r3, r2
34183e10:	3318      	adds	r3, #24
34183e12:	681b      	ldr	r3, [r3, #0]
34183e14:	693a      	ldr	r2, [r7, #16]
34183e16:	429a      	cmp	r2, r3
34183e18:	d971      	bls.n	34183efe <I2C_Compute_SCLL_SCLH+0x1d2>
34183e1a:	693a      	ldr	r2, [r7, #16]
34183e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183e1e:	1ad2      	subs	r2, r2, r3
34183e20:	6a3b      	ldr	r3, [r7, #32]
34183e22:	1ad3      	subs	r3, r2, r3
34183e24:	089b      	lsrs	r3, r3, #2
34183e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34183e28:	429a      	cmp	r2, r3
34183e2a:	d268      	bcs.n	34183efe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
34183e2c:	2300      	movs	r3, #0
34183e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
34183e30:	e062      	b.n	34183ef8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
34183e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34183e34:	6a3b      	ldr	r3, [r7, #32]
34183e36:	441a      	add	r2, r3
34183e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34183e3a:	3301      	adds	r3, #1
34183e3c:	6979      	ldr	r1, [r7, #20]
34183e3e:	fb03 f101 	mul.w	r1, r3, r1
34183e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183e44:	005b      	lsls	r3, r3, #1
34183e46:	440b      	add	r3, r1
34183e48:	4413      	add	r3, r2
34183e4a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
34183e4c:	693a      	ldr	r2, [r7, #16]
34183e4e:	68fb      	ldr	r3, [r7, #12]
34183e50:	441a      	add	r2, r3
34183e52:	4937      	ldr	r1, [pc, #220]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183e54:	683b      	ldr	r3, [r7, #0]
34183e56:	202c      	movs	r0, #44	@ 0x2c
34183e58:	fb00 f303 	mul.w	r3, r0, r3
34183e5c:	440b      	add	r3, r1
34183e5e:	3320      	adds	r3, #32
34183e60:	681b      	ldr	r3, [r3, #0]
34183e62:	441a      	add	r2, r3
34183e64:	4932      	ldr	r1, [pc, #200]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183e66:	683b      	ldr	r3, [r7, #0]
34183e68:	202c      	movs	r0, #44	@ 0x2c
34183e6a:	fb00 f303 	mul.w	r3, r0, r3
34183e6e:	440b      	add	r3, r1
34183e70:	3324      	adds	r3, #36	@ 0x24
34183e72:	681b      	ldr	r3, [r3, #0]
34183e74:	4413      	add	r3, r2
34183e76:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
34183e78:	68ba      	ldr	r2, [r7, #8]
34183e7a:	69bb      	ldr	r3, [r7, #24]
34183e7c:	429a      	cmp	r2, r3
34183e7e:	d338      	bcc.n	34183ef2 <I2C_Compute_SCLL_SCLH+0x1c6>
34183e80:	68ba      	ldr	r2, [r7, #8]
34183e82:	69fb      	ldr	r3, [r7, #28]
34183e84:	429a      	cmp	r2, r3
34183e86:	d834      	bhi.n	34183ef2 <I2C_Compute_SCLL_SCLH+0x1c6>
34183e88:	4a29      	ldr	r2, [pc, #164]	@ (34183f30 <I2C_Compute_SCLL_SCLH+0x204>)
34183e8a:	683b      	ldr	r3, [r7, #0]
34183e8c:	212c      	movs	r1, #44	@ 0x2c
34183e8e:	fb01 f303 	mul.w	r3, r1, r3
34183e92:	4413      	add	r3, r2
34183e94:	331c      	adds	r3, #28
34183e96:	681b      	ldr	r3, [r3, #0]
34183e98:	68fa      	ldr	r2, [r7, #12]
34183e9a:	429a      	cmp	r2, r3
34183e9c:	d329      	bcc.n	34183ef2 <I2C_Compute_SCLL_SCLH+0x1c6>
34183e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34183ea0:	68fb      	ldr	r3, [r7, #12]
34183ea2:	429a      	cmp	r2, r3
34183ea4:	d225      	bcs.n	34183ef2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
34183ea6:	68ba      	ldr	r2, [r7, #8]
34183ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183eaa:	1ad3      	subs	r3, r2, r3
34183eac:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
34183eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183eb0:	2b00      	cmp	r3, #0
34183eb2:	da02      	bge.n	34183eba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
34183eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183eb6:	425b      	negs	r3, r3
34183eb8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
34183eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34183ebe:	429a      	cmp	r2, r3
34183ec0:	d917      	bls.n	34183ef2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
34183ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183ec4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
34183ec6:	491b      	ldr	r1, [pc, #108]	@ (34183f34 <I2C_Compute_SCLL_SCLH+0x208>)
34183ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34183eca:	4613      	mov	r3, r2
34183ecc:	009b      	lsls	r3, r3, #2
34183ece:	4413      	add	r3, r2
34183ed0:	009b      	lsls	r3, r3, #2
34183ed2:	440b      	add	r3, r1
34183ed4:	3310      	adds	r3, #16
34183ed6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34183ed8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
34183eda:	4916      	ldr	r1, [pc, #88]	@ (34183f34 <I2C_Compute_SCLL_SCLH+0x208>)
34183edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34183ede:	4613      	mov	r3, r2
34183ee0:	009b      	lsls	r3, r3, #2
34183ee2:	4413      	add	r3, r2
34183ee4:	009b      	lsls	r3, r3, #2
34183ee6:	440b      	add	r3, r1
34183ee8:	330c      	adds	r3, #12
34183eea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34183eec:	601a      	str	r2, [r3, #0]
              ret = count;
34183eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34183ef0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
34183ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34183ef4:	3301      	adds	r3, #1
34183ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
34183ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34183efa:	2bff      	cmp	r3, #255	@ 0xff
34183efc:	d999      	bls.n	34183e32 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
34183efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34183f00:	3301      	adds	r3, #1
34183f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
34183f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34183f06:	2bff      	cmp	r3, #255	@ 0xff
34183f08:	f67f af6f 	bls.w	34183dea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
34183f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34183f0e:	3301      	adds	r3, #1
34183f10:	637b      	str	r3, [r7, #52]	@ 0x34
34183f12:	4b09      	ldr	r3, [pc, #36]	@ (34183f38 <I2C_Compute_SCLL_SCLH+0x20c>)
34183f14:	681b      	ldr	r3, [r3, #0]
34183f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
34183f18:	429a      	cmp	r2, r3
34183f1a:	f4ff af56 	bcc.w	34183dca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
34183f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
34183f20:	4618      	mov	r0, r3
34183f22:	374c      	adds	r7, #76	@ 0x4c
34183f24:	46bd      	mov	sp, r7
34183f26:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f2a:	4770      	bx	lr
34183f2c:	3b9aca00 	.word	0x3b9aca00
34183f30:	341a6488 	.word	0x341a6488
34183f34:	341c1754 	.word	0x341c1754
34183f38:	341c2154 	.word	0x341c2154

34183f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34183f3c:	b480      	push	{r7}
34183f3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34183f40:	4b6a      	ldr	r3, [pc, #424]	@ (341840ec <SystemInit+0x1b0>)
34183f42:	4a6b      	ldr	r2, [pc, #428]	@ (341840f0 <SystemInit+0x1b4>)
34183f44:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34183f46:	4b6b      	ldr	r3, [pc, #428]	@ (341840f4 <SystemInit+0x1b8>)
34183f48:	2201      	movs	r2, #1
34183f4a:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34183f4e:	4b69      	ldr	r3, [pc, #420]	@ (341840f4 <SystemInit+0x1b8>)
34183f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183f54:	461a      	mov	r2, r3
34183f56:	2301      	movs	r3, #1
34183f58:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34183f5c:	4b65      	ldr	r3, [pc, #404]	@ (341840f4 <SystemInit+0x1b8>)
34183f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183f62:	461a      	mov	r2, r3
34183f64:	2301      	movs	r3, #1
34183f66:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34183f6a:	4b63      	ldr	r3, [pc, #396]	@ (341840f8 <SystemInit+0x1bc>)
34183f6c:	2200      	movs	r2, #0
34183f6e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183f70:	4b61      	ldr	r3, [pc, #388]	@ (341840f8 <SystemInit+0x1bc>)
34183f72:	2200      	movs	r2, #0
34183f74:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183f76:	4b60      	ldr	r3, [pc, #384]	@ (341840f8 <SystemInit+0x1bc>)
34183f78:	2200      	movs	r2, #0
34183f7a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34183f7c:	4b5e      	ldr	r3, [pc, #376]	@ (341840f8 <SystemInit+0x1bc>)
34183f7e:	2201      	movs	r2, #1
34183f80:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183f82:	4b5d      	ldr	r3, [pc, #372]	@ (341840f8 <SystemInit+0x1bc>)
34183f84:	2200      	movs	r2, #0
34183f86:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183f88:	4b5b      	ldr	r3, [pc, #364]	@ (341840f8 <SystemInit+0x1bc>)
34183f8a:	2200      	movs	r2, #0
34183f8c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
34183f8e:	4b5a      	ldr	r3, [pc, #360]	@ (341840f8 <SystemInit+0x1bc>)
34183f90:	2202      	movs	r2, #2
34183f92:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183f94:	4b58      	ldr	r3, [pc, #352]	@ (341840f8 <SystemInit+0x1bc>)
34183f96:	2200      	movs	r2, #0
34183f98:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183f9a:	4b57      	ldr	r3, [pc, #348]	@ (341840f8 <SystemInit+0x1bc>)
34183f9c:	2200      	movs	r2, #0
34183f9e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34183fa0:	4b55      	ldr	r3, [pc, #340]	@ (341840f8 <SystemInit+0x1bc>)
34183fa2:	2203      	movs	r2, #3
34183fa4:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183fa6:	4b54      	ldr	r3, [pc, #336]	@ (341840f8 <SystemInit+0x1bc>)
34183fa8:	2200      	movs	r2, #0
34183faa:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183fac:	4b52      	ldr	r3, [pc, #328]	@ (341840f8 <SystemInit+0x1bc>)
34183fae:	2200      	movs	r2, #0
34183fb0:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34183fb2:	4b51      	ldr	r3, [pc, #324]	@ (341840f8 <SystemInit+0x1bc>)
34183fb4:	2204      	movs	r2, #4
34183fb6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183fb8:	4b4f      	ldr	r3, [pc, #316]	@ (341840f8 <SystemInit+0x1bc>)
34183fba:	2200      	movs	r2, #0
34183fbc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183fbe:	4b4e      	ldr	r3, [pc, #312]	@ (341840f8 <SystemInit+0x1bc>)
34183fc0:	2200      	movs	r2, #0
34183fc2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34183fc4:	4b4c      	ldr	r3, [pc, #304]	@ (341840f8 <SystemInit+0x1bc>)
34183fc6:	2205      	movs	r2, #5
34183fc8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183fca:	4b4b      	ldr	r3, [pc, #300]	@ (341840f8 <SystemInit+0x1bc>)
34183fcc:	2200      	movs	r2, #0
34183fce:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183fd0:	4b49      	ldr	r3, [pc, #292]	@ (341840f8 <SystemInit+0x1bc>)
34183fd2:	2200      	movs	r2, #0
34183fd4:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34183fd6:	4b48      	ldr	r3, [pc, #288]	@ (341840f8 <SystemInit+0x1bc>)
34183fd8:	2206      	movs	r2, #6
34183fda:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183fdc:	4b46      	ldr	r3, [pc, #280]	@ (341840f8 <SystemInit+0x1bc>)
34183fde:	2200      	movs	r2, #0
34183fe0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183fe2:	4b45      	ldr	r3, [pc, #276]	@ (341840f8 <SystemInit+0x1bc>)
34183fe4:	2200      	movs	r2, #0
34183fe6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34183fe8:	4b43      	ldr	r3, [pc, #268]	@ (341840f8 <SystemInit+0x1bc>)
34183fea:	2207      	movs	r2, #7
34183fec:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34183fee:	4b42      	ldr	r3, [pc, #264]	@ (341840f8 <SystemInit+0x1bc>)
34183ff0:	2200      	movs	r2, #0
34183ff2:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34183ff4:	4b40      	ldr	r3, [pc, #256]	@ (341840f8 <SystemInit+0x1bc>)
34183ff6:	2200      	movs	r2, #0
34183ff8:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34183ffa:	4b3e      	ldr	r3, [pc, #248]	@ (341840f4 <SystemInit+0x1b8>)
34183ffc:	2201      	movs	r2, #1
34183ffe:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34184002:	4b3c      	ldr	r3, [pc, #240]	@ (341840f4 <SystemInit+0x1b8>)
34184004:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34184008:	4b38      	ldr	r3, [pc, #224]	@ (341840ec <SystemInit+0x1b0>)
3418400a:	4a3c      	ldr	r2, [pc, #240]	@ (341840fc <SystemInit+0x1c0>)
3418400c:	689b      	ldr	r3, [r3, #8]
3418400e:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34184010:	4b3b      	ldr	r3, [pc, #236]	@ (34184100 <SystemInit+0x1c4>)
34184012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184014:	4a3a      	ldr	r2, [pc, #232]	@ (34184100 <SystemInit+0x1c4>)
34184016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3418401a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3418401c:	4b38      	ldr	r3, [pc, #224]	@ (34184100 <SystemInit+0x1c4>)
3418401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184020:	4a37      	ldr	r2, [pc, #220]	@ (34184100 <SystemInit+0x1c4>)
34184022:	f043 0310 	orr.w	r3, r3, #16
34184026:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34184028:	4b35      	ldr	r3, [pc, #212]	@ (34184100 <SystemInit+0x1c4>)
3418402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3418402c:	4b31      	ldr	r3, [pc, #196]	@ (341840f4 <SystemInit+0x1b8>)
3418402e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
34184032:	4a30      	ldr	r2, [pc, #192]	@ (341840f4 <SystemInit+0x1b8>)
34184034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34184038:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
3418403c:	4b2d      	ldr	r3, [pc, #180]	@ (341840f4 <SystemInit+0x1b8>)
3418403e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34184042:	4a2c      	ldr	r2, [pc, #176]	@ (341840f4 <SystemInit+0x1b8>)
34184044:	f043 0310 	orr.w	r3, r3, #16
34184048:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
3418404c:	4b29      	ldr	r3, [pc, #164]	@ (341840f4 <SystemInit+0x1b8>)
3418404e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34184052:	4b28      	ldr	r3, [pc, #160]	@ (341840f4 <SystemInit+0x1b8>)
34184054:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34184058:	4a26      	ldr	r2, [pc, #152]	@ (341840f4 <SystemInit+0x1b8>)
3418405a:	f023 0310 	bic.w	r3, r3, #16
3418405e:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34184062:	4b24      	ldr	r3, [pc, #144]	@ (341840f4 <SystemInit+0x1b8>)
34184064:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34184068:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
3418406c:	4b21      	ldr	r3, [pc, #132]	@ (341840f4 <SystemInit+0x1b8>)
3418406e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184072:	461a      	mov	r2, r3
34184074:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34184078:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3418407c:	4b1d      	ldr	r3, [pc, #116]	@ (341840f4 <SystemInit+0x1b8>)
3418407e:	2201      	movs	r2, #1
34184080:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34184084:	4b1b      	ldr	r3, [pc, #108]	@ (341840f4 <SystemInit+0x1b8>)
34184086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418408a:	461a      	mov	r2, r3
3418408c:	2301      	movs	r3, #1
3418408e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34184092:	4b18      	ldr	r3, [pc, #96]	@ (341840f4 <SystemInit+0x1b8>)
34184094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184098:	461a      	mov	r2, r3
3418409a:	2301      	movs	r3, #1
3418409c:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
341840a0:	4b14      	ldr	r3, [pc, #80]	@ (341840f4 <SystemInit+0x1b8>)
341840a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341840a6:	461a      	mov	r2, r3
341840a8:	2340      	movs	r3, #64	@ 0x40
341840aa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
341840ae:	4b13      	ldr	r3, [pc, #76]	@ (341840fc <SystemInit+0x1c0>)
341840b0:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
341840b2:	4b10      	ldr	r3, [pc, #64]	@ (341840f4 <SystemInit+0x1b8>)
341840b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341840b8:	461a      	mov	r2, r3
341840ba:	2301      	movs	r3, #1
341840bc:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341840c0:	4b0a      	ldr	r3, [pc, #40]	@ (341840ec <SystemInit+0x1b0>)
341840c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341840c6:	4a09      	ldr	r2, [pc, #36]	@ (341840ec <SystemInit+0x1b0>)
341840c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341840cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341840d0:	4b0c      	ldr	r3, [pc, #48]	@ (34184104 <SystemInit+0x1c8>)
341840d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341840d6:	4a0b      	ldr	r2, [pc, #44]	@ (34184104 <SystemInit+0x1c8>)
341840d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
341840dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
341840e0:	bf00      	nop
341840e2:	46bd      	mov	sp, r7
341840e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341840e8:	4770      	bx	lr
341840ea:	bf00      	nop
341840ec:	e000ed00 	.word	0xe000ed00
341840f0:	34180400 	.word	0x34180400
341840f4:	56028000 	.word	0x56028000
341840f8:	e000edd0 	.word	0xe000edd0
341840fc:	56008000 	.word	0x56008000
34184100:	56024800 	.word	0x56024800
34184104:	e002ed00 	.word	0xe002ed00

34184108 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34184108:	b480      	push	{r7}
3418410a:	b08d      	sub	sp, #52	@ 0x34
3418410c:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
3418410e:	2300      	movs	r3, #0
34184110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34184112:	2300      	movs	r3, #0
34184114:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34184116:	2300      	movs	r3, #0
34184118:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
3418411a:	2300      	movs	r3, #0
3418411c:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
3418411e:	2300      	movs	r3, #0
34184120:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34184122:	2300      	movs	r3, #0
34184124:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34184126:	4b9b      	ldr	r3, [pc, #620]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
34184128:	6a1b      	ldr	r3, [r3, #32]
3418412a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
3418412e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34184132:	d029      	beq.n	34184188 <SystemCoreClockUpdate+0x80>
34184134:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34184138:	f200 8180 	bhi.w	3418443c <SystemCoreClockUpdate+0x334>
3418413c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34184140:	d01f      	beq.n	34184182 <SystemCoreClockUpdate+0x7a>
34184142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34184146:	f200 8179 	bhi.w	3418443c <SystemCoreClockUpdate+0x334>
3418414a:	2b00      	cmp	r3, #0
3418414c:	d003      	beq.n	34184156 <SystemCoreClockUpdate+0x4e>
3418414e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34184152:	d00a      	beq.n	3418416a <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34184154:	e172      	b.n	3418443c <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34184156:	4b8f      	ldr	r3, [pc, #572]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
34184158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418415a:	09db      	lsrs	r3, r3, #7
3418415c:	f003 0303 	and.w	r3, r3, #3
34184160:	4a8d      	ldr	r2, [pc, #564]	@ (34184398 <SystemCoreClockUpdate+0x290>)
34184162:	fa22 f303 	lsr.w	r3, r2, r3
34184166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34184168:	e169      	b.n	3418443e <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3418416a:	4b8a      	ldr	r3, [pc, #552]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418416e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184172:	2b00      	cmp	r3, #0
34184174:	d102      	bne.n	3418417c <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34184176:	4b89      	ldr	r3, [pc, #548]	@ (3418439c <SystemCoreClockUpdate+0x294>)
34184178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3418417a:	e160      	b.n	3418443e <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
3418417c:	4b88      	ldr	r3, [pc, #544]	@ (341843a0 <SystemCoreClockUpdate+0x298>)
3418417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34184180:	e15d      	b.n	3418443e <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
34184182:	4b88      	ldr	r3, [pc, #544]	@ (341843a4 <SystemCoreClockUpdate+0x29c>)
34184184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34184186:	e15a      	b.n	3418443e <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34184188:	4b82      	ldr	r3, [pc, #520]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418418a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418418e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34184192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184196:	d066      	beq.n	34184266 <SystemCoreClockUpdate+0x15e>
34184198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418419c:	f200 8091 	bhi.w	341842c2 <SystemCoreClockUpdate+0x1ba>
341841a0:	2b00      	cmp	r3, #0
341841a2:	d003      	beq.n	341841ac <SystemCoreClockUpdate+0xa4>
341841a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341841a8:	d02f      	beq.n	3418420a <SystemCoreClockUpdate+0x102>
341841aa:	e08a      	b.n	341842c2 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
341841ac:	4b79      	ldr	r3, [pc, #484]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341841ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341841b2:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
341841b4:	68fb      	ldr	r3, [r7, #12]
341841b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341841ba:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
341841bc:	68fb      	ldr	r3, [r7, #12]
341841be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341841c2:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341841c4:	693b      	ldr	r3, [r7, #16]
341841c6:	2b00      	cmp	r3, #0
341841c8:	f040 80a9 	bne.w	3418431e <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
341841cc:	68fb      	ldr	r3, [r7, #12]
341841ce:	0d1b      	lsrs	r3, r3, #20
341841d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341841d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
341841d6:	68fb      	ldr	r3, [r7, #12]
341841d8:	0a1b      	lsrs	r3, r3, #8
341841da:	f3c3 030b 	ubfx	r3, r3, #0, #12
341841de:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
341841e0:	4b6c      	ldr	r3, [pc, #432]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341841e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341841e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341841ea:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
341841ec:	4b69      	ldr	r3, [pc, #420]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341841ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341841f2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
341841f4:	68fb      	ldr	r3, [r7, #12]
341841f6:	0edb      	lsrs	r3, r3, #27
341841f8:	f003 0307 	and.w	r3, r3, #7
341841fc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
341841fe:	68fb      	ldr	r3, [r7, #12]
34184200:	0e1b      	lsrs	r3, r3, #24
34184202:	f003 0307 	and.w	r3, r3, #7
34184206:	61bb      	str	r3, [r7, #24]
      break;
34184208:	e089      	b.n	3418431e <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3418420a:	4b62      	ldr	r3, [pc, #392]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184210:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34184212:	68fb      	ldr	r3, [r7, #12]
34184214:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34184218:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
3418421a:	68fb      	ldr	r3, [r7, #12]
3418421c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184220:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34184222:	693b      	ldr	r3, [r7, #16]
34184224:	2b00      	cmp	r3, #0
34184226:	d17c      	bne.n	34184322 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34184228:	68fb      	ldr	r3, [r7, #12]
3418422a:	0d1b      	lsrs	r3, r3, #20
3418422c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34184230:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34184232:	68fb      	ldr	r3, [r7, #12]
34184234:	0a1b      	lsrs	r3, r3, #8
34184236:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418423a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3418423c:	4b55      	ldr	r3, [pc, #340]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34184242:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34184246:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34184248:	4b52      	ldr	r3, [pc, #328]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418424e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34184250:	68fb      	ldr	r3, [r7, #12]
34184252:	0edb      	lsrs	r3, r3, #27
34184254:	f003 0307 	and.w	r3, r3, #7
34184258:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
3418425a:	68fb      	ldr	r3, [r7, #12]
3418425c:	0e1b      	lsrs	r3, r3, #24
3418425e:	f003 0307 	and.w	r3, r3, #7
34184262:	61bb      	str	r3, [r7, #24]
      break;
34184264:	e05d      	b.n	34184322 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34184266:	4b4b      	ldr	r3, [pc, #300]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
34184268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418426c:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3418426e:	68fb      	ldr	r3, [r7, #12]
34184270:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34184274:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34184276:	68fb      	ldr	r3, [r7, #12]
34184278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418427c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418427e:	693b      	ldr	r3, [r7, #16]
34184280:	2b00      	cmp	r3, #0
34184282:	d150      	bne.n	34184326 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34184284:	68fb      	ldr	r3, [r7, #12]
34184286:	0d1b      	lsrs	r3, r3, #20
34184288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418428c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3418428e:	68fb      	ldr	r3, [r7, #12]
34184290:	0a1b      	lsrs	r3, r3, #8
34184292:	f3c3 030b 	ubfx	r3, r3, #0, #12
34184296:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34184298:	4b3e      	ldr	r3, [pc, #248]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418429a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418429e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341842a2:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
341842a4:	4b3b      	ldr	r3, [pc, #236]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341842a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341842aa:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
341842ac:	68fb      	ldr	r3, [r7, #12]
341842ae:	0edb      	lsrs	r3, r3, #27
341842b0:	f003 0307 	and.w	r3, r3, #7
341842b4:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
341842b6:	68fb      	ldr	r3, [r7, #12]
341842b8:	0e1b      	lsrs	r3, r3, #24
341842ba:	f003 0307 	and.w	r3, r3, #7
341842be:	61bb      	str	r3, [r7, #24]
      break;
341842c0:	e031      	b.n	34184326 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
341842c2:	4b34      	ldr	r3, [pc, #208]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341842c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341842c8:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
341842ca:	68fb      	ldr	r3, [r7, #12]
341842cc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341842d0:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
341842d2:	68fb      	ldr	r3, [r7, #12]
341842d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341842d8:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341842da:	693b      	ldr	r3, [r7, #16]
341842dc:	2b00      	cmp	r3, #0
341842de:	d124      	bne.n	3418432a <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
341842e0:	68fb      	ldr	r3, [r7, #12]
341842e2:	0d1b      	lsrs	r3, r3, #20
341842e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341842e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341842ea:	68fb      	ldr	r3, [r7, #12]
341842ec:	0a1b      	lsrs	r3, r3, #8
341842ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
341842f2:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341842f4:	4b27      	ldr	r3, [pc, #156]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
341842f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341842fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341842fe:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34184300:	4b24      	ldr	r3, [pc, #144]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
34184302:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184306:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34184308:	68fb      	ldr	r3, [r7, #12]
3418430a:	0edb      	lsrs	r3, r3, #27
3418430c:	f003 0307 	and.w	r3, r3, #7
34184310:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34184312:	68fb      	ldr	r3, [r7, #12]
34184314:	0e1b      	lsrs	r3, r3, #24
34184316:	f003 0307 	and.w	r3, r3, #7
3418431a:	61bb      	str	r3, [r7, #24]
      break;
3418431c:	e005      	b.n	3418432a <SystemCoreClockUpdate+0x222>
      break;
3418431e:	bf00      	nop
34184320:	e004      	b.n	3418432c <SystemCoreClockUpdate+0x224>
      break;
34184322:	bf00      	nop
34184324:	e002      	b.n	3418432c <SystemCoreClockUpdate+0x224>
      break;
34184326:	bf00      	nop
34184328:	e000      	b.n	3418432c <SystemCoreClockUpdate+0x224>
      break;
3418432a:	bf00      	nop
    switch (pllsource)
3418432c:	697b      	ldr	r3, [r7, #20]
3418432e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184332:	d02c      	beq.n	3418438e <SystemCoreClockUpdate+0x286>
34184334:	697b      	ldr	r3, [r7, #20]
34184336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418433a:	d839      	bhi.n	341843b0 <SystemCoreClockUpdate+0x2a8>
3418433c:	697b      	ldr	r3, [r7, #20]
3418433e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184342:	d021      	beq.n	34184388 <SystemCoreClockUpdate+0x280>
34184344:	697b      	ldr	r3, [r7, #20]
34184346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418434a:	d831      	bhi.n	341843b0 <SystemCoreClockUpdate+0x2a8>
3418434c:	697b      	ldr	r3, [r7, #20]
3418434e:	2b00      	cmp	r3, #0
34184350:	d004      	beq.n	3418435c <SystemCoreClockUpdate+0x254>
34184352:	697b      	ldr	r3, [r7, #20]
34184354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34184358:	d00a      	beq.n	34184370 <SystemCoreClockUpdate+0x268>
      break;
3418435a:	e029      	b.n	341843b0 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3418435c:	4b0d      	ldr	r3, [pc, #52]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
3418435e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184360:	09db      	lsrs	r3, r3, #7
34184362:	f003 0303 	and.w	r3, r3, #3
34184366:	4a0c      	ldr	r2, [pc, #48]	@ (34184398 <SystemCoreClockUpdate+0x290>)
34184368:	fa22 f303 	lsr.w	r3, r2, r3
3418436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418436e:	e020      	b.n	341843b2 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34184370:	4b08      	ldr	r3, [pc, #32]	@ (34184394 <SystemCoreClockUpdate+0x28c>)
34184372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184378:	2b00      	cmp	r3, #0
3418437a:	d102      	bne.n	34184382 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
3418437c:	4b07      	ldr	r3, [pc, #28]	@ (3418439c <SystemCoreClockUpdate+0x294>)
3418437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34184380:	e017      	b.n	341843b2 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34184382:	4b07      	ldr	r3, [pc, #28]	@ (341843a0 <SystemCoreClockUpdate+0x298>)
34184384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34184386:	e014      	b.n	341843b2 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34184388:	4b06      	ldr	r3, [pc, #24]	@ (341843a4 <SystemCoreClockUpdate+0x29c>)
3418438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418438c:	e011      	b.n	341843b2 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3418438e:	4b06      	ldr	r3, [pc, #24]	@ (341843a8 <SystemCoreClockUpdate+0x2a0>)
34184390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34184392:	e00e      	b.n	341843b2 <SystemCoreClockUpdate+0x2aa>
34184394:	56028000 	.word	0x56028000
34184398:	03d09000 	.word	0x03d09000
3418439c:	003d0900 	.word	0x003d0900
341843a0:	00f42400 	.word	0x00f42400
341843a4:	02dc6c00 	.word	0x02dc6c00
341843a8:	00bb8000 	.word	0x00bb8000
341843ac:	4b800000 	.word	0x4b800000
      break;
341843b0:	bf00      	nop
    if (pllbypass == 0U)
341843b2:	693b      	ldr	r3, [r7, #16]
341843b4:	2b00      	cmp	r3, #0
341843b6:	d134      	bne.n	34184422 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
341843b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341843ba:	ee07 3a90 	vmov	s15, r3
341843be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341843c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341843c4:	ee07 3a90 	vmov	s15, r3
341843c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
341843cc:	6a3b      	ldr	r3, [r7, #32]
341843ce:	ee07 3a90 	vmov	s15, r3
341843d2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
341843d6:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 341843ac <SystemCoreClockUpdate+0x2a4>
341843da:	eec6 7a25 	vdiv.f32	s15, s12, s11
341843de:	ee76 7aa7 	vadd.f32	s15, s13, s15
341843e2:	ee67 6a27 	vmul.f32	s13, s14, s15
341843e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341843e8:	ee07 3a90 	vmov	s15, r3
341843ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341843f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
341843f4:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
341843f8:	69fb      	ldr	r3, [r7, #28]
341843fa:	ee07 3a90 	vmov	s15, r3
341843fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34184402:	69bb      	ldr	r3, [r7, #24]
34184404:	ee07 3a90 	vmov	s15, r3
34184408:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418440c:	ee27 7a27 	vmul.f32	s14, s14, s15
34184410:	edd7 6a02 	vldr	s13, [r7, #8]
34184414:	eec6 7a87 	vdiv.f32	s15, s13, s14
34184418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418441c:	ee17 3a90 	vmov	r3, s15
34184420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34184422:	4b0b      	ldr	r3, [pc, #44]	@ (34184450 <SystemCoreClockUpdate+0x348>)
34184424:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34184428:	0c1b      	lsrs	r3, r3, #16
3418442a:	b2db      	uxtb	r3, r3
3418442c:	3301      	adds	r3, #1
3418442e:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34184430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34184432:	687b      	ldr	r3, [r7, #4]
34184434:	fbb2 f3f3 	udiv	r3, r2, r3
34184438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3418443a:	e000      	b.n	3418443e <SystemCoreClockUpdate+0x336>
    break;
3418443c:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3418443e:	4a05      	ldr	r2, [pc, #20]	@ (34184454 <SystemCoreClockUpdate+0x34c>)
34184440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34184442:	6013      	str	r3, [r2, #0]
}
34184444:	bf00      	nop
34184446:	3734      	adds	r7, #52	@ 0x34
34184448:	46bd      	mov	sp, r7
3418444a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418444e:	4770      	bx	lr
34184450:	56028000 	.word	0x56028000
34184454:	341c0064 	.word	0x341c0064

34184458 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34184458:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
3418445c:	b588      	push	{r3, r7, lr}
3418445e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34184460:	f7ff fe52 	bl	34184108 <SystemCoreClockUpdate>

  return SystemCoreClock;
34184464:	4b06      	ldr	r3, [pc, #24]	@ (34184480 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34184466:	681b      	ldr	r3, [r3, #0]
}
34184468:	4618      	mov	r0, r3
3418446a:	46bd      	mov	sp, r7
3418446c:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34184470:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34184474:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34184478:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3418447c:	4774      	bxns	lr
3418447e:	bf00      	nop
34184480:	341c0064 	.word	0x341c0064

34184484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34184484:	b580      	push	{r7, lr}
34184486:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34184488:	2003      	movs	r0, #3
3418448a:	f000 f959 	bl	34184740 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3418448e:	f7ff fe3b 	bl	34184108 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34184492:	200f      	movs	r0, #15
34184494:	f000 f80a 	bl	341844ac <HAL_InitTick>
34184498:	4603      	mov	r3, r0
3418449a:	2b00      	cmp	r3, #0
3418449c:	d001      	beq.n	341844a2 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418449e:	2301      	movs	r3, #1
341844a0:	e002      	b.n	341844a8 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
341844a2:	f7fd ff67 	bl	34182374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
341844a6:	2300      	movs	r3, #0
}
341844a8:	4618      	mov	r0, r3
341844aa:	bd80      	pop	{r7, pc}

341844ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
341844ac:	b580      	push	{r7, lr}
341844ae:	b082      	sub	sp, #8
341844b0:	af00      	add	r7, sp, #0
341844b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
341844b4:	4b15      	ldr	r3, [pc, #84]	@ (3418450c <HAL_InitTick+0x60>)
341844b6:	781b      	ldrb	r3, [r3, #0]
341844b8:	2b00      	cmp	r3, #0
341844ba:	d101      	bne.n	341844c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
341844bc:	2301      	movs	r3, #1
341844be:	e021      	b.n	34184504 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
341844c0:	4b13      	ldr	r3, [pc, #76]	@ (34184510 <HAL_InitTick+0x64>)
341844c2:	681a      	ldr	r2, [r3, #0]
341844c4:	4b11      	ldr	r3, [pc, #68]	@ (3418450c <HAL_InitTick+0x60>)
341844c6:	781b      	ldrb	r3, [r3, #0]
341844c8:	4619      	mov	r1, r3
341844ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
341844ce:	fbb3 f3f1 	udiv	r3, r3, r1
341844d2:	fbb2 f3f3 	udiv	r3, r2, r3
341844d6:	4618      	mov	r0, r3
341844d8:	f000 f9c6 	bl	34184868 <HAL_SYSTICK_Config>
341844dc:	4603      	mov	r3, r0
341844de:	2b00      	cmp	r3, #0
341844e0:	d001      	beq.n	341844e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341844e2:	2301      	movs	r3, #1
341844e4:	e00e      	b.n	34184504 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341844e6:	687b      	ldr	r3, [r7, #4]
341844e8:	2b0f      	cmp	r3, #15
341844ea:	d80a      	bhi.n	34184502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341844ec:	2200      	movs	r2, #0
341844ee:	6879      	ldr	r1, [r7, #4]
341844f0:	f04f 30ff 	mov.w	r0, #4294967295
341844f4:	f000 f944 	bl	34184780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341844f8:	4a06      	ldr	r2, [pc, #24]	@ (34184514 <HAL_InitTick+0x68>)
341844fa:	687b      	ldr	r3, [r7, #4]
341844fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341844fe:	2300      	movs	r3, #0
34184500:	e000      	b.n	34184504 <HAL_InitTick+0x58>
    return HAL_ERROR;
34184502:	2301      	movs	r3, #1
}
34184504:	4618      	mov	r0, r3
34184506:	3708      	adds	r7, #8
34184508:	46bd      	mov	sp, r7
3418450a:	bd80      	pop	{r7, pc}
3418450c:	341c006c 	.word	0x341c006c
34184510:	341c0064 	.word	0x341c0064
34184514:	341c0068 	.word	0x341c0068

34184518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34184518:	b480      	push	{r7}
3418451a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
3418451c:	4b06      	ldr	r3, [pc, #24]	@ (34184538 <HAL_IncTick+0x20>)
3418451e:	781b      	ldrb	r3, [r3, #0]
34184520:	461a      	mov	r2, r3
34184522:	4b06      	ldr	r3, [pc, #24]	@ (3418453c <HAL_IncTick+0x24>)
34184524:	681b      	ldr	r3, [r3, #0]
34184526:	4413      	add	r3, r2
34184528:	4a04      	ldr	r2, [pc, #16]	@ (3418453c <HAL_IncTick+0x24>)
3418452a:	6013      	str	r3, [r2, #0]
}
3418452c:	bf00      	nop
3418452e:	46bd      	mov	sp, r7
34184530:	f85d 7b04 	ldr.w	r7, [sp], #4
34184534:	4770      	bx	lr
34184536:	bf00      	nop
34184538:	341c006c 	.word	0x341c006c
3418453c:	341c21ac 	.word	0x341c21ac

34184540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34184540:	b480      	push	{r7}
34184542:	af00      	add	r7, sp, #0
  return uwTick;
34184544:	4b03      	ldr	r3, [pc, #12]	@ (34184554 <HAL_GetTick+0x14>)
34184546:	681b      	ldr	r3, [r3, #0]
}
34184548:	4618      	mov	r0, r3
3418454a:	46bd      	mov	sp, r7
3418454c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184550:	4770      	bx	lr
34184552:	bf00      	nop
34184554:	341c21ac 	.word	0x341c21ac

34184558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34184558:	b580      	push	{r7, lr}
3418455a:	b084      	sub	sp, #16
3418455c:	af00      	add	r7, sp, #0
3418455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34184560:	f7ff ffee 	bl	34184540 <HAL_GetTick>
34184564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34184566:	687b      	ldr	r3, [r7, #4]
34184568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3418456a:	68fb      	ldr	r3, [r7, #12]
3418456c:	f1b3 3fff 	cmp.w	r3, #4294967295
34184570:	d005      	beq.n	3418457e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34184572:	4b0a      	ldr	r3, [pc, #40]	@ (3418459c <HAL_Delay+0x44>)
34184574:	781b      	ldrb	r3, [r3, #0]
34184576:	461a      	mov	r2, r3
34184578:	68fb      	ldr	r3, [r7, #12]
3418457a:	4413      	add	r3, r2
3418457c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3418457e:	bf00      	nop
34184580:	f7ff ffde 	bl	34184540 <HAL_GetTick>
34184584:	4602      	mov	r2, r0
34184586:	68bb      	ldr	r3, [r7, #8]
34184588:	1ad3      	subs	r3, r2, r3
3418458a:	68fa      	ldr	r2, [r7, #12]
3418458c:	429a      	cmp	r2, r3
3418458e:	d8f7      	bhi.n	34184580 <HAL_Delay+0x28>
  {
  }
}
34184590:	bf00      	nop
34184592:	bf00      	nop
34184594:	3710      	adds	r7, #16
34184596:	46bd      	mov	sp, r7
34184598:	bd80      	pop	{r7, pc}
3418459a:	bf00      	nop
3418459c:	341c006c 	.word	0x341c006c

341845a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341845a0:	b480      	push	{r7}
341845a2:	b085      	sub	sp, #20
341845a4:	af00      	add	r7, sp, #0
341845a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
341845a8:	687b      	ldr	r3, [r7, #4]
341845aa:	f003 0307 	and.w	r3, r3, #7
341845ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341845b0:	4b0c      	ldr	r3, [pc, #48]	@ (341845e4 <__NVIC_SetPriorityGrouping+0x44>)
341845b2:	68db      	ldr	r3, [r3, #12]
341845b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341845b6:	68ba      	ldr	r2, [r7, #8]
341845b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
341845bc:	4013      	ands	r3, r2
341845be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341845c0:	68fb      	ldr	r3, [r7, #12]
341845c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
341845c4:	68bb      	ldr	r3, [r7, #8]
341845c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
341845c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341845cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341845d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
341845d2:	4a04      	ldr	r2, [pc, #16]	@ (341845e4 <__NVIC_SetPriorityGrouping+0x44>)
341845d4:	68bb      	ldr	r3, [r7, #8]
341845d6:	60d3      	str	r3, [r2, #12]
}
341845d8:	bf00      	nop
341845da:	3714      	adds	r7, #20
341845dc:	46bd      	mov	sp, r7
341845de:	f85d 7b04 	ldr.w	r7, [sp], #4
341845e2:	4770      	bx	lr
341845e4:	e000ed00 	.word	0xe000ed00

341845e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
341845e8:	b480      	push	{r7}
341845ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
341845ec:	4b04      	ldr	r3, [pc, #16]	@ (34184600 <__NVIC_GetPriorityGrouping+0x18>)
341845ee:	68db      	ldr	r3, [r3, #12]
341845f0:	0a1b      	lsrs	r3, r3, #8
341845f2:	f003 0307 	and.w	r3, r3, #7
}
341845f6:	4618      	mov	r0, r3
341845f8:	46bd      	mov	sp, r7
341845fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341845fe:	4770      	bx	lr
34184600:	e000ed00 	.word	0xe000ed00

34184604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34184604:	b480      	push	{r7}
34184606:	b083      	sub	sp, #12
34184608:	af00      	add	r7, sp, #0
3418460a:	4603      	mov	r3, r0
3418460c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3418460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184612:	2b00      	cmp	r3, #0
34184614:	db0b      	blt.n	3418462e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34184616:	88fb      	ldrh	r3, [r7, #6]
34184618:	f003 021f 	and.w	r2, r3, #31
3418461c:	4907      	ldr	r1, [pc, #28]	@ (3418463c <__NVIC_EnableIRQ+0x38>)
3418461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184622:	095b      	lsrs	r3, r3, #5
34184624:	2001      	movs	r0, #1
34184626:	fa00 f202 	lsl.w	r2, r0, r2
3418462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
3418462e:	bf00      	nop
34184630:	370c      	adds	r7, #12
34184632:	46bd      	mov	sp, r7
34184634:	f85d 7b04 	ldr.w	r7, [sp], #4
34184638:	4770      	bx	lr
3418463a:	bf00      	nop
3418463c:	e000e100 	.word	0xe000e100

34184640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34184640:	b480      	push	{r7}
34184642:	b083      	sub	sp, #12
34184644:	af00      	add	r7, sp, #0
34184646:	4603      	mov	r3, r0
34184648:	6039      	str	r1, [r7, #0]
3418464a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3418464c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184650:	2b00      	cmp	r3, #0
34184652:	db0a      	blt.n	3418466a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34184654:	683b      	ldr	r3, [r7, #0]
34184656:	b2da      	uxtb	r2, r3
34184658:	490c      	ldr	r1, [pc, #48]	@ (3418468c <__NVIC_SetPriority+0x4c>)
3418465a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418465e:	0112      	lsls	r2, r2, #4
34184660:	b2d2      	uxtb	r2, r2
34184662:	440b      	add	r3, r1
34184664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34184668:	e00a      	b.n	34184680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418466a:	683b      	ldr	r3, [r7, #0]
3418466c:	b2da      	uxtb	r2, r3
3418466e:	4908      	ldr	r1, [pc, #32]	@ (34184690 <__NVIC_SetPriority+0x50>)
34184670:	88fb      	ldrh	r3, [r7, #6]
34184672:	f003 030f 	and.w	r3, r3, #15
34184676:	3b04      	subs	r3, #4
34184678:	0112      	lsls	r2, r2, #4
3418467a:	b2d2      	uxtb	r2, r2
3418467c:	440b      	add	r3, r1
3418467e:	761a      	strb	r2, [r3, #24]
}
34184680:	bf00      	nop
34184682:	370c      	adds	r7, #12
34184684:	46bd      	mov	sp, r7
34184686:	f85d 7b04 	ldr.w	r7, [sp], #4
3418468a:	4770      	bx	lr
3418468c:	e000e100 	.word	0xe000e100
34184690:	e000ed00 	.word	0xe000ed00

34184694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34184694:	b480      	push	{r7}
34184696:	b089      	sub	sp, #36	@ 0x24
34184698:	af00      	add	r7, sp, #0
3418469a:	60f8      	str	r0, [r7, #12]
3418469c:	60b9      	str	r1, [r7, #8]
3418469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
341846a0:	68fb      	ldr	r3, [r7, #12]
341846a2:	f003 0307 	and.w	r3, r3, #7
341846a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
341846a8:	69fb      	ldr	r3, [r7, #28]
341846aa:	f1c3 0307 	rsb	r3, r3, #7
341846ae:	2b04      	cmp	r3, #4
341846b0:	bf28      	it	cs
341846b2:	2304      	movcs	r3, #4
341846b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
341846b6:	69fb      	ldr	r3, [r7, #28]
341846b8:	3304      	adds	r3, #4
341846ba:	2b06      	cmp	r3, #6
341846bc:	d902      	bls.n	341846c4 <NVIC_EncodePriority+0x30>
341846be:	69fb      	ldr	r3, [r7, #28]
341846c0:	3b03      	subs	r3, #3
341846c2:	e000      	b.n	341846c6 <NVIC_EncodePriority+0x32>
341846c4:	2300      	movs	r3, #0
341846c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341846c8:	f04f 32ff 	mov.w	r2, #4294967295
341846cc:	69bb      	ldr	r3, [r7, #24]
341846ce:	fa02 f303 	lsl.w	r3, r2, r3
341846d2:	43da      	mvns	r2, r3
341846d4:	68bb      	ldr	r3, [r7, #8]
341846d6:	401a      	ands	r2, r3
341846d8:	697b      	ldr	r3, [r7, #20]
341846da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
341846dc:	f04f 31ff 	mov.w	r1, #4294967295
341846e0:	697b      	ldr	r3, [r7, #20]
341846e2:	fa01 f303 	lsl.w	r3, r1, r3
341846e6:	43d9      	mvns	r1, r3
341846e8:	687b      	ldr	r3, [r7, #4]
341846ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341846ec:	4313      	orrs	r3, r2
         );
}
341846ee:	4618      	mov	r0, r3
341846f0:	3724      	adds	r7, #36	@ 0x24
341846f2:	46bd      	mov	sp, r7
341846f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341846f8:	4770      	bx	lr
	...

341846fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
341846fc:	b580      	push	{r7, lr}
341846fe:	b082      	sub	sp, #8
34184700:	af00      	add	r7, sp, #0
34184702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34184704:	687b      	ldr	r3, [r7, #4]
34184706:	3b01      	subs	r3, #1
34184708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418470c:	d301      	bcc.n	34184712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
3418470e:	2301      	movs	r3, #1
34184710:	e00f      	b.n	34184732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34184712:	4a0a      	ldr	r2, [pc, #40]	@ (3418473c <SysTick_Config+0x40>)
34184714:	687b      	ldr	r3, [r7, #4]
34184716:	3b01      	subs	r3, #1
34184718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
3418471a:	210f      	movs	r1, #15
3418471c:	f04f 30ff 	mov.w	r0, #4294967295
34184720:	f7ff ff8e 	bl	34184640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34184724:	4b05      	ldr	r3, [pc, #20]	@ (3418473c <SysTick_Config+0x40>)
34184726:	2200      	movs	r2, #0
34184728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3418472a:	4b04      	ldr	r3, [pc, #16]	@ (3418473c <SysTick_Config+0x40>)
3418472c:	2207      	movs	r2, #7
3418472e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34184730:	2300      	movs	r3, #0
}
34184732:	4618      	mov	r0, r3
34184734:	3708      	adds	r7, #8
34184736:	46bd      	mov	sp, r7
34184738:	bd80      	pop	{r7, pc}
3418473a:	bf00      	nop
3418473c:	e000e010 	.word	0xe000e010

34184740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34184740:	b580      	push	{r7, lr}
34184742:	b082      	sub	sp, #8
34184744:	af00      	add	r7, sp, #0
34184746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34184748:	687b      	ldr	r3, [r7, #4]
3418474a:	2b07      	cmp	r3, #7
3418474c:	d00f      	beq.n	3418476e <HAL_NVIC_SetPriorityGrouping+0x2e>
3418474e:	687b      	ldr	r3, [r7, #4]
34184750:	2b06      	cmp	r3, #6
34184752:	d00c      	beq.n	3418476e <HAL_NVIC_SetPriorityGrouping+0x2e>
34184754:	687b      	ldr	r3, [r7, #4]
34184756:	2b05      	cmp	r3, #5
34184758:	d009      	beq.n	3418476e <HAL_NVIC_SetPriorityGrouping+0x2e>
3418475a:	687b      	ldr	r3, [r7, #4]
3418475c:	2b04      	cmp	r3, #4
3418475e:	d006      	beq.n	3418476e <HAL_NVIC_SetPriorityGrouping+0x2e>
34184760:	687b      	ldr	r3, [r7, #4]
34184762:	2b03      	cmp	r3, #3
34184764:	d003      	beq.n	3418476e <HAL_NVIC_SetPriorityGrouping+0x2e>
34184766:	21e6      	movs	r1, #230	@ 0xe6
34184768:	4804      	ldr	r0, [pc, #16]	@ (3418477c <HAL_NVIC_SetPriorityGrouping+0x3c>)
3418476a:	f7fd fd7f 	bl	3418226c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
3418476e:	6878      	ldr	r0, [r7, #4]
34184770:	f7ff ff16 	bl	341845a0 <__NVIC_SetPriorityGrouping>
}
34184774:	bf00      	nop
34184776:	3708      	adds	r7, #8
34184778:	46bd      	mov	sp, r7
3418477a:	bd80      	pop	{r7, pc}
3418477c:	341a4eb4 	.word	0x341a4eb4

34184780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34184780:	b580      	push	{r7, lr}
34184782:	b086      	sub	sp, #24
34184784:	af00      	add	r7, sp, #0
34184786:	4603      	mov	r3, r0
34184788:	60b9      	str	r1, [r7, #8]
3418478a:	607a      	str	r2, [r7, #4]
3418478c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3418478e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34184792:	f113 0f0c 	cmn.w	r3, #12
34184796:	db04      	blt.n	341847a2 <HAL_NVIC_SetPriority+0x22>
34184798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3418479c:	f113 0f04 	cmn.w	r3, #4
341847a0:	d103      	bne.n	341847aa <HAL_NVIC_SetPriority+0x2a>
341847a2:	21ff      	movs	r1, #255	@ 0xff
341847a4:	4822      	ldr	r0, [pc, #136]	@ (34184830 <HAL_NVIC_SetPriority+0xb0>)
341847a6:	f7fd fd61 	bl	3418226c <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
341847aa:	f7ff ff1d 	bl	341845e8 <__NVIC_GetPriorityGrouping>
341847ae:	4603      	mov	r3, r0
341847b0:	f003 0307 	and.w	r3, r3, #7
341847b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
341847b6:	697b      	ldr	r3, [r7, #20]
341847b8:	2b02      	cmp	r3, #2
341847ba:	d806      	bhi.n	341847ca <HAL_NVIC_SetPriority+0x4a>
341847bc:	687b      	ldr	r3, [r7, #4]
341847be:	2b00      	cmp	r3, #0
341847c0:	bf0c      	ite	eq
341847c2:	2301      	moveq	r3, #1
341847c4:	2300      	movne	r3, #0
341847c6:	b2db      	uxtb	r3, r3
341847c8:	e00a      	b.n	341847e0 <HAL_NVIC_SetPriority+0x60>
341847ca:	697b      	ldr	r3, [r7, #20]
341847cc:	3b03      	subs	r3, #3
341847ce:	2201      	movs	r2, #1
341847d0:	fa02 f303 	lsl.w	r3, r2, r3
341847d4:	687a      	ldr	r2, [r7, #4]
341847d6:	429a      	cmp	r2, r3
341847d8:	bf34      	ite	cc
341847da:	2301      	movcc	r3, #1
341847dc:	2300      	movcs	r3, #0
341847de:	b2db      	uxtb	r3, r3
341847e0:	2b00      	cmp	r3, #0
341847e2:	d104      	bne.n	341847ee <HAL_NVIC_SetPriority+0x6e>
341847e4:	f44f 7181 	mov.w	r1, #258	@ 0x102
341847e8:	4811      	ldr	r0, [pc, #68]	@ (34184830 <HAL_NVIC_SetPriority+0xb0>)
341847ea:	f7fd fd3f 	bl	3418226c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
341847ee:	68bb      	ldr	r3, [r7, #8]
341847f0:	2b0f      	cmp	r3, #15
341847f2:	d808      	bhi.n	34184806 <HAL_NVIC_SetPriority+0x86>
341847f4:	697b      	ldr	r3, [r7, #20]
341847f6:	f1c3 0307 	rsb	r3, r3, #7
341847fa:	2201      	movs	r2, #1
341847fc:	fa02 f303 	lsl.w	r3, r2, r3
34184800:	68ba      	ldr	r2, [r7, #8]
34184802:	429a      	cmp	r2, r3
34184804:	d304      	bcc.n	34184810 <HAL_NVIC_SetPriority+0x90>
34184806:	f240 1103 	movw	r1, #259	@ 0x103
3418480a:	4809      	ldr	r0, [pc, #36]	@ (34184830 <HAL_NVIC_SetPriority+0xb0>)
3418480c:	f7fd fd2e 	bl	3418226c <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34184810:	687a      	ldr	r2, [r7, #4]
34184812:	68b9      	ldr	r1, [r7, #8]
34184814:	6978      	ldr	r0, [r7, #20]
34184816:	f7ff ff3d 	bl	34184694 <NVIC_EncodePriority>
3418481a:	4602      	mov	r2, r0
3418481c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34184820:	4611      	mov	r1, r2
34184822:	4618      	mov	r0, r3
34184824:	f7ff ff0c 	bl	34184640 <__NVIC_SetPriority>
}
34184828:	bf00      	nop
3418482a:	3718      	adds	r7, #24
3418482c:	46bd      	mov	sp, r7
3418482e:	bd80      	pop	{r7, pc}
34184830:	341a4eb4 	.word	0x341a4eb4

34184834 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34184834:	b580      	push	{r7, lr}
34184836:	b082      	sub	sp, #8
34184838:	af00      	add	r7, sp, #0
3418483a:	4603      	mov	r3, r0
3418483c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3418483e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184842:	2b00      	cmp	r3, #0
34184844:	da04      	bge.n	34184850 <HAL_NVIC_EnableIRQ+0x1c>
34184846:	f240 1115 	movw	r1, #277	@ 0x115
3418484a:	4806      	ldr	r0, [pc, #24]	@ (34184864 <HAL_NVIC_EnableIRQ+0x30>)
3418484c:	f7fd fd0e 	bl	3418226c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34184850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184854:	4618      	mov	r0, r3
34184856:	f7ff fed5 	bl	34184604 <__NVIC_EnableIRQ>
}
3418485a:	bf00      	nop
3418485c:	3708      	adds	r7, #8
3418485e:	46bd      	mov	sp, r7
34184860:	bd80      	pop	{r7, pc}
34184862:	bf00      	nop
34184864:	341a4eb4 	.word	0x341a4eb4

34184868 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34184868:	b580      	push	{r7, lr}
3418486a:	b082      	sub	sp, #8
3418486c:	af00      	add	r7, sp, #0
3418486e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34184870:	6878      	ldr	r0, [r7, #4]
34184872:	f7ff ff43 	bl	341846fc <SysTick_Config>
34184876:	4603      	mov	r3, r0
}
34184878:	4618      	mov	r0, r3
3418487a:	3708      	adds	r7, #8
3418487c:	46bd      	mov	sp, r7
3418487e:	bd80      	pop	{r7, pc}

34184880 <HAL_DCMIPP_Init>:
  * @brief  Initialize the selected HAL DCMIPP handle and associate a DCMIPP peripheral instance.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_Init(DCMIPP_HandleTypeDef *hdcmipp)
{
34184880:	b580      	push	{r7, lr}
34184882:	b084      	sub	sp, #16
34184884:	af00      	add	r7, sp, #0
34184886:	6078      	str	r0, [r7, #4]
  uint32_t pipe_index;

  /* Check pointer validity */
  if (hdcmipp == NULL)
34184888:	687b      	ldr	r3, [r7, #4]
3418488a:	2b00      	cmp	r3, #0
3418488c:	d101      	bne.n	34184892 <HAL_DCMIPP_Init+0x12>
  {
    return HAL_ERROR;
3418488e:	2301      	movs	r3, #1
34184890:	e02f      	b.n	341848f2 <HAL_DCMIPP_Init+0x72>
  }

  /* Check function parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34184892:	687b      	ldr	r3, [r7, #4]
34184894:	681b      	ldr	r3, [r3, #0]
34184896:	4a19      	ldr	r2, [pc, #100]	@ (341848fc <HAL_DCMIPP_Init+0x7c>)
34184898:	4293      	cmp	r3, r2
3418489a:	d009      	beq.n	341848b0 <HAL_DCMIPP_Init+0x30>
3418489c:	687b      	ldr	r3, [r7, #4]
3418489e:	681b      	ldr	r3, [r3, #0]
341848a0:	4a17      	ldr	r2, [pc, #92]	@ (34184900 <HAL_DCMIPP_Init+0x80>)
341848a2:	4293      	cmp	r3, r2
341848a4:	d004      	beq.n	341848b0 <HAL_DCMIPP_Init+0x30>
341848a6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
341848aa:	4816      	ldr	r0, [pc, #88]	@ (34184904 <HAL_DCMIPP_Init+0x84>)
341848ac:	f7fd fcde 	bl	3418226c <assert_failed>

  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
341848b0:	687b      	ldr	r3, [r7, #4]
341848b2:	791b      	ldrb	r3, [r3, #4]
341848b4:	b2db      	uxtb	r3, r3
341848b6:	2b00      	cmp	r3, #0
341848b8:	d102      	bne.n	341848c0 <HAL_DCMIPP_Init+0x40>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmipp->MspInitCallback(hdcmipp);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMIPP_MspInit(hdcmipp);
341848ba:	6878      	ldr	r0, [r7, #4]
341848bc:	f7fd fd62 	bl	34182384 <HAL_DCMIPP_MspInit>
#endif /* (USE_HAL_DCMIPP_REGISTER_CALLBACKS) */
  }

  /* Change the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
341848c0:	687b      	ldr	r3, [r7, #4]
341848c2:	2203      	movs	r2, #3
341848c4:	711a      	strb	r2, [r3, #4]

  /* Reset DCMIPP Pipe state */
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
341848c6:	2300      	movs	r3, #0
341848c8:	60fb      	str	r3, [r7, #12]
341848ca:	e008      	b.n	341848de <HAL_DCMIPP_Init+0x5e>
  {
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
341848cc:	687a      	ldr	r2, [r7, #4]
341848ce:	68fb      	ldr	r3, [r7, #12]
341848d0:	4413      	add	r3, r2
341848d2:	3305      	adds	r3, #5
341848d4:	2200      	movs	r2, #0
341848d6:	701a      	strb	r2, [r3, #0]
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
341848d8:	68fb      	ldr	r3, [r7, #12]
341848da:	3301      	adds	r3, #1
341848dc:	60fb      	str	r3, [r7, #12]
341848de:	68fb      	ldr	r3, [r7, #12]
341848e0:	2b02      	cmp	r3, #2
341848e2:	d9f3      	bls.n	341848cc <HAL_DCMIPP_Init+0x4c>
  }

  /* Update error code */
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
341848e4:	687b      	ldr	r3, [r7, #4]
341848e6:	2200      	movs	r2, #0
341848e8:	609a      	str	r2, [r3, #8]

  /* Update the DCMIPP state*/
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
341848ea:	687b      	ldr	r3, [r7, #4]
341848ec:	2201      	movs	r2, #1
341848ee:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
341848f0:	2300      	movs	r3, #0
}
341848f2:	4618      	mov	r0, r3
341848f4:	3710      	adds	r7, #16
341848f6:	46bd      	mov	sp, r7
341848f8:	bd80      	pop	{r7, pc}
341848fa:	bf00      	nop
341848fc:	58002000 	.word	0x58002000
34184900:	48002000 	.word	0x48002000
34184904:	341a4eec 	.word	0x341a4eec

34184908 <HAL_DCMIPP_CSI_SetConfig>:
  *                     configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetConfig(const DCMIPP_HandleTypeDef *hdcmipp,
                                           const DCMIPP_CSI_ConfTypeDef *pCSI_Config)
{
34184908:	b580      	push	{r7, lr}
3418490a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
3418490e:	af00      	add	r7, sp, #0
34184910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184914:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
34184918:	6018      	str	r0, [r3, #0]
3418491a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418491e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184922:	6019      	str	r1, [r3, #0]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34184924:	4bc1      	ldr	r3, [pc, #772]	@ (34184c2c <HAL_DCMIPP_CSI_SetConfig+0x324>)
34184926:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
3418492a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
3418492e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34184932:	4abf      	ldr	r2, [pc, #764]	@ (34184c30 <HAL_DCMIPP_CSI_SetConfig+0x328>)
34184934:	4618      	mov	r0, r3
34184936:	4611      	mov	r1, r2
34184938:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
3418493c:	461a      	mov	r2, r3
3418493e:	f01e fd2e 	bl	341a339e <memcpy>
    { 0x48U, 451U },  /* HAL_CSI_BT_2450 */
    { 0x49U, 460U },  /* HAL_CSI_BT_2500 */
  };

  /* Check parameters */
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
34184942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184946:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
3418494a:	681b      	ldr	r3, [r3, #0]
3418494c:	2b00      	cmp	r3, #0
3418494e:	d006      	beq.n	3418495e <HAL_DCMIPP_CSI_SetConfig+0x56>
34184950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184954:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184958:	681b      	ldr	r3, [r3, #0]
3418495a:	2b00      	cmp	r3, #0
3418495c:	d101      	bne.n	34184962 <HAL_DCMIPP_CSI_SetConfig+0x5a>
  {
    return HAL_ERROR;
3418495e:	2301      	movs	r3, #1
34184960:	e186      	b.n	34184c70 <HAL_DCMIPP_CSI_SetConfig+0x368>
  }

  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34184962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184966:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
3418496a:	681b      	ldr	r3, [r3, #0]
3418496c:	681b      	ldr	r3, [r3, #0]
3418496e:	4ab1      	ldr	r2, [pc, #708]	@ (34184c34 <HAL_DCMIPP_CSI_SetConfig+0x32c>)
34184970:	4293      	cmp	r3, r2
34184972:	d00d      	beq.n	34184990 <HAL_DCMIPP_CSI_SetConfig+0x88>
34184974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184978:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
3418497c:	681b      	ldr	r3, [r3, #0]
3418497e:	681b      	ldr	r3, [r3, #0]
34184980:	4aad      	ldr	r2, [pc, #692]	@ (34184c38 <HAL_DCMIPP_CSI_SetConfig+0x330>)
34184982:	4293      	cmp	r3, r2
34184984:	d004      	beq.n	34184990 <HAL_DCMIPP_CSI_SetConfig+0x88>
34184986:	f240 218b 	movw	r1, #651	@ 0x28b
3418498a:	48ac      	ldr	r0, [pc, #688]	@ (34184c3c <HAL_DCMIPP_CSI_SetConfig+0x334>)
3418498c:	f7fd fc6e 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
34184990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184994:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184998:	681b      	ldr	r3, [r3, #0]
3418499a:	681b      	ldr	r3, [r3, #0]
3418499c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341849a0:	d00d      	beq.n	341849be <HAL_DCMIPP_CSI_SetConfig+0xb6>
341849a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849a6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849aa:	681b      	ldr	r3, [r3, #0]
341849ac:	681b      	ldr	r3, [r3, #0]
341849ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341849b2:	d004      	beq.n	341849be <HAL_DCMIPP_CSI_SetConfig+0xb6>
341849b4:	f44f 7123 	mov.w	r1, #652	@ 0x28c
341849b8:	48a0      	ldr	r0, [pc, #640]	@ (34184c3c <HAL_DCMIPP_CSI_SetConfig+0x334>)
341849ba:	f7fd fc57 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
341849be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849c2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849c6:	681b      	ldr	r3, [r3, #0]
341849c8:	685b      	ldr	r3, [r3, #4]
341849ca:	2b01      	cmp	r3, #1
341849cc:	d00c      	beq.n	341849e8 <HAL_DCMIPP_CSI_SetConfig+0xe0>
341849ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849d2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849d6:	681b      	ldr	r3, [r3, #0]
341849d8:	685b      	ldr	r3, [r3, #4]
341849da:	2b02      	cmp	r3, #2
341849dc:	d004      	beq.n	341849e8 <HAL_DCMIPP_CSI_SetConfig+0xe0>
341849de:	f240 218d 	movw	r1, #653	@ 0x28d
341849e2:	4896      	ldr	r0, [pc, #600]	@ (34184c3c <HAL_DCMIPP_CSI_SetConfig+0x334>)
341849e4:	f7fd fc42 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));
341849e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
341849ec:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
341849f0:	681b      	ldr	r3, [r3, #0]
341849f2:	689b      	ldr	r3, [r3, #8]
341849f4:	2b3e      	cmp	r3, #62	@ 0x3e
341849f6:	d904      	bls.n	34184a02 <HAL_DCMIPP_CSI_SetConfig+0xfa>
341849f8:	f240 218e 	movw	r1, #654	@ 0x28e
341849fc:	488f      	ldr	r0, [pc, #572]	@ (34184c3c <HAL_DCMIPP_CSI_SetConfig+0x334>)
341849fe:	f7fd fc35 	bl	3418226c <assert_failed>

  /* Ensure the CSI is disabled */
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
34184a02:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a06:	681b      	ldr	r3, [r3, #0]
34184a08:	f023 0201 	bic.w	r2, r3, #1
34184a0c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a10:	601a      	str	r2, [r3, #0]

  /* Configure the Lane Merger */
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34184a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a16:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a1a:	681b      	ldr	r3, [r3, #0]
34184a1c:	685b      	ldr	r3, [r3, #4]
34184a1e:	2b01      	cmp	r3, #1
34184a20:	d10b      	bne.n	34184a3a <HAL_DCMIPP_CSI_SetConfig+0x132>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
34184a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a26:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a2a:	681b      	ldr	r3, [r3, #0]
34184a2c:	681b      	ldr	r3, [r3, #0]
34184a2e:	f443 1204 	orr.w	r2, r3, #2162688	@ 0x210000
34184a32:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a36:	671a      	str	r2, [r3, #112]	@ 0x70
34184a38:	e015      	b.n	34184a66 <HAL_DCMIPP_CSI_SetConfig+0x15e>
              (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
34184a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a3e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a42:	681b      	ldr	r3, [r3, #0]
34184a44:	685b      	ldr	r3, [r3, #4]
34184a46:	2b02      	cmp	r3, #2
34184a48:	d10b      	bne.n	34184a62 <HAL_DCMIPP_CSI_SetConfig+0x15a>
  {
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
34184a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a4e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a52:	681b      	ldr	r3, [r3, #0]
34184a54:	681b      	ldr	r3, [r3, #0]
34184a56:	f443 1290 	orr.w	r2, r3, #1179648	@ 0x120000
34184a5a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a5e:	671a      	str	r2, [r3, #112]	@ 0x70
34184a60:	e001      	b.n	34184a66 <HAL_DCMIPP_CSI_SetConfig+0x15e>
              (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL1MAP_Pos));
  }
  else
  {
    return HAL_ERROR;
34184a62:	2301      	movs	r3, #1
34184a64:	e104      	b.n	34184c70 <HAL_DCMIPP_CSI_SetConfig+0x368>
  }

  /* Enable the CSI */
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
34184a66:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a6a:	681b      	ldr	r3, [r3, #0]
34184a6c:	f043 0201 	orr.w	r2, r3, #1
34184a70:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a74:	601a      	str	r2, [r3, #0]

  /* Enable some interrupts, not related to virtual channels - all error cases */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
34184a76:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184a7e:	f043 43b0 	orr.w	r3, r3, #1476395008	@ 0x58000000
34184a82:	f443 1304 	orr.w	r3, r3, #2162688	@ 0x210000
34184a86:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184a8a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                             DCMIPP_CSI_IT_SPKTERR | DCMIPP_CSI_IT_IDERR | \
                             DCMIPP_CSI_IT_SPKT);

  /* Enable D-PHY Interrupts */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34184a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184a92:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184a96:	681b      	ldr	r3, [r3, #0]
34184a98:	681b      	ldr	r3, [r3, #0]
34184a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184a9e:	d11d      	bne.n	34184adc <HAL_DCMIPP_CSI_SetConfig+0x1d4>
  {
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34184aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184aa4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184aa8:	681b      	ldr	r3, [r3, #0]
34184aaa:	685b      	ldr	r3, [r3, #4]
34184aac:	2b01      	cmp	r3, #1
34184aae:	d10a      	bne.n	34184ac6 <HAL_DCMIPP_CSI_SetConfig+0x1be>
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
34184ab0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34184ab8:	f043 021f 	orr.w	r2, r3, #31
34184abc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
34184ac4:	e016      	b.n	34184af4 <HAL_DCMIPP_CSI_SetConfig+0x1ec>
                                      DCMIPP_CSI_IT_EESCDL0 | DCMIPP_CSI_IT_ESYNCESCDL0 |
                                      DCMIPP_CSI_IT_ECTRLDL0);
    }
    else
    {
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34184ac6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34184ace:	f443 52f8 	orr.w	r2, r3, #7936	@ 0x1f00
34184ad2:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
34184ada:	e00b      	b.n	34184af4 <HAL_DCMIPP_CSI_SetConfig+0x1ec>
                                      DCMIPP_CSI_IT_ECTRLDL1);
    }
  }
  else
  {
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34184adc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34184ae4:	f443 53f8 	orr.w	r3, r3, #7936	@ 0x1f00
34184ae8:	f043 031f 	orr.w	r3, r3, #31
34184aec:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184af0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                    DCMIPP_CSI_IT_ECTRLDL0);
  }

  /* Start D-PHY Configuration */
  /* Stop the D-PHY */
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34184af4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184afc:	681b      	ldr	r3, [r3, #0]
34184afe:	f023 0302 	bic.w	r3, r3, #2
34184b02:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184b06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184b0a:	6013      	str	r3, [r2, #0]

  /* Get the D-PHY enabledb but with all lanes disabled */
  CLEAR_REG(csi_instance-> PCR);
34184b0c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184b10:	2200      	movs	r2, #0
34184b12:	605a      	str	r2, [r3, #4]

  /* Set the testclk (clock enable) on during 15ns */
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
34184b14:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184b1c:	691b      	ldr	r3, [r3, #16]
34184b1e:	f043 0301 	orr.w	r3, r3, #1
34184b22:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184b26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184b2a:	6113      	str	r3, [r2, #16]

  HAL_Delay(1);
34184b2c:	2001      	movs	r0, #1
34184b2e:	f7ff fd13 	bl	34184558 <HAL_Delay>

  CLEAR_REG(csi_instance->PTCR0);
34184b32:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184b3a:	461a      	mov	r2, r3
34184b3c:	2300      	movs	r3, #0
34184b3e:	6113      	str	r3, [r2, #16]

  /* Set hsfreqrange */
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
34184b40:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184b48:	689b      	ldr	r3, [r3, #8]
34184b4a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
34184b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184b52:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184b56:	681b      	ldr	r3, [r3, #0]
34184b58:	6899      	ldr	r1, [r3, #8]
34184b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184b5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34184b62:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
34184b66:	021b      	lsls	r3, r3, #8
34184b68:	4313      	orrs	r3, r2
34184b6a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34184b6e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184b76:	6093      	str	r3, [r2, #8]
             (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos));

  /* set reg @08 deskew_polarity_rw 1'b1 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
34184b78:	2338      	movs	r3, #56	@ 0x38
34184b7a:	2208      	movs	r2, #8
34184b7c:	2100      	movs	r1, #0
34184b7e:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34184b82:	f003 fa9f 	bl	341880c4 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xE4 counter_for_des_en_config_if_rx 0x10 + DLL prog EN */
  /* This is because 13<= cfgclkfreqrange[5:0]<=38 */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
34184b86:	2311      	movs	r3, #17
34184b88:	22e4      	movs	r2, #228	@ 0xe4
34184b8a:	2100      	movs	r1, #0
34184b8c:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34184b90:	f003 fa98 	bl	341880c4 <DCMIPP_CSI_WritePHYReg>

  /* set reg @0xe3 & reg @0xe2 value DLL target oscilation freq */
  /* Based on the table page 77, osc_freq_target */
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
34184b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184b98:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184b9c:	681b      	ldr	r3, [r3, #0]
34184b9e:	689b      	ldr	r3, [r3, #8]
34184ba0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
34184ba4:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
34184ba8:	00db      	lsls	r3, r3, #3
34184baa:	4413      	add	r3, r2
34184bac:	685b      	ldr	r3, [r3, #4]
34184bae:	0a1b      	lsrs	r3, r3, #8
34184bb0:	22e3      	movs	r2, #227	@ 0xe3
34184bb2:	2100      	movs	r1, #0
34184bb4:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34184bb8:	f003 fa84 	bl	341880c4 <DCMIPP_CSI_WritePHYReg>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
34184bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184bc0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184bc4:	681b      	ldr	r3, [r3, #0]
34184bc6:	689b      	ldr	r3, [r3, #8]
34184bc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
34184bcc:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
34184bd0:	00db      	lsls	r3, r3, #3
34184bd2:	4413      	add	r3, r2
34184bd4:	685b      	ldr	r3, [r3, #4]
34184bd6:	b2db      	uxtb	r3, r3
34184bd8:	22e3      	movs	r2, #227	@ 0xe3
34184bda:	2100      	movs	r1, #0
34184bdc:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
34184be0:	f003 fa70 	bl	341880c4 <DCMIPP_CSI_WritePHYReg>

  /* set basedir_0 to RX DLD 0 RX, 1 TX. Synopsys 1 RX 0 TX  + freq range */
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
34184be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184be8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184bec:	681b      	ldr	r3, [r3, #0]
34184bee:	689a      	ldr	r2, [r3, #8]
34184bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
34184bf8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
34184bfc:	021b      	lsls	r3, r3, #8
34184bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34184c02:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34184c06:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184c0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184c0e:	6093      	str	r3, [r2, #8]
            (SNPS_Freqs[pCSI_Config->PHYBitrate].hsfreqrange << CSI_PFCR_HSFR_Pos) | CSI_PFCR_DLD);

  /* Enable the D-PHY_RX lane(s) etc */
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34184c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
34184c14:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
34184c18:	681b      	ldr	r3, [r3, #0]
34184c1a:	681b      	ldr	r3, [r3, #0]
34184c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184c20:	d10e      	bne.n	34184c40 <HAL_DCMIPP_CSI_SetConfig+0x338>
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34184c22:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184c26:	2207      	movs	r2, #7
34184c28:	605a      	str	r2, [r3, #4]
34184c2a:	e00d      	b.n	34184c48 <HAL_DCMIPP_CSI_SetConfig+0x340>
34184c2c:	58006000 	.word	0x58006000
34184c30:	341a4f24 	.word	0x341a4f24
34184c34:	58002000 	.word	0x58002000
34184c38:	48002000 	.word	0x48002000
34184c3c:	341a4eec 	.word	0x341a4eec
  }
  else
  {
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34184c40:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184c44:	220f      	movs	r2, #15
34184c46:	605a      	str	r2, [r3, #4]
  }


  /* Enable PHY, out of reset */
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34184c48:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184c50:	681b      	ldr	r3, [r3, #0]
34184c52:	f043 0302 	orr.w	r3, r3, #2
34184c56:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
34184c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184c5e:	6013      	str	r3, [r2, #0]

  /* Remove the force */
  CLEAR_REG(csi_instance->PMCR);
34184c60:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
34184c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184c68:	461a      	mov	r2, r3
34184c6a:	2300      	movs	r3, #0
34184c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
34184c6e:	2300      	movs	r3, #0

}
34184c70:	4618      	mov	r0, r3
34184c72:	f507 7702 	add.w	r7, r7, #520	@ 0x208
34184c76:	46bd      	mov	sp, r7
34184c78:	bd80      	pop	{r7, pc}
34184c7a:	bf00      	nop

34184c7c <HAL_DCMIPP_CSI_PIPE_SetConfig>:
  *                         the CSI Pipe configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                const DCMIPP_CSI_PIPE_ConfTypeDef *pCSI_PipeConfig)
{
34184c7c:	b580      	push	{r7, lr}
34184c7e:	b086      	sub	sp, #24
34184c80:	af00      	add	r7, sp, #0
34184c82:	60f8      	str	r0, [r7, #12]
34184c84:	60b9      	str	r1, [r7, #8]
34184c86:	607a      	str	r2, [r7, #4]
  uint32_t pxfscr_reg = 0;
34184c88:	2300      	movs	r3, #0
34184c8a:	617b      	str	r3, [r7, #20]
  HAL_DCMIPP_StateTypeDef state;

  /* Check the DCMIPP peripheral handle parameter and pCSI_Config parameter */
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
34184c8c:	68fb      	ldr	r3, [r7, #12]
34184c8e:	2b00      	cmp	r3, #0
34184c90:	d002      	beq.n	34184c98 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c>
34184c92:	687b      	ldr	r3, [r7, #4]
34184c94:	2b00      	cmp	r3, #0
34184c96:	d101      	bne.n	34184c9c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x20>
  {
    return HAL_ERROR;
34184c98:	2301      	movs	r3, #1
34184c9a:	e158      	b.n	34184f4e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2d2>
  }

  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34184c9c:	68fb      	ldr	r3, [r7, #12]
34184c9e:	681b      	ldr	r3, [r3, #0]
34184ca0:	4a73      	ldr	r2, [pc, #460]	@ (34184e70 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1f4>)
34184ca2:	4293      	cmp	r3, r2
34184ca4:	d009      	beq.n	34184cba <HAL_DCMIPP_CSI_PIPE_SetConfig+0x3e>
34184ca6:	68fb      	ldr	r3, [r7, #12]
34184ca8:	681b      	ldr	r3, [r3, #0]
34184caa:	4a72      	ldr	r2, [pc, #456]	@ (34184e74 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1f8>)
34184cac:	4293      	cmp	r3, r2
34184cae:	d004      	beq.n	34184cba <HAL_DCMIPP_CSI_PIPE_SetConfig+0x3e>
34184cb0:	f44f 7144 	mov.w	r1, #784	@ 0x310
34184cb4:	4870      	ldr	r0, [pc, #448]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184cb6:	f7fd fad9 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34184cba:	68bb      	ldr	r3, [r7, #8]
34184cbc:	2b00      	cmp	r3, #0
34184cbe:	d00a      	beq.n	34184cd6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5a>
34184cc0:	68bb      	ldr	r3, [r7, #8]
34184cc2:	2b01      	cmp	r3, #1
34184cc4:	d007      	beq.n	34184cd6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5a>
34184cc6:	68bb      	ldr	r3, [r7, #8]
34184cc8:	2b02      	cmp	r3, #2
34184cca:	d004      	beq.n	34184cd6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x5a>
34184ccc:	f240 3111 	movw	r1, #785	@ 0x311
34184cd0:	4869      	ldr	r0, [pc, #420]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184cd2:	f7fd facb 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
34184cd6:	687b      	ldr	r3, [r7, #4]
34184cd8:	681b      	ldr	r3, [r3, #0]
34184cda:	2b00      	cmp	r3, #0
34184cdc:	d013      	beq.n	34184d06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8a>
34184cde:	687b      	ldr	r3, [r7, #4]
34184ce0:	681b      	ldr	r3, [r3, #0]
34184ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184ce6:	d00e      	beq.n	34184d06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8a>
34184ce8:	687b      	ldr	r3, [r7, #4]
34184cea:	681b      	ldr	r3, [r3, #0]
34184cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184cf0:	d009      	beq.n	34184d06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8a>
34184cf2:	687b      	ldr	r3, [r7, #4]
34184cf4:	681b      	ldr	r3, [r3, #0]
34184cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184cfa:	d004      	beq.n	34184d06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8a>
34184cfc:	f240 3112 	movw	r1, #786	@ 0x312
34184d00:	485d      	ldr	r0, [pc, #372]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184d02:	f7fd fab3 	bl	3418226c <assert_failed>

  if (Pipe != DCMIPP_PIPE2)
34184d06:	68bb      	ldr	r3, [r7, #8]
34184d08:	2b02      	cmp	r3, #2
34184d0a:	d05a      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
  {
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
34184d0c:	687b      	ldr	r3, [r7, #4]
34184d0e:	681b      	ldr	r3, [r3, #0]
34184d10:	2b00      	cmp	r3, #0
34184d12:	d013      	beq.n	34184d3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc0>
34184d14:	687b      	ldr	r3, [r7, #4]
34184d16:	681b      	ldr	r3, [r3, #0]
34184d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184d1c:	d00e      	beq.n	34184d3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc0>
34184d1e:	687b      	ldr	r3, [r7, #4]
34184d20:	681b      	ldr	r3, [r3, #0]
34184d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184d26:	d009      	beq.n	34184d3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc0>
34184d28:	687b      	ldr	r3, [r7, #4]
34184d2a:	681b      	ldr	r3, [r3, #0]
34184d2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184d30:	d004      	beq.n	34184d3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc0>
34184d32:	f240 3116 	movw	r1, #790	@ 0x316
34184d36:	4850      	ldr	r0, [pc, #320]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184d38:	f7fd fa98 	bl	3418226c <assert_failed>

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34184d3c:	687b      	ldr	r3, [r7, #4]
34184d3e:	681b      	ldr	r3, [r3, #0]
34184d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184d44:	d004      	beq.n	34184d50 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xd4>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
34184d46:	687b      	ldr	r3, [r7, #4]
34184d48:	681b      	ldr	r3, [r3, #0]
34184d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184d4e:	d138      	bne.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
    {
      assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDB));
34184d50:	687b      	ldr	r3, [r7, #4]
34184d52:	689b      	ldr	r3, [r3, #8]
34184d54:	2b22      	cmp	r3, #34	@ 0x22
34184d56:	d034      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d58:	687b      	ldr	r3, [r7, #4]
34184d5a:	689b      	ldr	r3, [r3, #8]
34184d5c:	2b20      	cmp	r3, #32
34184d5e:	d030      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d60:	687b      	ldr	r3, [r7, #4]
34184d62:	689b      	ldr	r3, [r3, #8]
34184d64:	2b21      	cmp	r3, #33	@ 0x21
34184d66:	d02c      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d68:	687b      	ldr	r3, [r7, #4]
34184d6a:	689b      	ldr	r3, [r3, #8]
34184d6c:	2b23      	cmp	r3, #35	@ 0x23
34184d6e:	d028      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d70:	687b      	ldr	r3, [r7, #4]
34184d72:	689b      	ldr	r3, [r3, #8]
34184d74:	2b24      	cmp	r3, #36	@ 0x24
34184d76:	d024      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d78:	687b      	ldr	r3, [r7, #4]
34184d7a:	689b      	ldr	r3, [r3, #8]
34184d7c:	2b18      	cmp	r3, #24
34184d7e:	d020      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d80:	687b      	ldr	r3, [r7, #4]
34184d82:	689b      	ldr	r3, [r3, #8]
34184d84:	2b19      	cmp	r3, #25
34184d86:	d01c      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d88:	687b      	ldr	r3, [r7, #4]
34184d8a:	689b      	ldr	r3, [r3, #8]
34184d8c:	2b1e      	cmp	r3, #30
34184d8e:	d018      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d90:	687b      	ldr	r3, [r7, #4]
34184d92:	689b      	ldr	r3, [r3, #8]
34184d94:	2b1f      	cmp	r3, #31
34184d96:	d014      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184d98:	687b      	ldr	r3, [r7, #4]
34184d9a:	689b      	ldr	r3, [r3, #8]
34184d9c:	2b2a      	cmp	r3, #42	@ 0x2a
34184d9e:	d010      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184da0:	687b      	ldr	r3, [r7, #4]
34184da2:	689b      	ldr	r3, [r3, #8]
34184da4:	2b2b      	cmp	r3, #43	@ 0x2b
34184da6:	d00c      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184da8:	687b      	ldr	r3, [r7, #4]
34184daa:	689b      	ldr	r3, [r3, #8]
34184dac:	2b2c      	cmp	r3, #44	@ 0x2c
34184dae:	d008      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184db0:	687b      	ldr	r3, [r7, #4]
34184db2:	689b      	ldr	r3, [r3, #8]
34184db4:	2b2d      	cmp	r3, #45	@ 0x2d
34184db6:	d004      	beq.n	34184dc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x146>
34184db8:	f240 311b 	movw	r1, #795	@ 0x31b
34184dbc:	482e      	ldr	r0, [pc, #184]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184dbe:	f7fd fa55 	bl	3418226c <assert_failed>
    }
  }

  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
34184dc2:	687b      	ldr	r3, [r7, #4]
34184dc4:	681b      	ldr	r3, [r3, #0]
34184dc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184dca:	d038      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
  {
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
34184dcc:	687b      	ldr	r3, [r7, #4]
34184dce:	685b      	ldr	r3, [r3, #4]
34184dd0:	2b22      	cmp	r3, #34	@ 0x22
34184dd2:	d034      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184dd4:	687b      	ldr	r3, [r7, #4]
34184dd6:	685b      	ldr	r3, [r3, #4]
34184dd8:	2b20      	cmp	r3, #32
34184dda:	d030      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184ddc:	687b      	ldr	r3, [r7, #4]
34184dde:	685b      	ldr	r3, [r3, #4]
34184de0:	2b21      	cmp	r3, #33	@ 0x21
34184de2:	d02c      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184de4:	687b      	ldr	r3, [r7, #4]
34184de6:	685b      	ldr	r3, [r3, #4]
34184de8:	2b23      	cmp	r3, #35	@ 0x23
34184dea:	d028      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184dec:	687b      	ldr	r3, [r7, #4]
34184dee:	685b      	ldr	r3, [r3, #4]
34184df0:	2b24      	cmp	r3, #36	@ 0x24
34184df2:	d024      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184df4:	687b      	ldr	r3, [r7, #4]
34184df6:	685b      	ldr	r3, [r3, #4]
34184df8:	2b18      	cmp	r3, #24
34184dfa:	d020      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184dfc:	687b      	ldr	r3, [r7, #4]
34184dfe:	685b      	ldr	r3, [r3, #4]
34184e00:	2b19      	cmp	r3, #25
34184e02:	d01c      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e04:	687b      	ldr	r3, [r7, #4]
34184e06:	685b      	ldr	r3, [r3, #4]
34184e08:	2b1e      	cmp	r3, #30
34184e0a:	d018      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e0c:	687b      	ldr	r3, [r7, #4]
34184e0e:	685b      	ldr	r3, [r3, #4]
34184e10:	2b1f      	cmp	r3, #31
34184e12:	d014      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e14:	687b      	ldr	r3, [r7, #4]
34184e16:	685b      	ldr	r3, [r3, #4]
34184e18:	2b2a      	cmp	r3, #42	@ 0x2a
34184e1a:	d010      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e1c:	687b      	ldr	r3, [r7, #4]
34184e1e:	685b      	ldr	r3, [r3, #4]
34184e20:	2b2b      	cmp	r3, #43	@ 0x2b
34184e22:	d00c      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e24:	687b      	ldr	r3, [r7, #4]
34184e26:	685b      	ldr	r3, [r3, #4]
34184e28:	2b2c      	cmp	r3, #44	@ 0x2c
34184e2a:	d008      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e2c:	687b      	ldr	r3, [r7, #4]
34184e2e:	685b      	ldr	r3, [r3, #4]
34184e30:	2b2d      	cmp	r3, #45	@ 0x2d
34184e32:	d004      	beq.n	34184e3e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1c2>
34184e34:	f240 3121 	movw	r1, #801	@ 0x321
34184e38:	480f      	ldr	r0, [pc, #60]	@ (34184e78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1fc>)
34184e3a:	f7fd fa17 	bl	3418226c <assert_failed>
  }

  state = hdcmipp->State;
34184e3e:	68fb      	ldr	r3, [r7, #12]
34184e40:	791b      	ldrb	r3, [r3, #4]
34184e42:	74fb      	strb	r3, [r7, #19]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
34184e44:	7cfb      	ldrb	r3, [r7, #19]
34184e46:	2b01      	cmp	r3, #1
34184e48:	d002      	beq.n	34184e50 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1d4>
34184e4a:	7cfb      	ldrb	r3, [r7, #19]
34184e4c:	2b02      	cmp	r3, #2
34184e4e:	d17a      	bne.n	34184f46 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2ca>
  {
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34184e50:	687b      	ldr	r3, [r7, #4]
34184e52:	681b      	ldr	r3, [r3, #0]
34184e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184e58:	d004      	beq.n	34184e64 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x1e8>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
34184e5a:	687b      	ldr	r3, [r7, #4]
34184e5c:	681b      	ldr	r3, [r3, #0]
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
34184e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184e62:	d10b      	bne.n	34184e7c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x200>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
34184e64:	68bb      	ldr	r3, [r7, #8]
34184e66:	2b00      	cmp	r3, #0
34184e68:	d008      	beq.n	34184e7c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x200>
    {
      return HAL_ERROR;
34184e6a:	2301      	movs	r3, #1
34184e6c:	e06f      	b.n	34184f4e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2d2>
34184e6e:	bf00      	nop
34184e70:	58002000 	.word	0x58002000
34184e74:	48002000 	.word	0x48002000
34184e78:	341a4eec 	.word	0x341a4eec
    }

    /* Add Data Type Mode for the selected Pipe except Pipe2 */
    if (Pipe != DCMIPP_PIPE2)
34184e7c:	68bb      	ldr	r3, [r7, #8]
34184e7e:	2b02      	cmp	r3, #2
34184e80:	d004      	beq.n	34184e8c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x210>
    {
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeMode);
34184e82:	687b      	ldr	r3, [r7, #4]
34184e84:	681b      	ldr	r3, [r3, #0]
34184e86:	697a      	ldr	r2, [r7, #20]
34184e88:	4313      	orrs	r3, r2
34184e8a:	617b      	str	r3, [r7, #20]
    }

    if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
34184e8c:	687b      	ldr	r3, [r7, #4]
34184e8e:	681b      	ldr	r3, [r3, #0]
34184e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34184e94:	d004      	beq.n	34184ea0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x224>
    {
      /* Add Data Type IDA for the selected Pipe */
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
34184e96:	687b      	ldr	r3, [r7, #4]
34184e98:	685b      	ldr	r3, [r3, #4]
34184e9a:	697a      	ldr	r2, [r7, #20]
34184e9c:	4313      	orrs	r3, r2
34184e9e:	617b      	str	r3, [r7, #20]
    }

    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34184ea0:	687b      	ldr	r3, [r7, #4]
34184ea2:	681b      	ldr	r3, [r3, #0]
34184ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184ea8:	d004      	beq.n	34184eb4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x238>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
34184eaa:	687b      	ldr	r3, [r7, #4]
34184eac:	681b      	ldr	r3, [r3, #0]
34184eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184eb2:	d108      	bne.n	34184ec6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x24a>
    {
      if (Pipe != DCMIPP_PIPE2)
34184eb4:	68bb      	ldr	r3, [r7, #8]
34184eb6:	2b02      	cmp	r3, #2
34184eb8:	d005      	beq.n	34184ec6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x24a>
      {
        /* Add Data Type IDB for the selected Pipe except Pipe2 */
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
34184eba:	687b      	ldr	r3, [r7, #4]
34184ebc:	689b      	ldr	r3, [r3, #8]
34184ebe:	021b      	lsls	r3, r3, #8
34184ec0:	697a      	ldr	r2, [r7, #20]
34184ec2:	4313      	orrs	r3, r2
34184ec4:	617b      	str	r3, [r7, #20]
      }
    }

    if (Pipe == DCMIPP_PIPE0)
34184ec6:	68bb      	ldr	r3, [r7, #8]
34184ec8:	2b00      	cmp	r3, #0
34184eca:	d10c      	bne.n	34184ee6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x26a>
    {
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
34184ecc:	68fb      	ldr	r3, [r7, #12]
34184ece:	681b      	ldr	r3, [r3, #0]
34184ed0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34184ed4:	4b20      	ldr	r3, [pc, #128]	@ (34184f58 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2dc>)
34184ed6:	4013      	ands	r3, r2
34184ed8:	68fa      	ldr	r2, [r7, #12]
34184eda:	6812      	ldr	r2, [r2, #0]
34184edc:	6979      	ldr	r1, [r7, #20]
34184ede:	430b      	orrs	r3, r1
34184ee0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
34184ee4:	e01b      	b.n	34184f1e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2a2>
                 DCMIPP_P0FSCR_DTIDB, pxfscr_reg);
    }
    else if (Pipe == DCMIPP_PIPE1)
34184ee6:	68bb      	ldr	r3, [r7, #8]
34184ee8:	2b01      	cmp	r3, #1
34184eea:	d10c      	bne.n	34184f06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x28a>
    {
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
34184eec:	68fb      	ldr	r3, [r7, #12]
34184eee:	681b      	ldr	r3, [r3, #0]
34184ef0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
34184ef4:	4b18      	ldr	r3, [pc, #96]	@ (34184f58 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2dc>)
34184ef6:	4013      	ands	r3, r2
34184ef8:	68fa      	ldr	r2, [r7, #12]
34184efa:	6812      	ldr	r2, [r2, #0]
34184efc:	6979      	ldr	r1, [r7, #20]
34184efe:	430b      	orrs	r3, r1
34184f00:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
34184f04:	e00b      	b.n	34184f1e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2a2>
                                             DCMIPP_P1FSCR_DTMODE), pxfscr_reg);
    }
    else
    {
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
34184f06:	68fb      	ldr	r3, [r7, #12]
34184f08:	681b      	ldr	r3, [r3, #0]
34184f0a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34184f0e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
34184f12:	68fb      	ldr	r3, [r7, #12]
34184f14:	681b      	ldr	r3, [r3, #0]
34184f16:	697a      	ldr	r2, [r7, #20]
34184f18:	430a      	orrs	r2, r1
34184f1a:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }

    /* Disable Parallel interface */
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
34184f1e:	68fb      	ldr	r3, [r7, #12]
34184f20:	681b      	ldr	r3, [r3, #0]
34184f22:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34184f26:	68fb      	ldr	r3, [r7, #12]
34184f28:	681b      	ldr	r3, [r3, #0]
34184f2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34184f2e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Set CSI Input Selection  */
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
34184f32:	68fb      	ldr	r3, [r7, #12]
34184f34:	681b      	ldr	r3, [r3, #0]
34184f36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
34184f3a:	68fb      	ldr	r3, [r7, #12]
34184f3c:	681b      	ldr	r3, [r3, #0]
34184f3e:	f042 0201 	orr.w	r2, r2, #1
34184f42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  }

  /* Update the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
34184f46:	68fb      	ldr	r3, [r7, #12]
34184f48:	2202      	movs	r2, #2
34184f4a:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
34184f4c:	2300      	movs	r3, #0
}
34184f4e:	4618      	mov	r0, r3
34184f50:	3718      	adds	r7, #24
34184f52:	46bd      	mov	sp, r7
34184f54:	bd80      	pop	{r7, pc}
34184f56:	bf00      	nop
34184f58:	fffcc0c0 	.word	0xfffcc0c0

34184f5c <HAL_DCMIPP_CSI_SetVCConfig>:
  * @param  DataTypeFormat Specifies the Data Type Format, can be a value from @ref DCMIPP_CSI_DataTypeFormat.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_SetVCConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel,
                                             uint32_t DataTypeFormat)
{
34184f5c:	b580      	push	{r7, lr}
34184f5e:	b086      	sub	sp, #24
34184f60:	af00      	add	r7, sp, #0
34184f62:	60f8      	str	r0, [r7, #12]
34184f64:	60b9      	str	r1, [r7, #8]
34184f66:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34184f68:	4b30      	ldr	r3, [pc, #192]	@ (3418502c <HAL_DCMIPP_CSI_SetVCConfig+0xd0>)
34184f6a:	617b      	str	r3, [r7, #20]

  assert_param(IS_DCMIPP_VCID(VirtualChannel));
34184f6c:	68bb      	ldr	r3, [r7, #8]
34184f6e:	2b00      	cmp	r3, #0
34184f70:	d00d      	beq.n	34184f8e <HAL_DCMIPP_CSI_SetVCConfig+0x32>
34184f72:	68bb      	ldr	r3, [r7, #8]
34184f74:	2b01      	cmp	r3, #1
34184f76:	d00a      	beq.n	34184f8e <HAL_DCMIPP_CSI_SetVCConfig+0x32>
34184f78:	68bb      	ldr	r3, [r7, #8]
34184f7a:	2b02      	cmp	r3, #2
34184f7c:	d007      	beq.n	34184f8e <HAL_DCMIPP_CSI_SetVCConfig+0x32>
34184f7e:	68bb      	ldr	r3, [r7, #8]
34184f80:	2b03      	cmp	r3, #3
34184f82:	d004      	beq.n	34184f8e <HAL_DCMIPP_CSI_SetVCConfig+0x32>
34184f84:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34184f88:	4829      	ldr	r0, [pc, #164]	@ (34185030 <HAL_DCMIPP_CSI_SetVCConfig+0xd4>)
34184f8a:	f7fd f96f 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));
34184f8e:	687b      	ldr	r3, [r7, #4]
34184f90:	2b00      	cmp	r3, #0
34184f92:	d016      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184f94:	687b      	ldr	r3, [r7, #4]
34184f96:	2b01      	cmp	r3, #1
34184f98:	d013      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184f9a:	687b      	ldr	r3, [r7, #4]
34184f9c:	2b02      	cmp	r3, #2
34184f9e:	d010      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184fa0:	687b      	ldr	r3, [r7, #4]
34184fa2:	2b03      	cmp	r3, #3
34184fa4:	d00d      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184fa6:	687b      	ldr	r3, [r7, #4]
34184fa8:	2b04      	cmp	r3, #4
34184faa:	d00a      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184fac:	687b      	ldr	r3, [r7, #4]
34184fae:	2b05      	cmp	r3, #5
34184fb0:	d007      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184fb2:	687b      	ldr	r3, [r7, #4]
34184fb4:	2b06      	cmp	r3, #6
34184fb6:	d004      	beq.n	34184fc2 <HAL_DCMIPP_CSI_SetVCConfig+0x66>
34184fb8:	f240 31c9 	movw	r1, #969	@ 0x3c9
34184fbc:	481c      	ldr	r0, [pc, #112]	@ (34185030 <HAL_DCMIPP_CSI_SetVCConfig+0xd4>)
34184fbe:	f7fd f955 	bl	3418226c <assert_failed>

  /* Check pointer and input values validity */
  if (hdcmipp == NULL)
34184fc2:	68fb      	ldr	r3, [r7, #12]
34184fc4:	2b00      	cmp	r3, #0
34184fc6:	d101      	bne.n	34184fcc <HAL_DCMIPP_CSI_SetVCConfig+0x70>
  {
    return HAL_ERROR;
34184fc8:	2301      	movs	r3, #1
34184fca:	e02b      	b.n	34185024 <HAL_DCMIPP_CSI_SetVCConfig+0xc8>
  }

  /* Set the common format for all data type for the selected virtual channel */
  switch (VirtualChannel)
34184fcc:	68bb      	ldr	r3, [r7, #8]
34184fce:	2b03      	cmp	r3, #3
34184fd0:	d826      	bhi.n	34185020 <HAL_DCMIPP_CSI_SetVCConfig+0xc4>
34184fd2:	a201      	add	r2, pc, #4	@ (adr r2, 34184fd8 <HAL_DCMIPP_CSI_SetVCConfig+0x7c>)
34184fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34184fd8:	34184fe9 	.word	0x34184fe9
34184fdc:	34184ff7 	.word	0x34184ff7
34184fe0:	34185005 	.word	0x34185005
34184fe4:	34185013 	.word	0x34185013
  {
    case DCMIPP_VIRTUAL_CHANNEL0:
    {
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
34184fe8:	687b      	ldr	r3, [r7, #4]
34184fea:	021b      	lsls	r3, r3, #8
34184fec:	f043 0201 	orr.w	r2, r3, #1
34184ff0:	697b      	ldr	r3, [r7, #20]
34184ff2:	611a      	str	r2, [r3, #16]
      break;
34184ff4:	e015      	b.n	34185022 <HAL_DCMIPP_CSI_SetVCConfig+0xc6>
    }
    case DCMIPP_VIRTUAL_CHANNEL1:
    {
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
34184ff6:	687b      	ldr	r3, [r7, #4]
34184ff8:	021b      	lsls	r3, r3, #8
34184ffa:	f043 0201 	orr.w	r2, r3, #1
34184ffe:	697b      	ldr	r3, [r7, #20]
34185000:	621a      	str	r2, [r3, #32]
      break;
34185002:	e00e      	b.n	34185022 <HAL_DCMIPP_CSI_SetVCConfig+0xc6>
    }
    case DCMIPP_VIRTUAL_CHANNEL2:
    {
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
34185004:	687b      	ldr	r3, [r7, #4]
34185006:	021b      	lsls	r3, r3, #8
34185008:	f043 0201 	orr.w	r2, r3, #1
3418500c:	697b      	ldr	r3, [r7, #20]
3418500e:	631a      	str	r2, [r3, #48]	@ 0x30
      break;
34185010:	e007      	b.n	34185022 <HAL_DCMIPP_CSI_SetVCConfig+0xc6>
    }
    case DCMIPP_VIRTUAL_CHANNEL3:
    {
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
34185012:	687b      	ldr	r3, [r7, #4]
34185014:	021b      	lsls	r3, r3, #8
34185016:	f043 0201 	orr.w	r2, r3, #1
3418501a:	697b      	ldr	r3, [r7, #20]
3418501c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
3418501e:	e000      	b.n	34185022 <HAL_DCMIPP_CSI_SetVCConfig+0xc6>
    }
    default:
      break;
34185020:	bf00      	nop
  }

  return HAL_OK;
34185022:	2300      	movs	r3, #0
}
34185024:	4618      	mov	r0, r3
34185026:	3718      	adds	r7, #24
34185028:	46bd      	mov	sp, r7
3418502a:	bd80      	pop	{r7, pc}
3418502c:	58006000 	.word	0x58006000
34185030:	341a4eec 	.word	0x341a4eec

34185034 <HAL_DCMIPP_PIPE_SetConfig>:
  * @param  pPipeConfig pointer to pipe configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                            const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
34185034:	b580      	push	{r7, lr}
34185036:	b086      	sub	sp, #24
34185038:	af00      	add	r7, sp, #0
3418503a:	60f8      	str	r0, [r7, #12]
3418503c:	60b9      	str	r1, [r7, #8]
3418503e:	607a      	str	r2, [r7, #4]
  HAL_DCMIPP_PipeStateTypeDef pipe_state;

  /* Check the DCMIPP peripheral handle parameter and pPipeConfig parameter */
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
34185040:	68fb      	ldr	r3, [r7, #12]
34185042:	2b00      	cmp	r3, #0
34185044:	d002      	beq.n	3418504c <HAL_DCMIPP_PIPE_SetConfig+0x18>
34185046:	687b      	ldr	r3, [r7, #4]
34185048:	2b00      	cmp	r3, #0
3418504a:	d101      	bne.n	34185050 <HAL_DCMIPP_PIPE_SetConfig+0x1c>
  {
    return HAL_ERROR;
3418504c:	2301      	movs	r3, #1
3418504e:	e0a1      	b.n	34185194 <HAL_DCMIPP_PIPE_SetConfig+0x160>
  }

  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34185050:	68fb      	ldr	r3, [r7, #12]
34185052:	681b      	ldr	r3, [r3, #0]
34185054:	4a51      	ldr	r2, [pc, #324]	@ (3418519c <HAL_DCMIPP_PIPE_SetConfig+0x168>)
34185056:	4293      	cmp	r3, r2
34185058:	d009      	beq.n	3418506e <HAL_DCMIPP_PIPE_SetConfig+0x3a>
3418505a:	68fb      	ldr	r3, [r7, #12]
3418505c:	681b      	ldr	r3, [r3, #0]
3418505e:	4a50      	ldr	r2, [pc, #320]	@ (341851a0 <HAL_DCMIPP_PIPE_SetConfig+0x16c>)
34185060:	4293      	cmp	r3, r2
34185062:	d004      	beq.n	3418506e <HAL_DCMIPP_PIPE_SetConfig+0x3a>
34185064:	f240 4102 	movw	r1, #1026	@ 0x402
34185068:	484e      	ldr	r0, [pc, #312]	@ (341851a4 <HAL_DCMIPP_PIPE_SetConfig+0x170>)
3418506a:	f7fd f8ff 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418506e:	68bb      	ldr	r3, [r7, #8]
34185070:	2b00      	cmp	r3, #0
34185072:	d00a      	beq.n	3418508a <HAL_DCMIPP_PIPE_SetConfig+0x56>
34185074:	68bb      	ldr	r3, [r7, #8]
34185076:	2b01      	cmp	r3, #1
34185078:	d007      	beq.n	3418508a <HAL_DCMIPP_PIPE_SetConfig+0x56>
3418507a:	68bb      	ldr	r3, [r7, #8]
3418507c:	2b02      	cmp	r3, #2
3418507e:	d004      	beq.n	3418508a <HAL_DCMIPP_PIPE_SetConfig+0x56>
34185080:	f240 4103 	movw	r1, #1027	@ 0x403
34185084:	4847      	ldr	r0, [pc, #284]	@ (341851a4 <HAL_DCMIPP_PIPE_SetConfig+0x170>)
34185086:	f7fd f8f1 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_FRAME_RATE(pPipeConfig->FrameRate));
3418508a:	687b      	ldr	r3, [r7, #4]
3418508c:	681b      	ldr	r3, [r3, #0]
3418508e:	2b00      	cmp	r3, #0
34185090:	d010      	beq.n	341850b4 <HAL_DCMIPP_PIPE_SetConfig+0x80>
34185092:	687b      	ldr	r3, [r7, #4]
34185094:	681b      	ldr	r3, [r3, #0]
34185096:	2b01      	cmp	r3, #1
34185098:	d00c      	beq.n	341850b4 <HAL_DCMIPP_PIPE_SetConfig+0x80>
3418509a:	687b      	ldr	r3, [r7, #4]
3418509c:	681b      	ldr	r3, [r3, #0]
3418509e:	2b02      	cmp	r3, #2
341850a0:	d008      	beq.n	341850b4 <HAL_DCMIPP_PIPE_SetConfig+0x80>
341850a2:	687b      	ldr	r3, [r7, #4]
341850a4:	681b      	ldr	r3, [r3, #0]
341850a6:	2b03      	cmp	r3, #3
341850a8:	d004      	beq.n	341850b4 <HAL_DCMIPP_PIPE_SetConfig+0x80>
341850aa:	f240 4104 	movw	r1, #1028	@ 0x404
341850ae:	483d      	ldr	r0, [pc, #244]	@ (341851a4 <HAL_DCMIPP_PIPE_SetConfig+0x170>)
341850b0:	f7fd f8dc 	bl	3418226c <assert_failed>
  if (Pipe != DCMIPP_PIPE0)
341850b4:	68bb      	ldr	r3, [r7, #8]
341850b6:	2b00      	cmp	r3, #0
341850b8:	d03c      	beq.n	34185134 <HAL_DCMIPP_PIPE_SetConfig+0x100>
  {
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
341850ba:	687b      	ldr	r3, [r7, #4]
341850bc:	689b      	ldr	r3, [r3, #8]
341850be:	2b00      	cmp	r3, #0
341850c0:	d028      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850c2:	687b      	ldr	r3, [r7, #4]
341850c4:	689b      	ldr	r3, [r3, #8]
341850c6:	2b01      	cmp	r3, #1
341850c8:	d024      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850ca:	687b      	ldr	r3, [r7, #4]
341850cc:	689b      	ldr	r3, [r3, #8]
341850ce:	2b02      	cmp	r3, #2
341850d0:	d020      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850d2:	687b      	ldr	r3, [r7, #4]
341850d4:	689b      	ldr	r3, [r3, #8]
341850d6:	2b03      	cmp	r3, #3
341850d8:	d01c      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850da:	687b      	ldr	r3, [r7, #4]
341850dc:	689b      	ldr	r3, [r3, #8]
341850de:	2b04      	cmp	r3, #4
341850e0:	d018      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850e2:	687b      	ldr	r3, [r7, #4]
341850e4:	689b      	ldr	r3, [r3, #8]
341850e6:	2b05      	cmp	r3, #5
341850e8:	d014      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850ea:	687b      	ldr	r3, [r7, #4]
341850ec:	689b      	ldr	r3, [r3, #8]
341850ee:	2b06      	cmp	r3, #6
341850f0:	d010      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850f2:	687b      	ldr	r3, [r7, #4]
341850f4:	689b      	ldr	r3, [r3, #8]
341850f6:	2b07      	cmp	r3, #7
341850f8:	d00c      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
341850fa:	687b      	ldr	r3, [r7, #4]
341850fc:	689b      	ldr	r3, [r3, #8]
341850fe:	2b08      	cmp	r3, #8
34185100:	d008      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
34185102:	687b      	ldr	r3, [r7, #4]
34185104:	689b      	ldr	r3, [r3, #8]
34185106:	2b09      	cmp	r3, #9
34185108:	d004      	beq.n	34185114 <HAL_DCMIPP_PIPE_SetConfig+0xe0>
3418510a:	f240 4107 	movw	r1, #1031	@ 0x407
3418510e:	4825      	ldr	r0, [pc, #148]	@ (341851a4 <HAL_DCMIPP_PIPE_SetConfig+0x170>)
34185110:	f7fd f8ac 	bl	3418226c <assert_failed>
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
34185114:	687b      	ldr	r3, [r7, #4]
34185116:	685b      	ldr	r3, [r3, #4]
34185118:	f003 030f 	and.w	r3, r3, #15
3418511c:	2b00      	cmp	r3, #0
3418511e:	d104      	bne.n	3418512a <HAL_DCMIPP_PIPE_SetConfig+0xf6>
34185120:	687b      	ldr	r3, [r7, #4]
34185122:	685b      	ldr	r3, [r3, #4]
34185124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34185128:	d304      	bcc.n	34185134 <HAL_DCMIPP_PIPE_SetConfig+0x100>
3418512a:	f44f 6181 	mov.w	r1, #1032	@ 0x408
3418512e:	481d      	ldr	r0, [pc, #116]	@ (341851a4 <HAL_DCMIPP_PIPE_SetConfig+0x170>)
34185130:	f7fd f89c 	bl	3418226c <assert_failed>
  }

  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
34185134:	68bb      	ldr	r3, [r7, #8]
34185136:	2b02      	cmp	r3, #2
34185138:	d105      	bne.n	34185146 <HAL_DCMIPP_PIPE_SetConfig+0x112>
3418513a:	687b      	ldr	r3, [r7, #4]
3418513c:	689b      	ldr	r3, [r3, #8]
3418513e:	2b06      	cmp	r3, #6
34185140:	d901      	bls.n	34185146 <HAL_DCMIPP_PIPE_SetConfig+0x112>
  {
    return HAL_ERROR;
34185142:	2301      	movs	r3, #1
34185144:	e026      	b.n	34185194 <HAL_DCMIPP_PIPE_SetConfig+0x160>
  }
  /* Get Pipe State */
  pipe_state = hdcmipp->PipeState[Pipe];
34185146:	68fa      	ldr	r2, [r7, #12]
34185148:	68bb      	ldr	r3, [r7, #8]
3418514a:	4413      	add	r3, r2
3418514c:	3305      	adds	r3, #5
3418514e:	781b      	ldrb	r3, [r3, #0]
34185150:	75fb      	strb	r3, [r7, #23]

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34185152:	68fb      	ldr	r3, [r7, #12]
34185154:	791b      	ldrb	r3, [r3, #4]
34185156:	b2db      	uxtb	r3, r3
34185158:	2b02      	cmp	r3, #2
3418515a:	d11a      	bne.n	34185192 <HAL_DCMIPP_PIPE_SetConfig+0x15e>
  {
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
3418515c:	7dfb      	ldrb	r3, [r7, #23]
3418515e:	2b00      	cmp	r3, #0
34185160:	d002      	beq.n	34185168 <HAL_DCMIPP_PIPE_SetConfig+0x134>
34185162:	7dfb      	ldrb	r3, [r7, #23]
34185164:	2b04      	cmp	r3, #4
34185166:	d112      	bne.n	3418518e <HAL_DCMIPP_PIPE_SetConfig+0x15a>
    {
      /* Update the DCMIPP PIPE state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34185168:	68fa      	ldr	r2, [r7, #12]
3418516a:	68bb      	ldr	r3, [r7, #8]
3418516c:	4413      	add	r3, r2
3418516e:	3305      	adds	r3, #5
34185170:	2202      	movs	r2, #2
34185172:	701a      	strb	r2, [r3, #0]

      /* Initialize the DCMIPP Pipe registers */
      Pipe_Config(hdcmipp, Pipe, pPipeConfig);
34185174:	687a      	ldr	r2, [r7, #4]
34185176:	68b9      	ldr	r1, [r7, #8]
34185178:	68f8      	ldr	r0, [r7, #12]
3418517a:	f002 ff04 	bl	34187f86 <Pipe_Config>

      /* Update the DCMIPP pipe state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
3418517e:	68fa      	ldr	r2, [r7, #12]
34185180:	68bb      	ldr	r3, [r7, #8]
34185182:	4413      	add	r3, r2
34185184:	3305      	adds	r3, #5
34185186:	2201      	movs	r2, #1
34185188:	701a      	strb	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418518a:	2300      	movs	r3, #0
3418518c:	e002      	b.n	34185194 <HAL_DCMIPP_PIPE_SetConfig+0x160>
      return HAL_ERROR;
3418518e:	2301      	movs	r3, #1
34185190:	e000      	b.n	34185194 <HAL_DCMIPP_PIPE_SetConfig+0x160>
    return HAL_ERROR;
34185192:	2301      	movs	r3, #1
}
34185194:	4618      	mov	r0, r3
34185196:	3718      	adds	r7, #24
34185198:	46bd      	mov	sp, r7
3418519a:	bd80      	pop	{r7, pc}
3418519c:	58002000 	.word	0x58002000
341851a0:	48002000 	.word	0x48002000
341851a4:	341a4eec 	.word	0x341a4eec

341851a8 <HAL_DCMIPP_CSI_PIPE_Start>:
  * @param  CaptureMode    DCMIPP capture mode for the pipe can be a value from @ref DCMIPP_Capture_Mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_Start(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel,
                                            uint32_t DstAddress, uint32_t CaptureMode)
{
341851a8:	b580      	push	{r7, lr}
341851aa:	b086      	sub	sp, #24
341851ac:	af00      	add	r7, sp, #0
341851ae:	60f8      	str	r0, [r7, #12]
341851b0:	60b9      	str	r1, [r7, #8]
341851b2:	607a      	str	r2, [r7, #4]
341851b4:	603b      	str	r3, [r7, #0]
  uint32_t mode;
  assert_param(IS_DCMIPP_PIPE(Pipe));
341851b6:	68bb      	ldr	r3, [r7, #8]
341851b8:	2b00      	cmp	r3, #0
341851ba:	d00a      	beq.n	341851d2 <HAL_DCMIPP_CSI_PIPE_Start+0x2a>
341851bc:	68bb      	ldr	r3, [r7, #8]
341851be:	2b01      	cmp	r3, #1
341851c0:	d007      	beq.n	341851d2 <HAL_DCMIPP_CSI_PIPE_Start+0x2a>
341851c2:	68bb      	ldr	r3, [r7, #8]
341851c4:	2b02      	cmp	r3, #2
341851c6:	d004      	beq.n	341851d2 <HAL_DCMIPP_CSI_PIPE_Start+0x2a>
341851c8:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
341851cc:	482a      	ldr	r0, [pc, #168]	@ (34185278 <HAL_DCMIPP_CSI_PIPE_Start+0xd0>)
341851ce:	f7fd f84d 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
341851d2:	687b      	ldr	r3, [r7, #4]
341851d4:	2b00      	cmp	r3, #0
341851d6:	d00d      	beq.n	341851f4 <HAL_DCMIPP_CSI_PIPE_Start+0x4c>
341851d8:	687b      	ldr	r3, [r7, #4]
341851da:	2b01      	cmp	r3, #1
341851dc:	d00a      	beq.n	341851f4 <HAL_DCMIPP_CSI_PIPE_Start+0x4c>
341851de:	687b      	ldr	r3, [r7, #4]
341851e0:	2b02      	cmp	r3, #2
341851e2:	d007      	beq.n	341851f4 <HAL_DCMIPP_CSI_PIPE_Start+0x4c>
341851e4:	687b      	ldr	r3, [r7, #4]
341851e6:	2b03      	cmp	r3, #3
341851e8:	d004      	beq.n	341851f4 <HAL_DCMIPP_CSI_PIPE_Start+0x4c>
341851ea:	f240 6111 	movw	r1, #1553	@ 0x611
341851ee:	4822      	ldr	r0, [pc, #136]	@ (34185278 <HAL_DCMIPP_CSI_PIPE_Start+0xd0>)
341851f0:	f7fd f83c 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));
341851f4:	6a3b      	ldr	r3, [r7, #32]
341851f6:	2b00      	cmp	r3, #0
341851f8:	d007      	beq.n	3418520a <HAL_DCMIPP_CSI_PIPE_Start+0x62>
341851fa:	6a3b      	ldr	r3, [r7, #32]
341851fc:	2b04      	cmp	r3, #4
341851fe:	d004      	beq.n	3418520a <HAL_DCMIPP_CSI_PIPE_Start+0x62>
34185200:	f240 6112 	movw	r1, #1554	@ 0x612
34185204:	481c      	ldr	r0, [pc, #112]	@ (34185278 <HAL_DCMIPP_CSI_PIPE_Start+0xd0>)
34185206:	f7fd f831 	bl	3418226c <assert_failed>

  /* Check pointer validity */
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
3418520a:	68fb      	ldr	r3, [r7, #12]
3418520c:	2b00      	cmp	r3, #0
3418520e:	d004      	beq.n	3418521a <HAL_DCMIPP_CSI_PIPE_Start+0x72>
34185210:	683b      	ldr	r3, [r7, #0]
34185212:	f003 030f 	and.w	r3, r3, #15
34185216:	2b00      	cmp	r3, #0
34185218:	d001      	beq.n	3418521e <HAL_DCMIPP_CSI_PIPE_Start+0x76>
  {
    return HAL_ERROR;
3418521a:	2301      	movs	r3, #1
3418521c:	e028      	b.n	34185270 <HAL_DCMIPP_CSI_PIPE_Start+0xc8>
  }

  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3418521e:	68fb      	ldr	r3, [r7, #12]
34185220:	681b      	ldr	r3, [r3, #0]
34185222:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
34185226:	f003 0301 	and.w	r3, r3, #1
3418522a:	617b      	str	r3, [r7, #20]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3418522c:	68fa      	ldr	r2, [r7, #12]
3418522e:	68bb      	ldr	r3, [r7, #8]
34185230:	4413      	add	r3, r2
34185232:	3305      	adds	r3, #5
34185234:	781b      	ldrb	r3, [r3, #0]
34185236:	b2db      	uxtb	r3, r3
34185238:	2b01      	cmp	r3, #1
3418523a:	d102      	bne.n	34185242 <HAL_DCMIPP_CSI_PIPE_Start+0x9a>
3418523c:	697b      	ldr	r3, [r7, #20]
3418523e:	2b01      	cmp	r3, #1
34185240:	d001      	beq.n	34185246 <HAL_DCMIPP_CSI_PIPE_Start+0x9e>
  {
    return HAL_ERROR;
34185242:	2301      	movs	r3, #1
34185244:	e014      	b.n	34185270 <HAL_DCMIPP_CSI_PIPE_Start+0xc8>
  }

  /* Set Virtual Channel for the selected Pipe */
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
34185246:	687a      	ldr	r2, [r7, #4]
34185248:	68b9      	ldr	r1, [r7, #8]
3418524a:	68f8      	ldr	r0, [r7, #12]
3418524c:	f003 f984 	bl	34188558 <DCMIPP_CSI_SetVCConfig>
34185250:	4603      	mov	r3, r0
34185252:	2b00      	cmp	r3, #0
34185254:	d001      	beq.n	3418525a <HAL_DCMIPP_CSI_PIPE_Start+0xb2>
  {
    return HAL_ERROR;
34185256:	2301      	movs	r3, #1
34185258:	e00a      	b.n	34185270 <HAL_DCMIPP_CSI_PIPE_Start+0xc8>
  }

  /* Set Capture Mode and Destination address for the selected pipe */
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
3418525a:	6a3b      	ldr	r3, [r7, #32]
3418525c:	683a      	ldr	r2, [r7, #0]
3418525e:	68b9      	ldr	r1, [r7, #8]
34185260:	68f8      	ldr	r0, [r7, #12]
34185262:	f002 ffc9 	bl	341881f8 <DCMIPP_SetConfig>

  /* Enable Capture for the selected Pipe */
  DCMIPP_EnableCapture(hdcmipp, Pipe);
34185266:	68b9      	ldr	r1, [r7, #8]
34185268:	68f8      	ldr	r0, [r7, #12]
3418526a:	f003 f83d 	bl	341882e8 <DCMIPP_EnableCapture>

  return HAL_OK;
3418526e:	2300      	movs	r3, #0
}
34185270:	4618      	mov	r0, r3
34185272:	3718      	adds	r7, #24
34185274:	46bd      	mov	sp, r7
34185276:	bd80      	pop	{r7, pc}
34185278:	341a4eec 	.word	0x341a4eec

3418527c <HAL_DCMIPP_CSI_PIPE_Stop>:
  * @param  Pipe           Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel Virtual Channel to be stopped can be a value from @ref DCMIPP_Virtual_Channel
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_CSI_PIPE_Stop(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
3418527c:	b580      	push	{r7, lr}
3418527e:	b086      	sub	sp, #24
34185280:	af00      	add	r7, sp, #0
34185282:	60f8      	str	r0, [r7, #12]
34185284:	60b9      	str	r1, [r7, #8]
34185286:	607a      	str	r2, [r7, #4]
  HAL_DCMIPP_PipeStateTypeDef pipe_state;
  HAL_StatusTypeDef status = HAL_OK;
34185288:	2300      	movs	r3, #0
3418528a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_DCMIPP_PIPE(Pipe));
3418528c:	68bb      	ldr	r3, [r7, #8]
3418528e:	2b00      	cmp	r3, #0
34185290:	d00a      	beq.n	341852a8 <HAL_DCMIPP_CSI_PIPE_Stop+0x2c>
34185292:	68bb      	ldr	r3, [r7, #8]
34185294:	2b01      	cmp	r3, #1
34185296:	d007      	beq.n	341852a8 <HAL_DCMIPP_CSI_PIPE_Stop+0x2c>
34185298:	68bb      	ldr	r3, [r7, #8]
3418529a:	2b02      	cmp	r3, #2
3418529c:	d004      	beq.n	341852a8 <HAL_DCMIPP_CSI_PIPE_Stop+0x2c>
3418529e:	f44f 61cd 	mov.w	r1, #1640	@ 0x668
341852a2:	4826      	ldr	r0, [pc, #152]	@ (3418533c <HAL_DCMIPP_CSI_PIPE_Stop+0xc0>)
341852a4:	f7fc ffe2 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
341852a8:	687b      	ldr	r3, [r7, #4]
341852aa:	2b00      	cmp	r3, #0
341852ac:	d00d      	beq.n	341852ca <HAL_DCMIPP_CSI_PIPE_Stop+0x4e>
341852ae:	687b      	ldr	r3, [r7, #4]
341852b0:	2b01      	cmp	r3, #1
341852b2:	d00a      	beq.n	341852ca <HAL_DCMIPP_CSI_PIPE_Stop+0x4e>
341852b4:	687b      	ldr	r3, [r7, #4]
341852b6:	2b02      	cmp	r3, #2
341852b8:	d007      	beq.n	341852ca <HAL_DCMIPP_CSI_PIPE_Stop+0x4e>
341852ba:	687b      	ldr	r3, [r7, #4]
341852bc:	2b03      	cmp	r3, #3
341852be:	d004      	beq.n	341852ca <HAL_DCMIPP_CSI_PIPE_Stop+0x4e>
341852c0:	f240 6169 	movw	r1, #1641	@ 0x669
341852c4:	481d      	ldr	r0, [pc, #116]	@ (3418533c <HAL_DCMIPP_CSI_PIPE_Stop+0xc0>)
341852c6:	f7fc ffd1 	bl	3418226c <assert_failed>

  /* Check pointer validity */
  if (hdcmipp == NULL)
341852ca:	68fb      	ldr	r3, [r7, #12]
341852cc:	2b00      	cmp	r3, #0
341852ce:	d101      	bne.n	341852d4 <HAL_DCMIPP_CSI_PIPE_Stop+0x58>
  {
    return HAL_ERROR;
341852d0:	2301      	movs	r3, #1
341852d2:	e02e      	b.n	34185332 <HAL_DCMIPP_CSI_PIPE_Stop+0xb6>
  }

  if ((hdcmipp->Instance->CMCR & DCMIPP_CMCR_INSEL) != DCMIPP_SERIAL_MODE)
341852d4:	68fb      	ldr	r3, [r7, #12]
341852d6:	681b      	ldr	r3, [r3, #0]
341852d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
341852dc:	f003 0301 	and.w	r3, r3, #1
341852e0:	2b01      	cmp	r3, #1
341852e2:	d001      	beq.n	341852e8 <HAL_DCMIPP_CSI_PIPE_Stop+0x6c>
  {
    return HAL_ERROR;
341852e4:	2301      	movs	r3, #1
341852e6:	e024      	b.n	34185332 <HAL_DCMIPP_CSI_PIPE_Stop+0xb6>
  }

  pipe_state = hdcmipp->PipeState[Pipe];
341852e8:	68fa      	ldr	r2, [r7, #12]
341852ea:	68bb      	ldr	r3, [r7, #8]
341852ec:	4413      	add	r3, r2
341852ee:	3305      	adds	r3, #5
341852f0:	781b      	ldrb	r3, [r3, #0]
341852f2:	75bb      	strb	r3, [r7, #22]

  /* Check DCMIPP Pipe state */
  if (pipe_state != HAL_DCMIPP_PIPE_STATE_RESET)
341852f4:	7dbb      	ldrb	r3, [r7, #22]
341852f6:	2b00      	cmp	r3, #0
341852f8:	d018      	beq.n	3418532c <HAL_DCMIPP_CSI_PIPE_Stop+0xb0>
  {
    if (DCMIPP_Stop(hdcmipp, Pipe) != HAL_OK)
341852fa:	68b9      	ldr	r1, [r7, #8]
341852fc:	68f8      	ldr	r0, [r7, #12]
341852fe:	f003 f848 	bl	34188392 <DCMIPP_Stop>
34185302:	4603      	mov	r3, r0
34185304:	2b00      	cmp	r3, #0
34185306:	d001      	beq.n	3418530c <HAL_DCMIPP_CSI_PIPE_Stop+0x90>
    {
      return HAL_ERROR;
34185308:	2301      	movs	r3, #1
3418530a:	e012      	b.n	34185332 <HAL_DCMIPP_CSI_PIPE_Stop+0xb6>
    }

    if (DCMIPP_CSI_VCStop(hdcmipp, VirtualChannel) != HAL_OK)
3418530c:	6879      	ldr	r1, [r7, #4]
3418530e:	68f8      	ldr	r0, [r7, #12]
34185310:	f003 f9bc 	bl	3418868c <DCMIPP_CSI_VCStop>
34185314:	4603      	mov	r3, r0
34185316:	2b00      	cmp	r3, #0
34185318:	d001      	beq.n	3418531e <HAL_DCMIPP_CSI_PIPE_Stop+0xa2>
    {
      return HAL_ERROR;
3418531a:	2301      	movs	r3, #1
3418531c:	e009      	b.n	34185332 <HAL_DCMIPP_CSI_PIPE_Stop+0xb6>
    }

    /* Update the DCMIPP pipe State */
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
3418531e:	68fa      	ldr	r2, [r7, #12]
34185320:	68bb      	ldr	r3, [r7, #8]
34185322:	4413      	add	r3, r2
34185324:	3305      	adds	r3, #5
34185326:	2201      	movs	r2, #1
34185328:	701a      	strb	r2, [r3, #0]
3418532a:	e001      	b.n	34185330 <HAL_DCMIPP_CSI_PIPE_Stop+0xb4>
  }
  else
  {
    status = HAL_ERROR;
3418532c:	2301      	movs	r3, #1
3418532e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
34185330:	7dfb      	ldrb	r3, [r7, #23]
}
34185332:	4618      	mov	r0, r3
34185334:	3718      	adds	r7, #24
34185336:	46bd      	mov	sp, r7
34185338:	bd80      	pop	{r7, pc}
3418533a:	bf00      	nop
3418533c:	341a4eec 	.word	0x341a4eec

34185340 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34185340:	b580      	push	{r7, lr}
34185342:	b084      	sub	sp, #16
34185344:	af00      	add	r7, sp, #0
34185346:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34185348:	687b      	ldr	r3, [r7, #4]
3418534a:	681b      	ldr	r3, [r3, #0]
3418534c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
34185350:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34185352:	687b      	ldr	r3, [r7, #4]
34185354:	681b      	ldr	r3, [r3, #0]
34185356:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3418535a:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
3418535c:	68fb      	ldr	r3, [r7, #12]
3418535e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34185362:	2b00      	cmp	r3, #0
34185364:	d01e      	beq.n	341853a4 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34185366:	68bb      	ldr	r3, [r7, #8]
34185368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418536c:	2b00      	cmp	r3, #0
3418536e:	d019      	beq.n	341853a4 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34185370:	687b      	ldr	r3, [r7, #4]
34185372:	681b      	ldr	r3, [r3, #0]
34185374:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185378:	687b      	ldr	r3, [r7, #4]
3418537a:	681b      	ldr	r3, [r3, #0]
3418537c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34185380:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34185384:	687b      	ldr	r3, [r7, #4]
34185386:	689b      	ldr	r3, [r3, #8]
34185388:	f043 0204 	orr.w	r2, r3, #4
3418538c:	687b      	ldr	r3, [r7, #4]
3418538e:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34185390:	687b      	ldr	r3, [r7, #4]
34185392:	681b      	ldr	r3, [r3, #0]
34185394:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34185398:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3418539c:	2100      	movs	r1, #0
3418539e:	6878      	ldr	r0, [r7, #4]
341853a0:	f000 fe67 	bl	34186072 <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
341853a4:	68fb      	ldr	r3, [r7, #12]
341853a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341853aa:	2b00      	cmp	r3, #0
341853ac:	d00e      	beq.n	341853cc <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
341853ae:	68bb      	ldr	r3, [r7, #8]
341853b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341853b4:	2b00      	cmp	r3, #0
341853b6:	d009      	beq.n	341853cc <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
341853b8:	687b      	ldr	r3, [r7, #4]
341853ba:	681b      	ldr	r3, [r3, #0]
341853bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
341853c0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
341853c4:	2100      	movs	r1, #0
341853c6:	6878      	ldr	r0, [r7, #4]
341853c8:	f7fc ff1e 	bl	34182208 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
341853cc:	68fb      	ldr	r3, [r7, #12]
341853ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341853d2:	2b00      	cmp	r3, #0
341853d4:	d023      	beq.n	3418541e <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
341853d6:	68bb      	ldr	r3, [r7, #8]
341853d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341853dc:	2b00      	cmp	r3, #0
341853de:	d01e      	beq.n	3418541e <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341853e0:	687b      	ldr	r3, [r7, #4]
341853e2:	681b      	ldr	r3, [r3, #0]
341853e4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341853e8:	f003 0304 	and.w	r3, r3, #4
341853ec:	2b04      	cmp	r3, #4
341853ee:	d10c      	bne.n	3418540a <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
341853f0:	687b      	ldr	r3, [r7, #4]
341853f2:	681b      	ldr	r3, [r3, #0]
341853f4:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341853f8:	687b      	ldr	r3, [r7, #4]
341853fa:	681b      	ldr	r3, [r3, #0]
341853fc:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34185400:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34185404:	687b      	ldr	r3, [r7, #4]
34185406:	2201      	movs	r2, #1
34185408:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3418540a:	687b      	ldr	r3, [r7, #4]
3418540c:	681b      	ldr	r3, [r3, #0]
3418540e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185412:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34185416:	2100      	movs	r1, #0
34185418:	6878      	ldr	r0, [r7, #4]
3418541a:	f7fc fee3 	bl	341821e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
3418541e:	68fb      	ldr	r3, [r7, #12]
34185420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185424:	2b00      	cmp	r3, #0
34185426:	d00e      	beq.n	34185446 <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34185428:	68bb      	ldr	r3, [r7, #8]
3418542a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418542e:	2b00      	cmp	r3, #0
34185430:	d009      	beq.n	34185446 <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34185432:	687b      	ldr	r3, [r7, #4]
34185434:	681b      	ldr	r3, [r3, #0]
34185436:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418543a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3418543e:	2100      	movs	r1, #0
34185440:	6878      	ldr	r0, [r7, #4]
34185442:	f000 fe0b 	bl	3418605c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34185446:	68fb      	ldr	r3, [r7, #12]
34185448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418544c:	2b00      	cmp	r3, #0
3418544e:	d021      	beq.n	34185494 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34185450:	68bb      	ldr	r3, [r7, #8]
34185452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34185456:	2b00      	cmp	r3, #0
34185458:	d01c      	beq.n	34185494 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3418545a:	687b      	ldr	r3, [r7, #4]
3418545c:	681b      	ldr	r3, [r3, #0]
3418545e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185462:	687b      	ldr	r3, [r7, #4]
34185464:	681b      	ldr	r3, [r3, #0]
34185466:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3418546a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
3418546e:	687b      	ldr	r3, [r7, #4]
34185470:	689b      	ldr	r3, [r3, #8]
34185472:	f043 0208 	orr.w	r2, r3, #8
34185476:	687b      	ldr	r3, [r7, #4]
34185478:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
3418547a:	687b      	ldr	r3, [r7, #4]
3418547c:	681b      	ldr	r3, [r3, #0]
3418547e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34185482:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34185486:	687b      	ldr	r3, [r7, #4]
34185488:	2204      	movs	r2, #4
3418548a:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3418548c:	2100      	movs	r1, #0
3418548e:	6878      	ldr	r0, [r7, #4]
34185490:	f000 fdfa 	bl	34186088 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34185494:	68fb      	ldr	r3, [r7, #12]
34185496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418549a:	2b00      	cmp	r3, #0
3418549c:	d00e      	beq.n	341854bc <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3418549e:	68bb      	ldr	r3, [r7, #8]
341854a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341854a4:	2b00      	cmp	r3, #0
341854a6:	d009      	beq.n	341854bc <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
341854a8:	687b      	ldr	r3, [r7, #4]
341854aa:	681b      	ldr	r3, [r3, #0]
341854ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
341854b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
341854b4:	2101      	movs	r1, #1
341854b6:	6878      	ldr	r0, [r7, #4]
341854b8:	f000 fdd0 	bl	3418605c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
341854bc:	68fb      	ldr	r3, [r7, #12]
341854be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
341854c2:	2b00      	cmp	r3, #0
341854c4:	d00e      	beq.n	341854e4 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
341854c6:	68bb      	ldr	r3, [r7, #8]
341854c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
341854cc:	2b00      	cmp	r3, #0
341854ce:	d009      	beq.n	341854e4 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
341854d0:	687b      	ldr	r3, [r7, #4]
341854d2:	681b      	ldr	r3, [r3, #0]
341854d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
341854d8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
341854dc:	2101      	movs	r1, #1
341854de:	6878      	ldr	r0, [r7, #4]
341854e0:	f7fc fe92 	bl	34182208 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
341854e4:	68fb      	ldr	r3, [r7, #12]
341854e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341854ea:	2b00      	cmp	r3, #0
341854ec:	d023      	beq.n	34185536 <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
341854ee:	68bb      	ldr	r3, [r7, #8]
341854f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341854f4:	2b00      	cmp	r3, #0
341854f6:	d01e      	beq.n	34185536 <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341854f8:	687b      	ldr	r3, [r7, #4]
341854fa:	681b      	ldr	r3, [r3, #0]
341854fc:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34185500:	f003 0304 	and.w	r3, r3, #4
34185504:	2b04      	cmp	r3, #4
34185506:	d10c      	bne.n	34185522 <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34185508:	687b      	ldr	r3, [r7, #4]
3418550a:	681b      	ldr	r3, [r3, #0]
3418550c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185510:	687b      	ldr	r3, [r7, #4]
34185512:	681b      	ldr	r3, [r3, #0]
34185514:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34185518:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
3418551c:	687b      	ldr	r3, [r7, #4]
3418551e:	2201      	movs	r2, #1
34185520:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34185522:	687b      	ldr	r3, [r7, #4]
34185524:	681b      	ldr	r3, [r3, #0]
34185526:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418552a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
3418552e:	2101      	movs	r1, #1
34185530:	6878      	ldr	r0, [r7, #4]
34185532:	f7fc fe57 	bl	341821e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34185536:	68fb      	ldr	r3, [r7, #12]
34185538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418553c:	2b00      	cmp	r3, #0
3418553e:	d021      	beq.n	34185584 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34185540:	68bb      	ldr	r3, [r7, #8]
34185542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34185546:	2b00      	cmp	r3, #0
34185548:	d01c      	beq.n	34185584 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
3418554a:	687b      	ldr	r3, [r7, #4]
3418554c:	681b      	ldr	r3, [r3, #0]
3418554e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185552:	687b      	ldr	r3, [r7, #4]
34185554:	681b      	ldr	r3, [r3, #0]
34185556:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
3418555a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
3418555e:	687b      	ldr	r3, [r7, #4]
34185560:	689b      	ldr	r3, [r3, #8]
34185562:	f043 0210 	orr.w	r2, r3, #16
34185566:	687b      	ldr	r3, [r7, #4]
34185568:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
3418556a:	687b      	ldr	r3, [r7, #4]
3418556c:	681b      	ldr	r3, [r3, #0]
3418556e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34185572:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34185576:	687b      	ldr	r3, [r7, #4]
34185578:	2204      	movs	r2, #4
3418557a:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
3418557c:	2101      	movs	r1, #1
3418557e:	6878      	ldr	r0, [r7, #4]
34185580:	f000 fd82 	bl	34186088 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34185584:	68fb      	ldr	r3, [r7, #12]
34185586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418558a:	2b00      	cmp	r3, #0
3418558c:	d00e      	beq.n	341855ac <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
3418558e:	68bb      	ldr	r3, [r7, #8]
34185590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34185594:	2b00      	cmp	r3, #0
34185596:	d009      	beq.n	341855ac <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34185598:	687b      	ldr	r3, [r7, #4]
3418559a:	681b      	ldr	r3, [r3, #0]
3418559c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
341855a0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
341855a4:	2102      	movs	r1, #2
341855a6:	6878      	ldr	r0, [r7, #4]
341855a8:	f000 fd58 	bl	3418605c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
341855ac:	68fb      	ldr	r3, [r7, #12]
341855ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
341855b2:	2b00      	cmp	r3, #0
341855b4:	d00e      	beq.n	341855d4 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
341855b6:	68bb      	ldr	r3, [r7, #8]
341855b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
341855bc:	2b00      	cmp	r3, #0
341855be:	d009      	beq.n	341855d4 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
341855c0:	687b      	ldr	r3, [r7, #4]
341855c2:	681b      	ldr	r3, [r3, #0]
341855c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
341855c8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
341855cc:	2102      	movs	r1, #2
341855ce:	6878      	ldr	r0, [r7, #4]
341855d0:	f7fc fe1a 	bl	34182208 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
341855d4:	68fb      	ldr	r3, [r7, #12]
341855d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
341855da:	2b00      	cmp	r3, #0
341855dc:	d023      	beq.n	34185626 <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
341855de:	68bb      	ldr	r3, [r7, #8]
341855e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
341855e4:	2b00      	cmp	r3, #0
341855e6:	d01e      	beq.n	34185626 <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341855e8:	687b      	ldr	r3, [r7, #4]
341855ea:	681b      	ldr	r3, [r3, #0]
341855ec:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
341855f0:	f003 0304 	and.w	r3, r3, #4
341855f4:	2b04      	cmp	r3, #4
341855f6:	d10c      	bne.n	34185612 <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
341855f8:	687b      	ldr	r3, [r7, #4]
341855fa:	681b      	ldr	r3, [r3, #0]
341855fc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185600:	687b      	ldr	r3, [r7, #4]
34185602:	681b      	ldr	r3, [r3, #0]
34185604:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34185608:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
3418560c:	687b      	ldr	r3, [r7, #4]
3418560e:	2201      	movs	r2, #1
34185610:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34185612:	687b      	ldr	r3, [r7, #4]
34185614:	681b      	ldr	r3, [r3, #0]
34185616:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
3418561a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3418561e:	2102      	movs	r1, #2
34185620:	6878      	ldr	r0, [r7, #4]
34185622:	f7fc fddf 	bl	341821e4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34185626:	68fb      	ldr	r3, [r7, #12]
34185628:	2b00      	cmp	r3, #0
3418562a:	da1f      	bge.n	3418566c <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
3418562c:	68bb      	ldr	r3, [r7, #8]
3418562e:	2b00      	cmp	r3, #0
34185630:	da1c      	bge.n	3418566c <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34185632:	687b      	ldr	r3, [r7, #4]
34185634:	681b      	ldr	r3, [r3, #0]
34185636:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3418563a:	687b      	ldr	r3, [r7, #4]
3418563c:	681b      	ldr	r3, [r3, #0]
3418563e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34185642:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34185646:	687b      	ldr	r3, [r7, #4]
34185648:	689b      	ldr	r3, [r3, #8]
3418564a:	f043 0220 	orr.w	r2, r3, #32
3418564e:	687b      	ldr	r3, [r7, #4]
34185650:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34185652:	687b      	ldr	r3, [r7, #4]
34185654:	681b      	ldr	r3, [r3, #0]
34185656:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418565a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
3418565e:	687b      	ldr	r3, [r7, #4]
34185660:	2204      	movs	r2, #4
34185662:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34185664:	2102      	movs	r1, #2
34185666:	6878      	ldr	r0, [r7, #4]
34185668:	f000 fd0e 	bl	34186088 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
3418566c:	68fb      	ldr	r3, [r7, #12]
3418566e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185672:	2b00      	cmp	r3, #0
34185674:	d01f      	beq.n	341856b6 <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34185676:	68bb      	ldr	r3, [r7, #8]
34185678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418567c:	2b00      	cmp	r3, #0
3418567e:	d01a      	beq.n	341856b6 <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34185680:	687b      	ldr	r3, [r7, #4]
34185682:	681b      	ldr	r3, [r3, #0]
34185684:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34185688:	687b      	ldr	r3, [r7, #4]
3418568a:	681b      	ldr	r3, [r3, #0]
3418568c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34185690:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34185694:	687b      	ldr	r3, [r7, #4]
34185696:	689b      	ldr	r3, [r3, #8]
34185698:	f043 0202 	orr.w	r2, r3, #2
3418569c:	687b      	ldr	r3, [r7, #4]
3418569e:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
341856a0:	687b      	ldr	r3, [r7, #4]
341856a2:	681b      	ldr	r3, [r3, #0]
341856a4:	2240      	movs	r2, #64	@ 0x40
341856a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341856aa:	687b      	ldr	r3, [r7, #4]
341856ac:	2204      	movs	r2, #4
341856ae:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341856b0:	6878      	ldr	r0, [r7, #4]
341856b2:	f000 fcf4 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
341856b6:	68fb      	ldr	r3, [r7, #12]
341856b8:	f003 0320 	and.w	r3, r3, #32
341856bc:	2b00      	cmp	r3, #0
341856be:	d01f      	beq.n	34185700 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
341856c0:	68bb      	ldr	r3, [r7, #8]
341856c2:	f003 0320 	and.w	r3, r3, #32
341856c6:	2b00      	cmp	r3, #0
341856c8:	d01a      	beq.n	34185700 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
341856ca:	687b      	ldr	r3, [r7, #4]
341856cc:	681b      	ldr	r3, [r3, #0]
341856ce:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341856d2:	687b      	ldr	r3, [r7, #4]
341856d4:	681b      	ldr	r3, [r3, #0]
341856d6:	f022 0220 	bic.w	r2, r2, #32
341856da:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
341856de:	687b      	ldr	r3, [r7, #4]
341856e0:	689b      	ldr	r3, [r3, #8]
341856e2:	f043 0201 	orr.w	r2, r3, #1
341856e6:	687b      	ldr	r3, [r7, #4]
341856e8:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
341856ea:	687b      	ldr	r3, [r7, #4]
341856ec:	681b      	ldr	r3, [r3, #0]
341856ee:	2220      	movs	r2, #32
341856f0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
341856f4:	687b      	ldr	r3, [r7, #4]
341856f6:	2204      	movs	r2, #4
341856f8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
341856fa:	6878      	ldr	r0, [r7, #4]
341856fc:	f000 fccf 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34185700:	bf00      	nop
34185702:	3710      	adds	r7, #16
34185704:	46bd      	mov	sp, r7
34185706:	bd80      	pop	{r7, pc}

34185708 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34185708:	b580      	push	{r7, lr}
3418570a:	b088      	sub	sp, #32
3418570c:	af00      	add	r7, sp, #0
3418570e:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34185710:	4bb1      	ldr	r3, [pc, #708]	@ (341859d8 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
34185712:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34185714:	69fb      	ldr	r3, [r7, #28]
34185716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418571a:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
3418571c:	69fb      	ldr	r3, [r7, #28]
3418571e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34185722:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34185724:	69fb      	ldr	r3, [r7, #28]
34185726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418572a:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
3418572c:	69fb      	ldr	r3, [r7, #28]
3418572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34185732:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34185734:	69bb      	ldr	r3, [r7, #24]
34185736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418573a:	2b00      	cmp	r3, #0
3418573c:	d014      	beq.n	34185768 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
3418573e:	693b      	ldr	r3, [r7, #16]
34185740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34185744:	2b00      	cmp	r3, #0
34185746:	d00f      	beq.n	34185768 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34185748:	69fb      	ldr	r3, [r7, #28]
3418574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418574e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
34185752:	69fb      	ldr	r3, [r7, #28]
34185754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34185758:	69fb      	ldr	r3, [r7, #28]
3418575a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3418575e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34185762:	6878      	ldr	r0, [r7, #4]
34185764:	f000 fcb0 	bl	341860c8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34185768:	69bb      	ldr	r3, [r7, #24]
3418576a:	f003 0308 	and.w	r3, r3, #8
3418576e:	2b00      	cmp	r3, #0
34185770:	d01c      	beq.n	341857ac <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34185772:	693b      	ldr	r3, [r7, #16]
34185774:	f003 0308 	and.w	r3, r3, #8
34185778:	2b00      	cmp	r3, #0
3418577a:	d017      	beq.n	341857ac <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418577c:	687b      	ldr	r3, [r7, #4]
3418577e:	681b      	ldr	r3, [r3, #0]
34185780:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185784:	f003 0304 	and.w	r3, r3, #4
34185788:	2b04      	cmp	r3, #4
3418578a:	d107      	bne.n	3418579c <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
3418578c:	69fb      	ldr	r3, [r7, #28]
3418578e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185792:	f023 0208 	bic.w	r2, r3, #8
34185796:	69fb      	ldr	r3, [r7, #28]
34185798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
3418579c:	69fb      	ldr	r3, [r7, #28]
3418579e:	2208      	movs	r2, #8
341857a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
341857a4:	2103      	movs	r1, #3
341857a6:	6878      	ldr	r0, [r7, #4]
341857a8:	f000 fcc3 	bl	34186132 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
341857ac:	69bb      	ldr	r3, [r7, #24]
341857ae:	f003 0304 	and.w	r3, r3, #4
341857b2:	2b00      	cmp	r3, #0
341857b4:	d01c      	beq.n	341857f0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
341857b6:	693b      	ldr	r3, [r7, #16]
341857b8:	f003 0304 	and.w	r3, r3, #4
341857bc:	2b00      	cmp	r3, #0
341857be:	d017      	beq.n	341857f0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341857c0:	687b      	ldr	r3, [r7, #4]
341857c2:	681b      	ldr	r3, [r3, #0]
341857c4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341857c8:	f003 0304 	and.w	r3, r3, #4
341857cc:	2b04      	cmp	r3, #4
341857ce:	d107      	bne.n	341857e0 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
341857d0:	69fb      	ldr	r3, [r7, #28]
341857d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341857d6:	f023 0204 	bic.w	r2, r3, #4
341857da:	69fb      	ldr	r3, [r7, #28]
341857dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
341857e0:	69fb      	ldr	r3, [r7, #28]
341857e2:	2204      	movs	r2, #4
341857e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
341857e8:	2102      	movs	r1, #2
341857ea:	6878      	ldr	r0, [r7, #4]
341857ec:	f000 fca1 	bl	34186132 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
341857f0:	69bb      	ldr	r3, [r7, #24]
341857f2:	f003 0302 	and.w	r3, r3, #2
341857f6:	2b00      	cmp	r3, #0
341857f8:	d01c      	beq.n	34185834 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
341857fa:	693b      	ldr	r3, [r7, #16]
341857fc:	f003 0302 	and.w	r3, r3, #2
34185800:	2b00      	cmp	r3, #0
34185802:	d017      	beq.n	34185834 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185804:	687b      	ldr	r3, [r7, #4]
34185806:	681b      	ldr	r3, [r3, #0]
34185808:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3418580c:	f003 0304 	and.w	r3, r3, #4
34185810:	2b04      	cmp	r3, #4
34185812:	d107      	bne.n	34185824 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34185814:	69fb      	ldr	r3, [r7, #28]
34185816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418581a:	f023 0202 	bic.w	r2, r3, #2
3418581e:	69fb      	ldr	r3, [r7, #28]
34185820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34185824:	69fb      	ldr	r3, [r7, #28]
34185826:	2202      	movs	r2, #2
34185828:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
3418582c:	2101      	movs	r1, #1
3418582e:	6878      	ldr	r0, [r7, #4]
34185830:	f000 fc7f 	bl	34186132 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34185834:	69bb      	ldr	r3, [r7, #24]
34185836:	f003 0301 	and.w	r3, r3, #1
3418583a:	2b00      	cmp	r3, #0
3418583c:	d01c      	beq.n	34185878 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
3418583e:	693b      	ldr	r3, [r7, #16]
34185840:	f003 0301 	and.w	r3, r3, #1
34185844:	2b00      	cmp	r3, #0
34185846:	d017      	beq.n	34185878 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185848:	687b      	ldr	r3, [r7, #4]
3418584a:	681b      	ldr	r3, [r3, #0]
3418584c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185850:	f003 0304 	and.w	r3, r3, #4
34185854:	2b04      	cmp	r3, #4
34185856:	d107      	bne.n	34185868 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34185858:	69fb      	ldr	r3, [r7, #28]
3418585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418585e:	f023 0201 	bic.w	r2, r3, #1
34185862:	69fb      	ldr	r3, [r7, #28]
34185864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34185868:	69fb      	ldr	r3, [r7, #28]
3418586a:	2201      	movs	r2, #1
3418586c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34185870:	2100      	movs	r1, #0
34185872:	6878      	ldr	r0, [r7, #4]
34185874:	f000 fc5d 	bl	34186132 <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34185878:	69bb      	ldr	r3, [r7, #24]
3418587a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418587e:	2b00      	cmp	r3, #0
34185880:	d01d      	beq.n	341858be <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34185882:	693b      	ldr	r3, [r7, #16]
34185884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34185888:	2b00      	cmp	r3, #0
3418588a:	d018      	beq.n	341858be <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418588c:	687b      	ldr	r3, [r7, #4]
3418588e:	681b      	ldr	r3, [r3, #0]
34185890:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185894:	f003 0304 	and.w	r3, r3, #4
34185898:	2b04      	cmp	r3, #4
3418589a:	d107      	bne.n	341858ac <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
3418589c:	69fb      	ldr	r3, [r7, #28]
3418589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341858a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
341858a6:	69fb      	ldr	r3, [r7, #28]
341858a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
341858ac:	69fb      	ldr	r3, [r7, #28]
341858ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
341858b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
341858b6:	2103      	movs	r1, #3
341858b8:	6878      	ldr	r0, [r7, #4]
341858ba:	f000 fc19 	bl	341860f0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
341858be:	69bb      	ldr	r3, [r7, #24]
341858c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341858c4:	2b00      	cmp	r3, #0
341858c6:	d01d      	beq.n	34185904 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
341858c8:	693b      	ldr	r3, [r7, #16]
341858ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341858ce:	2b00      	cmp	r3, #0
341858d0:	d018      	beq.n	34185904 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341858d2:	687b      	ldr	r3, [r7, #4]
341858d4:	681b      	ldr	r3, [r3, #0]
341858d6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341858da:	f003 0304 	and.w	r3, r3, #4
341858de:	2b04      	cmp	r3, #4
341858e0:	d107      	bne.n	341858f2 <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
341858e2:	69fb      	ldr	r3, [r7, #28]
341858e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341858e8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
341858ec:	69fb      	ldr	r3, [r7, #28]
341858ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
341858f2:	69fb      	ldr	r3, [r7, #28]
341858f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
341858f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
341858fc:	2102      	movs	r1, #2
341858fe:	6878      	ldr	r0, [r7, #4]
34185900:	f000 fbf6 	bl	341860f0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34185904:	69bb      	ldr	r3, [r7, #24]
34185906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418590a:	2b00      	cmp	r3, #0
3418590c:	d01d      	beq.n	3418594a <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
3418590e:	693b      	ldr	r3, [r7, #16]
34185910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34185914:	2b00      	cmp	r3, #0
34185916:	d018      	beq.n	3418594a <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185918:	687b      	ldr	r3, [r7, #4]
3418591a:	681b      	ldr	r3, [r3, #0]
3418591c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185920:	f003 0304 	and.w	r3, r3, #4
34185924:	2b04      	cmp	r3, #4
34185926:	d107      	bne.n	34185938 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34185928:	69fb      	ldr	r3, [r7, #28]
3418592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418592e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34185932:	69fb      	ldr	r3, [r7, #28]
34185934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34185938:	69fb      	ldr	r3, [r7, #28]
3418593a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418593e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34185942:	2101      	movs	r1, #1
34185944:	6878      	ldr	r0, [r7, #4]
34185946:	f000 fbd3 	bl	341860f0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
3418594a:	69bb      	ldr	r3, [r7, #24]
3418594c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34185950:	2b00      	cmp	r3, #0
34185952:	d01d      	beq.n	34185990 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34185954:	693b      	ldr	r3, [r7, #16]
34185956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418595a:	2b00      	cmp	r3, #0
3418595c:	d018      	beq.n	34185990 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3418595e:	687b      	ldr	r3, [r7, #4]
34185960:	681b      	ldr	r3, [r3, #0]
34185962:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185966:	f003 0304 	and.w	r3, r3, #4
3418596a:	2b04      	cmp	r3, #4
3418596c:	d107      	bne.n	3418597e <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
3418596e:	69fb      	ldr	r3, [r7, #28]
34185970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34185978:	69fb      	ldr	r3, [r7, #28]
3418597a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
3418597e:	69fb      	ldr	r3, [r7, #28]
34185980:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34185984:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34185988:	2100      	movs	r1, #0
3418598a:	6878      	ldr	r0, [r7, #4]
3418598c:	f000 fbb0 	bl	341860f0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34185990:	69bb      	ldr	r3, [r7, #24]
34185992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185996:	2b00      	cmp	r3, #0
34185998:	d020      	beq.n	341859dc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
3418599a:	693b      	ldr	r3, [r7, #16]
3418599c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341859a0:	2b00      	cmp	r3, #0
341859a2:	d01b      	beq.n	341859dc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341859a4:	687b      	ldr	r3, [r7, #4]
341859a6:	681b      	ldr	r3, [r3, #0]
341859a8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341859ac:	f003 0304 	and.w	r3, r3, #4
341859b0:	2b04      	cmp	r3, #4
341859b2:	d107      	bne.n	341859c4 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
341859b4:	69fb      	ldr	r3, [r7, #28]
341859b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341859ba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
341859be:	69fb      	ldr	r3, [r7, #28]
341859c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
341859c4:	69fb      	ldr	r3, [r7, #28]
341859c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341859ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
341859ce:	2103      	movs	r1, #3
341859d0:	6878      	ldr	r0, [r7, #4]
341859d2:	f000 fb98 	bl	34186106 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
341859d6:	e001      	b.n	341859dc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
341859d8:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
341859dc:	69bb      	ldr	r3, [r7, #24]
341859de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341859e2:	2b00      	cmp	r3, #0
341859e4:	d01d      	beq.n	34185a22 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
341859e6:	693b      	ldr	r3, [r7, #16]
341859e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341859ec:	2b00      	cmp	r3, #0
341859ee:	d018      	beq.n	34185a22 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
341859f0:	687b      	ldr	r3, [r7, #4]
341859f2:	681b      	ldr	r3, [r3, #0]
341859f4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
341859f8:	f003 0304 	and.w	r3, r3, #4
341859fc:	2b04      	cmp	r3, #4
341859fe:	d107      	bne.n	34185a10 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34185a00:	69fb      	ldr	r3, [r7, #28]
34185a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185a06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34185a0a:	69fb      	ldr	r3, [r7, #28]
34185a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34185a10:	69fb      	ldr	r3, [r7, #28]
34185a12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34185a16:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34185a1a:	2102      	movs	r1, #2
34185a1c:	6878      	ldr	r0, [r7, #4]
34185a1e:	f000 fb72 	bl	34186106 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34185a22:	69bb      	ldr	r3, [r7, #24]
34185a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185a28:	2b00      	cmp	r3, #0
34185a2a:	d01d      	beq.n	34185a68 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34185a2c:	693b      	ldr	r3, [r7, #16]
34185a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185a32:	2b00      	cmp	r3, #0
34185a34:	d018      	beq.n	34185a68 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185a36:	687b      	ldr	r3, [r7, #4]
34185a38:	681b      	ldr	r3, [r3, #0]
34185a3a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185a3e:	f003 0304 	and.w	r3, r3, #4
34185a42:	2b04      	cmp	r3, #4
34185a44:	d107      	bne.n	34185a56 <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34185a46:	69fb      	ldr	r3, [r7, #28]
34185a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185a4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34185a50:	69fb      	ldr	r3, [r7, #28]
34185a52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34185a56:	69fb      	ldr	r3, [r7, #28]
34185a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185a5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34185a60:	2101      	movs	r1, #1
34185a62:	6878      	ldr	r0, [r7, #4]
34185a64:	f000 fb4f 	bl	34186106 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34185a68:	69bb      	ldr	r3, [r7, #24]
34185a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185a6e:	2b00      	cmp	r3, #0
34185a70:	d01d      	beq.n	34185aae <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34185a72:	693b      	ldr	r3, [r7, #16]
34185a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185a78:	2b00      	cmp	r3, #0
34185a7a:	d018      	beq.n	34185aae <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185a7c:	687b      	ldr	r3, [r7, #4]
34185a7e:	681b      	ldr	r3, [r3, #0]
34185a80:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185a84:	f003 0304 	and.w	r3, r3, #4
34185a88:	2b04      	cmp	r3, #4
34185a8a:	d107      	bne.n	34185a9c <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34185a8c:	69fb      	ldr	r3, [r7, #28]
34185a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185a92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34185a96:	69fb      	ldr	r3, [r7, #28]
34185a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34185a9c:	69fb      	ldr	r3, [r7, #28]
34185a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34185aa2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34185aa6:	2100      	movs	r1, #0
34185aa8:	6878      	ldr	r0, [r7, #4]
34185aaa:	f000 fb2c 	bl	34186106 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34185aae:	69bb      	ldr	r3, [r7, #24]
34185ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34185ab4:	2b00      	cmp	r3, #0
34185ab6:	d01c      	beq.n	34185af2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34185ab8:	693b      	ldr	r3, [r7, #16]
34185aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34185abe:	2b00      	cmp	r3, #0
34185ac0:	d017      	beq.n	34185af2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185ac2:	687b      	ldr	r3, [r7, #4]
34185ac4:	681b      	ldr	r3, [r3, #0]
34185ac6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185aca:	f003 0304 	and.w	r3, r3, #4
34185ace:	2b04      	cmp	r3, #4
34185ad0:	d107      	bne.n	34185ae2 <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34185ad2:	69fb      	ldr	r3, [r7, #28]
34185ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185ad8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34185adc:	69fb      	ldr	r3, [r7, #28]
34185ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34185ae2:	69fb      	ldr	r3, [r7, #28]
34185ae4:	2280      	movs	r2, #128	@ 0x80
34185ae6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34185aea:	2103      	movs	r1, #3
34185aec:	6878      	ldr	r0, [r7, #4]
34185aee:	f000 fb15 	bl	3418611c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34185af2:	69bb      	ldr	r3, [r7, #24]
34185af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185af8:	2b00      	cmp	r3, #0
34185afa:	d01c      	beq.n	34185b36 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34185afc:	693b      	ldr	r3, [r7, #16]
34185afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185b02:	2b00      	cmp	r3, #0
34185b04:	d017      	beq.n	34185b36 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185b06:	687b      	ldr	r3, [r7, #4]
34185b08:	681b      	ldr	r3, [r3, #0]
34185b0a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185b0e:	f003 0304 	and.w	r3, r3, #4
34185b12:	2b04      	cmp	r3, #4
34185b14:	d107      	bne.n	34185b26 <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34185b16:	69fb      	ldr	r3, [r7, #28]
34185b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185b1c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34185b20:	69fb      	ldr	r3, [r7, #28]
34185b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34185b26:	69fb      	ldr	r3, [r7, #28]
34185b28:	2240      	movs	r2, #64	@ 0x40
34185b2a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34185b2e:	2102      	movs	r1, #2
34185b30:	6878      	ldr	r0, [r7, #4]
34185b32:	f000 faf3 	bl	3418611c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34185b36:	69bb      	ldr	r3, [r7, #24]
34185b38:	f003 0320 	and.w	r3, r3, #32
34185b3c:	2b00      	cmp	r3, #0
34185b3e:	d01c      	beq.n	34185b7a <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34185b40:	693b      	ldr	r3, [r7, #16]
34185b42:	f003 0320 	and.w	r3, r3, #32
34185b46:	2b00      	cmp	r3, #0
34185b48:	d017      	beq.n	34185b7a <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185b4a:	687b      	ldr	r3, [r7, #4]
34185b4c:	681b      	ldr	r3, [r3, #0]
34185b4e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185b52:	f003 0304 	and.w	r3, r3, #4
34185b56:	2b04      	cmp	r3, #4
34185b58:	d107      	bne.n	34185b6a <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34185b5a:	69fb      	ldr	r3, [r7, #28]
34185b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185b60:	f023 0220 	bic.w	r2, r3, #32
34185b64:	69fb      	ldr	r3, [r7, #28]
34185b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34185b6a:	69fb      	ldr	r3, [r7, #28]
34185b6c:	2220      	movs	r2, #32
34185b6e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34185b72:	2101      	movs	r1, #1
34185b74:	6878      	ldr	r0, [r7, #4]
34185b76:	f000 fad1 	bl	3418611c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34185b7a:	69bb      	ldr	r3, [r7, #24]
34185b7c:	f003 0310 	and.w	r3, r3, #16
34185b80:	2b00      	cmp	r3, #0
34185b82:	d01c      	beq.n	34185bbe <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34185b84:	693b      	ldr	r3, [r7, #16]
34185b86:	f003 0310 	and.w	r3, r3, #16
34185b8a:	2b00      	cmp	r3, #0
34185b8c:	d017      	beq.n	34185bbe <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34185b8e:	687b      	ldr	r3, [r7, #4]
34185b90:	681b      	ldr	r3, [r3, #0]
34185b92:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34185b96:	f003 0304 	and.w	r3, r3, #4
34185b9a:	2b04      	cmp	r3, #4
34185b9c:	d107      	bne.n	34185bae <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34185b9e:	69fb      	ldr	r3, [r7, #28]
34185ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185ba4:	f023 0210 	bic.w	r2, r3, #16
34185ba8:	69fb      	ldr	r3, [r7, #28]
34185baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34185bae:	69fb      	ldr	r3, [r7, #28]
34185bb0:	2210      	movs	r2, #16
34185bb2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34185bb6:	2100      	movs	r1, #0
34185bb8:	6878      	ldr	r0, [r7, #4]
34185bba:	f000 faaf 	bl	3418611c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34185bbe:	69bb      	ldr	r3, [r7, #24]
34185bc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34185bc4:	2b00      	cmp	r3, #0
34185bc6:	d01a      	beq.n	34185bfe <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34185bc8:	693b      	ldr	r3, [r7, #16]
34185bca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34185bce:	2b00      	cmp	r3, #0
34185bd0:	d015      	beq.n	34185bfe <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34185bd2:	69fb      	ldr	r3, [r7, #28]
34185bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185bd8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34185bdc:	69fb      	ldr	r3, [r7, #28]
34185bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34185be2:	69fb      	ldr	r3, [r7, #28]
34185be4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34185be8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34185bec:	687b      	ldr	r3, [r7, #4]
34185bee:	689b      	ldr	r3, [r3, #8]
34185bf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34185bf4:	687b      	ldr	r3, [r7, #4]
34185bf6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185bf8:	6878      	ldr	r0, [r7, #4]
34185bfa:	f000 fa50 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34185bfe:	69bb      	ldr	r3, [r7, #24]
34185c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34185c04:	2b00      	cmp	r3, #0
34185c06:	d01a      	beq.n	34185c3e <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34185c08:	693b      	ldr	r3, [r7, #16]
34185c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34185c0e:	2b00      	cmp	r3, #0
34185c10:	d015      	beq.n	34185c3e <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34185c12:	69fb      	ldr	r3, [r7, #28]
34185c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185c18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34185c1c:	69fb      	ldr	r3, [r7, #28]
34185c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34185c22:	69fb      	ldr	r3, [r7, #28]
34185c24:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34185c28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34185c2c:	687b      	ldr	r3, [r7, #4]
34185c2e:	689b      	ldr	r3, [r3, #8]
34185c30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34185c34:	687b      	ldr	r3, [r7, #4]
34185c36:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185c38:	6878      	ldr	r0, [r7, #4]
34185c3a:	f000 fa30 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34185c3e:	69bb      	ldr	r3, [r7, #24]
34185c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34185c44:	2b00      	cmp	r3, #0
34185c46:	d01a      	beq.n	34185c7e <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34185c48:	693b      	ldr	r3, [r7, #16]
34185c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34185c4e:	2b00      	cmp	r3, #0
34185c50:	d015      	beq.n	34185c7e <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34185c52:	69fb      	ldr	r3, [r7, #28]
34185c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185c58:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34185c5c:	69fb      	ldr	r3, [r7, #28]
34185c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34185c62:	69fb      	ldr	r3, [r7, #28]
34185c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34185c68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34185c6c:	687b      	ldr	r3, [r7, #4]
34185c6e:	689b      	ldr	r3, [r3, #8]
34185c70:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34185c74:	687b      	ldr	r3, [r7, #4]
34185c76:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185c78:	6878      	ldr	r0, [r7, #4]
34185c7a:	f000 fa10 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34185c7e:	69bb      	ldr	r3, [r7, #24]
34185c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34185c84:	2b00      	cmp	r3, #0
34185c86:	d01a      	beq.n	34185cbe <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34185c88:	693b      	ldr	r3, [r7, #16]
34185c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34185c8e:	2b00      	cmp	r3, #0
34185c90:	d015      	beq.n	34185cbe <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34185c92:	69fb      	ldr	r3, [r7, #28]
34185c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185c98:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34185c9c:	69fb      	ldr	r3, [r7, #28]
34185c9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34185ca2:	69fb      	ldr	r3, [r7, #28]
34185ca4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34185ca8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34185cac:	687b      	ldr	r3, [r7, #4]
34185cae:	689b      	ldr	r3, [r3, #8]
34185cb0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34185cb4:	687b      	ldr	r3, [r7, #4]
34185cb6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185cb8:	6878      	ldr	r0, [r7, #4]
34185cba:	f000 f9f0 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34185cbe:	69bb      	ldr	r3, [r7, #24]
34185cc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34185cc4:	2b00      	cmp	r3, #0
34185cc6:	d01a      	beq.n	34185cfe <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34185cc8:	693b      	ldr	r3, [r7, #16]
34185cca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34185cce:	2b00      	cmp	r3, #0
34185cd0:	d015      	beq.n	34185cfe <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34185cd2:	69fb      	ldr	r3, [r7, #28]
34185cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185cd8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34185cdc:	69fb      	ldr	r3, [r7, #28]
34185cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34185ce2:	69fb      	ldr	r3, [r7, #28]
34185ce4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34185ce8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34185cec:	687b      	ldr	r3, [r7, #4]
34185cee:	689b      	ldr	r3, [r3, #8]
34185cf0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
34185cf4:	687b      	ldr	r3, [r7, #4]
34185cf6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185cf8:	6878      	ldr	r0, [r7, #4]
34185cfa:	f000 f9d0 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34185cfe:	69bb      	ldr	r3, [r7, #24]
34185d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34185d04:	2b00      	cmp	r3, #0
34185d06:	d01a      	beq.n	34185d3e <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34185d08:	693b      	ldr	r3, [r7, #16]
34185d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34185d0e:	2b00      	cmp	r3, #0
34185d10:	d015      	beq.n	34185d3e <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34185d12:	69fb      	ldr	r3, [r7, #28]
34185d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185d18:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34185d1c:	69fb      	ldr	r3, [r7, #28]
34185d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34185d22:	69fb      	ldr	r3, [r7, #28]
34185d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34185d28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34185d2c:	687b      	ldr	r3, [r7, #4]
34185d2e:	689b      	ldr	r3, [r3, #8]
34185d30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34185d34:	687b      	ldr	r3, [r7, #4]
34185d36:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185d38:	6878      	ldr	r0, [r7, #4]
34185d3a:	f000 f9b0 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34185d3e:	69bb      	ldr	r3, [r7, #24]
34185d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34185d44:	2b00      	cmp	r3, #0
34185d46:	d01a      	beq.n	34185d7e <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34185d48:	693b      	ldr	r3, [r7, #16]
34185d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34185d4e:	2b00      	cmp	r3, #0
34185d50:	d015      	beq.n	34185d7e <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34185d52:	69fb      	ldr	r3, [r7, #28]
34185d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185d58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34185d5c:	69fb      	ldr	r3, [r7, #28]
34185d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34185d62:	69fb      	ldr	r3, [r7, #28]
34185d64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34185d68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34185d6c:	687b      	ldr	r3, [r7, #4]
34185d6e:	689b      	ldr	r3, [r3, #8]
34185d70:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34185d74:	687b      	ldr	r3, [r7, #4]
34185d76:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34185d78:	6878      	ldr	r0, [r7, #4]
34185d7a:	f000 f990 	bl	3418609e <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34185d7e:	697b      	ldr	r3, [r7, #20]
34185d80:	f003 0301 	and.w	r3, r3, #1
34185d84:	2b00      	cmp	r3, #0
34185d86:	d01d      	beq.n	34185dc4 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34185d88:	68fb      	ldr	r3, [r7, #12]
34185d8a:	f003 0301 	and.w	r3, r3, #1
34185d8e:	2b00      	cmp	r3, #0
34185d90:	d018      	beq.n	34185dc4 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34185d92:	69fb      	ldr	r3, [r7, #28]
34185d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185d98:	f023 0201 	bic.w	r2, r3, #1
34185d9c:	69fb      	ldr	r3, [r7, #28]
34185d9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34185da2:	69fb      	ldr	r3, [r7, #28]
34185da4:	2201      	movs	r2, #1
34185da6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34185daa:	687b      	ldr	r3, [r7, #4]
34185dac:	689b      	ldr	r3, [r3, #8]
34185dae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34185db2:	687b      	ldr	r3, [r7, #4]
34185db4:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185db6:	687b      	ldr	r3, [r7, #4]
34185db8:	2204      	movs	r2, #4
34185dba:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34185dbc:	2101      	movs	r1, #1
34185dbe:	6878      	ldr	r0, [r7, #4]
34185dc0:	f000 f977 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34185dc4:	697b      	ldr	r3, [r7, #20]
34185dc6:	f003 0302 	and.w	r3, r3, #2
34185dca:	2b00      	cmp	r3, #0
34185dcc:	d01d      	beq.n	34185e0a <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34185dce:	68fb      	ldr	r3, [r7, #12]
34185dd0:	f003 0302 	and.w	r3, r3, #2
34185dd4:	2b00      	cmp	r3, #0
34185dd6:	d018      	beq.n	34185e0a <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34185dd8:	69fb      	ldr	r3, [r7, #28]
34185dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185dde:	f023 0202 	bic.w	r2, r3, #2
34185de2:	69fb      	ldr	r3, [r7, #28]
34185de4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34185de8:	69fb      	ldr	r3, [r7, #28]
34185dea:	2202      	movs	r2, #2
34185dec:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34185df0:	687b      	ldr	r3, [r7, #4]
34185df2:	689b      	ldr	r3, [r3, #8]
34185df4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34185df8:	687b      	ldr	r3, [r7, #4]
34185dfa:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185dfc:	687b      	ldr	r3, [r7, #4]
34185dfe:	2204      	movs	r2, #4
34185e00:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34185e02:	2101      	movs	r1, #1
34185e04:	6878      	ldr	r0, [r7, #4]
34185e06:	f000 f954 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34185e0a:	697b      	ldr	r3, [r7, #20]
34185e0c:	f003 0304 	and.w	r3, r3, #4
34185e10:	2b00      	cmp	r3, #0
34185e12:	d01a      	beq.n	34185e4a <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34185e14:	68fb      	ldr	r3, [r7, #12]
34185e16:	f003 0304 	and.w	r3, r3, #4
34185e1a:	2b00      	cmp	r3, #0
34185e1c:	d015      	beq.n	34185e4a <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34185e1e:	69fb      	ldr	r3, [r7, #28]
34185e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185e24:	f023 0204 	bic.w	r2, r3, #4
34185e28:	69fb      	ldr	r3, [r7, #28]
34185e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34185e2e:	69fb      	ldr	r3, [r7, #28]
34185e30:	2204      	movs	r2, #4
34185e32:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34185e36:	687b      	ldr	r3, [r7, #4]
34185e38:	689b      	ldr	r3, [r3, #8]
34185e3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34185e3e:	687b      	ldr	r3, [r7, #4]
34185e40:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34185e42:	2101      	movs	r1, #1
34185e44:	6878      	ldr	r0, [r7, #4]
34185e46:	f000 f934 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34185e4a:	697b      	ldr	r3, [r7, #20]
34185e4c:	f003 0308 	and.w	r3, r3, #8
34185e50:	2b00      	cmp	r3, #0
34185e52:	d01a      	beq.n	34185e8a <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34185e54:	68fb      	ldr	r3, [r7, #12]
34185e56:	f003 0308 	and.w	r3, r3, #8
34185e5a:	2b00      	cmp	r3, #0
34185e5c:	d015      	beq.n	34185e8a <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34185e5e:	69fb      	ldr	r3, [r7, #28]
34185e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185e64:	f023 0208 	bic.w	r2, r3, #8
34185e68:	69fb      	ldr	r3, [r7, #28]
34185e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34185e6e:	69fb      	ldr	r3, [r7, #28]
34185e70:	2208      	movs	r2, #8
34185e72:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34185e76:	687b      	ldr	r3, [r7, #4]
34185e78:	689b      	ldr	r3, [r3, #8]
34185e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34185e7e:	687b      	ldr	r3, [r7, #4]
34185e80:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34185e82:	2101      	movs	r1, #1
34185e84:	6878      	ldr	r0, [r7, #4]
34185e86:	f000 f914 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34185e8a:	697b      	ldr	r3, [r7, #20]
34185e8c:	f003 0310 	and.w	r3, r3, #16
34185e90:	2b00      	cmp	r3, #0
34185e92:	d01a      	beq.n	34185eca <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34185e94:	68fb      	ldr	r3, [r7, #12]
34185e96:	f003 0310 	and.w	r3, r3, #16
34185e9a:	2b00      	cmp	r3, #0
34185e9c:	d015      	beq.n	34185eca <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34185e9e:	69fb      	ldr	r3, [r7, #28]
34185ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185ea4:	f023 0210 	bic.w	r2, r3, #16
34185ea8:	69fb      	ldr	r3, [r7, #28]
34185eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34185eae:	69fb      	ldr	r3, [r7, #28]
34185eb0:	2210      	movs	r2, #16
34185eb2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34185eb6:	687b      	ldr	r3, [r7, #4]
34185eb8:	689b      	ldr	r3, [r3, #8]
34185eba:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34185ebe:	687b      	ldr	r3, [r7, #4]
34185ec0:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34185ec2:	2101      	movs	r1, #1
34185ec4:	6878      	ldr	r0, [r7, #4]
34185ec6:	f000 f8f4 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34185eca:	697b      	ldr	r3, [r7, #20]
34185ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185ed0:	2b00      	cmp	r3, #0
34185ed2:	d01e      	beq.n	34185f12 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34185ed4:	68fb      	ldr	r3, [r7, #12]
34185ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185eda:	2b00      	cmp	r3, #0
34185edc:	d019      	beq.n	34185f12 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34185ede:	69fb      	ldr	r3, [r7, #28]
34185ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34185ee8:	69fb      	ldr	r3, [r7, #28]
34185eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34185eee:	69fb      	ldr	r3, [r7, #28]
34185ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
34185ef4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34185ef8:	687b      	ldr	r3, [r7, #4]
34185efa:	689b      	ldr	r3, [r3, #8]
34185efc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34185f00:	687b      	ldr	r3, [r7, #4]
34185f02:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185f04:	687b      	ldr	r3, [r7, #4]
34185f06:	2204      	movs	r2, #4
34185f08:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185f0a:	2102      	movs	r1, #2
34185f0c:	6878      	ldr	r0, [r7, #4]
34185f0e:	f000 f8d0 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34185f12:	697b      	ldr	r3, [r7, #20]
34185f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185f18:	2b00      	cmp	r3, #0
34185f1a:	d01e      	beq.n	34185f5a <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34185f1c:	68fb      	ldr	r3, [r7, #12]
34185f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185f22:	2b00      	cmp	r3, #0
34185f24:	d019      	beq.n	34185f5a <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34185f26:	69fb      	ldr	r3, [r7, #28]
34185f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185f2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34185f30:	69fb      	ldr	r3, [r7, #28]
34185f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34185f36:	69fb      	ldr	r3, [r7, #28]
34185f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185f3c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34185f40:	687b      	ldr	r3, [r7, #4]
34185f42:	689b      	ldr	r3, [r3, #8]
34185f44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34185f48:	687b      	ldr	r3, [r7, #4]
34185f4a:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34185f4c:	687b      	ldr	r3, [r7, #4]
34185f4e:	2204      	movs	r2, #4
34185f50:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185f52:	2102      	movs	r1, #2
34185f54:	6878      	ldr	r0, [r7, #4]
34185f56:	f000 f8ac 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34185f5a:	697b      	ldr	r3, [r7, #20]
34185f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185f60:	2b00      	cmp	r3, #0
34185f62:	d01b      	beq.n	34185f9c <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34185f64:	68fb      	ldr	r3, [r7, #12]
34185f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185f6a:	2b00      	cmp	r3, #0
34185f6c:	d016      	beq.n	34185f9c <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34185f6e:	69fb      	ldr	r3, [r7, #28]
34185f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185f74:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34185f78:	69fb      	ldr	r3, [r7, #28]
34185f7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34185f7e:	69fb      	ldr	r3, [r7, #28]
34185f80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34185f84:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34185f88:	687b      	ldr	r3, [r7, #4]
34185f8a:	689b      	ldr	r3, [r3, #8]
34185f8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34185f90:	687b      	ldr	r3, [r7, #4]
34185f92:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185f94:	2102      	movs	r1, #2
34185f96:	6878      	ldr	r0, [r7, #4]
34185f98:	f000 f88b 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34185f9c:	697b      	ldr	r3, [r7, #20]
34185f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185fa2:	2b00      	cmp	r3, #0
34185fa4:	d01b      	beq.n	34185fde <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34185fa6:	68fb      	ldr	r3, [r7, #12]
34185fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185fac:	2b00      	cmp	r3, #0
34185fae:	d016      	beq.n	34185fde <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34185fb0:	69fb      	ldr	r3, [r7, #28]
34185fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185fb6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34185fba:	69fb      	ldr	r3, [r7, #28]
34185fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34185fc0:	69fb      	ldr	r3, [r7, #28]
34185fc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34185fc6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34185fca:	687b      	ldr	r3, [r7, #4]
34185fcc:	689b      	ldr	r3, [r3, #8]
34185fce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34185fd2:	687b      	ldr	r3, [r7, #4]
34185fd4:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34185fd6:	2102      	movs	r1, #2
34185fd8:	6878      	ldr	r0, [r7, #4]
34185fda:	f000 f86a 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34185fde:	697b      	ldr	r3, [r7, #20]
34185fe0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34185fe4:	2b00      	cmp	r3, #0
34185fe6:	d01b      	beq.n	34186020 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34185fe8:	68fb      	ldr	r3, [r7, #12]
34185fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34185fee:	2b00      	cmp	r3, #0
34185ff0:	d016      	beq.n	34186020 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34185ff2:	69fb      	ldr	r3, [r7, #28]
34185ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185ff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34185ffc:	69fb      	ldr	r3, [r7, #28]
34185ffe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34186002:	69fb      	ldr	r3, [r7, #28]
34186004:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34186008:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
3418600c:	687b      	ldr	r3, [r7, #4]
3418600e:	689b      	ldr	r3, [r3, #8]
34186010:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34186014:	687b      	ldr	r3, [r7, #4]
34186016:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34186018:	2102      	movs	r1, #2
3418601a:	6878      	ldr	r0, [r7, #4]
3418601c:	f000 f849 	bl	341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34186020:	69bb      	ldr	r3, [r7, #24]
34186022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34186026:	2b00      	cmp	r3, #0
34186028:	d014      	beq.n	34186054 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
3418602a:	693b      	ldr	r3, [r7, #16]
3418602c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34186030:	2b00      	cmp	r3, #0
34186032:	d00f      	beq.n	34186054 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34186034:	69fb      	ldr	r3, [r7, #28]
34186036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418603a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
3418603e:	69fb      	ldr	r3, [r7, #28]
34186040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34186044:	69fb      	ldr	r3, [r7, #28]
34186046:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418604a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
3418604e:	6878      	ldr	r0, [r7, #4]
34186050:	f000 f844 	bl	341860dc <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34186054:	bf00      	nop
34186056:	3720      	adds	r7, #32
34186058:	46bd      	mov	sp, r7
3418605a:	bd80      	pop	{r7, pc}

3418605c <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418605c:	b480      	push	{r7}
3418605e:	b083      	sub	sp, #12
34186060:	af00      	add	r7, sp, #0
34186062:	6078      	str	r0, [r7, #4]
34186064:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34186066:	bf00      	nop
34186068:	370c      	adds	r7, #12
3418606a:	46bd      	mov	sp, r7
3418606c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186070:	4770      	bx	lr

34186072 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186072:	b480      	push	{r7}
34186074:	b083      	sub	sp, #12
34186076:	af00      	add	r7, sp, #0
34186078:	6078      	str	r0, [r7, #4]
3418607a:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
3418607c:	bf00      	nop
3418607e:	370c      	adds	r7, #12
34186080:	46bd      	mov	sp, r7
34186082:	f85d 7b04 	ldr.w	r7, [sp], #4
34186086:	4770      	bx	lr

34186088 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186088:	b480      	push	{r7}
3418608a:	b083      	sub	sp, #12
3418608c:	af00      	add	r7, sp, #0
3418608e:	6078      	str	r0, [r7, #4]
34186090:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34186092:	bf00      	nop
34186094:	370c      	adds	r7, #12
34186096:	46bd      	mov	sp, r7
34186098:	f85d 7b04 	ldr.w	r7, [sp], #4
3418609c:	4770      	bx	lr

3418609e <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
3418609e:	b480      	push	{r7}
341860a0:	b083      	sub	sp, #12
341860a2:	af00      	add	r7, sp, #0
341860a4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
341860a6:	bf00      	nop
341860a8:	370c      	adds	r7, #12
341860aa:	46bd      	mov	sp, r7
341860ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341860b0:	4770      	bx	lr

341860b2 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
341860b2:	b480      	push	{r7}
341860b4:	b083      	sub	sp, #12
341860b6:	af00      	add	r7, sp, #0
341860b8:	6078      	str	r0, [r7, #4]
341860ba:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
341860bc:	bf00      	nop
341860be:	370c      	adds	r7, #12
341860c0:	46bd      	mov	sp, r7
341860c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341860c6:	4770      	bx	lr

341860c8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
341860c8:	b480      	push	{r7}
341860ca:	b083      	sub	sp, #12
341860cc:	af00      	add	r7, sp, #0
341860ce:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
341860d0:	bf00      	nop
341860d2:	370c      	adds	r7, #12
341860d4:	46bd      	mov	sp, r7
341860d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341860da:	4770      	bx	lr

341860dc <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
341860dc:	b480      	push	{r7}
341860de:	b083      	sub	sp, #12
341860e0:	af00      	add	r7, sp, #0
341860e2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
341860e4:	bf00      	nop
341860e6:	370c      	adds	r7, #12
341860e8:	46bd      	mov	sp, r7
341860ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341860ee:	4770      	bx	lr

341860f0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
341860f0:	b480      	push	{r7}
341860f2:	b083      	sub	sp, #12
341860f4:	af00      	add	r7, sp, #0
341860f6:	6078      	str	r0, [r7, #4]
341860f8:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
341860fa:	bf00      	nop
341860fc:	370c      	adds	r7, #12
341860fe:	46bd      	mov	sp, r7
34186100:	f85d 7b04 	ldr.w	r7, [sp], #4
34186104:	4770      	bx	lr

34186106 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34186106:	b480      	push	{r7}
34186108:	b083      	sub	sp, #12
3418610a:	af00      	add	r7, sp, #0
3418610c:	6078      	str	r0, [r7, #4]
3418610e:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34186110:	bf00      	nop
34186112:	370c      	adds	r7, #12
34186114:	46bd      	mov	sp, r7
34186116:	f85d 7b04 	ldr.w	r7, [sp], #4
3418611a:	4770      	bx	lr

3418611c <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
3418611c:	b480      	push	{r7}
3418611e:	b083      	sub	sp, #12
34186120:	af00      	add	r7, sp, #0
34186122:	6078      	str	r0, [r7, #4]
34186124:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
34186126:	bf00      	nop
34186128:	370c      	adds	r7, #12
3418612a:	46bd      	mov	sp, r7
3418612c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186130:	4770      	bx	lr

34186132 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
34186132:	b480      	push	{r7}
34186134:	b083      	sub	sp, #12
34186136:	af00      	add	r7, sp, #0
34186138:	6078      	str	r0, [r7, #4]
3418613a:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
3418613c:	bf00      	nop
3418613e:	370c      	adds	r7, #12
34186140:	46bd      	mov	sp, r7
34186142:	f85d 7b04 	ldr.w	r7, [sp], #4
34186146:	4770      	bx	lr

34186148 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  * @param  pDecConfig pointer to DCMIPP_DecimationConfTypeDef structure that contains the decimation information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPDecimationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                         const DCMIPP_DecimationConfTypeDef *pDecConfig)
{
34186148:	b580      	push	{r7, lr}
3418614a:	b084      	sub	sp, #16
3418614c:	af00      	add	r7, sp, #0
3418614e:	60f8      	str	r0, [r7, #12]
34186150:	60b9      	str	r1, [r7, #8]
34186152:	607a      	str	r2, [r7, #4]
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186154:	68bb      	ldr	r3, [r7, #8]
34186156:	2b00      	cmp	r3, #0
34186158:	d00a      	beq.n	34186170 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x28>
3418615a:	68bb      	ldr	r3, [r7, #8]
3418615c:	2b01      	cmp	r3, #1
3418615e:	d007      	beq.n	34186170 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x28>
34186160:	68bb      	ldr	r3, [r7, #8]
34186162:	2b02      	cmp	r3, #2
34186164:	d004      	beq.n	34186170 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x28>
34186166:	f241 0152 	movw	r1, #4178	@ 0x1052
3418616a:	482b      	ldr	r0, [pc, #172]	@ (34186218 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xd0>)
3418616c:	f7fc f87e 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34186170:	687b      	ldr	r3, [r7, #4]
34186172:	681b      	ldr	r3, [r3, #0]
34186174:	2b00      	cmp	r3, #0
34186176:	d010      	beq.n	3418619a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x52>
34186178:	687b      	ldr	r3, [r7, #4]
3418617a:	681b      	ldr	r3, [r3, #0]
3418617c:	2b08      	cmp	r3, #8
3418617e:	d00c      	beq.n	3418619a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x52>
34186180:	687b      	ldr	r3, [r7, #4]
34186182:	681b      	ldr	r3, [r3, #0]
34186184:	2b10      	cmp	r3, #16
34186186:	d008      	beq.n	3418619a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x52>
34186188:	687b      	ldr	r3, [r7, #4]
3418618a:	681b      	ldr	r3, [r3, #0]
3418618c:	2b18      	cmp	r3, #24
3418618e:	d004      	beq.n	3418619a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x52>
34186190:	f241 0153 	movw	r1, #4179	@ 0x1053
34186194:	4820      	ldr	r0, [pc, #128]	@ (34186218 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xd0>)
34186196:	f7fc f869 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
3418619a:	687b      	ldr	r3, [r7, #4]
3418619c:	685b      	ldr	r3, [r3, #4]
3418619e:	2b00      	cmp	r3, #0
341861a0:	d010      	beq.n	341861c4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x7c>
341861a2:	687b      	ldr	r3, [r7, #4]
341861a4:	685b      	ldr	r3, [r3, #4]
341861a6:	2b02      	cmp	r3, #2
341861a8:	d00c      	beq.n	341861c4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x7c>
341861aa:	687b      	ldr	r3, [r7, #4]
341861ac:	685b      	ldr	r3, [r3, #4]
341861ae:	2b04      	cmp	r3, #4
341861b0:	d008      	beq.n	341861c4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x7c>
341861b2:	687b      	ldr	r3, [r7, #4]
341861b4:	685b      	ldr	r3, [r3, #4]
341861b6:	2b06      	cmp	r3, #6
341861b8:	d004      	beq.n	341861c4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x7c>
341861ba:	f241 0154 	movw	r1, #4180	@ 0x1054
341861be:	4816      	ldr	r0, [pc, #88]	@ (34186218 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xd0>)
341861c0:	f7fc f854 	bl	3418226c <assert_failed>

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
341861c4:	68fb      	ldr	r3, [r7, #12]
341861c6:	2b00      	cmp	r3, #0
341861c8:	d002      	beq.n	341861d0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x88>
341861ca:	687b      	ldr	r3, [r7, #4]
341861cc:	2b00      	cmp	r3, #0
341861ce:	d101      	bne.n	341861d4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x8c>
  {
    return HAL_ERROR;
341861d0:	2301      	movs	r3, #1
341861d2:	e01c      	b.n	3418620e <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xc6>
  }

  /* Set Decimation Type , Vertical and Horizontal Ratio */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
341861d4:	68fb      	ldr	r3, [r7, #12]
341861d6:	791b      	ldrb	r3, [r3, #4]
341861d8:	b2db      	uxtb	r3, r3
341861da:	2b02      	cmp	r3, #2
341861dc:	d116      	bne.n	3418620c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xc4>
  {
    if (Pipe == DCMIPP_PIPE1)
341861de:	68bb      	ldr	r3, [r7, #8]
341861e0:	2b01      	cmp	r3, #1
341861e2:	d111      	bne.n	34186208 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xc0>
    {
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
341861e4:	68fb      	ldr	r3, [r7, #12]
341861e6:	681b      	ldr	r3, [r3, #0]
341861e8:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
341861ec:	f023 011e 	bic.w	r1, r3, #30
341861f0:	687b      	ldr	r3, [r7, #4]
341861f2:	681a      	ldr	r2, [r3, #0]
341861f4:	687b      	ldr	r3, [r7, #4]
341861f6:	685b      	ldr	r3, [r3, #4]
341861f8:	431a      	orrs	r2, r3
341861fa:	68fb      	ldr	r3, [r7, #12]
341861fc:	681b      	ldr	r3, [r3, #0]
341861fe:	430a      	orrs	r2, r1
34186200:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  {
    return HAL_ERROR;
  }


  return HAL_OK;
34186204:	2300      	movs	r3, #0
34186206:	e002      	b.n	3418620e <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xc6>
      return HAL_ERROR;
34186208:	2301      	movs	r3, #1
3418620a:	e000      	b.n	3418620e <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0xc6>
    return HAL_ERROR;
3418620c:	2301      	movs	r3, #1
}
3418620e:	4618      	mov	r0, r3
34186210:	3710      	adds	r7, #16
34186212:	46bd      	mov	sp, r7
34186214:	bd80      	pop	{r7, pc}
34186216:	bf00      	nop
34186218:	341a4eec 	.word	0x341a4eec

3418621c <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPDecimation(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418621c:	b580      	push	{r7, lr}
3418621e:	b082      	sub	sp, #8
34186220:	af00      	add	r7, sp, #0
34186222:	6078      	str	r0, [r7, #4]
34186224:	6039      	str	r1, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186226:	683b      	ldr	r3, [r7, #0]
34186228:	2b00      	cmp	r3, #0
3418622a:	d00a      	beq.n	34186242 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x26>
3418622c:	683b      	ldr	r3, [r7, #0]
3418622e:	2b01      	cmp	r3, #1
34186230:	d007      	beq.n	34186242 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x26>
34186232:	683b      	ldr	r3, [r7, #0]
34186234:	2b02      	cmp	r3, #2
34186236:	d004      	beq.n	34186242 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x26>
34186238:	f241 017a 	movw	r1, #4218	@ 0x107a
3418623c:	480d      	ldr	r0, [pc, #52]	@ (34186274 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x58>)
3418623e:	f7fc f815 	bl	3418226c <assert_failed>

  /* Check handle validity */
  if (hdcmipp == NULL)
34186242:	687b      	ldr	r3, [r7, #4]
34186244:	2b00      	cmp	r3, #0
34186246:	d101      	bne.n	3418624c <HAL_DCMIPP_PIPE_EnableISPDecimation+0x30>
  {
    return HAL_ERROR;
34186248:	2301      	movs	r3, #1
3418624a:	e00f      	b.n	3418626c <HAL_DCMIPP_PIPE_EnableISPDecimation+0x50>
  }

  /* Enable decimation */
  if (Pipe == DCMIPP_PIPE1)
3418624c:	683b      	ldr	r3, [r7, #0]
3418624e:	2b01      	cmp	r3, #1
34186250:	d10b      	bne.n	3418626a <HAL_DCMIPP_PIPE_EnableISPDecimation+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34186252:	687b      	ldr	r3, [r7, #4]
34186254:	681b      	ldr	r3, [r3, #0]
34186256:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
3418625a:	687b      	ldr	r3, [r7, #4]
3418625c:	681b      	ldr	r3, [r3, #0]
3418625e:	f042 0201 	orr.w	r2, r2, #1
34186262:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186266:	2300      	movs	r3, #0
34186268:	e000      	b.n	3418626c <HAL_DCMIPP_PIPE_EnableISPDecimation+0x50>
    return HAL_ERROR;
3418626a:	2301      	movs	r3, #1
}
3418626c:	4618      	mov	r0, r3
3418626e:	3708      	adds	r7, #8
34186270:	46bd      	mov	sp, r7
34186272:	bd80      	pop	{r7, pc}
34186274:	341a4eec 	.word	0x341a4eec

34186278 <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
  * @param  pDownsizeConfig pointer to the DCMIPP_DownsizeTypeDef structure that contains Downsize information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetDownsizeConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                    const DCMIPP_DownsizeTypeDef *pDownsizeConfig)
{
34186278:	b580      	push	{r7, lr}
3418627a:	b084      	sub	sp, #16
3418627c:	af00      	add	r7, sp, #0
3418627e:	60f8      	str	r0, [r7, #12]
34186280:	60b9      	str	r1, [r7, #8]
34186282:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34186284:	68fb      	ldr	r3, [r7, #12]
34186286:	2b00      	cmp	r3, #0
34186288:	d002      	beq.n	34186290 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x18>
3418628a:	687b      	ldr	r3, [r7, #4]
3418628c:	2b00      	cmp	r3, #0
3418628e:	d101      	bne.n	34186294 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x1c>
  {
    return HAL_ERROR;
34186290:	2301      	movs	r3, #1
34186292:	e0bb      	b.n	3418640c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x194>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186294:	68bb      	ldr	r3, [r7, #8]
34186296:	2b00      	cmp	r3, #0
34186298:	d00a      	beq.n	341862b0 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x38>
3418629a:	68bb      	ldr	r3, [r7, #8]
3418629c:	2b01      	cmp	r3, #1
3418629e:	d007      	beq.n	341862b0 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x38>
341862a0:	68bb      	ldr	r3, [r7, #8]
341862a2:	2b02      	cmp	r3, #2
341862a4:	d004      	beq.n	341862b0 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x38>
341862a6:	f241 1134 	movw	r1, #4404	@ 0x1134
341862aa:	485a      	ldr	r0, [pc, #360]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
341862ac:	f7fb ffde 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->HDivFactor));
341862b0:	687b      	ldr	r3, [r7, #4]
341862b2:	695b      	ldr	r3, [r3, #20]
341862b4:	2b7f      	cmp	r3, #127	@ 0x7f
341862b6:	d904      	bls.n	341862c2 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x4a>
341862b8:	687b      	ldr	r3, [r7, #4]
341862ba:	695b      	ldr	r3, [r3, #20]
341862bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
341862c0:	d304      	bcc.n	341862cc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x54>
341862c2:	f241 1135 	movw	r1, #4405	@ 0x1135
341862c6:	4853      	ldr	r0, [pc, #332]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
341862c8:	f7fb ffd0 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->VDivFactor));
341862cc:	687b      	ldr	r3, [r7, #4]
341862ce:	691b      	ldr	r3, [r3, #16]
341862d0:	2b7f      	cmp	r3, #127	@ 0x7f
341862d2:	d904      	bls.n	341862de <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x66>
341862d4:	687b      	ldr	r3, [r7, #4]
341862d6:	691b      	ldr	r3, [r3, #16]
341862d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
341862dc:	d304      	bcc.n	341862e8 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x70>
341862de:	f241 1136 	movw	r1, #4406	@ 0x1136
341862e2:	484c      	ldr	r0, [pc, #304]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
341862e4:	f7fb ffc2 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
341862e8:	687b      	ldr	r3, [r7, #4]
341862ea:	68db      	ldr	r3, [r3, #12]
341862ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
341862f0:	d304      	bcc.n	341862fc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x84>
341862f2:	f241 1137 	movw	r1, #4407	@ 0x1137
341862f6:	4847      	ldr	r0, [pc, #284]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
341862f8:	f7fb ffb8 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
341862fc:	687b      	ldr	r3, [r7, #4]
341862fe:	689b      	ldr	r3, [r3, #8]
34186300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34186304:	d304      	bcc.n	34186310 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x98>
34186306:	f241 1138 	movw	r1, #4408	@ 0x1138
3418630a:	4842      	ldr	r0, [pc, #264]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
3418630c:	f7fb ffae 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
34186310:	687b      	ldr	r3, [r7, #4]
34186312:	685b      	ldr	r3, [r3, #4]
34186314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34186318:	d304      	bcc.n	34186324 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xac>
3418631a:	f241 1139 	movw	r1, #4409	@ 0x1139
3418631e:	483d      	ldr	r0, [pc, #244]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
34186320:	f7fb ffa4 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));
34186324:	687b      	ldr	r3, [r7, #4]
34186326:	681b      	ldr	r3, [r3, #0]
34186328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418632c:	d304      	bcc.n	34186338 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xc0>
3418632e:	f241 113a 	movw	r1, #4410	@ 0x113a
34186332:	4838      	ldr	r0, [pc, #224]	@ (34186414 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x19c>)
34186334:	f7fb ff9a 	bl	3418226c <assert_failed>

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34186338:	68fb      	ldr	r3, [r7, #12]
3418633a:	791b      	ldrb	r3, [r3, #4]
3418633c:	b2db      	uxtb	r3, r3
3418633e:	2b02      	cmp	r3, #2
34186340:	d161      	bne.n	34186406 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x18e>
  {
    if (Pipe == DCMIPP_PIPE1)
34186342:	68bb      	ldr	r3, [r7, #8]
34186344:	2b01      	cmp	r3, #1
34186346:	d12c      	bne.n	341863a2 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x12a>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
34186348:	68fb      	ldr	r3, [r7, #12]
3418634a:	681b      	ldr	r3, [r3, #0]
3418634c:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
34186350:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
34186354:	687b      	ldr	r3, [r7, #4]
34186356:	695a      	ldr	r2, [r3, #20]
34186358:	687b      	ldr	r3, [r7, #4]
3418635a:	691b      	ldr	r3, [r3, #16]
3418635c:	041b      	lsls	r3, r3, #16
3418635e:	431a      	orrs	r2, r3
34186360:	68fb      	ldr	r3, [r7, #12]
34186362:	681b      	ldr	r3, [r3, #0]
34186364:	430a      	orrs	r2, r1
34186366:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
                 ((pDownsizeConfig->HDivFactor << DCMIPP_P1DSCR_HDIV_Pos) | \
                  (pDownsizeConfig->VDivFactor << DCMIPP_P1DSCR_VDIV_Pos)));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
3418636a:	687b      	ldr	r3, [r7, #4]
3418636c:	68d9      	ldr	r1, [r3, #12]
3418636e:	687b      	ldr	r3, [r7, #4]
34186370:	689b      	ldr	r3, [r3, #8]
34186372:	041a      	lsls	r2, r3, #16
34186374:	68fb      	ldr	r3, [r7, #12]
34186376:	681b      	ldr	r3, [r3, #0]
34186378:	430a      	orrs	r2, r1
3418637a:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
                (pDownsizeConfig->VRatio << DCMIPP_P1DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
3418637e:	68fb      	ldr	r3, [r7, #12]
34186380:	681b      	ldr	r3, [r3, #0]
34186382:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
34186386:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
3418638a:	687b      	ldr	r3, [r7, #4]
3418638c:	685a      	ldr	r2, [r3, #4]
3418638e:	687b      	ldr	r3, [r7, #4]
34186390:	681b      	ldr	r3, [r3, #0]
34186392:	041b      	lsls	r3, r3, #16
34186394:	431a      	orrs	r2, r3
34186396:	68fb      	ldr	r3, [r7, #12]
34186398:	681b      	ldr	r3, [r3, #0]
3418639a:	430a      	orrs	r2, r1
3418639c:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
341863a0:	e033      	b.n	3418640a <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x192>
                 (pDownsizeConfig->HSize << DCMIPP_P1DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P1DSSZR_VSIZE_Pos));
    }
    else if (Pipe == DCMIPP_PIPE2)
341863a2:	68bb      	ldr	r3, [r7, #8]
341863a4:	2b02      	cmp	r3, #2
341863a6:	d12c      	bne.n	34186402 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x18a>
    {
      /* Set Vertical and Horizontal division */
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
341863a8:	68fb      	ldr	r3, [r7, #12]
341863aa:	681b      	ldr	r3, [r3, #0]
341863ac:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	@ 0xd10
341863b0:	f003 21fc 	and.w	r1, r3, #4227922944	@ 0xfc00fc00
341863b4:	687b      	ldr	r3, [r7, #4]
341863b6:	695a      	ldr	r2, [r3, #20]
341863b8:	687b      	ldr	r3, [r7, #4]
341863ba:	691b      	ldr	r3, [r3, #16]
341863bc:	041b      	lsls	r3, r3, #16
341863be:	431a      	orrs	r2, r3
341863c0:	68fb      	ldr	r3, [r7, #12]
341863c2:	681b      	ldr	r3, [r3, #0]
341863c4:	430a      	orrs	r2, r1
341863c6:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
                 (pDownsizeConfig->HDivFactor << DCMIPP_P2DSCR_HDIV_Pos) | \
                 (pDownsizeConfig->VDivFactor << DCMIPP_P2DSCR_VDIV_Pos));

      /* Set Vertical and Horizontal Ratio */
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
341863ca:	687b      	ldr	r3, [r7, #4]
341863cc:	68d9      	ldr	r1, [r3, #12]
341863ce:	687b      	ldr	r3, [r7, #4]
341863d0:	689b      	ldr	r3, [r3, #8]
341863d2:	041a      	lsls	r2, r3, #16
341863d4:	68fb      	ldr	r3, [r7, #12]
341863d6:	681b      	ldr	r3, [r3, #0]
341863d8:	430a      	orrs	r2, r1
341863da:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
                (pDownsizeConfig->VRatio << DCMIPP_P2DSRTIOR_VRATIO_Pos));

      /* Set Downsize Destination size */
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
341863de:	68fb      	ldr	r3, [r7, #12]
341863e0:	681b      	ldr	r3, [r3, #0]
341863e2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
341863e6:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
341863ea:	687b      	ldr	r3, [r7, #4]
341863ec:	685a      	ldr	r2, [r3, #4]
341863ee:	687b      	ldr	r3, [r7, #4]
341863f0:	681b      	ldr	r3, [r3, #0]
341863f2:	041b      	lsls	r3, r3, #16
341863f4:	431a      	orrs	r2, r3
341863f6:	68fb      	ldr	r3, [r7, #12]
341863f8:	681b      	ldr	r3, [r3, #0]
341863fa:	430a      	orrs	r2, r1
341863fc:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34186400:	e003      	b.n	3418640a <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x192>
                 (pDownsizeConfig->HSize << DCMIPP_P2DSSZR_HSIZE_Pos) | \
                 (pDownsizeConfig->VSize << DCMIPP_P2DSSZR_VSIZE_Pos));
    }
    else
    {
      return HAL_ERROR;
34186402:	2301      	movs	r3, #1
34186404:	e002      	b.n	3418640c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x194>
    }
  }
  else
  {
    return HAL_ERROR;
34186406:	2301      	movs	r3, #1
34186408:	e000      	b.n	3418640c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x194>
  }

  return HAL_OK;
3418640a:	2300      	movs	r3, #0
}
3418640c:	4618      	mov	r0, r3
3418640e:	3710      	adds	r7, #16
34186410:	46bd      	mov	sp, r7
34186412:	bd80      	pop	{r7, pc}
34186414:	341a4eec 	.word	0x341a4eec

34186418 <HAL_DCMIPP_PIPE_EnableDownsize>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableDownsize(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186418:	b580      	push	{r7, lr}
3418641a:	b082      	sub	sp, #8
3418641c:	af00      	add	r7, sp, #0
3418641e:	6078      	str	r0, [r7, #4]
34186420:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34186422:	687b      	ldr	r3, [r7, #4]
34186424:	2b00      	cmp	r3, #0
34186426:	d101      	bne.n	3418642c <HAL_DCMIPP_PIPE_EnableDownsize+0x14>
  {
    return HAL_ERROR;
34186428:	2301      	movs	r3, #1
3418642a:	e02c      	b.n	34186486 <HAL_DCMIPP_PIPE_EnableDownsize+0x6e>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418642c:	683b      	ldr	r3, [r7, #0]
3418642e:	2b00      	cmp	r3, #0
34186430:	d00a      	beq.n	34186448 <HAL_DCMIPP_PIPE_EnableDownsize+0x30>
34186432:	683b      	ldr	r3, [r7, #0]
34186434:	2b01      	cmp	r3, #1
34186436:	d007      	beq.n	34186448 <HAL_DCMIPP_PIPE_EnableDownsize+0x30>
34186438:	683b      	ldr	r3, [r7, #0]
3418643a:	2b02      	cmp	r3, #2
3418643c:	d004      	beq.n	34186448 <HAL_DCMIPP_PIPE_EnableDownsize+0x30>
3418643e:	f241 117a 	movw	r1, #4474	@ 0x117a
34186442:	4813      	ldr	r0, [pc, #76]	@ (34186490 <HAL_DCMIPP_PIPE_EnableDownsize+0x78>)
34186444:	f7fb ff12 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186448:	683b      	ldr	r3, [r7, #0]
3418644a:	2b01      	cmp	r3, #1
3418644c:	d10a      	bne.n	34186464 <HAL_DCMIPP_PIPE_EnableDownsize+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
3418644e:	687b      	ldr	r3, [r7, #4]
34186450:	681b      	ldr	r3, [r3, #0]
34186452:	f8d3 2910 	ldr.w	r2, [r3, #2320]	@ 0x910
34186456:	687b      	ldr	r3, [r7, #4]
34186458:	681b      	ldr	r3, [r3, #0]
3418645a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418645e:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
34186462:	e00f      	b.n	34186484 <HAL_DCMIPP_PIPE_EnableDownsize+0x6c>
  }
  else if (Pipe == DCMIPP_PIPE2)
34186464:	683b      	ldr	r3, [r7, #0]
34186466:	2b02      	cmp	r3, #2
34186468:	d10a      	bne.n	34186480 <HAL_DCMIPP_PIPE_EnableDownsize+0x68>
  {
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
3418646a:	687b      	ldr	r3, [r7, #4]
3418646c:	681b      	ldr	r3, [r3, #0]
3418646e:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	@ 0xd10
34186472:	687b      	ldr	r3, [r7, #4]
34186474:	681b      	ldr	r3, [r3, #0]
34186476:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418647a:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
3418647e:	e001      	b.n	34186484 <HAL_DCMIPP_PIPE_EnableDownsize+0x6c>
  }
  else
  {
    return HAL_ERROR;
34186480:	2301      	movs	r3, #1
34186482:	e000      	b.n	34186486 <HAL_DCMIPP_PIPE_EnableDownsize+0x6e>
  }

  return HAL_OK;
34186484:	2300      	movs	r3, #0
}
34186486:	4618      	mov	r0, r3
34186488:	3708      	adds	r7, #8
3418648a:	46bd      	mov	sp, r7
3418648c:	bd80      	pop	{r7, pc}
3418648e:	bf00      	nop
34186490:	341a4eec 	.word	0x341a4eec

34186494 <HAL_DCMIPP_PIPE_EnableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186494:	b580      	push	{r7, lr}
34186496:	b082      	sub	sp, #8
34186498:	af00      	add	r7, sp, #0
3418649a:	6078      	str	r0, [r7, #4]
3418649c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418649e:	687b      	ldr	r3, [r7, #4]
341864a0:	2b00      	cmp	r3, #0
341864a2:	d101      	bne.n	341864a8 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x14>
  {
    return HAL_ERROR;
341864a4:	2301      	movs	r3, #1
341864a6:	e02c      	b.n	34186502 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x6e>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341864a8:	683b      	ldr	r3, [r7, #0]
341864aa:	2b00      	cmp	r3, #0
341864ac:	d00a      	beq.n	341864c4 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x30>
341864ae:	683b      	ldr	r3, [r7, #0]
341864b0:	2b01      	cmp	r3, #1
341864b2:	d007      	beq.n	341864c4 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x30>
341864b4:	683b      	ldr	r3, [r7, #0]
341864b6:	2b02      	cmp	r3, #2
341864b8:	d004      	beq.n	341864c4 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x30>
341864ba:	f241 11bc 	movw	r1, #4540	@ 0x11bc
341864be:	4813      	ldr	r0, [pc, #76]	@ (3418650c <HAL_DCMIPP_PIPE_EnableGammaConversion+0x78>)
341864c0:	f7fb fed4 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341864c4:	683b      	ldr	r3, [r7, #0]
341864c6:	2b01      	cmp	r3, #1
341864c8:	d10a      	bne.n	341864e0 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x4c>
  {
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
341864ca:	687b      	ldr	r3, [r7, #4]
341864cc:	681b      	ldr	r3, [r3, #0]
341864ce:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
341864d2:	687b      	ldr	r3, [r7, #4]
341864d4:	681b      	ldr	r3, [r3, #0]
341864d6:	f042 0201 	orr.w	r2, r2, #1
341864da:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
341864de:	e00f      	b.n	34186500 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x6c>
  }
  else if (Pipe == DCMIPP_PIPE2)
341864e0:	683b      	ldr	r3, [r7, #0]
341864e2:	2b02      	cmp	r3, #2
341864e4:	d10a      	bne.n	341864fc <HAL_DCMIPP_PIPE_EnableGammaConversion+0x68>
  {
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
341864e6:	687b      	ldr	r3, [r7, #4]
341864e8:	681b      	ldr	r3, [r3, #0]
341864ea:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
341864ee:	687b      	ldr	r3, [r7, #4]
341864f0:	681b      	ldr	r3, [r3, #0]
341864f2:	f042 0201 	orr.w	r2, r2, #1
341864f6:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
341864fa:	e001      	b.n	34186500 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x6c>
  }
  else
  {
    return HAL_ERROR;
341864fc:	2301      	movs	r3, #1
341864fe:	e000      	b.n	34186502 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x6e>
  }

  return HAL_OK;
34186500:	2300      	movs	r3, #0
}
34186502:	4618      	mov	r0, r3
34186504:	3708      	adds	r7, #8
34186506:	46bd      	mov	sp, r7
34186508:	bd80      	pop	{r7, pc}
3418650a:	bf00      	nop
3418650c:	341a4eec 	.word	0x341a4eec

34186510 <HAL_DCMIPP_PIPE_DisableGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableGammaConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186510:	b580      	push	{r7, lr}
34186512:	b082      	sub	sp, #8
34186514:	af00      	add	r7, sp, #0
34186516:	6078      	str	r0, [r7, #4]
34186518:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418651a:	687b      	ldr	r3, [r7, #4]
3418651c:	2b00      	cmp	r3, #0
3418651e:	d101      	bne.n	34186524 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x14>
  {
    return HAL_ERROR;
34186520:	2301      	movs	r3, #1
34186522:	e02c      	b.n	3418657e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x6e>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186524:	683b      	ldr	r3, [r7, #0]
34186526:	2b00      	cmp	r3, #0
34186528:	d00a      	beq.n	34186540 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x30>
3418652a:	683b      	ldr	r3, [r7, #0]
3418652c:	2b01      	cmp	r3, #1
3418652e:	d007      	beq.n	34186540 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x30>
34186530:	683b      	ldr	r3, [r7, #0]
34186532:	2b02      	cmp	r3, #2
34186534:	d004      	beq.n	34186540 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x30>
34186536:	f241 11dd 	movw	r1, #4573	@ 0x11dd
3418653a:	4813      	ldr	r0, [pc, #76]	@ (34186588 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x78>)
3418653c:	f7fb fe96 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186540:	683b      	ldr	r3, [r7, #0]
34186542:	2b01      	cmp	r3, #1
34186544:	d10a      	bne.n	3418655c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x4c>
  {
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34186546:	687b      	ldr	r3, [r7, #4]
34186548:	681b      	ldr	r3, [r3, #0]
3418654a:	f8d3 2970 	ldr.w	r2, [r3, #2416]	@ 0x970
3418654e:	687b      	ldr	r3, [r7, #4]
34186550:	681b      	ldr	r3, [r3, #0]
34186552:	f022 0201 	bic.w	r2, r2, #1
34186556:	f8c3 2970 	str.w	r2, [r3, #2416]	@ 0x970
3418655a:	e00f      	b.n	3418657c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x6c>
  }
  else if (Pipe == DCMIPP_PIPE2)
3418655c:	683b      	ldr	r3, [r7, #0]
3418655e:	2b02      	cmp	r3, #2
34186560:	d10a      	bne.n	34186578 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x68>
  {
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34186562:	687b      	ldr	r3, [r7, #4]
34186564:	681b      	ldr	r3, [r3, #0]
34186566:	f8d3 2d70 	ldr.w	r2, [r3, #3440]	@ 0xd70
3418656a:	687b      	ldr	r3, [r7, #4]
3418656c:	681b      	ldr	r3, [r3, #0]
3418656e:	f022 0201 	bic.w	r2, r2, #1
34186572:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
34186576:	e001      	b.n	3418657c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x6c>
  }
  else
  {
    return HAL_ERROR;
34186578:	2301      	movs	r3, #1
3418657a:	e000      	b.n	3418657e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x6e>
  }

  return HAL_OK;
3418657c:	2300      	movs	r3, #0
}
3418657e:	4618      	mov	r0, r3
34186580:	3708      	adds	r7, #8
34186582:	46bd      	mov	sp, r7
34186584:	bd80      	pop	{r7, pc}
34186586:	bf00      	nop
34186588:	341a4eec 	.word	0x341a4eec

3418658c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledGammaConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418658c:	b580      	push	{r7, lr}
3418658e:	b082      	sub	sp, #8
34186590:	af00      	add	r7, sp, #0
34186592:	6078      	str	r0, [r7, #4]
34186594:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34186596:	687b      	ldr	r3, [r7, #4]
34186598:	681b      	ldr	r3, [r3, #0]
3418659a:	4a1f      	ldr	r2, [pc, #124]	@ (34186618 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x8c>)
3418659c:	4293      	cmp	r3, r2
3418659e:	d009      	beq.n	341865b4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x28>
341865a0:	687b      	ldr	r3, [r7, #4]
341865a2:	681b      	ldr	r3, [r3, #0]
341865a4:	4a1d      	ldr	r2, [pc, #116]	@ (3418661c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x90>)
341865a6:	4293      	cmp	r3, r2
341865a8:	d004      	beq.n	341865b4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x28>
341865aa:	f241 11f8 	movw	r1, #4600	@ 0x11f8
341865ae:	481c      	ldr	r0, [pc, #112]	@ (34186620 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x94>)
341865b0:	f7fb fe5c 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
341865b4:	683b      	ldr	r3, [r7, #0]
341865b6:	2b00      	cmp	r3, #0
341865b8:	d00a      	beq.n	341865d0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x44>
341865ba:	683b      	ldr	r3, [r7, #0]
341865bc:	2b01      	cmp	r3, #1
341865be:	d007      	beq.n	341865d0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x44>
341865c0:	683b      	ldr	r3, [r7, #0]
341865c2:	2b02      	cmp	r3, #2
341865c4:	d004      	beq.n	341865d0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x44>
341865c6:	f241 11f9 	movw	r1, #4601	@ 0x11f9
341865ca:	4815      	ldr	r0, [pc, #84]	@ (34186620 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x94>)
341865cc:	f7fb fe4e 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341865d0:	683b      	ldr	r3, [r7, #0]
341865d2:	2b01      	cmp	r3, #1
341865d4:	d10b      	bne.n	341865ee <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x62>
  {
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
341865d6:	687b      	ldr	r3, [r7, #4]
341865d8:	681b      	ldr	r3, [r3, #0]
341865da:	f8d3 3970 	ldr.w	r3, [r3, #2416]	@ 0x970
341865de:	f003 0301 	and.w	r3, r3, #1
341865e2:	2b01      	cmp	r3, #1
341865e4:	d101      	bne.n	341865ea <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x5e>
341865e6:	2301      	movs	r3, #1
341865e8:	e011      	b.n	3418660e <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x82>
341865ea:	2300      	movs	r3, #0
341865ec:	e00f      	b.n	3418660e <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x82>
  }
  else if (Pipe == DCMIPP_PIPE2)
341865ee:	683b      	ldr	r3, [r7, #0]
341865f0:	2b02      	cmp	r3, #2
341865f2:	d10b      	bne.n	3418660c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x80>
  {
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
341865f4:	687b      	ldr	r3, [r7, #4]
341865f6:	681b      	ldr	r3, [r3, #0]
341865f8:	f8d3 3d70 	ldr.w	r3, [r3, #3440]	@ 0xd70
341865fc:	f003 0301 	and.w	r3, r3, #1
34186600:	2b01      	cmp	r3, #1
34186602:	d101      	bne.n	34186608 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x7c>
34186604:	2301      	movs	r3, #1
34186606:	e002      	b.n	3418660e <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x82>
34186608:	2300      	movs	r3, #0
3418660a:	e000      	b.n	3418660e <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x82>
  }
  else
  {
    /* State Disabled */
    return 0;
3418660c:	2300      	movs	r3, #0
  }
}
3418660e:	4618      	mov	r0, r3
34186610:	3708      	adds	r7, #8
34186612:	46bd      	mov	sp, r7
34186614:	bd80      	pop	{r7, pc}
34186616:	bf00      	nop
34186618:	58002000 	.word	0x58002000
3418661c:	48002000 	.word	0x48002000
34186620:	341a4eec 	.word	0x341a4eec

34186624 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
  *         information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_RawBayer2RGBConfTypeDef *pRawBayer2RGBConfig)
{
34186624:	b580      	push	{r7, lr}
34186626:	b086      	sub	sp, #24
34186628:	af00      	add	r7, sp, #0
3418662a:	60f8      	str	r0, [r7, #12]
3418662c:	60b9      	str	r1, [r7, #8]
3418662e:	607a      	str	r2, [r7, #4]
  uint32_t p1dmcr_reg;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34186630:	68fb      	ldr	r3, [r7, #12]
34186632:	2b00      	cmp	r3, #0
34186634:	d002      	beq.n	3418663c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18>
34186636:	687b      	ldr	r3, [r7, #4]
34186638:	2b00      	cmp	r3, #0
3418663a:	d101      	bne.n	34186640 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1c>
  {
    return HAL_ERROR;
3418663c:	2301      	movs	r3, #1
3418663e:	e0db      	b.n	341867f8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1d4>
  }

  /* Check Parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186640:	68bb      	ldr	r3, [r7, #8]
34186642:	2b00      	cmp	r3, #0
34186644:	d00a      	beq.n	3418665c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x38>
34186646:	68bb      	ldr	r3, [r7, #8]
34186648:	2b01      	cmp	r3, #1
3418664a:	d007      	beq.n	3418665c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x38>
3418664c:	68bb      	ldr	r3, [r7, #8]
3418664e:	2b02      	cmp	r3, #2
34186650:	d004      	beq.n	3418665c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x38>
34186652:	f241 211e 	movw	r1, #4638	@ 0x121e
34186656:	486a      	ldr	r0, [pc, #424]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
34186658:	f7fb fe08 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_RAW_TYPE(pRawBayer2RGBConfig->RawBayerType));
3418665c:	687b      	ldr	r3, [r7, #4]
3418665e:	689b      	ldr	r3, [r3, #8]
34186660:	2b00      	cmp	r3, #0
34186662:	d010      	beq.n	34186686 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x62>
34186664:	687b      	ldr	r3, [r7, #4]
34186666:	689b      	ldr	r3, [r3, #8]
34186668:	2b02      	cmp	r3, #2
3418666a:	d00c      	beq.n	34186686 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x62>
3418666c:	687b      	ldr	r3, [r7, #4]
3418666e:	689b      	ldr	r3, [r3, #8]
34186670:	2b04      	cmp	r3, #4
34186672:	d008      	beq.n	34186686 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x62>
34186674:	687b      	ldr	r3, [r7, #4]
34186676:	689b      	ldr	r3, [r3, #8]
34186678:	2b06      	cmp	r3, #6
3418667a:	d004      	beq.n	34186686 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x62>
3418667c:	f241 211f 	movw	r1, #4639	@ 0x121f
34186680:	485f      	ldr	r0, [pc, #380]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
34186682:	f7fb fdf3 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
34186686:	687b      	ldr	r3, [r7, #4]
34186688:	68db      	ldr	r3, [r3, #12]
3418668a:	2b00      	cmp	r3, #0
3418668c:	d020      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
3418668e:	687b      	ldr	r3, [r7, #4]
34186690:	68db      	ldr	r3, [r3, #12]
34186692:	2b01      	cmp	r3, #1
34186694:	d01c      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
34186696:	687b      	ldr	r3, [r7, #4]
34186698:	68db      	ldr	r3, [r3, #12]
3418669a:	2b02      	cmp	r3, #2
3418669c:	d018      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
3418669e:	687b      	ldr	r3, [r7, #4]
341866a0:	68db      	ldr	r3, [r3, #12]
341866a2:	2b03      	cmp	r3, #3
341866a4:	d014      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
341866a6:	687b      	ldr	r3, [r7, #4]
341866a8:	68db      	ldr	r3, [r3, #12]
341866aa:	2b04      	cmp	r3, #4
341866ac:	d010      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
341866ae:	687b      	ldr	r3, [r7, #4]
341866b0:	68db      	ldr	r3, [r3, #12]
341866b2:	2b05      	cmp	r3, #5
341866b4:	d00c      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
341866b6:	687b      	ldr	r3, [r7, #4]
341866b8:	68db      	ldr	r3, [r3, #12]
341866ba:	2b06      	cmp	r3, #6
341866bc:	d008      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
341866be:	687b      	ldr	r3, [r7, #4]
341866c0:	68db      	ldr	r3, [r3, #12]
341866c2:	2b07      	cmp	r3, #7
341866c4:	d004      	beq.n	341866d0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>
341866c6:	f44f 5191 	mov.w	r1, #4640	@ 0x1220
341866ca:	484d      	ldr	r0, [pc, #308]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
341866cc:	f7fb fdce 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
341866d0:	687b      	ldr	r3, [r7, #4]
341866d2:	681b      	ldr	r3, [r3, #0]
341866d4:	2b00      	cmp	r3, #0
341866d6:	d020      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
341866d8:	687b      	ldr	r3, [r7, #4]
341866da:	681b      	ldr	r3, [r3, #0]
341866dc:	2b01      	cmp	r3, #1
341866de:	d01c      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
341866e0:	687b      	ldr	r3, [r7, #4]
341866e2:	681b      	ldr	r3, [r3, #0]
341866e4:	2b02      	cmp	r3, #2
341866e6:	d018      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
341866e8:	687b      	ldr	r3, [r7, #4]
341866ea:	681b      	ldr	r3, [r3, #0]
341866ec:	2b03      	cmp	r3, #3
341866ee:	d014      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
341866f0:	687b      	ldr	r3, [r7, #4]
341866f2:	681b      	ldr	r3, [r3, #0]
341866f4:	2b04      	cmp	r3, #4
341866f6:	d010      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
341866f8:	687b      	ldr	r3, [r7, #4]
341866fa:	681b      	ldr	r3, [r3, #0]
341866fc:	2b05      	cmp	r3, #5
341866fe:	d00c      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
34186700:	687b      	ldr	r3, [r7, #4]
34186702:	681b      	ldr	r3, [r3, #0]
34186704:	2b06      	cmp	r3, #6
34186706:	d008      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
34186708:	687b      	ldr	r3, [r7, #4]
3418670a:	681b      	ldr	r3, [r3, #0]
3418670c:	2b07      	cmp	r3, #7
3418670e:	d004      	beq.n	3418671a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xf6>
34186710:	f241 2121 	movw	r1, #4641	@ 0x1221
34186714:	483a      	ldr	r0, [pc, #232]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
34186716:	f7fb fda9 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
3418671a:	687b      	ldr	r3, [r7, #4]
3418671c:	685b      	ldr	r3, [r3, #4]
3418671e:	2b00      	cmp	r3, #0
34186720:	d020      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
34186722:	687b      	ldr	r3, [r7, #4]
34186724:	685b      	ldr	r3, [r3, #4]
34186726:	2b01      	cmp	r3, #1
34186728:	d01c      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
3418672a:	687b      	ldr	r3, [r7, #4]
3418672c:	685b      	ldr	r3, [r3, #4]
3418672e:	2b02      	cmp	r3, #2
34186730:	d018      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
34186732:	687b      	ldr	r3, [r7, #4]
34186734:	685b      	ldr	r3, [r3, #4]
34186736:	2b03      	cmp	r3, #3
34186738:	d014      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
3418673a:	687b      	ldr	r3, [r7, #4]
3418673c:	685b      	ldr	r3, [r3, #4]
3418673e:	2b04      	cmp	r3, #4
34186740:	d010      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
34186742:	687b      	ldr	r3, [r7, #4]
34186744:	685b      	ldr	r3, [r3, #4]
34186746:	2b05      	cmp	r3, #5
34186748:	d00c      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
3418674a:	687b      	ldr	r3, [r7, #4]
3418674c:	685b      	ldr	r3, [r3, #4]
3418674e:	2b06      	cmp	r3, #6
34186750:	d008      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
34186752:	687b      	ldr	r3, [r7, #4]
34186754:	685b      	ldr	r3, [r3, #4]
34186756:	2b07      	cmp	r3, #7
34186758:	d004      	beq.n	34186764 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x140>
3418675a:	f241 2122 	movw	r1, #4642	@ 0x1222
3418675e:	4828      	ldr	r0, [pc, #160]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
34186760:	f7fb fd84 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));
34186764:	687b      	ldr	r3, [r7, #4]
34186766:	691b      	ldr	r3, [r3, #16]
34186768:	2b00      	cmp	r3, #0
3418676a:	d020      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
3418676c:	687b      	ldr	r3, [r7, #4]
3418676e:	691b      	ldr	r3, [r3, #16]
34186770:	2b01      	cmp	r3, #1
34186772:	d01c      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
34186774:	687b      	ldr	r3, [r7, #4]
34186776:	691b      	ldr	r3, [r3, #16]
34186778:	2b02      	cmp	r3, #2
3418677a:	d018      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
3418677c:	687b      	ldr	r3, [r7, #4]
3418677e:	691b      	ldr	r3, [r3, #16]
34186780:	2b03      	cmp	r3, #3
34186782:	d014      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
34186784:	687b      	ldr	r3, [r7, #4]
34186786:	691b      	ldr	r3, [r3, #16]
34186788:	2b04      	cmp	r3, #4
3418678a:	d010      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
3418678c:	687b      	ldr	r3, [r7, #4]
3418678e:	691b      	ldr	r3, [r3, #16]
34186790:	2b05      	cmp	r3, #5
34186792:	d00c      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
34186794:	687b      	ldr	r3, [r7, #4]
34186796:	691b      	ldr	r3, [r3, #16]
34186798:	2b06      	cmp	r3, #6
3418679a:	d008      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
3418679c:	687b      	ldr	r3, [r7, #4]
3418679e:	691b      	ldr	r3, [r3, #16]
341867a0:	2b07      	cmp	r3, #7
341867a2:	d004      	beq.n	341867ae <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x18a>
341867a4:	f241 2123 	movw	r1, #4643	@ 0x1223
341867a8:	4815      	ldr	r0, [pc, #84]	@ (34186800 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1dc>)
341867aa:	f7fb fd5f 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341867ae:	68bb      	ldr	r3, [r7, #8]
341867b0:	2b01      	cmp	r3, #1
341867b2:	d120      	bne.n	341867f6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1d2>
  {

    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
341867b4:	687b      	ldr	r3, [r7, #4]
341867b6:	689a      	ldr	r2, [r3, #8]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
341867b8:	687b      	ldr	r3, [r7, #4]
341867ba:	68db      	ldr	r3, [r3, #12]
341867bc:	041b      	lsls	r3, r3, #16
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
341867be:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
341867c0:	687b      	ldr	r3, [r7, #4]
341867c2:	691b      	ldr	r3, [r3, #16]
341867c4:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
341867c6:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
341867c8:	687b      	ldr	r3, [r7, #4]
341867ca:	681b      	ldr	r3, [r3, #0]
341867cc:	051b      	lsls	r3, r3, #20
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
341867ce:	431a      	orrs	r2, r3
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
341867d0:	687b      	ldr	r3, [r7, #4]
341867d2:	685b      	ldr	r3, [r3, #4]
341867d4:	061b      	lsls	r3, r3, #24
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
341867d6:	4313      	orrs	r3, r2
341867d8:	617b      	str	r3, [r7, #20]


    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
341867da:	68fb      	ldr	r3, [r7, #12]
341867dc:	681b      	ldr	r3, [r3, #0]
341867de:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
341867e2:	4b08      	ldr	r3, [pc, #32]	@ (34186804 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1e0>)
341867e4:	4013      	ands	r3, r2
341867e6:	68fa      	ldr	r2, [r7, #12]
341867e8:	6812      	ldr	r2, [r2, #0]
341867ea:	6979      	ldr	r1, [r7, #20]
341867ec:	430b      	orrs	r3, r1
341867ee:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341867f2:	2300      	movs	r3, #0
341867f4:	e000      	b.n	341867f8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x1d4>
    return HAL_ERROR;
341867f6:	2301      	movs	r3, #1
}
341867f8:	4618      	mov	r0, r3
341867fa:	3718      	adds	r7, #24
341867fc:	46bd      	mov	sp, r7
341867fe:	bd80      	pop	{r7, pc}
34186800:	341a4eec 	.word	0x341a4eec
34186804:	8888fff9 	.word	0x8888fff9

34186808 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186808:	b580      	push	{r7, lr}
3418680a:	b082      	sub	sp, #8
3418680c:	af00      	add	r7, sp, #0
3418680e:	6078      	str	r0, [r7, #4]
34186810:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34186812:	687b      	ldr	r3, [r7, #4]
34186814:	2b00      	cmp	r3, #0
34186816:	d101      	bne.n	3418681c <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34186818:	2301      	movs	r3, #1
3418681a:	e01d      	b.n	34186858 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418681c:	683b      	ldr	r3, [r7, #0]
3418681e:	2b00      	cmp	r3, #0
34186820:	d00a      	beq.n	34186838 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x30>
34186822:	683b      	ldr	r3, [r7, #0]
34186824:	2b01      	cmp	r3, #1
34186826:	d007      	beq.n	34186838 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x30>
34186828:	683b      	ldr	r3, [r7, #0]
3418682a:	2b02      	cmp	r3, #2
3418682c:	d004      	beq.n	34186838 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x30>
3418682e:	f241 214a 	movw	r1, #4682	@ 0x124a
34186832:	480b      	ldr	r0, [pc, #44]	@ (34186860 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x58>)
34186834:	f7fb fd1a 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186838:	683b      	ldr	r3, [r7, #0]
3418683a:	2b01      	cmp	r3, #1
3418683c:	d10b      	bne.n	34186856 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3418683e:	687b      	ldr	r3, [r7, #4]
34186840:	681b      	ldr	r3, [r3, #0]
34186842:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
34186846:	687b      	ldr	r3, [r7, #4]
34186848:	681b      	ldr	r3, [r3, #0]
3418684a:	f042 0201 	orr.w	r2, r2, #1
3418684e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186852:	2300      	movs	r3, #0
34186854:	e000      	b.n	34186858 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x50>
    return HAL_ERROR;
34186856:	2301      	movs	r3, #1
}
34186858:	4618      	mov	r0, r3
3418685a:	3708      	adds	r7, #8
3418685c:	46bd      	mov	sp, r7
3418685e:	bd80      	pop	{r7, pc}
34186860:	341a4eec 	.word	0x341a4eec

34186864 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186864:	b580      	push	{r7, lr}
34186866:	b082      	sub	sp, #8
34186868:	af00      	add	r7, sp, #0
3418686a:	6078      	str	r0, [r7, #4]
3418686c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418686e:	687b      	ldr	r3, [r7, #4]
34186870:	2b00      	cmp	r3, #0
34186872:	d101      	bne.n	34186878 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
  {
    return HAL_ERROR;
34186874:	2301      	movs	r3, #1
34186876:	e01d      	b.n	341868b4 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186878:	683b      	ldr	r3, [r7, #0]
3418687a:	2b00      	cmp	r3, #0
3418687c:	d00a      	beq.n	34186894 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x30>
3418687e:	683b      	ldr	r3, [r7, #0]
34186880:	2b01      	cmp	r3, #1
34186882:	d007      	beq.n	34186894 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x30>
34186884:	683b      	ldr	r3, [r7, #0]
34186886:	2b02      	cmp	r3, #2
34186888:	d004      	beq.n	34186894 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x30>
3418688a:	f241 2167 	movw	r1, #4711	@ 0x1267
3418688e:	480b      	ldr	r0, [pc, #44]	@ (341868bc <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x58>)
34186890:	f7fb fcec 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186894:	683b      	ldr	r3, [r7, #0]
34186896:	2b01      	cmp	r3, #1
34186898:	d10b      	bne.n	341868b2 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3418689a:	687b      	ldr	r3, [r7, #4]
3418689c:	681b      	ldr	r3, [r3, #0]
3418689e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
341868a2:	687b      	ldr	r3, [r7, #4]
341868a4:	681b      	ldr	r3, [r3, #0]
341868a6:	f022 0201 	bic.w	r2, r2, #1
341868aa:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341868ae:	2300      	movs	r3, #0
341868b0:	e000      	b.n	341868b4 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x50>
    return HAL_ERROR;
341868b2:	2301      	movs	r3, #1
}
341868b4:	4618      	mov	r0, r3
341868b6:	3708      	adds	r7, #8
341868b8:	46bd      	mov	sp, r7
341868ba:	bd80      	pop	{r7, pc}
341868bc:	341a4eec 	.word	0x341a4eec

341868c0 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
  * @param  NbLastLines  number of valid image line to keep after the skipped first lines
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t NbFirstLines, uint32_t NbLastLines)
{
341868c0:	b580      	push	{r7, lr}
341868c2:	b086      	sub	sp, #24
341868c4:	af00      	add	r7, sp, #0
341868c6:	60f8      	str	r0, [r7, #12]
341868c8:	60b9      	str	r1, [r7, #8]
341868ca:	607a      	str	r2, [r7, #4]
341868cc:	603b      	str	r3, [r7, #0]
  uint32_t p1srcr_reg;

  /* Check handles validity */
  if (hdcmipp == NULL)
341868ce:	68fb      	ldr	r3, [r7, #12]
341868d0:	2b00      	cmp	r3, #0
341868d2:	d101      	bne.n	341868d8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x18>
  {
    return HAL_ERROR;
341868d4:	2301      	movs	r3, #1
341868d6:	e037      	b.n	34186948 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x88>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341868d8:	68bb      	ldr	r3, [r7, #8]
341868da:	2b00      	cmp	r3, #0
341868dc:	d00a      	beq.n	341868f4 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x34>
341868de:	68bb      	ldr	r3, [r7, #8]
341868e0:	2b01      	cmp	r3, #1
341868e2:	d007      	beq.n	341868f4 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x34>
341868e4:	68bb      	ldr	r3, [r7, #8]
341868e6:	2b02      	cmp	r3, #2
341868e8:	d004      	beq.n	341868f4 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x34>
341868ea:	f241 2189 	movw	r1, #4745	@ 0x1289
341868ee:	4818      	ldr	r0, [pc, #96]	@ (34186950 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x90>)
341868f0:	f7fb fcbc 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
341868f4:	687b      	ldr	r3, [r7, #4]
341868f6:	2b07      	cmp	r3, #7
341868f8:	d904      	bls.n	34186904 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x44>
341868fa:	f241 218a 	movw	r1, #4746	@ 0x128a
341868fe:	4814      	ldr	r0, [pc, #80]	@ (34186950 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x90>)
34186900:	f7fb fcb4 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));
34186904:	683b      	ldr	r3, [r7, #0]
34186906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418690a:	d304      	bcc.n	34186916 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x56>
3418690c:	f241 218b 	movw	r1, #4747	@ 0x128b
34186910:	480f      	ldr	r0, [pc, #60]	@ (34186950 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x90>)
34186912:	f7fb fcab 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186916:	68bb      	ldr	r3, [r7, #8]
34186918:	2b01      	cmp	r3, #1
3418691a:	d114      	bne.n	34186946 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x86>
  {
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
3418691c:	687b      	ldr	r3, [r7, #4]
3418691e:	031b      	lsls	r3, r3, #12
34186920:	683a      	ldr	r2, [r7, #0]
34186922:	4313      	orrs	r3, r2
34186924:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34186926:	68fb      	ldr	r3, [r7, #12]
34186928:	681b      	ldr	r3, [r3, #0]
3418692a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
3418692e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34186932:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34186936:	68fa      	ldr	r2, [r7, #12]
34186938:	6812      	ldr	r2, [r2, #0]
3418693a:	6979      	ldr	r1, [r7, #20]
3418693c:	430b      	orrs	r3, r1
3418693e:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186942:	2300      	movs	r3, #0
34186944:	e000      	b.n	34186948 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x88>
    return HAL_ERROR;
34186946:	2301      	movs	r3, #1
}
34186948:	4618      	mov	r0, r3
3418694a:	3718      	adds	r7, #24
3418694c:	46bd      	mov	sp, r7
3418694e:	bd80      	pop	{r7, pc}
34186950:	341a4eec 	.word	0x341a4eec

34186954 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186954:	b480      	push	{r7}
34186956:	b083      	sub	sp, #12
34186958:	af00      	add	r7, sp, #0
3418695a:	6078      	str	r0, [r7, #4]
3418695c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418695e:	687b      	ldr	r3, [r7, #4]
34186960:	2b00      	cmp	r3, #0
34186962:	d101      	bne.n	34186968 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
34186964:	2301      	movs	r3, #1
34186966:	e00f      	b.n	34186988 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
34186968:	683b      	ldr	r3, [r7, #0]
3418696a:	2b01      	cmp	r3, #1
3418696c:	d10b      	bne.n	34186986 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x32>
  {
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
3418696e:	687b      	ldr	r3, [r7, #4]
34186970:	681b      	ldr	r3, [r3, #0]
34186972:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34186976:	687b      	ldr	r3, [r7, #4]
34186978:	681b      	ldr	r3, [r3, #0]
3418697a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3418697e:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186982:	2300      	movs	r3, #0
34186984:	e000      	b.n	34186988 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x34>
    return HAL_ERROR;
34186986:	2301      	movs	r3, #1
}
34186988:	4618      	mov	r0, r3
3418698a:	370c      	adds	r7, #12
3418698c:	46bd      	mov	sp, r7
3418698e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186992:	4770      	bx	lr

34186994 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186994:	b480      	push	{r7}
34186996:	b083      	sub	sp, #12
34186998:	af00      	add	r7, sp, #0
3418699a:	6078      	str	r0, [r7, #4]
3418699c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
3418699e:	687b      	ldr	r3, [r7, #4]
341869a0:	2b00      	cmp	r3, #0
341869a2:	d101      	bne.n	341869a8 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x14>
  {
    return HAL_ERROR;
341869a4:	2301      	movs	r3, #1
341869a6:	e00f      	b.n	341869c8 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
  }

  if (Pipe == DCMIPP_PIPE1)
341869a8:	683b      	ldr	r3, [r7, #0]
341869aa:	2b01      	cmp	r3, #1
341869ac:	d10b      	bne.n	341869c6 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x32>
  {
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
341869ae:	687b      	ldr	r3, [r7, #4]
341869b0:	681b      	ldr	r3, [r3, #0]
341869b2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
341869b6:	687b      	ldr	r3, [r7, #4]
341869b8:	681b      	ldr	r3, [r3, #0]
341869ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
341869be:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341869c2:	2300      	movs	r3, #0
341869c4:	e000      	b.n	341869c8 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x34>
    return HAL_ERROR;
341869c6:	2301      	movs	r3, #1
}
341869c8:	4618      	mov	r0, r3
341869ca:	370c      	adds	r7, #12
341869cc:	46bd      	mov	sp, r7
341869ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341869d2:	4770      	bx	lr

341869d4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
  * @param  Strength Specifies the removal strength, can be a value from @ref DCMIPP_Bad_Pixel_Removal_Strength
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              uint32_t Strength)
{
341869d4:	b580      	push	{r7, lr}
341869d6:	b084      	sub	sp, #16
341869d8:	af00      	add	r7, sp, #0
341869da:	60f8      	str	r0, [r7, #12]
341869dc:	60b9      	str	r1, [r7, #8]
341869de:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if (hdcmipp == NULL)
341869e0:	68fb      	ldr	r3, [r7, #12]
341869e2:	2b00      	cmp	r3, #0
341869e4:	d101      	bne.n	341869ea <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x16>
  {
    return HAL_ERROR;
341869e6:	2301      	movs	r3, #1
341869e8:	e03d      	b.n	34186a66 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x92>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341869ea:	68bb      	ldr	r3, [r7, #8]
341869ec:	2b00      	cmp	r3, #0
341869ee:	d00a      	beq.n	34186a06 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x32>
341869f0:	68bb      	ldr	r3, [r7, #8]
341869f2:	2b01      	cmp	r3, #1
341869f4:	d007      	beq.n	34186a06 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x32>
341869f6:	68bb      	ldr	r3, [r7, #8]
341869f8:	2b02      	cmp	r3, #2
341869fa:	d004      	beq.n	34186a06 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x32>
341869fc:	f241 21ea 	movw	r1, #4842	@ 0x12ea
34186a00:	481b      	ldr	r0, [pc, #108]	@ (34186a70 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x9c>)
34186a02:	f7fb fc33 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
34186a06:	687b      	ldr	r3, [r7, #4]
34186a08:	2b00      	cmp	r3, #0
34186a0a:	d019      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a0c:	687b      	ldr	r3, [r7, #4]
34186a0e:	2b01      	cmp	r3, #1
34186a10:	d016      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a12:	687b      	ldr	r3, [r7, #4]
34186a14:	2b02      	cmp	r3, #2
34186a16:	d013      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a18:	687b      	ldr	r3, [r7, #4]
34186a1a:	2b03      	cmp	r3, #3
34186a1c:	d010      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a1e:	687b      	ldr	r3, [r7, #4]
34186a20:	2b04      	cmp	r3, #4
34186a22:	d00d      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a24:	687b      	ldr	r3, [r7, #4]
34186a26:	2b05      	cmp	r3, #5
34186a28:	d00a      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a2a:	687b      	ldr	r3, [r7, #4]
34186a2c:	2b06      	cmp	r3, #6
34186a2e:	d007      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a30:	687b      	ldr	r3, [r7, #4]
34186a32:	2b07      	cmp	r3, #7
34186a34:	d004      	beq.n	34186a40 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x6c>
34186a36:	f241 21eb 	movw	r1, #4843	@ 0x12eb
34186a3a:	480d      	ldr	r0, [pc, #52]	@ (34186a70 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x9c>)
34186a3c:	f7fb fc16 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186a40:	68bb      	ldr	r3, [r7, #8]
34186a42:	2b01      	cmp	r3, #1
34186a44:	d10e      	bne.n	34186a64 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x90>
  {
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34186a46:	68fb      	ldr	r3, [r7, #12]
34186a48:	681b      	ldr	r3, [r3, #0]
34186a4a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
34186a4e:	f023 010e 	bic.w	r1, r3, #14
34186a52:	687b      	ldr	r3, [r7, #4]
34186a54:	005a      	lsls	r2, r3, #1
34186a56:	68fb      	ldr	r3, [r7, #12]
34186a58:	681b      	ldr	r3, [r3, #0]
34186a5a:	430a      	orrs	r2, r1
34186a5c:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186a60:	2300      	movs	r3, #0
34186a62:	e000      	b.n	34186a66 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x92>
    return HAL_ERROR;
34186a64:	2301      	movs	r3, #1
}
34186a66:	4618      	mov	r0, r3
34186a68:	3710      	adds	r7, #16
34186a6a:	46bd      	mov	sp, r7
34186a6c:	bd80      	pop	{r7, pc}
34186a6e:	bf00      	nop
34186a70:	341a4eec 	.word	0x341a4eec

34186a74 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186a74:	b580      	push	{r7, lr}
34186a76:	b082      	sub	sp, #8
34186a78:	af00      	add	r7, sp, #0
34186a7a:	6078      	str	r0, [r7, #4]
34186a7c:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34186a7e:	687b      	ldr	r3, [r7, #4]
34186a80:	2b00      	cmp	r3, #0
34186a82:	d101      	bne.n	34186a88 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
34186a84:	2301      	movs	r3, #1
34186a86:	e01d      	b.n	34186ac4 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186a88:	683b      	ldr	r3, [r7, #0]
34186a8a:	2b00      	cmp	r3, #0
34186a8c:	d00a      	beq.n	34186aa4 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x30>
34186a8e:	683b      	ldr	r3, [r7, #0]
34186a90:	2b01      	cmp	r3, #1
34186a92:	d007      	beq.n	34186aa4 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x30>
34186a94:	683b      	ldr	r3, [r7, #0]
34186a96:	2b02      	cmp	r3, #2
34186a98:	d004      	beq.n	34186aa4 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x30>
34186a9a:	f241 3108 	movw	r1, #4872	@ 0x1308
34186a9e:	480b      	ldr	r0, [pc, #44]	@ (34186acc <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x58>)
34186aa0:	f7fb fbe4 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186aa4:	683b      	ldr	r3, [r7, #0]
34186aa6:	2b01      	cmp	r3, #1
34186aa8:	d10b      	bne.n	34186ac2 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34186aaa:	687b      	ldr	r3, [r7, #4]
34186aac:	681b      	ldr	r3, [r3, #0]
34186aae:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
34186ab2:	687b      	ldr	r3, [r7, #4]
34186ab4:	681b      	ldr	r3, [r3, #0]
34186ab6:	f042 0201 	orr.w	r2, r2, #1
34186aba:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186abe:	2300      	movs	r3, #0
34186ac0:	e000      	b.n	34186ac4 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x50>
    return HAL_ERROR;
34186ac2:	2301      	movs	r3, #1
}
34186ac4:	4618      	mov	r0, r3
34186ac6:	3708      	adds	r7, #8
34186ac8:	46bd      	mov	sp, r7
34186aca:	bd80      	pop	{r7, pc}
34186acc:	341a4eec 	.word	0x341a4eec

34186ad0 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186ad0:	b580      	push	{r7, lr}
34186ad2:	b082      	sub	sp, #8
34186ad4:	af00      	add	r7, sp, #0
34186ad6:	6078      	str	r0, [r7, #4]
34186ad8:	6039      	str	r1, [r7, #0]
  /* Check handles validity */
  if (hdcmipp == NULL)
34186ada:	687b      	ldr	r3, [r7, #4]
34186adc:	2b00      	cmp	r3, #0
34186ade:	d101      	bne.n	34186ae4 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
  {
    return HAL_ERROR;
34186ae0:	2301      	movs	r3, #1
34186ae2:	e01d      	b.n	34186b20 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186ae4:	683b      	ldr	r3, [r7, #0]
34186ae6:	2b00      	cmp	r3, #0
34186ae8:	d00a      	beq.n	34186b00 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x30>
34186aea:	683b      	ldr	r3, [r7, #0]
34186aec:	2b01      	cmp	r3, #1
34186aee:	d007      	beq.n	34186b00 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x30>
34186af0:	683b      	ldr	r3, [r7, #0]
34186af2:	2b02      	cmp	r3, #2
34186af4:	d004      	beq.n	34186b00 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x30>
34186af6:	f241 3125 	movw	r1, #4901	@ 0x1325
34186afa:	480b      	ldr	r0, [pc, #44]	@ (34186b28 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x58>)
34186afc:	f7fb fbb6 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186b00:	683b      	ldr	r3, [r7, #0]
34186b02:	2b01      	cmp	r3, #1
34186b04:	d10b      	bne.n	34186b1e <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34186b06:	687b      	ldr	r3, [r7, #4]
34186b08:	681b      	ldr	r3, [r3, #0]
34186b0a:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
34186b0e:	687b      	ldr	r3, [r7, #4]
34186b10:	681b      	ldr	r3, [r3, #0]
34186b12:	f022 0201 	bic.w	r2, r2, #1
34186b16:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186b1a:	2300      	movs	r3, #0
34186b1c:	e000      	b.n	34186b20 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x50>
    return HAL_ERROR;
34186b1e:	2301      	movs	r3, #1
}
34186b20:	4618      	mov	r0, r3
34186b22:	3708      	adds	r7, #8
34186b24:	46bd      	mov	sp, r7
34186b26:	bd80      	pop	{r7, pc}
34186b28:	341a4eec 	.word	0x341a4eec

34186b2c <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval  The strength of the bad pixel removal process.
  */
uint32_t HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186b2c:	b580      	push	{r7, lr}
34186b2e:	b082      	sub	sp, #8
34186b30:	af00      	add	r7, sp, #0
34186b32:	6078      	str	r0, [r7, #4]
34186b34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186b36:	683b      	ldr	r3, [r7, #0]
34186b38:	2b00      	cmp	r3, #0
34186b3a:	d00a      	beq.n	34186b52 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x26>
34186b3c:	683b      	ldr	r3, [r7, #0]
34186b3e:	2b01      	cmp	r3, #1
34186b40:	d007      	beq.n	34186b52 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x26>
34186b42:	683b      	ldr	r3, [r7, #0]
34186b44:	2b02      	cmp	r3, #2
34186b46:	d004      	beq.n	34186b52 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x26>
34186b48:	f241 313b 	movw	r1, #4923	@ 0x133b
34186b4c:	4806      	ldr	r0, [pc, #24]	@ (34186b68 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x3c>)
34186b4e:	f7fb fb8d 	bl	3418226c <assert_failed>

  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
34186b52:	687b      	ldr	r3, [r7, #4]
34186b54:	681b      	ldr	r3, [r3, #0]
34186b56:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
34186b5a:	085b      	lsrs	r3, r3, #1
34186b5c:	f003 0307 	and.w	r3, r3, #7
}
34186b60:	4618      	mov	r0, r3
34186b62:	3708      	adds	r7, #8
34186b64:	46bd      	mov	sp, r7
34186b66:	bd80      	pop	{r7, pc}
34186b68:	341a4eec 	.word	0x341a4eec

34186b6c <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34186b6c:	b580      	push	{r7, lr}
34186b6e:	b082      	sub	sp, #8
34186b70:	af00      	add	r7, sp, #0
34186b72:	6078      	str	r0, [r7, #4]
34186b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34186b76:	687b      	ldr	r3, [r7, #4]
34186b78:	681b      	ldr	r3, [r3, #0]
34186b7a:	4a17      	ldr	r2, [pc, #92]	@ (34186bd8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x6c>)
34186b7c:	4293      	cmp	r3, r2
34186b7e:	d009      	beq.n	34186b94 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x28>
34186b80:	687b      	ldr	r3, [r7, #4]
34186b82:	681b      	ldr	r3, [r3, #0]
34186b84:	4a15      	ldr	r2, [pc, #84]	@ (34186bdc <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x70>)
34186b86:	4293      	cmp	r3, r2
34186b88:	d004      	beq.n	34186b94 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x28>
34186b8a:	f241 3148 	movw	r1, #4936	@ 0x1348
34186b8e:	4814      	ldr	r0, [pc, #80]	@ (34186be0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x74>)
34186b90:	f7fb fb6c 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186b94:	683b      	ldr	r3, [r7, #0]
34186b96:	2b00      	cmp	r3, #0
34186b98:	d00a      	beq.n	34186bb0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>
34186b9a:	683b      	ldr	r3, [r7, #0]
34186b9c:	2b01      	cmp	r3, #1
34186b9e:	d007      	beq.n	34186bb0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>
34186ba0:	683b      	ldr	r3, [r7, #0]
34186ba2:	2b02      	cmp	r3, #2
34186ba4:	d004      	beq.n	34186bb0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>
34186ba6:	f241 3149 	movw	r1, #4937	@ 0x1349
34186baa:	480d      	ldr	r0, [pc, #52]	@ (34186be0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x74>)
34186bac:	f7fb fb5e 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186bb0:	683b      	ldr	r3, [r7, #0]
34186bb2:	2b01      	cmp	r3, #1
34186bb4:	d10b      	bne.n	34186bce <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x62>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
34186bb6:	687b      	ldr	r3, [r7, #4]
34186bb8:	681b      	ldr	r3, [r3, #0]
34186bba:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
34186bbe:	f003 0301 	and.w	r3, r3, #1
34186bc2:	2b01      	cmp	r3, #1
34186bc4:	d101      	bne.n	34186bca <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x5e>
34186bc6:	2301      	movs	r3, #1
34186bc8:	e002      	b.n	34186bd0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x64>
34186bca:	2300      	movs	r3, #0
34186bcc:	e000      	b.n	34186bd0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x64>
  }
  else
  {
    /* State Disabled */
    return 0;
34186bce:	2300      	movs	r3, #0
  }
}
34186bd0:	4618      	mov	r0, r3
34186bd2:	3708      	adds	r7, #8
34186bd4:	46bd      	mov	sp, r7
34186bd6:	bd80      	pop	{r7, pc}
34186bd8:	58002000 	.word	0x58002000
34186bdc:	48002000 	.word	0x48002000
34186be0:	341a4eec 	.word	0x341a4eec

34186be4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
  * @param  pCounter pointer receiving the number of corrected bad pixels
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint32_t *pCounter)
{
34186be4:	b580      	push	{r7, lr}
34186be6:	b084      	sub	sp, #16
34186be8:	af00      	add	r7, sp, #0
34186bea:	60f8      	str	r0, [r7, #12]
34186bec:	60b9      	str	r1, [r7, #8]
34186bee:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
34186bf0:	68fb      	ldr	r3, [r7, #12]
34186bf2:	2b00      	cmp	r3, #0
34186bf4:	d002      	beq.n	34186bfc <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x18>
34186bf6:	687b      	ldr	r3, [r7, #4]
34186bf8:	2b00      	cmp	r3, #0
34186bfa:	d101      	bne.n	34186c00 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1c>
  {
    return HAL_ERROR;
34186bfc:	2301      	movs	r3, #1
34186bfe:	e01d      	b.n	34186c3c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x58>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186c00:	68bb      	ldr	r3, [r7, #8]
34186c02:	2b00      	cmp	r3, #0
34186c04:	d00a      	beq.n	34186c1c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x38>
34186c06:	68bb      	ldr	r3, [r7, #8]
34186c08:	2b01      	cmp	r3, #1
34186c0a:	d007      	beq.n	34186c1c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x38>
34186c0c:	68bb      	ldr	r3, [r7, #8]
34186c0e:	2b02      	cmp	r3, #2
34186c10:	d004      	beq.n	34186c1c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x38>
34186c12:	f241 3166 	movw	r1, #4966	@ 0x1366
34186c16:	480b      	ldr	r0, [pc, #44]	@ (34186c44 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x60>)
34186c18:	f7fb fb28 	bl	3418226c <assert_failed>

  /* Check the DCMIPP State */
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34186c1c:	68fb      	ldr	r3, [r7, #12]
34186c1e:	791b      	ldrb	r3, [r3, #4]
34186c20:	b2db      	uxtb	r3, r3
34186c22:	2b02      	cmp	r3, #2
34186c24:	d109      	bne.n	34186c3a <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x56>
  {
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
34186c26:	68fb      	ldr	r3, [r7, #12]
34186c28:	681b      	ldr	r3, [r3, #0]
34186c2a:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
34186c2e:	f3c3 020b 	ubfx	r2, r3, #0, #12
34186c32:	687b      	ldr	r3, [r7, #4]
34186c34:	601a      	str	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34186c36:	2300      	movs	r3, #0
34186c38:	e000      	b.n	34186c3c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x58>
    return HAL_ERROR;
34186c3a:	2301      	movs	r3, #1
}
34186c3c:	4618      	mov	r0, r3
34186c3e:	3710      	adds	r7, #16
34186c40:	46bd      	mov	sp, r7
34186c42:	bd80      	pop	{r7, pc}
34186c44:	341a4eec 	.word	0x341a4eec

34186c48 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPColorConversionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                              const DCMIPP_ColorConversionConfTypeDef
                                                              *pColorConversionConfig)
{
34186c48:	b580      	push	{r7, lr}
34186c4a:	b086      	sub	sp, #24
34186c4c:	af00      	add	r7, sp, #0
34186c4e:	60f8      	str	r0, [r7, #12]
34186c50:	60b9      	str	r1, [r7, #8]
34186c52:	607a      	str	r2, [r7, #4]
  uint32_t p1cccr_reg;
  uint16_t tmp1;
  uint16_t tmp2;

  /* Check handles validity */
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34186c54:	68fb      	ldr	r3, [r7, #12]
34186c56:	2b00      	cmp	r3, #0
34186c58:	d002      	beq.n	34186c60 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x18>
34186c5a:	687b      	ldr	r3, [r7, #4]
34186c5c:	2b00      	cmp	r3, #0
34186c5e:	d101      	bne.n	34186c64 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c>
  {
    return HAL_ERROR;
34186c60:	2301      	movs	r3, #1
34186c62:	e1fb      	b.n	3418705c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x414>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34186c64:	68bb      	ldr	r3, [r7, #8]
34186c66:	2b00      	cmp	r3, #0
34186c68:	d00a      	beq.n	34186c80 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x38>
34186c6a:	68bb      	ldr	r3, [r7, #8]
34186c6c:	2b01      	cmp	r3, #1
34186c6e:	d007      	beq.n	34186c80 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x38>
34186c70:	68bb      	ldr	r3, [r7, #8]
34186c72:	2b02      	cmp	r3, #2
34186c74:	d004      	beq.n	34186c80 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x38>
34186c76:	f241 4125 	movw	r1, #5157	@ 0x1425
34186c7a:	489e      	ldr	r0, [pc, #632]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186c7c:	f7fb faf6 	bl	3418226c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pColorConversionConfig->ClampOutputSamples));
34186c80:	687b      	ldr	r3, [r7, #4]
34186c82:	781b      	ldrb	r3, [r3, #0]
34186c84:	2b00      	cmp	r3, #0
34186c86:	d008      	beq.n	34186c9a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x52>
34186c88:	687b      	ldr	r3, [r7, #4]
34186c8a:	781b      	ldrb	r3, [r3, #0]
34186c8c:	2b01      	cmp	r3, #1
34186c8e:	d004      	beq.n	34186c9a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x52>
34186c90:	f241 4126 	movw	r1, #5158	@ 0x1426
34186c94:	4897      	ldr	r0, [pc, #604]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186c96:	f7fb fae9 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_OUTPUT_SAMPLES_TYPES(pColorConversionConfig->OutputSamplesType));
34186c9a:	687b      	ldr	r3, [r7, #4]
34186c9c:	785b      	ldrb	r3, [r3, #1]
34186c9e:	2b00      	cmp	r3, #0
34186ca0:	d008      	beq.n	34186cb4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6c>
34186ca2:	687b      	ldr	r3, [r7, #4]
34186ca4:	785b      	ldrb	r3, [r3, #1]
34186ca6:	2b02      	cmp	r3, #2
34186ca8:	d004      	beq.n	34186cb4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6c>
34186caa:	f241 4127 	movw	r1, #5159	@ 0x1427
34186cae:	4891      	ldr	r0, [pc, #580]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186cb0:	f7fb fadc 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RR));
34186cb4:	687b      	ldr	r3, [r7, #4]
34186cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186cbe:	db04      	blt.n	34186cca <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x82>
34186cc0:	f241 4128 	movw	r1, #5160	@ 0x1428
34186cc4:	488b      	ldr	r0, [pc, #556]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186cc6:	f7fb fad1 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RG));
34186cca:	687b      	ldr	r3, [r7, #4]
34186ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34186cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186cd4:	db04      	blt.n	34186ce0 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x98>
34186cd6:	f241 4129 	movw	r1, #5161	@ 0x1429
34186cda:	4886      	ldr	r0, [pc, #536]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186cdc:	f7fb fac6 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RB));
34186ce0:	687b      	ldr	r3, [r7, #4]
34186ce2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
34186ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186cea:	db04      	blt.n	34186cf6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xae>
34186cec:	f241 412a 	movw	r1, #5162	@ 0x142a
34186cf0:	4880      	ldr	r0, [pc, #512]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186cf2:	f7fb fabb 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RA));
34186cf6:	687b      	ldr	r3, [r7, #4]
34186cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
34186cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d00:	db04      	blt.n	34186d0c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xc4>
34186d02:	f241 412b 	movw	r1, #5163	@ 0x142b
34186d06:	487b      	ldr	r0, [pc, #492]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d08:	f7fb fab0 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GR));
34186d0c:	687b      	ldr	r3, [r7, #4]
34186d0e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d16:	db04      	blt.n	34186d22 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xda>
34186d18:	f241 412c 	movw	r1, #5164	@ 0x142c
34186d1c:	4875      	ldr	r0, [pc, #468]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d1e:	f7fb faa5 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GG));
34186d22:	687b      	ldr	r3, [r7, #4]
34186d24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34186d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d2c:	db04      	blt.n	34186d38 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf0>
34186d2e:	f241 412d 	movw	r1, #5165	@ 0x142d
34186d32:	4870      	ldr	r0, [pc, #448]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d34:	f7fb fa9a 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GB));
34186d38:	687b      	ldr	r3, [r7, #4]
34186d3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34186d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d42:	db04      	blt.n	34186d4e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x106>
34186d44:	f241 412e 	movw	r1, #5166	@ 0x142e
34186d48:	486a      	ldr	r0, [pc, #424]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d4a:	f7fb fa8f 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GA));
34186d4e:	687b      	ldr	r3, [r7, #4]
34186d50:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
34186d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d58:	db04      	blt.n	34186d64 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x11c>
34186d5a:	f241 412f 	movw	r1, #5167	@ 0x142f
34186d5e:	4865      	ldr	r0, [pc, #404]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d60:	f7fb fa84 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
34186d64:	687b      	ldr	r3, [r7, #4]
34186d66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
34186d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d6e:	db04      	blt.n	34186d7a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x132>
34186d70:	f241 4130 	movw	r1, #5168	@ 0x1430
34186d74:	485f      	ldr	r0, [pc, #380]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d76:	f7fb fa79 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
34186d7a:	687b      	ldr	r3, [r7, #4]
34186d7c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34186d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d84:	db04      	blt.n	34186d90 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x148>
34186d86:	f241 4131 	movw	r1, #5169	@ 0x1431
34186d8a:	485a      	ldr	r0, [pc, #360]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186d8c:	f7fb fa6e 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
34186d90:	687b      	ldr	r3, [r7, #4]
34186d92:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34186d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186d9a:	db04      	blt.n	34186da6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x15e>
34186d9c:	f241 4132 	movw	r1, #5170	@ 0x1432
34186da0:	4854      	ldr	r0, [pc, #336]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186da2:	f7fb fa63 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));
34186da6:	687b      	ldr	r3, [r7, #4]
34186da8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34186dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34186db0:	db04      	blt.n	34186dbc <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x174>
34186db2:	f241 4133 	movw	r1, #5171	@ 0x1433
34186db6:	484f      	ldr	r0, [pc, #316]	@ (34186ef4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2ac>)
34186db8:	f7fb fa58 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34186dbc:	68bb      	ldr	r3, [r7, #8]
34186dbe:	2b01      	cmp	r3, #1
34186dc0:	f040 814b 	bne.w	3418705a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x412>
  {
    /* Set Clamp and Type */
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34186dc4:	687b      	ldr	r3, [r7, #4]
34186dc6:	781b      	ldrb	r3, [r3, #0]
34186dc8:	009b      	lsls	r3, r3, #2
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
34186dca:	687a      	ldr	r2, [r7, #4]
34186dcc:	7852      	ldrb	r2, [r2, #1]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34186dce:	4313      	orrs	r3, r2
34186dd0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34186dd2:	68fb      	ldr	r3, [r7, #12]
34186dd4:	681b      	ldr	r3, [r3, #0]
34186dd6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34186dda:	f023 0106 	bic.w	r1, r3, #6
34186dde:	68fb      	ldr	r3, [r7, #12]
34186de0:	681b      	ldr	r3, [r3, #0]
34186de2:	697a      	ldr	r2, [r7, #20]
34186de4:	430a      	orrs	r2, r1
34186de6:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
34186dea:	687b      	ldr	r3, [r7, #4]
34186dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186df0:	2b00      	cmp	r3, #0
34186df2:	da07      	bge.n	34186e04 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1bc>
34186df4:	687b      	ldr	r3, [r7, #4]
34186df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186dfa:	b29b      	uxth	r3, r3
34186dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186e00:	b29b      	uxth	r3, r3
34186e02:	e003      	b.n	34186e0c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1c4>
34186e04:	687b      	ldr	r3, [r7, #4]
34186e06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
34186e0a:	b29b      	uxth	r3, r3
34186e0c:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34186e0e:	687b      	ldr	r3, [r7, #4]
34186e10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34186e14:	2b00      	cmp	r3, #0
34186e16:	da07      	bge.n	34186e28 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1e0>
34186e18:	687b      	ldr	r3, [r7, #4]
34186e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34186e1e:	b29b      	uxth	r3, r3
34186e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186e24:	b29b      	uxth	r3, r3
34186e26:	e003      	b.n	34186e30 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x1e8>
34186e28:	687b      	ldr	r3, [r7, #4]
34186e2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
34186e2e:	b29b      	uxth	r3, r3
34186e30:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
34186e32:	68fb      	ldr	r3, [r7, #12]
34186e34:	681b      	ldr	r3, [r3, #0]
34186e36:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
34186e3a:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
34186e3e:	8a7a      	ldrh	r2, [r7, #18]
34186e40:	8a3b      	ldrh	r3, [r7, #16]
34186e42:	041b      	lsls	r3, r3, #16
34186e44:	431a      	orrs	r2, r3
34186e46:	68fb      	ldr	r3, [r7, #12]
34186e48:	681b      	ldr	r3, [r3, #0]
34186e4a:	430a      	orrs	r2, r1
34186e4c:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
               (((uint32_t)tmp1) << DCMIPP_P1CCRR1_RR_Pos) | (((uint32_t)tmp2) << DCMIPP_P1CCRR1_RG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
34186e50:	687b      	ldr	r3, [r7, #4]
34186e52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
34186e56:	2b00      	cmp	r3, #0
34186e58:	da07      	bge.n	34186e6a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x222>
34186e5a:	687b      	ldr	r3, [r7, #4]
34186e5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
34186e60:	b29b      	uxth	r3, r3
34186e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186e66:	b29b      	uxth	r3, r3
34186e68:	e003      	b.n	34186e72 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x22a>
34186e6a:	687b      	ldr	r3, [r7, #4]
34186e6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
34186e70:	b29b      	uxth	r3, r3
34186e72:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
34186e74:	687b      	ldr	r3, [r7, #4]
34186e76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
34186e7a:	2b00      	cmp	r3, #0
34186e7c:	da07      	bge.n	34186e8e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x246>
34186e7e:	687b      	ldr	r3, [r7, #4]
34186e80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
34186e84:	b29b      	uxth	r3, r3
34186e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186e8a:	b29b      	uxth	r3, r3
34186e8c:	e003      	b.n	34186e96 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x24e>
34186e8e:	687b      	ldr	r3, [r7, #4]
34186e90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
34186e94:	b29b      	uxth	r3, r3
34186e96:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
34186e98:	68fb      	ldr	r3, [r7, #12]
34186e9a:	681b      	ldr	r3, [r3, #0]
34186e9c:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
34186ea0:	4b15      	ldr	r3, [pc, #84]	@ (34186ef8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b0>)
34186ea2:	4013      	ands	r3, r2
34186ea4:	8a79      	ldrh	r1, [r7, #18]
34186ea6:	8a3a      	ldrh	r2, [r7, #16]
34186ea8:	0412      	lsls	r2, r2, #16
34186eaa:	4311      	orrs	r1, r2
34186eac:	68fa      	ldr	r2, [r7, #12]
34186eae:	6812      	ldr	r2, [r2, #0]
34186eb0:	430b      	orrs	r3, r1
34186eb2:	f8c2 3888 	str.w	r3, [r2, #2184]	@ 0x888
               ((uint32_t)tmp1 << DCMIPP_P1CCRR2_RB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCRR2_RA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
34186eb6:	687b      	ldr	r3, [r7, #4]
34186eb8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34186ebc:	2b00      	cmp	r3, #0
34186ebe:	da07      	bge.n	34186ed0 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x288>
34186ec0:	687b      	ldr	r3, [r7, #4]
34186ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34186ec6:	b29b      	uxth	r3, r3
34186ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186ecc:	b29b      	uxth	r3, r3
34186ece:	e003      	b.n	34186ed8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x290>
34186ed0:	687b      	ldr	r3, [r7, #4]
34186ed2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
34186ed6:	b29b      	uxth	r3, r3
34186ed8:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
34186eda:	687b      	ldr	r3, [r7, #4]
34186edc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186ee0:	2b00      	cmp	r3, #0
34186ee2:	da0b      	bge.n	34186efc <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2b4>
34186ee4:	687b      	ldr	r3, [r7, #4]
34186ee6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186eea:	b29b      	uxth	r3, r3
34186eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186ef0:	b29b      	uxth	r3, r3
34186ef2:	e007      	b.n	34186f04 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2bc>
34186ef4:	341a4eec 	.word	0x341a4eec
34186ef8:	fc00f800 	.word	0xfc00f800
34186efc:	687b      	ldr	r3, [r7, #4]
34186efe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
34186f02:	b29b      	uxth	r3, r3
34186f04:	823b      	strh	r3, [r7, #16]


    /* Set Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
34186f06:	68fb      	ldr	r3, [r7, #12]
34186f08:	681b      	ldr	r3, [r3, #0]
34186f0a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
34186f0e:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
34186f12:	8a7b      	ldrh	r3, [r7, #18]
34186f14:	041a      	lsls	r2, r3, #16
34186f16:	8a3b      	ldrh	r3, [r7, #16]
34186f18:	431a      	orrs	r2, r3
34186f1a:	68fb      	ldr	r3, [r7, #12]
34186f1c:	681b      	ldr	r3, [r3, #0]
34186f1e:	430a      	orrs	r2, r1
34186f20:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
               ((uint32_t)tmp1 << DCMIPP_P1CCGR1_GG_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR1_GR_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34186f24:	687b      	ldr	r3, [r7, #4]
34186f26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34186f2a:	2b00      	cmp	r3, #0
34186f2c:	da07      	bge.n	34186f3e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2f6>
34186f2e:	687b      	ldr	r3, [r7, #4]
34186f30:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34186f34:	b29b      	uxth	r3, r3
34186f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186f3a:	b29b      	uxth	r3, r3
34186f3c:	e003      	b.n	34186f46 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x2fe>
34186f3e:	687b      	ldr	r3, [r7, #4]
34186f40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
34186f44:	b29b      	uxth	r3, r3
34186f46:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
34186f48:	687b      	ldr	r3, [r7, #4]
34186f4a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
34186f4e:	2b00      	cmp	r3, #0
34186f50:	da07      	bge.n	34186f62 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x31a>
34186f52:	687b      	ldr	r3, [r7, #4]
34186f54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
34186f58:	b29b      	uxth	r3, r3
34186f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
34186f5e:	b29b      	uxth	r3, r3
34186f60:	e003      	b.n	34186f6a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x322>
34186f62:	687b      	ldr	r3, [r7, #4]
34186f64:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
34186f68:	b29b      	uxth	r3, r3
34186f6a:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
34186f6c:	68fb      	ldr	r3, [r7, #12]
34186f6e:	681b      	ldr	r3, [r3, #0]
34186f70:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
34186f74:	4b3b      	ldr	r3, [pc, #236]	@ (34187064 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x41c>)
34186f76:	4013      	ands	r3, r2
34186f78:	8a79      	ldrh	r1, [r7, #18]
34186f7a:	8a3a      	ldrh	r2, [r7, #16]
34186f7c:	0412      	lsls	r2, r2, #16
34186f7e:	4311      	orrs	r1, r2
34186f80:	68fa      	ldr	r2, [r7, #12]
34186f82:	6812      	ldr	r2, [r2, #0]
34186f84:	430b      	orrs	r3, r1
34186f86:	f8c2 3890 	str.w	r3, [r2, #2192]	@ 0x890
               ((uint32_t)tmp1 << DCMIPP_P1CCGR2_GB_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCGR2_GA_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
34186f8a:	687b      	ldr	r3, [r7, #4]
34186f8c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
34186f90:	2b00      	cmp	r3, #0
34186f92:	da07      	bge.n	34186fa4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x35c>
34186f94:	687b      	ldr	r3, [r7, #4]
34186f96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
34186f9a:	b29b      	uxth	r3, r3
34186f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186fa0:	b29b      	uxth	r3, r3
34186fa2:	e003      	b.n	34186fac <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x364>
34186fa4:	687b      	ldr	r3, [r7, #4]
34186fa6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
34186faa:	b29b      	uxth	r3, r3
34186fac:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
34186fae:	687b      	ldr	r3, [r7, #4]
34186fb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34186fb4:	2b00      	cmp	r3, #0
34186fb6:	da07      	bge.n	34186fc8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x380>
34186fb8:	687b      	ldr	r3, [r7, #4]
34186fba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34186fbe:	b29b      	uxth	r3, r3
34186fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
34186fc4:	b29b      	uxth	r3, r3
34186fc6:	e003      	b.n	34186fd0 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x388>
34186fc8:	687b      	ldr	r3, [r7, #4]
34186fca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
34186fce:	b29b      	uxth	r3, r3
34186fd0:	823b      	strh	r3, [r7, #16]

    /* Set Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
34186fd2:	68fb      	ldr	r3, [r7, #12]
34186fd4:	681b      	ldr	r3, [r3, #0]
34186fd6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34186fda:	f003 21f8 	and.w	r1, r3, #4160813056	@ 0xf800f800
34186fde:	8a7a      	ldrh	r2, [r7, #18]
34186fe0:	8a3b      	ldrh	r3, [r7, #16]
34186fe2:	041b      	lsls	r3, r3, #16
34186fe4:	431a      	orrs	r2, r3
34186fe6:	68fb      	ldr	r3, [r7, #12]
34186fe8:	681b      	ldr	r3, [r3, #0]
34186fea:	430a      	orrs	r2, r1
34186fec:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
               ((uint32_t)tmp1 << DCMIPP_P1CCBR1_BR_Pos) | ((uint32_t)tmp2 << DCMIPP_P1CCBR1_BG_Pos));

    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
34186ff0:	687b      	ldr	r3, [r7, #4]
34186ff2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34186ff6:	2b00      	cmp	r3, #0
34186ff8:	da07      	bge.n	3418700a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x3c2>
34186ffa:	687b      	ldr	r3, [r7, #4]
34186ffc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34187000:	b29b      	uxth	r3, r3
34187002:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187006:	b29b      	uxth	r3, r3
34187008:	e003      	b.n	34187012 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x3ca>
3418700a:	687b      	ldr	r3, [r7, #4]
3418700c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
34187010:	b29b      	uxth	r3, r3
34187012:	827b      	strh	r3, [r7, #18]
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34187014:	687b      	ldr	r3, [r7, #4]
34187016:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
3418701a:	2b00      	cmp	r3, #0
3418701c:	da07      	bge.n	3418702e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x3e6>
3418701e:	687b      	ldr	r3, [r7, #4]
34187020:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34187024:	b29b      	uxth	r3, r3
34187026:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418702a:	b29b      	uxth	r3, r3
3418702c:	e003      	b.n	34187036 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x3ee>
3418702e:	687b      	ldr	r3, [r7, #4]
34187030:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
34187034:	b29b      	uxth	r3, r3
34187036:	823b      	strh	r3, [r7, #16]

    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
34187038:	68fb      	ldr	r3, [r7, #12]
3418703a:	681b      	ldr	r3, [r3, #0]
3418703c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
34187040:	4b08      	ldr	r3, [pc, #32]	@ (34187064 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x41c>)
34187042:	4013      	ands	r3, r2
34187044:	8a79      	ldrh	r1, [r7, #18]
34187046:	8a3a      	ldrh	r2, [r7, #16]
34187048:	0412      	lsls	r2, r2, #16
3418704a:	4311      	orrs	r1, r2
3418704c:	68fa      	ldr	r2, [r7, #12]
3418704e:	6812      	ldr	r2, [r2, #0]
34187050:	430b      	orrs	r3, r1
34187052:	f8c2 3898 	str.w	r3, [r2, #2200]	@ 0x898
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187056:	2300      	movs	r3, #0
34187058:	e000      	b.n	3418705c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x414>
    return HAL_ERROR;
3418705a:	2301      	movs	r3, #1
}
3418705c:	4618      	mov	r0, r3
3418705e:	3718      	adds	r7, #24
34187060:	46bd      	mov	sp, r7
34187062:	bd80      	pop	{r7, pc}
34187064:	fc00f800 	.word	0xfc00f800

34187068 <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34187068:	b580      	push	{r7, lr}
3418706a:	b082      	sub	sp, #8
3418706c:	af00      	add	r7, sp, #0
3418706e:	6078      	str	r0, [r7, #4]
34187070:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34187072:	687b      	ldr	r3, [r7, #4]
34187074:	2b00      	cmp	r3, #0
34187076:	d101      	bne.n	3418707c <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
  {
    return HAL_ERROR;
34187078:	2301      	movs	r3, #1
3418707a:	e01d      	b.n	341870b8 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418707c:	683b      	ldr	r3, [r7, #0]
3418707e:	2b00      	cmp	r3, #0
34187080:	d00a      	beq.n	34187098 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x30>
34187082:	683b      	ldr	r3, [r7, #0]
34187084:	2b01      	cmp	r3, #1
34187086:	d007      	beq.n	34187098 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x30>
34187088:	683b      	ldr	r3, [r7, #0]
3418708a:	2b02      	cmp	r3, #2
3418708c:	d004      	beq.n	34187098 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x30>
3418708e:	f241 417b 	movw	r1, #5243	@ 0x147b
34187092:	480b      	ldr	r0, [pc, #44]	@ (341870c0 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x58>)
34187094:	f7fb f8ea 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187098:	683b      	ldr	r3, [r7, #0]
3418709a:	2b01      	cmp	r3, #1
3418709c:	d10b      	bne.n	341870b6 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
3418709e:	687b      	ldr	r3, [r7, #4]
341870a0:	681b      	ldr	r3, [r3, #0]
341870a2:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
341870a6:	687b      	ldr	r3, [r7, #4]
341870a8:	681b      	ldr	r3, [r3, #0]
341870aa:	f042 0201 	orr.w	r2, r2, #1
341870ae:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341870b2:	2300      	movs	r3, #0
341870b4:	e000      	b.n	341870b8 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x50>
    return HAL_ERROR;
341870b6:	2301      	movs	r3, #1
}
341870b8:	4618      	mov	r0, r3
341870ba:	3708      	adds	r7, #8
341870bc:	46bd      	mov	sp, r7
341870be:	bd80      	pop	{r7, pc}
341870c0:	341a4eec 	.word	0x341a4eec

341870c4 <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPColorConversion(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341870c4:	b580      	push	{r7, lr}
341870c6:	b082      	sub	sp, #8
341870c8:	af00      	add	r7, sp, #0
341870ca:	6078      	str	r0, [r7, #4]
341870cc:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341870ce:	687b      	ldr	r3, [r7, #4]
341870d0:	2b00      	cmp	r3, #0
341870d2:	d101      	bne.n	341870d8 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
  {
    return HAL_ERROR;
341870d4:	2301      	movs	r3, #1
341870d6:	e01d      	b.n	34187114 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341870d8:	683b      	ldr	r3, [r7, #0]
341870da:	2b00      	cmp	r3, #0
341870dc:	d00a      	beq.n	341870f4 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x30>
341870de:	683b      	ldr	r3, [r7, #0]
341870e0:	2b01      	cmp	r3, #1
341870e2:	d007      	beq.n	341870f4 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x30>
341870e4:	683b      	ldr	r3, [r7, #0]
341870e6:	2b02      	cmp	r3, #2
341870e8:	d004      	beq.n	341870f4 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x30>
341870ea:	f241 4197 	movw	r1, #5271	@ 0x1497
341870ee:	480b      	ldr	r0, [pc, #44]	@ (3418711c <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x58>)
341870f0:	f7fb f8bc 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341870f4:	683b      	ldr	r3, [r7, #0]
341870f6:	2b01      	cmp	r3, #1
341870f8:	d10b      	bne.n	34187112 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
341870fa:	687b      	ldr	r3, [r7, #4]
341870fc:	681b      	ldr	r3, [r3, #0]
341870fe:	f8d3 2880 	ldr.w	r2, [r3, #2176]	@ 0x880
34187102:	687b      	ldr	r3, [r7, #4]
34187104:	681b      	ldr	r3, [r3, #0]
34187106:	f022 0201 	bic.w	r2, r2, #1
3418710a:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418710e:	2300      	movs	r3, #0
34187110:	e000      	b.n	34187114 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x50>
    return HAL_ERROR;
34187112:	2301      	movs	r3, #1
}
34187114:	4618      	mov	r0, r3
34187116:	3708      	adds	r7, #8
34187118:	46bd      	mov	sp, r7
3418711a:	bd80      	pop	{r7, pc}
3418711c:	341a4eec 	.word	0x341a4eec

34187120 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                    const DCMIPP_BlackLevelConfTypeDef
                                                                    *pBlackLevelConfig)
{
34187120:	b580      	push	{r7, lr}
34187122:	b084      	sub	sp, #16
34187124:	af00      	add	r7, sp, #0
34187126:	60f8      	str	r0, [r7, #12]
34187128:	60b9      	str	r1, [r7, #8]
3418712a:	607a      	str	r2, [r7, #4]
  /* Check handles validity */
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
3418712c:	68fb      	ldr	r3, [r7, #12]
3418712e:	2b00      	cmp	r3, #0
34187130:	d002      	beq.n	34187138 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x18>
34187132:	687b      	ldr	r3, [r7, #4]
34187134:	2b00      	cmp	r3, #0
34187136:	d101      	bne.n	3418713c <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1c>
  {
    return HAL_ERROR;
34187138:	2301      	movs	r3, #1
3418713a:	e028      	b.n	3418718e <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6e>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418713c:	68bb      	ldr	r3, [r7, #8]
3418713e:	2b00      	cmp	r3, #0
34187140:	d00a      	beq.n	34187158 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x38>
34187142:	68bb      	ldr	r3, [r7, #8]
34187144:	2b01      	cmp	r3, #1
34187146:	d007      	beq.n	34187158 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x38>
34187148:	68bb      	ldr	r3, [r7, #8]
3418714a:	2b02      	cmp	r3, #2
3418714c:	d004      	beq.n	34187158 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x38>
3418714e:	f241 515b 	movw	r1, #5467	@ 0x155b
34187152:	4811      	ldr	r0, [pc, #68]	@ (34187198 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x78>)
34187154:	f7fb f88a 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187158:	68bb      	ldr	r3, [r7, #8]
3418715a:	2b01      	cmp	r3, #1
3418715c:	d116      	bne.n	3418718c <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6c>
  {
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
3418715e:	68fb      	ldr	r3, [r7, #12]
34187160:	681b      	ldr	r3, [r3, #0]
34187162:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
34187166:	b2d9      	uxtb	r1, r3
34187168:	687b      	ldr	r3, [r7, #4]
3418716a:	781b      	ldrb	r3, [r3, #0]
3418716c:	061a      	lsls	r2, r3, #24
3418716e:	687b      	ldr	r3, [r7, #4]
34187170:	785b      	ldrb	r3, [r3, #1]
34187172:	041b      	lsls	r3, r3, #16
34187174:	431a      	orrs	r2, r3
34187176:	687b      	ldr	r3, [r7, #4]
34187178:	789b      	ldrb	r3, [r3, #2]
3418717a:	021b      	lsls	r3, r3, #8
3418717c:	431a      	orrs	r2, r3
3418717e:	68fb      	ldr	r3, [r7, #12]
34187180:	681b      	ldr	r3, [r3, #0]
34187182:	430a      	orrs	r2, r1
34187184:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187188:	2300      	movs	r3, #0
3418718a:	e000      	b.n	3418718e <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6e>
    return HAL_ERROR;
3418718c:	2301      	movs	r3, #1
}
3418718e:	4618      	mov	r0, r3
34187190:	3710      	adds	r7, #16
34187192:	46bd      	mov	sp, r7
34187194:	bd80      	pop	{r7, pc}
34187196:	bf00      	nop
34187198:	341a4eec 	.word	0x341a4eec

3418719c <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418719c:	b580      	push	{r7, lr}
3418719e:	b082      	sub	sp, #8
341871a0:	af00      	add	r7, sp, #0
341871a2:	6078      	str	r0, [r7, #4]
341871a4:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341871a6:	687b      	ldr	r3, [r7, #4]
341871a8:	2b00      	cmp	r3, #0
341871aa:	d101      	bne.n	341871b0 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
341871ac:	2301      	movs	r3, #1
341871ae:	e01d      	b.n	341871ec <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341871b0:	683b      	ldr	r3, [r7, #0]
341871b2:	2b00      	cmp	r3, #0
341871b4:	d00a      	beq.n	341871cc <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x30>
341871b6:	683b      	ldr	r3, [r7, #0]
341871b8:	2b01      	cmp	r3, #1
341871ba:	d007      	beq.n	341871cc <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x30>
341871bc:	683b      	ldr	r3, [r7, #0]
341871be:	2b02      	cmp	r3, #2
341871c0:	d004      	beq.n	341871cc <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x30>
341871c2:	f241 517a 	movw	r1, #5498	@ 0x157a
341871c6:	480b      	ldr	r0, [pc, #44]	@ (341871f4 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x58>)
341871c8:	f7fb f850 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341871cc:	683b      	ldr	r3, [r7, #0]
341871ce:	2b01      	cmp	r3, #1
341871d0:	d10b      	bne.n	341871ea <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
341871d2:	687b      	ldr	r3, [r7, #4]
341871d4:	681b      	ldr	r3, [r3, #0]
341871d6:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
341871da:	687b      	ldr	r3, [r7, #4]
341871dc:	681b      	ldr	r3, [r3, #0]
341871de:	f042 0201 	orr.w	r2, r2, #1
341871e2:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341871e6:	2300      	movs	r3, #0
341871e8:	e000      	b.n	341871ec <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x50>
    return HAL_ERROR;
341871ea:	2301      	movs	r3, #1
}
341871ec:	4618      	mov	r0, r3
341871ee:	3708      	adds	r7, #8
341871f0:	46bd      	mov	sp, r7
341871f2:	bd80      	pop	{r7, pc}
341871f4:	341a4eec 	.word	0x341a4eec

341871f8 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341871f8:	b580      	push	{r7, lr}
341871fa:	b082      	sub	sp, #8
341871fc:	af00      	add	r7, sp, #0
341871fe:	6078      	str	r0, [r7, #4]
34187200:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34187202:	687b      	ldr	r3, [r7, #4]
34187204:	2b00      	cmp	r3, #0
34187206:	d101      	bne.n	3418720c <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
  {
    return HAL_ERROR;
34187208:	2301      	movs	r3, #1
3418720a:	e01d      	b.n	34187248 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418720c:	683b      	ldr	r3, [r7, #0]
3418720e:	2b00      	cmp	r3, #0
34187210:	d00a      	beq.n	34187228 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x30>
34187212:	683b      	ldr	r3, [r7, #0]
34187214:	2b01      	cmp	r3, #1
34187216:	d007      	beq.n	34187228 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x30>
34187218:	683b      	ldr	r3, [r7, #0]
3418721a:	2b02      	cmp	r3, #2
3418721c:	d004      	beq.n	34187228 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x30>
3418721e:	f241 5196 	movw	r1, #5526	@ 0x1596
34187222:	480b      	ldr	r0, [pc, #44]	@ (34187250 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x58>)
34187224:	f7fb f822 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187228:	683b      	ldr	r3, [r7, #0]
3418722a:	2b01      	cmp	r3, #1
3418722c:	d10b      	bne.n	34187246 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
3418722e:	687b      	ldr	r3, [r7, #4]
34187230:	681b      	ldr	r3, [r3, #0]
34187232:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
34187236:	687b      	ldr	r3, [r7, #4]
34187238:	681b      	ldr	r3, [r3, #0]
3418723a:	f022 0201 	bic.w	r2, r2, #1
3418723e:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187242:	2300      	movs	r3, #0
34187244:	e000      	b.n	34187248 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x50>
    return HAL_ERROR;
34187246:	2301      	movs	r3, #1
}
34187248:	4618      	mov	r0, r3
3418724a:	3708      	adds	r7, #8
3418724c:	46bd      	mov	sp, r7
3418724e:	bd80      	pop	{r7, pc}
34187250:	341a4eec 	.word	0x341a4eec

34187254 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  *                            filled with the black level calibration configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       DCMIPP_BlackLevelConfTypeDef *pBlackLevelConfig)
{
34187254:	b580      	push	{r7, lr}
34187256:	b086      	sub	sp, #24
34187258:	af00      	add	r7, sp, #0
3418725a:	60f8      	str	r0, [r7, #12]
3418725c:	60b9      	str	r1, [r7, #8]
3418725e:	607a      	str	r2, [r7, #4]
  uint32_t p1blccr_reg;
  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187260:	68bb      	ldr	r3, [r7, #8]
34187262:	2b00      	cmp	r3, #0
34187264:	d00a      	beq.n	3418727c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>
34187266:	68bb      	ldr	r3, [r7, #8]
34187268:	2b01      	cmp	r3, #1
3418726a:	d007      	beq.n	3418727c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>
3418726c:	68bb      	ldr	r3, [r7, #8]
3418726e:	2b02      	cmp	r3, #2
34187270:	d004      	beq.n	3418727c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>
34187272:	f241 51b0 	movw	r1, #5552	@ 0x15b0
34187276:	480f      	ldr	r0, [pc, #60]	@ (341872b4 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x60>)
34187278:	f7fa fff8 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
3418727c:	68bb      	ldr	r3, [r7, #8]
3418727e:	2b01      	cmp	r3, #1
34187280:	d113      	bne.n	341872aa <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x56>
  {
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
34187282:	68fb      	ldr	r3, [r7, #12]
34187284:	681b      	ldr	r3, [r3, #0]
34187286:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
3418728a:	617b      	str	r3, [r7, #20]
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
3418728c:	697b      	ldr	r3, [r7, #20]
3418728e:	0a1b      	lsrs	r3, r3, #8
34187290:	b2da      	uxtb	r2, r3
34187292:	687b      	ldr	r3, [r7, #4]
34187294:	709a      	strb	r2, [r3, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34187296:	697b      	ldr	r3, [r7, #20]
34187298:	0c1b      	lsrs	r3, r3, #16
3418729a:	b2da      	uxtb	r2, r3
3418729c:	687b      	ldr	r3, [r7, #4]
3418729e:	705a      	strb	r2, [r3, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
341872a0:	697b      	ldr	r3, [r7, #20]
341872a2:	0e1b      	lsrs	r3, r3, #24
341872a4:	b2da      	uxtb	r2, r3
341872a6:	687b      	ldr	r3, [r7, #4]
341872a8:	701a      	strb	r2, [r3, #0]
  }
}
341872aa:	bf00      	nop
341872ac:	3718      	adds	r7, #24
341872ae:	46bd      	mov	sp, r7
341872b0:	bd80      	pop	{r7, pc}
341872b2:	bf00      	nop
341872b4:	341a4eec 	.word	0x341a4eec

341872b8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341872b8:	b580      	push	{r7, lr}
341872ba:	b082      	sub	sp, #8
341872bc:	af00      	add	r7, sp, #0
341872be:	6078      	str	r0, [r7, #4]
341872c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
341872c2:	687b      	ldr	r3, [r7, #4]
341872c4:	681b      	ldr	r3, [r3, #0]
341872c6:	4a17      	ldr	r2, [pc, #92]	@ (34187324 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x6c>)
341872c8:	4293      	cmp	r3, r2
341872ca:	d009      	beq.n	341872e0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x28>
341872cc:	687b      	ldr	r3, [r7, #4]
341872ce:	681b      	ldr	r3, [r3, #0]
341872d0:	4a15      	ldr	r2, [pc, #84]	@ (34187328 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x70>)
341872d2:	4293      	cmp	r3, r2
341872d4:	d004      	beq.n	341872e0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x28>
341872d6:	f241 51c4 	movw	r1, #5572	@ 0x15c4
341872da:	4814      	ldr	r0, [pc, #80]	@ (3418732c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x74>)
341872dc:	f7fa ffc6 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
341872e0:	683b      	ldr	r3, [r7, #0]
341872e2:	2b00      	cmp	r3, #0
341872e4:	d00a      	beq.n	341872fc <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>
341872e6:	683b      	ldr	r3, [r7, #0]
341872e8:	2b01      	cmp	r3, #1
341872ea:	d007      	beq.n	341872fc <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>
341872ec:	683b      	ldr	r3, [r7, #0]
341872ee:	2b02      	cmp	r3, #2
341872f0:	d004      	beq.n	341872fc <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>
341872f2:	f241 51c5 	movw	r1, #5573	@ 0x15c5
341872f6:	480d      	ldr	r0, [pc, #52]	@ (3418732c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x74>)
341872f8:	f7fa ffb8 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341872fc:	683b      	ldr	r3, [r7, #0]
341872fe:	2b01      	cmp	r3, #1
34187300:	d10b      	bne.n	3418731a <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x62>
  {
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
34187302:	687b      	ldr	r3, [r7, #4]
34187304:	681b      	ldr	r3, [r3, #0]
34187306:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
3418730a:	f003 0301 	and.w	r3, r3, #1
3418730e:	2b01      	cmp	r3, #1
34187310:	d101      	bne.n	34187316 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x5e>
34187312:	2301      	movs	r3, #1
34187314:	e002      	b.n	3418731c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x64>
34187316:	2300      	movs	r3, #0
34187318:	e000      	b.n	3418731c <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x64>
  }
  else
  {
    /* State Disabled */
    return 0;
3418731a:	2300      	movs	r3, #0
  }
}
3418731c:	4618      	mov	r0, r3
3418731e:	3708      	adds	r7, #8
34187320:	46bd      	mov	sp, r7
34187322:	bd80      	pop	{r7, pc}
34187324:	58002000 	.word	0x58002000
34187328:	48002000 	.word	0x48002000
3418732c:	341a4eec 	.word	0x341a4eec

34187330 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                  uint8_t ModuleID, const
                                                                  DCMIPP_StatisticExtractionConfTypeDef
                                                                  *pStatisticExtractionConfig)
{
34187330:	b580      	push	{r7, lr}
34187332:	b086      	sub	sp, #24
34187334:	af00      	add	r7, sp, #0
34187336:	60f8      	str	r0, [r7, #12]
34187338:	60b9      	str	r1, [r7, #8]
3418733a:	603b      	str	r3, [r7, #0]
3418733c:	4613      	mov	r3, r2
3418733e:	71fb      	strb	r3, [r7, #7]
  uint32_t p1stxcr_reg;

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34187340:	68fb      	ldr	r3, [r7, #12]
34187342:	2b00      	cmp	r3, #0
34187344:	d002      	beq.n	3418734c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x1c>
34187346:	683b      	ldr	r3, [r7, #0]
34187348:	2b00      	cmp	r3, #0
3418734a:	d101      	bne.n	34187350 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x20>
  {
    return HAL_ERROR;
3418734c:	2301      	movs	r3, #1
3418734e:	e0ae      	b.n	341874ae <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x17e>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187350:	68bb      	ldr	r3, [r7, #8]
34187352:	2b00      	cmp	r3, #0
34187354:	d00a      	beq.n	3418736c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x3c>
34187356:	68bb      	ldr	r3, [r7, #8]
34187358:	2b01      	cmp	r3, #1
3418735a:	d007      	beq.n	3418736c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x3c>
3418735c:	68bb      	ldr	r3, [r7, #8]
3418735e:	2b02      	cmp	r3, #2
34187360:	d004      	beq.n	3418736c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x3c>
34187362:	f241 51e9 	movw	r1, #5609	@ 0x15e9
34187366:	4854      	ldr	r0, [pc, #336]	@ (341874b8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x188>)
34187368:	f7fa ff80 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
3418736c:	79fb      	ldrb	r3, [r7, #7]
3418736e:	2b01      	cmp	r3, #1
34187370:	d00a      	beq.n	34187388 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x58>
34187372:	79fb      	ldrb	r3, [r7, #7]
34187374:	2b02      	cmp	r3, #2
34187376:	d007      	beq.n	34187388 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x58>
34187378:	79fb      	ldrb	r3, [r7, #7]
3418737a:	2b03      	cmp	r3, #3
3418737c:	d004      	beq.n	34187388 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x58>
3418737e:	f241 51ea 	movw	r1, #5610	@ 0x15ea
34187382:	484d      	ldr	r0, [pc, #308]	@ (341874b8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x188>)
34187384:	f7fa ff72 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
34187388:	683b      	ldr	r3, [r7, #0]
3418738a:	689b      	ldr	r3, [r3, #8]
3418738c:	2b00      	cmp	r3, #0
3418738e:	d020      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
34187390:	683b      	ldr	r3, [r7, #0]
34187392:	689b      	ldr	r3, [r3, #8]
34187394:	2b04      	cmp	r3, #4
34187396:	d01c      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
34187398:	683b      	ldr	r3, [r7, #0]
3418739a:	689b      	ldr	r3, [r3, #8]
3418739c:	2b08      	cmp	r3, #8
3418739e:	d018      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873a0:	683b      	ldr	r3, [r7, #0]
341873a2:	689b      	ldr	r3, [r3, #8]
341873a4:	2b0c      	cmp	r3, #12
341873a6:	d014      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873a8:	683b      	ldr	r3, [r7, #0]
341873aa:	689b      	ldr	r3, [r3, #8]
341873ac:	2b00      	cmp	r3, #0
341873ae:	d010      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873b0:	683b      	ldr	r3, [r7, #0]
341873b2:	689b      	ldr	r3, [r3, #8]
341873b4:	2b04      	cmp	r3, #4
341873b6:	d00c      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873b8:	683b      	ldr	r3, [r7, #0]
341873ba:	689b      	ldr	r3, [r3, #8]
341873bc:	2b08      	cmp	r3, #8
341873be:	d008      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873c0:	683b      	ldr	r3, [r7, #0]
341873c2:	689b      	ldr	r3, [r3, #8]
341873c4:	2b0c      	cmp	r3, #12
341873c6:	d004      	beq.n	341873d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa2>
341873c8:	f241 51eb 	movw	r1, #5611	@ 0x15eb
341873cc:	483a      	ldr	r0, [pc, #232]	@ (341874b8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x188>)
341873ce:	f7fa ff4d 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
341873d2:	683b      	ldr	r3, [r7, #0]
341873d4:	685b      	ldr	r3, [r3, #4]
341873d6:	2b00      	cmp	r3, #0
341873d8:	d020      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
341873da:	683b      	ldr	r3, [r7, #0]
341873dc:	685b      	ldr	r3, [r3, #4]
341873de:	2b10      	cmp	r3, #16
341873e0:	d01c      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
341873e2:	683b      	ldr	r3, [r7, #0]
341873e4:	685b      	ldr	r3, [r3, #4]
341873e6:	2b20      	cmp	r3, #32
341873e8:	d018      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
341873ea:	683b      	ldr	r3, [r7, #0]
341873ec:	685b      	ldr	r3, [r3, #4]
341873ee:	2b30      	cmp	r3, #48	@ 0x30
341873f0:	d014      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
341873f2:	683b      	ldr	r3, [r7, #0]
341873f4:	685b      	ldr	r3, [r3, #4]
341873f6:	2b40      	cmp	r3, #64	@ 0x40
341873f8:	d010      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
341873fa:	683b      	ldr	r3, [r7, #0]
341873fc:	685b      	ldr	r3, [r3, #4]
341873fe:	2b50      	cmp	r3, #80	@ 0x50
34187400:	d00c      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
34187402:	683b      	ldr	r3, [r7, #0]
34187404:	685b      	ldr	r3, [r3, #4]
34187406:	2b60      	cmp	r3, #96	@ 0x60
34187408:	d008      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
3418740a:	683b      	ldr	r3, [r7, #0]
3418740c:	685b      	ldr	r3, [r3, #4]
3418740e:	2b70      	cmp	r3, #112	@ 0x70
34187410:	d004      	beq.n	3418741c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xec>
34187412:	f241 51ec 	movw	r1, #5612	@ 0x15ec
34187416:	4828      	ldr	r0, [pc, #160]	@ (341874b8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x188>)
34187418:	f7fa ff28 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));
3418741c:	683b      	ldr	r3, [r7, #0]
3418741e:	681b      	ldr	r3, [r3, #0]
34187420:	2b00      	cmp	r3, #0
34187422:	d008      	beq.n	34187436 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x106>
34187424:	683b      	ldr	r3, [r7, #0]
34187426:	681b      	ldr	r3, [r3, #0]
34187428:	2b80      	cmp	r3, #128	@ 0x80
3418742a:	d004      	beq.n	34187436 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x106>
3418742c:	f241 51ed 	movw	r1, #5613	@ 0x15ed
34187430:	4821      	ldr	r0, [pc, #132]	@ (341874b8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x188>)
34187432:	f7fa ff1b 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187436:	68bb      	ldr	r3, [r7, #8]
34187438:	2b01      	cmp	r3, #1
3418743a:	d135      	bne.n	341874a8 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x178>
  {
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
3418743c:	683b      	ldr	r3, [r7, #0]
3418743e:	681a      	ldr	r2, [r3, #0]
34187440:	683b      	ldr	r3, [r7, #0]
34187442:	685b      	ldr	r3, [r3, #4]
34187444:	431a      	orrs	r2, r3
                  (pStatisticExtractionConfig->Bins);
34187446:	683b      	ldr	r3, [r7, #0]
34187448:	689b      	ldr	r3, [r3, #8]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
3418744a:	4313      	orrs	r3, r2
3418744c:	617b      	str	r3, [r7, #20]

    switch (ModuleID)
3418744e:	79fb      	ldrb	r3, [r7, #7]
34187450:	2b01      	cmp	r3, #1
34187452:	d002      	beq.n	3418745a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x12a>
34187454:	2b02      	cmp	r3, #2
34187456:	d00d      	beq.n	34187474 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x144>
34187458:	e019      	b.n	3418748e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x15e>
    {
      case DCMIPP_STATEXT_MODULE1:
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
3418745a:	68fb      	ldr	r3, [r7, #12]
3418745c:	681b      	ldr	r3, [r3, #0]
3418745e:	f8d3 3850 	ldr.w	r3, [r3, #2128]	@ 0x850
34187462:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34187466:	68fb      	ldr	r3, [r7, #12]
34187468:	681b      	ldr	r3, [r3, #0]
3418746a:	697a      	ldr	r2, [r7, #20]
3418746c:	430a      	orrs	r2, r1
3418746e:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
                   DCMIPP_P1ST1CR_MODE, p1stxcr_reg);
        break;
34187472:	e01b      	b.n	341874ac <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x17c>
      case DCMIPP_STATEXT_MODULE2:
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
34187474:	68fb      	ldr	r3, [r7, #12]
34187476:	681b      	ldr	r3, [r3, #0]
34187478:	f8d3 3854 	ldr.w	r3, [r3, #2132]	@ 0x854
3418747c:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
34187480:	68fb      	ldr	r3, [r7, #12]
34187482:	681b      	ldr	r3, [r3, #0]
34187484:	697a      	ldr	r2, [r7, #20]
34187486:	430a      	orrs	r2, r1
34187488:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
                   DCMIPP_P1ST2CR_MODE, p1stxcr_reg);
        break;
3418748c:	e00e      	b.n	341874ac <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x17c>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
3418748e:	68fb      	ldr	r3, [r7, #12]
34187490:	681b      	ldr	r3, [r3, #0]
34187492:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
34187496:	f023 01fc 	bic.w	r1, r3, #252	@ 0xfc
3418749a:	68fb      	ldr	r3, [r7, #12]
3418749c:	681b      	ldr	r3, [r3, #0]
3418749e:	697a      	ldr	r2, [r7, #20]
341874a0:	430a      	orrs	r2, r1
341874a2:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
                   DCMIPP_P1ST3CR_MODE, p1stxcr_reg);
        break;
341874a6:	e001      	b.n	341874ac <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x17c>
    }
  }
  else
  {
    return HAL_ERROR;
341874a8:	2301      	movs	r3, #1
341874aa:	e000      	b.n	341874ae <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x17e>
  }

  return HAL_OK;
341874ac:	2300      	movs	r3, #0
}
341874ae:	4618      	mov	r0, r3
341874b0:	3718      	adds	r7, #24
341874b2:	46bd      	mov	sp, r7
341874b4:	bd80      	pop	{r7, pc}
341874b6:	bf00      	nop
341874b8:	341a4eec 	.word	0x341a4eec

341874bc <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                      const DCMIPP_StatisticExtractionAreaConfTypeDef
                                                                      *pStatisticExtractionAreaConfig)
{
341874bc:	b580      	push	{r7, lr}
341874be:	b084      	sub	sp, #16
341874c0:	af00      	add	r7, sp, #0
341874c2:	60f8      	str	r0, [r7, #12]
341874c4:	60b9      	str	r1, [r7, #8]
341874c6:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
341874c8:	68fb      	ldr	r3, [r7, #12]
341874ca:	2b00      	cmp	r3, #0
341874cc:	d002      	beq.n	341874d4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x18>
341874ce:	687b      	ldr	r3, [r7, #4]
341874d0:	2b00      	cmp	r3, #0
341874d2:	d101      	bne.n	341874d8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x1c>
  {
    return HAL_ERROR;
341874d4:	2301      	movs	r3, #1
341874d6:	e05d      	b.n	34187594 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xd8>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341874d8:	68bb      	ldr	r3, [r7, #8]
341874da:	2b00      	cmp	r3, #0
341874dc:	d00a      	beq.n	341874f4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x38>
341874de:	68bb      	ldr	r3, [r7, #8]
341874e0:	2b01      	cmp	r3, #1
341874e2:	d007      	beq.n	341874f4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x38>
341874e4:	68bb      	ldr	r3, [r7, #8]
341874e6:	2b02      	cmp	r3, #2
341874e8:	d004      	beq.n	341874f4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x38>
341874ea:	f241 611f 	movw	r1, #5663	@ 0x161f
341874ee:	482b      	ldr	r0, [pc, #172]	@ (3418759c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe0>)
341874f0:	f7fa febc 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
341874f4:	687b      	ldr	r3, [r7, #4]
341874f6:	685b      	ldr	r3, [r3, #4]
341874f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341874fc:	d304      	bcc.n	34187508 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x4c>
341874fe:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
34187502:	4826      	ldr	r0, [pc, #152]	@ (3418759c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe0>)
34187504:	f7fa feb2 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
34187508:	687b      	ldr	r3, [r7, #4]
3418750a:	681b      	ldr	r3, [r3, #0]
3418750c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34187510:	d304      	bcc.n	3418751c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x60>
34187512:	f241 6121 	movw	r1, #5665	@ 0x1621
34187516:	4821      	ldr	r0, [pc, #132]	@ (3418759c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe0>)
34187518:	f7fa fea8 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
3418751c:	687b      	ldr	r3, [r7, #4]
3418751e:	68db      	ldr	r3, [r3, #12]
34187520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34187524:	d304      	bcc.n	34187530 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x74>
34187526:	f241 6122 	movw	r1, #5666	@ 0x1622
3418752a:	481c      	ldr	r0, [pc, #112]	@ (3418759c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe0>)
3418752c:	f7fa fe9e 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));
34187530:	687b      	ldr	r3, [r7, #4]
34187532:	689b      	ldr	r3, [r3, #8]
34187534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34187538:	d304      	bcc.n	34187544 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x88>
3418753a:	f241 6123 	movw	r1, #5667	@ 0x1623
3418753e:	4817      	ldr	r0, [pc, #92]	@ (3418759c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe0>)
34187540:	f7fa fe94 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187544:	68bb      	ldr	r3, [r7, #8]
34187546:	2b01      	cmp	r3, #1
34187548:	d123      	bne.n	34187592 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xd6>
  {
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
3418754a:	68fb      	ldr	r3, [r7, #12]
3418754c:	681b      	ldr	r3, [r3, #0]
3418754e:	f8d3 385c 	ldr.w	r3, [r3, #2140]	@ 0x85c
34187552:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34187556:	687b      	ldr	r3, [r7, #4]
34187558:	685a      	ldr	r2, [r3, #4]
3418755a:	687b      	ldr	r3, [r7, #4]
3418755c:	681b      	ldr	r3, [r3, #0]
3418755e:	041b      	lsls	r3, r3, #16
34187560:	431a      	orrs	r2, r3
34187562:	68fb      	ldr	r3, [r7, #12]
34187564:	681b      	ldr	r3, [r3, #0]
34187566:	430a      	orrs	r2, r1
34187568:	f8c3 285c 	str.w	r2, [r3, #2140]	@ 0x85c
               (pStatisticExtractionAreaConfig->HStart << DCMIPP_P1STSTR_HSTART_Pos) | \
               (pStatisticExtractionAreaConfig->VStart << DCMIPP_P1STSTR_VSTART_Pos));

    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
3418756c:	68fb      	ldr	r3, [r7, #12]
3418756e:	681b      	ldr	r3, [r3, #0]
34187570:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
34187574:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
34187578:	687b      	ldr	r3, [r7, #4]
3418757a:	68da      	ldr	r2, [r3, #12]
3418757c:	687b      	ldr	r3, [r7, #4]
3418757e:	689b      	ldr	r3, [r3, #8]
34187580:	041b      	lsls	r3, r3, #16
34187582:	431a      	orrs	r2, r3
34187584:	68fb      	ldr	r3, [r7, #12]
34187586:	681b      	ldr	r3, [r3, #0]
34187588:	430a      	orrs	r2, r1
3418758a:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
3418758e:	2300      	movs	r3, #0
34187590:	e000      	b.n	34187594 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xd8>
    return HAL_ERROR;
34187592:	2301      	movs	r3, #1
}
34187594:	4618      	mov	r0, r3
34187596:	3710      	adds	r7, #16
34187598:	46bd      	mov	sp, r7
3418759a:	bd80      	pop	{r7, pc}
3418759c:	341a4eec 	.word	0x341a4eec

341875a0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
  * @param  ModuleID  Specifies the Module ID, can be a value from @ref DCMIPP_Statistics_Extraction_Module_ID.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                               uint8_t ModuleID)
{
341875a0:	b580      	push	{r7, lr}
341875a2:	b084      	sub	sp, #16
341875a4:	af00      	add	r7, sp, #0
341875a6:	60f8      	str	r0, [r7, #12]
341875a8:	60b9      	str	r1, [r7, #8]
341875aa:	4613      	mov	r3, r2
341875ac:	71fb      	strb	r3, [r7, #7]
  /* Check handle validity */
  if (hdcmipp == NULL)
341875ae:	68fb      	ldr	r3, [r7, #12]
341875b0:	2b00      	cmp	r3, #0
341875b2:	d101      	bne.n	341875b8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x18>
  {
    return HAL_ERROR;
341875b4:	2301      	movs	r3, #1
341875b6:	e048      	b.n	3418764a <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xaa>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341875b8:	68bb      	ldr	r3, [r7, #8]
341875ba:	2b00      	cmp	r3, #0
341875bc:	d00a      	beq.n	341875d4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x34>
341875be:	68bb      	ldr	r3, [r7, #8]
341875c0:	2b01      	cmp	r3, #1
341875c2:	d007      	beq.n	341875d4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x34>
341875c4:	68bb      	ldr	r3, [r7, #8]
341875c6:	2b02      	cmp	r3, #2
341875c8:	d004      	beq.n	341875d4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x34>
341875ca:	f241 6147 	movw	r1, #5703	@ 0x1647
341875ce:	4821      	ldr	r0, [pc, #132]	@ (34187654 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xb4>)
341875d0:	f7fa fe4c 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
341875d4:	79fb      	ldrb	r3, [r7, #7]
341875d6:	2b01      	cmp	r3, #1
341875d8:	d00a      	beq.n	341875f0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x50>
341875da:	79fb      	ldrb	r3, [r7, #7]
341875dc:	2b02      	cmp	r3, #2
341875de:	d007      	beq.n	341875f0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x50>
341875e0:	79fb      	ldrb	r3, [r7, #7]
341875e2:	2b03      	cmp	r3, #3
341875e4:	d004      	beq.n	341875f0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x50>
341875e6:	f241 6148 	movw	r1, #5704	@ 0x1648
341875ea:	481a      	ldr	r0, [pc, #104]	@ (34187654 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xb4>)
341875ec:	f7fa fe3e 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341875f0:	68bb      	ldr	r3, [r7, #8]
341875f2:	2b01      	cmp	r3, #1
341875f4:	d126      	bne.n	34187644 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa4>
  {
    switch (ModuleID)
341875f6:	79fb      	ldrb	r3, [r7, #7]
341875f8:	2b01      	cmp	r3, #1
341875fa:	d002      	beq.n	34187602 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x62>
341875fc:	2b02      	cmp	r3, #2
341875fe:	d00b      	beq.n	34187618 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x78>
34187600:	e015      	b.n	3418762e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x8e>
    {
      case DCMIPP_STATEXT_MODULE1:
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
34187602:	68fb      	ldr	r3, [r7, #12]
34187604:	681b      	ldr	r3, [r3, #0]
34187606:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
3418760a:	68fb      	ldr	r3, [r7, #12]
3418760c:	681b      	ldr	r3, [r3, #0]
3418760e:	f042 0201 	orr.w	r2, r2, #1
34187612:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
        break;
34187616:	e017      	b.n	34187648 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa8>
      case DCMIPP_STATEXT_MODULE2:
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
34187618:	68fb      	ldr	r3, [r7, #12]
3418761a:	681b      	ldr	r3, [r3, #0]
3418761c:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
34187620:	68fb      	ldr	r3, [r7, #12]
34187622:	681b      	ldr	r3, [r3, #0]
34187624:	f042 0201 	orr.w	r2, r2, #1
34187628:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
3418762c:	e00c      	b.n	34187648 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa8>
      default:
        /* DCMIPP_STATEXT_MODULE3 */
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
3418762e:	68fb      	ldr	r3, [r7, #12]
34187630:	681b      	ldr	r3, [r3, #0]
34187632:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
34187636:	68fb      	ldr	r3, [r7, #12]
34187638:	681b      	ldr	r3, [r3, #0]
3418763a:	f042 0201 	orr.w	r2, r2, #1
3418763e:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
        break;
34187642:	e001      	b.n	34187648 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa8>
    }
  }
  else
  {
    return HAL_ERROR;
34187644:	2301      	movs	r3, #1
34187646:	e000      	b.n	3418764a <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xaa>
  }

  return HAL_OK;
34187648:	2300      	movs	r3, #0
}
3418764a:	4618      	mov	r0, r3
3418764c:	3710      	adds	r7, #16
3418764e:	46bd      	mov	sp, r7
34187650:	bd80      	pop	{r7, pc}
34187652:	bf00      	nop
34187654:	341a4eec 	.word	0x341a4eec

34187658 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34187658:	b580      	push	{r7, lr}
3418765a:	b082      	sub	sp, #8
3418765c:	af00      	add	r7, sp, #0
3418765e:	6078      	str	r0, [r7, #4]
34187660:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34187662:	687b      	ldr	r3, [r7, #4]
34187664:	2b00      	cmp	r3, #0
34187666:	d101      	bne.n	3418766c <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
  {
    return HAL_ERROR;
34187668:	2301      	movs	r3, #1
3418766a:	e01d      	b.n	341876a8 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
3418766c:	683b      	ldr	r3, [r7, #0]
3418766e:	2b00      	cmp	r3, #0
34187670:	d00a      	beq.n	34187688 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x30>
34187672:	683b      	ldr	r3, [r7, #0]
34187674:	2b01      	cmp	r3, #1
34187676:	d007      	beq.n	34187688 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x30>
34187678:	683b      	ldr	r3, [r7, #0]
3418767a:	2b02      	cmp	r3, #2
3418767c:	d004      	beq.n	34187688 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x30>
3418767e:	f241 619f 	movw	r1, #5791	@ 0x169f
34187682:	480b      	ldr	r0, [pc, #44]	@ (341876b0 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x58>)
34187684:	f7fa fdf2 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187688:	683b      	ldr	r3, [r7, #0]
3418768a:	2b01      	cmp	r3, #1
3418768c:	d10b      	bne.n	341876a6 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x4e>
  {
    /* Crop line enable */
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
3418768e:	687b      	ldr	r3, [r7, #4]
34187690:	681b      	ldr	r3, [r3, #0]
34187692:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
34187696:	687b      	ldr	r3, [r7, #4]
34187698:	681b      	ldr	r3, [r3, #0]
3418769a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418769e:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341876a2:	2300      	movs	r3, #0
341876a4:	e000      	b.n	341876a8 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x50>
    return HAL_ERROR;
341876a6:	2301      	movs	r3, #1
}
341876a8:	4618      	mov	r0, r3
341876aa:	3708      	adds	r7, #8
341876ac:	46bd      	mov	sp, r7
341876ae:	bd80      	pop	{r7, pc}
341876b0:	341a4eec 	.word	0x341a4eec

341876b4 <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
  * @param  pExposureConfig pointer to the DCMIPP_ExposureConfTypeDef structure that contains the exposure information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPExposureConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                       const DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
341876b4:	b580      	push	{r7, lr}
341876b6:	b084      	sub	sp, #16
341876b8:	af00      	add	r7, sp, #0
341876ba:	60f8      	str	r0, [r7, #12]
341876bc:	60b9      	str	r1, [r7, #8]
341876be:	607a      	str	r2, [r7, #4]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
341876c0:	68fb      	ldr	r3, [r7, #12]
341876c2:	2b00      	cmp	r3, #0
341876c4:	d002      	beq.n	341876cc <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x18>
341876c6:	687b      	ldr	r3, [r7, #4]
341876c8:	2b00      	cmp	r3, #0
341876ca:	d101      	bne.n	341876d0 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x1c>
  {
    return HAL_ERROR;
341876cc:	2301      	movs	r3, #1
341876ce:	e056      	b.n	3418777e <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xca>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341876d0:	68bb      	ldr	r3, [r7, #8]
341876d2:	2b00      	cmp	r3, #0
341876d4:	d00a      	beq.n	341876ec <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x38>
341876d6:	68bb      	ldr	r3, [r7, #8]
341876d8:	2b01      	cmp	r3, #1
341876da:	d007      	beq.n	341876ec <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x38>
341876dc:	68bb      	ldr	r3, [r7, #8]
341876de:	2b02      	cmp	r3, #2
341876e0:	d004      	beq.n	341876ec <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x38>
341876e2:	f241 61db 	movw	r1, #5851	@ 0x16db
341876e6:	4828      	ldr	r0, [pc, #160]	@ (34187788 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xd4>)
341876e8:	f7fa fdc0 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
341876ec:	687b      	ldr	r3, [r7, #4]
341876ee:	781b      	ldrb	r3, [r3, #0]
341876f0:	2b07      	cmp	r3, #7
341876f2:	d904      	bls.n	341876fe <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x4a>
341876f4:	f241 61dc 	movw	r1, #5852	@ 0x16dc
341876f8:	4823      	ldr	r0, [pc, #140]	@ (34187788 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xd4>)
341876fa:	f7fa fdb7 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
341876fe:	687b      	ldr	r3, [r7, #4]
34187700:	789b      	ldrb	r3, [r3, #2]
34187702:	2b07      	cmp	r3, #7
34187704:	d904      	bls.n	34187710 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x5c>
34187706:	f241 61dd 	movw	r1, #5853	@ 0x16dd
3418770a:	481f      	ldr	r0, [pc, #124]	@ (34187788 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xd4>)
3418770c:	f7fa fdae 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));
34187710:	687b      	ldr	r3, [r7, #4]
34187712:	791b      	ldrb	r3, [r3, #4]
34187714:	2b07      	cmp	r3, #7
34187716:	d904      	bls.n	34187722 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x6e>
34187718:	f241 61de 	movw	r1, #5854	@ 0x16de
3418771c:	481a      	ldr	r0, [pc, #104]	@ (34187788 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xd4>)
3418771e:	f7fa fda5 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187722:	68bb      	ldr	r3, [r7, #8]
34187724:	2b01      	cmp	r3, #1
34187726:	d129      	bne.n	3418777c <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xc8>
  {
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
34187728:	68fb      	ldr	r3, [r7, #12]
3418772a:	681b      	ldr	r3, [r3, #0]
3418772c:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34187730:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
34187734:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
34187738:	687a      	ldr	r2, [r7, #4]
3418773a:	7812      	ldrb	r2, [r2, #0]
3418773c:	0711      	lsls	r1, r2, #28
3418773e:	687a      	ldr	r2, [r7, #4]
34187740:	7852      	ldrb	r2, [r2, #1]
34187742:	0512      	lsls	r2, r2, #20
34187744:	4311      	orrs	r1, r2
34187746:	68fa      	ldr	r2, [r7, #12]
34187748:	6812      	ldr	r2, [r2, #0]
3418774a:	430b      	orrs	r3, r1
3418774c:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
               (((uint32_t)pExposureConfig->ShiftRed << DCMIPP_P1EXCR1_SHFR_Pos) | \
                ((uint32_t)pExposureConfig->MultiplierRed << DCMIPP_P1EXCR1_MULTR_Pos)));

    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34187750:	687b      	ldr	r3, [r7, #4]
34187752:	789b      	ldrb	r3, [r3, #2]
34187754:	071a      	lsls	r2, r3, #28
34187756:	687b      	ldr	r3, [r7, #4]
34187758:	78db      	ldrb	r3, [r3, #3]
3418775a:	051b      	lsls	r3, r3, #20
3418775c:	431a      	orrs	r2, r3
3418775e:	687b      	ldr	r3, [r7, #4]
34187760:	791b      	ldrb	r3, [r3, #4]
34187762:	031b      	lsls	r3, r3, #12
34187764:	ea42 0103 	orr.w	r1, r2, r3
34187768:	687b      	ldr	r3, [r7, #4]
3418776a:	795b      	ldrb	r3, [r3, #5]
3418776c:	011a      	lsls	r2, r3, #4
3418776e:	68fb      	ldr	r3, [r7, #12]
34187770:	681b      	ldr	r3, [r3, #0]
34187772:	430a      	orrs	r2, r1
34187774:	f8c3 2848 	str.w	r2, [r3, #2120]	@ 0x848
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187778:	2300      	movs	r3, #0
3418777a:	e000      	b.n	3418777e <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xca>
    return HAL_ERROR;
3418777c:	2301      	movs	r3, #1
}
3418777e:	4618      	mov	r0, r3
34187780:	3710      	adds	r7, #16
34187782:	46bd      	mov	sp, r7
34187784:	bd80      	pop	{r7, pc}
34187786:	bf00      	nop
34187788:	341a4eec 	.word	0x341a4eec

3418778c <HAL_DCMIPP_PIPE_EnableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3418778c:	b580      	push	{r7, lr}
3418778e:	b082      	sub	sp, #8
34187790:	af00      	add	r7, sp, #0
34187792:	6078      	str	r0, [r7, #4]
34187794:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34187796:	687b      	ldr	r3, [r7, #4]
34187798:	2b00      	cmp	r3, #0
3418779a:	d101      	bne.n	341877a0 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
  {
    return HAL_ERROR;
3418779c:	2301      	movs	r3, #1
3418779e:	e01d      	b.n	341877dc <HAL_DCMIPP_PIPE_EnableISPExposure+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341877a0:	683b      	ldr	r3, [r7, #0]
341877a2:	2b00      	cmp	r3, #0
341877a4:	d00a      	beq.n	341877bc <HAL_DCMIPP_PIPE_EnableISPExposure+0x30>
341877a6:	683b      	ldr	r3, [r7, #0]
341877a8:	2b01      	cmp	r3, #1
341877aa:	d007      	beq.n	341877bc <HAL_DCMIPP_PIPE_EnableISPExposure+0x30>
341877ac:	683b      	ldr	r3, [r7, #0]
341877ae:	2b02      	cmp	r3, #2
341877b0:	d004      	beq.n	341877bc <HAL_DCMIPP_PIPE_EnableISPExposure+0x30>
341877b2:	f241 7101 	movw	r1, #5889	@ 0x1701
341877b6:	480b      	ldr	r0, [pc, #44]	@ (341877e4 <HAL_DCMIPP_PIPE_EnableISPExposure+0x58>)
341877b8:	f7fa fd58 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341877bc:	683b      	ldr	r3, [r7, #0]
341877be:	2b01      	cmp	r3, #1
341877c0:	d10b      	bne.n	341877da <HAL_DCMIPP_PIPE_EnableISPExposure+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
341877c2:	687b      	ldr	r3, [r7, #4]
341877c4:	681b      	ldr	r3, [r3, #0]
341877c6:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
341877ca:	687b      	ldr	r3, [r7, #4]
341877cc:	681b      	ldr	r3, [r3, #0]
341877ce:	f042 0201 	orr.w	r2, r2, #1
341877d2:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341877d6:	2300      	movs	r3, #0
341877d8:	e000      	b.n	341877dc <HAL_DCMIPP_PIPE_EnableISPExposure+0x50>
    return HAL_ERROR;
341877da:	2301      	movs	r3, #1
}
341877dc:	4618      	mov	r0, r3
341877de:	3708      	adds	r7, #8
341877e0:	46bd      	mov	sp, r7
341877e2:	bd80      	pop	{r7, pc}
341877e4:	341a4eec 	.word	0x341a4eec

341877e8 <HAL_DCMIPP_PIPE_DisableISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPExposure(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341877e8:	b580      	push	{r7, lr}
341877ea:	b082      	sub	sp, #8
341877ec:	af00      	add	r7, sp, #0
341877ee:	6078      	str	r0, [r7, #4]
341877f0:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341877f2:	687b      	ldr	r3, [r7, #4]
341877f4:	2b00      	cmp	r3, #0
341877f6:	d101      	bne.n	341877fc <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
  {
    return HAL_ERROR;
341877f8:	2301      	movs	r3, #1
341877fa:	e01d      	b.n	34187838 <HAL_DCMIPP_PIPE_DisableISPExposure+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341877fc:	683b      	ldr	r3, [r7, #0]
341877fe:	2b00      	cmp	r3, #0
34187800:	d00a      	beq.n	34187818 <HAL_DCMIPP_PIPE_DisableISPExposure+0x30>
34187802:	683b      	ldr	r3, [r7, #0]
34187804:	2b01      	cmp	r3, #1
34187806:	d007      	beq.n	34187818 <HAL_DCMIPP_PIPE_DisableISPExposure+0x30>
34187808:	683b      	ldr	r3, [r7, #0]
3418780a:	2b02      	cmp	r3, #2
3418780c:	d004      	beq.n	34187818 <HAL_DCMIPP_PIPE_DisableISPExposure+0x30>
3418780e:	f241 711d 	movw	r1, #5917	@ 0x171d
34187812:	480b      	ldr	r0, [pc, #44]	@ (34187840 <HAL_DCMIPP_PIPE_DisableISPExposure+0x58>)
34187814:	f7fa fd2a 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187818:	683b      	ldr	r3, [r7, #0]
3418781a:	2b01      	cmp	r3, #1
3418781c:	d10b      	bne.n	34187836 <HAL_DCMIPP_PIPE_DisableISPExposure+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
3418781e:	687b      	ldr	r3, [r7, #4]
34187820:	681b      	ldr	r3, [r3, #0]
34187822:	f8d3 2844 	ldr.w	r2, [r3, #2116]	@ 0x844
34187826:	687b      	ldr	r3, [r7, #4]
34187828:	681b      	ldr	r3, [r3, #0]
3418782a:	f022 0201 	bic.w	r2, r2, #1
3418782e:	f8c3 2844 	str.w	r2, [r3, #2116]	@ 0x844
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187832:	2300      	movs	r3, #0
34187834:	e000      	b.n	34187838 <HAL_DCMIPP_PIPE_DisableISPExposure+0x50>
    return HAL_ERROR;
34187836:	2301      	movs	r3, #1
}
34187838:	4618      	mov	r0, r3
3418783a:	3708      	adds	r7, #8
3418783c:	46bd      	mov	sp, r7
3418783e:	bd80      	pop	{r7, pc}
34187840:	341a4eec 	.word	0x341a4eec

34187844 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
  * @param  pContrastConfig pointer to the DCMIPP_ContrastConfTypeDef structure that contains contrast information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                           const DCMIPP_ContrastConfTypeDef *pContrastConfig)
{
34187844:	b580      	push	{r7, lr}
34187846:	b084      	sub	sp, #16
34187848:	af00      	add	r7, sp, #0
3418784a:	60f8      	str	r0, [r7, #12]
3418784c:	60b9      	str	r1, [r7, #8]
3418784e:	607a      	str	r2, [r7, #4]
  /* Check handle validity */
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34187850:	68fb      	ldr	r3, [r7, #12]
34187852:	2b00      	cmp	r3, #0
34187854:	d002      	beq.n	3418785c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x18>
34187856:	687b      	ldr	r3, [r7, #4]
34187858:	2b00      	cmp	r3, #0
3418785a:	d101      	bne.n	34187860 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x1c>
  {
    return HAL_ERROR;
3418785c:	2301      	movs	r3, #1
3418785e:	e09a      	b.n	34187996 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x152>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187860:	68bb      	ldr	r3, [r7, #8]
34187862:	2b00      	cmp	r3, #0
34187864:	d00a      	beq.n	3418787c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x38>
34187866:	68bb      	ldr	r3, [r7, #8]
34187868:	2b01      	cmp	r3, #1
3418786a:	d007      	beq.n	3418787c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x38>
3418786c:	68bb      	ldr	r3, [r7, #8]
3418786e:	2b02      	cmp	r3, #2
34187870:	d004      	beq.n	3418787c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x38>
34187872:	f241 713b 	movw	r1, #5947	@ 0x173b
34187876:	484a      	ldr	r0, [pc, #296]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
34187878:	f7fa fcf8 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_0));
3418787c:	687b      	ldr	r3, [r7, #4]
3418787e:	781b      	ldrb	r3, [r3, #0]
34187880:	2b3f      	cmp	r3, #63	@ 0x3f
34187882:	d904      	bls.n	3418788e <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x4a>
34187884:	f241 713c 	movw	r1, #5948	@ 0x173c
34187888:	4845      	ldr	r0, [pc, #276]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
3418788a:	f7fa fcef 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_32));
3418788e:	687b      	ldr	r3, [r7, #4]
34187890:	785b      	ldrb	r3, [r3, #1]
34187892:	2b3f      	cmp	r3, #63	@ 0x3f
34187894:	d904      	bls.n	341878a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x5c>
34187896:	f241 713d 	movw	r1, #5949	@ 0x173d
3418789a:	4841      	ldr	r0, [pc, #260]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
3418789c:	f7fa fce6 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_64));
341878a0:	687b      	ldr	r3, [r7, #4]
341878a2:	789b      	ldrb	r3, [r3, #2]
341878a4:	2b3f      	cmp	r3, #63	@ 0x3f
341878a6:	d904      	bls.n	341878b2 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x6e>
341878a8:	f241 713e 	movw	r1, #5950	@ 0x173e
341878ac:	483c      	ldr	r0, [pc, #240]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
341878ae:	f7fa fcdd 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_96));
341878b2:	687b      	ldr	r3, [r7, #4]
341878b4:	78db      	ldrb	r3, [r3, #3]
341878b6:	2b3f      	cmp	r3, #63	@ 0x3f
341878b8:	d904      	bls.n	341878c4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x80>
341878ba:	f241 713f 	movw	r1, #5951	@ 0x173f
341878be:	4838      	ldr	r0, [pc, #224]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
341878c0:	f7fa fcd4 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_128));
341878c4:	687b      	ldr	r3, [r7, #4]
341878c6:	791b      	ldrb	r3, [r3, #4]
341878c8:	2b3f      	cmp	r3, #63	@ 0x3f
341878ca:	d904      	bls.n	341878d6 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x92>
341878cc:	f44f 51ba 	mov.w	r1, #5952	@ 0x1740
341878d0:	4833      	ldr	r0, [pc, #204]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
341878d2:	f7fa fccb 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
341878d6:	687b      	ldr	r3, [r7, #4]
341878d8:	795b      	ldrb	r3, [r3, #5]
341878da:	2b3f      	cmp	r3, #63	@ 0x3f
341878dc:	d904      	bls.n	341878e8 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa4>
341878de:	f241 7141 	movw	r1, #5953	@ 0x1741
341878e2:	482f      	ldr	r0, [pc, #188]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
341878e4:	f7fa fcc2 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
341878e8:	687b      	ldr	r3, [r7, #4]
341878ea:	799b      	ldrb	r3, [r3, #6]
341878ec:	2b3f      	cmp	r3, #63	@ 0x3f
341878ee:	d904      	bls.n	341878fa <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xb6>
341878f0:	f241 7142 	movw	r1, #5954	@ 0x1742
341878f4:	482a      	ldr	r0, [pc, #168]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
341878f6:	f7fa fcb9 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
341878fa:	687b      	ldr	r3, [r7, #4]
341878fc:	79db      	ldrb	r3, [r3, #7]
341878fe:	2b3f      	cmp	r3, #63	@ 0x3f
34187900:	d904      	bls.n	3418790c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xc8>
34187902:	f241 7143 	movw	r1, #5955	@ 0x1743
34187906:	4826      	ldr	r0, [pc, #152]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
34187908:	f7fa fcb0 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));
3418790c:	687b      	ldr	r3, [r7, #4]
3418790e:	7a1b      	ldrb	r3, [r3, #8]
34187910:	2b3f      	cmp	r3, #63	@ 0x3f
34187912:	d904      	bls.n	3418791e <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xda>
34187914:	f241 7144 	movw	r1, #5956	@ 0x1744
34187918:	4821      	ldr	r0, [pc, #132]	@ (341879a0 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x15c>)
3418791a:	f7fa fca7 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
3418791e:	68bb      	ldr	r3, [r7, #8]
34187920:	2b01      	cmp	r3, #1
34187922:	d137      	bne.n	34187994 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x150>
  {

    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34187924:	68fb      	ldr	r3, [r7, #12]
34187926:	681b      	ldr	r3, [r3, #0]
34187928:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
3418792c:	f423 41fc 	bic.w	r1, r3, #32256	@ 0x7e00
34187930:	687b      	ldr	r3, [r7, #4]
34187932:	781b      	ldrb	r3, [r3, #0]
34187934:	025a      	lsls	r2, r3, #9
34187936:	68fb      	ldr	r3, [r7, #12]
34187938:	681b      	ldr	r3, [r3, #0]
3418793a:	430a      	orrs	r2, r1
3418793c:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
               (uint32_t)pContrastConfig->LUM_0 << DCMIPP_P1CTCR1_LUM0_Pos);

    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
34187940:	687b      	ldr	r3, [r7, #4]
34187942:	785b      	ldrb	r3, [r3, #1]
34187944:	065a      	lsls	r2, r3, #25
34187946:	687b      	ldr	r3, [r7, #4]
34187948:	789b      	ldrb	r3, [r3, #2]
3418794a:	045b      	lsls	r3, r3, #17
3418794c:	431a      	orrs	r2, r3
3418794e:	687b      	ldr	r3, [r7, #4]
34187950:	78db      	ldrb	r3, [r3, #3]
34187952:	025b      	lsls	r3, r3, #9
34187954:	ea42 0103 	orr.w	r1, r2, r3
34187958:	687b      	ldr	r3, [r7, #4]
3418795a:	791b      	ldrb	r3, [r3, #4]
3418795c:	005a      	lsls	r2, r3, #1
3418795e:	68fb      	ldr	r3, [r7, #12]
34187960:	681b      	ldr	r3, [r3, #0]
34187962:	430a      	orrs	r2, r1
34187964:	f8c3 28a4 	str.w	r2, [r3, #2212]	@ 0x8a4
                                           ((uint32_t)pContrastConfig->LUM_64 << DCMIPP_P1CTCR2_LUM2_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_96 << DCMIPP_P1CTCR2_LUM3_Pos) |
                                           ((uint32_t)pContrastConfig->LUM_128 << DCMIPP_P1CTCR2_LUM4_Pos)));

    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
34187968:	687b      	ldr	r3, [r7, #4]
3418796a:	795b      	ldrb	r3, [r3, #5]
3418796c:	065a      	lsls	r2, r3, #25
3418796e:	687b      	ldr	r3, [r7, #4]
34187970:	799b      	ldrb	r3, [r3, #6]
34187972:	045b      	lsls	r3, r3, #17
34187974:	431a      	orrs	r2, r3
34187976:	687b      	ldr	r3, [r7, #4]
34187978:	79db      	ldrb	r3, [r3, #7]
3418797a:	025b      	lsls	r3, r3, #9
3418797c:	ea42 0103 	orr.w	r1, r2, r3
34187980:	687b      	ldr	r3, [r7, #4]
34187982:	7a1b      	ldrb	r3, [r3, #8]
34187984:	005a      	lsls	r2, r3, #1
34187986:	68fb      	ldr	r3, [r7, #12]
34187988:	681b      	ldr	r3, [r3, #0]
3418798a:	430a      	orrs	r2, r1
3418798c:	f8c3 28a8 	str.w	r2, [r3, #2216]	@ 0x8a8
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187990:	2300      	movs	r3, #0
34187992:	e000      	b.n	34187996 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x152>
    return HAL_ERROR;
34187994:	2301      	movs	r3, #1
}
34187996:	4618      	mov	r0, r3
34187998:	3710      	adds	r7, #16
3418799a:	46bd      	mov	sp, r7
3418799c:	bd80      	pop	{r7, pc}
3418799e:	bf00      	nop
341879a0:	341a4eec 	.word	0x341a4eec

341879a4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_EnableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341879a4:	b580      	push	{r7, lr}
341879a6:	b082      	sub	sp, #8
341879a8:	af00      	add	r7, sp, #0
341879aa:	6078      	str	r0, [r7, #4]
341879ac:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
341879ae:	687b      	ldr	r3, [r7, #4]
341879b0:	2b00      	cmp	r3, #0
341879b2:	d101      	bne.n	341879b8 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
341879b4:	2301      	movs	r3, #1
341879b6:	e01d      	b.n	341879f4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
341879b8:	683b      	ldr	r3, [r7, #0]
341879ba:	2b00      	cmp	r3, #0
341879bc:	d00a      	beq.n	341879d4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x30>
341879be:	683b      	ldr	r3, [r7, #0]
341879c0:	2b01      	cmp	r3, #1
341879c2:	d007      	beq.n	341879d4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x30>
341879c4:	683b      	ldr	r3, [r7, #0]
341879c6:	2b02      	cmp	r3, #2
341879c8:	d004      	beq.n	341879d4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x30>
341879ca:	f241 716c 	movw	r1, #5996	@ 0x176c
341879ce:	480b      	ldr	r0, [pc, #44]	@ (341879fc <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x58>)
341879d0:	f7fa fc4c 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
341879d4:	683b      	ldr	r3, [r7, #0]
341879d6:	2b01      	cmp	r3, #1
341879d8:	d10b      	bne.n	341879f2 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x4e>
  {
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
341879da:	687b      	ldr	r3, [r7, #4]
341879dc:	681b      	ldr	r3, [r3, #0]
341879de:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
341879e2:	687b      	ldr	r3, [r7, #4]
341879e4:	681b      	ldr	r3, [r3, #0]
341879e6:	f042 0201 	orr.w	r2, r2, #1
341879ea:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
341879ee:	2300      	movs	r3, #0
341879f0:	e000      	b.n	341879f4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x50>
    return HAL_ERROR;
341879f2:	2301      	movs	r3, #1
}
341879f4:	4618      	mov	r0, r3
341879f6:	3708      	adds	r7, #8
341879f8:	46bd      	mov	sp, r7
341879fa:	bd80      	pop	{r7, pc}
341879fc:	341a4eec 	.word	0x341a4eec

34187a00 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_DisableISPCtrlContrast(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34187a00:	b580      	push	{r7, lr}
34187a02:	b082      	sub	sp, #8
34187a04:	af00      	add	r7, sp, #0
34187a06:	6078      	str	r0, [r7, #4]
34187a08:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if (hdcmipp == NULL)
34187a0a:	687b      	ldr	r3, [r7, #4]
34187a0c:	2b00      	cmp	r3, #0
34187a0e:	d101      	bne.n	34187a14 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
  {
    return HAL_ERROR;
34187a10:	2301      	movs	r3, #1
34187a12:	e01d      	b.n	34187a50 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x50>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187a14:	683b      	ldr	r3, [r7, #0]
34187a16:	2b00      	cmp	r3, #0
34187a18:	d00a      	beq.n	34187a30 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x30>
34187a1a:	683b      	ldr	r3, [r7, #0]
34187a1c:	2b01      	cmp	r3, #1
34187a1e:	d007      	beq.n	34187a30 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x30>
34187a20:	683b      	ldr	r3, [r7, #0]
34187a22:	2b02      	cmp	r3, #2
34187a24:	d004      	beq.n	34187a30 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x30>
34187a26:	f241 7188 	movw	r1, #6024	@ 0x1788
34187a2a:	480b      	ldr	r0, [pc, #44]	@ (34187a58 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x58>)
34187a2c:	f7fa fc1e 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187a30:	683b      	ldr	r3, [r7, #0]
34187a32:	2b01      	cmp	r3, #1
34187a34:	d10b      	bne.n	34187a4e <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x4e>
  {
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34187a36:	687b      	ldr	r3, [r7, #4]
34187a38:	681b      	ldr	r3, [r3, #0]
34187a3a:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	@ 0x8a0
34187a3e:	687b      	ldr	r3, [r7, #4]
34187a40:	681b      	ldr	r3, [r3, #0]
34187a42:	f022 0201 	bic.w	r2, r2, #1
34187a46:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
34187a4a:	2300      	movs	r3, #0
34187a4c:	e000      	b.n	34187a50 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x50>
    return HAL_ERROR;
34187a4e:	2301      	movs	r3, #1
}
34187a50:	4618      	mov	r0, r3
34187a52:	3708      	adds	r7, #8
34187a54:	46bd      	mov	sp, r7
34187a56:	bd80      	pop	{r7, pc}
34187a58:	341a4eec 	.word	0x341a4eec

34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
  * @param  pCounter pointer to receive the accumulated value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                                     uint8_t ModuleID, uint32_t *pCounter)
{
34187a5c:	b580      	push	{r7, lr}
34187a5e:	b084      	sub	sp, #16
34187a60:	af00      	add	r7, sp, #0
34187a62:	60f8      	str	r0, [r7, #12]
34187a64:	60b9      	str	r1, [r7, #8]
34187a66:	603b      	str	r3, [r7, #0]
34187a68:	4613      	mov	r3, r2
34187a6a:	71fb      	strb	r3, [r7, #7]

  /* Check handle validity */
  if ((hdcmipp == NULL) || (pCounter == NULL))
34187a6c:	68fb      	ldr	r3, [r7, #12]
34187a6e:	2b00      	cmp	r3, #0
34187a70:	d002      	beq.n	34187a78 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x1c>
34187a72:	683b      	ldr	r3, [r7, #0]
34187a74:	2b00      	cmp	r3, #0
34187a76:	d101      	bne.n	34187a7c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x20>
  {
    return HAL_ERROR;
34187a78:	2301      	movs	r3, #1
34187a7a:	e047      	b.n	34187b0c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xb0>
  }

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187a7c:	68bb      	ldr	r3, [r7, #8]
34187a7e:	2b00      	cmp	r3, #0
34187a80:	d00a      	beq.n	34187a98 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3c>
34187a82:	68bb      	ldr	r3, [r7, #8]
34187a84:	2b01      	cmp	r3, #1
34187a86:	d007      	beq.n	34187a98 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3c>
34187a88:	68bb      	ldr	r3, [r7, #8]
34187a8a:	2b02      	cmp	r3, #2
34187a8c:	d004      	beq.n	34187a98 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3c>
34187a8e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
34187a92:	4820      	ldr	r0, [pc, #128]	@ (34187b14 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xb8>)
34187a94:	f7fa fbea 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34187a98:	79fb      	ldrb	r3, [r7, #7]
34187a9a:	2b01      	cmp	r3, #1
34187a9c:	d00a      	beq.n	34187ab4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x58>
34187a9e:	79fb      	ldrb	r3, [r7, #7]
34187aa0:	2b02      	cmp	r3, #2
34187aa2:	d007      	beq.n	34187ab4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x58>
34187aa4:	79fb      	ldrb	r3, [r7, #7]
34187aa6:	2b03      	cmp	r3, #3
34187aa8:	d004      	beq.n	34187ab4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x58>
34187aaa:	f641 4101 	movw	r1, #7169	@ 0x1c01
34187aae:	4819      	ldr	r0, [pc, #100]	@ (34187b14 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xb8>)
34187ab0:	f7fa fbdc 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187ab4:	68bb      	ldr	r3, [r7, #8]
34187ab6:	2b01      	cmp	r3, #1
34187ab8:	d124      	bne.n	34187b04 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xa8>
  {
    switch (ModuleID)
34187aba:	79fb      	ldrb	r3, [r7, #7]
34187abc:	2b03      	cmp	r3, #3
34187abe:	d018      	beq.n	34187af2 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x96>
34187ac0:	2b03      	cmp	r3, #3
34187ac2:	dc21      	bgt.n	34187b08 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xac>
34187ac4:	2b01      	cmp	r3, #1
34187ac6:	d002      	beq.n	34187ace <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x72>
34187ac8:	2b02      	cmp	r3, #2
34187aca:	d009      	beq.n	34187ae0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x84>
        break;
      case DCMIPP_STATEXT_MODULE3:
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
        break;
      default:
        break;
34187acc:	e01c      	b.n	34187b08 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xac>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34187ace:	68fb      	ldr	r3, [r7, #12]
34187ad0:	681b      	ldr	r3, [r3, #0]
34187ad2:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
34187ad6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34187ada:	683b      	ldr	r3, [r7, #0]
34187adc:	601a      	str	r2, [r3, #0]
        break;
34187ade:	e014      	b.n	34187b0a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xae>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34187ae0:	68fb      	ldr	r3, [r7, #12]
34187ae2:	681b      	ldr	r3, [r3, #0]
34187ae4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34187ae8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34187aec:	683b      	ldr	r3, [r7, #0]
34187aee:	601a      	str	r2, [r3, #0]
        break;
34187af0:	e00b      	b.n	34187b0a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xae>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34187af2:	68fb      	ldr	r3, [r7, #12]
34187af4:	681b      	ldr	r3, [r3, #0]
34187af6:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34187afa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34187afe:	683b      	ldr	r3, [r7, #0]
34187b00:	601a      	str	r2, [r3, #0]
        break;
34187b02:	e002      	b.n	34187b0a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xae>
    }
  }
  else
  {
    return HAL_ERROR;
34187b04:	2301      	movs	r3, #1
34187b06:	e001      	b.n	34187b0c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xb0>
        break;
34187b08:	bf00      	nop
  }

  return HAL_OK;
34187b0a:	2300      	movs	r3, #0
}
34187b0c:	4618      	mov	r0, r3
34187b0e:	3710      	adds	r7, #16
34187b10:	46bd      	mov	sp, r7
34187b12:	bd80      	pop	{r7, pc}
34187b14:	341a4eec 	.word	0x341a4eec

34187b18 <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  *                         filled with the exposure configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPExposureConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                          DCMIPP_ExposureConfTypeDef *pExposureConfig)
{
34187b18:	b580      	push	{r7, lr}
34187b1a:	b086      	sub	sp, #24
34187b1c:	af00      	add	r7, sp, #0
34187b1e:	60f8      	str	r0, [r7, #12]
34187b20:	60b9      	str	r1, [r7, #8]
34187b22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187b24:	68bb      	ldr	r3, [r7, #8]
34187b26:	2b00      	cmp	r3, #0
34187b28:	d00a      	beq.n	34187b40 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x28>
34187b2a:	68bb      	ldr	r3, [r7, #8]
34187b2c:	2b01      	cmp	r3, #1
34187b2e:	d007      	beq.n	34187b40 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x28>
34187b30:	68bb      	ldr	r3, [r7, #8]
34187b32:	2b02      	cmp	r3, #2
34187b34:	d004      	beq.n	34187b40 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x28>
34187b36:	f641 41e6 	movw	r1, #7398	@ 0x1ce6
34187b3a:	481d      	ldr	r0, [pc, #116]	@ (34187bb0 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x98>)
34187b3c:	f7fa fb96 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187b40:	68bb      	ldr	r3, [r7, #8]
34187b42:	2b01      	cmp	r3, #1
34187b44:	d130      	bne.n	34187ba8 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x90>
  {
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
34187b46:	68fb      	ldr	r3, [r7, #12]
34187b48:	681b      	ldr	r3, [r3, #0]
34187b4a:	f8d3 3848 	ldr.w	r3, [r3, #2120]	@ 0x848
34187b4e:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34187b50:	697b      	ldr	r3, [r7, #20]
34187b52:	091b      	lsrs	r3, r3, #4
34187b54:	b2da      	uxtb	r2, r3
34187b56:	687b      	ldr	r3, [r7, #4]
34187b58:	715a      	strb	r2, [r3, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
34187b5a:	697b      	ldr	r3, [r7, #20]
34187b5c:	0b1b      	lsrs	r3, r3, #12
34187b5e:	b2db      	uxtb	r3, r3
34187b60:	f003 0307 	and.w	r3, r3, #7
34187b64:	b2da      	uxtb	r2, r3
34187b66:	687b      	ldr	r3, [r7, #4]
34187b68:	711a      	strb	r2, [r3, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34187b6a:	697b      	ldr	r3, [r7, #20]
34187b6c:	0f1b      	lsrs	r3, r3, #28
34187b6e:	b2db      	uxtb	r3, r3
34187b70:	f003 0307 	and.w	r3, r3, #7
34187b74:	b2da      	uxtb	r2, r3
34187b76:	687b      	ldr	r3, [r7, #4]
34187b78:	709a      	strb	r2, [r3, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34187b7a:	697b      	ldr	r3, [r7, #20]
34187b7c:	0d1b      	lsrs	r3, r3, #20
34187b7e:	b2da      	uxtb	r2, r3
34187b80:	687b      	ldr	r3, [r7, #4]
34187b82:	70da      	strb	r2, [r3, #3]

    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34187b84:	68fb      	ldr	r3, [r7, #12]
34187b86:	681b      	ldr	r3, [r3, #0]
34187b88:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34187b8c:	617b      	str	r3, [r7, #20]

    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34187b8e:	697b      	ldr	r3, [r7, #20]
34187b90:	0d1b      	lsrs	r3, r3, #20
34187b92:	b2da      	uxtb	r2, r3
34187b94:	687b      	ldr	r3, [r7, #4]
34187b96:	705a      	strb	r2, [r3, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34187b98:	697b      	ldr	r3, [r7, #20]
34187b9a:	0f1b      	lsrs	r3, r3, #28
34187b9c:	b2db      	uxtb	r3, r3
34187b9e:	f003 0307 	and.w	r3, r3, #7
34187ba2:	b2da      	uxtb	r2, r3
34187ba4:	687b      	ldr	r3, [r7, #4]
34187ba6:	701a      	strb	r2, [r3, #0]
  }
}
34187ba8:	bf00      	nop
34187baa:	3718      	adds	r7, #24
34187bac:	46bd      	mov	sp, r7
34187bae:	bd80      	pop	{r7, pc}
34187bb0:	341a4eec 	.word	0x341a4eec

34187bb4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  *                                 filled with the color conversion configuration of the specified pipe.
  * @retval None
  */
void HAL_DCMIPP_PIPE_GetISPColorConversionConfig(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                                 DCMIPP_ColorConversionConfTypeDef *pColorConversionConfig)
{
34187bb4:	b580      	push	{r7, lr}
34187bb6:	b086      	sub	sp, #24
34187bb8:	af00      	add	r7, sp, #0
34187bba:	60f8      	str	r0, [r7, #12]
34187bbc:	60b9      	str	r1, [r7, #8]
34187bbe:	607a      	str	r2, [r7, #4]
  uint16_t tmp;

  /* Check parameters */
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187bc0:	68bb      	ldr	r3, [r7, #8]
34187bc2:	2b00      	cmp	r3, #0
34187bc4:	d00a      	beq.n	34187bdc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x28>
34187bc6:	68bb      	ldr	r3, [r7, #8]
34187bc8:	2b01      	cmp	r3, #1
34187bca:	d007      	beq.n	34187bdc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x28>
34187bcc:	68bb      	ldr	r3, [r7, #8]
34187bce:	2b02      	cmp	r3, #2
34187bd0:	d004      	beq.n	34187bdc <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x28>
34187bd2:	f641 511f 	movw	r1, #7455	@ 0x1d1f
34187bd6:	48a8      	ldr	r0, [pc, #672]	@ (34187e78 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2c4>)
34187bd8:	f7fa fb48 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187bdc:	68bb      	ldr	r3, [r7, #8]
34187bde:	2b01      	cmp	r3, #1
34187be0:	f040 8146 	bne.w	34187e70 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2bc>
  {
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
34187be4:	68fb      	ldr	r3, [r7, #12]
34187be6:	681b      	ldr	r3, [r3, #0]
34187be8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34187bec:	82fb      	strh	r3, [r7, #22]

    UNUSED(tmp);

    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
                                                 ? ENABLE : DISABLE;
34187bee:	8afb      	ldrh	r3, [r7, #22]
34187bf0:	089b      	lsrs	r3, r3, #2
34187bf2:	b2db      	uxtb	r3, r3
34187bf4:	f003 0301 	and.w	r3, r3, #1
34187bf8:	b2da      	uxtb	r2, r3
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
34187bfa:	687b      	ldr	r3, [r7, #4]
34187bfc:	701a      	strb	r2, [r3, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34187bfe:	8afb      	ldrh	r3, [r7, #22]
34187c00:	b2db      	uxtb	r3, r3
34187c02:	f003 0302 	and.w	r3, r3, #2
34187c06:	b2da      	uxtb	r2, r3
34187c08:	687b      	ldr	r3, [r7, #4]
34187c0a:	705a      	strb	r2, [r3, #1]

    /* Get Coefficient row 1 columns 1 2 3 and the added column of the matrix */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34187c0c:	68fb      	ldr	r3, [r7, #12]
34187c0e:	681b      	ldr	r3, [r3, #0]
34187c10:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
34187c14:	0c1b      	lsrs	r3, r3, #16
34187c16:	b29b      	uxth	r3, r3
34187c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187c1c:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34187c1e:	8afb      	ldrh	r3, [r7, #22]
34187c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187c24:	2b00      	cmp	r3, #0
34187c26:	d007      	beq.n	34187c38 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x84>
34187c28:	8afb      	ldrh	r3, [r7, #22]
34187c2a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187c2e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187c32:	b29b      	uxth	r3, r3
34187c34:	b21b      	sxth	r3, r3
34187c36:	e001      	b.n	34187c3c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x88>
34187c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187c3c:	687a      	ldr	r2, [r7, #4]
34187c3e:	8093      	strh	r3, [r2, #4]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34187c40:	68fb      	ldr	r3, [r7, #12]
34187c42:	681b      	ldr	r3, [r3, #0]
34187c44:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
34187c48:	b29b      	uxth	r3, r3
34187c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187c4e:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34187c50:	8afb      	ldrh	r3, [r7, #22]
34187c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187c56:	2b00      	cmp	r3, #0
34187c58:	d007      	beq.n	34187c6a <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xb6>
34187c5a:	8afb      	ldrh	r3, [r7, #22]
34187c5c:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187c60:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187c64:	b29b      	uxth	r3, r3
34187c66:	b21b      	sxth	r3, r3
34187c68:	e001      	b.n	34187c6e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xba>
34187c6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187c6e:	687a      	ldr	r2, [r7, #4]
34187c70:	8053      	strh	r3, [r2, #2]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34187c72:	68fb      	ldr	r3, [r7, #12]
34187c74:	681b      	ldr	r3, [r3, #0]
34187c76:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
34187c7a:	0c1b      	lsrs	r3, r3, #16
34187c7c:	b29b      	uxth	r3, r3
34187c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
34187c82:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34187c84:	8afb      	ldrh	r3, [r7, #22]
34187c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187c8a:	2b00      	cmp	r3, #0
34187c8c:	d007      	beq.n	34187c9e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xea>
34187c8e:	8afb      	ldrh	r3, [r7, #22]
34187c90:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34187c94:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34187c98:	b29b      	uxth	r3, r3
34187c9a:	b21b      	sxth	r3, r3
34187c9c:	e001      	b.n	34187ca2 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0xee>
34187c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187ca2:	687a      	ldr	r2, [r7, #4]
34187ca4:	8113      	strh	r3, [r2, #8]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34187ca6:	68fb      	ldr	r3, [r7, #12]
34187ca8:	681b      	ldr	r3, [r3, #0]
34187caa:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
34187cae:	b29b      	uxth	r3, r3
34187cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187cb4:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34187cb6:	8afb      	ldrh	r3, [r7, #22]
34187cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187cbc:	2b00      	cmp	r3, #0
34187cbe:	d007      	beq.n	34187cd0 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x11c>
34187cc0:	8afb      	ldrh	r3, [r7, #22]
34187cc2:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187cc6:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187cca:	b29b      	uxth	r3, r3
34187ccc:	b21b      	sxth	r3, r3
34187cce:	e001      	b.n	34187cd4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x120>
34187cd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187cd4:	687a      	ldr	r2, [r7, #4]
34187cd6:	80d3      	strh	r3, [r2, #6]

    /* Get Coefficient row 2 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34187cd8:	68fb      	ldr	r3, [r7, #12]
34187cda:	681b      	ldr	r3, [r3, #0]
34187cdc:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
34187ce0:	0c1b      	lsrs	r3, r3, #16
34187ce2:	b29b      	uxth	r3, r3
34187ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187ce8:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34187cea:	8afb      	ldrh	r3, [r7, #22]
34187cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187cf0:	2b00      	cmp	r3, #0
34187cf2:	d007      	beq.n	34187d04 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x150>
34187cf4:	8afb      	ldrh	r3, [r7, #22]
34187cf6:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187cfa:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187cfe:	b29b      	uxth	r3, r3
34187d00:	b21b      	sxth	r3, r3
34187d02:	e001      	b.n	34187d08 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x154>
34187d04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187d08:	687a      	ldr	r2, [r7, #4]
34187d0a:	8193      	strh	r3, [r2, #12]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34187d0c:	68fb      	ldr	r3, [r7, #12]
34187d0e:	681b      	ldr	r3, [r3, #0]
34187d10:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
34187d14:	b29b      	uxth	r3, r3
34187d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187d1a:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34187d1c:	8afb      	ldrh	r3, [r7, #22]
34187d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187d22:	2b00      	cmp	r3, #0
34187d24:	d007      	beq.n	34187d36 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x182>
34187d26:	8afb      	ldrh	r3, [r7, #22]
34187d28:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187d2c:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187d30:	b29b      	uxth	r3, r3
34187d32:	b21b      	sxth	r3, r3
34187d34:	e001      	b.n	34187d3a <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x186>
34187d36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187d3a:	687a      	ldr	r2, [r7, #4]
34187d3c:	8153      	strh	r3, [r2, #10]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34187d3e:	68fb      	ldr	r3, [r7, #12]
34187d40:	681b      	ldr	r3, [r3, #0]
34187d42:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
34187d46:	0c1b      	lsrs	r3, r3, #16
34187d48:	b29b      	uxth	r3, r3
34187d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
34187d4e:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34187d50:	8afb      	ldrh	r3, [r7, #22]
34187d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187d56:	2b00      	cmp	r3, #0
34187d58:	d007      	beq.n	34187d6a <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1b6>
34187d5a:	8afb      	ldrh	r3, [r7, #22]
34187d5c:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34187d60:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34187d64:	b29b      	uxth	r3, r3
34187d66:	b21b      	sxth	r3, r3
34187d68:	e001      	b.n	34187d6e <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1ba>
34187d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187d6e:	687a      	ldr	r2, [r7, #4]
34187d70:	8213      	strh	r3, [r2, #16]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34187d72:	68fb      	ldr	r3, [r7, #12]
34187d74:	681b      	ldr	r3, [r3, #0]
34187d76:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
34187d7a:	b29b      	uxth	r3, r3
34187d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187d80:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34187d82:	8afb      	ldrh	r3, [r7, #22]
34187d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187d88:	2b00      	cmp	r3, #0
34187d8a:	d007      	beq.n	34187d9c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1e8>
34187d8c:	8afb      	ldrh	r3, [r7, #22]
34187d8e:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187d92:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187d96:	b29b      	uxth	r3, r3
34187d98:	b21b      	sxth	r3, r3
34187d9a:	e001      	b.n	34187da0 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x1ec>
34187d9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187da0:	687a      	ldr	r2, [r7, #4]
34187da2:	81d3      	strh	r3, [r2, #14]

    /* Get Coefficient row 3 columns 1 2 3 and the added column of the matrix  */
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34187da4:	68fb      	ldr	r3, [r7, #12]
34187da6:	681b      	ldr	r3, [r3, #0]
34187da8:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
34187dac:	0c1b      	lsrs	r3, r3, #16
34187dae:	b29b      	uxth	r3, r3
34187db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
34187db4:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
34187db6:	8afb      	ldrh	r3, [r7, #22]
34187db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187dbc:	2b00      	cmp	r3, #0
34187dbe:	d007      	beq.n	34187dd0 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x21c>
34187dc0:	8afb      	ldrh	r3, [r7, #22]
34187dc2:	ea6f 5383 	mvn.w	r3, r3, lsl #22
34187dc6:	ea6f 5393 	mvn.w	r3, r3, lsr #22
34187dca:	b29b      	uxth	r3, r3
34187dcc:	b21b      	sxth	r3, r3
34187dce:	e001      	b.n	34187dd4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x220>
34187dd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187dd4:	687a      	ldr	r2, [r7, #4]
34187dd6:	8313      	strh	r3, [r2, #24]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
34187dd8:	68fb      	ldr	r3, [r7, #12]
34187dda:	681b      	ldr	r3, [r3, #0]
34187ddc:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
34187de0:	b29b      	uxth	r3, r3
34187de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187de6:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34187de8:	8afb      	ldrh	r3, [r7, #22]
34187dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187dee:	2b00      	cmp	r3, #0
34187df0:	d007      	beq.n	34187e02 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x24e>
34187df2:	8afb      	ldrh	r3, [r7, #22]
34187df4:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187df8:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187dfc:	b29b      	uxth	r3, r3
34187dfe:	b21b      	sxth	r3, r3
34187e00:	e001      	b.n	34187e06 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x252>
34187e02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187e06:	687a      	ldr	r2, [r7, #4]
34187e08:	82d3      	strh	r3, [r2, #22]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34187e0a:	68fb      	ldr	r3, [r7, #12]
34187e0c:	681b      	ldr	r3, [r3, #0]
34187e0e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34187e12:	0c1b      	lsrs	r3, r3, #16
34187e14:	b29b      	uxth	r3, r3
34187e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187e1a:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
34187e1c:	8afb      	ldrh	r3, [r7, #22]
34187e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187e22:	2b00      	cmp	r3, #0
34187e24:	d007      	beq.n	34187e36 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x282>
34187e26:	8afb      	ldrh	r3, [r7, #22]
34187e28:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187e2c:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187e30:	b29b      	uxth	r3, r3
34187e32:	b21b      	sxth	r3, r3
34187e34:	e001      	b.n	34187e3a <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x286>
34187e36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187e3a:	687a      	ldr	r2, [r7, #4]
34187e3c:	8293      	strh	r3, [r2, #20]

    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
34187e3e:	68fb      	ldr	r3, [r7, #12]
34187e40:	681b      	ldr	r3, [r3, #0]
34187e42:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
34187e46:	b29b      	uxth	r3, r3
34187e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
34187e4c:	82fb      	strh	r3, [r7, #22]
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
34187e4e:	8afb      	ldrh	r3, [r7, #22]
34187e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187e54:	2b00      	cmp	r3, #0
34187e56:	d007      	beq.n	34187e68 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2b4>
34187e58:	8afb      	ldrh	r3, [r7, #22]
34187e5a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
34187e5e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
34187e62:	b29b      	uxth	r3, r3
34187e64:	b21b      	sxth	r3, r3
34187e66:	e001      	b.n	34187e6c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x2b8>
34187e68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
34187e6c:	687a      	ldr	r2, [r7, #4]
34187e6e:	8253      	strh	r3, [r2, #18]
  }
}
34187e70:	bf00      	nop
34187e72:	3718      	adds	r7, #24
34187e74:	46bd      	mov	sp, r7
34187e76:	bd80      	pop	{r7, pc}
34187e78:	341a4eec 	.word	0x341a4eec

34187e7c <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPExposure(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34187e7c:	b580      	push	{r7, lr}
34187e7e:	b082      	sub	sp, #8
34187e80:	af00      	add	r7, sp, #0
34187e82:	6078      	str	r0, [r7, #4]
34187e84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34187e86:	687b      	ldr	r3, [r7, #4]
34187e88:	681b      	ldr	r3, [r3, #0]
34187e8a:	4a17      	ldr	r2, [pc, #92]	@ (34187ee8 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x6c>)
34187e8c:	4293      	cmp	r3, r2
34187e8e:	d009      	beq.n	34187ea4 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x28>
34187e90:	687b      	ldr	r3, [r7, #4]
34187e92:	681b      	ldr	r3, [r3, #0]
34187e94:	4a15      	ldr	r2, [pc, #84]	@ (34187eec <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x70>)
34187e96:	4293      	cmp	r3, r2
34187e98:	d004      	beq.n	34187ea4 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x28>
34187e9a:	f641 519b 	movw	r1, #7579	@ 0x1d9b
34187e9e:	4814      	ldr	r0, [pc, #80]	@ (34187ef0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x74>)
34187ea0:	f7fa f9e4 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187ea4:	683b      	ldr	r3, [r7, #0]
34187ea6:	2b00      	cmp	r3, #0
34187ea8:	d00a      	beq.n	34187ec0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>
34187eaa:	683b      	ldr	r3, [r7, #0]
34187eac:	2b01      	cmp	r3, #1
34187eae:	d007      	beq.n	34187ec0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>
34187eb0:	683b      	ldr	r3, [r7, #0]
34187eb2:	2b02      	cmp	r3, #2
34187eb4:	d004      	beq.n	34187ec0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>
34187eb6:	f641 519c 	movw	r1, #7580	@ 0x1d9c
34187eba:	480d      	ldr	r0, [pc, #52]	@ (34187ef0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x74>)
34187ebc:	f7fa f9d6 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187ec0:	683b      	ldr	r3, [r7, #0]
34187ec2:	2b01      	cmp	r3, #1
34187ec4:	d10b      	bne.n	34187ede <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x62>
  {
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34187ec6:	687b      	ldr	r3, [r7, #4]
34187ec8:	681b      	ldr	r3, [r3, #0]
34187eca:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
34187ece:	f003 0301 	and.w	r3, r3, #1
34187ed2:	2b01      	cmp	r3, #1
34187ed4:	d101      	bne.n	34187eda <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x5e>
34187ed6:	2301      	movs	r3, #1
34187ed8:	e002      	b.n	34187ee0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x64>
34187eda:	2300      	movs	r3, #0
34187edc:	e000      	b.n	34187ee0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x64>
  }
  else
  {
    /* State Disabled */
    return 0;
34187ede:	2300      	movs	r3, #0
  }
}
34187ee0:	4618      	mov	r0, r3
34187ee2:	3708      	adds	r7, #8
34187ee4:	46bd      	mov	sp, r7
34187ee6:	bd80      	pop	{r7, pc}
34187ee8:	58002000 	.word	0x58002000
34187eec:	48002000 	.word	0x48002000
34187ef0:	341a4eec 	.word	0x341a4eec

34187ef4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Pipe to be checked
  * @retval State of bit (1 or 0).
  */
uint32_t HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34187ef4:	b580      	push	{r7, lr}
34187ef6:	b082      	sub	sp, #8
34187ef8:	af00      	add	r7, sp, #0
34187efa:	6078      	str	r0, [r7, #4]
34187efc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34187efe:	687b      	ldr	r3, [r7, #4]
34187f00:	681b      	ldr	r3, [r3, #0]
34187f02:	4a17      	ldr	r2, [pc, #92]	@ (34187f60 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x6c>)
34187f04:	4293      	cmp	r3, r2
34187f06:	d009      	beq.n	34187f1c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x28>
34187f08:	687b      	ldr	r3, [r7, #4]
34187f0a:	681b      	ldr	r3, [r3, #0]
34187f0c:	4a15      	ldr	r2, [pc, #84]	@ (34187f64 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x70>)
34187f0e:	4293      	cmp	r3, r2
34187f10:	d004      	beq.n	34187f1c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x28>
34187f12:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
34187f16:	4814      	ldr	r0, [pc, #80]	@ (34187f68 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x74>)
34187f18:	f7fa f9a8 	bl	3418226c <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34187f1c:	683b      	ldr	r3, [r7, #0]
34187f1e:	2b00      	cmp	r3, #0
34187f20:	d00a      	beq.n	34187f38 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>
34187f22:	683b      	ldr	r3, [r7, #0]
34187f24:	2b01      	cmp	r3, #1
34187f26:	d007      	beq.n	34187f38 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>
34187f28:	683b      	ldr	r3, [r7, #0]
34187f2a:	2b02      	cmp	r3, #2
34187f2c:	d004      	beq.n	34187f38 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>
34187f2e:	f641 51c8 	movw	r1, #7624	@ 0x1dc8
34187f32:	480d      	ldr	r0, [pc, #52]	@ (34187f68 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x74>)
34187f34:	f7fa f99a 	bl	3418226c <assert_failed>

  if (Pipe == DCMIPP_PIPE1)
34187f38:	683b      	ldr	r3, [r7, #0]
34187f3a:	2b01      	cmp	r3, #1
34187f3c:	d10b      	bne.n	34187f56 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x62>
  {
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34187f3e:	687b      	ldr	r3, [r7, #4]
34187f40:	681b      	ldr	r3, [r3, #0]
34187f42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
34187f46:	f003 0301 	and.w	r3, r3, #1
34187f4a:	2b01      	cmp	r3, #1
34187f4c:	d101      	bne.n	34187f52 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x5e>
34187f4e:	2301      	movs	r3, #1
34187f50:	e002      	b.n	34187f58 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x64>
34187f52:	2300      	movs	r3, #0
34187f54:	e000      	b.n	34187f58 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x64>
  }
  else
  {
    /* State Disabled */
    return 0;
34187f56:	2300      	movs	r3, #0
  }
}
34187f58:	4618      	mov	r0, r3
34187f5a:	3708      	adds	r7, #8
34187f5c:	46bd      	mov	sp, r7
34187f5e:	bd80      	pop	{r7, pc}
34187f60:	58002000 	.word	0x58002000
34187f64:	48002000 	.word	0x48002000
34187f68:	341a4eec 	.word	0x341a4eec

34187f6c <HAL_DCMIPP_GetState>:
  * @brief  Return the DCMIPP state
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL state
  */
HAL_DCMIPP_StateTypeDef HAL_DCMIPP_GetState(const DCMIPP_HandleTypeDef *hdcmipp)
{
34187f6c:	b480      	push	{r7}
34187f6e:	b083      	sub	sp, #12
34187f70:	af00      	add	r7, sp, #0
34187f72:	6078      	str	r0, [r7, #4]
  return hdcmipp->State;
34187f74:	687b      	ldr	r3, [r7, #4]
34187f76:	791b      	ldrb	r3, [r3, #4]
34187f78:	b2db      	uxtb	r3, r3
}
34187f7a:	4618      	mov	r0, r3
34187f7c:	370c      	adds	r7, #12
34187f7e:	46bd      	mov	sp, r7
34187f80:	f85d 7b04 	ldr.w	r7, [sp], #4
34187f84:	4770      	bx	lr

34187f86 <Pipe_Config>:
  * @param  pPipeConfig pointer to the DCMIPP_PipeConfTypeDef structure that contains
  *                     the configuration information for the pipe.
  * @retval None
  */
static void Pipe_Config(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
34187f86:	b480      	push	{r7}
34187f88:	b085      	sub	sp, #20
34187f8a:	af00      	add	r7, sp, #0
34187f8c:	60f8      	str	r0, [r7, #12]
34187f8e:	60b9      	str	r1, [r7, #8]
34187f90:	607a      	str	r2, [r7, #4]
  if (Pipe == DCMIPP_PIPE0)
34187f92:	68bb      	ldr	r3, [r7, #8]
34187f94:	2b00      	cmp	r3, #0
34187f96:	d10d      	bne.n	34187fb4 <Pipe_Config+0x2e>
  {
    /* Configure Pipe0 */
    /* Configure Frame Rate */
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
34187f98:	68fb      	ldr	r3, [r7, #12]
34187f9a:	681b      	ldr	r3, [r3, #0]
34187f9c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34187fa0:	f023 0103 	bic.w	r1, r3, #3
34187fa4:	687b      	ldr	r3, [r7, #4]
34187fa6:	681a      	ldr	r2, [r3, #0]
34187fa8:	68fb      	ldr	r3, [r7, #12]
34187faa:	681b      	ldr	r3, [r3, #0]
34187fac:	430a      	orrs	r2, r1
34187fae:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Configure Pixel Pipe Pitch */
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
               pPipeConfig->PixelPipePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
  }
}
34187fb2:	e081      	b.n	341880b8 <Pipe_Config+0x132>
  else if (Pipe == DCMIPP_PIPE1)
34187fb4:	68bb      	ldr	r3, [r7, #8]
34187fb6:	2b01      	cmp	r3, #1
34187fb8:	d155      	bne.n	34188066 <Pipe_Config+0xe0>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
34187fba:	68fb      	ldr	r3, [r7, #12]
34187fbc:	681b      	ldr	r3, [r3, #0]
34187fbe:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34187fc2:	f023 0103 	bic.w	r1, r3, #3
34187fc6:	687b      	ldr	r3, [r7, #4]
34187fc8:	681a      	ldr	r2, [r3, #0]
34187fca:	68fb      	ldr	r3, [r7, #12]
34187fcc:	681b      	ldr	r3, [r3, #0]
34187fce:	430a      	orrs	r2, r1
34187fd0:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34187fd4:	68fb      	ldr	r3, [r7, #12]
34187fd6:	681b      	ldr	r3, [r3, #0]
34187fd8:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
34187fdc:	f023 010f 	bic.w	r1, r3, #15
34187fe0:	687b      	ldr	r3, [r7, #4]
34187fe2:	689a      	ldr	r2, [r3, #8]
34187fe4:	68fb      	ldr	r3, [r7, #12]
34187fe6:	681b      	ldr	r3, [r3, #0]
34187fe8:	430a      	orrs	r2, r1
34187fea:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
34187fee:	68fb      	ldr	r3, [r7, #12]
34187ff0:	681b      	ldr	r3, [r3, #0]
34187ff2:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	@ 0x9cc
34187ff6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34187ffa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34187ffe:	687a      	ldr	r2, [r7, #4]
34188000:	6851      	ldr	r1, [r2, #4]
34188002:	68fa      	ldr	r2, [r7, #12]
34188004:	6812      	ldr	r2, [r2, #0]
34188006:	430b      	orrs	r3, r1
34188008:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
3418800c:	687b      	ldr	r3, [r7, #4]
3418800e:	689b      	ldr	r3, [r3, #8]
34188010:	2b07      	cmp	r3, #7
34188012:	d003      	beq.n	3418801c <Pipe_Config+0x96>
        (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_2))
34188014:	687b      	ldr	r3, [r7, #4]
34188016:	689b      	ldr	r3, [r3, #8]
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
34188018:	2b08      	cmp	r3, #8
3418801a:	d10f      	bne.n	3418803c <Pipe_Config+0xb6>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3418801c:	68fb      	ldr	r3, [r7, #12]
3418801e:	681b      	ldr	r3, [r3, #0]
34188020:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
34188024:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34188028:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418802c:	687a      	ldr	r2, [r7, #4]
3418802e:	6851      	ldr	r1, [r2, #4]
34188030:	68fa      	ldr	r2, [r7, #12]
34188032:	6812      	ldr	r2, [r2, #0]
34188034:	430b      	orrs	r3, r1
34188036:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
3418803a:	e03d      	b.n	341880b8 <Pipe_Config+0x132>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
3418803c:	687b      	ldr	r3, [r7, #4]
3418803e:	689b      	ldr	r3, [r3, #8]
34188040:	2b09      	cmp	r3, #9
34188042:	d139      	bne.n	341880b8 <Pipe_Config+0x132>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34188044:	68fb      	ldr	r3, [r7, #12]
34188046:	681b      	ldr	r3, [r3, #0]
34188048:	f8d3 39dc 	ldr.w	r3, [r3, #2524]	@ 0x9dc
3418804c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
34188050:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34188054:	687a      	ldr	r2, [r7, #4]
34188056:	6852      	ldr	r2, [r2, #4]
34188058:	0851      	lsrs	r1, r2, #1
3418805a:	68fa      	ldr	r2, [r7, #12]
3418805c:	6812      	ldr	r2, [r2, #0]
3418805e:	430b      	orrs	r3, r1
34188060:	f8c2 39dc 	str.w	r3, [r2, #2524]	@ 0x9dc
}
34188064:	e028      	b.n	341880b8 <Pipe_Config+0x132>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
34188066:	68fb      	ldr	r3, [r7, #12]
34188068:	681b      	ldr	r3, [r3, #0]
3418806a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
3418806e:	f023 0103 	bic.w	r1, r3, #3
34188072:	687b      	ldr	r3, [r7, #4]
34188074:	681a      	ldr	r2, [r3, #0]
34188076:	68fb      	ldr	r3, [r7, #12]
34188078:	681b      	ldr	r3, [r3, #0]
3418807a:	430a      	orrs	r2, r1
3418807c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34188080:	68fb      	ldr	r3, [r7, #12]
34188082:	681b      	ldr	r3, [r3, #0]
34188084:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	@ 0xdc0
34188088:	f023 010f 	bic.w	r1, r3, #15
3418808c:	687b      	ldr	r3, [r7, #4]
3418808e:	689a      	ldr	r2, [r3, #8]
34188090:	68fb      	ldr	r3, [r7, #12]
34188092:	681b      	ldr	r3, [r3, #0]
34188094:	430a      	orrs	r2, r1
34188096:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
3418809a:	68fb      	ldr	r3, [r7, #12]
3418809c:	681b      	ldr	r3, [r3, #0]
3418809e:	f8d3 3dcc 	ldr.w	r3, [r3, #3532]	@ 0xdcc
341880a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
341880a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
341880aa:	687a      	ldr	r2, [r7, #4]
341880ac:	6851      	ldr	r1, [r2, #4]
341880ae:	68fa      	ldr	r2, [r7, #12]
341880b0:	6812      	ldr	r2, [r2, #0]
341880b2:	430b      	orrs	r3, r1
341880b4:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
}
341880b8:	bf00      	nop
341880ba:	3714      	adds	r7, #20
341880bc:	46bd      	mov	sp, r7
341880be:	f85d 7b04 	ldr.w	r7, [sp], #4
341880c2:	4770      	bx	lr

341880c4 <DCMIPP_CSI_WritePHYReg>:
  * @param  reg_lsb specifies the testcode LSB in testdin
  * @param  val     specifies the page offset in testdin
  * @retval None
  */
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
{
341880c4:	b480      	push	{r7}
341880c6:	b085      	sub	sp, #20
341880c8:	af00      	add	r7, sp, #0
341880ca:	60f8      	str	r0, [r7, #12]
341880cc:	60b9      	str	r1, [r7, #8]
341880ce:	607a      	str	r2, [r7, #4]
341880d0:	603b      	str	r3, [r7, #0]
  /* Based on sequence described at section 5.2.3.2 of DesignWave document */
  /* For writing the 4-bit testcode MSBs */
  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
341880d2:	68fb      	ldr	r3, [r7, #12]
341880d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341880d8:	695b      	ldr	r3, [r3, #20]
341880da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341880de:	68fa      	ldr	r2, [r7, #12]
341880e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341880e4:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
341880e6:	68fb      	ldr	r3, [r7, #12]
341880e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341880ec:	691b      	ldr	r3, [r3, #16]
341880ee:	f043 0301 	orr.w	r3, r3, #1
341880f2:	68fa      	ldr	r2, [r7, #12]
341880f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341880f8:	6113      	str	r3, [r2, #16]

  /* Place 0x00 in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
341880fa:	68fb      	ldr	r3, [r7, #12]
341880fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188100:	695b      	ldr	r3, [r3, #20]
34188102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34188106:	68fa      	ldr	r2, [r7, #12]
34188108:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418810c:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
3418810e:	68fb      	ldr	r3, [r7, #12]
34188110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188114:	461a      	mov	r2, r3
34188116:	2300      	movs	r3, #0
34188118:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
3418811a:	68fb      	ldr	r3, [r7, #12]
3418811c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188120:	461a      	mov	r2, r3
34188122:	2300      	movs	r3, #0
34188124:	6153      	str	r3, [r2, #20]

  /* Place the 8-bit word corresponding to the testcode MSBs in testdin */
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
34188126:	68fb      	ldr	r3, [r7, #12]
34188128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418812c:	695a      	ldr	r2, [r3, #20]
3418812e:	68bb      	ldr	r3, [r7, #8]
34188130:	b2db      	uxtb	r3, r3
34188132:	4313      	orrs	r3, r2
34188134:	68fa      	ldr	r2, [r7, #12]
34188136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418813a:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3418813c:	68fb      	ldr	r3, [r7, #12]
3418813e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188142:	691b      	ldr	r3, [r3, #16]
34188144:	f043 0301 	orr.w	r3, r3, #1
34188148:	68fa      	ldr	r2, [r7, #12]
3418814a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418814e:	6113      	str	r3, [r2, #16]

  /* For writing the 8-bit testcode LSBs */
  /* Set testclk to low */
  CLEAR_REG(hcsi->PTCR0);
34188150:	68fb      	ldr	r3, [r7, #12]
34188152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188156:	461a      	mov	r2, r3
34188158:	2300      	movs	r3, #0
3418815a:	6113      	str	r3, [r2, #16]

  /* Set testen to high */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3418815c:	68fb      	ldr	r3, [r7, #12]
3418815e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188162:	695b      	ldr	r3, [r3, #20]
34188164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34188168:	68fa      	ldr	r2, [r7, #12]
3418816a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418816e:	6153      	str	r3, [r2, #20]

  /* Set testclk to high */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34188170:	68fb      	ldr	r3, [r7, #12]
34188172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34188176:	691b      	ldr	r3, [r3, #16]
34188178:	f043 0301 	orr.w	r3, r3, #1
3418817c:	68fa      	ldr	r2, [r7, #12]
3418817e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34188182:	6113      	str	r3, [r2, #16]

  /* Place the 8-bit word test data in testdin */
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
34188184:	68fb      	ldr	r3, [r7, #12]
34188186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418818a:	695a      	ldr	r2, [r3, #20]
3418818c:	687b      	ldr	r3, [r7, #4]
3418818e:	b2db      	uxtb	r3, r3
34188190:	4313      	orrs	r3, r2
34188192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34188196:	68fa      	ldr	r2, [r7, #12]
34188198:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418819c:	6153      	str	r3, [r2, #20]

  /* Set testclk to low (with the falling edge on testclk, the testdin signal content is latched internally) */
  CLEAR_REG(hcsi->PTCR0);
3418819e:	68fb      	ldr	r3, [r7, #12]
341881a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881a4:	461a      	mov	r2, r3
341881a6:	2300      	movs	r3, #0
341881a8:	6113      	str	r3, [r2, #16]

  /* Set testen to low */
  CLEAR_REG(hcsi->PTCR1);
341881aa:	68fb      	ldr	r3, [r7, #12]
341881ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881b0:	461a      	mov	r2, r3
341881b2:	2300      	movs	r3, #0
341881b4:	6153      	str	r3, [r2, #20]

  /* For writing the data */
  /* Place the 8-bit word corresponding to the page offset in testdin */
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
341881b6:	68fb      	ldr	r3, [r7, #12]
341881b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881bc:	695a      	ldr	r2, [r3, #20]
341881be:	683b      	ldr	r3, [r7, #0]
341881c0:	b2db      	uxtb	r3, r3
341881c2:	4313      	orrs	r3, r2
341881c4:	68fa      	ldr	r2, [r7, #12]
341881c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341881ca:	6153      	str	r3, [r2, #20]

  /* Set testclk to high (test data is programmed internally */
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
341881cc:	68fb      	ldr	r3, [r7, #12]
341881ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881d2:	691b      	ldr	r3, [r3, #16]
341881d4:	f043 0301 	orr.w	r3, r3, #1
341881d8:	68fa      	ldr	r2, [r7, #12]
341881da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341881de:	6113      	str	r3, [r2, #16]

  /* Finish by setting testclk to low */
  CLEAR_REG(hcsi->PTCR0);
341881e0:	68fb      	ldr	r3, [r7, #12]
341881e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341881e6:	461a      	mov	r2, r3
341881e8:	2300      	movs	r3, #0
341881ea:	6113      	str	r3, [r2, #16]
}
341881ec:	bf00      	nop
341881ee:	3714      	adds	r7, #20
341881f0:	46bd      	mov	sp, r7
341881f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341881f6:	4770      	bx	lr

341881f8 <DCMIPP_SetConfig>:
  * @param  DstAddress  Specifies the destination memory address for the captured data.
  * @param  CaptureMode Specifies the capture mode to be set for the pipe.
  * @retval None
  */
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
{
341881f8:	b480      	push	{r7}
341881fa:	b085      	sub	sp, #20
341881fc:	af00      	add	r7, sp, #0
341881fe:	60f8      	str	r0, [r7, #12]
34188200:	60b9      	str	r1, [r7, #8]
34188202:	607a      	str	r2, [r7, #4]
34188204:	603b      	str	r3, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
34188206:	68bb      	ldr	r3, [r7, #8]
34188208:	2b00      	cmp	r3, #0
3418820a:	d121      	bne.n	34188250 <DCMIPP_SetConfig+0x58>
  {
    /* Update the DCMIPP pipe State */
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3418820c:	68fa      	ldr	r2, [r7, #12]
3418820e:	68bb      	ldr	r3, [r7, #8]
34188210:	4413      	add	r3, r2
34188212:	3305      	adds	r3, #5
34188214:	2202      	movs	r2, #2
34188216:	701a      	strb	r2, [r3, #0]

    /* Set the capture mode */
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
34188218:	68fb      	ldr	r3, [r7, #12]
3418821a:	681b      	ldr	r3, [r3, #0]
3418821c:	f8d3 1500 	ldr.w	r1, [r3, #1280]	@ 0x500
34188220:	68fb      	ldr	r3, [r7, #12]
34188222:	681b      	ldr	r3, [r3, #0]
34188224:	683a      	ldr	r2, [r7, #0]
34188226:	430a      	orrs	r2, r1
34188228:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Set the destination address */
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
3418822c:	68fb      	ldr	r3, [r7, #12]
3418822e:	681b      	ldr	r3, [r3, #0]
34188230:	687a      	ldr	r2, [r7, #4]
34188232:	f8c3 25c4 	str.w	r2, [r3, #1476]	@ 0x5c4

    /* Enable all required interrupts lines for the PIPE0 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
34188236:	68fb      	ldr	r3, [r7, #12]
34188238:	681b      	ldr	r3, [r3, #0]
3418823a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3418823e:	68fa      	ldr	r2, [r7, #12]
34188240:	6812      	ldr	r2, [r2, #0]
34188242:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
34188246:	f043 0320 	orr.w	r3, r3, #32
3418824a:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0

    /* Enable all required interrupts lines for the PIPE2 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
                           DCMIPP_IT_AXI_TRANSFER_ERROR);
  }
}
3418824e:	e045      	b.n	341882dc <DCMIPP_SetConfig+0xe4>
  else if (Pipe == DCMIPP_PIPE1)
34188250:	68bb      	ldr	r3, [r7, #8]
34188252:	2b01      	cmp	r3, #1
34188254:	d121      	bne.n	3418829a <DCMIPP_SetConfig+0xa2>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34188256:	68fa      	ldr	r2, [r7, #12]
34188258:	68bb      	ldr	r3, [r7, #8]
3418825a:	4413      	add	r3, r2
3418825c:	3305      	adds	r3, #5
3418825e:	2202      	movs	r2, #2
34188260:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
34188262:	68fb      	ldr	r3, [r7, #12]
34188264:	681b      	ldr	r3, [r3, #0]
34188266:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
3418826a:	68fb      	ldr	r3, [r7, #12]
3418826c:	681b      	ldr	r3, [r3, #0]
3418826e:	683a      	ldr	r2, [r7, #0]
34188270:	430a      	orrs	r2, r1
34188272:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34188276:	68fb      	ldr	r3, [r7, #12]
34188278:	681b      	ldr	r3, [r3, #0]
3418827a:	687a      	ldr	r2, [r7, #4]
3418827c:	f8c3 29c4 	str.w	r2, [r3, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
34188280:	68fb      	ldr	r3, [r7, #12]
34188282:	681b      	ldr	r3, [r3, #0]
34188284:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
34188288:	68fa      	ldr	r2, [r7, #12]
3418828a:	6812      	ldr	r2, [r2, #0]
3418828c:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
34188290:	f043 0320 	orr.w	r3, r3, #32
34188294:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
34188298:	e020      	b.n	341882dc <DCMIPP_SetConfig+0xe4>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3418829a:	68fa      	ldr	r2, [r7, #12]
3418829c:	68bb      	ldr	r3, [r7, #8]
3418829e:	4413      	add	r3, r2
341882a0:	3305      	adds	r3, #5
341882a2:	2202      	movs	r2, #2
341882a4:	701a      	strb	r2, [r3, #0]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
341882a6:	68fb      	ldr	r3, [r7, #12]
341882a8:	681b      	ldr	r3, [r3, #0]
341882aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
341882ae:	68fb      	ldr	r3, [r7, #12]
341882b0:	681b      	ldr	r3, [r3, #0]
341882b2:	683a      	ldr	r2, [r7, #0]
341882b4:	430a      	orrs	r2, r1
341882b6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
341882ba:	68fb      	ldr	r3, [r7, #12]
341882bc:	681b      	ldr	r3, [r3, #0]
341882be:	687a      	ldr	r2, [r7, #4]
341882c0:	f8c3 2dc4 	str.w	r2, [r3, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
341882c4:	68fb      	ldr	r3, [r7, #12]
341882c6:	681b      	ldr	r3, [r3, #0]
341882c8:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
341882cc:	68fa      	ldr	r2, [r7, #12]
341882ce:	6812      	ldr	r2, [r2, #0]
341882d0:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
341882d4:	f043 0320 	orr.w	r3, r3, #32
341882d8:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
}
341882dc:	bf00      	nop
341882de:	3714      	adds	r7, #20
341882e0:	46bd      	mov	sp, r7
341882e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341882e6:	4770      	bx	lr

341882e8 <DCMIPP_EnableCapture>:
  * @param  hdcmipp     Pointer to DCMIPP handle
  * @param  Pipe        Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
static void DCMIPP_EnableCapture(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
341882e8:	b480      	push	{r7}
341882ea:	b083      	sub	sp, #12
341882ec:	af00      	add	r7, sp, #0
341882ee:	6078      	str	r0, [r7, #4]
341882f0:	6039      	str	r1, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
341882f2:	683b      	ldr	r3, [r7, #0]
341882f4:	2b00      	cmp	r3, #0
341882f6:	d114      	bne.n	34188322 <DCMIPP_EnableCapture+0x3a>
  {
    /* Activate the Pipe */
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
341882f8:	687b      	ldr	r3, [r7, #4]
341882fa:	681b      	ldr	r3, [r3, #0]
341882fc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34188300:	687b      	ldr	r3, [r7, #4]
34188302:	681b      	ldr	r3, [r3, #0]
34188304:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34188308:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
3418830c:	687b      	ldr	r3, [r7, #4]
3418830e:	681b      	ldr	r3, [r3, #0]
34188310:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34188314:	687b      	ldr	r3, [r7, #4]
34188316:	681b      	ldr	r3, [r3, #0]
34188318:	f042 0208 	orr.w	r2, r2, #8
3418831c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
  }
}
34188320:	e031      	b.n	34188386 <DCMIPP_EnableCapture+0x9e>
  else if (Pipe == DCMIPP_PIPE1)
34188322:	683b      	ldr	r3, [r7, #0]
34188324:	2b01      	cmp	r3, #1
34188326:	d11a      	bne.n	3418835e <DCMIPP_EnableCapture+0x76>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34188328:	687a      	ldr	r2, [r7, #4]
3418832a:	683b      	ldr	r3, [r7, #0]
3418832c:	4413      	add	r3, r2
3418832e:	3305      	adds	r3, #5
34188330:	2202      	movs	r2, #2
34188332:	701a      	strb	r2, [r3, #0]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
34188334:	687b      	ldr	r3, [r7, #4]
34188336:	681b      	ldr	r3, [r3, #0]
34188338:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
3418833c:	687b      	ldr	r3, [r7, #4]
3418833e:	681b      	ldr	r3, [r3, #0]
34188340:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34188344:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
34188348:	687b      	ldr	r3, [r7, #4]
3418834a:	681b      	ldr	r3, [r3, #0]
3418834c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
34188350:	687b      	ldr	r3, [r7, #4]
34188352:	681b      	ldr	r3, [r3, #0]
34188354:	f042 0208 	orr.w	r2, r2, #8
34188358:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
3418835c:	e013      	b.n	34188386 <DCMIPP_EnableCapture+0x9e>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
3418835e:	687b      	ldr	r3, [r7, #4]
34188360:	681b      	ldr	r3, [r3, #0]
34188362:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
34188366:	687b      	ldr	r3, [r7, #4]
34188368:	681b      	ldr	r3, [r3, #0]
3418836a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3418836e:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
34188372:	687b      	ldr	r3, [r7, #4]
34188374:	681b      	ldr	r3, [r3, #0]
34188376:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3418837a:	687b      	ldr	r3, [r7, #4]
3418837c:	681b      	ldr	r3, [r3, #0]
3418837e:	f042 0208 	orr.w	r2, r2, #8
34188382:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
34188386:	bf00      	nop
34188388:	370c      	adds	r7, #12
3418838a:	46bd      	mov	sp, r7
3418838c:	f85d 7b04 	ldr.w	r7, [sp], #4
34188390:	4770      	bx	lr

34188392 <DCMIPP_Stop>:
  * @param  hdcmipp     Pointer to DCMIPP handle
  * @param  Pipe        Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval HAL status
  */
static HAL_StatusTypeDef DCMIPP_Stop(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34188392:	b580      	push	{r7, lr}
34188394:	b084      	sub	sp, #16
34188396:	af00      	add	r7, sp, #0
34188398:	6078      	str	r0, [r7, #4]
3418839a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  if (Pipe == DCMIPP_PIPE0)
3418839c:	683b      	ldr	r3, [r7, #0]
3418839e:	2b00      	cmp	r3, #0
341883a0:	d146      	bne.n	34188430 <DCMIPP_Stop+0x9e>
  {
    /* Stop the capture */
    CLEAR_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
341883a2:	687b      	ldr	r3, [r7, #4]
341883a4:	681b      	ldr	r3, [r3, #0]
341883a6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
341883aa:	687b      	ldr	r3, [r7, #4]
341883ac:	681b      	ldr	r3, [r3, #0]
341883ae:	f022 0208 	bic.w	r2, r2, #8
341883b2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Poll CPTACT status till No capture currently active */
    tickstart = HAL_GetTick();
341883b6:	f7fc f8c3 	bl	34184540 <HAL_GetTick>
341883ba:	60f8      	str	r0, [r7, #12]
    do
    {
      if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
341883bc:	f7fc f8c0 	bl	34184540 <HAL_GetTick>
341883c0:	4602      	mov	r2, r0
341883c2:	68fb      	ldr	r3, [r7, #12]
341883c4:	1ad3      	subs	r3, r2, r3
341883c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
341883ca:	d901      	bls.n	341883d0 <DCMIPP_Stop+0x3e>
      {
        return HAL_ERROR;
341883cc:	2301      	movs	r3, #1
341883ce:	e0be      	b.n	3418854e <DCMIPP_Stop+0x1bc>
      }
    } while ((hdcmipp->Instance->CMSR1 & DCMIPP_CMSR1_P0CPTACT) != 0U);
341883d0:	687b      	ldr	r3, [r7, #4]
341883d2:	681b      	ldr	r3, [r3, #0]
341883d4:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
341883d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341883dc:	2b00      	cmp	r3, #0
341883de:	d1ed      	bne.n	341883bc <DCMIPP_Stop+0x2a>

    /* Disable DBM when enabled */
    if ((hdcmipp->Instance->P0PPCR & DCMIPP_P0PPCR_DBM) == DCMIPP_P0PPCR_DBM)
341883e0:	687b      	ldr	r3, [r7, #4]
341883e2:	681b      	ldr	r3, [r3, #0]
341883e4:	f8d3 35c0 	ldr.w	r3, [r3, #1472]	@ 0x5c0
341883e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341883ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
341883f0:	d109      	bne.n	34188406 <DCMIPP_Stop+0x74>
    {
      CLEAR_BIT(hdcmipp->Instance->P0PPCR, DCMIPP_P0PPCR_DBM);
341883f2:	687b      	ldr	r3, [r7, #4]
341883f4:	681b      	ldr	r3, [r3, #0]
341883f6:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	@ 0x5c0
341883fa:	687b      	ldr	r3, [r7, #4]
341883fc:	681b      	ldr	r3, [r3, #0]
341883fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34188402:	f8c3 25c0 	str.w	r2, [r3, #1472]	@ 0x5c0
    }

    /* Disable the pipe */
    CLEAR_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
34188406:	687b      	ldr	r3, [r7, #4]
34188408:	681b      	ldr	r3, [r3, #0]
3418840a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3418840e:	687b      	ldr	r3, [r7, #4]
34188410:	681b      	ldr	r3, [r3, #0]
34188412:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34188416:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    /* Disable all interrupts for this pipe */
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_LINE | \
3418841a:	687b      	ldr	r3, [r7, #4]
3418841c:	681b      	ldr	r3, [r3, #0]
3418841e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34188422:	687b      	ldr	r3, [r7, #4]
34188424:	681b      	ldr	r3, [r3, #0]
34188426:	f422 4247 	bic.w	r2, r2, #50944	@ 0xc700
3418842a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
3418842e:	e08d      	b.n	3418854c <DCMIPP_Stop+0x1ba>
                            DCMIPP_IT_PIPE0_LIMIT | DCMIPP_IT_PIPE0_OVR);

  }
  else if (Pipe == DCMIPP_PIPE1)
34188430:	683b      	ldr	r3, [r7, #0]
34188432:	2b01      	cmp	r3, #1
34188434:	d146      	bne.n	341884c4 <DCMIPP_Stop+0x132>
  {
    /* Stop the capture */
    CLEAR_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
34188436:	687b      	ldr	r3, [r7, #4]
34188438:	681b      	ldr	r3, [r3, #0]
3418843a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3418843e:	687b      	ldr	r3, [r7, #4]
34188440:	681b      	ldr	r3, [r3, #0]
34188442:	f022 0208 	bic.w	r2, r2, #8
34188446:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900

    /* Poll CPTACT status till No capture currently active */
    tickstart = HAL_GetTick();
3418844a:	f7fc f879 	bl	34184540 <HAL_GetTick>
3418844e:	60f8      	str	r0, [r7, #12]
    do
    {
      if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
34188450:	f7fc f876 	bl	34184540 <HAL_GetTick>
34188454:	4602      	mov	r2, r0
34188456:	68fb      	ldr	r3, [r7, #12]
34188458:	1ad3      	subs	r3, r2, r3
3418845a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3418845e:	d901      	bls.n	34188464 <DCMIPP_Stop+0xd2>
      {
        return HAL_ERROR;
34188460:	2301      	movs	r3, #1
34188462:	e074      	b.n	3418854e <DCMIPP_Stop+0x1bc>
      }
    } while ((hdcmipp->Instance->CMSR1 & DCMIPP_CMSR1_P1CPTACT) != 0U);
34188464:	687b      	ldr	r3, [r7, #4]
34188466:	681b      	ldr	r3, [r3, #0]
34188468:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
3418846c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34188470:	2b00      	cmp	r3, #0
34188472:	d1ed      	bne.n	34188450 <DCMIPP_Stop+0xbe>

    /* Disable DBM when enabled */
    if ((hdcmipp->Instance->P1PPCR & DCMIPP_P1PPCR_DBM) == DCMIPP_P1PPCR_DBM)
34188474:	687b      	ldr	r3, [r7, #4]
34188476:	681b      	ldr	r3, [r3, #0]
34188478:	f8d3 39c0 	ldr.w	r3, [r3, #2496]	@ 0x9c0
3418847c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34188480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188484:	d109      	bne.n	3418849a <DCMIPP_Stop+0x108>
    {
      CLEAR_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_DBM);
34188486:	687b      	ldr	r3, [r7, #4]
34188488:	681b      	ldr	r3, [r3, #0]
3418848a:	f8d3 29c0 	ldr.w	r2, [r3, #2496]	@ 0x9c0
3418848e:	687b      	ldr	r3, [r7, #4]
34188490:	681b      	ldr	r3, [r3, #0]
34188492:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34188496:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    }

    /* Disable the pipe */
    CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
3418849a:	687b      	ldr	r3, [r7, #4]
3418849c:	681b      	ldr	r3, [r3, #0]
3418849e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
341884a2:	687b      	ldr	r3, [r7, #4]
341884a4:	681b      	ldr	r3, [r3, #0]
341884a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
341884aa:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

    /* Disable all interrupts for this pipe */
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_LINE | \
341884ae:	687b      	ldr	r3, [r7, #4]
341884b0:	681b      	ldr	r3, [r3, #0]
341884b2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
341884b6:	687b      	ldr	r3, [r7, #4]
341884b8:	681b      	ldr	r3, [r3, #0]
341884ba:	f422 0207 	bic.w	r2, r2, #8847360	@ 0x870000
341884be:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
341884c2:	e043      	b.n	3418854c <DCMIPP_Stop+0x1ba>

  }
  else
  {
    /* Stop the capture */
    CLEAR_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
341884c4:	687b      	ldr	r3, [r7, #4]
341884c6:	681b      	ldr	r3, [r3, #0]
341884c8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
341884cc:	687b      	ldr	r3, [r7, #4]
341884ce:	681b      	ldr	r3, [r3, #0]
341884d0:	f022 0208 	bic.w	r2, r2, #8
341884d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Poll CPTACT status till No capture currently active */
    tickstart = HAL_GetTick();
341884d8:	f7fc f832 	bl	34184540 <HAL_GetTick>
341884dc:	60f8      	str	r0, [r7, #12]
    do
    {
      if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
341884de:	f7fc f82f 	bl	34184540 <HAL_GetTick>
341884e2:	4602      	mov	r2, r0
341884e4:	68fb      	ldr	r3, [r7, #12]
341884e6:	1ad3      	subs	r3, r2, r3
341884e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
341884ec:	d901      	bls.n	341884f2 <DCMIPP_Stop+0x160>
      {
        return HAL_ERROR;
341884ee:	2301      	movs	r3, #1
341884f0:	e02d      	b.n	3418854e <DCMIPP_Stop+0x1bc>
      }
    } while ((hdcmipp->Instance->CMSR1 & DCMIPP_CMSR1_P2CPTACT) != 0U);
341884f2:	687b      	ldr	r3, [r7, #4]
341884f4:	681b      	ldr	r3, [r3, #0]
341884f6:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
341884fa:	2b00      	cmp	r3, #0
341884fc:	dbef      	blt.n	341884de <DCMIPP_Stop+0x14c>

    /* Disable the pipe */
    CLEAR_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
341884fe:	687b      	ldr	r3, [r7, #4]
34188500:	681b      	ldr	r3, [r3, #0]
34188502:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
34188506:	687b      	ldr	r3, [r7, #4]
34188508:	681b      	ldr	r3, [r3, #0]
3418850a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3418850e:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

    /* Disable DBM when enabled */
    if ((hdcmipp->Instance->P2PPCR & DCMIPP_P2PPCR_DBM) == DCMIPP_P2PPCR_DBM)
34188512:	687b      	ldr	r3, [r7, #4]
34188514:	681b      	ldr	r3, [r3, #0]
34188516:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	@ 0xdc0
3418851a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418851e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188522:	d109      	bne.n	34188538 <DCMIPP_Stop+0x1a6>
    {
      CLEAR_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_DBM);
34188524:	687b      	ldr	r3, [r7, #4]
34188526:	681b      	ldr	r3, [r3, #0]
34188528:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	@ 0xdc0
3418852c:	687b      	ldr	r3, [r7, #4]
3418852e:	681b      	ldr	r3, [r3, #0]
34188530:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34188534:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    }

    /* Disable all interrupts for this pipe */
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_LINE | \
34188538:	687b      	ldr	r3, [r7, #4]
3418853a:	681b      	ldr	r3, [r3, #0]
3418853c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34188540:	687b      	ldr	r3, [r7, #4]
34188542:	681b      	ldr	r3, [r3, #0]
34188544:	f022 4207 	bic.w	r2, r2, #2264924160	@ 0x87000000
34188548:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
                            DCMIPP_IT_PIPE2_OVR);

  }

  return HAL_OK;
3418854c:	2300      	movs	r3, #0
}
3418854e:	4618      	mov	r0, r3
34188550:	3710      	adds	r7, #16
34188552:	46bd      	mov	sp, r7
34188554:	bd80      	pop	{r7, pc}
	...

34188558 <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
34188558:	b580      	push	{r7, lr}
3418855a:	b086      	sub	sp, #24
3418855c:	af00      	add	r7, sp, #0
3418855e:	60f8      	str	r0, [r7, #12]
34188560:	60b9      	str	r1, [r7, #8]
34188562:	607a      	str	r2, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34188564:	4b48      	ldr	r3, [pc, #288]	@ (34188688 <DCMIPP_CSI_SetVCConfig+0x130>)
34188566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
34188568:	68bb      	ldr	r3, [r7, #8]
3418856a:	2b00      	cmp	r3, #0
3418856c:	d10d      	bne.n	3418858a <DCMIPP_CSI_SetVCConfig+0x32>
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3418856e:	68fb      	ldr	r3, [r7, #12]
34188570:	681b      	ldr	r3, [r3, #0]
34188572:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
34188576:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
3418857a:	687b      	ldr	r3, [r7, #4]
3418857c:	04da      	lsls	r2, r3, #19
3418857e:	68fb      	ldr	r3, [r7, #12]
34188580:	681b      	ldr	r3, [r3, #0]
34188582:	430a      	orrs	r2, r1
34188584:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
34188588:	e026      	b.n	341885d8 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else if (Pipe == DCMIPP_PIPE1)
3418858a:	68bb      	ldr	r3, [r7, #8]
3418858c:	2b01      	cmp	r3, #1
3418858e:	d10d      	bne.n	341885ac <DCMIPP_CSI_SetVCConfig+0x54>
  {
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
34188590:	68fb      	ldr	r3, [r7, #12]
34188592:	681b      	ldr	r3, [r3, #0]
34188594:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
34188598:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
3418859c:	687b      	ldr	r3, [r7, #4]
3418859e:	04da      	lsls	r2, r3, #19
341885a0:	68fb      	ldr	r3, [r7, #12]
341885a2:	681b      	ldr	r3, [r3, #0]
341885a4:	430a      	orrs	r2, r1
341885a6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
341885aa:	e015      	b.n	341885d8 <DCMIPP_CSI_SetVCConfig+0x80>
  }
  else
  {
    /* Those bit fields are meaningful when PIPEDIFF = 1: Pipe1, Pipe2 is fully independent */
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
341885ac:	68fb      	ldr	r3, [r7, #12]
341885ae:	681b      	ldr	r3, [r3, #0]
341885b0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
341885b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
341885b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341885bc:	d10c      	bne.n	341885d8 <DCMIPP_CSI_SetVCConfig+0x80>
    {
      /* Set Virtual Channel ID and DTIDA for Pipe2 */
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
341885be:	68fb      	ldr	r3, [r7, #12]
341885c0:	681b      	ldr	r3, [r3, #0]
341885c2:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
341885c6:	f423 11c0 	bic.w	r1, r3, #1572864	@ 0x180000
341885ca:	687b      	ldr	r3, [r7, #4]
341885cc:	04da      	lsls	r2, r3, #19
341885ce:	68fb      	ldr	r3, [r7, #12]
341885d0:	681b      	ldr	r3, [r3, #0]
341885d2:	430a      	orrs	r2, r1
341885d4:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
341885d8:	687b      	ldr	r3, [r7, #4]
341885da:	2b03      	cmp	r3, #3
341885dc:	d017      	beq.n	3418860e <DCMIPP_CSI_SetVCConfig+0xb6>
341885de:	687b      	ldr	r3, [r7, #4]
341885e0:	2b03      	cmp	r3, #3
341885e2:	d81b      	bhi.n	3418861c <DCMIPP_CSI_SetVCConfig+0xc4>
341885e4:	687b      	ldr	r3, [r7, #4]
341885e6:	2b01      	cmp	r3, #1
341885e8:	d003      	beq.n	341885f2 <DCMIPP_CSI_SetVCConfig+0x9a>
341885ea:	687b      	ldr	r3, [r7, #4]
341885ec:	2b02      	cmp	r3, #2
341885ee:	d007      	beq.n	34188600 <DCMIPP_CSI_SetVCConfig+0xa8>
341885f0:	e014      	b.n	3418861c <DCMIPP_CSI_SetVCConfig+0xc4>
  {
    case DCMIPP_VIRTUAL_CHANNEL1:
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
341885f2:	697b      	ldr	r3, [r7, #20]
341885f4:	681b      	ldr	r3, [r3, #0]
341885f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
341885fa:	697b      	ldr	r3, [r7, #20]
341885fc:	601a      	str	r2, [r3, #0]
      break;
341885fe:	e014      	b.n	3418862a <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL2:
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
34188600:	697b      	ldr	r3, [r7, #20]
34188602:	681b      	ldr	r3, [r3, #0]
34188604:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34188608:	697b      	ldr	r3, [r7, #20]
3418860a:	601a      	str	r2, [r3, #0]
      break;
3418860c:	e00d      	b.n	3418862a <DCMIPP_CSI_SetVCConfig+0xd2>
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
3418860e:	697b      	ldr	r3, [r7, #20]
34188610:	681b      	ldr	r3, [r3, #0]
34188612:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34188616:	697b      	ldr	r3, [r7, #20]
34188618:	601a      	str	r2, [r3, #0]
      break;
3418861a:	e006      	b.n	3418862a <DCMIPP_CSI_SetVCConfig+0xd2>
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3418861c:	697b      	ldr	r3, [r7, #20]
3418861e:	681b      	ldr	r3, [r3, #0]
34188620:	f043 0204 	orr.w	r2, r3, #4
34188624:	697b      	ldr	r3, [r7, #20]
34188626:	601a      	str	r2, [r3, #0]
      break;
34188628:	bf00      	nop
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
3418862a:	f7fb ff89 	bl	34184540 <HAL_GetTick>
3418862e:	6138      	str	r0, [r7, #16]
  do
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
34188630:	f7fb ff86 	bl	34184540 <HAL_GetTick>
34188634:	4602      	mov	r2, r0
34188636:	693b      	ldr	r3, [r7, #16]
34188638:	1ad3      	subs	r3, r2, r3
3418863a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3418863e:	d901      	bls.n	34188644 <DCMIPP_CSI_SetVCConfig+0xec>
    {
      return HAL_ERROR;
34188640:	2301      	movs	r3, #1
34188642:	e01c      	b.n	3418867e <DCMIPP_CSI_SetVCConfig+0x126>
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
34188644:	697b      	ldr	r3, [r7, #20]
34188646:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418864a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3418864e:	687b      	ldr	r3, [r7, #4]
34188650:	fa01 f303 	lsl.w	r3, r1, r3
34188654:	401a      	ands	r2, r3
34188656:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3418865a:	687b      	ldr	r3, [r7, #4]
3418865c:	fa01 f303 	lsl.w	r3, r1, r3
34188660:	429a      	cmp	r2, r3
34188662:	d1e5      	bne.n	34188630 <DCMIPP_CSI_SetVCConfig+0xd8>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
34188664:	697b      	ldr	r3, [r7, #20]
34188666:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418866a:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
3418866e:	687b      	ldr	r3, [r7, #4]
34188670:	fa01 f303 	lsl.w	r3, r1, r3
34188674:	431a      	orrs	r2, r3
34188676:	697b      	ldr	r3, [r7, #20]
34188678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
3418867c:	2300      	movs	r3, #0
}
3418867e:	4618      	mov	r0, r3
34188680:	3718      	adds	r7, #24
34188682:	46bd      	mov	sp, r7
34188684:	bd80      	pop	{r7, pc}
34188686:	bf00      	nop
34188688:	58006000 	.word	0x58006000

3418868c <DCMIPP_CSI_VCStop>:
  * @brief  Stop the specified CSI virtual channel.
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_VCStop(const DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
3418868c:	b580      	push	{r7, lr}
3418868e:	b084      	sub	sp, #16
34188690:	af00      	add	r7, sp, #0
34188692:	6078      	str	r0, [r7, #4]
34188694:	6039      	str	r1, [r7, #0]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34188696:	4b2d      	ldr	r3, [pc, #180]	@ (3418874c <DCMIPP_CSI_VCStop+0xc0>)
34188698:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  UNUSED(hdcmipp);

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
3418869a:	683b      	ldr	r3, [r7, #0]
3418869c:	2b03      	cmp	r3, #3
3418869e:	d017      	beq.n	341886d0 <DCMIPP_CSI_VCStop+0x44>
341886a0:	683b      	ldr	r3, [r7, #0]
341886a2:	2b03      	cmp	r3, #3
341886a4:	d81b      	bhi.n	341886de <DCMIPP_CSI_VCStop+0x52>
341886a6:	683b      	ldr	r3, [r7, #0]
341886a8:	2b01      	cmp	r3, #1
341886aa:	d003      	beq.n	341886b4 <DCMIPP_CSI_VCStop+0x28>
341886ac:	683b      	ldr	r3, [r7, #0]
341886ae:	2b02      	cmp	r3, #2
341886b0:	d007      	beq.n	341886c2 <DCMIPP_CSI_VCStop+0x36>
341886b2:	e014      	b.n	341886de <DCMIPP_CSI_VCStop+0x52>
  {
    case DCMIPP_VIRTUAL_CHANNEL1:
      SET_BIT(csi_instance->CR, CSI_CR_VC1STOP);
341886b4:	68fb      	ldr	r3, [r7, #12]
341886b6:	681b      	ldr	r3, [r3, #0]
341886b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
341886bc:	68fb      	ldr	r3, [r7, #12]
341886be:	601a      	str	r2, [r3, #0]
      break;
341886c0:	e014      	b.n	341886ec <DCMIPP_CSI_VCStop+0x60>
    case DCMIPP_VIRTUAL_CHANNEL2:
      SET_BIT(csi_instance->CR, CSI_CR_VC2STOP);
341886c2:	68fb      	ldr	r3, [r7, #12]
341886c4:	681b      	ldr	r3, [r3, #0]
341886c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
341886ca:	68fb      	ldr	r3, [r7, #12]
341886cc:	601a      	str	r2, [r3, #0]
      break;
341886ce:	e00d      	b.n	341886ec <DCMIPP_CSI_VCStop+0x60>
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3STOP);
341886d0:	68fb      	ldr	r3, [r7, #12]
341886d2:	681b      	ldr	r3, [r3, #0]
341886d4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
341886d8:	68fb      	ldr	r3, [r7, #12]
341886da:	601a      	str	r2, [r3, #0]
      break;
341886dc:	e006      	b.n	341886ec <DCMIPP_CSI_VCStop+0x60>
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0STOP);
341886de:	68fb      	ldr	r3, [r7, #12]
341886e0:	681b      	ldr	r3, [r3, #0]
341886e2:	f043 0208 	orr.w	r2, r3, #8
341886e6:	68fb      	ldr	r3, [r7, #12]
341886e8:	601a      	str	r2, [r3, #0]
      break;
341886ea:	bf00      	nop
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
341886ec:	f7fb ff28 	bl	34184540 <HAL_GetTick>
341886f0:	60b8      	str	r0, [r7, #8]
  do
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
341886f2:	f7fb ff25 	bl	34184540 <HAL_GetTick>
341886f6:	4602      	mov	r2, r0
341886f8:	68bb      	ldr	r3, [r7, #8]
341886fa:	1ad3      	subs	r3, r2, r3
341886fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34188700:	d901      	bls.n	34188706 <DCMIPP_CSI_VCStop+0x7a>
    {
      return HAL_ERROR;
34188702:	2301      	movs	r3, #1
34188704:	e01d      	b.n	34188742 <DCMIPP_CSI_VCStop+0xb6>
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) == (CSI_SR0_VC0STATEF << VirtualChannel));
34188706:	68fb      	ldr	r3, [r7, #12]
34188708:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418870c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
34188710:	683b      	ldr	r3, [r7, #0]
34188712:	fa01 f303 	lsl.w	r3, r1, r3
34188716:	401a      	ands	r2, r3
34188718:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3418871c:	683b      	ldr	r3, [r7, #0]
3418871e:	fa01 f303 	lsl.w	r3, r1, r3
34188722:	429a      	cmp	r2, r3
34188724:	d0e5      	beq.n	341886f2 <DCMIPP_CSI_VCStop+0x66>


  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
34188726:	68fb      	ldr	r3, [r7, #12]
34188728:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418872c:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
34188730:	683b      	ldr	r3, [r7, #0]
34188732:	fa01 f303 	lsl.w	r3, r1, r3
34188736:	43db      	mvns	r3, r3
34188738:	401a      	ands	r2, r3
3418873a:	68fb      	ldr	r3, [r7, #12]
3418873c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                              (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
34188740:	2300      	movs	r3, #0
}
34188742:	4618      	mov	r0, r3
34188744:	3710      	adds	r7, #16
34188746:	46bd      	mov	sp, r7
34188748:	bd80      	pop	{r7, pc}
3418874a:	bf00      	nop
3418874c:	58006000 	.word	0x58006000

34188750 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
34188750:	b480      	push	{r7}
34188752:	b087      	sub	sp, #28
34188754:	af00      	add	r7, sp, #0
34188756:	60f8      	str	r0, [r7, #12]
34188758:	460b      	mov	r3, r1
3418875a:	607a      	str	r2, [r7, #4]
3418875c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
3418875e:	2300      	movs	r3, #0
34188760:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
34188762:	7afb      	ldrb	r3, [r7, #11]
34188764:	2b02      	cmp	r3, #2
34188766:	d011      	beq.n	3418878c <HAL_EXTI_RegisterCallback+0x3c>
34188768:	2b02      	cmp	r3, #2
3418876a:	dc13      	bgt.n	34188794 <HAL_EXTI_RegisterCallback+0x44>
3418876c:	2b00      	cmp	r3, #0
3418876e:	d002      	beq.n	34188776 <HAL_EXTI_RegisterCallback+0x26>
34188770:	2b01      	cmp	r3, #1
34188772:	d007      	beq.n	34188784 <HAL_EXTI_RegisterCallback+0x34>
34188774:	e00e      	b.n	34188794 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
34188776:	68fb      	ldr	r3, [r7, #12]
34188778:	687a      	ldr	r2, [r7, #4]
3418877a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
3418877c:	68fb      	ldr	r3, [r7, #12]
3418877e:	687a      	ldr	r2, [r7, #4]
34188780:	609a      	str	r2, [r3, #8]
      break;
34188782:	e00a      	b.n	3418879a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
34188784:	68fb      	ldr	r3, [r7, #12]
34188786:	687a      	ldr	r2, [r7, #4]
34188788:	605a      	str	r2, [r3, #4]
      break;
3418878a:	e006      	b.n	3418879a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
3418878c:	68fb      	ldr	r3, [r7, #12]
3418878e:	687a      	ldr	r2, [r7, #4]
34188790:	609a      	str	r2, [r3, #8]
      break;
34188792:	e002      	b.n	3418879a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
34188794:	2301      	movs	r3, #1
34188796:	75fb      	strb	r3, [r7, #23]
      break;
34188798:	bf00      	nop
  }

  return status;
3418879a:	7dfb      	ldrb	r3, [r7, #23]
}
3418879c:	4618      	mov	r0, r3
3418879e:	371c      	adds	r7, #28
341887a0:	46bd      	mov	sp, r7
341887a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341887a6:	4770      	bx	lr

341887a8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
341887a8:	b580      	push	{r7, lr}
341887aa:	b082      	sub	sp, #8
341887ac:	af00      	add	r7, sp, #0
341887ae:	6078      	str	r0, [r7, #4]
341887b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
341887b2:	683a      	ldr	r2, [r7, #0]
341887b4:	4b19      	ldr	r3, [pc, #100]	@ (3418881c <HAL_EXTI_GetHandle+0x74>)
341887b6:	4013      	ands	r3, r2
341887b8:	2b00      	cmp	r3, #0
341887ba:	d11d      	bne.n	341887f8 <HAL_EXTI_GetHandle+0x50>
341887bc:	683b      	ldr	r3, [r7, #0]
341887be:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
341887c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341887c6:	d00b      	beq.n	341887e0 <HAL_EXTI_GetHandle+0x38>
341887c8:	683b      	ldr	r3, [r7, #0]
341887ca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
341887ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341887d2:	d005      	beq.n	341887e0 <HAL_EXTI_GetHandle+0x38>
341887d4:	683b      	ldr	r3, [r7, #0]
341887d6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
341887da:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
341887de:	d10b      	bne.n	341887f8 <HAL_EXTI_GetHandle+0x50>
341887e0:	683a      	ldr	r2, [r7, #0]
341887e2:	4b0f      	ldr	r3, [pc, #60]	@ (34188820 <HAL_EXTI_GetHandle+0x78>)
341887e4:	4013      	ands	r3, r2
341887e6:	4a0f      	ldr	r2, [pc, #60]	@ (34188824 <HAL_EXTI_GetHandle+0x7c>)
341887e8:	4293      	cmp	r3, r2
341887ea:	d90a      	bls.n	34188802 <HAL_EXTI_GetHandle+0x5a>
341887ec:	683a      	ldr	r2, [r7, #0]
341887ee:	4b0c      	ldr	r3, [pc, #48]	@ (34188820 <HAL_EXTI_GetHandle+0x78>)
341887f0:	4013      	ands	r3, r2
341887f2:	4a0c      	ldr	r2, [pc, #48]	@ (34188824 <HAL_EXTI_GetHandle+0x7c>)
341887f4:	4293      	cmp	r3, r2
341887f6:	d004      	beq.n	34188802 <HAL_EXTI_GetHandle+0x5a>
341887f8:	f240 11d5 	movw	r1, #469	@ 0x1d5
341887fc:	480a      	ldr	r0, [pc, #40]	@ (34188828 <HAL_EXTI_GetHandle+0x80>)
341887fe:	f7f9 fd35 	bl	3418226c <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
34188802:	687b      	ldr	r3, [r7, #4]
34188804:	2b00      	cmp	r3, #0
34188806:	d101      	bne.n	3418880c <HAL_EXTI_GetHandle+0x64>
  {
    return HAL_ERROR;
34188808:	2301      	movs	r3, #1
3418880a:	e003      	b.n	34188814 <HAL_EXTI_GetHandle+0x6c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
3418880c:	687b      	ldr	r3, [r7, #4]
3418880e:	683a      	ldr	r2, [r7, #0]
34188810:	601a      	str	r2, [r3, #0]

    return HAL_OK;
34188812:	2300      	movs	r3, #0
  }
}
34188814:	4618      	mov	r0, r3
34188816:	3708      	adds	r7, #8
34188818:	46bd      	mov	sp, r7
3418881a:	bd80      	pop	{r7, pc}
3418881c:	e8fcffe0 	.word	0xe8fcffe0
34188820:	0003001f 	.word	0x0003001f
34188824:	0002000d 	.word	0x0002000d
34188828:	341a511c 	.word	0x341a511c

3418882c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
3418882c:	b580      	push	{r7, lr}
3418882e:	b086      	sub	sp, #24
34188830:	af00      	add	r7, sp, #0
34188832:	6078      	str	r0, [r7, #4]
34188834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34188836:	2300      	movs	r3, #0
34188838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
3418883a:	687b      	ldr	r3, [r7, #4]
3418883c:	4a5b      	ldr	r2, [pc, #364]	@ (341889ac <HAL_GPIO_Init+0x180>)
3418883e:	4293      	cmp	r3, r2
34188840:	d05f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188842:	687b      	ldr	r3, [r7, #4]
34188844:	4a5a      	ldr	r2, [pc, #360]	@ (341889b0 <HAL_GPIO_Init+0x184>)
34188846:	4293      	cmp	r3, r2
34188848:	d05b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418884a:	687b      	ldr	r3, [r7, #4]
3418884c:	4a59      	ldr	r2, [pc, #356]	@ (341889b4 <HAL_GPIO_Init+0x188>)
3418884e:	4293      	cmp	r3, r2
34188850:	d057      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188852:	687b      	ldr	r3, [r7, #4]
34188854:	4a58      	ldr	r2, [pc, #352]	@ (341889b8 <HAL_GPIO_Init+0x18c>)
34188856:	4293      	cmp	r3, r2
34188858:	d053      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418885a:	687b      	ldr	r3, [r7, #4]
3418885c:	4a57      	ldr	r2, [pc, #348]	@ (341889bc <HAL_GPIO_Init+0x190>)
3418885e:	4293      	cmp	r3, r2
34188860:	d04f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188862:	687b      	ldr	r3, [r7, #4]
34188864:	4a56      	ldr	r2, [pc, #344]	@ (341889c0 <HAL_GPIO_Init+0x194>)
34188866:	4293      	cmp	r3, r2
34188868:	d04b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418886a:	687b      	ldr	r3, [r7, #4]
3418886c:	4a55      	ldr	r2, [pc, #340]	@ (341889c4 <HAL_GPIO_Init+0x198>)
3418886e:	4293      	cmp	r3, r2
34188870:	d047      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188872:	687b      	ldr	r3, [r7, #4]
34188874:	4a54      	ldr	r2, [pc, #336]	@ (341889c8 <HAL_GPIO_Init+0x19c>)
34188876:	4293      	cmp	r3, r2
34188878:	d043      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418887a:	687b      	ldr	r3, [r7, #4]
3418887c:	4a53      	ldr	r2, [pc, #332]	@ (341889cc <HAL_GPIO_Init+0x1a0>)
3418887e:	4293      	cmp	r3, r2
34188880:	d03f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188882:	687b      	ldr	r3, [r7, #4]
34188884:	4a52      	ldr	r2, [pc, #328]	@ (341889d0 <HAL_GPIO_Init+0x1a4>)
34188886:	4293      	cmp	r3, r2
34188888:	d03b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418888a:	687b      	ldr	r3, [r7, #4]
3418888c:	4a51      	ldr	r2, [pc, #324]	@ (341889d4 <HAL_GPIO_Init+0x1a8>)
3418888e:	4293      	cmp	r3, r2
34188890:	d037      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
34188892:	687b      	ldr	r3, [r7, #4]
34188894:	4a50      	ldr	r2, [pc, #320]	@ (341889d8 <HAL_GPIO_Init+0x1ac>)
34188896:	4293      	cmp	r3, r2
34188898:	d033      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
3418889a:	687b      	ldr	r3, [r7, #4]
3418889c:	4a4f      	ldr	r2, [pc, #316]	@ (341889dc <HAL_GPIO_Init+0x1b0>)
3418889e:	4293      	cmp	r3, r2
341888a0:	d02f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888a2:	687b      	ldr	r3, [r7, #4]
341888a4:	4a4e      	ldr	r2, [pc, #312]	@ (341889e0 <HAL_GPIO_Init+0x1b4>)
341888a6:	4293      	cmp	r3, r2
341888a8:	d02b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888aa:	687b      	ldr	r3, [r7, #4]
341888ac:	4a4d      	ldr	r2, [pc, #308]	@ (341889e4 <HAL_GPIO_Init+0x1b8>)
341888ae:	4293      	cmp	r3, r2
341888b0:	d027      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888b2:	687b      	ldr	r3, [r7, #4]
341888b4:	4a4c      	ldr	r2, [pc, #304]	@ (341889e8 <HAL_GPIO_Init+0x1bc>)
341888b6:	4293      	cmp	r3, r2
341888b8:	d023      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888ba:	687b      	ldr	r3, [r7, #4]
341888bc:	4a4b      	ldr	r2, [pc, #300]	@ (341889ec <HAL_GPIO_Init+0x1c0>)
341888be:	4293      	cmp	r3, r2
341888c0:	d01f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888c2:	687b      	ldr	r3, [r7, #4]
341888c4:	4a4a      	ldr	r2, [pc, #296]	@ (341889f0 <HAL_GPIO_Init+0x1c4>)
341888c6:	4293      	cmp	r3, r2
341888c8:	d01b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888ca:	687b      	ldr	r3, [r7, #4]
341888cc:	4a49      	ldr	r2, [pc, #292]	@ (341889f4 <HAL_GPIO_Init+0x1c8>)
341888ce:	4293      	cmp	r3, r2
341888d0:	d017      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888d2:	687b      	ldr	r3, [r7, #4]
341888d4:	4a48      	ldr	r2, [pc, #288]	@ (341889f8 <HAL_GPIO_Init+0x1cc>)
341888d6:	4293      	cmp	r3, r2
341888d8:	d013      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888da:	687b      	ldr	r3, [r7, #4]
341888dc:	4a47      	ldr	r2, [pc, #284]	@ (341889fc <HAL_GPIO_Init+0x1d0>)
341888de:	4293      	cmp	r3, r2
341888e0:	d00f      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888e2:	687b      	ldr	r3, [r7, #4]
341888e4:	4a46      	ldr	r2, [pc, #280]	@ (34188a00 <HAL_GPIO_Init+0x1d4>)
341888e6:	4293      	cmp	r3, r2
341888e8:	d00b      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888ea:	687b      	ldr	r3, [r7, #4]
341888ec:	4a45      	ldr	r2, [pc, #276]	@ (34188a04 <HAL_GPIO_Init+0x1d8>)
341888ee:	4293      	cmp	r3, r2
341888f0:	d007      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888f2:	687b      	ldr	r3, [r7, #4]
341888f4:	4a44      	ldr	r2, [pc, #272]	@ (34188a08 <HAL_GPIO_Init+0x1dc>)
341888f6:	4293      	cmp	r3, r2
341888f8:	d003      	beq.n	34188902 <HAL_GPIO_Init+0xd6>
341888fa:	21ad      	movs	r1, #173	@ 0xad
341888fc:	4843      	ldr	r0, [pc, #268]	@ (34188a0c <HAL_GPIO_Init+0x1e0>)
341888fe:	f7f9 fcb5 	bl	3418226c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34188902:	683b      	ldr	r3, [r7, #0]
34188904:	681b      	ldr	r3, [r3, #0]
34188906:	b29b      	uxth	r3, r3
34188908:	2b00      	cmp	r3, #0
3418890a:	d004      	beq.n	34188916 <HAL_GPIO_Init+0xea>
3418890c:	683b      	ldr	r3, [r7, #0]
3418890e:	681b      	ldr	r3, [r3, #0]
34188910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188914:	d303      	bcc.n	3418891e <HAL_GPIO_Init+0xf2>
34188916:	21ae      	movs	r1, #174	@ 0xae
34188918:	483c      	ldr	r0, [pc, #240]	@ (34188a0c <HAL_GPIO_Init+0x1e0>)
3418891a:	f7f9 fca7 	bl	3418226c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
3418891e:	683b      	ldr	r3, [r7, #0]
34188920:	685b      	ldr	r3, [r3, #4]
34188922:	2b00      	cmp	r3, #0
34188924:	f000 82bb 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188928:	683b      	ldr	r3, [r7, #0]
3418892a:	685b      	ldr	r3, [r3, #4]
3418892c:	2b01      	cmp	r3, #1
3418892e:	f000 82b6 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188932:	683b      	ldr	r3, [r7, #0]
34188934:	685b      	ldr	r3, [r3, #4]
34188936:	2b11      	cmp	r3, #17
34188938:	f000 82b1 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
3418893c:	683b      	ldr	r3, [r7, #0]
3418893e:	685b      	ldr	r3, [r3, #4]
34188940:	2b02      	cmp	r3, #2
34188942:	f000 82ac 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188946:	683b      	ldr	r3, [r7, #0]
34188948:	685b      	ldr	r3, [r3, #4]
3418894a:	2b12      	cmp	r3, #18
3418894c:	f000 82a7 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188950:	683b      	ldr	r3, [r7, #0]
34188952:	685b      	ldr	r3, [r3, #4]
34188954:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34188958:	f000 82a1 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
3418895c:	683b      	ldr	r3, [r7, #0]
3418895e:	685b      	ldr	r3, [r3, #4]
34188960:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34188964:	f000 829b 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188968:	683b      	ldr	r3, [r7, #0]
3418896a:	685b      	ldr	r3, [r3, #4]
3418896c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34188970:	f000 8295 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188974:	683b      	ldr	r3, [r7, #0]
34188976:	685b      	ldr	r3, [r3, #4]
34188978:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
3418897c:	f000 828f 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188980:	683b      	ldr	r3, [r7, #0]
34188982:	685b      	ldr	r3, [r3, #4]
34188984:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34188988:	f000 8289 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
3418898c:	683b      	ldr	r3, [r7, #0]
3418898e:	685b      	ldr	r3, [r3, #4]
34188990:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
34188994:	f000 8283 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
34188998:	683b      	ldr	r3, [r7, #0]
3418899a:	685b      	ldr	r3, [r3, #4]
3418899c:	2b03      	cmp	r3, #3
3418899e:	f000 827e 	beq.w	34188e9e <HAL_GPIO_Init+0x672>
341889a2:	21af      	movs	r1, #175	@ 0xaf
341889a4:	4819      	ldr	r0, [pc, #100]	@ (34188a0c <HAL_GPIO_Init+0x1e0>)
341889a6:	f7f9 fc61 	bl	3418226c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
341889aa:	e278      	b.n	34188e9e <HAL_GPIO_Init+0x672>
341889ac:	56020000 	.word	0x56020000
341889b0:	46020000 	.word	0x46020000
341889b4:	56020400 	.word	0x56020400
341889b8:	46020400 	.word	0x46020400
341889bc:	56020800 	.word	0x56020800
341889c0:	46020800 	.word	0x46020800
341889c4:	56020c00 	.word	0x56020c00
341889c8:	46020c00 	.word	0x46020c00
341889cc:	56021000 	.word	0x56021000
341889d0:	46021000 	.word	0x46021000
341889d4:	56021400 	.word	0x56021400
341889d8:	46021400 	.word	0x46021400
341889dc:	56021800 	.word	0x56021800
341889e0:	46021800 	.word	0x46021800
341889e4:	56021c00 	.word	0x56021c00
341889e8:	46021c00 	.word	0x46021c00
341889ec:	56023400 	.word	0x56023400
341889f0:	46023400 	.word	0x46023400
341889f4:	56023800 	.word	0x56023800
341889f8:	46023800 	.word	0x46023800
341889fc:	56023c00 	.word	0x56023c00
34188a00:	46023c00 	.word	0x46023c00
34188a04:	56024000 	.word	0x56024000
34188a08:	46024000 	.word	0x46024000
34188a0c:	341a5154 	.word	0x341a5154
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34188a10:	683b      	ldr	r3, [r7, #0]
34188a12:	681a      	ldr	r2, [r3, #0]
34188a14:	2101      	movs	r1, #1
34188a16:	697b      	ldr	r3, [r7, #20]
34188a18:	fa01 f303 	lsl.w	r3, r1, r3
34188a1c:	4013      	ands	r3, r2
34188a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34188a20:	68fb      	ldr	r3, [r7, #12]
34188a22:	2b00      	cmp	r3, #0
34188a24:	f000 8238 	beq.w	34188e98 <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34188a28:	683b      	ldr	r3, [r7, #0]
34188a2a:	685b      	ldr	r3, [r3, #4]
34188a2c:	f003 0303 	and.w	r3, r3, #3
34188a30:	2b01      	cmp	r3, #1
34188a32:	d005      	beq.n	34188a40 <HAL_GPIO_Init+0x214>
34188a34:	683b      	ldr	r3, [r7, #0]
34188a36:	685b      	ldr	r3, [r3, #4]
34188a38:	f003 0303 	and.w	r3, r3, #3
34188a3c:	2b02      	cmp	r3, #2
34188a3e:	d144      	bne.n	34188aca <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34188a40:	683b      	ldr	r3, [r7, #0]
34188a42:	68db      	ldr	r3, [r3, #12]
34188a44:	2b00      	cmp	r3, #0
34188a46:	d00f      	beq.n	34188a68 <HAL_GPIO_Init+0x23c>
34188a48:	683b      	ldr	r3, [r7, #0]
34188a4a:	68db      	ldr	r3, [r3, #12]
34188a4c:	2b01      	cmp	r3, #1
34188a4e:	d00b      	beq.n	34188a68 <HAL_GPIO_Init+0x23c>
34188a50:	683b      	ldr	r3, [r7, #0]
34188a52:	68db      	ldr	r3, [r3, #12]
34188a54:	2b02      	cmp	r3, #2
34188a56:	d007      	beq.n	34188a68 <HAL_GPIO_Init+0x23c>
34188a58:	683b      	ldr	r3, [r7, #0]
34188a5a:	68db      	ldr	r3, [r3, #12]
34188a5c:	2b03      	cmp	r3, #3
34188a5e:	d003      	beq.n	34188a68 <HAL_GPIO_Init+0x23c>
34188a60:	21be      	movs	r1, #190	@ 0xbe
34188a62:	4896      	ldr	r0, [pc, #600]	@ (34188cbc <HAL_GPIO_Init+0x490>)
34188a64:	f7f9 fc02 	bl	3418226c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34188a68:	687b      	ldr	r3, [r7, #4]
34188a6a:	689b      	ldr	r3, [r3, #8]
34188a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34188a6e:	697b      	ldr	r3, [r7, #20]
34188a70:	005b      	lsls	r3, r3, #1
34188a72:	2203      	movs	r2, #3
34188a74:	fa02 f303 	lsl.w	r3, r2, r3
34188a78:	43db      	mvns	r3, r3
34188a7a:	693a      	ldr	r2, [r7, #16]
34188a7c:	4013      	ands	r3, r2
34188a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34188a80:	683b      	ldr	r3, [r7, #0]
34188a82:	68da      	ldr	r2, [r3, #12]
34188a84:	697b      	ldr	r3, [r7, #20]
34188a86:	005b      	lsls	r3, r3, #1
34188a88:	fa02 f303 	lsl.w	r3, r2, r3
34188a8c:	693a      	ldr	r2, [r7, #16]
34188a8e:	4313      	orrs	r3, r2
34188a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34188a92:	687b      	ldr	r3, [r7, #4]
34188a94:	693a      	ldr	r2, [r7, #16]
34188a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34188a98:	687b      	ldr	r3, [r7, #4]
34188a9a:	685b      	ldr	r3, [r3, #4]
34188a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34188a9e:	2201      	movs	r2, #1
34188aa0:	697b      	ldr	r3, [r7, #20]
34188aa2:	fa02 f303 	lsl.w	r3, r2, r3
34188aa6:	43db      	mvns	r3, r3
34188aa8:	693a      	ldr	r2, [r7, #16]
34188aaa:	4013      	ands	r3, r2
34188aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34188aae:	683b      	ldr	r3, [r7, #0]
34188ab0:	685b      	ldr	r3, [r3, #4]
34188ab2:	091b      	lsrs	r3, r3, #4
34188ab4:	f003 0201 	and.w	r2, r3, #1
34188ab8:	697b      	ldr	r3, [r7, #20]
34188aba:	fa02 f303 	lsl.w	r3, r2, r3
34188abe:	693a      	ldr	r2, [r7, #16]
34188ac0:	4313      	orrs	r3, r2
34188ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34188ac4:	687b      	ldr	r3, [r7, #4]
34188ac6:	693a      	ldr	r2, [r7, #16]
34188ac8:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34188aca:	683b      	ldr	r3, [r7, #0]
34188acc:	685b      	ldr	r3, [r3, #4]
34188ace:	f003 0303 	and.w	r3, r3, #3
34188ad2:	2b03      	cmp	r3, #3
34188ad4:	d109      	bne.n	34188aea <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34188ad6:	683b      	ldr	r3, [r7, #0]
34188ad8:	685b      	ldr	r3, [r3, #4]
34188ada:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34188ade:	2b03      	cmp	r3, #3
34188ae0:	d12b      	bne.n	34188b3a <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34188ae2:	683b      	ldr	r3, [r7, #0]
34188ae4:	689b      	ldr	r3, [r3, #8]
34188ae6:	2b01      	cmp	r3, #1
34188ae8:	d027      	beq.n	34188b3a <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34188aea:	683b      	ldr	r3, [r7, #0]
34188aec:	689b      	ldr	r3, [r3, #8]
34188aee:	2b00      	cmp	r3, #0
34188af0:	d00b      	beq.n	34188b0a <HAL_GPIO_Init+0x2de>
34188af2:	683b      	ldr	r3, [r7, #0]
34188af4:	689b      	ldr	r3, [r3, #8]
34188af6:	2b01      	cmp	r3, #1
34188af8:	d007      	beq.n	34188b0a <HAL_GPIO_Init+0x2de>
34188afa:	683b      	ldr	r3, [r7, #0]
34188afc:	689b      	ldr	r3, [r3, #8]
34188afe:	2b02      	cmp	r3, #2
34188b00:	d003      	beq.n	34188b0a <HAL_GPIO_Init+0x2de>
34188b02:	21d1      	movs	r1, #209	@ 0xd1
34188b04:	486d      	ldr	r0, [pc, #436]	@ (34188cbc <HAL_GPIO_Init+0x490>)
34188b06:	f7f9 fbb1 	bl	3418226c <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34188b0a:	687b      	ldr	r3, [r7, #4]
34188b0c:	68db      	ldr	r3, [r3, #12]
34188b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34188b10:	697b      	ldr	r3, [r7, #20]
34188b12:	005b      	lsls	r3, r3, #1
34188b14:	2203      	movs	r2, #3
34188b16:	fa02 f303 	lsl.w	r3, r2, r3
34188b1a:	43db      	mvns	r3, r3
34188b1c:	693a      	ldr	r2, [r7, #16]
34188b1e:	4013      	ands	r3, r2
34188b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34188b22:	683b      	ldr	r3, [r7, #0]
34188b24:	689a      	ldr	r2, [r3, #8]
34188b26:	697b      	ldr	r3, [r7, #20]
34188b28:	005b      	lsls	r3, r3, #1
34188b2a:	fa02 f303 	lsl.w	r3, r2, r3
34188b2e:	693a      	ldr	r2, [r7, #16]
34188b30:	4313      	orrs	r3, r2
34188b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34188b34:	687b      	ldr	r3, [r7, #4]
34188b36:	693a      	ldr	r2, [r7, #16]
34188b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34188b3a:	683b      	ldr	r3, [r7, #0]
34188b3c:	685b      	ldr	r3, [r3, #4]
34188b3e:	f003 0303 	and.w	r3, r3, #3
34188b42:	2b02      	cmp	r3, #2
34188b44:	f040 8090 	bne.w	34188c68 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34188b48:	687b      	ldr	r3, [r7, #4]
34188b4a:	4a5d      	ldr	r2, [pc, #372]	@ (34188cc0 <HAL_GPIO_Init+0x494>)
34188b4c:	4293      	cmp	r3, r2
34188b4e:	d05f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b50:	687b      	ldr	r3, [r7, #4]
34188b52:	4a5c      	ldr	r2, [pc, #368]	@ (34188cc4 <HAL_GPIO_Init+0x498>)
34188b54:	4293      	cmp	r3, r2
34188b56:	d05b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b58:	687b      	ldr	r3, [r7, #4]
34188b5a:	4a5b      	ldr	r2, [pc, #364]	@ (34188cc8 <HAL_GPIO_Init+0x49c>)
34188b5c:	4293      	cmp	r3, r2
34188b5e:	d057      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b60:	687b      	ldr	r3, [r7, #4]
34188b62:	4a5a      	ldr	r2, [pc, #360]	@ (34188ccc <HAL_GPIO_Init+0x4a0>)
34188b64:	4293      	cmp	r3, r2
34188b66:	d053      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b68:	687b      	ldr	r3, [r7, #4]
34188b6a:	4a59      	ldr	r2, [pc, #356]	@ (34188cd0 <HAL_GPIO_Init+0x4a4>)
34188b6c:	4293      	cmp	r3, r2
34188b6e:	d04f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b70:	687b      	ldr	r3, [r7, #4]
34188b72:	4a58      	ldr	r2, [pc, #352]	@ (34188cd4 <HAL_GPIO_Init+0x4a8>)
34188b74:	4293      	cmp	r3, r2
34188b76:	d04b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b78:	687b      	ldr	r3, [r7, #4]
34188b7a:	4a57      	ldr	r2, [pc, #348]	@ (34188cd8 <HAL_GPIO_Init+0x4ac>)
34188b7c:	4293      	cmp	r3, r2
34188b7e:	d047      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b80:	687b      	ldr	r3, [r7, #4]
34188b82:	4a56      	ldr	r2, [pc, #344]	@ (34188cdc <HAL_GPIO_Init+0x4b0>)
34188b84:	4293      	cmp	r3, r2
34188b86:	d043      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b88:	687b      	ldr	r3, [r7, #4]
34188b8a:	4a55      	ldr	r2, [pc, #340]	@ (34188ce0 <HAL_GPIO_Init+0x4b4>)
34188b8c:	4293      	cmp	r3, r2
34188b8e:	d03f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b90:	687b      	ldr	r3, [r7, #4]
34188b92:	4a54      	ldr	r2, [pc, #336]	@ (34188ce4 <HAL_GPIO_Init+0x4b8>)
34188b94:	4293      	cmp	r3, r2
34188b96:	d03b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188b98:	687b      	ldr	r3, [r7, #4]
34188b9a:	4a53      	ldr	r2, [pc, #332]	@ (34188ce8 <HAL_GPIO_Init+0x4bc>)
34188b9c:	4293      	cmp	r3, r2
34188b9e:	d037      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188ba0:	687b      	ldr	r3, [r7, #4]
34188ba2:	4a52      	ldr	r2, [pc, #328]	@ (34188cec <HAL_GPIO_Init+0x4c0>)
34188ba4:	4293      	cmp	r3, r2
34188ba6:	d033      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188ba8:	687b      	ldr	r3, [r7, #4]
34188baa:	4a51      	ldr	r2, [pc, #324]	@ (34188cf0 <HAL_GPIO_Init+0x4c4>)
34188bac:	4293      	cmp	r3, r2
34188bae:	d02f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bb0:	687b      	ldr	r3, [r7, #4]
34188bb2:	4a50      	ldr	r2, [pc, #320]	@ (34188cf4 <HAL_GPIO_Init+0x4c8>)
34188bb4:	4293      	cmp	r3, r2
34188bb6:	d02b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bb8:	687b      	ldr	r3, [r7, #4]
34188bba:	4a4f      	ldr	r2, [pc, #316]	@ (34188cf8 <HAL_GPIO_Init+0x4cc>)
34188bbc:	4293      	cmp	r3, r2
34188bbe:	d027      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bc0:	687b      	ldr	r3, [r7, #4]
34188bc2:	4a4e      	ldr	r2, [pc, #312]	@ (34188cfc <HAL_GPIO_Init+0x4d0>)
34188bc4:	4293      	cmp	r3, r2
34188bc6:	d023      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bc8:	687b      	ldr	r3, [r7, #4]
34188bca:	4a4d      	ldr	r2, [pc, #308]	@ (34188d00 <HAL_GPIO_Init+0x4d4>)
34188bcc:	4293      	cmp	r3, r2
34188bce:	d01f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bd0:	687b      	ldr	r3, [r7, #4]
34188bd2:	4a4c      	ldr	r2, [pc, #304]	@ (34188d04 <HAL_GPIO_Init+0x4d8>)
34188bd4:	4293      	cmp	r3, r2
34188bd6:	d01b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bd8:	687b      	ldr	r3, [r7, #4]
34188bda:	4a4b      	ldr	r2, [pc, #300]	@ (34188d08 <HAL_GPIO_Init+0x4dc>)
34188bdc:	4293      	cmp	r3, r2
34188bde:	d017      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188be0:	687b      	ldr	r3, [r7, #4]
34188be2:	4a4a      	ldr	r2, [pc, #296]	@ (34188d0c <HAL_GPIO_Init+0x4e0>)
34188be4:	4293      	cmp	r3, r2
34188be6:	d013      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188be8:	687b      	ldr	r3, [r7, #4]
34188bea:	4a49      	ldr	r2, [pc, #292]	@ (34188d10 <HAL_GPIO_Init+0x4e4>)
34188bec:	4293      	cmp	r3, r2
34188bee:	d00f      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bf0:	687b      	ldr	r3, [r7, #4]
34188bf2:	4a48      	ldr	r2, [pc, #288]	@ (34188d14 <HAL_GPIO_Init+0x4e8>)
34188bf4:	4293      	cmp	r3, r2
34188bf6:	d00b      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188bf8:	687b      	ldr	r3, [r7, #4]
34188bfa:	4a47      	ldr	r2, [pc, #284]	@ (34188d18 <HAL_GPIO_Init+0x4ec>)
34188bfc:	4293      	cmp	r3, r2
34188bfe:	d007      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188c00:	687b      	ldr	r3, [r7, #4]
34188c02:	4a46      	ldr	r2, [pc, #280]	@ (34188d1c <HAL_GPIO_Init+0x4f0>)
34188c04:	4293      	cmp	r3, r2
34188c06:	d003      	beq.n	34188c10 <HAL_GPIO_Init+0x3e4>
34188c08:	21de      	movs	r1, #222	@ 0xde
34188c0a:	482c      	ldr	r0, [pc, #176]	@ (34188cbc <HAL_GPIO_Init+0x490>)
34188c0c:	f7f9 fb2e 	bl	3418226c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34188c10:	683b      	ldr	r3, [r7, #0]
34188c12:	691b      	ldr	r3, [r3, #16]
34188c14:	2b0f      	cmp	r3, #15
34188c16:	d903      	bls.n	34188c20 <HAL_GPIO_Init+0x3f4>
34188c18:	21df      	movs	r1, #223	@ 0xdf
34188c1a:	4828      	ldr	r0, [pc, #160]	@ (34188cbc <HAL_GPIO_Init+0x490>)
34188c1c:	f7f9 fb26 	bl	3418226c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34188c20:	697b      	ldr	r3, [r7, #20]
34188c22:	08da      	lsrs	r2, r3, #3
34188c24:	687b      	ldr	r3, [r7, #4]
34188c26:	3208      	adds	r2, #8
34188c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34188c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34188c2e:	697b      	ldr	r3, [r7, #20]
34188c30:	f003 0307 	and.w	r3, r3, #7
34188c34:	009b      	lsls	r3, r3, #2
34188c36:	220f      	movs	r2, #15
34188c38:	fa02 f303 	lsl.w	r3, r2, r3
34188c3c:	43db      	mvns	r3, r3
34188c3e:	693a      	ldr	r2, [r7, #16]
34188c40:	4013      	ands	r3, r2
34188c42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34188c44:	683b      	ldr	r3, [r7, #0]
34188c46:	691a      	ldr	r2, [r3, #16]
34188c48:	697b      	ldr	r3, [r7, #20]
34188c4a:	f003 0307 	and.w	r3, r3, #7
34188c4e:	009b      	lsls	r3, r3, #2
34188c50:	fa02 f303 	lsl.w	r3, r2, r3
34188c54:	693a      	ldr	r2, [r7, #16]
34188c56:	4313      	orrs	r3, r2
34188c58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34188c5a:	697b      	ldr	r3, [r7, #20]
34188c5c:	08da      	lsrs	r2, r3, #3
34188c5e:	687b      	ldr	r3, [r7, #4]
34188c60:	3208      	adds	r2, #8
34188c62:	6939      	ldr	r1, [r7, #16]
34188c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34188c68:	687b      	ldr	r3, [r7, #4]
34188c6a:	681b      	ldr	r3, [r3, #0]
34188c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34188c6e:	697b      	ldr	r3, [r7, #20]
34188c70:	005b      	lsls	r3, r3, #1
34188c72:	2203      	movs	r2, #3
34188c74:	fa02 f303 	lsl.w	r3, r2, r3
34188c78:	43db      	mvns	r3, r3
34188c7a:	693a      	ldr	r2, [r7, #16]
34188c7c:	4013      	ands	r3, r2
34188c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34188c80:	683b      	ldr	r3, [r7, #0]
34188c82:	685b      	ldr	r3, [r3, #4]
34188c84:	f003 0203 	and.w	r2, r3, #3
34188c88:	697b      	ldr	r3, [r7, #20]
34188c8a:	005b      	lsls	r3, r3, #1
34188c8c:	fa02 f303 	lsl.w	r3, r2, r3
34188c90:	693a      	ldr	r2, [r7, #16]
34188c92:	4313      	orrs	r3, r2
34188c94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34188c96:	687b      	ldr	r3, [r7, #4]
34188c98:	693a      	ldr	r2, [r7, #16]
34188c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34188c9c:	683b      	ldr	r3, [r7, #0]
34188c9e:	685b      	ldr	r3, [r3, #4]
34188ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34188ca4:	2b00      	cmp	r3, #0
34188ca6:	f000 80f7 	beq.w	34188e98 <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34188caa:	4a1d      	ldr	r2, [pc, #116]	@ (34188d20 <HAL_GPIO_Init+0x4f4>)
34188cac:	697b      	ldr	r3, [r7, #20]
34188cae:	089b      	lsrs	r3, r3, #2
34188cb0:	3318      	adds	r3, #24
34188cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34188cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34188cb8:	697b      	ldr	r3, [r7, #20]
34188cba:	e033      	b.n	34188d24 <HAL_GPIO_Init+0x4f8>
34188cbc:	341a5154 	.word	0x341a5154
34188cc0:	56020000 	.word	0x56020000
34188cc4:	46020000 	.word	0x46020000
34188cc8:	56020400 	.word	0x56020400
34188ccc:	46020400 	.word	0x46020400
34188cd0:	56020800 	.word	0x56020800
34188cd4:	46020800 	.word	0x46020800
34188cd8:	56020c00 	.word	0x56020c00
34188cdc:	46020c00 	.word	0x46020c00
34188ce0:	56021000 	.word	0x56021000
34188ce4:	46021000 	.word	0x46021000
34188ce8:	56021400 	.word	0x56021400
34188cec:	46021400 	.word	0x46021400
34188cf0:	56021800 	.word	0x56021800
34188cf4:	46021800 	.word	0x46021800
34188cf8:	56021c00 	.word	0x56021c00
34188cfc:	46021c00 	.word	0x46021c00
34188d00:	56023400 	.word	0x56023400
34188d04:	46023400 	.word	0x46023400
34188d08:	56023800 	.word	0x56023800
34188d0c:	46023800 	.word	0x46023800
34188d10:	56023c00 	.word	0x56023c00
34188d14:	46023c00 	.word	0x46023c00
34188d18:	56024000 	.word	0x56024000
34188d1c:	46024000 	.word	0x46024000
34188d20:	56025000 	.word	0x56025000
34188d24:	f003 0303 	and.w	r3, r3, #3
34188d28:	00db      	lsls	r3, r3, #3
34188d2a:	220f      	movs	r2, #15
34188d2c:	fa02 f303 	lsl.w	r3, r2, r3
34188d30:	43db      	mvns	r3, r3
34188d32:	693a      	ldr	r2, [r7, #16]
34188d34:	4013      	ands	r3, r2
34188d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34188d38:	687b      	ldr	r3, [r7, #4]
34188d3a:	4a5f      	ldr	r2, [pc, #380]	@ (34188eb8 <HAL_GPIO_Init+0x68c>)
34188d3c:	4293      	cmp	r3, r2
34188d3e:	d043      	beq.n	34188dc8 <HAL_GPIO_Init+0x59c>
34188d40:	687b      	ldr	r3, [r7, #4]
34188d42:	4a5e      	ldr	r2, [pc, #376]	@ (34188ebc <HAL_GPIO_Init+0x690>)
34188d44:	4293      	cmp	r3, r2
34188d46:	d03d      	beq.n	34188dc4 <HAL_GPIO_Init+0x598>
34188d48:	687b      	ldr	r3, [r7, #4]
34188d4a:	4a5d      	ldr	r2, [pc, #372]	@ (34188ec0 <HAL_GPIO_Init+0x694>)
34188d4c:	4293      	cmp	r3, r2
34188d4e:	d037      	beq.n	34188dc0 <HAL_GPIO_Init+0x594>
34188d50:	687b      	ldr	r3, [r7, #4]
34188d52:	4a5c      	ldr	r2, [pc, #368]	@ (34188ec4 <HAL_GPIO_Init+0x698>)
34188d54:	4293      	cmp	r3, r2
34188d56:	d031      	beq.n	34188dbc <HAL_GPIO_Init+0x590>
34188d58:	687b      	ldr	r3, [r7, #4]
34188d5a:	4a5b      	ldr	r2, [pc, #364]	@ (34188ec8 <HAL_GPIO_Init+0x69c>)
34188d5c:	4293      	cmp	r3, r2
34188d5e:	d02b      	beq.n	34188db8 <HAL_GPIO_Init+0x58c>
34188d60:	687b      	ldr	r3, [r7, #4]
34188d62:	4a5a      	ldr	r2, [pc, #360]	@ (34188ecc <HAL_GPIO_Init+0x6a0>)
34188d64:	4293      	cmp	r3, r2
34188d66:	d025      	beq.n	34188db4 <HAL_GPIO_Init+0x588>
34188d68:	687b      	ldr	r3, [r7, #4]
34188d6a:	4a59      	ldr	r2, [pc, #356]	@ (34188ed0 <HAL_GPIO_Init+0x6a4>)
34188d6c:	4293      	cmp	r3, r2
34188d6e:	d01f      	beq.n	34188db0 <HAL_GPIO_Init+0x584>
34188d70:	687b      	ldr	r3, [r7, #4]
34188d72:	4a58      	ldr	r2, [pc, #352]	@ (34188ed4 <HAL_GPIO_Init+0x6a8>)
34188d74:	4293      	cmp	r3, r2
34188d76:	d019      	beq.n	34188dac <HAL_GPIO_Init+0x580>
34188d78:	687b      	ldr	r3, [r7, #4]
34188d7a:	4a57      	ldr	r2, [pc, #348]	@ (34188ed8 <HAL_GPIO_Init+0x6ac>)
34188d7c:	4293      	cmp	r3, r2
34188d7e:	d013      	beq.n	34188da8 <HAL_GPIO_Init+0x57c>
34188d80:	687b      	ldr	r3, [r7, #4]
34188d82:	4a56      	ldr	r2, [pc, #344]	@ (34188edc <HAL_GPIO_Init+0x6b0>)
34188d84:	4293      	cmp	r3, r2
34188d86:	d00d      	beq.n	34188da4 <HAL_GPIO_Init+0x578>
34188d88:	687b      	ldr	r3, [r7, #4]
34188d8a:	4a55      	ldr	r2, [pc, #340]	@ (34188ee0 <HAL_GPIO_Init+0x6b4>)
34188d8c:	4293      	cmp	r3, r2
34188d8e:	d007      	beq.n	34188da0 <HAL_GPIO_Init+0x574>
34188d90:	687b      	ldr	r3, [r7, #4]
34188d92:	4a54      	ldr	r2, [pc, #336]	@ (34188ee4 <HAL_GPIO_Init+0x6b8>)
34188d94:	4293      	cmp	r3, r2
34188d96:	d101      	bne.n	34188d9c <HAL_GPIO_Init+0x570>
34188d98:	230b      	movs	r3, #11
34188d9a:	e016      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188d9c:	2310      	movs	r3, #16
34188d9e:	e014      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188da0:	230a      	movs	r3, #10
34188da2:	e012      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188da4:	2309      	movs	r3, #9
34188da6:	e010      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188da8:	2308      	movs	r3, #8
34188daa:	e00e      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188dac:	2307      	movs	r3, #7
34188dae:	e00c      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188db0:	2306      	movs	r3, #6
34188db2:	e00a      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188db4:	2305      	movs	r3, #5
34188db6:	e008      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188db8:	2304      	movs	r3, #4
34188dba:	e006      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188dbc:	2303      	movs	r3, #3
34188dbe:	e004      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188dc0:	2302      	movs	r3, #2
34188dc2:	e002      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188dc4:	2301      	movs	r3, #1
34188dc6:	e000      	b.n	34188dca <HAL_GPIO_Init+0x59e>
34188dc8:	2300      	movs	r3, #0
34188dca:	697a      	ldr	r2, [r7, #20]
34188dcc:	f002 0203 	and.w	r2, r2, #3
34188dd0:	00d2      	lsls	r2, r2, #3
34188dd2:	4093      	lsls	r3, r2
34188dd4:	693a      	ldr	r2, [r7, #16]
34188dd6:	4313      	orrs	r3, r2
34188dd8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34188dda:	4943      	ldr	r1, [pc, #268]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188ddc:	697b      	ldr	r3, [r7, #20]
34188dde:	089b      	lsrs	r3, r3, #2
34188de0:	3318      	adds	r3, #24
34188de2:	693a      	ldr	r2, [r7, #16]
34188de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34188de8:	4b3f      	ldr	r3, [pc, #252]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34188dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34188df0:	68fb      	ldr	r3, [r7, #12]
34188df2:	43db      	mvns	r3, r3
34188df4:	693a      	ldr	r2, [r7, #16]
34188df6:	4013      	ands	r3, r2
34188df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34188dfa:	683b      	ldr	r3, [r7, #0]
34188dfc:	685b      	ldr	r3, [r3, #4]
34188dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34188e02:	2b00      	cmp	r3, #0
34188e04:	d003      	beq.n	34188e0e <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
34188e06:	693a      	ldr	r2, [r7, #16]
34188e08:	68fb      	ldr	r3, [r7, #12]
34188e0a:	4313      	orrs	r3, r2
34188e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34188e0e:	4a36      	ldr	r2, [pc, #216]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e10:	693b      	ldr	r3, [r7, #16]
34188e12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34188e16:	4b34      	ldr	r3, [pc, #208]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34188e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34188e1e:	68fb      	ldr	r3, [r7, #12]
34188e20:	43db      	mvns	r3, r3
34188e22:	693a      	ldr	r2, [r7, #16]
34188e24:	4013      	ands	r3, r2
34188e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34188e28:	683b      	ldr	r3, [r7, #0]
34188e2a:	685b      	ldr	r3, [r3, #4]
34188e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34188e30:	2b00      	cmp	r3, #0
34188e32:	d003      	beq.n	34188e3c <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
34188e34:	693a      	ldr	r2, [r7, #16]
34188e36:	68fb      	ldr	r3, [r7, #12]
34188e38:	4313      	orrs	r3, r2
34188e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34188e3c:	4a2a      	ldr	r2, [pc, #168]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e3e:	693b      	ldr	r3, [r7, #16]
34188e40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34188e44:	4b28      	ldr	r3, [pc, #160]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e46:	681b      	ldr	r3, [r3, #0]
34188e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34188e4a:	68fb      	ldr	r3, [r7, #12]
34188e4c:	43db      	mvns	r3, r3
34188e4e:	693a      	ldr	r2, [r7, #16]
34188e50:	4013      	ands	r3, r2
34188e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34188e54:	683b      	ldr	r3, [r7, #0]
34188e56:	685b      	ldr	r3, [r3, #4]
34188e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34188e5c:	2b00      	cmp	r3, #0
34188e5e:	d003      	beq.n	34188e68 <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
34188e60:	693a      	ldr	r2, [r7, #16]
34188e62:	68fb      	ldr	r3, [r7, #12]
34188e64:	4313      	orrs	r3, r2
34188e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34188e68:	4a1f      	ldr	r2, [pc, #124]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e6a:	693b      	ldr	r3, [r7, #16]
34188e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34188e6e:	4b1e      	ldr	r3, [pc, #120]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e70:	685b      	ldr	r3, [r3, #4]
34188e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34188e74:	68fb      	ldr	r3, [r7, #12]
34188e76:	43db      	mvns	r3, r3
34188e78:	693a      	ldr	r2, [r7, #16]
34188e7a:	4013      	ands	r3, r2
34188e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34188e7e:	683b      	ldr	r3, [r7, #0]
34188e80:	685b      	ldr	r3, [r3, #4]
34188e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34188e86:	2b00      	cmp	r3, #0
34188e88:	d003      	beq.n	34188e92 <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
34188e8a:	693a      	ldr	r2, [r7, #16]
34188e8c:	68fb      	ldr	r3, [r7, #12]
34188e8e:	4313      	orrs	r3, r2
34188e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34188e92:	4a15      	ldr	r2, [pc, #84]	@ (34188ee8 <HAL_GPIO_Init+0x6bc>)
34188e94:	693b      	ldr	r3, [r7, #16]
34188e96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34188e98:	697b      	ldr	r3, [r7, #20]
34188e9a:	3301      	adds	r3, #1
34188e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34188e9e:	683b      	ldr	r3, [r7, #0]
34188ea0:	681a      	ldr	r2, [r3, #0]
34188ea2:	697b      	ldr	r3, [r7, #20]
34188ea4:	fa22 f303 	lsr.w	r3, r2, r3
34188ea8:	2b00      	cmp	r3, #0
34188eaa:	f47f adb1 	bne.w	34188a10 <HAL_GPIO_Init+0x1e4>
  }
}
34188eae:	bf00      	nop
34188eb0:	bf00      	nop
34188eb2:	3718      	adds	r7, #24
34188eb4:	46bd      	mov	sp, r7
34188eb6:	bd80      	pop	{r7, pc}
34188eb8:	56020000 	.word	0x56020000
34188ebc:	56020400 	.word	0x56020400
34188ec0:	56020800 	.word	0x56020800
34188ec4:	56020c00 	.word	0x56020c00
34188ec8:	56021000 	.word	0x56021000
34188ecc:	56021400 	.word	0x56021400
34188ed0:	56021800 	.word	0x56021800
34188ed4:	56021c00 	.word	0x56021c00
34188ed8:	56023400 	.word	0x56023400
34188edc:	56023800 	.word	0x56023800
34188ee0:	56023c00 	.word	0x56023c00
34188ee4:	56024000 	.word	0x56024000
34188ee8:	56025000 	.word	0x56025000

34188eec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34188eec:	b580      	push	{r7, lr}
34188eee:	b086      	sub	sp, #24
34188ef0:	af00      	add	r7, sp, #0
34188ef2:	6078      	str	r0, [r7, #4]
34188ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34188ef6:	2300      	movs	r3, #0
34188ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34188efa:	687b      	ldr	r3, [r7, #4]
34188efc:	4a6b      	ldr	r2, [pc, #428]	@ (341890ac <HAL_GPIO_DeInit+0x1c0>)
34188efe:	4293      	cmp	r3, r2
34188f00:	d060      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f02:	687b      	ldr	r3, [r7, #4]
34188f04:	4a6a      	ldr	r2, [pc, #424]	@ (341890b0 <HAL_GPIO_DeInit+0x1c4>)
34188f06:	4293      	cmp	r3, r2
34188f08:	d05c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f0a:	687b      	ldr	r3, [r7, #4]
34188f0c:	4a69      	ldr	r2, [pc, #420]	@ (341890b4 <HAL_GPIO_DeInit+0x1c8>)
34188f0e:	4293      	cmp	r3, r2
34188f10:	d058      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f12:	687b      	ldr	r3, [r7, #4]
34188f14:	4a68      	ldr	r2, [pc, #416]	@ (341890b8 <HAL_GPIO_DeInit+0x1cc>)
34188f16:	4293      	cmp	r3, r2
34188f18:	d054      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f1a:	687b      	ldr	r3, [r7, #4]
34188f1c:	4a67      	ldr	r2, [pc, #412]	@ (341890bc <HAL_GPIO_DeInit+0x1d0>)
34188f1e:	4293      	cmp	r3, r2
34188f20:	d050      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f22:	687b      	ldr	r3, [r7, #4]
34188f24:	4a66      	ldr	r2, [pc, #408]	@ (341890c0 <HAL_GPIO_DeInit+0x1d4>)
34188f26:	4293      	cmp	r3, r2
34188f28:	d04c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f2a:	687b      	ldr	r3, [r7, #4]
34188f2c:	4a65      	ldr	r2, [pc, #404]	@ (341890c4 <HAL_GPIO_DeInit+0x1d8>)
34188f2e:	4293      	cmp	r3, r2
34188f30:	d048      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f32:	687b      	ldr	r3, [r7, #4]
34188f34:	4a64      	ldr	r2, [pc, #400]	@ (341890c8 <HAL_GPIO_DeInit+0x1dc>)
34188f36:	4293      	cmp	r3, r2
34188f38:	d044      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f3a:	687b      	ldr	r3, [r7, #4]
34188f3c:	4a63      	ldr	r2, [pc, #396]	@ (341890cc <HAL_GPIO_DeInit+0x1e0>)
34188f3e:	4293      	cmp	r3, r2
34188f40:	d040      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f42:	687b      	ldr	r3, [r7, #4]
34188f44:	4a62      	ldr	r2, [pc, #392]	@ (341890d0 <HAL_GPIO_DeInit+0x1e4>)
34188f46:	4293      	cmp	r3, r2
34188f48:	d03c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f4a:	687b      	ldr	r3, [r7, #4]
34188f4c:	4a61      	ldr	r2, [pc, #388]	@ (341890d4 <HAL_GPIO_DeInit+0x1e8>)
34188f4e:	4293      	cmp	r3, r2
34188f50:	d038      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f52:	687b      	ldr	r3, [r7, #4]
34188f54:	4a60      	ldr	r2, [pc, #384]	@ (341890d8 <HAL_GPIO_DeInit+0x1ec>)
34188f56:	4293      	cmp	r3, r2
34188f58:	d034      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f5a:	687b      	ldr	r3, [r7, #4]
34188f5c:	4a5f      	ldr	r2, [pc, #380]	@ (341890dc <HAL_GPIO_DeInit+0x1f0>)
34188f5e:	4293      	cmp	r3, r2
34188f60:	d030      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f62:	687b      	ldr	r3, [r7, #4]
34188f64:	4a5e      	ldr	r2, [pc, #376]	@ (341890e0 <HAL_GPIO_DeInit+0x1f4>)
34188f66:	4293      	cmp	r3, r2
34188f68:	d02c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f6a:	687b      	ldr	r3, [r7, #4]
34188f6c:	4a5d      	ldr	r2, [pc, #372]	@ (341890e4 <HAL_GPIO_DeInit+0x1f8>)
34188f6e:	4293      	cmp	r3, r2
34188f70:	d028      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f72:	687b      	ldr	r3, [r7, #4]
34188f74:	4a5c      	ldr	r2, [pc, #368]	@ (341890e8 <HAL_GPIO_DeInit+0x1fc>)
34188f76:	4293      	cmp	r3, r2
34188f78:	d024      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f7a:	687b      	ldr	r3, [r7, #4]
34188f7c:	4a5b      	ldr	r2, [pc, #364]	@ (341890ec <HAL_GPIO_DeInit+0x200>)
34188f7e:	4293      	cmp	r3, r2
34188f80:	d020      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f82:	687b      	ldr	r3, [r7, #4]
34188f84:	4a5a      	ldr	r2, [pc, #360]	@ (341890f0 <HAL_GPIO_DeInit+0x204>)
34188f86:	4293      	cmp	r3, r2
34188f88:	d01c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f8a:	687b      	ldr	r3, [r7, #4]
34188f8c:	4a59      	ldr	r2, [pc, #356]	@ (341890f4 <HAL_GPIO_DeInit+0x208>)
34188f8e:	4293      	cmp	r3, r2
34188f90:	d018      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f92:	687b      	ldr	r3, [r7, #4]
34188f94:	4a58      	ldr	r2, [pc, #352]	@ (341890f8 <HAL_GPIO_DeInit+0x20c>)
34188f96:	4293      	cmp	r3, r2
34188f98:	d014      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188f9a:	687b      	ldr	r3, [r7, #4]
34188f9c:	4a57      	ldr	r2, [pc, #348]	@ (341890fc <HAL_GPIO_DeInit+0x210>)
34188f9e:	4293      	cmp	r3, r2
34188fa0:	d010      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188fa2:	687b      	ldr	r3, [r7, #4]
34188fa4:	4a56      	ldr	r2, [pc, #344]	@ (34189100 <HAL_GPIO_DeInit+0x214>)
34188fa6:	4293      	cmp	r3, r2
34188fa8:	d00c      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188faa:	687b      	ldr	r3, [r7, #4]
34188fac:	4a55      	ldr	r2, [pc, #340]	@ (34189104 <HAL_GPIO_DeInit+0x218>)
34188fae:	4293      	cmp	r3, r2
34188fb0:	d008      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188fb2:	687b      	ldr	r3, [r7, #4]
34188fb4:	4a54      	ldr	r2, [pc, #336]	@ (34189108 <HAL_GPIO_DeInit+0x21c>)
34188fb6:	4293      	cmp	r3, r2
34188fb8:	d004      	beq.n	34188fc4 <HAL_GPIO_DeInit+0xd8>
34188fba:	f240 112d 	movw	r1, #301	@ 0x12d
34188fbe:	4853      	ldr	r0, [pc, #332]	@ (3418910c <HAL_GPIO_DeInit+0x220>)
34188fc0:	f7f9 f954 	bl	3418226c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34188fc4:	683b      	ldr	r3, [r7, #0]
34188fc6:	b29b      	uxth	r3, r3
34188fc8:	2b00      	cmp	r3, #0
34188fca:	d004      	beq.n	34188fd6 <HAL_GPIO_DeInit+0xea>
34188fcc:	683b      	ldr	r3, [r7, #0]
34188fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34188fd2:	f0c0 814b 	bcc.w	3418926c <HAL_GPIO_DeInit+0x380>
34188fd6:	f44f 7197 	mov.w	r1, #302	@ 0x12e
34188fda:	484c      	ldr	r0, [pc, #304]	@ (3418910c <HAL_GPIO_DeInit+0x220>)
34188fdc:	f7f9 f946 	bl	3418226c <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
34188fe0:	e144      	b.n	3418926c <HAL_GPIO_DeInit+0x380>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
34188fe2:	2201      	movs	r2, #1
34188fe4:	697b      	ldr	r3, [r7, #20]
34188fe6:	fa02 f303 	lsl.w	r3, r2, r3
34188fea:	683a      	ldr	r2, [r7, #0]
34188fec:	4013      	ands	r3, r2
34188fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
34188ff0:	693b      	ldr	r3, [r7, #16]
34188ff2:	2b00      	cmp	r3, #0
34188ff4:	f000 8137 	beq.w	34189266 <HAL_GPIO_DeInit+0x37a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
34188ff8:	4a45      	ldr	r2, [pc, #276]	@ (34189110 <HAL_GPIO_DeInit+0x224>)
34188ffa:	697b      	ldr	r3, [r7, #20]
34188ffc:	089b      	lsrs	r3, r3, #2
34188ffe:	3318      	adds	r3, #24
34189000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34189004:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34189006:	697b      	ldr	r3, [r7, #20]
34189008:	f003 0303 	and.w	r3, r3, #3
3418900c:	00db      	lsls	r3, r3, #3
3418900e:	220f      	movs	r2, #15
34189010:	fa02 f303 	lsl.w	r3, r2, r3
34189014:	68fa      	ldr	r2, [r7, #12]
34189016:	4013      	ands	r3, r2
34189018:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
3418901a:	687b      	ldr	r3, [r7, #4]
3418901c:	4a23      	ldr	r2, [pc, #140]	@ (341890ac <HAL_GPIO_DeInit+0x1c0>)
3418901e:	4293      	cmp	r3, r2
34189020:	d078      	beq.n	34189114 <HAL_GPIO_DeInit+0x228>
34189022:	687b      	ldr	r3, [r7, #4]
34189024:	4a23      	ldr	r2, [pc, #140]	@ (341890b4 <HAL_GPIO_DeInit+0x1c8>)
34189026:	4293      	cmp	r3, r2
34189028:	d03d      	beq.n	341890a6 <HAL_GPIO_DeInit+0x1ba>
3418902a:	687b      	ldr	r3, [r7, #4]
3418902c:	4a23      	ldr	r2, [pc, #140]	@ (341890bc <HAL_GPIO_DeInit+0x1d0>)
3418902e:	4293      	cmp	r3, r2
34189030:	d037      	beq.n	341890a2 <HAL_GPIO_DeInit+0x1b6>
34189032:	687b      	ldr	r3, [r7, #4]
34189034:	4a23      	ldr	r2, [pc, #140]	@ (341890c4 <HAL_GPIO_DeInit+0x1d8>)
34189036:	4293      	cmp	r3, r2
34189038:	d031      	beq.n	3418909e <HAL_GPIO_DeInit+0x1b2>
3418903a:	687b      	ldr	r3, [r7, #4]
3418903c:	4a23      	ldr	r2, [pc, #140]	@ (341890cc <HAL_GPIO_DeInit+0x1e0>)
3418903e:	4293      	cmp	r3, r2
34189040:	d02b      	beq.n	3418909a <HAL_GPIO_DeInit+0x1ae>
34189042:	687b      	ldr	r3, [r7, #4]
34189044:	4a23      	ldr	r2, [pc, #140]	@ (341890d4 <HAL_GPIO_DeInit+0x1e8>)
34189046:	4293      	cmp	r3, r2
34189048:	d025      	beq.n	34189096 <HAL_GPIO_DeInit+0x1aa>
3418904a:	687b      	ldr	r3, [r7, #4]
3418904c:	4a23      	ldr	r2, [pc, #140]	@ (341890dc <HAL_GPIO_DeInit+0x1f0>)
3418904e:	4293      	cmp	r3, r2
34189050:	d01f      	beq.n	34189092 <HAL_GPIO_DeInit+0x1a6>
34189052:	687b      	ldr	r3, [r7, #4]
34189054:	4a23      	ldr	r2, [pc, #140]	@ (341890e4 <HAL_GPIO_DeInit+0x1f8>)
34189056:	4293      	cmp	r3, r2
34189058:	d019      	beq.n	3418908e <HAL_GPIO_DeInit+0x1a2>
3418905a:	687b      	ldr	r3, [r7, #4]
3418905c:	4a23      	ldr	r2, [pc, #140]	@ (341890ec <HAL_GPIO_DeInit+0x200>)
3418905e:	4293      	cmp	r3, r2
34189060:	d013      	beq.n	3418908a <HAL_GPIO_DeInit+0x19e>
34189062:	687b      	ldr	r3, [r7, #4]
34189064:	4a23      	ldr	r2, [pc, #140]	@ (341890f4 <HAL_GPIO_DeInit+0x208>)
34189066:	4293      	cmp	r3, r2
34189068:	d00d      	beq.n	34189086 <HAL_GPIO_DeInit+0x19a>
3418906a:	687b      	ldr	r3, [r7, #4]
3418906c:	4a23      	ldr	r2, [pc, #140]	@ (341890fc <HAL_GPIO_DeInit+0x210>)
3418906e:	4293      	cmp	r3, r2
34189070:	d007      	beq.n	34189082 <HAL_GPIO_DeInit+0x196>
34189072:	687b      	ldr	r3, [r7, #4]
34189074:	4a23      	ldr	r2, [pc, #140]	@ (34189104 <HAL_GPIO_DeInit+0x218>)
34189076:	4293      	cmp	r3, r2
34189078:	d101      	bne.n	3418907e <HAL_GPIO_DeInit+0x192>
3418907a:	230b      	movs	r3, #11
3418907c:	e04b      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
3418907e:	2310      	movs	r3, #16
34189080:	e049      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
34189082:	230a      	movs	r3, #10
34189084:	e047      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
34189086:	2309      	movs	r3, #9
34189088:	e045      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
3418908a:	2308      	movs	r3, #8
3418908c:	e043      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
3418908e:	2307      	movs	r3, #7
34189090:	e041      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
34189092:	2306      	movs	r3, #6
34189094:	e03f      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
34189096:	2305      	movs	r3, #5
34189098:	e03d      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
3418909a:	2304      	movs	r3, #4
3418909c:	e03b      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
3418909e:	2303      	movs	r3, #3
341890a0:	e039      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
341890a2:	2302      	movs	r3, #2
341890a4:	e037      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
341890a6:	2301      	movs	r3, #1
341890a8:	e035      	b.n	34189116 <HAL_GPIO_DeInit+0x22a>
341890aa:	bf00      	nop
341890ac:	56020000 	.word	0x56020000
341890b0:	46020000 	.word	0x46020000
341890b4:	56020400 	.word	0x56020400
341890b8:	46020400 	.word	0x46020400
341890bc:	56020800 	.word	0x56020800
341890c0:	46020800 	.word	0x46020800
341890c4:	56020c00 	.word	0x56020c00
341890c8:	46020c00 	.word	0x46020c00
341890cc:	56021000 	.word	0x56021000
341890d0:	46021000 	.word	0x46021000
341890d4:	56021400 	.word	0x56021400
341890d8:	46021400 	.word	0x46021400
341890dc:	56021800 	.word	0x56021800
341890e0:	46021800 	.word	0x46021800
341890e4:	56021c00 	.word	0x56021c00
341890e8:	46021c00 	.word	0x46021c00
341890ec:	56023400 	.word	0x56023400
341890f0:	46023400 	.word	0x46023400
341890f4:	56023800 	.word	0x56023800
341890f8:	46023800 	.word	0x46023800
341890fc:	56023c00 	.word	0x56023c00
34189100:	46023c00 	.word	0x46023c00
34189104:	56024000 	.word	0x56024000
34189108:	46024000 	.word	0x46024000
3418910c:	341a5154 	.word	0x341a5154
34189110:	56025000 	.word	0x56025000
34189114:	2300      	movs	r3, #0
34189116:	697a      	ldr	r2, [r7, #20]
34189118:	f002 0203 	and.w	r2, r2, #3
3418911c:	00d2      	lsls	r2, r2, #3
3418911e:	4093      	lsls	r3, r2
34189120:	68fa      	ldr	r2, [r7, #12]
34189122:	429a      	cmp	r2, r3
34189124:	d136      	bne.n	34189194 <HAL_GPIO_DeInit+0x2a8>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
34189126:	4b57      	ldr	r3, [pc, #348]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189128:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3418912c:	693b      	ldr	r3, [r7, #16]
3418912e:	43db      	mvns	r3, r3
34189130:	4954      	ldr	r1, [pc, #336]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189132:	4013      	ands	r3, r2
34189134:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34189138:	4b52      	ldr	r3, [pc, #328]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
3418913a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
3418913e:	693b      	ldr	r3, [r7, #16]
34189140:	43db      	mvns	r3, r3
34189142:	4950      	ldr	r1, [pc, #320]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189144:	4013      	ands	r3, r2
34189146:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
3418914a:	4b4e      	ldr	r3, [pc, #312]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
3418914c:	681a      	ldr	r2, [r3, #0]
3418914e:	693b      	ldr	r3, [r7, #16]
34189150:	43db      	mvns	r3, r3
34189152:	494c      	ldr	r1, [pc, #304]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189154:	4013      	ands	r3, r2
34189156:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34189158:	4b4a      	ldr	r3, [pc, #296]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
3418915a:	685a      	ldr	r2, [r3, #4]
3418915c:	693b      	ldr	r3, [r7, #16]
3418915e:	43db      	mvns	r3, r3
34189160:	4948      	ldr	r1, [pc, #288]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189162:	4013      	ands	r3, r2
34189164:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos);
34189166:	697b      	ldr	r3, [r7, #20]
34189168:	f003 0303 	and.w	r3, r3, #3
3418916c:	00db      	lsls	r3, r3, #3
3418916e:	220f      	movs	r2, #15
34189170:	fa02 f303 	lsl.w	r3, r2, r3
34189174:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34189176:	4a43      	ldr	r2, [pc, #268]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189178:	697b      	ldr	r3, [r7, #20]
3418917a:	089b      	lsrs	r3, r3, #2
3418917c:	3318      	adds	r3, #24
3418917e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
34189182:	68fb      	ldr	r3, [r7, #12]
34189184:	43da      	mvns	r2, r3
34189186:	483f      	ldr	r0, [pc, #252]	@ (34189284 <HAL_GPIO_DeInit+0x398>)
34189188:	697b      	ldr	r3, [r7, #20]
3418918a:	089b      	lsrs	r3, r3, #2
3418918c:	400a      	ands	r2, r1
3418918e:	3318      	adds	r3, #24
34189190:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34189194:	687b      	ldr	r3, [r7, #4]
34189196:	681a      	ldr	r2, [r3, #0]
34189198:	697b      	ldr	r3, [r7, #20]
3418919a:	005b      	lsls	r3, r3, #1
3418919c:	2103      	movs	r1, #3
3418919e:	fa01 f303 	lsl.w	r3, r1, r3
341891a2:	431a      	orrs	r2, r3
341891a4:	687b      	ldr	r3, [r7, #4]
341891a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
341891a8:	697b      	ldr	r3, [r7, #20]
341891aa:	08da      	lsrs	r2, r3, #3
341891ac:	687b      	ldr	r3, [r7, #4]
341891ae:	3208      	adds	r2, #8
341891b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
341891b4:	697b      	ldr	r3, [r7, #20]
341891b6:	f003 0307 	and.w	r3, r3, #7
341891ba:	009b      	lsls	r3, r3, #2
341891bc:	220f      	movs	r2, #15
341891be:	fa02 f303 	lsl.w	r3, r2, r3
341891c2:	43db      	mvns	r3, r3
341891c4:	697a      	ldr	r2, [r7, #20]
341891c6:	08d2      	lsrs	r2, r2, #3
341891c8:	4019      	ands	r1, r3
341891ca:	687b      	ldr	r3, [r7, #4]
341891cc:	3208      	adds	r2, #8
341891ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341891d2:	687b      	ldr	r3, [r7, #4]
341891d4:	689a      	ldr	r2, [r3, #8]
341891d6:	697b      	ldr	r3, [r7, #20]
341891d8:	005b      	lsls	r3, r3, #1
341891da:	2103      	movs	r1, #3
341891dc:	fa01 f303 	lsl.w	r3, r1, r3
341891e0:	43db      	mvns	r3, r3
341891e2:	401a      	ands	r2, r3
341891e4:	687b      	ldr	r3, [r7, #4]
341891e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
341891e8:	687b      	ldr	r3, [r7, #4]
341891ea:	685a      	ldr	r2, [r3, #4]
341891ec:	2101      	movs	r1, #1
341891ee:	697b      	ldr	r3, [r7, #20]
341891f0:	fa01 f303 	lsl.w	r3, r1, r3
341891f4:	43db      	mvns	r3, r3
341891f6:	401a      	ands	r2, r3
341891f8:	687b      	ldr	r3, [r7, #4]
341891fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
341891fc:	687b      	ldr	r3, [r7, #4]
341891fe:	68da      	ldr	r2, [r3, #12]
34189200:	697b      	ldr	r3, [r7, #20]
34189202:	005b      	lsls	r3, r3, #1
34189204:	2103      	movs	r1, #3
34189206:	fa01 f303 	lsl.w	r3, r1, r3
3418920a:	43db      	mvns	r3, r3
3418920c:	401a      	ands	r2, r3
3418920e:	687b      	ldr	r3, [r7, #4]
34189210:	60da      	str	r2, [r3, #12]

      /* Reset delay settings for the current IO */
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34189212:	697b      	ldr	r3, [r7, #20]
34189214:	08da      	lsrs	r2, r3, #3
34189216:	687b      	ldr	r3, [r7, #4]
34189218:	3210      	adds	r2, #16
3418921a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3418921e:	697b      	ldr	r3, [r7, #20]
34189220:	f003 0307 	and.w	r3, r3, #7
34189224:	009b      	lsls	r3, r3, #2
34189226:	220f      	movs	r2, #15
34189228:	fa02 f303 	lsl.w	r3, r2, r3
3418922c:	43db      	mvns	r3, r3
3418922e:	697a      	ldr	r2, [r7, #20]
34189230:	08d2      	lsrs	r2, r2, #3
34189232:	4019      	ands	r1, r3
34189234:	687b      	ldr	r3, [r7, #4]
34189236:	3210      	adds	r2, #16
34189238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Reset control settings for the current IO */
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
3418923c:	697b      	ldr	r3, [r7, #20]
3418923e:	08da      	lsrs	r2, r3, #3
34189240:	687b      	ldr	r3, [r7, #4]
34189242:	3212      	adds	r2, #18
34189244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34189248:	697b      	ldr	r3, [r7, #20]
3418924a:	f003 0307 	and.w	r3, r3, #7
3418924e:	009b      	lsls	r3, r3, #2
34189250:	220f      	movs	r2, #15
34189252:	fa02 f303 	lsl.w	r3, r2, r3
34189256:	43db      	mvns	r3, r3
34189258:	697a      	ldr	r2, [r7, #20]
3418925a:	08d2      	lsrs	r2, r2, #3
3418925c:	4019      	ands	r1, r3
3418925e:	687b      	ldr	r3, [r7, #4]
34189260:	3212      	adds	r2, #18
34189262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    position++;
34189266:	697b      	ldr	r3, [r7, #20]
34189268:	3301      	adds	r3, #1
3418926a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
3418926c:	683a      	ldr	r2, [r7, #0]
3418926e:	697b      	ldr	r3, [r7, #20]
34189270:	fa22 f303 	lsr.w	r3, r2, r3
34189274:	2b00      	cmp	r3, #0
34189276:	f47f aeb4 	bne.w	34188fe2 <HAL_GPIO_DeInit+0xf6>
  }
}
3418927a:	bf00      	nop
3418927c:	bf00      	nop
3418927e:	3718      	adds	r7, #24
34189280:	46bd      	mov	sp, r7
34189282:	bd80      	pop	{r7, pc}
34189284:	56025000 	.word	0x56025000

34189288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34189288:	b580      	push	{r7, lr}
3418928a:	b082      	sub	sp, #8
3418928c:	af00      	add	r7, sp, #0
3418928e:	6078      	str	r0, [r7, #4]
34189290:	460b      	mov	r3, r1
34189292:	807b      	strh	r3, [r7, #2]
34189294:	4613      	mov	r3, r2
34189296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34189298:	887b      	ldrh	r3, [r7, #2]
3418929a:	2b00      	cmp	r3, #0
3418929c:	d104      	bne.n	341892a8 <HAL_GPIO_WritePin+0x20>
3418929e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
341892a2:	480e      	ldr	r0, [pc, #56]	@ (341892dc <HAL_GPIO_WritePin+0x54>)
341892a4:	f7f8 ffe2 	bl	3418226c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
341892a8:	787b      	ldrb	r3, [r7, #1]
341892aa:	2b00      	cmp	r3, #0
341892ac:	d007      	beq.n	341892be <HAL_GPIO_WritePin+0x36>
341892ae:	787b      	ldrb	r3, [r7, #1]
341892b0:	2b01      	cmp	r3, #1
341892b2:	d004      	beq.n	341892be <HAL_GPIO_WritePin+0x36>
341892b4:	f240 11a1 	movw	r1, #417	@ 0x1a1
341892b8:	4808      	ldr	r0, [pc, #32]	@ (341892dc <HAL_GPIO_WritePin+0x54>)
341892ba:	f7f8 ffd7 	bl	3418226c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
341892be:	787b      	ldrb	r3, [r7, #1]
341892c0:	2b00      	cmp	r3, #0
341892c2:	d003      	beq.n	341892cc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
341892c4:	887a      	ldrh	r2, [r7, #2]
341892c6:	687b      	ldr	r3, [r7, #4]
341892c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
341892ca:	e002      	b.n	341892d2 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
341892cc:	887a      	ldrh	r2, [r7, #2]
341892ce:	687b      	ldr	r3, [r7, #4]
341892d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
341892d2:	bf00      	nop
341892d4:	3708      	adds	r7, #8
341892d6:	46bd      	mov	sp, r7
341892d8:	bd80      	pop	{r7, pc}
341892da:	bf00      	nop
341892dc:	341a5154 	.word	0x341a5154

341892e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
341892e0:	b580      	push	{r7, lr}
341892e2:	b084      	sub	sp, #16
341892e4:	af00      	add	r7, sp, #0
341892e6:	6078      	str	r0, [r7, #4]
341892e8:	460b      	mov	r3, r1
341892ea:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
341892ec:	887b      	ldrh	r3, [r7, #2]
341892ee:	2b00      	cmp	r3, #0
341892f0:	d104      	bne.n	341892fc <HAL_GPIO_TogglePin+0x1c>
341892f2:	f240 11b9 	movw	r1, #441	@ 0x1b9
341892f6:	480a      	ldr	r0, [pc, #40]	@ (34189320 <HAL_GPIO_TogglePin+0x40>)
341892f8:	f7f8 ffb8 	bl	3418226c <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
341892fc:	687b      	ldr	r3, [r7, #4]
341892fe:	695b      	ldr	r3, [r3, #20]
34189300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34189302:	887a      	ldrh	r2, [r7, #2]
34189304:	68fb      	ldr	r3, [r7, #12]
34189306:	4013      	ands	r3, r2
34189308:	041a      	lsls	r2, r3, #16
3418930a:	68fb      	ldr	r3, [r7, #12]
3418930c:	43d9      	mvns	r1, r3
3418930e:	887b      	ldrh	r3, [r7, #2]
34189310:	400b      	ands	r3, r1
34189312:	431a      	orrs	r2, r3
34189314:	687b      	ldr	r3, [r7, #4]
34189316:	619a      	str	r2, [r3, #24]
}
34189318:	bf00      	nop
3418931a:	3710      	adds	r7, #16
3418931c:	46bd      	mov	sp, r7
3418931e:	bd80      	pop	{r7, pc}
34189320:	341a5154 	.word	0x341a5154

34189324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
34189324:	b580      	push	{r7, lr}
34189326:	b082      	sub	sp, #8
34189328:	af00      	add	r7, sp, #0
3418932a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
3418932c:	687b      	ldr	r3, [r7, #4]
3418932e:	2b00      	cmp	r3, #0
34189330:	d101      	bne.n	34189336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
34189332:	2301      	movs	r3, #1
34189334:	e13c      	b.n	341895b0 <HAL_I2C_Init+0x28c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34189336:	687b      	ldr	r3, [r7, #4]
34189338:	681b      	ldr	r3, [r3, #0]
3418933a:	4a71      	ldr	r2, [pc, #452]	@ (34189500 <HAL_I2C_Init+0x1dc>)
3418933c:	4293      	cmp	r3, r2
3418933e:	d027      	beq.n	34189390 <HAL_I2C_Init+0x6c>
34189340:	687b      	ldr	r3, [r7, #4]
34189342:	681b      	ldr	r3, [r3, #0]
34189344:	4a6f      	ldr	r2, [pc, #444]	@ (34189504 <HAL_I2C_Init+0x1e0>)
34189346:	4293      	cmp	r3, r2
34189348:	d022      	beq.n	34189390 <HAL_I2C_Init+0x6c>
3418934a:	687b      	ldr	r3, [r7, #4]
3418934c:	681b      	ldr	r3, [r3, #0]
3418934e:	4a6e      	ldr	r2, [pc, #440]	@ (34189508 <HAL_I2C_Init+0x1e4>)
34189350:	4293      	cmp	r3, r2
34189352:	d01d      	beq.n	34189390 <HAL_I2C_Init+0x6c>
34189354:	687b      	ldr	r3, [r7, #4]
34189356:	681b      	ldr	r3, [r3, #0]
34189358:	4a6c      	ldr	r2, [pc, #432]	@ (3418950c <HAL_I2C_Init+0x1e8>)
3418935a:	4293      	cmp	r3, r2
3418935c:	d018      	beq.n	34189390 <HAL_I2C_Init+0x6c>
3418935e:	687b      	ldr	r3, [r7, #4]
34189360:	681b      	ldr	r3, [r3, #0]
34189362:	4a6b      	ldr	r2, [pc, #428]	@ (34189510 <HAL_I2C_Init+0x1ec>)
34189364:	4293      	cmp	r3, r2
34189366:	d013      	beq.n	34189390 <HAL_I2C_Init+0x6c>
34189368:	687b      	ldr	r3, [r7, #4]
3418936a:	681b      	ldr	r3, [r3, #0]
3418936c:	4a69      	ldr	r2, [pc, #420]	@ (34189514 <HAL_I2C_Init+0x1f0>)
3418936e:	4293      	cmp	r3, r2
34189370:	d00e      	beq.n	34189390 <HAL_I2C_Init+0x6c>
34189372:	687b      	ldr	r3, [r7, #4]
34189374:	681b      	ldr	r3, [r3, #0]
34189376:	4a68      	ldr	r2, [pc, #416]	@ (34189518 <HAL_I2C_Init+0x1f4>)
34189378:	4293      	cmp	r3, r2
3418937a:	d009      	beq.n	34189390 <HAL_I2C_Init+0x6c>
3418937c:	687b      	ldr	r3, [r7, #4]
3418937e:	681b      	ldr	r3, [r3, #0]
34189380:	4a66      	ldr	r2, [pc, #408]	@ (3418951c <HAL_I2C_Init+0x1f8>)
34189382:	4293      	cmp	r3, r2
34189384:	d004      	beq.n	34189390 <HAL_I2C_Init+0x6c>
34189386:	f240 2126 	movw	r1, #550	@ 0x226
3418938a:	4865      	ldr	r0, [pc, #404]	@ (34189520 <HAL_I2C_Init+0x1fc>)
3418938c:	f7f8 ff6e 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
34189390:	687b      	ldr	r3, [r7, #4]
34189392:	689b      	ldr	r3, [r3, #8]
34189394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34189398:	d304      	bcc.n	341893a4 <HAL_I2C_Init+0x80>
3418939a:	f240 2127 	movw	r1, #551	@ 0x227
3418939e:	4860      	ldr	r0, [pc, #384]	@ (34189520 <HAL_I2C_Init+0x1fc>)
341893a0:	f7f8 ff64 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
341893a4:	687b      	ldr	r3, [r7, #4]
341893a6:	68db      	ldr	r3, [r3, #12]
341893a8:	2b01      	cmp	r3, #1
341893aa:	d008      	beq.n	341893be <HAL_I2C_Init+0x9a>
341893ac:	687b      	ldr	r3, [r7, #4]
341893ae:	68db      	ldr	r3, [r3, #12]
341893b0:	2b02      	cmp	r3, #2
341893b2:	d004      	beq.n	341893be <HAL_I2C_Init+0x9a>
341893b4:	f44f 710a 	mov.w	r1, #552	@ 0x228
341893b8:	4859      	ldr	r0, [pc, #356]	@ (34189520 <HAL_I2C_Init+0x1fc>)
341893ba:	f7f8 ff57 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
341893be:	687b      	ldr	r3, [r7, #4]
341893c0:	691b      	ldr	r3, [r3, #16]
341893c2:	2b00      	cmp	r3, #0
341893c4:	d009      	beq.n	341893da <HAL_I2C_Init+0xb6>
341893c6:	687b      	ldr	r3, [r7, #4]
341893c8:	691b      	ldr	r3, [r3, #16]
341893ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
341893ce:	d004      	beq.n	341893da <HAL_I2C_Init+0xb6>
341893d0:	f240 2129 	movw	r1, #553	@ 0x229
341893d4:	4852      	ldr	r0, [pc, #328]	@ (34189520 <HAL_I2C_Init+0x1fc>)
341893d6:	f7f8 ff49 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
341893da:	687b      	ldr	r3, [r7, #4]
341893dc:	695b      	ldr	r3, [r3, #20]
341893de:	2bff      	cmp	r3, #255	@ 0xff
341893e0:	d904      	bls.n	341893ec <HAL_I2C_Init+0xc8>
341893e2:	f240 212a 	movw	r1, #554	@ 0x22a
341893e6:	484e      	ldr	r0, [pc, #312]	@ (34189520 <HAL_I2C_Init+0x1fc>)
341893e8:	f7f8 ff40 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
341893ec:	687b      	ldr	r3, [r7, #4]
341893ee:	699b      	ldr	r3, [r3, #24]
341893f0:	2b00      	cmp	r3, #0
341893f2:	d020      	beq.n	34189436 <HAL_I2C_Init+0x112>
341893f4:	687b      	ldr	r3, [r7, #4]
341893f6:	699b      	ldr	r3, [r3, #24]
341893f8:	2b01      	cmp	r3, #1
341893fa:	d01c      	beq.n	34189436 <HAL_I2C_Init+0x112>
341893fc:	687b      	ldr	r3, [r7, #4]
341893fe:	699b      	ldr	r3, [r3, #24]
34189400:	2b02      	cmp	r3, #2
34189402:	d018      	beq.n	34189436 <HAL_I2C_Init+0x112>
34189404:	687b      	ldr	r3, [r7, #4]
34189406:	699b      	ldr	r3, [r3, #24]
34189408:	2b03      	cmp	r3, #3
3418940a:	d014      	beq.n	34189436 <HAL_I2C_Init+0x112>
3418940c:	687b      	ldr	r3, [r7, #4]
3418940e:	699b      	ldr	r3, [r3, #24]
34189410:	2b04      	cmp	r3, #4
34189412:	d010      	beq.n	34189436 <HAL_I2C_Init+0x112>
34189414:	687b      	ldr	r3, [r7, #4]
34189416:	699b      	ldr	r3, [r3, #24]
34189418:	2b05      	cmp	r3, #5
3418941a:	d00c      	beq.n	34189436 <HAL_I2C_Init+0x112>
3418941c:	687b      	ldr	r3, [r7, #4]
3418941e:	699b      	ldr	r3, [r3, #24]
34189420:	2b06      	cmp	r3, #6
34189422:	d008      	beq.n	34189436 <HAL_I2C_Init+0x112>
34189424:	687b      	ldr	r3, [r7, #4]
34189426:	699b      	ldr	r3, [r3, #24]
34189428:	2b07      	cmp	r3, #7
3418942a:	d004      	beq.n	34189436 <HAL_I2C_Init+0x112>
3418942c:	f240 212b 	movw	r1, #555	@ 0x22b
34189430:	483b      	ldr	r0, [pc, #236]	@ (34189520 <HAL_I2C_Init+0x1fc>)
34189432:	f7f8 ff1b 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
34189436:	687b      	ldr	r3, [r7, #4]
34189438:	69db      	ldr	r3, [r3, #28]
3418943a:	2b00      	cmp	r3, #0
3418943c:	d009      	beq.n	34189452 <HAL_I2C_Init+0x12e>
3418943e:	687b      	ldr	r3, [r7, #4]
34189440:	69db      	ldr	r3, [r3, #28]
34189442:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34189446:	d004      	beq.n	34189452 <HAL_I2C_Init+0x12e>
34189448:	f44f 710b 	mov.w	r1, #556	@ 0x22c
3418944c:	4834      	ldr	r0, [pc, #208]	@ (34189520 <HAL_I2C_Init+0x1fc>)
3418944e:	f7f8 ff0d 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
34189452:	687b      	ldr	r3, [r7, #4]
34189454:	6a1b      	ldr	r3, [r3, #32]
34189456:	2b00      	cmp	r3, #0
34189458:	d009      	beq.n	3418946e <HAL_I2C_Init+0x14a>
3418945a:	687b      	ldr	r3, [r7, #4]
3418945c:	6a1b      	ldr	r3, [r3, #32]
3418945e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189462:	d004      	beq.n	3418946e <HAL_I2C_Init+0x14a>
34189464:	f240 212d 	movw	r1, #557	@ 0x22d
34189468:	482d      	ldr	r0, [pc, #180]	@ (34189520 <HAL_I2C_Init+0x1fc>)
3418946a:	f7f8 feff 	bl	3418226c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
3418946e:	687b      	ldr	r3, [r7, #4]
34189470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34189474:	b2db      	uxtb	r3, r3
34189476:	2b00      	cmp	r3, #0
34189478:	d106      	bne.n	34189488 <HAL_I2C_Init+0x164>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
3418947a:	687b      	ldr	r3, [r7, #4]
3418947c:	2200      	movs	r2, #0
3418947e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
34189482:	6878      	ldr	r0, [r7, #4]
34189484:	f000 f906 	bl	34189694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
34189488:	687b      	ldr	r3, [r7, #4]
3418948a:	2224      	movs	r2, #36	@ 0x24
3418948c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
34189490:	687b      	ldr	r3, [r7, #4]
34189492:	681b      	ldr	r3, [r3, #0]
34189494:	681a      	ldr	r2, [r3, #0]
34189496:	687b      	ldr	r3, [r7, #4]
34189498:	681b      	ldr	r3, [r3, #0]
3418949a:	f022 0201 	bic.w	r2, r2, #1
3418949e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
341894a0:	687b      	ldr	r3, [r7, #4]
341894a2:	685a      	ldr	r2, [r3, #4]
341894a4:	687b      	ldr	r3, [r7, #4]
341894a6:	681b      	ldr	r3, [r3, #0]
341894a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
341894ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
341894ae:	687b      	ldr	r3, [r7, #4]
341894b0:	681b      	ldr	r3, [r3, #0]
341894b2:	689a      	ldr	r2, [r3, #8]
341894b4:	687b      	ldr	r3, [r7, #4]
341894b6:	681b      	ldr	r3, [r3, #0]
341894b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
341894bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
341894be:	687b      	ldr	r3, [r7, #4]
341894c0:	68db      	ldr	r3, [r3, #12]
341894c2:	2b01      	cmp	r3, #1
341894c4:	d107      	bne.n	341894d6 <HAL_I2C_Init+0x1b2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
341894c6:	687b      	ldr	r3, [r7, #4]
341894c8:	689a      	ldr	r2, [r3, #8]
341894ca:	687b      	ldr	r3, [r7, #4]
341894cc:	681b      	ldr	r3, [r3, #0]
341894ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
341894d2:	609a      	str	r2, [r3, #8]
341894d4:	e006      	b.n	341894e4 <HAL_I2C_Init+0x1c0>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
341894d6:	687b      	ldr	r3, [r7, #4]
341894d8:	689a      	ldr	r2, [r3, #8]
341894da:	687b      	ldr	r3, [r7, #4]
341894dc:	681b      	ldr	r3, [r3, #0]
341894de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
341894e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
341894e4:	687b      	ldr	r3, [r7, #4]
341894e6:	68db      	ldr	r3, [r3, #12]
341894e8:	2b02      	cmp	r3, #2
341894ea:	d11b      	bne.n	34189524 <HAL_I2C_Init+0x200>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
341894ec:	687b      	ldr	r3, [r7, #4]
341894ee:	681b      	ldr	r3, [r3, #0]
341894f0:	685a      	ldr	r2, [r3, #4]
341894f2:	687b      	ldr	r3, [r7, #4]
341894f4:	681b      	ldr	r3, [r3, #0]
341894f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
341894fa:	605a      	str	r2, [r3, #4]
341894fc:	e01a      	b.n	34189534 <HAL_I2C_Init+0x210>
341894fe:	bf00      	nop
34189500:	50005400 	.word	0x50005400
34189504:	40005400 	.word	0x40005400
34189508:	50005800 	.word	0x50005800
3418950c:	40005800 	.word	0x40005800
34189510:	50005c00 	.word	0x50005c00
34189514:	40005c00 	.word	0x40005c00
34189518:	56001c00 	.word	0x56001c00
3418951c:	46001c00 	.word	0x46001c00
34189520:	341a518c 	.word	0x341a518c
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34189524:	687b      	ldr	r3, [r7, #4]
34189526:	681b      	ldr	r3, [r3, #0]
34189528:	685a      	ldr	r2, [r3, #4]
3418952a:	687b      	ldr	r3, [r7, #4]
3418952c:	681b      	ldr	r3, [r3, #0]
3418952e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34189532:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34189534:	687b      	ldr	r3, [r7, #4]
34189536:	681b      	ldr	r3, [r3, #0]
34189538:	685b      	ldr	r3, [r3, #4]
3418953a:	687a      	ldr	r2, [r7, #4]
3418953c:	6812      	ldr	r2, [r2, #0]
3418953e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
34189542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34189546:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34189548:	687b      	ldr	r3, [r7, #4]
3418954a:	681b      	ldr	r3, [r3, #0]
3418954c:	68da      	ldr	r2, [r3, #12]
3418954e:	687b      	ldr	r3, [r7, #4]
34189550:	681b      	ldr	r3, [r3, #0]
34189552:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34189556:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34189558:	687b      	ldr	r3, [r7, #4]
3418955a:	691a      	ldr	r2, [r3, #16]
3418955c:	687b      	ldr	r3, [r7, #4]
3418955e:	695b      	ldr	r3, [r3, #20]
34189560:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
34189564:	687b      	ldr	r3, [r7, #4]
34189566:	699b      	ldr	r3, [r3, #24]
34189568:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
3418956a:	687b      	ldr	r3, [r7, #4]
3418956c:	681b      	ldr	r3, [r3, #0]
3418956e:	430a      	orrs	r2, r1
34189570:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
34189572:	687b      	ldr	r3, [r7, #4]
34189574:	69d9      	ldr	r1, [r3, #28]
34189576:	687b      	ldr	r3, [r7, #4]
34189578:	6a1a      	ldr	r2, [r3, #32]
3418957a:	687b      	ldr	r3, [r7, #4]
3418957c:	681b      	ldr	r3, [r3, #0]
3418957e:	430a      	orrs	r2, r1
34189580:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
34189582:	687b      	ldr	r3, [r7, #4]
34189584:	681b      	ldr	r3, [r3, #0]
34189586:	681a      	ldr	r2, [r3, #0]
34189588:	687b      	ldr	r3, [r7, #4]
3418958a:	681b      	ldr	r3, [r3, #0]
3418958c:	f042 0201 	orr.w	r2, r2, #1
34189590:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34189592:	687b      	ldr	r3, [r7, #4]
34189594:	2200      	movs	r2, #0
34189596:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
34189598:	687b      	ldr	r3, [r7, #4]
3418959a:	2220      	movs	r2, #32
3418959c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
341895a0:	687b      	ldr	r3, [r7, #4]
341895a2:	2200      	movs	r2, #0
341895a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
341895a6:	687b      	ldr	r3, [r7, #4]
341895a8:	2200      	movs	r2, #0
341895aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
341895ae:	2300      	movs	r3, #0
}
341895b0:	4618      	mov	r0, r3
341895b2:	3708      	adds	r7, #8
341895b4:	46bd      	mov	sp, r7
341895b6:	bd80      	pop	{r7, pc}

341895b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
341895b8:	b580      	push	{r7, lr}
341895ba:	b082      	sub	sp, #8
341895bc:	af00      	add	r7, sp, #0
341895be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
341895c0:	687b      	ldr	r3, [r7, #4]
341895c2:	2b00      	cmp	r3, #0
341895c4:	d101      	bne.n	341895ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
341895c6:	2301      	movs	r3, #1
341895c8:	e04e      	b.n	34189668 <HAL_I2C_DeInit+0xb0>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
341895ca:	687b      	ldr	r3, [r7, #4]
341895cc:	681b      	ldr	r3, [r3, #0]
341895ce:	4a28      	ldr	r2, [pc, #160]	@ (34189670 <HAL_I2C_DeInit+0xb8>)
341895d0:	4293      	cmp	r3, r2
341895d2:	d027      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
341895d4:	687b      	ldr	r3, [r7, #4]
341895d6:	681b      	ldr	r3, [r3, #0]
341895d8:	4a26      	ldr	r2, [pc, #152]	@ (34189674 <HAL_I2C_DeInit+0xbc>)
341895da:	4293      	cmp	r3, r2
341895dc:	d022      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
341895de:	687b      	ldr	r3, [r7, #4]
341895e0:	681b      	ldr	r3, [r3, #0]
341895e2:	4a25      	ldr	r2, [pc, #148]	@ (34189678 <HAL_I2C_DeInit+0xc0>)
341895e4:	4293      	cmp	r3, r2
341895e6:	d01d      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
341895e8:	687b      	ldr	r3, [r7, #4]
341895ea:	681b      	ldr	r3, [r3, #0]
341895ec:	4a23      	ldr	r2, [pc, #140]	@ (3418967c <HAL_I2C_DeInit+0xc4>)
341895ee:	4293      	cmp	r3, r2
341895f0:	d018      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
341895f2:	687b      	ldr	r3, [r7, #4]
341895f4:	681b      	ldr	r3, [r3, #0]
341895f6:	4a22      	ldr	r2, [pc, #136]	@ (34189680 <HAL_I2C_DeInit+0xc8>)
341895f8:	4293      	cmp	r3, r2
341895fa:	d013      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
341895fc:	687b      	ldr	r3, [r7, #4]
341895fe:	681b      	ldr	r3, [r3, #0]
34189600:	4a20      	ldr	r2, [pc, #128]	@ (34189684 <HAL_I2C_DeInit+0xcc>)
34189602:	4293      	cmp	r3, r2
34189604:	d00e      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
34189606:	687b      	ldr	r3, [r7, #4]
34189608:	681b      	ldr	r3, [r3, #0]
3418960a:	4a1f      	ldr	r2, [pc, #124]	@ (34189688 <HAL_I2C_DeInit+0xd0>)
3418960c:	4293      	cmp	r3, r2
3418960e:	d009      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
34189610:	687b      	ldr	r3, [r7, #4]
34189612:	681b      	ldr	r3, [r3, #0]
34189614:	4a1d      	ldr	r2, [pc, #116]	@ (3418968c <HAL_I2C_DeInit+0xd4>)
34189616:	4293      	cmp	r3, r2
34189618:	d004      	beq.n	34189624 <HAL_I2C_DeInit+0x6c>
3418961a:	f240 2199 	movw	r1, #665	@ 0x299
3418961e:	481c      	ldr	r0, [pc, #112]	@ (34189690 <HAL_I2C_DeInit+0xd8>)
34189620:	f7f8 fe24 	bl	3418226c <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
34189624:	687b      	ldr	r3, [r7, #4]
34189626:	2224      	movs	r2, #36	@ 0x24
34189628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
3418962c:	687b      	ldr	r3, [r7, #4]
3418962e:	681b      	ldr	r3, [r3, #0]
34189630:	681a      	ldr	r2, [r3, #0]
34189632:	687b      	ldr	r3, [r7, #4]
34189634:	681b      	ldr	r3, [r3, #0]
34189636:	f022 0201 	bic.w	r2, r2, #1
3418963a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
3418963c:	6878      	ldr	r0, [r7, #4]
3418963e:	f000 f833 	bl	341896a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34189642:	687b      	ldr	r3, [r7, #4]
34189644:	2200      	movs	r2, #0
34189646:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
34189648:	687b      	ldr	r3, [r7, #4]
3418964a:	2200      	movs	r2, #0
3418964c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
34189650:	687b      	ldr	r3, [r7, #4]
34189652:	2200      	movs	r2, #0
34189654:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
34189656:	687b      	ldr	r3, [r7, #4]
34189658:	2200      	movs	r2, #0
3418965a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
3418965e:	687b      	ldr	r3, [r7, #4]
34189660:	2200      	movs	r2, #0
34189662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
34189666:	2300      	movs	r3, #0
}
34189668:	4618      	mov	r0, r3
3418966a:	3708      	adds	r7, #8
3418966c:	46bd      	mov	sp, r7
3418966e:	bd80      	pop	{r7, pc}
34189670:	50005400 	.word	0x50005400
34189674:	40005400 	.word	0x40005400
34189678:	50005800 	.word	0x50005800
3418967c:	40005800 	.word	0x40005800
34189680:	50005c00 	.word	0x50005c00
34189684:	40005c00 	.word	0x40005c00
34189688:	56001c00 	.word	0x56001c00
3418968c:	46001c00 	.word	0x46001c00
34189690:	341a518c 	.word	0x341a518c

34189694 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
34189694:	b480      	push	{r7}
34189696:	b083      	sub	sp, #12
34189698:	af00      	add	r7, sp, #0
3418969a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
3418969c:	bf00      	nop
3418969e:	370c      	adds	r7, #12
341896a0:	46bd      	mov	sp, r7
341896a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341896a6:	4770      	bx	lr

341896a8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
341896a8:	b480      	push	{r7}
341896aa:	b083      	sub	sp, #12
341896ac:	af00      	add	r7, sp, #0
341896ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
341896b0:	bf00      	nop
341896b2:	370c      	adds	r7, #12
341896b4:	46bd      	mov	sp, r7
341896b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341896ba:	4770      	bx	lr

341896bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
341896bc:	b580      	push	{r7, lr}
341896be:	b088      	sub	sp, #32
341896c0:	af02      	add	r7, sp, #8
341896c2:	60f8      	str	r0, [r7, #12]
341896c4:	4608      	mov	r0, r1
341896c6:	4611      	mov	r1, r2
341896c8:	461a      	mov	r2, r3
341896ca:	4603      	mov	r3, r0
341896cc:	817b      	strh	r3, [r7, #10]
341896ce:	460b      	mov	r3, r1
341896d0:	813b      	strh	r3, [r7, #8]
341896d2:	4613      	mov	r3, r2
341896d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
341896d6:	88fb      	ldrh	r3, [r7, #6]
341896d8:	2b01      	cmp	r3, #1
341896da:	d007      	beq.n	341896ec <HAL_I2C_Mem_Write+0x30>
341896dc:	88fb      	ldrh	r3, [r7, #6]
341896de:	2b02      	cmp	r3, #2
341896e0:	d004      	beq.n	341896ec <HAL_I2C_Mem_Write+0x30>
341896e2:	f640 2138 	movw	r1, #2616	@ 0xa38
341896e6:	4884      	ldr	r0, [pc, #528]	@ (341898f8 <HAL_I2C_Mem_Write+0x23c>)
341896e8:	f7f8 fdc0 	bl	3418226c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
341896ec:	68fb      	ldr	r3, [r7, #12]
341896ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341896f2:	b2db      	uxtb	r3, r3
341896f4:	2b20      	cmp	r3, #32
341896f6:	f040 80f9 	bne.w	341898ec <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
341896fa:	6a3b      	ldr	r3, [r7, #32]
341896fc:	2b00      	cmp	r3, #0
341896fe:	d002      	beq.n	34189706 <HAL_I2C_Mem_Write+0x4a>
34189700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
34189702:	2b00      	cmp	r3, #0
34189704:	d105      	bne.n	34189712 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
34189706:	68fb      	ldr	r3, [r7, #12]
34189708:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418970c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
3418970e:	2301      	movs	r3, #1
34189710:	e0ed      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
34189712:	68fb      	ldr	r3, [r7, #12]
34189714:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34189718:	2b01      	cmp	r3, #1
3418971a:	d101      	bne.n	34189720 <HAL_I2C_Mem_Write+0x64>
3418971c:	2302      	movs	r3, #2
3418971e:	e0e6      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
34189720:	68fb      	ldr	r3, [r7, #12]
34189722:	2201      	movs	r2, #1
34189724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
34189728:	f7fa ff0a 	bl	34184540 <HAL_GetTick>
3418972c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
3418972e:	697b      	ldr	r3, [r7, #20]
34189730:	9300      	str	r3, [sp, #0]
34189732:	2319      	movs	r3, #25
34189734:	2201      	movs	r2, #1
34189736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3418973a:	68f8      	ldr	r0, [r7, #12]
3418973c:	f000 faee 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189740:	4603      	mov	r3, r0
34189742:	2b00      	cmp	r3, #0
34189744:	d001      	beq.n	3418974a <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
34189746:	2301      	movs	r3, #1
34189748:	e0d1      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
3418974a:	68fb      	ldr	r3, [r7, #12]
3418974c:	2221      	movs	r2, #33	@ 0x21
3418974e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
34189752:	68fb      	ldr	r3, [r7, #12]
34189754:	2240      	movs	r2, #64	@ 0x40
34189756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3418975a:	68fb      	ldr	r3, [r7, #12]
3418975c:	2200      	movs	r2, #0
3418975e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
34189760:	68fb      	ldr	r3, [r7, #12]
34189762:	6a3a      	ldr	r2, [r7, #32]
34189764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
34189766:	68fb      	ldr	r3, [r7, #12]
34189768:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
3418976a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
3418976c:	68fb      	ldr	r3, [r7, #12]
3418976e:	2200      	movs	r2, #0
34189770:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
34189772:	88f8      	ldrh	r0, [r7, #6]
34189774:	893a      	ldrh	r2, [r7, #8]
34189776:	8979      	ldrh	r1, [r7, #10]
34189778:	697b      	ldr	r3, [r7, #20]
3418977a:	9301      	str	r3, [sp, #4]
3418977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418977e:	9300      	str	r3, [sp, #0]
34189780:	4603      	mov	r3, r0
34189782:	68f8      	ldr	r0, [r7, #12]
34189784:	f000 f9fe 	bl	34189b84 <I2C_RequestMemoryWrite>
34189788:	4603      	mov	r3, r0
3418978a:	2b00      	cmp	r3, #0
3418978c:	d005      	beq.n	3418979a <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
3418978e:	68fb      	ldr	r3, [r7, #12]
34189790:	2200      	movs	r2, #0
34189792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
34189796:	2301      	movs	r3, #1
34189798:	e0a9      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
3418979a:	68fb      	ldr	r3, [r7, #12]
3418979c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418979e:	b29b      	uxth	r3, r3
341897a0:	2bff      	cmp	r3, #255	@ 0xff
341897a2:	d90e      	bls.n	341897c2 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
341897a4:	68fb      	ldr	r3, [r7, #12]
341897a6:	22ff      	movs	r2, #255	@ 0xff
341897a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
341897aa:	68fb      	ldr	r3, [r7, #12]
341897ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341897ae:	b2da      	uxtb	r2, r3
341897b0:	8979      	ldrh	r1, [r7, #10]
341897b2:	2300      	movs	r3, #0
341897b4:	9300      	str	r3, [sp, #0]
341897b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341897ba:	68f8      	ldr	r0, [r7, #12]
341897bc:	f000 fc72 	bl	3418a0a4 <I2C_TransferConfig>
341897c0:	e00f      	b.n	341897e2 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
341897c2:	68fb      	ldr	r3, [r7, #12]
341897c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341897c6:	b29a      	uxth	r2, r3
341897c8:	68fb      	ldr	r3, [r7, #12]
341897ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
341897cc:	68fb      	ldr	r3, [r7, #12]
341897ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341897d0:	b2da      	uxtb	r2, r3
341897d2:	8979      	ldrh	r1, [r7, #10]
341897d4:	2300      	movs	r3, #0
341897d6:	9300      	str	r3, [sp, #0]
341897d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341897dc:	68f8      	ldr	r0, [r7, #12]
341897de:	f000 fc61 	bl	3418a0a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
341897e2:	697a      	ldr	r2, [r7, #20]
341897e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341897e6:	68f8      	ldr	r0, [r7, #12]
341897e8:	f000 faf1 	bl	34189dce <I2C_WaitOnTXISFlagUntilTimeout>
341897ec:	4603      	mov	r3, r0
341897ee:	2b00      	cmp	r3, #0
341897f0:	d001      	beq.n	341897f6 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
341897f2:	2301      	movs	r3, #1
341897f4:	e07b      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
341897f6:	68fb      	ldr	r3, [r7, #12]
341897f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341897fa:	781a      	ldrb	r2, [r3, #0]
341897fc:	68fb      	ldr	r3, [r7, #12]
341897fe:	681b      	ldr	r3, [r3, #0]
34189800:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
34189802:	68fb      	ldr	r3, [r7, #12]
34189804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189806:	1c5a      	adds	r2, r3, #1
34189808:	68fb      	ldr	r3, [r7, #12]
3418980a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
3418980c:	68fb      	ldr	r3, [r7, #12]
3418980e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189810:	b29b      	uxth	r3, r3
34189812:	3b01      	subs	r3, #1
34189814:	b29a      	uxth	r2, r3
34189816:	68fb      	ldr	r3, [r7, #12]
34189818:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
3418981a:	68fb      	ldr	r3, [r7, #12]
3418981c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418981e:	3b01      	subs	r3, #1
34189820:	b29a      	uxth	r2, r3
34189822:	68fb      	ldr	r3, [r7, #12]
34189824:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34189826:	68fb      	ldr	r3, [r7, #12]
34189828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418982a:	b29b      	uxth	r3, r3
3418982c:	2b00      	cmp	r3, #0
3418982e:	d034      	beq.n	3418989a <HAL_I2C_Mem_Write+0x1de>
34189830:	68fb      	ldr	r3, [r7, #12]
34189832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189834:	2b00      	cmp	r3, #0
34189836:	d130      	bne.n	3418989a <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
34189838:	697b      	ldr	r3, [r7, #20]
3418983a:	9300      	str	r3, [sp, #0]
3418983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418983e:	2200      	movs	r2, #0
34189840:	2180      	movs	r1, #128	@ 0x80
34189842:	68f8      	ldr	r0, [r7, #12]
34189844:	f000 fa6a 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189848:	4603      	mov	r3, r0
3418984a:	2b00      	cmp	r3, #0
3418984c:	d001      	beq.n	34189852 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
3418984e:	2301      	movs	r3, #1
34189850:	e04d      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
34189852:	68fb      	ldr	r3, [r7, #12]
34189854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189856:	b29b      	uxth	r3, r3
34189858:	2bff      	cmp	r3, #255	@ 0xff
3418985a:	d90e      	bls.n	3418987a <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
3418985c:	68fb      	ldr	r3, [r7, #12]
3418985e:	22ff      	movs	r2, #255	@ 0xff
34189860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34189862:	68fb      	ldr	r3, [r7, #12]
34189864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189866:	b2da      	uxtb	r2, r3
34189868:	8979      	ldrh	r1, [r7, #10]
3418986a:	2300      	movs	r3, #0
3418986c:	9300      	str	r3, [sp, #0]
3418986e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34189872:	68f8      	ldr	r0, [r7, #12]
34189874:	f000 fc16 	bl	3418a0a4 <I2C_TransferConfig>
34189878:	e00f      	b.n	3418989a <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
3418987a:	68fb      	ldr	r3, [r7, #12]
3418987c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418987e:	b29a      	uxth	r2, r3
34189880:	68fb      	ldr	r3, [r7, #12]
34189882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34189884:	68fb      	ldr	r3, [r7, #12]
34189886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189888:	b2da      	uxtb	r2, r3
3418988a:	8979      	ldrh	r1, [r7, #10]
3418988c:	2300      	movs	r3, #0
3418988e:	9300      	str	r3, [sp, #0]
34189890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34189894:	68f8      	ldr	r0, [r7, #12]
34189896:	f000 fc05 	bl	3418a0a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
3418989a:	68fb      	ldr	r3, [r7, #12]
3418989c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
3418989e:	b29b      	uxth	r3, r3
341898a0:	2b00      	cmp	r3, #0
341898a2:	d19e      	bne.n	341897e2 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
341898a4:	697a      	ldr	r2, [r7, #20]
341898a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341898a8:	68f8      	ldr	r0, [r7, #12]
341898aa:	f000 fad7 	bl	34189e5c <I2C_WaitOnSTOPFlagUntilTimeout>
341898ae:	4603      	mov	r3, r0
341898b0:	2b00      	cmp	r3, #0
341898b2:	d001      	beq.n	341898b8 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
341898b4:	2301      	movs	r3, #1
341898b6:	e01a      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
341898b8:	68fb      	ldr	r3, [r7, #12]
341898ba:	681b      	ldr	r3, [r3, #0]
341898bc:	2220      	movs	r2, #32
341898be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
341898c0:	68fb      	ldr	r3, [r7, #12]
341898c2:	681b      	ldr	r3, [r3, #0]
341898c4:	6859      	ldr	r1, [r3, #4]
341898c6:	68fb      	ldr	r3, [r7, #12]
341898c8:	681a      	ldr	r2, [r3, #0]
341898ca:	4b0c      	ldr	r3, [pc, #48]	@ (341898fc <HAL_I2C_Mem_Write+0x240>)
341898cc:	400b      	ands	r3, r1
341898ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
341898d0:	68fb      	ldr	r3, [r7, #12]
341898d2:	2220      	movs	r2, #32
341898d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
341898d8:	68fb      	ldr	r3, [r7, #12]
341898da:	2200      	movs	r2, #0
341898dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
341898e0:	68fb      	ldr	r3, [r7, #12]
341898e2:	2200      	movs	r2, #0
341898e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
341898e8:	2300      	movs	r3, #0
341898ea:	e000      	b.n	341898ee <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
341898ec:	2302      	movs	r3, #2
  }
}
341898ee:	4618      	mov	r0, r3
341898f0:	3718      	adds	r7, #24
341898f2:	46bd      	mov	sp, r7
341898f4:	bd80      	pop	{r7, pc}
341898f6:	bf00      	nop
341898f8:	341a518c 	.word	0x341a518c
341898fc:	fe00e800 	.word	0xfe00e800

34189900 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34189900:	b580      	push	{r7, lr}
34189902:	b088      	sub	sp, #32
34189904:	af02      	add	r7, sp, #8
34189906:	60f8      	str	r0, [r7, #12]
34189908:	4608      	mov	r0, r1
3418990a:	4611      	mov	r1, r2
3418990c:	461a      	mov	r2, r3
3418990e:	4603      	mov	r3, r0
34189910:	817b      	strh	r3, [r7, #10]
34189912:	460b      	mov	r3, r1
34189914:	813b      	strh	r3, [r7, #8]
34189916:	4613      	mov	r3, r2
34189918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
3418991a:	88fb      	ldrh	r3, [r7, #6]
3418991c:	2b01      	cmp	r3, #1
3418991e:	d007      	beq.n	34189930 <HAL_I2C_Mem_Read+0x30>
34189920:	88fb      	ldrh	r3, [r7, #6]
34189922:	2b02      	cmp	r3, #2
34189924:	d004      	beq.n	34189930 <HAL_I2C_Mem_Read+0x30>
34189926:	f640 21c1 	movw	r1, #2753	@ 0xac1
3418992a:	4886      	ldr	r0, [pc, #536]	@ (34189b44 <HAL_I2C_Mem_Read+0x244>)
3418992c:	f7f8 fc9e 	bl	3418226c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
34189930:	68fb      	ldr	r3, [r7, #12]
34189932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34189936:	b2db      	uxtb	r3, r3
34189938:	2b20      	cmp	r3, #32
3418993a:	f040 80fd 	bne.w	34189b38 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
3418993e:	6a3b      	ldr	r3, [r7, #32]
34189940:	2b00      	cmp	r3, #0
34189942:	d002      	beq.n	3418994a <HAL_I2C_Mem_Read+0x4a>
34189944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
34189946:	2b00      	cmp	r3, #0
34189948:	d105      	bne.n	34189956 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
3418994a:	68fb      	ldr	r3, [r7, #12]
3418994c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34189950:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
34189952:	2301      	movs	r3, #1
34189954:	e0f1      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
34189956:	68fb      	ldr	r3, [r7, #12]
34189958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418995c:	2b01      	cmp	r3, #1
3418995e:	d101      	bne.n	34189964 <HAL_I2C_Mem_Read+0x64>
34189960:	2302      	movs	r3, #2
34189962:	e0ea      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
34189964:	68fb      	ldr	r3, [r7, #12]
34189966:	2201      	movs	r2, #1
34189968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
3418996c:	f7fa fde8 	bl	34184540 <HAL_GetTick>
34189970:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34189972:	697b      	ldr	r3, [r7, #20]
34189974:	9300      	str	r3, [sp, #0]
34189976:	2319      	movs	r3, #25
34189978:	2201      	movs	r2, #1
3418997a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3418997e:	68f8      	ldr	r0, [r7, #12]
34189980:	f000 f9cc 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189984:	4603      	mov	r3, r0
34189986:	2b00      	cmp	r3, #0
34189988:	d001      	beq.n	3418998e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
3418998a:	2301      	movs	r3, #1
3418998c:	e0d5      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
3418998e:	68fb      	ldr	r3, [r7, #12]
34189990:	2222      	movs	r2, #34	@ 0x22
34189992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
34189996:	68fb      	ldr	r3, [r7, #12]
34189998:	2240      	movs	r2, #64	@ 0x40
3418999a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3418999e:	68fb      	ldr	r3, [r7, #12]
341899a0:	2200      	movs	r2, #0
341899a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
341899a4:	68fb      	ldr	r3, [r7, #12]
341899a6:	6a3a      	ldr	r2, [r7, #32]
341899a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
341899aa:	68fb      	ldr	r3, [r7, #12]
341899ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
341899ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
341899b0:	68fb      	ldr	r3, [r7, #12]
341899b2:	2200      	movs	r2, #0
341899b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
341899b6:	88f8      	ldrh	r0, [r7, #6]
341899b8:	893a      	ldrh	r2, [r7, #8]
341899ba:	8979      	ldrh	r1, [r7, #10]
341899bc:	697b      	ldr	r3, [r7, #20]
341899be:	9301      	str	r3, [sp, #4]
341899c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341899c2:	9300      	str	r3, [sp, #0]
341899c4:	4603      	mov	r3, r0
341899c6:	68f8      	ldr	r0, [r7, #12]
341899c8:	f000 f930 	bl	34189c2c <I2C_RequestMemoryRead>
341899cc:	4603      	mov	r3, r0
341899ce:	2b00      	cmp	r3, #0
341899d0:	d005      	beq.n	341899de <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
341899d2:	68fb      	ldr	r3, [r7, #12]
341899d4:	2200      	movs	r2, #0
341899d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
341899da:	2301      	movs	r3, #1
341899dc:	e0ad      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
341899de:	68fb      	ldr	r3, [r7, #12]
341899e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
341899e2:	b29b      	uxth	r3, r3
341899e4:	2bff      	cmp	r3, #255	@ 0xff
341899e6:	d90e      	bls.n	34189a06 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
341899e8:	68fb      	ldr	r3, [r7, #12]
341899ea:	22ff      	movs	r2, #255	@ 0xff
341899ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
341899ee:	68fb      	ldr	r3, [r7, #12]
341899f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341899f2:	b2da      	uxtb	r2, r3
341899f4:	8979      	ldrh	r1, [r7, #10]
341899f6:	4b54      	ldr	r3, [pc, #336]	@ (34189b48 <HAL_I2C_Mem_Read+0x248>)
341899f8:	9300      	str	r3, [sp, #0]
341899fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341899fe:	68f8      	ldr	r0, [r7, #12]
34189a00:	f000 fb50 	bl	3418a0a4 <I2C_TransferConfig>
34189a04:	e00f      	b.n	34189a26 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
34189a06:	68fb      	ldr	r3, [r7, #12]
34189a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189a0a:	b29a      	uxth	r2, r3
34189a0c:	68fb      	ldr	r3, [r7, #12]
34189a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34189a10:	68fb      	ldr	r3, [r7, #12]
34189a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189a14:	b2da      	uxtb	r2, r3
34189a16:	8979      	ldrh	r1, [r7, #10]
34189a18:	4b4b      	ldr	r3, [pc, #300]	@ (34189b48 <HAL_I2C_Mem_Read+0x248>)
34189a1a:	9300      	str	r3, [sp, #0]
34189a1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34189a20:	68f8      	ldr	r0, [r7, #12]
34189a22:	f000 fb3f 	bl	3418a0a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
34189a26:	697b      	ldr	r3, [r7, #20]
34189a28:	9300      	str	r3, [sp, #0]
34189a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a2c:	2200      	movs	r2, #0
34189a2e:	2104      	movs	r1, #4
34189a30:	68f8      	ldr	r0, [r7, #12]
34189a32:	f000 f973 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189a36:	4603      	mov	r3, r0
34189a38:	2b00      	cmp	r3, #0
34189a3a:	d001      	beq.n	34189a40 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
34189a3c:	2301      	movs	r3, #1
34189a3e:	e07c      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
34189a40:	68fb      	ldr	r3, [r7, #12]
34189a42:	681b      	ldr	r3, [r3, #0]
34189a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34189a46:	68fb      	ldr	r3, [r7, #12]
34189a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189a4a:	b2d2      	uxtb	r2, r2
34189a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
34189a4e:	68fb      	ldr	r3, [r7, #12]
34189a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34189a52:	1c5a      	adds	r2, r3, #1
34189a54:	68fb      	ldr	r3, [r7, #12]
34189a56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
34189a58:	68fb      	ldr	r3, [r7, #12]
34189a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189a5c:	3b01      	subs	r3, #1
34189a5e:	b29a      	uxth	r2, r3
34189a60:	68fb      	ldr	r3, [r7, #12]
34189a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
34189a64:	68fb      	ldr	r3, [r7, #12]
34189a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189a68:	b29b      	uxth	r3, r3
34189a6a:	3b01      	subs	r3, #1
34189a6c:	b29a      	uxth	r2, r3
34189a6e:	68fb      	ldr	r3, [r7, #12]
34189a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34189a72:	68fb      	ldr	r3, [r7, #12]
34189a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189a76:	b29b      	uxth	r3, r3
34189a78:	2b00      	cmp	r3, #0
34189a7a:	d034      	beq.n	34189ae6 <HAL_I2C_Mem_Read+0x1e6>
34189a7c:	68fb      	ldr	r3, [r7, #12]
34189a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189a80:	2b00      	cmp	r3, #0
34189a82:	d130      	bne.n	34189ae6 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
34189a84:	697b      	ldr	r3, [r7, #20]
34189a86:	9300      	str	r3, [sp, #0]
34189a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34189a8a:	2200      	movs	r2, #0
34189a8c:	2180      	movs	r1, #128	@ 0x80
34189a8e:	68f8      	ldr	r0, [r7, #12]
34189a90:	f000 f944 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189a94:	4603      	mov	r3, r0
34189a96:	2b00      	cmp	r3, #0
34189a98:	d001      	beq.n	34189a9e <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
34189a9a:	2301      	movs	r3, #1
34189a9c:	e04d      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
34189a9e:	68fb      	ldr	r3, [r7, #12]
34189aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189aa2:	b29b      	uxth	r3, r3
34189aa4:	2bff      	cmp	r3, #255	@ 0xff
34189aa6:	d90e      	bls.n	34189ac6 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
34189aa8:	68fb      	ldr	r3, [r7, #12]
34189aaa:	22ff      	movs	r2, #255	@ 0xff
34189aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
34189aae:	68fb      	ldr	r3, [r7, #12]
34189ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189ab2:	b2da      	uxtb	r2, r3
34189ab4:	8979      	ldrh	r1, [r7, #10]
34189ab6:	2300      	movs	r3, #0
34189ab8:	9300      	str	r3, [sp, #0]
34189aba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34189abe:	68f8      	ldr	r0, [r7, #12]
34189ac0:	f000 faf0 	bl	3418a0a4 <I2C_TransferConfig>
34189ac4:	e00f      	b.n	34189ae6 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
34189ac6:	68fb      	ldr	r3, [r7, #12]
34189ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189aca:	b29a      	uxth	r2, r3
34189acc:	68fb      	ldr	r3, [r7, #12]
34189ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34189ad0:	68fb      	ldr	r3, [r7, #12]
34189ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34189ad4:	b2da      	uxtb	r2, r3
34189ad6:	8979      	ldrh	r1, [r7, #10]
34189ad8:	2300      	movs	r3, #0
34189ada:	9300      	str	r3, [sp, #0]
34189adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34189ae0:	68f8      	ldr	r0, [r7, #12]
34189ae2:	f000 fadf 	bl	3418a0a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
34189ae6:	68fb      	ldr	r3, [r7, #12]
34189ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
34189aea:	b29b      	uxth	r3, r3
34189aec:	2b00      	cmp	r3, #0
34189aee:	d19a      	bne.n	34189a26 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
34189af0:	697a      	ldr	r2, [r7, #20]
34189af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34189af4:	68f8      	ldr	r0, [r7, #12]
34189af6:	f000 f9b1 	bl	34189e5c <I2C_WaitOnSTOPFlagUntilTimeout>
34189afa:	4603      	mov	r3, r0
34189afc:	2b00      	cmp	r3, #0
34189afe:	d001      	beq.n	34189b04 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
34189b00:	2301      	movs	r3, #1
34189b02:	e01a      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34189b04:	68fb      	ldr	r3, [r7, #12]
34189b06:	681b      	ldr	r3, [r3, #0]
34189b08:	2220      	movs	r2, #32
34189b0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
34189b0c:	68fb      	ldr	r3, [r7, #12]
34189b0e:	681b      	ldr	r3, [r3, #0]
34189b10:	6859      	ldr	r1, [r3, #4]
34189b12:	68fb      	ldr	r3, [r7, #12]
34189b14:	681a      	ldr	r2, [r3, #0]
34189b16:	4b0d      	ldr	r3, [pc, #52]	@ (34189b4c <HAL_I2C_Mem_Read+0x24c>)
34189b18:	400b      	ands	r3, r1
34189b1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
34189b1c:	68fb      	ldr	r3, [r7, #12]
34189b1e:	2220      	movs	r2, #32
34189b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34189b24:	68fb      	ldr	r3, [r7, #12]
34189b26:	2200      	movs	r2, #0
34189b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34189b2c:	68fb      	ldr	r3, [r7, #12]
34189b2e:	2200      	movs	r2, #0
34189b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
34189b34:	2300      	movs	r3, #0
34189b36:	e000      	b.n	34189b3a <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
34189b38:	2302      	movs	r3, #2
  }
}
34189b3a:	4618      	mov	r0, r3
34189b3c:	3718      	adds	r7, #24
34189b3e:	46bd      	mov	sp, r7
34189b40:	bd80      	pop	{r7, pc}
34189b42:	bf00      	nop
34189b44:	341a518c 	.word	0x341a518c
34189b48:	80002400 	.word	0x80002400
34189b4c:	fe00e800 	.word	0xfe00e800

34189b50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
34189b50:	b480      	push	{r7}
34189b52:	b083      	sub	sp, #12
34189b54:	af00      	add	r7, sp, #0
34189b56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
34189b58:	687b      	ldr	r3, [r7, #4]
34189b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34189b5e:	b2db      	uxtb	r3, r3
}
34189b60:	4618      	mov	r0, r3
34189b62:	370c      	adds	r7, #12
34189b64:	46bd      	mov	sp, r7
34189b66:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b6a:	4770      	bx	lr

34189b6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
34189b6c:	b480      	push	{r7}
34189b6e:	b083      	sub	sp, #12
34189b70:	af00      	add	r7, sp, #0
34189b72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
34189b74:	687b      	ldr	r3, [r7, #4]
34189b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
34189b78:	4618      	mov	r0, r3
34189b7a:	370c      	adds	r7, #12
34189b7c:	46bd      	mov	sp, r7
34189b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34189b82:	4770      	bx	lr

34189b84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
34189b84:	b580      	push	{r7, lr}
34189b86:	b086      	sub	sp, #24
34189b88:	af02      	add	r7, sp, #8
34189b8a:	60f8      	str	r0, [r7, #12]
34189b8c:	4608      	mov	r0, r1
34189b8e:	4611      	mov	r1, r2
34189b90:	461a      	mov	r2, r3
34189b92:	4603      	mov	r3, r0
34189b94:	817b      	strh	r3, [r7, #10]
34189b96:	460b      	mov	r3, r1
34189b98:	813b      	strh	r3, [r7, #8]
34189b9a:	4613      	mov	r3, r2
34189b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
34189b9e:	88fb      	ldrh	r3, [r7, #6]
34189ba0:	b2da      	uxtb	r2, r3
34189ba2:	8979      	ldrh	r1, [r7, #10]
34189ba4:	4b20      	ldr	r3, [pc, #128]	@ (34189c28 <I2C_RequestMemoryWrite+0xa4>)
34189ba6:	9300      	str	r3, [sp, #0]
34189ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34189bac:	68f8      	ldr	r0, [r7, #12]
34189bae:	f000 fa79 	bl	3418a0a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34189bb2:	69fa      	ldr	r2, [r7, #28]
34189bb4:	69b9      	ldr	r1, [r7, #24]
34189bb6:	68f8      	ldr	r0, [r7, #12]
34189bb8:	f000 f909 	bl	34189dce <I2C_WaitOnTXISFlagUntilTimeout>
34189bbc:	4603      	mov	r3, r0
34189bbe:	2b00      	cmp	r3, #0
34189bc0:	d001      	beq.n	34189bc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
34189bc2:	2301      	movs	r3, #1
34189bc4:	e02c      	b.n	34189c20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34189bc6:	88fb      	ldrh	r3, [r7, #6]
34189bc8:	2b01      	cmp	r3, #1
34189bca:	d105      	bne.n	34189bd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34189bcc:	893b      	ldrh	r3, [r7, #8]
34189bce:	b2da      	uxtb	r2, r3
34189bd0:	68fb      	ldr	r3, [r7, #12]
34189bd2:	681b      	ldr	r3, [r3, #0]
34189bd4:	629a      	str	r2, [r3, #40]	@ 0x28
34189bd6:	e015      	b.n	34189c04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
34189bd8:	893b      	ldrh	r3, [r7, #8]
34189bda:	0a1b      	lsrs	r3, r3, #8
34189bdc:	b29b      	uxth	r3, r3
34189bde:	b2da      	uxtb	r2, r3
34189be0:	68fb      	ldr	r3, [r7, #12]
34189be2:	681b      	ldr	r3, [r3, #0]
34189be4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34189be6:	69fa      	ldr	r2, [r7, #28]
34189be8:	69b9      	ldr	r1, [r7, #24]
34189bea:	68f8      	ldr	r0, [r7, #12]
34189bec:	f000 f8ef 	bl	34189dce <I2C_WaitOnTXISFlagUntilTimeout>
34189bf0:	4603      	mov	r3, r0
34189bf2:	2b00      	cmp	r3, #0
34189bf4:	d001      	beq.n	34189bfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
34189bf6:	2301      	movs	r3, #1
34189bf8:	e012      	b.n	34189c20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34189bfa:	893b      	ldrh	r3, [r7, #8]
34189bfc:	b2da      	uxtb	r2, r3
34189bfe:	68fb      	ldr	r3, [r7, #12]
34189c00:	681b      	ldr	r3, [r3, #0]
34189c02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
34189c04:	69fb      	ldr	r3, [r7, #28]
34189c06:	9300      	str	r3, [sp, #0]
34189c08:	69bb      	ldr	r3, [r7, #24]
34189c0a:	2200      	movs	r2, #0
34189c0c:	2180      	movs	r1, #128	@ 0x80
34189c0e:	68f8      	ldr	r0, [r7, #12]
34189c10:	f000 f884 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189c14:	4603      	mov	r3, r0
34189c16:	2b00      	cmp	r3, #0
34189c18:	d001      	beq.n	34189c1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
34189c1a:	2301      	movs	r3, #1
34189c1c:	e000      	b.n	34189c20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
34189c1e:	2300      	movs	r3, #0
}
34189c20:	4618      	mov	r0, r3
34189c22:	3710      	adds	r7, #16
34189c24:	46bd      	mov	sp, r7
34189c26:	bd80      	pop	{r7, pc}
34189c28:	80002000 	.word	0x80002000

34189c2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
34189c2c:	b580      	push	{r7, lr}
34189c2e:	b086      	sub	sp, #24
34189c30:	af02      	add	r7, sp, #8
34189c32:	60f8      	str	r0, [r7, #12]
34189c34:	4608      	mov	r0, r1
34189c36:	4611      	mov	r1, r2
34189c38:	461a      	mov	r2, r3
34189c3a:	4603      	mov	r3, r0
34189c3c:	817b      	strh	r3, [r7, #10]
34189c3e:	460b      	mov	r3, r1
34189c40:	813b      	strh	r3, [r7, #8]
34189c42:	4613      	mov	r3, r2
34189c44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
34189c46:	88fb      	ldrh	r3, [r7, #6]
34189c48:	b2da      	uxtb	r2, r3
34189c4a:	8979      	ldrh	r1, [r7, #10]
34189c4c:	4b20      	ldr	r3, [pc, #128]	@ (34189cd0 <I2C_RequestMemoryRead+0xa4>)
34189c4e:	9300      	str	r3, [sp, #0]
34189c50:	2300      	movs	r3, #0
34189c52:	68f8      	ldr	r0, [r7, #12]
34189c54:	f000 fa26 	bl	3418a0a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34189c58:	69fa      	ldr	r2, [r7, #28]
34189c5a:	69b9      	ldr	r1, [r7, #24]
34189c5c:	68f8      	ldr	r0, [r7, #12]
34189c5e:	f000 f8b6 	bl	34189dce <I2C_WaitOnTXISFlagUntilTimeout>
34189c62:	4603      	mov	r3, r0
34189c64:	2b00      	cmp	r3, #0
34189c66:	d001      	beq.n	34189c6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
34189c68:	2301      	movs	r3, #1
34189c6a:	e02c      	b.n	34189cc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34189c6c:	88fb      	ldrh	r3, [r7, #6]
34189c6e:	2b01      	cmp	r3, #1
34189c70:	d105      	bne.n	34189c7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34189c72:	893b      	ldrh	r3, [r7, #8]
34189c74:	b2da      	uxtb	r2, r3
34189c76:	68fb      	ldr	r3, [r7, #12]
34189c78:	681b      	ldr	r3, [r3, #0]
34189c7a:	629a      	str	r2, [r3, #40]	@ 0x28
34189c7c:	e015      	b.n	34189caa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
34189c7e:	893b      	ldrh	r3, [r7, #8]
34189c80:	0a1b      	lsrs	r3, r3, #8
34189c82:	b29b      	uxth	r3, r3
34189c84:	b2da      	uxtb	r2, r3
34189c86:	68fb      	ldr	r3, [r7, #12]
34189c88:	681b      	ldr	r3, [r3, #0]
34189c8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34189c8c:	69fa      	ldr	r2, [r7, #28]
34189c8e:	69b9      	ldr	r1, [r7, #24]
34189c90:	68f8      	ldr	r0, [r7, #12]
34189c92:	f000 f89c 	bl	34189dce <I2C_WaitOnTXISFlagUntilTimeout>
34189c96:	4603      	mov	r3, r0
34189c98:	2b00      	cmp	r3, #0
34189c9a:	d001      	beq.n	34189ca0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
34189c9c:	2301      	movs	r3, #1
34189c9e:	e012      	b.n	34189cc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34189ca0:	893b      	ldrh	r3, [r7, #8]
34189ca2:	b2da      	uxtb	r2, r3
34189ca4:	68fb      	ldr	r3, [r7, #12]
34189ca6:	681b      	ldr	r3, [r3, #0]
34189ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
34189caa:	69fb      	ldr	r3, [r7, #28]
34189cac:	9300      	str	r3, [sp, #0]
34189cae:	69bb      	ldr	r3, [r7, #24]
34189cb0:	2200      	movs	r2, #0
34189cb2:	2140      	movs	r1, #64	@ 0x40
34189cb4:	68f8      	ldr	r0, [r7, #12]
34189cb6:	f000 f831 	bl	34189d1c <I2C_WaitOnFlagUntilTimeout>
34189cba:	4603      	mov	r3, r0
34189cbc:	2b00      	cmp	r3, #0
34189cbe:	d001      	beq.n	34189cc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
34189cc0:	2301      	movs	r3, #1
34189cc2:	e000      	b.n	34189cc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
34189cc4:	2300      	movs	r3, #0
}
34189cc6:	4618      	mov	r0, r3
34189cc8:	3710      	adds	r7, #16
34189cca:	46bd      	mov	sp, r7
34189ccc:	bd80      	pop	{r7, pc}
34189cce:	bf00      	nop
34189cd0:	80002000 	.word	0x80002000

34189cd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
34189cd4:	b480      	push	{r7}
34189cd6:	b083      	sub	sp, #12
34189cd8:	af00      	add	r7, sp, #0
34189cda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
34189cdc:	687b      	ldr	r3, [r7, #4]
34189cde:	681b      	ldr	r3, [r3, #0]
34189ce0:	699b      	ldr	r3, [r3, #24]
34189ce2:	f003 0302 	and.w	r3, r3, #2
34189ce6:	2b02      	cmp	r3, #2
34189ce8:	d103      	bne.n	34189cf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
34189cea:	687b      	ldr	r3, [r7, #4]
34189cec:	681b      	ldr	r3, [r3, #0]
34189cee:	2200      	movs	r2, #0
34189cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
34189cf2:	687b      	ldr	r3, [r7, #4]
34189cf4:	681b      	ldr	r3, [r3, #0]
34189cf6:	699b      	ldr	r3, [r3, #24]
34189cf8:	f003 0301 	and.w	r3, r3, #1
34189cfc:	2b01      	cmp	r3, #1
34189cfe:	d007      	beq.n	34189d10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
34189d00:	687b      	ldr	r3, [r7, #4]
34189d02:	681b      	ldr	r3, [r3, #0]
34189d04:	699a      	ldr	r2, [r3, #24]
34189d06:	687b      	ldr	r3, [r7, #4]
34189d08:	681b      	ldr	r3, [r3, #0]
34189d0a:	f042 0201 	orr.w	r2, r2, #1
34189d0e:	619a      	str	r2, [r3, #24]
  }
}
34189d10:	bf00      	nop
34189d12:	370c      	adds	r7, #12
34189d14:	46bd      	mov	sp, r7
34189d16:	f85d 7b04 	ldr.w	r7, [sp], #4
34189d1a:	4770      	bx	lr

34189d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
34189d1c:	b580      	push	{r7, lr}
34189d1e:	b084      	sub	sp, #16
34189d20:	af00      	add	r7, sp, #0
34189d22:	60f8      	str	r0, [r7, #12]
34189d24:	60b9      	str	r1, [r7, #8]
34189d26:	603b      	str	r3, [r7, #0]
34189d28:	4613      	mov	r3, r2
34189d2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34189d2c:	e03b      	b.n	34189da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34189d2e:	69ba      	ldr	r2, [r7, #24]
34189d30:	6839      	ldr	r1, [r7, #0]
34189d32:	68f8      	ldr	r0, [r7, #12]
34189d34:	f000 f8d6 	bl	34189ee4 <I2C_IsErrorOccurred>
34189d38:	4603      	mov	r3, r0
34189d3a:	2b00      	cmp	r3, #0
34189d3c:	d001      	beq.n	34189d42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
34189d3e:	2301      	movs	r3, #1
34189d40:	e041      	b.n	34189dc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34189d42:	683b      	ldr	r3, [r7, #0]
34189d44:	f1b3 3fff 	cmp.w	r3, #4294967295
34189d48:	d02d      	beq.n	34189da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34189d4a:	f7fa fbf9 	bl	34184540 <HAL_GetTick>
34189d4e:	4602      	mov	r2, r0
34189d50:	69bb      	ldr	r3, [r7, #24]
34189d52:	1ad3      	subs	r3, r2, r3
34189d54:	683a      	ldr	r2, [r7, #0]
34189d56:	429a      	cmp	r2, r3
34189d58:	d302      	bcc.n	34189d60 <I2C_WaitOnFlagUntilTimeout+0x44>
34189d5a:	683b      	ldr	r3, [r7, #0]
34189d5c:	2b00      	cmp	r3, #0
34189d5e:	d122      	bne.n	34189da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34189d60:	68fb      	ldr	r3, [r7, #12]
34189d62:	681b      	ldr	r3, [r3, #0]
34189d64:	699a      	ldr	r2, [r3, #24]
34189d66:	68bb      	ldr	r3, [r7, #8]
34189d68:	4013      	ands	r3, r2
34189d6a:	68ba      	ldr	r2, [r7, #8]
34189d6c:	429a      	cmp	r2, r3
34189d6e:	bf0c      	ite	eq
34189d70:	2301      	moveq	r3, #1
34189d72:	2300      	movne	r3, #0
34189d74:	b2db      	uxtb	r3, r3
34189d76:	461a      	mov	r2, r3
34189d78:	79fb      	ldrb	r3, [r7, #7]
34189d7a:	429a      	cmp	r2, r3
34189d7c:	d113      	bne.n	34189da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34189d7e:	68fb      	ldr	r3, [r7, #12]
34189d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189d82:	f043 0220 	orr.w	r2, r3, #32
34189d86:	68fb      	ldr	r3, [r7, #12]
34189d88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34189d8a:	68fb      	ldr	r3, [r7, #12]
34189d8c:	2220      	movs	r2, #32
34189d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34189d92:	68fb      	ldr	r3, [r7, #12]
34189d94:	2200      	movs	r2, #0
34189d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
34189d9a:	68fb      	ldr	r3, [r7, #12]
34189d9c:	2200      	movs	r2, #0
34189d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
34189da2:	2301      	movs	r3, #1
34189da4:	e00f      	b.n	34189dc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34189da6:	68fb      	ldr	r3, [r7, #12]
34189da8:	681b      	ldr	r3, [r3, #0]
34189daa:	699a      	ldr	r2, [r3, #24]
34189dac:	68bb      	ldr	r3, [r7, #8]
34189dae:	4013      	ands	r3, r2
34189db0:	68ba      	ldr	r2, [r7, #8]
34189db2:	429a      	cmp	r2, r3
34189db4:	bf0c      	ite	eq
34189db6:	2301      	moveq	r3, #1
34189db8:	2300      	movne	r3, #0
34189dba:	b2db      	uxtb	r3, r3
34189dbc:	461a      	mov	r2, r3
34189dbe:	79fb      	ldrb	r3, [r7, #7]
34189dc0:	429a      	cmp	r2, r3
34189dc2:	d0b4      	beq.n	34189d2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
34189dc4:	2300      	movs	r3, #0
}
34189dc6:	4618      	mov	r0, r3
34189dc8:	3710      	adds	r7, #16
34189dca:	46bd      	mov	sp, r7
34189dcc:	bd80      	pop	{r7, pc}

34189dce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
34189dce:	b580      	push	{r7, lr}
34189dd0:	b084      	sub	sp, #16
34189dd2:	af00      	add	r7, sp, #0
34189dd4:	60f8      	str	r0, [r7, #12]
34189dd6:	60b9      	str	r1, [r7, #8]
34189dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34189dda:	e033      	b.n	34189e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34189ddc:	687a      	ldr	r2, [r7, #4]
34189dde:	68b9      	ldr	r1, [r7, #8]
34189de0:	68f8      	ldr	r0, [r7, #12]
34189de2:	f000 f87f 	bl	34189ee4 <I2C_IsErrorOccurred>
34189de6:	4603      	mov	r3, r0
34189de8:	2b00      	cmp	r3, #0
34189dea:	d001      	beq.n	34189df0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
34189dec:	2301      	movs	r3, #1
34189dee:	e031      	b.n	34189e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34189df0:	68bb      	ldr	r3, [r7, #8]
34189df2:	f1b3 3fff 	cmp.w	r3, #4294967295
34189df6:	d025      	beq.n	34189e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34189df8:	f7fa fba2 	bl	34184540 <HAL_GetTick>
34189dfc:	4602      	mov	r2, r0
34189dfe:	687b      	ldr	r3, [r7, #4]
34189e00:	1ad3      	subs	r3, r2, r3
34189e02:	68ba      	ldr	r2, [r7, #8]
34189e04:	429a      	cmp	r2, r3
34189e06:	d302      	bcc.n	34189e0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
34189e08:	68bb      	ldr	r3, [r7, #8]
34189e0a:	2b00      	cmp	r3, #0
34189e0c:	d11a      	bne.n	34189e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34189e0e:	68fb      	ldr	r3, [r7, #12]
34189e10:	681b      	ldr	r3, [r3, #0]
34189e12:	699b      	ldr	r3, [r3, #24]
34189e14:	f003 0302 	and.w	r3, r3, #2
34189e18:	2b02      	cmp	r3, #2
34189e1a:	d013      	beq.n	34189e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34189e1c:	68fb      	ldr	r3, [r7, #12]
34189e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189e20:	f043 0220 	orr.w	r2, r3, #32
34189e24:	68fb      	ldr	r3, [r7, #12]
34189e26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34189e28:	68fb      	ldr	r3, [r7, #12]
34189e2a:	2220      	movs	r2, #32
34189e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34189e30:	68fb      	ldr	r3, [r7, #12]
34189e32:	2200      	movs	r2, #0
34189e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
34189e38:	68fb      	ldr	r3, [r7, #12]
34189e3a:	2200      	movs	r2, #0
34189e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
34189e40:	2301      	movs	r3, #1
34189e42:	e007      	b.n	34189e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34189e44:	68fb      	ldr	r3, [r7, #12]
34189e46:	681b      	ldr	r3, [r3, #0]
34189e48:	699b      	ldr	r3, [r3, #24]
34189e4a:	f003 0302 	and.w	r3, r3, #2
34189e4e:	2b02      	cmp	r3, #2
34189e50:	d1c4      	bne.n	34189ddc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
34189e52:	2300      	movs	r3, #0
}
34189e54:	4618      	mov	r0, r3
34189e56:	3710      	adds	r7, #16
34189e58:	46bd      	mov	sp, r7
34189e5a:	bd80      	pop	{r7, pc}

34189e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
34189e5c:	b580      	push	{r7, lr}
34189e5e:	b084      	sub	sp, #16
34189e60:	af00      	add	r7, sp, #0
34189e62:	60f8      	str	r0, [r7, #12]
34189e64:	60b9      	str	r1, [r7, #8]
34189e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34189e68:	e02f      	b.n	34189eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34189e6a:	687a      	ldr	r2, [r7, #4]
34189e6c:	68b9      	ldr	r1, [r7, #8]
34189e6e:	68f8      	ldr	r0, [r7, #12]
34189e70:	f000 f838 	bl	34189ee4 <I2C_IsErrorOccurred>
34189e74:	4603      	mov	r3, r0
34189e76:	2b00      	cmp	r3, #0
34189e78:	d001      	beq.n	34189e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
34189e7a:	2301      	movs	r3, #1
34189e7c:	e02d      	b.n	34189eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34189e7e:	f7fa fb5f 	bl	34184540 <HAL_GetTick>
34189e82:	4602      	mov	r2, r0
34189e84:	687b      	ldr	r3, [r7, #4]
34189e86:	1ad3      	subs	r3, r2, r3
34189e88:	68ba      	ldr	r2, [r7, #8]
34189e8a:	429a      	cmp	r2, r3
34189e8c:	d302      	bcc.n	34189e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
34189e8e:	68bb      	ldr	r3, [r7, #8]
34189e90:	2b00      	cmp	r3, #0
34189e92:	d11a      	bne.n	34189eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34189e94:	68fb      	ldr	r3, [r7, #12]
34189e96:	681b      	ldr	r3, [r3, #0]
34189e98:	699b      	ldr	r3, [r3, #24]
34189e9a:	f003 0320 	and.w	r3, r3, #32
34189e9e:	2b20      	cmp	r3, #32
34189ea0:	d013      	beq.n	34189eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34189ea2:	68fb      	ldr	r3, [r7, #12]
34189ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189ea6:	f043 0220 	orr.w	r2, r3, #32
34189eaa:	68fb      	ldr	r3, [r7, #12]
34189eac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
34189eae:	68fb      	ldr	r3, [r7, #12]
34189eb0:	2220      	movs	r2, #32
34189eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
34189eb6:	68fb      	ldr	r3, [r7, #12]
34189eb8:	2200      	movs	r2, #0
34189eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
34189ebe:	68fb      	ldr	r3, [r7, #12]
34189ec0:	2200      	movs	r2, #0
34189ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
34189ec6:	2301      	movs	r3, #1
34189ec8:	e007      	b.n	34189eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34189eca:	68fb      	ldr	r3, [r7, #12]
34189ecc:	681b      	ldr	r3, [r3, #0]
34189ece:	699b      	ldr	r3, [r3, #24]
34189ed0:	f003 0320 	and.w	r3, r3, #32
34189ed4:	2b20      	cmp	r3, #32
34189ed6:	d1c8      	bne.n	34189e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
34189ed8:	2300      	movs	r3, #0
}
34189eda:	4618      	mov	r0, r3
34189edc:	3710      	adds	r7, #16
34189ede:	46bd      	mov	sp, r7
34189ee0:	bd80      	pop	{r7, pc}
	...

34189ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
34189ee4:	b580      	push	{r7, lr}
34189ee6:	b08a      	sub	sp, #40	@ 0x28
34189ee8:	af00      	add	r7, sp, #0
34189eea:	60f8      	str	r0, [r7, #12]
34189eec:	60b9      	str	r1, [r7, #8]
34189eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34189ef0:	2300      	movs	r3, #0
34189ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
34189ef6:	68fb      	ldr	r3, [r7, #12]
34189ef8:	681b      	ldr	r3, [r3, #0]
34189efa:	699b      	ldr	r3, [r3, #24]
34189efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
34189efe:	2300      	movs	r3, #0
34189f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
34189f02:	687b      	ldr	r3, [r7, #4]
34189f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34189f06:	69bb      	ldr	r3, [r7, #24]
34189f08:	f003 0310 	and.w	r3, r3, #16
34189f0c:	2b00      	cmp	r3, #0
34189f0e:	d068      	beq.n	34189fe2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34189f10:	68fb      	ldr	r3, [r7, #12]
34189f12:	681b      	ldr	r3, [r3, #0]
34189f14:	2210      	movs	r2, #16
34189f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34189f18:	e049      	b.n	34189fae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
34189f1a:	68bb      	ldr	r3, [r7, #8]
34189f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
34189f20:	d045      	beq.n	34189fae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34189f22:	f7fa fb0d 	bl	34184540 <HAL_GetTick>
34189f26:	4602      	mov	r2, r0
34189f28:	69fb      	ldr	r3, [r7, #28]
34189f2a:	1ad3      	subs	r3, r2, r3
34189f2c:	68ba      	ldr	r2, [r7, #8]
34189f2e:	429a      	cmp	r2, r3
34189f30:	d302      	bcc.n	34189f38 <I2C_IsErrorOccurred+0x54>
34189f32:	68bb      	ldr	r3, [r7, #8]
34189f34:	2b00      	cmp	r3, #0
34189f36:	d13a      	bne.n	34189fae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
34189f38:	68fb      	ldr	r3, [r7, #12]
34189f3a:	681b      	ldr	r3, [r3, #0]
34189f3c:	685b      	ldr	r3, [r3, #4]
34189f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34189f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
34189f44:	68fb      	ldr	r3, [r7, #12]
34189f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
34189f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
34189f4c:	68fb      	ldr	r3, [r7, #12]
34189f4e:	681b      	ldr	r3, [r3, #0]
34189f50:	699b      	ldr	r3, [r3, #24]
34189f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34189f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34189f5a:	d121      	bne.n	34189fa0 <I2C_IsErrorOccurred+0xbc>
34189f5c:	697b      	ldr	r3, [r7, #20]
34189f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34189f62:	d01d      	beq.n	34189fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
34189f64:	7cfb      	ldrb	r3, [r7, #19]
34189f66:	2b20      	cmp	r3, #32
34189f68:	d01a      	beq.n	34189fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
34189f6a:	68fb      	ldr	r3, [r7, #12]
34189f6c:	681b      	ldr	r3, [r3, #0]
34189f6e:	685a      	ldr	r2, [r3, #4]
34189f70:	68fb      	ldr	r3, [r7, #12]
34189f72:	681b      	ldr	r3, [r3, #0]
34189f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
34189f78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
34189f7a:	f7fa fae1 	bl	34184540 <HAL_GetTick>
34189f7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34189f80:	e00e      	b.n	34189fa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
34189f82:	f7fa fadd 	bl	34184540 <HAL_GetTick>
34189f86:	4602      	mov	r2, r0
34189f88:	69fb      	ldr	r3, [r7, #28]
34189f8a:	1ad3      	subs	r3, r2, r3
34189f8c:	2b19      	cmp	r3, #25
34189f8e:	d907      	bls.n	34189fa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
34189f90:	6a3b      	ldr	r3, [r7, #32]
34189f92:	f043 0320 	orr.w	r3, r3, #32
34189f96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
34189f98:	2301      	movs	r3, #1
34189f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
34189f9e:	e006      	b.n	34189fae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34189fa0:	68fb      	ldr	r3, [r7, #12]
34189fa2:	681b      	ldr	r3, [r3, #0]
34189fa4:	699b      	ldr	r3, [r3, #24]
34189fa6:	f003 0320 	and.w	r3, r3, #32
34189faa:	2b20      	cmp	r3, #32
34189fac:	d1e9      	bne.n	34189f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34189fae:	68fb      	ldr	r3, [r7, #12]
34189fb0:	681b      	ldr	r3, [r3, #0]
34189fb2:	699b      	ldr	r3, [r3, #24]
34189fb4:	f003 0320 	and.w	r3, r3, #32
34189fb8:	2b20      	cmp	r3, #32
34189fba:	d003      	beq.n	34189fc4 <I2C_IsErrorOccurred+0xe0>
34189fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34189fc0:	2b00      	cmp	r3, #0
34189fc2:	d0aa      	beq.n	34189f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
34189fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34189fc8:	2b00      	cmp	r3, #0
34189fca:	d103      	bne.n	34189fd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34189fcc:	68fb      	ldr	r3, [r7, #12]
34189fce:	681b      	ldr	r3, [r3, #0]
34189fd0:	2220      	movs	r2, #32
34189fd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
34189fd4:	6a3b      	ldr	r3, [r7, #32]
34189fd6:	f043 0304 	orr.w	r3, r3, #4
34189fda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
34189fdc:	2301      	movs	r3, #1
34189fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
34189fe2:	68fb      	ldr	r3, [r7, #12]
34189fe4:	681b      	ldr	r3, [r3, #0]
34189fe6:	699b      	ldr	r3, [r3, #24]
34189fe8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
34189fea:	69bb      	ldr	r3, [r7, #24]
34189fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34189ff0:	2b00      	cmp	r3, #0
34189ff2:	d00b      	beq.n	3418a00c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
34189ff4:	6a3b      	ldr	r3, [r7, #32]
34189ff6:	f043 0301 	orr.w	r3, r3, #1
34189ffa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34189ffc:	68fb      	ldr	r3, [r7, #12]
34189ffe:	681b      	ldr	r3, [r3, #0]
3418a000:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418a004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
3418a006:	2301      	movs	r3, #1
3418a008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
3418a00c:	69bb      	ldr	r3, [r7, #24]
3418a00e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418a012:	2b00      	cmp	r3, #0
3418a014:	d00b      	beq.n	3418a02e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
3418a016:	6a3b      	ldr	r3, [r7, #32]
3418a018:	f043 0308 	orr.w	r3, r3, #8
3418a01c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
3418a01e:	68fb      	ldr	r3, [r7, #12]
3418a020:	681b      	ldr	r3, [r3, #0]
3418a022:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3418a026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
3418a028:	2301      	movs	r3, #1
3418a02a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
3418a02e:	69bb      	ldr	r3, [r7, #24]
3418a030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418a034:	2b00      	cmp	r3, #0
3418a036:	d00b      	beq.n	3418a050 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
3418a038:	6a3b      	ldr	r3, [r7, #32]
3418a03a:	f043 0302 	orr.w	r3, r3, #2
3418a03e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
3418a040:	68fb      	ldr	r3, [r7, #12]
3418a042:	681b      	ldr	r3, [r3, #0]
3418a044:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418a048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
3418a04a:	2301      	movs	r3, #1
3418a04c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
3418a050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418a054:	2b00      	cmp	r3, #0
3418a056:	d01c      	beq.n	3418a092 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
3418a058:	68f8      	ldr	r0, [r7, #12]
3418a05a:	f7ff fe3b 	bl	34189cd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
3418a05e:	68fb      	ldr	r3, [r7, #12]
3418a060:	681b      	ldr	r3, [r3, #0]
3418a062:	6859      	ldr	r1, [r3, #4]
3418a064:	68fb      	ldr	r3, [r7, #12]
3418a066:	681a      	ldr	r2, [r3, #0]
3418a068:	4b0d      	ldr	r3, [pc, #52]	@ (3418a0a0 <I2C_IsErrorOccurred+0x1bc>)
3418a06a:	400b      	ands	r3, r1
3418a06c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
3418a06e:	68fb      	ldr	r3, [r7, #12]
3418a070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3418a072:	6a3b      	ldr	r3, [r7, #32]
3418a074:	431a      	orrs	r2, r3
3418a076:	68fb      	ldr	r3, [r7, #12]
3418a078:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
3418a07a:	68fb      	ldr	r3, [r7, #12]
3418a07c:	2220      	movs	r2, #32
3418a07e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
3418a082:	68fb      	ldr	r3, [r7, #12]
3418a084:	2200      	movs	r2, #0
3418a086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3418a08a:	68fb      	ldr	r3, [r7, #12]
3418a08c:	2200      	movs	r2, #0
3418a08e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
3418a092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418a096:	4618      	mov	r0, r3
3418a098:	3728      	adds	r7, #40	@ 0x28
3418a09a:	46bd      	mov	sp, r7
3418a09c:	bd80      	pop	{r7, pc}
3418a09e:	bf00      	nop
3418a0a0:	fe00e800 	.word	0xfe00e800

3418a0a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
3418a0a4:	b580      	push	{r7, lr}
3418a0a6:	b086      	sub	sp, #24
3418a0a8:	af00      	add	r7, sp, #0
3418a0aa:	60f8      	str	r0, [r7, #12]
3418a0ac:	607b      	str	r3, [r7, #4]
3418a0ae:	460b      	mov	r3, r1
3418a0b0:	817b      	strh	r3, [r7, #10]
3418a0b2:	4613      	mov	r3, r2
3418a0b4:	727b      	strb	r3, [r7, #9]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3418a0b6:	68fb      	ldr	r3, [r7, #12]
3418a0b8:	681b      	ldr	r3, [r3, #0]
3418a0ba:	4a39      	ldr	r2, [pc, #228]	@ (3418a1a0 <I2C_TransferConfig+0xfc>)
3418a0bc:	4293      	cmp	r3, r2
3418a0be:	d027      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0c0:	68fb      	ldr	r3, [r7, #12]
3418a0c2:	681b      	ldr	r3, [r3, #0]
3418a0c4:	4a37      	ldr	r2, [pc, #220]	@ (3418a1a4 <I2C_TransferConfig+0x100>)
3418a0c6:	4293      	cmp	r3, r2
3418a0c8:	d022      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0ca:	68fb      	ldr	r3, [r7, #12]
3418a0cc:	681b      	ldr	r3, [r3, #0]
3418a0ce:	4a36      	ldr	r2, [pc, #216]	@ (3418a1a8 <I2C_TransferConfig+0x104>)
3418a0d0:	4293      	cmp	r3, r2
3418a0d2:	d01d      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0d4:	68fb      	ldr	r3, [r7, #12]
3418a0d6:	681b      	ldr	r3, [r3, #0]
3418a0d8:	4a34      	ldr	r2, [pc, #208]	@ (3418a1ac <I2C_TransferConfig+0x108>)
3418a0da:	4293      	cmp	r3, r2
3418a0dc:	d018      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0de:	68fb      	ldr	r3, [r7, #12]
3418a0e0:	681b      	ldr	r3, [r3, #0]
3418a0e2:	4a33      	ldr	r2, [pc, #204]	@ (3418a1b0 <I2C_TransferConfig+0x10c>)
3418a0e4:	4293      	cmp	r3, r2
3418a0e6:	d013      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0e8:	68fb      	ldr	r3, [r7, #12]
3418a0ea:	681b      	ldr	r3, [r3, #0]
3418a0ec:	4a31      	ldr	r2, [pc, #196]	@ (3418a1b4 <I2C_TransferConfig+0x110>)
3418a0ee:	4293      	cmp	r3, r2
3418a0f0:	d00e      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0f2:	68fb      	ldr	r3, [r7, #12]
3418a0f4:	681b      	ldr	r3, [r3, #0]
3418a0f6:	4a30      	ldr	r2, [pc, #192]	@ (3418a1b8 <I2C_TransferConfig+0x114>)
3418a0f8:	4293      	cmp	r3, r2
3418a0fa:	d009      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a0fc:	68fb      	ldr	r3, [r7, #12]
3418a0fe:	681b      	ldr	r3, [r3, #0]
3418a100:	4a2e      	ldr	r2, [pc, #184]	@ (3418a1bc <I2C_TransferConfig+0x118>)
3418a102:	4293      	cmp	r3, r2
3418a104:	d004      	beq.n	3418a110 <I2C_TransferConfig+0x6c>
3418a106:	f641 51c9 	movw	r1, #7625	@ 0x1dc9
3418a10a:	482d      	ldr	r0, [pc, #180]	@ (3418a1c0 <I2C_TransferConfig+0x11c>)
3418a10c:	f7f8 f8ae 	bl	3418226c <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
3418a110:	687b      	ldr	r3, [r7, #4]
3418a112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418a116:	d00b      	beq.n	3418a130 <I2C_TransferConfig+0x8c>
3418a118:	687b      	ldr	r3, [r7, #4]
3418a11a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418a11e:	d007      	beq.n	3418a130 <I2C_TransferConfig+0x8c>
3418a120:	687b      	ldr	r3, [r7, #4]
3418a122:	2b00      	cmp	r3, #0
3418a124:	d004      	beq.n	3418a130 <I2C_TransferConfig+0x8c>
3418a126:	f641 51ca 	movw	r1, #7626	@ 0x1dca
3418a12a:	4825      	ldr	r0, [pc, #148]	@ (3418a1c0 <I2C_TransferConfig+0x11c>)
3418a12c:	f7f8 f89e 	bl	3418226c <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
3418a130:	6a3b      	ldr	r3, [r7, #32]
3418a132:	4a24      	ldr	r2, [pc, #144]	@ (3418a1c4 <I2C_TransferConfig+0x120>)
3418a134:	4293      	cmp	r3, r2
3418a136:	d00f      	beq.n	3418a158 <I2C_TransferConfig+0xb4>
3418a138:	6a3b      	ldr	r3, [r7, #32]
3418a13a:	4a23      	ldr	r2, [pc, #140]	@ (3418a1c8 <I2C_TransferConfig+0x124>)
3418a13c:	4293      	cmp	r3, r2
3418a13e:	d00b      	beq.n	3418a158 <I2C_TransferConfig+0xb4>
3418a140:	6a3b      	ldr	r3, [r7, #32]
3418a142:	4a22      	ldr	r2, [pc, #136]	@ (3418a1cc <I2C_TransferConfig+0x128>)
3418a144:	4293      	cmp	r3, r2
3418a146:	d007      	beq.n	3418a158 <I2C_TransferConfig+0xb4>
3418a148:	6a3b      	ldr	r3, [r7, #32]
3418a14a:	2b00      	cmp	r3, #0
3418a14c:	d004      	beq.n	3418a158 <I2C_TransferConfig+0xb4>
3418a14e:	f641 51cb 	movw	r1, #7627	@ 0x1dcb
3418a152:	481b      	ldr	r0, [pc, #108]	@ (3418a1c0 <I2C_TransferConfig+0x11c>)
3418a154:	f7f8 f88a 	bl	3418226c <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
3418a158:	897b      	ldrh	r3, [r7, #10]
3418a15a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
3418a15e:	7a7b      	ldrb	r3, [r7, #9]
3418a160:	041b      	lsls	r3, r3, #16
3418a162:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
3418a166:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
3418a168:	687b      	ldr	r3, [r7, #4]
3418a16a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
3418a16c:	6a3b      	ldr	r3, [r7, #32]
3418a16e:	4313      	orrs	r3, r2
3418a170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a174:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
3418a176:	68fb      	ldr	r3, [r7, #12]
3418a178:	681b      	ldr	r3, [r3, #0]
3418a17a:	685a      	ldr	r2, [r3, #4]
3418a17c:	6a3b      	ldr	r3, [r7, #32]
3418a17e:	0d5b      	lsrs	r3, r3, #21
3418a180:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
3418a184:	4b12      	ldr	r3, [pc, #72]	@ (3418a1d0 <I2C_TransferConfig+0x12c>)
3418a186:	430b      	orrs	r3, r1
3418a188:	43db      	mvns	r3, r3
3418a18a:	ea02 0103 	and.w	r1, r2, r3
3418a18e:	68fb      	ldr	r3, [r7, #12]
3418a190:	681b      	ldr	r3, [r3, #0]
3418a192:	697a      	ldr	r2, [r7, #20]
3418a194:	430a      	orrs	r2, r1
3418a196:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
3418a198:	bf00      	nop
3418a19a:	3718      	adds	r7, #24
3418a19c:	46bd      	mov	sp, r7
3418a19e:	bd80      	pop	{r7, pc}
3418a1a0:	50005400 	.word	0x50005400
3418a1a4:	40005400 	.word	0x40005400
3418a1a8:	50005800 	.word	0x50005800
3418a1ac:	40005800 	.word	0x40005800
3418a1b0:	50005c00 	.word	0x50005c00
3418a1b4:	40005c00 	.word	0x40005c00
3418a1b8:	56001c00 	.word	0x56001c00
3418a1bc:	46001c00 	.word	0x46001c00
3418a1c0:	341a518c 	.word	0x341a518c
3418a1c4:	80004000 	.word	0x80004000
3418a1c8:	80002400 	.word	0x80002400
3418a1cc:	80002000 	.word	0x80002000
3418a1d0:	03ff63ff 	.word	0x03ff63ff

3418a1d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
3418a1d4:	b580      	push	{r7, lr}
3418a1d6:	b082      	sub	sp, #8
3418a1d8:	af00      	add	r7, sp, #0
3418a1da:	6078      	str	r0, [r7, #4]
3418a1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3418a1de:	687b      	ldr	r3, [r7, #4]
3418a1e0:	681b      	ldr	r3, [r3, #0]
3418a1e2:	4a3c      	ldr	r2, [pc, #240]	@ (3418a2d4 <HAL_I2CEx_ConfigAnalogFilter+0x100>)
3418a1e4:	4293      	cmp	r3, r2
3418a1e6:	d026      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a1e8:	687b      	ldr	r3, [r7, #4]
3418a1ea:	681b      	ldr	r3, [r3, #0]
3418a1ec:	4a3a      	ldr	r2, [pc, #232]	@ (3418a2d8 <HAL_I2CEx_ConfigAnalogFilter+0x104>)
3418a1ee:	4293      	cmp	r3, r2
3418a1f0:	d021      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a1f2:	687b      	ldr	r3, [r7, #4]
3418a1f4:	681b      	ldr	r3, [r3, #0]
3418a1f6:	4a39      	ldr	r2, [pc, #228]	@ (3418a2dc <HAL_I2CEx_ConfigAnalogFilter+0x108>)
3418a1f8:	4293      	cmp	r3, r2
3418a1fa:	d01c      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a1fc:	687b      	ldr	r3, [r7, #4]
3418a1fe:	681b      	ldr	r3, [r3, #0]
3418a200:	4a37      	ldr	r2, [pc, #220]	@ (3418a2e0 <HAL_I2CEx_ConfigAnalogFilter+0x10c>)
3418a202:	4293      	cmp	r3, r2
3418a204:	d017      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a206:	687b      	ldr	r3, [r7, #4]
3418a208:	681b      	ldr	r3, [r3, #0]
3418a20a:	4a36      	ldr	r2, [pc, #216]	@ (3418a2e4 <HAL_I2CEx_ConfigAnalogFilter+0x110>)
3418a20c:	4293      	cmp	r3, r2
3418a20e:	d012      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a210:	687b      	ldr	r3, [r7, #4]
3418a212:	681b      	ldr	r3, [r3, #0]
3418a214:	4a34      	ldr	r2, [pc, #208]	@ (3418a2e8 <HAL_I2CEx_ConfigAnalogFilter+0x114>)
3418a216:	4293      	cmp	r3, r2
3418a218:	d00d      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a21a:	687b      	ldr	r3, [r7, #4]
3418a21c:	681b      	ldr	r3, [r3, #0]
3418a21e:	4a33      	ldr	r2, [pc, #204]	@ (3418a2ec <HAL_I2CEx_ConfigAnalogFilter+0x118>)
3418a220:	4293      	cmp	r3, r2
3418a222:	d008      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a224:	687b      	ldr	r3, [r7, #4]
3418a226:	681b      	ldr	r3, [r3, #0]
3418a228:	4a31      	ldr	r2, [pc, #196]	@ (3418a2f0 <HAL_I2CEx_ConfigAnalogFilter+0x11c>)
3418a22a:	4293      	cmp	r3, r2
3418a22c:	d003      	beq.n	3418a236 <HAL_I2CEx_ConfigAnalogFilter+0x62>
3418a22e:	2162      	movs	r1, #98	@ 0x62
3418a230:	4830      	ldr	r0, [pc, #192]	@ (3418a2f4 <HAL_I2CEx_ConfigAnalogFilter+0x120>)
3418a232:	f7f8 f81b 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
3418a236:	683b      	ldr	r3, [r7, #0]
3418a238:	2b00      	cmp	r3, #0
3418a23a:	d007      	beq.n	3418a24c <HAL_I2CEx_ConfigAnalogFilter+0x78>
3418a23c:	683b      	ldr	r3, [r7, #0]
3418a23e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a242:	d003      	beq.n	3418a24c <HAL_I2CEx_ConfigAnalogFilter+0x78>
3418a244:	2163      	movs	r1, #99	@ 0x63
3418a246:	482b      	ldr	r0, [pc, #172]	@ (3418a2f4 <HAL_I2CEx_ConfigAnalogFilter+0x120>)
3418a248:	f7f8 f810 	bl	3418226c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
3418a24c:	687b      	ldr	r3, [r7, #4]
3418a24e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418a252:	b2db      	uxtb	r3, r3
3418a254:	2b20      	cmp	r3, #32
3418a256:	d138      	bne.n	3418a2ca <HAL_I2CEx_ConfigAnalogFilter+0xf6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
3418a258:	687b      	ldr	r3, [r7, #4]
3418a25a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418a25e:	2b01      	cmp	r3, #1
3418a260:	d101      	bne.n	3418a266 <HAL_I2CEx_ConfigAnalogFilter+0x92>
3418a262:	2302      	movs	r3, #2
3418a264:	e032      	b.n	3418a2cc <HAL_I2CEx_ConfigAnalogFilter+0xf8>
3418a266:	687b      	ldr	r3, [r7, #4]
3418a268:	2201      	movs	r2, #1
3418a26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
3418a26e:	687b      	ldr	r3, [r7, #4]
3418a270:	2224      	movs	r2, #36	@ 0x24
3418a272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
3418a276:	687b      	ldr	r3, [r7, #4]
3418a278:	681b      	ldr	r3, [r3, #0]
3418a27a:	681a      	ldr	r2, [r3, #0]
3418a27c:	687b      	ldr	r3, [r7, #4]
3418a27e:	681b      	ldr	r3, [r3, #0]
3418a280:	f022 0201 	bic.w	r2, r2, #1
3418a284:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
3418a286:	687b      	ldr	r3, [r7, #4]
3418a288:	681b      	ldr	r3, [r3, #0]
3418a28a:	681a      	ldr	r2, [r3, #0]
3418a28c:	687b      	ldr	r3, [r7, #4]
3418a28e:	681b      	ldr	r3, [r3, #0]
3418a290:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
3418a294:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
3418a296:	687b      	ldr	r3, [r7, #4]
3418a298:	681b      	ldr	r3, [r3, #0]
3418a29a:	6819      	ldr	r1, [r3, #0]
3418a29c:	687b      	ldr	r3, [r7, #4]
3418a29e:	681b      	ldr	r3, [r3, #0]
3418a2a0:	683a      	ldr	r2, [r7, #0]
3418a2a2:	430a      	orrs	r2, r1
3418a2a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
3418a2a6:	687b      	ldr	r3, [r7, #4]
3418a2a8:	681b      	ldr	r3, [r3, #0]
3418a2aa:	681a      	ldr	r2, [r3, #0]
3418a2ac:	687b      	ldr	r3, [r7, #4]
3418a2ae:	681b      	ldr	r3, [r3, #0]
3418a2b0:	f042 0201 	orr.w	r2, r2, #1
3418a2b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
3418a2b6:	687b      	ldr	r3, [r7, #4]
3418a2b8:	2220      	movs	r2, #32
3418a2ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3418a2be:	687b      	ldr	r3, [r7, #4]
3418a2c0:	2200      	movs	r2, #0
3418a2c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
3418a2c6:	2300      	movs	r3, #0
3418a2c8:	e000      	b.n	3418a2cc <HAL_I2CEx_ConfigAnalogFilter+0xf8>
  }
  else
  {
    return HAL_BUSY;
3418a2ca:	2302      	movs	r3, #2
  }
}
3418a2cc:	4618      	mov	r0, r3
3418a2ce:	3708      	adds	r7, #8
3418a2d0:	46bd      	mov	sp, r7
3418a2d2:	bd80      	pop	{r7, pc}
3418a2d4:	50005400 	.word	0x50005400
3418a2d8:	40005400 	.word	0x40005400
3418a2dc:	50005800 	.word	0x50005800
3418a2e0:	40005800 	.word	0x40005800
3418a2e4:	50005c00 	.word	0x50005c00
3418a2e8:	40005c00 	.word	0x40005c00
3418a2ec:	56001c00 	.word	0x56001c00
3418a2f0:	46001c00 	.word	0x46001c00
3418a2f4:	341a51c0 	.word	0x341a51c0

3418a2f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
3418a2f8:	b580      	push	{r7, lr}
3418a2fa:	b084      	sub	sp, #16
3418a2fc:	af00      	add	r7, sp, #0
3418a2fe:	6078      	str	r0, [r7, #4]
3418a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3418a302:	687b      	ldr	r3, [r7, #4]
3418a304:	681b      	ldr	r3, [r3, #0]
3418a306:	4a3b      	ldr	r2, [pc, #236]	@ (3418a3f4 <HAL_I2CEx_ConfigDigitalFilter+0xfc>)
3418a308:	4293      	cmp	r3, r2
3418a30a:	d026      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a30c:	687b      	ldr	r3, [r7, #4]
3418a30e:	681b      	ldr	r3, [r3, #0]
3418a310:	4a39      	ldr	r2, [pc, #228]	@ (3418a3f8 <HAL_I2CEx_ConfigDigitalFilter+0x100>)
3418a312:	4293      	cmp	r3, r2
3418a314:	d021      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a316:	687b      	ldr	r3, [r7, #4]
3418a318:	681b      	ldr	r3, [r3, #0]
3418a31a:	4a38      	ldr	r2, [pc, #224]	@ (3418a3fc <HAL_I2CEx_ConfigDigitalFilter+0x104>)
3418a31c:	4293      	cmp	r3, r2
3418a31e:	d01c      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a320:	687b      	ldr	r3, [r7, #4]
3418a322:	681b      	ldr	r3, [r3, #0]
3418a324:	4a36      	ldr	r2, [pc, #216]	@ (3418a400 <HAL_I2CEx_ConfigDigitalFilter+0x108>)
3418a326:	4293      	cmp	r3, r2
3418a328:	d017      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a32a:	687b      	ldr	r3, [r7, #4]
3418a32c:	681b      	ldr	r3, [r3, #0]
3418a32e:	4a35      	ldr	r2, [pc, #212]	@ (3418a404 <HAL_I2CEx_ConfigDigitalFilter+0x10c>)
3418a330:	4293      	cmp	r3, r2
3418a332:	d012      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a334:	687b      	ldr	r3, [r7, #4]
3418a336:	681b      	ldr	r3, [r3, #0]
3418a338:	4a33      	ldr	r2, [pc, #204]	@ (3418a408 <HAL_I2CEx_ConfigDigitalFilter+0x110>)
3418a33a:	4293      	cmp	r3, r2
3418a33c:	d00d      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a33e:	687b      	ldr	r3, [r7, #4]
3418a340:	681b      	ldr	r3, [r3, #0]
3418a342:	4a32      	ldr	r2, [pc, #200]	@ (3418a40c <HAL_I2CEx_ConfigDigitalFilter+0x114>)
3418a344:	4293      	cmp	r3, r2
3418a346:	d008      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a348:	687b      	ldr	r3, [r7, #4]
3418a34a:	681b      	ldr	r3, [r3, #0]
3418a34c:	4a30      	ldr	r2, [pc, #192]	@ (3418a410 <HAL_I2CEx_ConfigDigitalFilter+0x118>)
3418a34e:	4293      	cmp	r3, r2
3418a350:	d003      	beq.n	3418a35a <HAL_I2CEx_ConfigDigitalFilter+0x62>
3418a352:	2190      	movs	r1, #144	@ 0x90
3418a354:	482f      	ldr	r0, [pc, #188]	@ (3418a414 <HAL_I2CEx_ConfigDigitalFilter+0x11c>)
3418a356:	f7f7 ff89 	bl	3418226c <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
3418a35a:	683b      	ldr	r3, [r7, #0]
3418a35c:	2b0f      	cmp	r3, #15
3418a35e:	d903      	bls.n	3418a368 <HAL_I2CEx_ConfigDigitalFilter+0x70>
3418a360:	2191      	movs	r1, #145	@ 0x91
3418a362:	482c      	ldr	r0, [pc, #176]	@ (3418a414 <HAL_I2CEx_ConfigDigitalFilter+0x11c>)
3418a364:	f7f7 ff82 	bl	3418226c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
3418a368:	687b      	ldr	r3, [r7, #4]
3418a36a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418a36e:	b2db      	uxtb	r3, r3
3418a370:	2b20      	cmp	r3, #32
3418a372:	d139      	bne.n	3418a3e8 <HAL_I2CEx_ConfigDigitalFilter+0xf0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
3418a374:	687b      	ldr	r3, [r7, #4]
3418a376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418a37a:	2b01      	cmp	r3, #1
3418a37c:	d101      	bne.n	3418a382 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
3418a37e:	2302      	movs	r3, #2
3418a380:	e033      	b.n	3418a3ea <HAL_I2CEx_ConfigDigitalFilter+0xf2>
3418a382:	687b      	ldr	r3, [r7, #4]
3418a384:	2201      	movs	r2, #1
3418a386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
3418a38a:	687b      	ldr	r3, [r7, #4]
3418a38c:	2224      	movs	r2, #36	@ 0x24
3418a38e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
3418a392:	687b      	ldr	r3, [r7, #4]
3418a394:	681b      	ldr	r3, [r3, #0]
3418a396:	681a      	ldr	r2, [r3, #0]
3418a398:	687b      	ldr	r3, [r7, #4]
3418a39a:	681b      	ldr	r3, [r3, #0]
3418a39c:	f022 0201 	bic.w	r2, r2, #1
3418a3a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
3418a3a2:	687b      	ldr	r3, [r7, #4]
3418a3a4:	681b      	ldr	r3, [r3, #0]
3418a3a6:	681b      	ldr	r3, [r3, #0]
3418a3a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
3418a3aa:	68fb      	ldr	r3, [r7, #12]
3418a3ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
3418a3b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
3418a3b2:	683b      	ldr	r3, [r7, #0]
3418a3b4:	021b      	lsls	r3, r3, #8
3418a3b6:	68fa      	ldr	r2, [r7, #12]
3418a3b8:	4313      	orrs	r3, r2
3418a3ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
3418a3bc:	687b      	ldr	r3, [r7, #4]
3418a3be:	681b      	ldr	r3, [r3, #0]
3418a3c0:	68fa      	ldr	r2, [r7, #12]
3418a3c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
3418a3c4:	687b      	ldr	r3, [r7, #4]
3418a3c6:	681b      	ldr	r3, [r3, #0]
3418a3c8:	681a      	ldr	r2, [r3, #0]
3418a3ca:	687b      	ldr	r3, [r7, #4]
3418a3cc:	681b      	ldr	r3, [r3, #0]
3418a3ce:	f042 0201 	orr.w	r2, r2, #1
3418a3d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
3418a3d4:	687b      	ldr	r3, [r7, #4]
3418a3d6:	2220      	movs	r2, #32
3418a3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3418a3dc:	687b      	ldr	r3, [r7, #4]
3418a3de:	2200      	movs	r2, #0
3418a3e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
3418a3e4:	2300      	movs	r3, #0
3418a3e6:	e000      	b.n	3418a3ea <HAL_I2CEx_ConfigDigitalFilter+0xf2>
  }
  else
  {
    return HAL_BUSY;
3418a3e8:	2302      	movs	r3, #2
  }
}
3418a3ea:	4618      	mov	r0, r3
3418a3ec:	3710      	adds	r7, #16
3418a3ee:	46bd      	mov	sp, r7
3418a3f0:	bd80      	pop	{r7, pc}
3418a3f2:	bf00      	nop
3418a3f4:	50005400 	.word	0x50005400
3418a3f8:	40005400 	.word	0x40005400
3418a3fc:	50005800 	.word	0x50005800
3418a400:	40005800 	.word	0x40005800
3418a404:	50005c00 	.word	0x50005c00
3418a408:	40005c00 	.word	0x40005c00
3418a40c:	56001c00 	.word	0x56001c00
3418a410:	46001c00 	.word	0x46001c00
3418a414:	341a51c0 	.word	0x341a51c0

3418a418 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
3418a418:	b580      	push	{r7, lr}
3418a41a:	b084      	sub	sp, #16
3418a41c:	af00      	add	r7, sp, #0
3418a41e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
3418a420:	687b      	ldr	r3, [r7, #4]
3418a422:	2b00      	cmp	r3, #0
3418a424:	d101      	bne.n	3418a42a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
3418a426:	2301      	movs	r3, #1
3418a428:	e12c      	b.n	3418a684 <HAL_LTDC_Init+0x26c>
  }

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
3418a42a:	687b      	ldr	r3, [r7, #4]
3418a42c:	681b      	ldr	r3, [r3, #0]
3418a42e:	4a97      	ldr	r2, [pc, #604]	@ (3418a68c <HAL_LTDC_Init+0x274>)
3418a430:	4293      	cmp	r3, r2
3418a432:	d008      	beq.n	3418a446 <HAL_LTDC_Init+0x2e>
3418a434:	687b      	ldr	r3, [r7, #4]
3418a436:	681b      	ldr	r3, [r3, #0]
3418a438:	4a95      	ldr	r2, [pc, #596]	@ (3418a690 <HAL_LTDC_Init+0x278>)
3418a43a:	4293      	cmp	r3, r2
3418a43c:	d003      	beq.n	3418a446 <HAL_LTDC_Init+0x2e>
3418a43e:	21f8      	movs	r1, #248	@ 0xf8
3418a440:	4894      	ldr	r0, [pc, #592]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a442:	f7f7 ff13 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
3418a446:	687b      	ldr	r3, [r7, #4]
3418a448:	695b      	ldr	r3, [r3, #20]
3418a44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a44e:	d303      	bcc.n	3418a458 <HAL_LTDC_Init+0x40>
3418a450:	21f9      	movs	r1, #249	@ 0xf9
3418a452:	4890      	ldr	r0, [pc, #576]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a454:	f7f7 ff0a 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
3418a458:	687b      	ldr	r3, [r7, #4]
3418a45a:	699b      	ldr	r3, [r3, #24]
3418a45c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a460:	d303      	bcc.n	3418a46a <HAL_LTDC_Init+0x52>
3418a462:	21fa      	movs	r1, #250	@ 0xfa
3418a464:	488b      	ldr	r0, [pc, #556]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a466:	f7f7 ff01 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
3418a46a:	687b      	ldr	r3, [r7, #4]
3418a46c:	69db      	ldr	r3, [r3, #28]
3418a46e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a472:	d303      	bcc.n	3418a47c <HAL_LTDC_Init+0x64>
3418a474:	21fb      	movs	r1, #251	@ 0xfb
3418a476:	4887      	ldr	r0, [pc, #540]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a478:	f7f7 fef8 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
3418a47c:	687b      	ldr	r3, [r7, #4]
3418a47e:	6a1b      	ldr	r3, [r3, #32]
3418a480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a484:	d303      	bcc.n	3418a48e <HAL_LTDC_Init+0x76>
3418a486:	21fc      	movs	r1, #252	@ 0xfc
3418a488:	4882      	ldr	r0, [pc, #520]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a48a:	f7f7 feef 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
3418a48e:	687b      	ldr	r3, [r7, #4]
3418a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418a492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a496:	d303      	bcc.n	3418a4a0 <HAL_LTDC_Init+0x88>
3418a498:	21fd      	movs	r1, #253	@ 0xfd
3418a49a:	487e      	ldr	r0, [pc, #504]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a49c:	f7f7 fee6 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
3418a4a0:	687b      	ldr	r3, [r7, #4]
3418a4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a4a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a4a8:	d303      	bcc.n	3418a4b2 <HAL_LTDC_Init+0x9a>
3418a4aa:	21fe      	movs	r1, #254	@ 0xfe
3418a4ac:	4879      	ldr	r0, [pc, #484]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a4ae:	f7f7 fedd 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
3418a4b2:	687b      	ldr	r3, [r7, #4]
3418a4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418a4b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a4ba:	d303      	bcc.n	3418a4c4 <HAL_LTDC_Init+0xac>
3418a4bc:	21ff      	movs	r1, #255	@ 0xff
3418a4be:	4875      	ldr	r0, [pc, #468]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a4c0:	f7f7 fed4 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
3418a4c4:	687b      	ldr	r3, [r7, #4]
3418a4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a4c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a4cc:	d304      	bcc.n	3418a4d8 <HAL_LTDC_Init+0xc0>
3418a4ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418a4d2:	4870      	ldr	r0, [pc, #448]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a4d4:	f7f7 feca 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
3418a4d8:	687b      	ldr	r3, [r7, #4]
3418a4da:	685b      	ldr	r3, [r3, #4]
3418a4dc:	2b00      	cmp	r3, #0
3418a4de:	d009      	beq.n	3418a4f4 <HAL_LTDC_Init+0xdc>
3418a4e0:	687b      	ldr	r3, [r7, #4]
3418a4e2:	685b      	ldr	r3, [r3, #4]
3418a4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
3418a4e8:	d004      	beq.n	3418a4f4 <HAL_LTDC_Init+0xdc>
3418a4ea:	f240 1101 	movw	r1, #257	@ 0x101
3418a4ee:	4869      	ldr	r0, [pc, #420]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a4f0:	f7f7 febc 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
3418a4f4:	687b      	ldr	r3, [r7, #4]
3418a4f6:	689b      	ldr	r3, [r3, #8]
3418a4f8:	2b00      	cmp	r3, #0
3418a4fa:	d009      	beq.n	3418a510 <HAL_LTDC_Init+0xf8>
3418a4fc:	687b      	ldr	r3, [r7, #4]
3418a4fe:	689b      	ldr	r3, [r3, #8]
3418a500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418a504:	d004      	beq.n	3418a510 <HAL_LTDC_Init+0xf8>
3418a506:	f44f 7181 	mov.w	r1, #258	@ 0x102
3418a50a:	4862      	ldr	r0, [pc, #392]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a50c:	f7f7 feae 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
3418a510:	687b      	ldr	r3, [r7, #4]
3418a512:	68db      	ldr	r3, [r3, #12]
3418a514:	2b00      	cmp	r3, #0
3418a516:	d009      	beq.n	3418a52c <HAL_LTDC_Init+0x114>
3418a518:	687b      	ldr	r3, [r7, #4]
3418a51a:	68db      	ldr	r3, [r3, #12]
3418a51c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a520:	d004      	beq.n	3418a52c <HAL_LTDC_Init+0x114>
3418a522:	f240 1103 	movw	r1, #259	@ 0x103
3418a526:	485b      	ldr	r0, [pc, #364]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a528:	f7f7 fea0 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
3418a52c:	687b      	ldr	r3, [r7, #4]
3418a52e:	691b      	ldr	r3, [r3, #16]
3418a530:	2b00      	cmp	r3, #0
3418a532:	d009      	beq.n	3418a548 <HAL_LTDC_Init+0x130>
3418a534:	687b      	ldr	r3, [r7, #4]
3418a536:	691b      	ldr	r3, [r3, #16]
3418a538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a53c:	d004      	beq.n	3418a548 <HAL_LTDC_Init+0x130>
3418a53e:	f44f 7182 	mov.w	r1, #260	@ 0x104
3418a542:	4854      	ldr	r0, [pc, #336]	@ (3418a694 <HAL_LTDC_Init+0x27c>)
3418a544:	f7f7 fe92 	bl	3418226c <assert_failed>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
3418a548:	687b      	ldr	r3, [r7, #4]
3418a54a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
3418a54e:	b2db      	uxtb	r3, r3
3418a550:	2b00      	cmp	r3, #0
3418a552:	d106      	bne.n	3418a562 <HAL_LTDC_Init+0x14a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
3418a554:	687b      	ldr	r3, [r7, #4]
3418a556:	2200      	movs	r2, #0
3418a558:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
3418a55c:	6878      	ldr	r0, [r7, #4]
3418a55e:	f7f8 f859 	bl	34182614 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
3418a562:	687b      	ldr	r3, [r7, #4]
3418a564:	2202      	movs	r2, #2
3418a566:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
3418a56a:	687b      	ldr	r3, [r7, #4]
3418a56c:	681b      	ldr	r3, [r3, #0]
3418a56e:	699a      	ldr	r2, [r3, #24]
3418a570:	687b      	ldr	r3, [r7, #4]
3418a572:	681b      	ldr	r3, [r3, #0]
3418a574:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
3418a578:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
3418a57a:	687b      	ldr	r3, [r7, #4]
3418a57c:	681b      	ldr	r3, [r3, #0]
3418a57e:	6999      	ldr	r1, [r3, #24]
3418a580:	687b      	ldr	r3, [r7, #4]
3418a582:	685a      	ldr	r2, [r3, #4]
3418a584:	687b      	ldr	r3, [r7, #4]
3418a586:	689b      	ldr	r3, [r3, #8]
3418a588:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
3418a58a:	687b      	ldr	r3, [r7, #4]
3418a58c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
3418a58e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
3418a590:	687b      	ldr	r3, [r7, #4]
3418a592:	691b      	ldr	r3, [r3, #16]
3418a594:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
3418a596:	687b      	ldr	r3, [r7, #4]
3418a598:	681b      	ldr	r3, [r3, #0]
3418a59a:	430a      	orrs	r2, r1
3418a59c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
3418a59e:	687b      	ldr	r3, [r7, #4]
3418a5a0:	695b      	ldr	r3, [r3, #20]
3418a5a2:	041b      	lsls	r3, r3, #16
3418a5a4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
3418a5a6:	687b      	ldr	r3, [r7, #4]
3418a5a8:	6999      	ldr	r1, [r3, #24]
3418a5aa:	687b      	ldr	r3, [r7, #4]
3418a5ac:	681b      	ldr	r3, [r3, #0]
3418a5ae:	68fa      	ldr	r2, [r7, #12]
3418a5b0:	430a      	orrs	r2, r1
3418a5b2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
3418a5b4:	687b      	ldr	r3, [r7, #4]
3418a5b6:	69db      	ldr	r3, [r3, #28]
3418a5b8:	041b      	lsls	r3, r3, #16
3418a5ba:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
3418a5bc:	687b      	ldr	r3, [r7, #4]
3418a5be:	6a19      	ldr	r1, [r3, #32]
3418a5c0:	687b      	ldr	r3, [r7, #4]
3418a5c2:	681b      	ldr	r3, [r3, #0]
3418a5c4:	68fa      	ldr	r2, [r7, #12]
3418a5c6:	430a      	orrs	r2, r1
3418a5c8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
3418a5ca:	687b      	ldr	r3, [r7, #4]
3418a5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418a5ce:	041b      	lsls	r3, r3, #16
3418a5d0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
3418a5d2:	687b      	ldr	r3, [r7, #4]
3418a5d4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
3418a5d6:	687b      	ldr	r3, [r7, #4]
3418a5d8:	681b      	ldr	r3, [r3, #0]
3418a5da:	68fa      	ldr	r2, [r7, #12]
3418a5dc:	430a      	orrs	r2, r1
3418a5de:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
3418a5e0:	687b      	ldr	r3, [r7, #4]
3418a5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a5e4:	041b      	lsls	r3, r3, #16
3418a5e6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
3418a5e8:	687b      	ldr	r3, [r7, #4]
3418a5ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
3418a5ec:	687b      	ldr	r3, [r7, #4]
3418a5ee:	681b      	ldr	r3, [r3, #0]
3418a5f0:	68fa      	ldr	r2, [r7, #12]
3418a5f2:	430a      	orrs	r2, r1
3418a5f4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
3418a5f6:	687b      	ldr	r3, [r7, #4]
3418a5f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3418a5fc:	021b      	lsls	r3, r3, #8
3418a5fe:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
3418a600:	687b      	ldr	r3, [r7, #4]
3418a602:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3418a606:	041b      	lsls	r3, r3, #16
3418a608:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
3418a60a:	687b      	ldr	r3, [r7, #4]
3418a60c:	681b      	ldr	r3, [r3, #0]
3418a60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3418a610:	687b      	ldr	r3, [r7, #4]
3418a612:	681b      	ldr	r3, [r3, #0]
3418a614:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
3418a618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
3418a61a:	687b      	ldr	r3, [r7, #4]
3418a61c:	681b      	ldr	r3, [r3, #0]
3418a61e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418a620:	68ba      	ldr	r2, [r7, #8]
3418a622:	68fb      	ldr	r3, [r7, #12]
3418a624:	4313      	orrs	r3, r2
3418a626:	687a      	ldr	r2, [r7, #4]
3418a628:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
3418a62c:	431a      	orrs	r2, r3
3418a62e:	687b      	ldr	r3, [r7, #4]
3418a630:	681b      	ldr	r3, [r3, #0]
3418a632:	430a      	orrs	r2, r1
3418a634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Activate Global Reload for Layer 1 and Layer 2 */
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
3418a636:	687b      	ldr	r3, [r7, #4]
3418a638:	681b      	ldr	r3, [r3, #0]
3418a63a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a63e:	461a      	mov	r2, r3
3418a640:	2304      	movs	r3, #4
3418a642:	6093      	str	r3, [r2, #8]
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
3418a644:	687b      	ldr	r3, [r7, #4]
3418a646:	681b      	ldr	r3, [r3, #0]
3418a648:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3418a64c:	461a      	mov	r2, r3
3418a64e:	2304      	movs	r3, #4
3418a650:	6093      	str	r3, [r2, #8]

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
3418a652:	687b      	ldr	r3, [r7, #4]
3418a654:	681b      	ldr	r3, [r3, #0]
3418a656:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
3418a658:	687b      	ldr	r3, [r7, #4]
3418a65a:	681b      	ldr	r3, [r3, #0]
3418a65c:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
3418a660:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
3418a662:	687b      	ldr	r3, [r7, #4]
3418a664:	681b      	ldr	r3, [r3, #0]
3418a666:	699a      	ldr	r2, [r3, #24]
3418a668:	687b      	ldr	r3, [r7, #4]
3418a66a:	681b      	ldr	r3, [r3, #0]
3418a66c:	f042 0201 	orr.w	r2, r2, #1
3418a670:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
3418a672:	687b      	ldr	r3, [r7, #4]
3418a674:	2200      	movs	r2, #0
3418a676:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
3418a67a:	687b      	ldr	r3, [r7, #4]
3418a67c:	2201      	movs	r2, #1
3418a67e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
3418a682:	2300      	movs	r3, #0
}
3418a684:	4618      	mov	r0, r3
3418a686:	3710      	adds	r7, #16
3418a688:	46bd      	mov	sp, r7
3418a68a:	bd80      	pop	{r7, pc}
3418a68c:	58001000 	.word	0x58001000
3418a690:	48001000 	.word	0x48001000
3418a694:	341a51f8 	.word	0x341a51f8

3418a698 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
3418a698:	b5b0      	push	{r4, r5, r7, lr}
3418a69a:	b086      	sub	sp, #24
3418a69c:	af02      	add	r7, sp, #8
3418a69e:	60f8      	str	r0, [r7, #12]
3418a6a0:	60b9      	str	r1, [r7, #8]
3418a6a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));
3418a6a4:	687b      	ldr	r3, [r7, #4]
3418a6a6:	2b01      	cmp	r3, #1
3418a6a8:	d904      	bls.n	3418a6b4 <HAL_LTDC_ConfigLayer+0x1c>
3418a6aa:	f240 4104 	movw	r1, #1028	@ 0x404
3418a6ae:	4880      	ldr	r0, [pc, #512]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a6b0:	f7f7 fddc 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
3418a6b4:	68bb      	ldr	r3, [r7, #8]
3418a6b6:	681b      	ldr	r3, [r3, #0]
3418a6b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a6bc:	d304      	bcc.n	3418a6c8 <HAL_LTDC_ConfigLayer+0x30>
3418a6be:	f240 4105 	movw	r1, #1029	@ 0x405
3418a6c2:	487b      	ldr	r0, [pc, #492]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a6c4:	f7f7 fdd2 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
3418a6c8:	68bb      	ldr	r3, [r7, #8]
3418a6ca:	685b      	ldr	r3, [r3, #4]
3418a6cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a6d0:	d304      	bcc.n	3418a6dc <HAL_LTDC_ConfigLayer+0x44>
3418a6d2:	f240 4106 	movw	r1, #1030	@ 0x406
3418a6d6:	4876      	ldr	r0, [pc, #472]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a6d8:	f7f7 fdc8 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
3418a6dc:	68bb      	ldr	r3, [r7, #8]
3418a6de:	689b      	ldr	r3, [r3, #8]
3418a6e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a6e4:	d304      	bcc.n	3418a6f0 <HAL_LTDC_ConfigLayer+0x58>
3418a6e6:	f240 4107 	movw	r1, #1031	@ 0x407
3418a6ea:	4871      	ldr	r0, [pc, #452]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a6ec:	f7f7 fdbe 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
3418a6f0:	68bb      	ldr	r3, [r7, #8]
3418a6f2:	68db      	ldr	r3, [r3, #12]
3418a6f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a6f8:	d304      	bcc.n	3418a704 <HAL_LTDC_ConfigLayer+0x6c>
3418a6fa:	f44f 6181 	mov.w	r1, #1032	@ 0x408
3418a6fe:	486c      	ldr	r0, [pc, #432]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a700:	f7f7 fdb4 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
3418a704:	68bb      	ldr	r3, [r7, #8]
3418a706:	691b      	ldr	r3, [r3, #16]
3418a708:	2b00      	cmp	r3, #0
3418a70a:	d030      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a70c:	68bb      	ldr	r3, [r7, #8]
3418a70e:	691b      	ldr	r3, [r3, #16]
3418a710:	2b01      	cmp	r3, #1
3418a712:	d02c      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a714:	68bb      	ldr	r3, [r7, #8]
3418a716:	691b      	ldr	r3, [r3, #16]
3418a718:	2b02      	cmp	r3, #2
3418a71a:	d028      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a71c:	68bb      	ldr	r3, [r7, #8]
3418a71e:	691b      	ldr	r3, [r3, #16]
3418a720:	2b03      	cmp	r3, #3
3418a722:	d024      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a724:	68bb      	ldr	r3, [r7, #8]
3418a726:	691b      	ldr	r3, [r3, #16]
3418a728:	2b04      	cmp	r3, #4
3418a72a:	d020      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a72c:	68bb      	ldr	r3, [r7, #8]
3418a72e:	691b      	ldr	r3, [r3, #16]
3418a730:	2b05      	cmp	r3, #5
3418a732:	d01c      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a734:	68bb      	ldr	r3, [r7, #8]
3418a736:	691b      	ldr	r3, [r3, #16]
3418a738:	2b06      	cmp	r3, #6
3418a73a:	d018      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a73c:	68bb      	ldr	r3, [r7, #8]
3418a73e:	691b      	ldr	r3, [r3, #16]
3418a740:	2b07      	cmp	r3, #7
3418a742:	d014      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a744:	68bb      	ldr	r3, [r7, #8]
3418a746:	691b      	ldr	r3, [r3, #16]
3418a748:	2b08      	cmp	r3, #8
3418a74a:	d010      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a74c:	68bb      	ldr	r3, [r7, #8]
3418a74e:	691b      	ldr	r3, [r3, #16]
3418a750:	2b09      	cmp	r3, #9
3418a752:	d00c      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a754:	68bb      	ldr	r3, [r7, #8]
3418a756:	691b      	ldr	r3, [r3, #16]
3418a758:	2b0a      	cmp	r3, #10
3418a75a:	d008      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a75c:	68bb      	ldr	r3, [r7, #8]
3418a75e:	691b      	ldr	r3, [r3, #16]
3418a760:	2b0b      	cmp	r3, #11
3418a762:	d004      	beq.n	3418a76e <HAL_LTDC_ConfigLayer+0xd6>
3418a764:	f240 4109 	movw	r1, #1033	@ 0x409
3418a768:	4851      	ldr	r0, [pc, #324]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a76a:	f7f7 fd7f 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
3418a76e:	68bb      	ldr	r3, [r7, #8]
3418a770:	695b      	ldr	r3, [r3, #20]
3418a772:	2bff      	cmp	r3, #255	@ 0xff
3418a774:	d904      	bls.n	3418a780 <HAL_LTDC_ConfigLayer+0xe8>
3418a776:	f240 410a 	movw	r1, #1034	@ 0x40a
3418a77a:	484d      	ldr	r0, [pc, #308]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a77c:	f7f7 fd76 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
3418a780:	68bb      	ldr	r3, [r7, #8]
3418a782:	699b      	ldr	r3, [r3, #24]
3418a784:	2bff      	cmp	r3, #255	@ 0xff
3418a786:	d904      	bls.n	3418a792 <HAL_LTDC_ConfigLayer+0xfa>
3418a788:	f240 410b 	movw	r1, #1035	@ 0x40b
3418a78c:	4848      	ldr	r0, [pc, #288]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a78e:	f7f7 fd6d 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
3418a792:	68bb      	ldr	r3, [r7, #8]
3418a794:	69db      	ldr	r3, [r3, #28]
3418a796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418a79a:	d009      	beq.n	3418a7b0 <HAL_LTDC_ConfigLayer+0x118>
3418a79c:	68bb      	ldr	r3, [r7, #8]
3418a79e:	69db      	ldr	r3, [r3, #28]
3418a7a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418a7a4:	d004      	beq.n	3418a7b0 <HAL_LTDC_ConfigLayer+0x118>
3418a7a6:	f240 410c 	movw	r1, #1036	@ 0x40c
3418a7aa:	4841      	ldr	r0, [pc, #260]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a7ac:	f7f7 fd5e 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
3418a7b0:	68bb      	ldr	r3, [r7, #8]
3418a7b2:	6a1b      	ldr	r3, [r3, #32]
3418a7b4:	2b05      	cmp	r3, #5
3418a7b6:	d008      	beq.n	3418a7ca <HAL_LTDC_ConfigLayer+0x132>
3418a7b8:	68bb      	ldr	r3, [r7, #8]
3418a7ba:	6a1b      	ldr	r3, [r3, #32]
3418a7bc:	2b07      	cmp	r3, #7
3418a7be:	d004      	beq.n	3418a7ca <HAL_LTDC_ConfigLayer+0x132>
3418a7c0:	f240 410d 	movw	r1, #1037	@ 0x40d
3418a7c4:	483a      	ldr	r0, [pc, #232]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a7c6:	f7f7 fd51 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
3418a7ca:	68bb      	ldr	r3, [r7, #8]
3418a7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418a7ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418a7d2:	d304      	bcc.n	3418a7de <HAL_LTDC_ConfigLayer+0x146>
3418a7d4:	f240 410e 	movw	r1, #1038	@ 0x40e
3418a7d8:	4835      	ldr	r0, [pc, #212]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a7da:	f7f7 fd47 	bl	3418226c <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
3418a7de:	68bb      	ldr	r3, [r7, #8]
3418a7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418a7e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418a7e6:	d304      	bcc.n	3418a7f2 <HAL_LTDC_ConfigLayer+0x15a>
3418a7e8:	f240 410f 	movw	r1, #1039	@ 0x40f
3418a7ec:	4830      	ldr	r0, [pc, #192]	@ (3418a8b0 <HAL_LTDC_ConfigLayer+0x218>)
3418a7ee:	f7f7 fd3d 	bl	3418226c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
3418a7f2:	68fb      	ldr	r3, [r7, #12]
3418a7f4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
3418a7f8:	2b01      	cmp	r3, #1
3418a7fa:	d101      	bne.n	3418a800 <HAL_LTDC_ConfigLayer+0x168>
3418a7fc:	2302      	movs	r3, #2
3418a7fe:	e052      	b.n	3418a8a6 <HAL_LTDC_ConfigLayer+0x20e>
3418a800:	68fb      	ldr	r3, [r7, #12]
3418a802:	2201      	movs	r2, #1
3418a804:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
3418a808:	68fb      	ldr	r3, [r7, #12]
3418a80a:	2202      	movs	r2, #2
3418a80c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
3418a810:	68fa      	ldr	r2, [r7, #12]
3418a812:	687b      	ldr	r3, [r7, #4]
3418a814:	2134      	movs	r1, #52	@ 0x34
3418a816:	fb01 f303 	mul.w	r3, r1, r3
3418a81a:	4413      	add	r3, r2
3418a81c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
3418a820:	68bb      	ldr	r3, [r7, #8]
3418a822:	4614      	mov	r4, r2
3418a824:	461d      	mov	r5, r3
3418a826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418a828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418a82a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418a82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418a82e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418a830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418a832:	682b      	ldr	r3, [r5, #0]
3418a834:	6023      	str	r3, [r4, #0]

  /* Configure Predefined format */
  LTDC_SetPredefFormat(hltdc, LayerIdx);
3418a836:	6879      	ldr	r1, [r7, #4]
3418a838:	68f8      	ldr	r0, [r7, #12]
3418a83a:	f000 ff6f 	bl	3418b71c <LTDC_SetPredefFormat>

  /* Configure composition and blending*/
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
3418a83e:	6879      	ldr	r1, [r7, #4]
3418a840:	68f8      	ldr	r0, [r7, #12]
3418a842:	f000 fec3 	bl	3418b5cc <LTDC_SetCompositionConfig>

  /* Disable YUV format */
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
3418a846:	68fb      	ldr	r3, [r7, #12]
3418a848:	681b      	ldr	r3, [r3, #0]
3418a84a:	461a      	mov	r2, r3
3418a84c:	687b      	ldr	r3, [r7, #4]
3418a84e:	021b      	lsls	r3, r3, #8
3418a850:	4413      	add	r3, r2
3418a852:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418a858:	68fa      	ldr	r2, [r7, #12]
3418a85a:	6812      	ldr	r2, [r2, #0]
3418a85c:	4611      	mov	r1, r2
3418a85e:	687a      	ldr	r2, [r7, #4]
3418a860:	0212      	lsls	r2, r2, #8
3418a862:	440a      	add	r2, r1
3418a864:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418a868:	f023 0308 	bic.w	r3, r3, #8
3418a86c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3418a86e:	687b      	ldr	r3, [r7, #4]
3418a870:	9300      	str	r3, [sp, #0]
3418a872:	2303      	movs	r3, #3
3418a874:	2200      	movs	r2, #0
3418a876:	2100      	movs	r1, #0
3418a878:	68f8      	ldr	r0, [r7, #12]
3418a87a:	f000 f81b 	bl	3418a8b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3418a87e:	68fb      	ldr	r3, [r7, #12]
3418a880:	681b      	ldr	r3, [r3, #0]
3418a882:	461a      	mov	r2, r3
3418a884:	687b      	ldr	r3, [r7, #4]
3418a886:	021b      	lsls	r3, r3, #8
3418a888:	4413      	add	r3, r2
3418a88a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a88e:	461a      	mov	r2, r3
3418a890:	2305      	movs	r3, #5
3418a892:	6093      	str	r3, [r2, #8]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
3418a894:	68fb      	ldr	r3, [r7, #12]
3418a896:	2201      	movs	r2, #1
3418a898:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
3418a89c:	68fb      	ldr	r3, [r7, #12]
3418a89e:	2200      	movs	r2, #0
3418a8a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
3418a8a4:	2300      	movs	r3, #0
}
3418a8a6:	4618      	mov	r0, r3
3418a8a8:	3710      	adds	r7, #16
3418a8aa:	46bd      	mov	sp, r7
3418a8ac:	bdb0      	pop	{r4, r5, r7, pc}
3418a8ae:	bf00      	nop
3418a8b0:	341a51f8 	.word	0x341a51f8

3418a8b4 <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
3418a8b4:	b4b0      	push	{r4, r5, r7}
3418a8b6:	b087      	sub	sp, #28
3418a8b8:	af00      	add	r7, sp, #0
3418a8ba:	60f8      	str	r0, [r7, #12]
3418a8bc:	60b9      	str	r1, [r7, #8]
3418a8be:	607a      	str	r2, [r7, #4]
3418a8c0:	603b      	str	r3, [r7, #0]
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
3418a8c2:	68fb      	ldr	r3, [r7, #12]
3418a8c4:	681b      	ldr	r3, [r3, #0]
3418a8c6:	461a      	mov	r2, r3
3418a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a8ca:	021b      	lsls	r3, r3, #8
3418a8cc:	4413      	add	r3, r2
3418a8ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a8d2:	4618      	mov	r0, r3
3418a8d4:	68fa      	ldr	r2, [r7, #12]
3418a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a8d8:	2134      	movs	r1, #52	@ 0x34
3418a8da:	fb01 f303 	mul.w	r3, r1, r3
3418a8de:	4413      	add	r3, r2
3418a8e0:	3364      	adds	r3, #100	@ 0x64
3418a8e2:	681b      	ldr	r3, [r3, #0]
3418a8e4:	63c3      	str	r3, [r0, #60]	@ 0x3c

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418a8e6:	68fa      	ldr	r2, [r7, #12]
3418a8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a8ea:	2134      	movs	r1, #52	@ 0x34
3418a8ec:	fb01 f303 	mul.w	r3, r1, r3
3418a8f0:	4413      	add	r3, r2
3418a8f2:	3348      	adds	r3, #72	@ 0x48
3418a8f4:	681b      	ldr	r3, [r3, #0]
3418a8f6:	2b03      	cmp	r3, #3
3418a8f8:	d821      	bhi.n	3418a93e <LTDC_SetConfig+0x8a>
3418a8fa:	e025      	b.n	3418a948 <LTDC_SetConfig+0x94>
3418a8fc:	3b04      	subs	r3, #4
3418a8fe:	2201      	movs	r2, #1
3418a900:	fa02 f303 	lsl.w	r3, r2, r3
3418a904:	f240 229b 	movw	r2, #667	@ 0x29b
3418a908:	401a      	ands	r2, r3
3418a90a:	2a00      	cmp	r2, #0
3418a90c:	bf14      	ite	ne
3418a90e:	2201      	movne	r2, #1
3418a910:	2200      	moveq	r2, #0
3418a912:	b2d2      	uxtb	r2, r2
3418a914:	2a00      	cmp	r2, #0
3418a916:	d11d      	bne.n	3418a954 <LTDC_SetConfig+0xa0>
3418a918:	f403 7280 	and.w	r2, r3, #256	@ 0x100
3418a91c:	2a00      	cmp	r2, #0
3418a91e:	bf14      	ite	ne
3418a920:	2201      	movne	r2, #1
3418a922:	2200      	moveq	r2, #0
3418a924:	b2d2      	uxtb	r2, r2
3418a926:	2a00      	cmp	r2, #0
3418a928:	d117      	bne.n	3418a95a <LTDC_SetConfig+0xa6>
3418a92a:	f003 0304 	and.w	r3, r3, #4
3418a92e:	2b00      	cmp	r3, #0
3418a930:	bf14      	ite	ne
3418a932:	2301      	movne	r3, #1
3418a934:	2300      	moveq	r3, #0
3418a936:	b2db      	uxtb	r3, r3
3418a938:	2b00      	cmp	r3, #0
3418a93a:	d108      	bne.n	3418a94e <LTDC_SetConfig+0x9a>
3418a93c:	e01b      	b.n	3418a976 <LTDC_SetConfig+0xc2>
3418a93e:	2b0d      	cmp	r3, #13
3418a940:	d819      	bhi.n	3418a976 <LTDC_SetConfig+0xc2>
3418a942:	2b04      	cmp	r3, #4
3418a944:	d2da      	bcs.n	3418a8fc <LTDC_SetConfig+0x48>
3418a946:	e016      	b.n	3418a976 <LTDC_SetConfig+0xc2>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
3418a948:	2304      	movs	r3, #4
3418a94a:	617b      	str	r3, [r7, #20]
      break;
3418a94c:	e016      	b.n	3418a97c <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_RGB888:
      stride = 3U;
3418a94e:	2303      	movs	r3, #3
3418a950:	617b      	str	r3, [r7, #20]
      break;
3418a952:	e013      	b.n	3418a97c <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_AL88:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_COPLANAR:
      stride = 2U;
3418a954:	2302      	movs	r3, #2
3418a956:	617b      	str	r3, [r7, #20]
      break;
3418a958:	e010      	b.n	3418a97c <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_FLEX_ARGB:
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
3418a95a:	68fb      	ldr	r3, [r7, #12]
3418a95c:	681b      	ldr	r3, [r3, #0]
3418a95e:	461a      	mov	r2, r3
3418a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a962:	021b      	lsls	r3, r3, #8
3418a964:	4413      	add	r3, r2
3418a966:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a96a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3418a96c:	0c9b      	lsrs	r3, r3, #18
3418a96e:	f003 0307 	and.w	r3, r3, #7
3418a972:	617b      	str	r3, [r7, #20]
      break;
3418a974:	e002      	b.n	3418a97c <LTDC_SetConfig+0xc8>
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_FLEX_YUV_SEMIPLANAR:
    default:
      stride = 1U;
3418a976:	2301      	movs	r3, #1
3418a978:	617b      	str	r3, [r7, #20]
      break;
3418a97a:	bf00      	nop
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
3418a97c:	68fa      	ldr	r2, [r7, #12]
3418a97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a980:	2134      	movs	r1, #52	@ 0x34
3418a982:	fb01 f303 	mul.w	r3, r1, r3
3418a986:	4413      	add	r3, r2
3418a988:	333c      	adds	r3, #60	@ 0x3c
3418a98a:	681a      	ldr	r2, [r3, #0]
3418a98c:	68fb      	ldr	r3, [r7, #12]
3418a98e:	681b      	ldr	r3, [r3, #0]
3418a990:	68db      	ldr	r3, [r3, #12]
3418a992:	0c1b      	lsrs	r3, r3, #16
3418a994:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418a998:	4413      	add	r3, r2
3418a99a:	041b      	lsls	r3, r3, #16
3418a99c:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
3418a99e:	68fa      	ldr	r2, [r7, #12]
3418a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a9a2:	2134      	movs	r1, #52	@ 0x34
3418a9a4:	fb01 f303 	mul.w	r3, r1, r3
3418a9a8:	4413      	add	r3, r2
3418a9aa:	3338      	adds	r3, #56	@ 0x38
3418a9ac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3418a9ae:	68fb      	ldr	r3, [r7, #12]
3418a9b0:	681b      	ldr	r3, [r3, #0]
3418a9b2:	68db      	ldr	r3, [r3, #12]
3418a9b4:	0c1b      	lsrs	r3, r3, #16
3418a9b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
3418a9ba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3418a9bc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
3418a9be:	68fb      	ldr	r3, [r7, #12]
3418a9c0:	681b      	ldr	r3, [r3, #0]
3418a9c2:	4619      	mov	r1, r3
3418a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a9c6:	021b      	lsls	r3, r3, #8
3418a9c8:	440b      	add	r3, r1
3418a9ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418a9ce:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3418a9d0:	693b      	ldr	r3, [r7, #16]
3418a9d2:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
3418a9d4:	610b      	str	r3, [r1, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
3418a9d6:	68fa      	ldr	r2, [r7, #12]
3418a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a9da:	2134      	movs	r1, #52	@ 0x34
3418a9dc:	fb01 f303 	mul.w	r3, r1, r3
3418a9e0:	4413      	add	r3, r2
3418a9e2:	3344      	adds	r3, #68	@ 0x44
3418a9e4:	681a      	ldr	r2, [r3, #0]
3418a9e6:	68fb      	ldr	r3, [r7, #12]
3418a9e8:	681b      	ldr	r3, [r3, #0]
3418a9ea:	68db      	ldr	r3, [r3, #12]
3418a9ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418a9f0:	4413      	add	r3, r2
3418a9f2:	041b      	lsls	r3, r3, #16
3418a9f4:	613b      	str	r3, [r7, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
3418a9f6:	68fa      	ldr	r2, [r7, #12]
3418a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418a9fa:	2134      	movs	r1, #52	@ 0x34
3418a9fc:	fb01 f303 	mul.w	r3, r1, r3
3418aa00:	4413      	add	r3, r2
3418aa02:	3340      	adds	r3, #64	@ 0x40
3418aa04:	681a      	ldr	r2, [r3, #0]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
3418aa06:	68fb      	ldr	r3, [r7, #12]
3418aa08:	681b      	ldr	r3, [r3, #0]
3418aa0a:	68db      	ldr	r3, [r3, #12]
3418aa0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
3418aa10:	4413      	add	r3, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
3418aa12:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
3418aa14:	68fb      	ldr	r3, [r7, #12]
3418aa16:	681b      	ldr	r3, [r3, #0]
3418aa18:	4619      	mov	r1, r3
3418aa1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa1c:	021b      	lsls	r3, r3, #8
3418aa1e:	440b      	add	r3, r1
3418aa20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418aa24:	4619      	mov	r1, r3
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
3418aa26:	693b      	ldr	r3, [r7, #16]
3418aa28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
3418aa2a:	614b      	str	r3, [r1, #20]

  if (Mirror == LTDC_MIRROR_NONE)
3418aa2c:	683b      	ldr	r3, [r7, #0]
3418aa2e:	2b03      	cmp	r3, #3
3418aa30:	f040 80fb 	bne.w	3418ac2a <LTDC_SetConfig+0x376>
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
3418aa34:	68fb      	ldr	r3, [r7, #12]
3418aa36:	681b      	ldr	r3, [r3, #0]
3418aa38:	461a      	mov	r2, r3
3418aa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa3c:	021b      	lsls	r3, r3, #8
3418aa3e:	4413      	add	r3, r2
3418aa40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418aa44:	4618      	mov	r0, r3
3418aa46:	68fa      	ldr	r2, [r7, #12]
3418aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa4a:	2134      	movs	r1, #52	@ 0x34
3418aa4c:	fb01 f303 	mul.w	r3, r1, r3
3418aa50:	4413      	add	r3, r2
3418aa52:	335c      	adds	r3, #92	@ 0x5c
3418aa54:	681b      	ldr	r3, [r3, #0]
3418aa56:	6343      	str	r3, [r0, #52]	@ 0x34

    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418aa58:	68fa      	ldr	r2, [r7, #12]
3418aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa5c:	2134      	movs	r1, #52	@ 0x34
3418aa5e:	fb01 f303 	mul.w	r3, r1, r3
3418aa62:	4413      	add	r3, r2
3418aa64:	3348      	adds	r3, #72	@ 0x48
3418aa66:	681b      	ldr	r3, [r3, #0]
3418aa68:	f240 120d 	movw	r2, #269	@ 0x10d
3418aa6c:	4293      	cmp	r3, r2
3418aa6e:	d004      	beq.n	3418aa7a <LTDC_SetConfig+0x1c6>
3418aa70:	f240 220d 	movw	r2, #525	@ 0x20d
3418aa74:	4293      	cmp	r3, r2
3418aa76:	d043      	beq.n	3418ab00 <LTDC_SetConfig+0x24c>
        /* Configure the frame buffer line number */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
        break;
      default:
        /* Nothing to do */
        break;
3418aa78:	e092      	b.n	3418aba0 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
3418aa7a:	68fb      	ldr	r3, [r7, #12]
3418aa7c:	681b      	ldr	r3, [r3, #0]
3418aa7e:	461a      	mov	r2, r3
3418aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa82:	021b      	lsls	r3, r3, #8
3418aa84:	4413      	add	r3, r2
3418aa86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418aa8a:	461a      	mov	r2, r3
3418aa8c:	68bb      	ldr	r3, [r7, #8]
3418aa8e:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418aa90:	68fa      	ldr	r2, [r7, #12]
3418aa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aa94:	2134      	movs	r1, #52	@ 0x34
3418aa96:	fb01 f303 	mul.w	r3, r1, r3
3418aa9a:	4413      	add	r3, r2
3418aa9c:	3360      	adds	r3, #96	@ 0x60
3418aa9e:	681b      	ldr	r3, [r3, #0]
3418aaa0:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418aaa2:	68f9      	ldr	r1, [r7, #12]
3418aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aaa6:	2034      	movs	r0, #52	@ 0x34
3418aaa8:	fb00 f303 	mul.w	r3, r0, r3
3418aaac:	440b      	add	r3, r1
3418aaae:	333c      	adds	r3, #60	@ 0x3c
3418aab0:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
3418aab2:	68f8      	ldr	r0, [r7, #12]
3418aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aab6:	2434      	movs	r4, #52	@ 0x34
3418aab8:	fb04 f303 	mul.w	r3, r4, r3
3418aabc:	4403      	add	r3, r0
3418aabe:	3338      	adds	r3, #56	@ 0x38
3418aac0:	681b      	ldr	r3, [r3, #0]
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418aac2:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
3418aac4:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418aac6:	68f9      	ldr	r1, [r7, #12]
3418aac8:	6809      	ldr	r1, [r1, #0]
3418aaca:	4608      	mov	r0, r1
3418aacc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418aace:	0209      	lsls	r1, r1, #8
3418aad0:	4401      	add	r1, r0
3418aad2:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418aad6:	4313      	orrs	r3, r2
3418aad8:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
3418aada:	68fa      	ldr	r2, [r7, #12]
3418aadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aade:	2134      	movs	r1, #52	@ 0x34
3418aae0:	fb01 f303 	mul.w	r3, r1, r3
3418aae4:	4413      	add	r3, r2
3418aae6:	3364      	adds	r3, #100	@ 0x64
3418aae8:	681b      	ldr	r3, [r3, #0]
3418aaea:	68fa      	ldr	r2, [r7, #12]
3418aaec:	6812      	ldr	r2, [r2, #0]
3418aaee:	4611      	mov	r1, r2
3418aaf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418aaf2:	0212      	lsls	r2, r2, #8
3418aaf4:	440a      	add	r2, r1
3418aaf6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418aafa:	085b      	lsrs	r3, r3, #1
3418aafc:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418aafe:	e04f      	b.n	3418aba0 <LTDC_SetConfig+0x2ec>
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
3418ab00:	68fb      	ldr	r3, [r7, #12]
3418ab02:	681b      	ldr	r3, [r3, #0]
3418ab04:	461a      	mov	r2, r3
3418ab06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab08:	021b      	lsls	r3, r3, #8
3418ab0a:	4413      	add	r3, r2
3418ab0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418ab10:	461a      	mov	r2, r3
3418ab12:	68bb      	ldr	r3, [r7, #8]
3418ab14:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
3418ab16:	68fb      	ldr	r3, [r7, #12]
3418ab18:	681b      	ldr	r3, [r3, #0]
3418ab1a:	461a      	mov	r2, r3
3418ab1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab1e:	021b      	lsls	r3, r3, #8
3418ab20:	4413      	add	r3, r2
3418ab22:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418ab26:	461a      	mov	r2, r3
3418ab28:	687b      	ldr	r3, [r7, #4]
3418ab2a:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418ab2c:	68fa      	ldr	r2, [r7, #12]
3418ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab30:	2134      	movs	r1, #52	@ 0x34
3418ab32:	fb01 f303 	mul.w	r3, r1, r3
3418ab36:	4413      	add	r3, r2
3418ab38:	3360      	adds	r3, #96	@ 0x60
3418ab3a:	681b      	ldr	r3, [r3, #0]
3418ab3c:	085b      	lsrs	r3, r3, #1
3418ab3e:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ab40:	68f9      	ldr	r1, [r7, #12]
3418ab42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab44:	2034      	movs	r0, #52	@ 0x34
3418ab46:	fb00 f303 	mul.w	r3, r0, r3
3418ab4a:	440b      	add	r3, r1
3418ab4c:	333c      	adds	r3, #60	@ 0x3c
3418ab4e:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418ab50:	68f8      	ldr	r0, [r7, #12]
3418ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab54:	2434      	movs	r4, #52	@ 0x34
3418ab56:	fb04 f303 	mul.w	r3, r4, r3
3418ab5a:	4403      	add	r3, r0
3418ab5c:	3338      	adds	r3, #56	@ 0x38
3418ab5e:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ab60:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418ab62:	085b      	lsrs	r3, r3, #1
3418ab64:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418ab66:	68f9      	ldr	r1, [r7, #12]
3418ab68:	6809      	ldr	r1, [r1, #0]
3418ab6a:	4608      	mov	r0, r1
3418ab6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ab6e:	0209      	lsls	r1, r1, #8
3418ab70:	4401      	add	r1, r0
3418ab72:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418ab76:	4313      	orrs	r3, r2
3418ab78:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
3418ab7a:	68fa      	ldr	r2, [r7, #12]
3418ab7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ab7e:	2134      	movs	r1, #52	@ 0x34
3418ab80:	fb01 f303 	mul.w	r3, r1, r3
3418ab84:	4413      	add	r3, r2
3418ab86:	3364      	adds	r3, #100	@ 0x64
3418ab88:	681b      	ldr	r3, [r3, #0]
3418ab8a:	68fa      	ldr	r2, [r7, #12]
3418ab8c:	6812      	ldr	r2, [r2, #0]
3418ab8e:	4611      	mov	r1, r2
3418ab90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ab92:	0212      	lsls	r2, r2, #8
3418ab94:	440a      	add	r2, r1
3418ab96:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418ab9a:	085b      	lsrs	r3, r3, #1
3418ab9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418ab9e:	bf00      	nop
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3418aba0:	68fa      	ldr	r2, [r7, #12]
3418aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aba4:	2134      	movs	r1, #52	@ 0x34
3418aba6:	fb01 f303 	mul.w	r3, r1, r3
3418abaa:	4413      	add	r3, r2
3418abac:	3360      	adds	r3, #96	@ 0x60
3418abae:	681b      	ldr	r3, [r3, #0]
3418abb0:	697a      	ldr	r2, [r7, #20]
3418abb2:	fb02 f303 	mul.w	r3, r2, r3
3418abb6:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
3418abb8:	68f9      	ldr	r1, [r7, #12]
3418abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418abbc:	2034      	movs	r0, #52	@ 0x34
3418abbe:	fb00 f303 	mul.w	r3, r0, r3
3418abc2:	440b      	add	r3, r1
3418abc4:	333c      	adds	r3, #60	@ 0x3c
3418abc6:	6819      	ldr	r1, [r3, #0]
3418abc8:	68f8      	ldr	r0, [r7, #12]
3418abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418abcc:	2434      	movs	r4, #52	@ 0x34
3418abce:	fb04 f303 	mul.w	r3, r4, r3
3418abd2:	4403      	add	r3, r0
3418abd4:	3338      	adds	r3, #56	@ 0x38
3418abd6:	681b      	ldr	r3, [r3, #0]
3418abd8:	1acb      	subs	r3, r1, r3
3418abda:	6979      	ldr	r1, [r7, #20]
3418abdc:	fb01 f303 	mul.w	r3, r1, r3
                                            stride)  + 7U));
3418abe0:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3418abe2:	68f9      	ldr	r1, [r7, #12]
3418abe4:	6809      	ldr	r1, [r1, #0]
3418abe6:	4608      	mov	r0, r1
3418abe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418abea:	0209      	lsls	r1, r1, #8
3418abec:	4401      	add	r1, r0
3418abee:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418abf2:	4313      	orrs	r3, r2
3418abf4:	638b      	str	r3, [r1, #56]	@ 0x38

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR,LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
3418abf6:	68fb      	ldr	r3, [r7, #12]
3418abf8:	681b      	ldr	r3, [r3, #0]
3418abfa:	461a      	mov	r2, r3
3418abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418abfe:	021b      	lsls	r3, r3, #8
3418ac00:	4413      	add	r3, r2
3418ac02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418ac06:	68db      	ldr	r3, [r3, #12]
3418ac08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
3418ac0c:	f023 0301 	bic.w	r3, r3, #1
3418ac10:	68fa      	ldr	r2, [r7, #12]
3418ac12:	6812      	ldr	r2, [r2, #0]
3418ac14:	4611      	mov	r1, r2
3418ac16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ac18:	0212      	lsls	r2, r2, #8
3418ac1a:	440a      	add	r2, r1
3418ac1c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418ac20:	f043 0301 	orr.w	r3, r3, #1
3418ac24:	60d3      	str	r3, [r2, #12]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
  }
}
3418ac26:	f000 bccc 	b.w	3418b5c2 <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
3418ac2a:	683b      	ldr	r3, [r7, #0]
3418ac2c:	2b00      	cmp	r3, #0
3418ac2e:	f040 814e 	bne.w	3418aece <LTDC_SetConfig+0x61a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418ac32:	68fa      	ldr	r2, [r7, #12]
3418ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ac36:	2134      	movs	r1, #52	@ 0x34
3418ac38:	fb01 f303 	mul.w	r3, r1, r3
3418ac3c:	4413      	add	r3, r2
3418ac3e:	335c      	adds	r3, #92	@ 0x5c
3418ac40:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ac42:	68f9      	ldr	r1, [r7, #12]
3418ac44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ac46:	2034      	movs	r0, #52	@ 0x34
3418ac48:	fb00 f303 	mul.w	r3, r0, r3
3418ac4c:	440b      	add	r3, r1
3418ac4e:	333c      	adds	r3, #60	@ 0x3c
3418ac50:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418ac52:	68f8      	ldr	r0, [r7, #12]
3418ac54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ac56:	2434      	movs	r4, #52	@ 0x34
3418ac58:	fb04 f303 	mul.w	r3, r4, r3
3418ac5c:	4403      	add	r3, r0
3418ac5e:	3338      	adds	r3, #56	@ 0x38
3418ac60:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ac62:	1acb      	subs	r3, r1, r3
3418ac64:	6979      	ldr	r1, [r7, #20]
3418ac66:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418ac6a:	4413      	add	r3, r2
3418ac6c:	68fa      	ldr	r2, [r7, #12]
3418ac6e:	6812      	ldr	r2, [r2, #0]
3418ac70:	4611      	mov	r1, r2
3418ac72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ac74:	0212      	lsls	r2, r2, #8
3418ac76:	440a      	add	r2, r1
3418ac78:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418ac7c:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418ac7e:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418ac80:	68fa      	ldr	r2, [r7, #12]
3418ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ac84:	2134      	movs	r1, #52	@ 0x34
3418ac86:	fb01 f303 	mul.w	r3, r1, r3
3418ac8a:	4413      	add	r3, r2
3418ac8c:	3348      	adds	r3, #72	@ 0x48
3418ac8e:	681b      	ldr	r3, [r3, #0]
3418ac90:	f240 120d 	movw	r2, #269	@ 0x10d
3418ac94:	4293      	cmp	r3, r2
3418ac96:	d004      	beq.n	3418aca2 <LTDC_SetConfig+0x3ee>
3418ac98:	f240 220d 	movw	r2, #525	@ 0x20d
3418ac9c:	4293      	cmp	r3, r2
3418ac9e:	d058      	beq.n	3418ad52 <LTDC_SetConfig+0x49e>
        break;
3418aca0:	e0d3      	b.n	3418ae4a <LTDC_SetConfig+0x596>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418aca2:	68fa      	ldr	r2, [r7, #12]
3418aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aca6:	2134      	movs	r1, #52	@ 0x34
3418aca8:	fb01 f303 	mul.w	r3, r1, r3
3418acac:	4413      	add	r3, r2
3418acae:	333c      	adds	r3, #60	@ 0x3c
3418acb0:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418acb2:	68f9      	ldr	r1, [r7, #12]
3418acb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418acb6:	2034      	movs	r0, #52	@ 0x34
3418acb8:	fb00 f303 	mul.w	r3, r0, r3
3418acbc:	440b      	add	r3, r1
3418acbe:	3338      	adds	r3, #56	@ 0x38
3418acc0:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418acc2:	1ad3      	subs	r3, r2, r3
3418acc4:	697a      	ldr	r2, [r7, #20]
3418acc6:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418acca:	68bb      	ldr	r3, [r7, #8]
3418accc:	4413      	add	r3, r2
3418acce:	68fa      	ldr	r2, [r7, #12]
3418acd0:	6812      	ldr	r2, [r2, #0]
3418acd2:	4611      	mov	r1, r2
3418acd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418acd6:	0212      	lsls	r2, r2, #8
3418acd8:	440a      	add	r2, r1
3418acda:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
3418acde:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418ace0:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418ace2:	68fa      	ldr	r2, [r7, #12]
3418ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ace6:	2134      	movs	r1, #52	@ 0x34
3418ace8:	fb01 f303 	mul.w	r3, r1, r3
3418acec:	4413      	add	r3, r2
3418acee:	3360      	adds	r3, #96	@ 0x60
3418acf0:	681b      	ldr	r3, [r3, #0]
3418acf2:	041a      	lsls	r2, r3, #16
                                             (hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0 +
3418acf4:	68f9      	ldr	r1, [r7, #12]
3418acf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418acf8:	2034      	movs	r0, #52	@ 0x34
3418acfa:	fb00 f303 	mul.w	r3, r0, r3
3418acfe:	440b      	add	r3, r1
3418ad00:	333c      	adds	r3, #60	@ 0x3c
3418ad02:	6819      	ldr	r1, [r3, #0]
3418ad04:	68f8      	ldr	r0, [r7, #12]
3418ad06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ad08:	2434      	movs	r4, #52	@ 0x34
3418ad0a:	fb04 f303 	mul.w	r3, r4, r3
3418ad0e:	4403      	add	r3, r0
3418ad10:	3338      	adds	r3, #56	@ 0x38
3418ad12:	681b      	ldr	r3, [r3, #0]
3418ad14:	1acb      	subs	r3, r1, r3
3418ad16:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
3418ad18:	68f9      	ldr	r1, [r7, #12]
3418ad1a:	6809      	ldr	r1, [r1, #0]
3418ad1c:	4608      	mov	r0, r1
3418ad1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ad20:	0209      	lsls	r1, r1, #8
3418ad22:	4401      	add	r1, r0
3418ad24:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418ad28:	4313      	orrs	r3, r2
3418ad2a:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U ;
3418ad2c:	68fa      	ldr	r2, [r7, #12]
3418ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ad30:	2134      	movs	r1, #52	@ 0x34
3418ad32:	fb01 f303 	mul.w	r3, r1, r3
3418ad36:	4413      	add	r3, r2
3418ad38:	3364      	adds	r3, #100	@ 0x64
3418ad3a:	681b      	ldr	r3, [r3, #0]
3418ad3c:	68fa      	ldr	r2, [r7, #12]
3418ad3e:	6812      	ldr	r2, [r2, #0]
3418ad40:	4611      	mov	r1, r2
3418ad42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ad44:	0212      	lsls	r2, r2, #8
3418ad46:	440a      	add	r2, r1
3418ad48:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418ad4c:	085b      	lsrs	r3, r3, #1
3418ad4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418ad50:	e07b      	b.n	3418ae4a <LTDC_SetConfig+0x596>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ad52:	68fa      	ldr	r2, [r7, #12]
3418ad54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ad56:	2134      	movs	r1, #52	@ 0x34
3418ad58:	fb01 f303 	mul.w	r3, r1, r3
3418ad5c:	4413      	add	r3, r2
3418ad5e:	333c      	adds	r3, #60	@ 0x3c
3418ad60:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418ad62:	68f9      	ldr	r1, [r7, #12]
3418ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ad66:	2034      	movs	r0, #52	@ 0x34
3418ad68:	fb00 f303 	mul.w	r3, r0, r3
3418ad6c:	440b      	add	r3, r1
3418ad6e:	3338      	adds	r3, #56	@ 0x38
3418ad70:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ad72:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418ad74:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ad76:	697a      	ldr	r2, [r7, #20]
3418ad78:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418ad7c:	68bb      	ldr	r3, [r7, #8]
3418ad7e:	4413      	add	r3, r2
3418ad80:	68fa      	ldr	r2, [r7, #12]
3418ad82:	6812      	ldr	r2, [r2, #0]
3418ad84:	4611      	mov	r1, r2
3418ad86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ad88:	0212      	lsls	r2, r2, #8
3418ad8a:	440a      	add	r2, r1
3418ad8c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418ad90:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418ad92:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ad94:	68fa      	ldr	r2, [r7, #12]
3418ad96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ad98:	2134      	movs	r1, #52	@ 0x34
3418ad9a:	fb01 f303 	mul.w	r3, r1, r3
3418ad9e:	4413      	add	r3, r2
3418ada0:	333c      	adds	r3, #60	@ 0x3c
3418ada2:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418ada4:	68f9      	ldr	r1, [r7, #12]
3418ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ada8:	2034      	movs	r0, #52	@ 0x34
3418adaa:	fb00 f303 	mul.w	r3, r0, r3
3418adae:	440b      	add	r3, r1
3418adb0:	3338      	adds	r3, #56	@ 0x38
3418adb2:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418adb4:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418adb6:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418adb8:	697a      	ldr	r2, [r7, #20]
3418adba:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418adbe:	687b      	ldr	r3, [r7, #4]
3418adc0:	4413      	add	r3, r2
3418adc2:	68fa      	ldr	r2, [r7, #12]
3418adc4:	6812      	ldr	r2, [r2, #0]
3418adc6:	4611      	mov	r1, r2
3418adc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418adca:	0212      	lsls	r2, r2, #8
3418adcc:	440a      	add	r2, r1
3418adce:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3418add2:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418add4:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418add6:	68fa      	ldr	r2, [r7, #12]
3418add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418adda:	2134      	movs	r1, #52	@ 0x34
3418addc:	fb01 f303 	mul.w	r3, r1, r3
3418ade0:	4413      	add	r3, r2
3418ade2:	3360      	adds	r3, #96	@ 0x60
3418ade4:	681b      	ldr	r3, [r3, #0]
3418ade6:	085b      	lsrs	r3, r3, #1
3418ade8:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418adea:	68f9      	ldr	r1, [r7, #12]
3418adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418adee:	2034      	movs	r0, #52	@ 0x34
3418adf0:	fb00 f303 	mul.w	r3, r0, r3
3418adf4:	440b      	add	r3, r1
3418adf6:	333c      	adds	r3, #60	@ 0x3c
3418adf8:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418adfa:	68f8      	ldr	r0, [r7, #12]
3418adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418adfe:	2434      	movs	r4, #52	@ 0x34
3418ae00:	fb04 f303 	mul.w	r3, r4, r3
3418ae04:	4403      	add	r3, r0
3418ae06:	3338      	adds	r3, #56	@ 0x38
3418ae08:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ae0a:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3418ae0c:	085b      	lsrs	r3, r3, #1
3418ae0e:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3418ae10:	68f9      	ldr	r1, [r7, #12]
3418ae12:	6809      	ldr	r1, [r1, #0]
3418ae14:	4608      	mov	r0, r1
3418ae16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ae18:	0209      	lsls	r1, r1, #8
3418ae1a:	4401      	add	r1, r0
3418ae1c:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418ae20:	4313      	orrs	r3, r2
3418ae22:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418ae24:	68fa      	ldr	r2, [r7, #12]
3418ae26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ae28:	2134      	movs	r1, #52	@ 0x34
3418ae2a:	fb01 f303 	mul.w	r3, r1, r3
3418ae2e:	4413      	add	r3, r2
3418ae30:	3364      	adds	r3, #100	@ 0x64
3418ae32:	681b      	ldr	r3, [r3, #0]
3418ae34:	68fa      	ldr	r2, [r7, #12]
3418ae36:	6812      	ldr	r2, [r2, #0]
3418ae38:	4611      	mov	r1, r2
3418ae3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418ae3c:	0212      	lsls	r2, r2, #8
3418ae3e:	440a      	add	r2, r1
3418ae40:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418ae44:	085b      	lsrs	r3, r3, #1
3418ae46:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418ae48:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3418ae4a:	68fa      	ldr	r2, [r7, #12]
3418ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ae4e:	2134      	movs	r1, #52	@ 0x34
3418ae50:	fb01 f303 	mul.w	r3, r1, r3
3418ae54:	4413      	add	r3, r2
3418ae56:	3360      	adds	r3, #96	@ 0x60
3418ae58:	681b      	ldr	r3, [r3, #0]
3418ae5a:	697a      	ldr	r2, [r7, #20]
3418ae5c:	fb02 f303 	mul.w	r3, r2, r3
3418ae60:	041a      	lsls	r2, r3, #16
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ae62:	68f9      	ldr	r1, [r7, #12]
3418ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ae66:	2034      	movs	r0, #52	@ 0x34
3418ae68:	fb00 f303 	mul.w	r3, r0, r3
3418ae6c:	440b      	add	r3, r1
3418ae6e:	333c      	adds	r3, #60	@ 0x3c
3418ae70:	6819      	ldr	r1, [r3, #0]
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
3418ae72:	68f8      	ldr	r0, [r7, #12]
3418ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ae76:	2434      	movs	r4, #52	@ 0x34
3418ae78:	fb04 f303 	mul.w	r3, r4, r3
3418ae7c:	4403      	add	r3, r0
3418ae7e:	3338      	adds	r3, #56	@ 0x38
3418ae80:	681b      	ldr	r3, [r3, #0]
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418ae82:	1acb      	subs	r3, r1, r3
                                             hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U));
3418ae84:	6979      	ldr	r1, [r7, #20]
3418ae86:	fb01 f303 	mul.w	r3, r1, r3
3418ae8a:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3418ae8c:	68f9      	ldr	r1, [r7, #12]
3418ae8e:	6809      	ldr	r1, [r1, #0]
3418ae90:	4608      	mov	r0, r1
3418ae92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ae94:	0209      	lsls	r1, r1, #8
3418ae96:	4401      	add	r1, r0
3418ae98:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418ae9c:	4313      	orrs	r3, r2
3418ae9e:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
3418aea0:	68fb      	ldr	r3, [r7, #12]
3418aea2:	681b      	ldr	r3, [r3, #0]
3418aea4:	461a      	mov	r2, r3
3418aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aea8:	021b      	lsls	r3, r3, #8
3418aeaa:	4413      	add	r3, r2
3418aeac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418aeb0:	68db      	ldr	r3, [r3, #12]
3418aeb2:	68fa      	ldr	r2, [r7, #12]
3418aeb4:	6812      	ldr	r2, [r2, #0]
3418aeb6:	4611      	mov	r1, r2
3418aeb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418aeba:	0212      	lsls	r2, r2, #8
3418aebc:	440a      	add	r2, r1
3418aebe:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418aec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418aec6:	f043 0301 	orr.w	r3, r3, #1
3418aeca:	60d3      	str	r3, [r2, #12]
}
3418aecc:	e379      	b.n	3418b5c2 <LTDC_SetConfig+0xd0e>
  else if (Mirror == LTDC_MIRROR_VERTICAL)
3418aece:	683b      	ldr	r3, [r7, #0]
3418aed0:	2b01      	cmp	r3, #1
3418aed2:	f040 81b4 	bne.w	3418b23e <LTDC_SetConfig+0x98a>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418aed6:	68fa      	ldr	r2, [r7, #12]
3418aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aeda:	2134      	movs	r1, #52	@ 0x34
3418aedc:	fb01 f303 	mul.w	r3, r1, r3
3418aee0:	4413      	add	r3, r2
3418aee2:	335c      	adds	r3, #92	@ 0x5c
3418aee4:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418aee6:	68f9      	ldr	r1, [r7, #12]
3418aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aeea:	2034      	movs	r0, #52	@ 0x34
3418aeec:	fb00 f303 	mul.w	r3, r0, r3
3418aef0:	440b      	add	r3, r1
3418aef2:	333c      	adds	r3, #60	@ 0x3c
3418aef4:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418aef6:	68f8      	ldr	r0, [r7, #12]
3418aef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aefa:	2434      	movs	r4, #52	@ 0x34
3418aefc:	fb04 f303 	mul.w	r3, r4, r3
3418af00:	4403      	add	r3, r0
3418af02:	3338      	adds	r3, #56	@ 0x38
3418af04:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418af06:	1acb      	subs	r3, r1, r3
3418af08:	6979      	ldr	r1, [r7, #20]
3418af0a:	fb01 f303 	mul.w	r3, r1, r3
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418af0e:	68f8      	ldr	r0, [r7, #12]
3418af10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418af12:	2434      	movs	r4, #52	@ 0x34
3418af14:	fb04 f101 	mul.w	r1, r4, r1
3418af18:	4401      	add	r1, r0
3418af1a:	3144      	adds	r1, #68	@ 0x44
3418af1c:	6808      	ldr	r0, [r1, #0]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
3418af1e:	68fc      	ldr	r4, [r7, #12]
3418af20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418af22:	2534      	movs	r5, #52	@ 0x34
3418af24:	fb05 f101 	mul.w	r1, r5, r1
3418af28:	4421      	add	r1, r4
3418af2a:	3140      	adds	r1, #64	@ 0x40
3418af2c:	6809      	ldr	r1, [r1, #0]
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418af2e:	1a41      	subs	r1, r0, r1
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
3418af30:	3901      	subs	r1, #1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418af32:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418af36:	68f9      	ldr	r1, [r7, #12]
3418af38:	6809      	ldr	r1, [r1, #0]
3418af3a:	4608      	mov	r0, r1
3418af3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418af3e:	0209      	lsls	r1, r1, #8
3418af40:	4401      	add	r1, r0
3418af42:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418af46:	4413      	add	r3, r2
3418af48:	634b      	str	r3, [r1, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418af4a:	68fa      	ldr	r2, [r7, #12]
3418af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418af4e:	2134      	movs	r1, #52	@ 0x34
3418af50:	fb01 f303 	mul.w	r3, r1, r3
3418af54:	4413      	add	r3, r2
3418af56:	3348      	adds	r3, #72	@ 0x48
3418af58:	681b      	ldr	r3, [r3, #0]
3418af5a:	f240 120d 	movw	r2, #269	@ 0x10d
3418af5e:	4293      	cmp	r3, r2
3418af60:	d004      	beq.n	3418af6c <LTDC_SetConfig+0x6b8>
3418af62:	f240 220d 	movw	r2, #525	@ 0x20d
3418af66:	4293      	cmp	r3, r2
3418af68:	d075      	beq.n	3418b056 <LTDC_SetConfig+0x7a2>
        break;
3418af6a:	e122      	b.n	3418b1b2 <LTDC_SetConfig+0x8fe>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418af6c:	68fa      	ldr	r2, [r7, #12]
3418af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418af70:	2134      	movs	r1, #52	@ 0x34
3418af72:	fb01 f303 	mul.w	r3, r1, r3
3418af76:	4413      	add	r3, r2
3418af78:	333c      	adds	r3, #60	@ 0x3c
3418af7a:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418af7c:	68f9      	ldr	r1, [r7, #12]
3418af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418af80:	2034      	movs	r0, #52	@ 0x34
3418af82:	fb00 f303 	mul.w	r3, r0, r3
3418af86:	440b      	add	r3, r1
3418af88:	3338      	adds	r3, #56	@ 0x38
3418af8a:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418af8c:	1ad3      	subs	r3, r2, r3
3418af8e:	697a      	ldr	r2, [r7, #20]
3418af90:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418af94:	68f9      	ldr	r1, [r7, #12]
3418af96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418af98:	2034      	movs	r0, #52	@ 0x34
3418af9a:	fb00 f202 	mul.w	r2, r0, r2
3418af9e:	440a      	add	r2, r1
3418afa0:	3244      	adds	r2, #68	@ 0x44
3418afa2:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418afa4:	68f8      	ldr	r0, [r7, #12]
3418afa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418afa8:	2434      	movs	r4, #52	@ 0x34
3418afaa:	fb04 f202 	mul.w	r2, r4, r2
3418afae:	4402      	add	r2, r0
3418afb0:	3240      	adds	r2, #64	@ 0x40
3418afb2:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418afb4:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418afb6:	0852      	lsrs	r2, r2, #1
3418afb8:	3a01      	subs	r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418afba:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418afbe:	68fb      	ldr	r3, [r7, #12]
3418afc0:	681b      	ldr	r3, [r3, #0]
3418afc2:	4619      	mov	r1, r3
3418afc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418afc6:	021b      	lsls	r3, r3, #8
3418afc8:	440b      	add	r3, r1
3418afca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418afce:	4619      	mov	r1, r3
3418afd0:	68bb      	ldr	r3, [r7, #8]
3418afd2:	4413      	add	r3, r2
3418afd4:	640b      	str	r3, [r1, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418afd6:	68fa      	ldr	r2, [r7, #12]
3418afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418afda:	2134      	movs	r1, #52	@ 0x34
3418afdc:	fb01 f303 	mul.w	r3, r1, r3
3418afe0:	4413      	add	r3, r2
3418afe2:	3360      	adds	r3, #96	@ 0x60
3418afe4:	681b      	ldr	r3, [r3, #0]
3418afe6:	697a      	ldr	r2, [r7, #20]
3418afe8:	fb02 f303 	mul.w	r3, r2, r3
3418afec:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418aff0:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418aff2:	68f9      	ldr	r1, [r7, #12]
3418aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418aff6:	2034      	movs	r0, #52	@ 0x34
3418aff8:	fb00 f303 	mul.w	r3, r0, r3
3418affc:	440b      	add	r3, r1
3418affe:	333c      	adds	r3, #60	@ 0x3c
3418b000:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
3418b002:	68f8      	ldr	r0, [r7, #12]
3418b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b006:	2434      	movs	r4, #52	@ 0x34
3418b008:	fb04 f303 	mul.w	r3, r4, r3
3418b00c:	4403      	add	r3, r0
3418b00e:	3338      	adds	r3, #56	@ 0x38
3418b010:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b012:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride)  + 7U);
3418b014:	6979      	ldr	r1, [r7, #20]
3418b016:	fb01 f303 	mul.w	r3, r1, r3
3418b01a:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418b01c:	68f9      	ldr	r1, [r7, #12]
3418b01e:	6809      	ldr	r1, [r1, #0]
3418b020:	4608      	mov	r0, r1
3418b022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b024:	0209      	lsls	r1, r1, #8
3418b026:	4401      	add	r1, r0
3418b028:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418b02c:	4313      	orrs	r3, r2
3418b02e:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418b030:	68fa      	ldr	r2, [r7, #12]
3418b032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b034:	2134      	movs	r1, #52	@ 0x34
3418b036:	fb01 f303 	mul.w	r3, r1, r3
3418b03a:	4413      	add	r3, r2
3418b03c:	3364      	adds	r3, #100	@ 0x64
3418b03e:	681b      	ldr	r3, [r3, #0]
3418b040:	68fa      	ldr	r2, [r7, #12]
3418b042:	6812      	ldr	r2, [r2, #0]
3418b044:	4611      	mov	r1, r2
3418b046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b048:	0212      	lsls	r2, r2, #8
3418b04a:	440a      	add	r2, r1
3418b04c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b050:	085b      	lsrs	r3, r3, #1
3418b052:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418b054:	e0ad      	b.n	3418b1b2 <LTDC_SetConfig+0x8fe>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b056:	68fa      	ldr	r2, [r7, #12]
3418b058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b05a:	2134      	movs	r1, #52	@ 0x34
3418b05c:	fb01 f303 	mul.w	r3, r1, r3
3418b060:	4413      	add	r3, r2
3418b062:	333c      	adds	r3, #60	@ 0x3c
3418b064:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b066:	68f9      	ldr	r1, [r7, #12]
3418b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b06a:	2034      	movs	r0, #52	@ 0x34
3418b06c:	fb00 f303 	mul.w	r3, r0, r3
3418b070:	440b      	add	r3, r1
3418b072:	3338      	adds	r3, #56	@ 0x38
3418b074:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b076:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b078:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b07a:	697a      	ldr	r2, [r7, #20]
3418b07c:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b080:	68f9      	ldr	r1, [r7, #12]
3418b082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b084:	2034      	movs	r0, #52	@ 0x34
3418b086:	fb00 f202 	mul.w	r2, r0, r2
3418b08a:	440a      	add	r2, r1
3418b08c:	3244      	adds	r2, #68	@ 0x44
3418b08e:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418b090:	68f8      	ldr	r0, [r7, #12]
3418b092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b094:	2434      	movs	r4, #52	@ 0x34
3418b096:	fb04 f202 	mul.w	r2, r4, r2
3418b09a:	4402      	add	r2, r0
3418b09c:	3240      	adds	r2, #64	@ 0x40
3418b09e:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b0a0:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418b0a2:	0852      	lsrs	r2, r2, #1
3418b0a4:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b0a6:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418b0aa:	68fb      	ldr	r3, [r7, #12]
3418b0ac:	681b      	ldr	r3, [r3, #0]
3418b0ae:	4619      	mov	r1, r3
3418b0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b0b2:	021b      	lsls	r3, r3, #8
3418b0b4:	440b      	add	r3, r1
3418b0b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b0ba:	4619      	mov	r1, r3
3418b0bc:	68bb      	ldr	r3, [r7, #8]
3418b0be:	4413      	add	r3, r2
3418b0c0:	640b      	str	r3, [r1, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b0c2:	68fa      	ldr	r2, [r7, #12]
3418b0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b0c6:	2134      	movs	r1, #52	@ 0x34
3418b0c8:	fb01 f303 	mul.w	r3, r1, r3
3418b0cc:	4413      	add	r3, r2
3418b0ce:	333c      	adds	r3, #60	@ 0x3c
3418b0d0:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b0d2:	68f9      	ldr	r1, [r7, #12]
3418b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b0d6:	2034      	movs	r0, #52	@ 0x34
3418b0d8:	fb00 f303 	mul.w	r3, r0, r3
3418b0dc:	440b      	add	r3, r1
3418b0de:	3338      	adds	r3, #56	@ 0x38
3418b0e0:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b0e2:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b0e4:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b0e6:	697a      	ldr	r2, [r7, #20]
3418b0e8:	fb02 f303 	mul.w	r3, r2, r3
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b0ec:	68f9      	ldr	r1, [r7, #12]
3418b0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b0f0:	2034      	movs	r0, #52	@ 0x34
3418b0f2:	fb00 f202 	mul.w	r2, r0, r2
3418b0f6:	440a      	add	r2, r1
3418b0f8:	3244      	adds	r2, #68	@ 0x44
3418b0fa:	6811      	ldr	r1, [r2, #0]
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418b0fc:	68f8      	ldr	r0, [r7, #12]
3418b0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b100:	2434      	movs	r4, #52	@ 0x34
3418b102:	fb04 f202 	mul.w	r2, r4, r2
3418b106:	4402      	add	r2, r0
3418b108:	3240      	adds	r2, #64	@ 0x40
3418b10a:	6812      	ldr	r2, [r2, #0]
                                               (((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b10c:	1a8a      	subs	r2, r1, r2
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3418b10e:	0852      	lsrs	r2, r2, #1
3418b110:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b112:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418b116:	68fb      	ldr	r3, [r7, #12]
3418b118:	681b      	ldr	r3, [r3, #0]
3418b11a:	4619      	mov	r1, r3
3418b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b11e:	021b      	lsls	r3, r3, #8
3418b120:	440b      	add	r3, r1
3418b122:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b126:	4619      	mov	r1, r3
3418b128:	687b      	ldr	r3, [r7, #4]
3418b12a:	4413      	add	r3, r2
3418b12c:	644b      	str	r3, [r1, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
3418b12e:	68fa      	ldr	r2, [r7, #12]
3418b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b132:	2134      	movs	r1, #52	@ 0x34
3418b134:	fb01 f303 	mul.w	r3, r1, r3
3418b138:	4413      	add	r3, r2
3418b13a:	3360      	adds	r3, #96	@ 0x60
3418b13c:	681b      	ldr	r3, [r3, #0]
3418b13e:	085b      	lsrs	r3, r3, #1
3418b140:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418b144:	697a      	ldr	r2, [r7, #20]
3418b146:	fb02 f303 	mul.w	r3, r2, r3
                                               stride) << 16U) |
3418b14a:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b14c:	68f9      	ldr	r1, [r7, #12]
3418b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b150:	2034      	movs	r0, #52	@ 0x34
3418b152:	fb00 f303 	mul.w	r3, r0, r3
3418b156:	440b      	add	r3, r1
3418b158:	333c      	adds	r3, #60	@ 0x3c
3418b15a:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
3418b15c:	68f8      	ldr	r0, [r7, #12]
3418b15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b160:	2434      	movs	r4, #52	@ 0x34
3418b162:	fb04 f303 	mul.w	r3, r4, r3
3418b166:	4403      	add	r3, r0
3418b168:	3338      	adds	r3, #56	@ 0x38
3418b16a:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b16c:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
3418b16e:	085b      	lsrs	r3, r3, #1
3418b170:	6979      	ldr	r1, [r7, #20]
3418b172:	fb01 f303 	mul.w	r3, r1, r3
3418b176:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
3418b178:	68f9      	ldr	r1, [r7, #12]
3418b17a:	6809      	ldr	r1, [r1, #0]
3418b17c:	4608      	mov	r0, r1
3418b17e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b180:	0209      	lsls	r1, r1, #8
3418b182:	4401      	add	r1, r0
3418b184:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                               stride) << 16U) |
3418b188:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
3418b18a:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418b18c:	68fa      	ldr	r2, [r7, #12]
3418b18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b190:	2134      	movs	r1, #52	@ 0x34
3418b192:	fb01 f303 	mul.w	r3, r1, r3
3418b196:	4413      	add	r3, r2
3418b198:	3364      	adds	r3, #100	@ 0x64
3418b19a:	681b      	ldr	r3, [r3, #0]
3418b19c:	68fa      	ldr	r2, [r7, #12]
3418b19e:	6812      	ldr	r2, [r2, #0]
3418b1a0:	4611      	mov	r1, r2
3418b1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b1a4:	0212      	lsls	r2, r2, #8
3418b1a6:	440a      	add	r2, r1
3418b1a8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b1ac:	085b      	lsrs	r3, r3, #1
3418b1ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418b1b0:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418b1b2:	68fa      	ldr	r2, [r7, #12]
3418b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b1b6:	2134      	movs	r1, #52	@ 0x34
3418b1b8:	fb01 f303 	mul.w	r3, r1, r3
3418b1bc:	4413      	add	r3, r2
3418b1be:	3360      	adds	r3, #96	@ 0x60
3418b1c0:	681b      	ldr	r3, [r3, #0]
3418b1c2:	697a      	ldr	r2, [r7, #20]
3418b1c4:	fb02 f303 	mul.w	r3, r2, r3
3418b1c8:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418b1cc:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b1ce:	68f9      	ldr	r1, [r7, #12]
3418b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b1d2:	2034      	movs	r0, #52	@ 0x34
3418b1d4:	fb00 f303 	mul.w	r3, r0, r3
3418b1d8:	440b      	add	r3, r1
3418b1da:	333c      	adds	r3, #60	@ 0x3c
3418b1dc:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
3418b1de:	68f8      	ldr	r0, [r7, #12]
3418b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b1e2:	2434      	movs	r4, #52	@ 0x34
3418b1e4:	fb04 f303 	mul.w	r3, r4, r3
3418b1e8:	4403      	add	r3, r0
3418b1ea:	3338      	adds	r3, #56	@ 0x38
3418b1ec:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b1ee:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
3418b1f0:	6979      	ldr	r1, [r7, #20]
3418b1f2:	fb01 f303 	mul.w	r3, r1, r3
3418b1f6:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418b1f8:	68f9      	ldr	r1, [r7, #12]
3418b1fa:	6809      	ldr	r1, [r1, #0]
3418b1fc:	4608      	mov	r0, r1
3418b1fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b200:	0209      	lsls	r1, r1, #8
3418b202:	4401      	add	r1, r0
3418b204:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418b208:	4313      	orrs	r3, r2
3418b20a:	638b      	str	r3, [r1, #56]	@ 0x38
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
3418b20c:	68fb      	ldr	r3, [r7, #12]
3418b20e:	681b      	ldr	r3, [r3, #0]
3418b210:	461a      	mov	r2, r3
3418b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b214:	021b      	lsls	r3, r3, #8
3418b216:	4413      	add	r3, r2
3418b218:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b21c:	68db      	ldr	r3, [r3, #12]
3418b21e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
3418b222:	f023 0301 	bic.w	r3, r3, #1
3418b226:	68fa      	ldr	r2, [r7, #12]
3418b228:	6812      	ldr	r2, [r2, #0]
3418b22a:	4611      	mov	r1, r2
3418b22c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b22e:	0212      	lsls	r2, r2, #8
3418b230:	440a      	add	r2, r1
3418b232:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b236:	f043 0301 	orr.w	r3, r3, #1
3418b23a:	60d3      	str	r3, [r2, #12]
}
3418b23c:	e1c1      	b.n	3418b5c2 <LTDC_SetConfig+0xd0e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418b23e:	68fa      	ldr	r2, [r7, #12]
3418b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b242:	2134      	movs	r1, #52	@ 0x34
3418b244:	fb01 f303 	mul.w	r3, r1, r3
3418b248:	4413      	add	r3, r2
3418b24a:	335c      	adds	r3, #92	@ 0x5c
3418b24c:	681a      	ldr	r2, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b24e:	68f9      	ldr	r1, [r7, #12]
3418b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b252:	2034      	movs	r0, #52	@ 0x34
3418b254:	fb00 f303 	mul.w	r3, r0, r3
3418b258:	440b      	add	r3, r1
3418b25a:	333c      	adds	r3, #60	@ 0x3c
3418b25c:	6819      	ldr	r1, [r3, #0]
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418b25e:	68f8      	ldr	r0, [r7, #12]
3418b260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b262:	2434      	movs	r4, #52	@ 0x34
3418b264:	fb04 f303 	mul.w	r3, r4, r3
3418b268:	4403      	add	r3, r0
3418b26a:	3338      	adds	r3, #56	@ 0x38
3418b26c:	681b      	ldr	r3, [r3, #0]
                                         (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b26e:	1acb      	subs	r3, r1, r3
3418b270:	6979      	ldr	r1, [r7, #20]
3418b272:	fb01 f303 	mul.w	r3, r1, r3
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
3418b276:	68f8      	ldr	r0, [r7, #12]
3418b278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b27a:	2434      	movs	r4, #52	@ 0x34
3418b27c:	fb04 f101 	mul.w	r1, r4, r1
3418b280:	4401      	add	r1, r0
3418b282:	3144      	adds	r1, #68	@ 0x44
3418b284:	6808      	ldr	r0, [r1, #0]
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
3418b286:	68fc      	ldr	r4, [r7, #12]
3418b288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b28a:	2534      	movs	r5, #52	@ 0x34
3418b28c:	fb05 f101 	mul.w	r1, r5, r1
3418b290:	4421      	add	r1, r4
3418b292:	3140      	adds	r1, #64	@ 0x40
3418b294:	6809      	ldr	r1, [r1, #0]
                                          (hltdc->LayerCfg[LayerIdx].WindowY1 - \
3418b296:	1a41      	subs	r1, r0, r1
                                                    hltdc->LayerCfg[LayerIdx].WindowX0) *
3418b298:	fb01 f303 	mul.w	r3, r1, r3
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418b29c:	4413      	add	r3, r2
3418b29e:	68fa      	ldr	r2, [r7, #12]
3418b2a0:	6812      	ldr	r2, [r2, #0]
3418b2a2:	4611      	mov	r1, r2
3418b2a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b2a6:	0212      	lsls	r2, r2, #8
3418b2a8:	440a      	add	r2, r1
3418b2aa:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
3418b2ae:	3b01      	subs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3418b2b0:	6353      	str	r3, [r2, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418b2b2:	68fa      	ldr	r2, [r7, #12]
3418b2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b2b6:	2134      	movs	r1, #52	@ 0x34
3418b2b8:	fb01 f303 	mul.w	r3, r1, r3
3418b2bc:	4413      	add	r3, r2
3418b2be:	3348      	adds	r3, #72	@ 0x48
3418b2c0:	681b      	ldr	r3, [r3, #0]
3418b2c2:	f240 120d 	movw	r2, #269	@ 0x10d
3418b2c6:	4293      	cmp	r3, r2
3418b2c8:	d004      	beq.n	3418b2d4 <LTDC_SetConfig+0xa20>
3418b2ca:	f240 220d 	movw	r2, #525	@ 0x20d
3418b2ce:	4293      	cmp	r3, r2
3418b2d0:	d074      	beq.n	3418b3bc <LTDC_SetConfig+0xb08>
        break;
3418b2d2:	e133      	b.n	3418b53c <LTDC_SetConfig+0xc88>
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b2d4:	68fa      	ldr	r2, [r7, #12]
3418b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b2d8:	2134      	movs	r1, #52	@ 0x34
3418b2da:	fb01 f303 	mul.w	r3, r1, r3
3418b2de:	4413      	add	r3, r2
3418b2e0:	333c      	adds	r3, #60	@ 0x3c
3418b2e2:	681a      	ldr	r2, [r3, #0]
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418b2e4:	68f9      	ldr	r1, [r7, #12]
3418b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b2e8:	2034      	movs	r0, #52	@ 0x34
3418b2ea:	fb00 f303 	mul.w	r3, r0, r3
3418b2ee:	440b      	add	r3, r1
3418b2f0:	3338      	adds	r3, #56	@ 0x38
3418b2f2:	681b      	ldr	r3, [r3, #0]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b2f4:	1ad3      	subs	r3, r2, r3
3418b2f6:	697a      	ldr	r2, [r7, #20]
3418b2f8:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b2fc:	68f9      	ldr	r1, [r7, #12]
3418b2fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b300:	2034      	movs	r0, #52	@ 0x34
3418b302:	fb00 f202 	mul.w	r2, r0, r2
3418b306:	440a      	add	r2, r1
3418b308:	3244      	adds	r2, #68	@ 0x44
3418b30a:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b30c:	68f8      	ldr	r0, [r7, #12]
3418b30e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b310:	2434      	movs	r4, #52	@ 0x34
3418b312:	fb04 f202 	mul.w	r2, r4, r2
3418b316:	4402      	add	r2, r0
3418b318:	3240      	adds	r2, #64	@ 0x40
3418b31a:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b31c:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b31e:	0852      	lsrs	r2, r2, #1
                                                         hltdc->LayerCfg[LayerIdx].WindowX0) *
3418b320:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418b324:	68bb      	ldr	r3, [r7, #8]
3418b326:	4413      	add	r3, r2
3418b328:	68fa      	ldr	r2, [r7, #12]
3418b32a:	6812      	ldr	r2, [r2, #0]
3418b32c:	4611      	mov	r1, r2
3418b32e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b330:	0212      	lsls	r2, r2, #8
3418b332:	440a      	add	r2, r1
3418b334:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b338:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418b33a:	6413      	str	r3, [r2, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418b33c:	68fa      	ldr	r2, [r7, #12]
3418b33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b340:	2134      	movs	r1, #52	@ 0x34
3418b342:	fb01 f303 	mul.w	r3, r1, r3
3418b346:	4413      	add	r3, r2
3418b348:	3360      	adds	r3, #96	@ 0x60
3418b34a:	681b      	ldr	r3, [r3, #0]
3418b34c:	697a      	ldr	r2, [r7, #20]
3418b34e:	fb02 f303 	mul.w	r3, r2, r3
3418b352:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418b356:	041a      	lsls	r2, r3, #16
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b358:	68f9      	ldr	r1, [r7, #12]
3418b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b35c:	2034      	movs	r0, #52	@ 0x34
3418b35e:	fb00 f303 	mul.w	r3, r0, r3
3418b362:	440b      	add	r3, r1
3418b364:	333c      	adds	r3, #60	@ 0x3c
3418b366:	6819      	ldr	r1, [r3, #0]
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
3418b368:	68f8      	ldr	r0, [r7, #12]
3418b36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b36c:	2434      	movs	r4, #52	@ 0x34
3418b36e:	fb04 f303 	mul.w	r3, r4, r3
3418b372:	4403      	add	r3, r0
3418b374:	3338      	adds	r3, #56	@ 0x38
3418b376:	681b      	ldr	r3, [r3, #0]
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b378:	1acb      	subs	r3, r1, r3
                                                hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U);
3418b37a:	6979      	ldr	r1, [r7, #20]
3418b37c:	fb01 f303 	mul.w	r3, r1, r3
3418b380:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3418b382:	68f9      	ldr	r1, [r7, #12]
3418b384:	6809      	ldr	r1, [r1, #0]
3418b386:	4608      	mov	r0, r1
3418b388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b38a:	0209      	lsls	r1, r1, #8
3418b38c:	4401      	add	r1, r0
3418b38e:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418b392:	4313      	orrs	r3, r2
3418b394:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418b396:	68fa      	ldr	r2, [r7, #12]
3418b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b39a:	2134      	movs	r1, #52	@ 0x34
3418b39c:	fb01 f303 	mul.w	r3, r1, r3
3418b3a0:	4413      	add	r3, r2
3418b3a2:	3364      	adds	r3, #100	@ 0x64
3418b3a4:	681b      	ldr	r3, [r3, #0]
3418b3a6:	68fa      	ldr	r2, [r7, #12]
3418b3a8:	6812      	ldr	r2, [r2, #0]
3418b3aa:	4611      	mov	r1, r2
3418b3ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b3ae:	0212      	lsls	r2, r2, #8
3418b3b0:	440a      	add	r2, r1
3418b3b2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b3b6:	085b      	lsrs	r3, r3, #1
3418b3b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418b3ba:	e0bf      	b.n	3418b53c <LTDC_SetConfig+0xc88>
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b3bc:	68fa      	ldr	r2, [r7, #12]
3418b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b3c0:	2134      	movs	r1, #52	@ 0x34
3418b3c2:	fb01 f303 	mul.w	r3, r1, r3
3418b3c6:	4413      	add	r3, r2
3418b3c8:	333c      	adds	r3, #60	@ 0x3c
3418b3ca:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b3cc:	68f9      	ldr	r1, [r7, #12]
3418b3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b3d0:	2034      	movs	r0, #52	@ 0x34
3418b3d2:	fb00 f303 	mul.w	r3, r0, r3
3418b3d6:	440b      	add	r3, r1
3418b3d8:	3338      	adds	r3, #56	@ 0x38
3418b3da:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b3dc:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b3de:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b3e0:	697a      	ldr	r2, [r7, #20]
3418b3e2:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b3e6:	68f9      	ldr	r1, [r7, #12]
3418b3e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b3ea:	2034      	movs	r0, #52	@ 0x34
3418b3ec:	fb00 f202 	mul.w	r2, r0, r2
3418b3f0:	440a      	add	r2, r1
3418b3f2:	3244      	adds	r2, #68	@ 0x44
3418b3f4:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b3f6:	68f8      	ldr	r0, [r7, #12]
3418b3f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b3fa:	2434      	movs	r4, #52	@ 0x34
3418b3fc:	fb04 f202 	mul.w	r2, r4, r2
3418b400:	4402      	add	r2, r0
3418b402:	3240      	adds	r2, #64	@ 0x40
3418b404:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b406:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b408:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b40a:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418b40e:	68bb      	ldr	r3, [r7, #8]
3418b410:	4413      	add	r3, r2
3418b412:	68fa      	ldr	r2, [r7, #12]
3418b414:	6812      	ldr	r2, [r2, #0]
3418b416:	4611      	mov	r1, r2
3418b418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b41a:	0212      	lsls	r2, r2, #8
3418b41c:	440a      	add	r2, r1
3418b41e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b422:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3418b424:	6413      	str	r3, [r2, #64]	@ 0x40
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b426:	68fa      	ldr	r2, [r7, #12]
3418b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b42a:	2134      	movs	r1, #52	@ 0x34
3418b42c:	fb01 f303 	mul.w	r3, r1, r3
3418b430:	4413      	add	r3, r2
3418b432:	333c      	adds	r3, #60	@ 0x3c
3418b434:	681a      	ldr	r2, [r3, #0]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b436:	68f9      	ldr	r1, [r7, #12]
3418b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b43a:	2034      	movs	r0, #52	@ 0x34
3418b43c:	fb00 f303 	mul.w	r3, r0, r3
3418b440:	440b      	add	r3, r1
3418b442:	3338      	adds	r3, #56	@ 0x38
3418b444:	681b      	ldr	r3, [r3, #0]
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b446:	1ad3      	subs	r3, r2, r3
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b448:	085b      	lsrs	r3, r3, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b44a:	697a      	ldr	r2, [r7, #20]
3418b44c:	fb02 f303 	mul.w	r3, r2, r3
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b450:	68f9      	ldr	r1, [r7, #12]
3418b452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b454:	2034      	movs	r0, #52	@ 0x34
3418b456:	fb00 f202 	mul.w	r2, r0, r2
3418b45a:	440a      	add	r2, r1
3418b45c:	3244      	adds	r2, #68	@ 0x44
3418b45e:	6811      	ldr	r1, [r2, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b460:	68f8      	ldr	r0, [r7, #12]
3418b462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b464:	2434      	movs	r4, #52	@ 0x34
3418b466:	fb04 f202 	mul.w	r2, r4, r2
3418b46a:	4402      	add	r2, r0
3418b46c:	3240      	adds	r2, #64	@ 0x40
3418b46e:	6812      	ldr	r2, [r2, #0]
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 -
3418b470:	1a8a      	subs	r2, r1, r2
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b472:	0852      	lsrs	r2, r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
3418b474:	fb03 f202 	mul.w	r2, r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418b478:	687b      	ldr	r3, [r7, #4]
3418b47a:	4413      	add	r3, r2
3418b47c:	68fa      	ldr	r2, [r7, #12]
3418b47e:	6812      	ldr	r2, [r2, #0]
3418b480:	4611      	mov	r1, r2
3418b482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b484:	0212      	lsls	r2, r2, #8
3418b486:	440a      	add	r2, r1
3418b488:	f502 7280 	add.w	r2, r2, #256	@ 0x100
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3418b48c:	3b01      	subs	r3, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3418b48e:	6453      	str	r3, [r2, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
3418b490:	68fa      	ldr	r2, [r7, #12]
3418b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b494:	2134      	movs	r1, #52	@ 0x34
3418b496:	fb01 f303 	mul.w	r3, r1, r3
3418b49a:	4413      	add	r3, r2
3418b49c:	3360      	adds	r3, #96	@ 0x60
3418b49e:	681b      	ldr	r3, [r3, #0]
3418b4a0:	085b      	lsrs	r3, r3, #1
3418b4a2:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418b4a6:	697a      	ldr	r2, [r7, #20]
3418b4a8:	fb02 f303 	mul.w	r3, r2, r3
                                              << 16U) |
3418b4ac:	041a      	lsls	r2, r3, #16
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b4ae:	68f9      	ldr	r1, [r7, #12]
3418b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b4b2:	2034      	movs	r0, #52	@ 0x34
3418b4b4:	fb00 f303 	mul.w	r3, r0, r3
3418b4b8:	440b      	add	r3, r1
3418b4ba:	333c      	adds	r3, #60	@ 0x3c
3418b4bc:	6819      	ldr	r1, [r3, #0]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
3418b4be:	68f8      	ldr	r0, [r7, #12]
3418b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b4c2:	2434      	movs	r4, #52	@ 0x34
3418b4c4:	fb04 f303 	mul.w	r3, r4, r3
3418b4c8:	4403      	add	r3, r0
3418b4ca:	3338      	adds	r3, #56	@ 0x38
3418b4cc:	681b      	ldr	r3, [r3, #0]
                                             ((((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b4ce:	1acb      	subs	r3, r1, r3
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
3418b4d0:	085b      	lsrs	r3, r3, #1
3418b4d2:	6979      	ldr	r1, [r7, #20]
3418b4d4:	fb01 f303 	mul.w	r3, r1, r3
3418b4d8:	3307      	adds	r3, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
3418b4da:	68f9      	ldr	r1, [r7, #12]
3418b4dc:	6809      	ldr	r1, [r1, #0]
3418b4de:	4608      	mov	r0, r1
3418b4e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b4e2:	0209      	lsls	r1, r1, #8
3418b4e4:	4401      	add	r1, r0
3418b4e6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                                              << 16U) |
3418b4ea:	4313      	orrs	r3, r2
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
3418b4ec:	648b      	str	r3, [r1, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
3418b4ee:	68fb      	ldr	r3, [r7, #12]
3418b4f0:	681b      	ldr	r3, [r3, #0]
3418b4f2:	461a      	mov	r2, r3
3418b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b4f6:	021b      	lsls	r3, r3, #8
3418b4f8:	4413      	add	r3, r2
3418b4fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b4fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418b500:	68fa      	ldr	r2, [r7, #12]
3418b502:	6812      	ldr	r2, [r2, #0]
3418b504:	4611      	mov	r1, r2
3418b506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b508:	0212      	lsls	r2, r2, #8
3418b50a:	440a      	add	r2, r1
3418b50c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b510:	0c1b      	lsrs	r3, r3, #16
3418b512:	041b      	lsls	r3, r3, #16
3418b514:	64d3      	str	r3, [r2, #76]	@ 0x4c
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3418b516:	68fa      	ldr	r2, [r7, #12]
3418b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b51a:	2134      	movs	r1, #52	@ 0x34
3418b51c:	fb01 f303 	mul.w	r3, r1, r3
3418b520:	4413      	add	r3, r2
3418b522:	3364      	adds	r3, #100	@ 0x64
3418b524:	681b      	ldr	r3, [r3, #0]
3418b526:	68fa      	ldr	r2, [r7, #12]
3418b528:	6812      	ldr	r2, [r2, #0]
3418b52a:	4611      	mov	r1, r2
3418b52c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b52e:	0212      	lsls	r2, r2, #8
3418b530:	440a      	add	r2, r1
3418b532:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b536:	085b      	lsrs	r3, r3, #1
3418b538:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
3418b53a:	bf00      	nop
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418b53c:	68fa      	ldr	r2, [r7, #12]
3418b53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b540:	2134      	movs	r1, #52	@ 0x34
3418b542:	fb01 f303 	mul.w	r3, r1, r3
3418b546:	4413      	add	r3, r2
3418b548:	3360      	adds	r3, #96	@ 0x60
3418b54a:	681b      	ldr	r3, [r3, #0]
3418b54c:	697a      	ldr	r2, [r7, #20]
3418b54e:	fb02 f303 	mul.w	r3, r2, r3
3418b552:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
3418b556:	041a      	lsls	r2, r3, #16
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b558:	68f9      	ldr	r1, [r7, #12]
3418b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b55c:	2034      	movs	r0, #52	@ 0x34
3418b55e:	fb00 f303 	mul.w	r3, r0, r3
3418b562:	440b      	add	r3, r1
3418b564:	333c      	adds	r3, #60	@ 0x3c
3418b566:	6819      	ldr	r1, [r3, #0]
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
3418b568:	68f8      	ldr	r0, [r7, #12]
3418b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b56c:	2434      	movs	r4, #52	@ 0x34
3418b56e:	fb04 f303 	mul.w	r3, r4, r3
3418b572:	4403      	add	r3, r0
3418b574:	3338      	adds	r3, #56	@ 0x38
3418b576:	681b      	ldr	r3, [r3, #0]
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
3418b578:	1acb      	subs	r3, r1, r3
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));
3418b57a:	6979      	ldr	r1, [r7, #20]
3418b57c:	fb01 f303 	mul.w	r3, r1, r3
3418b580:	3307      	adds	r3, #7
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
3418b582:	68f9      	ldr	r1, [r7, #12]
3418b584:	6809      	ldr	r1, [r1, #0]
3418b586:	4608      	mov	r0, r1
3418b588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418b58a:	0209      	lsls	r1, r1, #8
3418b58c:	4401      	add	r1, r0
3418b58e:	f501 7180 	add.w	r1, r1, #256	@ 0x100
3418b592:	4313      	orrs	r3, r2
3418b594:	638b      	str	r3, [r1, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
3418b596:	68fb      	ldr	r3, [r7, #12]
3418b598:	681b      	ldr	r3, [r3, #0]
3418b59a:	461a      	mov	r2, r3
3418b59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b59e:	021b      	lsls	r3, r3, #8
3418b5a0:	4413      	add	r3, r2
3418b5a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b5a6:	68db      	ldr	r3, [r3, #12]
3418b5a8:	68fa      	ldr	r2, [r7, #12]
3418b5aa:	6812      	ldr	r2, [r2, #0]
3418b5ac:	4611      	mov	r1, r2
3418b5ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3418b5b0:	0212      	lsls	r2, r2, #8
3418b5b2:	440a      	add	r2, r1
3418b5b4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b5b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418b5bc:	f043 0301 	orr.w	r3, r3, #1
3418b5c0:	60d3      	str	r3, [r2, #12]
}
3418b5c2:	bf00      	nop
3418b5c4:	371c      	adds	r7, #28
3418b5c6:	46bd      	mov	sp, r7
3418b5c8:	bcb0      	pop	{r4, r5, r7}
3418b5ca:	4770      	bx	lr

3418b5cc <LTDC_SetCompositionConfig>:
  *                 - Other layer indices as defined by the hardware and used within the driver.
  *
  * @note This function is intended for internal use within the LTDC driver and does not return a value.
 */
static void LTDC_SetCompositionConfig(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
3418b5cc:	b480      	push	{r7}
3418b5ce:	b087      	sub	sp, #28
3418b5d0:	af00      	add	r7, sp, #0
3418b5d2:	6078      	str	r0, [r7, #4]
3418b5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
3418b5d6:	687a      	ldr	r2, [r7, #4]
3418b5d8:	683b      	ldr	r3, [r7, #0]
3418b5da:	2134      	movs	r1, #52	@ 0x34
3418b5dc:	fb01 f303 	mul.w	r3, r1, r3
3418b5e0:	4413      	add	r3, r2
3418b5e2:	3369      	adds	r3, #105	@ 0x69
3418b5e4:	781b      	ldrb	r3, [r3, #0]
3418b5e6:	021b      	lsls	r3, r3, #8
3418b5e8:	617b      	str	r3, [r7, #20]
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
3418b5ea:	687a      	ldr	r2, [r7, #4]
3418b5ec:	683b      	ldr	r3, [r7, #0]
3418b5ee:	2134      	movs	r1, #52	@ 0x34
3418b5f0:	fb01 f303 	mul.w	r3, r1, r3
3418b5f4:	4413      	add	r3, r2
3418b5f6:	336a      	adds	r3, #106	@ 0x6a
3418b5f8:	781b      	ldrb	r3, [r3, #0]
3418b5fa:	041b      	lsls	r3, r3, #16
3418b5fc:	613b      	str	r3, [r7, #16]
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
3418b5fe:	687a      	ldr	r2, [r7, #4]
3418b600:	683b      	ldr	r3, [r7, #0]
3418b602:	2134      	movs	r1, #52	@ 0x34
3418b604:	fb01 f303 	mul.w	r3, r1, r3
3418b608:	4413      	add	r3, r2
3418b60a:	3350      	adds	r3, #80	@ 0x50
3418b60c:	681b      	ldr	r3, [r3, #0]
3418b60e:	061b      	lsls	r3, r3, #24
3418b610:	60fb      	str	r3, [r7, #12]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
3418b612:	687a      	ldr	r2, [r7, #4]
3418b614:	683b      	ldr	r3, [r7, #0]
3418b616:	2134      	movs	r1, #52	@ 0x34
3418b618:	fb01 f303 	mul.w	r3, r1, r3
3418b61c:	4413      	add	r3, r2
3418b61e:	3368      	adds	r3, #104	@ 0x68
3418b620:	781b      	ldrb	r3, [r3, #0]
3418b622:	461a      	mov	r2, r3
3418b624:	697b      	ldr	r3, [r7, #20]
3418b626:	431a      	orrs	r2, r3
3418b628:	693b      	ldr	r3, [r7, #16]
3418b62a:	431a      	orrs	r2, r3
3418b62c:	687b      	ldr	r3, [r7, #4]
3418b62e:	681b      	ldr	r3, [r3, #0]
3418b630:	4619      	mov	r1, r3
3418b632:	683b      	ldr	r3, [r7, #0]
3418b634:	021b      	lsls	r3, r3, #8
3418b636:	440b      	add	r3, r1
3418b638:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b63c:	4619      	mov	r1, r3
3418b63e:	68fb      	ldr	r3, [r7, #12]
3418b640:	4313      	orrs	r3, r2
3418b642:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
3418b644:	687b      	ldr	r3, [r7, #4]
3418b646:	681b      	ldr	r3, [r3, #0]
3418b648:	461a      	mov	r2, r3
3418b64a:	683b      	ldr	r3, [r7, #0]
3418b64c:	021b      	lsls	r3, r3, #8
3418b64e:	4413      	add	r3, r2
3418b650:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b654:	6a1b      	ldr	r3, [r3, #32]
3418b656:	687a      	ldr	r2, [r7, #4]
3418b658:	6812      	ldr	r2, [r2, #0]
3418b65a:	4611      	mov	r1, r2
3418b65c:	683a      	ldr	r2, [r7, #0]
3418b65e:	0212      	lsls	r2, r2, #8
3418b660:	440a      	add	r2, r1
3418b662:	f502 7280 	add.w	r2, r2, #256	@ 0x100
3418b666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3418b66a:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
3418b66c:	687b      	ldr	r3, [r7, #4]
3418b66e:	681b      	ldr	r3, [r3, #0]
3418b670:	461a      	mov	r2, r3
3418b672:	683b      	ldr	r3, [r7, #0]
3418b674:	021b      	lsls	r3, r3, #8
3418b676:	4413      	add	r3, r2
3418b678:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b67c:	4618      	mov	r0, r3
3418b67e:	687a      	ldr	r2, [r7, #4]
3418b680:	683b      	ldr	r3, [r7, #0]
3418b682:	2134      	movs	r1, #52	@ 0x34
3418b684:	fb01 f303 	mul.w	r3, r1, r3
3418b688:	4413      	add	r3, r2
3418b68a:	334c      	adds	r3, #76	@ 0x4c
3418b68c:	681b      	ldr	r3, [r3, #0]
3418b68e:	6203      	str	r3, [r0, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
3418b690:	687b      	ldr	r3, [r7, #4]
3418b692:	681b      	ldr	r3, [r3, #0]
3418b694:	461a      	mov	r2, r3
3418b696:	683b      	ldr	r3, [r7, #0]
3418b698:	021b      	lsls	r3, r3, #8
3418b69a:	4413      	add	r3, r2
3418b69c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b6a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418b6a2:	687b      	ldr	r3, [r7, #4]
3418b6a4:	681b      	ldr	r3, [r3, #0]
3418b6a6:	4619      	mov	r1, r3
3418b6a8:	683b      	ldr	r3, [r7, #0]
3418b6aa:	021b      	lsls	r3, r3, #8
3418b6ac:	440b      	add	r3, r1
3418b6ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b6b2:	4619      	mov	r1, r3
3418b6b4:	4b18      	ldr	r3, [pc, #96]	@ (3418b718 <LTDC_SetCompositionConfig+0x14c>)
3418b6b6:	4013      	ands	r3, r2
3418b6b8:	628b      	str	r3, [r1, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
3418b6ba:	687b      	ldr	r3, [r7, #4]
3418b6bc:	681b      	ldr	r3, [r3, #0]
3418b6be:	461a      	mov	r2, r3
3418b6c0:	683b      	ldr	r3, [r7, #0]
3418b6c2:	021b      	lsls	r3, r3, #8
3418b6c4:	4413      	add	r3, r2
3418b6c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418b6cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418b6d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
3418b6d2:	687a      	ldr	r2, [r7, #4]
3418b6d4:	683b      	ldr	r3, [r7, #0]
3418b6d6:	2134      	movs	r1, #52	@ 0x34
3418b6d8:	fb01 f303 	mul.w	r3, r1, r3
3418b6dc:	4413      	add	r3, r2
3418b6de:	3354      	adds	r3, #84	@ 0x54
3418b6e0:	681a      	ldr	r2, [r3, #0]
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
3418b6e2:	6879      	ldr	r1, [r7, #4]
3418b6e4:	683b      	ldr	r3, [r7, #0]
3418b6e6:	2034      	movs	r0, #52	@ 0x34
3418b6e8:	fb00 f303 	mul.w	r3, r0, r3
3418b6ec:	440b      	add	r3, r1
3418b6ee:	3358      	adds	r3, #88	@ 0x58
3418b6f0:	681b      	ldr	r3, [r3, #0]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
3418b6f2:	431a      	orrs	r2, r3
3418b6f4:	687b      	ldr	r3, [r7, #4]
3418b6f6:	681b      	ldr	r3, [r3, #0]
3418b6f8:	4619      	mov	r1, r3
3418b6fa:	683b      	ldr	r3, [r7, #0]
3418b6fc:	021b      	lsls	r3, r3, #8
3418b6fe:	440b      	add	r3, r1
3418b700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b704:	4619      	mov	r1, r3
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
3418b706:	697b      	ldr	r3, [r7, #20]
3418b708:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
3418b70a:	628b      	str	r3, [r1, #40]	@ 0x28
}
3418b70c:	bf00      	nop
3418b70e:	371c      	adds	r7, #28
3418b710:	46bd      	mov	sp, r7
3418b712:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b716:	4770      	bx	lr
3418b718:	fffef8f8 	.word	0xfffef8f8

3418b71c <LTDC_SetPredefFormat>:
  *
  *  @note This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetPredefFormat(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
3418b71c:	b480      	push	{r7}
3418b71e:	b08d      	sub	sp, #52	@ 0x34
3418b720:	af00      	add	r7, sp, #0
3418b722:	6078      	str	r0, [r7, #4]
3418b724:	6039      	str	r1, [r7, #0]
  uint32_t PSIZE = 0U;
3418b726:	2300      	movs	r3, #0
3418b728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t ALEN = 0U;
3418b72a:	2300      	movs	r3, #0
3418b72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t APOS = 0U;
3418b72e:	2300      	movs	r3, #0
3418b730:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t RLEN = 0U;
3418b732:	2300      	movs	r3, #0
3418b734:	623b      	str	r3, [r7, #32]
  uint32_t RPOS = 0U;
3418b736:	2300      	movs	r3, #0
3418b738:	61fb      	str	r3, [r7, #28]
  uint32_t BLEN = 0U;
3418b73a:	2300      	movs	r3, #0
3418b73c:	61bb      	str	r3, [r7, #24]
  uint32_t BPOS = 0U;
3418b73e:	2300      	movs	r3, #0
3418b740:	617b      	str	r3, [r7, #20]
  uint32_t GLEN = 0U;
3418b742:	2300      	movs	r3, #0
3418b744:	613b      	str	r3, [r7, #16]
  uint32_t GPOS = 0U;
3418b746:	2300      	movs	r3, #0
3418b748:	60fb      	str	r3, [r7, #12]

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418b74a:	687a      	ldr	r2, [r7, #4]
3418b74c:	683b      	ldr	r3, [r7, #0]
3418b74e:	2134      	movs	r1, #52	@ 0x34
3418b750:	fb01 f303 	mul.w	r3, r1, r3
3418b754:	4413      	add	r3, r2
3418b756:	3348      	adds	r3, #72	@ 0x48
3418b758:	681b      	ldr	r3, [r3, #0]
3418b75a:	3b07      	subs	r3, #7
3418b75c:	2b04      	cmp	r3, #4
3418b75e:	d86c      	bhi.n	3418b83a <LTDC_SetPredefFormat+0x11e>
3418b760:	a201      	add	r2, pc, #4	@ (adr r2, 3418b768 <LTDC_SetPredefFormat+0x4c>)
3418b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b766:	bf00      	nop
3418b768:	3418b77d 	.word	0x3418b77d
3418b76c:	3418b7a3 	.word	0x3418b7a3
3418b770:	3418b7c9 	.word	0x3418b7c9
3418b774:	3418b7ef 	.word	0x3418b7ef
3418b778:	3418b815 	.word	0x3418b815
  {
    case LTDC_PIXEL_FORMAT_ARGB1555:
      PSIZE = 2U;
3418b77c:	2302      	movs	r3, #2
3418b77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 1U;
3418b780:	2301      	movs	r3, #1
3418b782:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 15U;
3418b784:	230f      	movs	r3, #15
3418b786:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 5U;
3418b788:	2305      	movs	r3, #5
3418b78a:	623b      	str	r3, [r7, #32]
      RPOS = 10U;
3418b78c:	230a      	movs	r3, #10
3418b78e:	61fb      	str	r3, [r7, #28]
      GLEN = 5U;
3418b790:	2305      	movs	r3, #5
3418b792:	613b      	str	r3, [r7, #16]
      GPOS = 5U;
3418b794:	2305      	movs	r3, #5
3418b796:	60fb      	str	r3, [r7, #12]
      BLEN = 5U;
3418b798:	2305      	movs	r3, #5
3418b79a:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
3418b79c:	2300      	movs	r3, #0
3418b79e:	617b      	str	r3, [r7, #20]
      break;
3418b7a0:	e04c      	b.n	3418b83c <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_ARGB4444:
      PSIZE = 2U;
3418b7a2:	2302      	movs	r3, #2
3418b7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
3418b7a6:	2304      	movs	r3, #4
3418b7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 12U;
3418b7aa:	230c      	movs	r3, #12
3418b7ac:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
3418b7ae:	2304      	movs	r3, #4
3418b7b0:	623b      	str	r3, [r7, #32]
      RPOS = 8U;
3418b7b2:	2308      	movs	r3, #8
3418b7b4:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
3418b7b6:	2304      	movs	r3, #4
3418b7b8:	613b      	str	r3, [r7, #16]
      GPOS = 4U;
3418b7ba:	2304      	movs	r3, #4
3418b7bc:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
3418b7be:	2304      	movs	r3, #4
3418b7c0:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
3418b7c2:	2300      	movs	r3, #0
3418b7c4:	617b      	str	r3, [r7, #20]
      break;
3418b7c6:	e039      	b.n	3418b83c <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_L8:
      PSIZE = 1U;
3418b7c8:	2301      	movs	r3, #1
3418b7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 0U;
3418b7cc:	2300      	movs	r3, #0
3418b7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 0U;
3418b7d0:	2300      	movs	r3, #0
3418b7d2:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
3418b7d4:	2308      	movs	r3, #8
3418b7d6:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
3418b7d8:	2300      	movs	r3, #0
3418b7da:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
3418b7dc:	2308      	movs	r3, #8
3418b7de:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
3418b7e0:	2300      	movs	r3, #0
3418b7e2:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
3418b7e4:	2308      	movs	r3, #8
3418b7e6:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
3418b7e8:	2300      	movs	r3, #0
3418b7ea:	617b      	str	r3, [r7, #20]
      break;
3418b7ec:	e026      	b.n	3418b83c <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL44:
      PSIZE = 1U;
3418b7ee:	2301      	movs	r3, #1
3418b7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 4U;
3418b7f2:	2304      	movs	r3, #4
3418b7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 4U;
3418b7f6:	2304      	movs	r3, #4
3418b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 4U;
3418b7fa:	2304      	movs	r3, #4
3418b7fc:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
3418b7fe:	2300      	movs	r3, #0
3418b800:	61fb      	str	r3, [r7, #28]
      GLEN = 4U;
3418b802:	2304      	movs	r3, #4
3418b804:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
3418b806:	2300      	movs	r3, #0
3418b808:	60fb      	str	r3, [r7, #12]
      BLEN = 4U;
3418b80a:	2304      	movs	r3, #4
3418b80c:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
3418b80e:	2300      	movs	r3, #0
3418b810:	617b      	str	r3, [r7, #20]
      break;
3418b812:	e013      	b.n	3418b83c <LTDC_SetPredefFormat+0x120>
    case LTDC_PIXEL_FORMAT_AL88:
      PSIZE = 2U;
3418b814:	2302      	movs	r3, #2
3418b816:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ALEN = 8U;
3418b818:	2308      	movs	r3, #8
3418b81a:	62bb      	str	r3, [r7, #40]	@ 0x28
      APOS = 8U;
3418b81c:	2308      	movs	r3, #8
3418b81e:	627b      	str	r3, [r7, #36]	@ 0x24
      RLEN = 8U;
3418b820:	2308      	movs	r3, #8
3418b822:	623b      	str	r3, [r7, #32]
      RPOS = 0U;
3418b824:	2300      	movs	r3, #0
3418b826:	61fb      	str	r3, [r7, #28]
      GLEN = 8U;
3418b828:	2308      	movs	r3, #8
3418b82a:	613b      	str	r3, [r7, #16]
      GPOS = 0U;
3418b82c:	2300      	movs	r3, #0
3418b82e:	60fb      	str	r3, [r7, #12]
      BLEN = 8U;
3418b830:	2308      	movs	r3, #8
3418b832:	61bb      	str	r3, [r7, #24]
      BPOS = 0U;
3418b834:	2300      	movs	r3, #0
3418b836:	617b      	str	r3, [r7, #20]
      break;
3418b838:	e000      	b.n	3418b83c <LTDC_SetPredefFormat+0x120>
    default:
      break;
3418b83a:	bf00      	nop
  }

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3418b83c:	687a      	ldr	r2, [r7, #4]
3418b83e:	683b      	ldr	r3, [r7, #0]
3418b840:	2134      	movs	r1, #52	@ 0x34
3418b842:	fb01 f303 	mul.w	r3, r1, r3
3418b846:	4413      	add	r3, r2
3418b848:	3348      	adds	r3, #72	@ 0x48
3418b84a:	681b      	ldr	r3, [r3, #0]
3418b84c:	2b06      	cmp	r3, #6
3418b84e:	d903      	bls.n	3418b858 <LTDC_SetPredefFormat+0x13c>
3418b850:	3b07      	subs	r3, #7
3418b852:	2b04      	cmp	r3, #4
3418b854:	d860      	bhi.n	3418b918 <LTDC_SetPredefFormat+0x1fc>
3418b856:	e028      	b.n	3418b8aa <LTDC_SetPredefFormat+0x18e>
    case LTDC_PIXEL_FORMAT_RGBA8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_RGB565:
    case LTDC_PIXEL_FORMAT_BGR565:
    case LTDC_PIXEL_FORMAT_RGB888:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
3418b858:	687b      	ldr	r3, [r7, #4]
3418b85a:	681b      	ldr	r3, [r3, #0]
3418b85c:	461a      	mov	r2, r3
3418b85e:	683b      	ldr	r3, [r7, #0]
3418b860:	021b      	lsls	r3, r3, #8
3418b862:	4413      	add	r3, r2
3418b864:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b868:	4618      	mov	r0, r3
3418b86a:	687a      	ldr	r2, [r7, #4]
3418b86c:	683b      	ldr	r3, [r7, #0]
3418b86e:	2134      	movs	r1, #52	@ 0x34
3418b870:	fb01 f303 	mul.w	r3, r1, r3
3418b874:	4413      	add	r3, r2
3418b876:	3348      	adds	r3, #72	@ 0x48
3418b878:	681b      	ldr	r3, [r3, #0]
3418b87a:	61c3      	str	r3, [r0, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
3418b87c:	687b      	ldr	r3, [r7, #4]
3418b87e:	681b      	ldr	r3, [r3, #0]
3418b880:	461a      	mov	r2, r3
3418b882:	683b      	ldr	r3, [r7, #0]
3418b884:	021b      	lsls	r3, r3, #8
3418b886:	4413      	add	r3, r2
3418b888:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b88c:	461a      	mov	r2, r3
3418b88e:	2300      	movs	r3, #0
3418b890:	6753      	str	r3, [r2, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
3418b892:	687b      	ldr	r3, [r7, #4]
3418b894:	681b      	ldr	r3, [r3, #0]
3418b896:	461a      	mov	r2, r3
3418b898:	683b      	ldr	r3, [r7, #0]
3418b89a:	021b      	lsls	r3, r3, #8
3418b89c:	4413      	add	r3, r2
3418b89e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b8a2:	461a      	mov	r2, r3
3418b8a4:	2300      	movs	r3, #0
3418b8a6:	6793      	str	r3, [r2, #120]	@ 0x78
      break;
3418b8a8:	e037      	b.n	3418b91a <LTDC_SetPredefFormat+0x1fe>
    case LTDC_PIXEL_FORMAT_ARGB1555:
    case LTDC_PIXEL_FORMAT_ARGB4444:
    case LTDC_PIXEL_FORMAT_L8:
    case LTDC_PIXEL_FORMAT_AL44:
    case LTDC_PIXEL_FORMAT_AL88:
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
3418b8aa:	687b      	ldr	r3, [r7, #4]
3418b8ac:	681b      	ldr	r3, [r3, #0]
3418b8ae:	461a      	mov	r2, r3
3418b8b0:	683b      	ldr	r3, [r7, #0]
3418b8b2:	021b      	lsls	r3, r3, #8
3418b8b4:	4413      	add	r3, r2
3418b8b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b8ba:	461a      	mov	r2, r3
3418b8bc:	2307      	movs	r3, #7
3418b8be:	61d3      	str	r3, [r2, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
3418b8c0:	6a3b      	ldr	r3, [r7, #32]
3418b8c2:	039a      	lsls	r2, r3, #14
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
3418b8c4:	69fb      	ldr	r3, [r7, #28]
3418b8c6:	025b      	lsls	r3, r3, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
3418b8c8:	441a      	add	r2, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
3418b8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418b8cc:	015b      	lsls	r3, r3, #5
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
3418b8ce:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
3418b8d0:	687b      	ldr	r3, [r7, #4]
3418b8d2:	681b      	ldr	r3, [r3, #0]
3418b8d4:	4619      	mov	r1, r3
3418b8d6:	683b      	ldr	r3, [r7, #0]
3418b8d8:	021b      	lsls	r3, r3, #8
3418b8da:	440b      	add	r3, r1
3418b8dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b8e0:	4619      	mov	r1, r3
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
3418b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418b8e4:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
3418b8e6:	674b      	str	r3, [r1, #116]	@ 0x74
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
3418b8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418b8ea:	049a      	lsls	r2, r3, #18
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
3418b8ec:	69bb      	ldr	r3, [r7, #24]
3418b8ee:	039b      	lsls	r3, r3, #14
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
3418b8f0:	441a      	add	r2, r3
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
3418b8f2:	697b      	ldr	r3, [r7, #20]
3418b8f4:	025b      	lsls	r3, r3, #9
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
3418b8f6:	441a      	add	r2, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
3418b8f8:	693b      	ldr	r3, [r7, #16]
3418b8fa:	015b      	lsls	r3, r3, #5
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
3418b8fc:	441a      	add	r2, r3
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
3418b8fe:	687b      	ldr	r3, [r7, #4]
3418b900:	681b      	ldr	r3, [r3, #0]
3418b902:	4619      	mov	r1, r3
3418b904:	683b      	ldr	r3, [r7, #0]
3418b906:	021b      	lsls	r3, r3, #8
3418b908:	440b      	add	r3, r1
3418b90a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418b90e:	4619      	mov	r1, r3
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
3418b910:	68fb      	ldr	r3, [r7, #12]
3418b912:	4413      	add	r3, r2
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
3418b914:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
3418b916:	e000      	b.n	3418b91a <LTDC_SetPredefFormat+0x1fe>
    default:
      break;
3418b918:	bf00      	nop
  }
}
3418b91a:	bf00      	nop
3418b91c:	3734      	adds	r7, #52	@ 0x34
3418b91e:	46bd      	mov	sp, r7
3418b920:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b924:	4770      	bx	lr
3418b926:	bf00      	nop

3418b928 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
3418b928:	b580      	push	{r7, lr}
3418b92a:	b084      	sub	sp, #16
3418b92c:	af00      	add	r7, sp, #0
3418b92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
3418b930:	687b      	ldr	r3, [r7, #4]
3418b932:	2b04      	cmp	r3, #4
3418b934:	d007      	beq.n	3418b946 <HAL_PWREx_ConfigSupply+0x1e>
3418b936:	687b      	ldr	r3, [r7, #4]
3418b938:	2b00      	cmp	r3, #0
3418b93a:	d004      	beq.n	3418b946 <HAL_PWREx_ConfigSupply+0x1e>
3418b93c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3418b940:	4811      	ldr	r0, [pc, #68]	@ (3418b988 <HAL_PWREx_ConfigSupply+0x60>)
3418b942:	f7f6 fc93 	bl	3418226c <assert_failed>

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
3418b946:	4b11      	ldr	r3, [pc, #68]	@ (3418b98c <HAL_PWREx_ConfigSupply+0x64>)
3418b948:	681b      	ldr	r3, [r3, #0]
3418b94a:	f023 0204 	bic.w	r2, r3, #4
3418b94e:	490f      	ldr	r1, [pc, #60]	@ (3418b98c <HAL_PWREx_ConfigSupply+0x64>)
3418b950:	687b      	ldr	r3, [r7, #4]
3418b952:	4313      	orrs	r3, r2
3418b954:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
3418b956:	f7f8 fdf3 	bl	34184540 <HAL_GetTick>
3418b95a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
3418b95c:	e009      	b.n	3418b972 <HAL_PWREx_ConfigSupply+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
3418b95e:	f7f8 fdef 	bl	34184540 <HAL_GetTick>
3418b962:	4602      	mov	r2, r0
3418b964:	68fb      	ldr	r3, [r7, #12]
3418b966:	1ad3      	subs	r3, r2, r3
3418b968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3418b96c:	d901      	bls.n	3418b972 <HAL_PWREx_ConfigSupply+0x4a>
    {
      return HAL_ERROR;
3418b96e:	2301      	movs	r3, #1
3418b970:	e006      	b.n	3418b980 <HAL_PWREx_ConfigSupply+0x58>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
3418b972:	4b06      	ldr	r3, [pc, #24]	@ (3418b98c <HAL_PWREx_ConfigSupply+0x64>)
3418b974:	6a1b      	ldr	r3, [r3, #32]
3418b976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418b97a:	2b00      	cmp	r3, #0
3418b97c:	d0ef      	beq.n	3418b95e <HAL_PWREx_ConfigSupply+0x36>
    }
  }

  return HAL_OK;
3418b97e:	2300      	movs	r3, #0
}
3418b980:	4618      	mov	r0, r3
3418b982:	3710      	adds	r7, #16
3418b984:	46bd      	mov	sp, r7
3418b986:	bd80      	pop	{r7, pc}
3418b988:	341a52f0 	.word	0x341a52f0
3418b98c:	56024800 	.word	0x56024800

3418b990 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
3418b990:	b480      	push	{r7}
3418b992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
3418b994:	4b05      	ldr	r3, [pc, #20]	@ (3418b9ac <HAL_PWREx_EnableVddIO2+0x1c>)
3418b996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418b998:	4a04      	ldr	r2, [pc, #16]	@ (3418b9ac <HAL_PWREx_EnableVddIO2+0x1c>)
3418b99a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418b99e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3418b9a0:	bf00      	nop
3418b9a2:	46bd      	mov	sp, r7
3418b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b9a8:	4770      	bx	lr
3418b9aa:	bf00      	nop
3418b9ac:	56024800 	.word	0x56024800

3418b9b0 <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
3418b9b0:	b480      	push	{r7}
3418b9b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
3418b9b4:	4b05      	ldr	r3, [pc, #20]	@ (3418b9cc <HAL_PWREx_EnableVddIO4+0x1c>)
3418b9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418b9b8:	4a04      	ldr	r2, [pc, #16]	@ (3418b9cc <HAL_PWREx_EnableVddIO4+0x1c>)
3418b9ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3418b9be:	6353      	str	r3, [r2, #52]	@ 0x34
}
3418b9c0:	bf00      	nop
3418b9c2:	46bd      	mov	sp, r7
3418b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b9c8:	4770      	bx	lr
3418b9ca:	bf00      	nop
3418b9cc:	56024800 	.word	0x56024800

3418b9d0 <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
3418b9d0:	b580      	push	{r7, lr}
3418b9d2:	b082      	sub	sp, #8
3418b9d4:	af00      	add	r7, sp, #0
3418b9d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
3418b9d8:	687b      	ldr	r3, [r7, #4]
3418b9da:	681b      	ldr	r3, [r3, #0]
3418b9dc:	4a20      	ldr	r2, [pc, #128]	@ (3418ba60 <HAL_RAMCFG_EnableAXISRAM+0x90>)
3418b9de:	4293      	cmp	r3, r2
3418b9e0:	d031      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418b9e2:	687b      	ldr	r3, [r7, #4]
3418b9e4:	681b      	ldr	r3, [r3, #0]
3418b9e6:	4a1f      	ldr	r2, [pc, #124]	@ (3418ba64 <HAL_RAMCFG_EnableAXISRAM+0x94>)
3418b9e8:	4293      	cmp	r3, r2
3418b9ea:	d02c      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418b9ec:	687b      	ldr	r3, [r7, #4]
3418b9ee:	681b      	ldr	r3, [r3, #0]
3418b9f0:	4a1d      	ldr	r2, [pc, #116]	@ (3418ba68 <HAL_RAMCFG_EnableAXISRAM+0x98>)
3418b9f2:	4293      	cmp	r3, r2
3418b9f4:	d027      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418b9f6:	687b      	ldr	r3, [r7, #4]
3418b9f8:	681b      	ldr	r3, [r3, #0]
3418b9fa:	4a1c      	ldr	r2, [pc, #112]	@ (3418ba6c <HAL_RAMCFG_EnableAXISRAM+0x9c>)
3418b9fc:	4293      	cmp	r3, r2
3418b9fe:	d022      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba00:	687b      	ldr	r3, [r7, #4]
3418ba02:	681b      	ldr	r3, [r3, #0]
3418ba04:	4a1a      	ldr	r2, [pc, #104]	@ (3418ba70 <HAL_RAMCFG_EnableAXISRAM+0xa0>)
3418ba06:	4293      	cmp	r3, r2
3418ba08:	d01d      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba0a:	687b      	ldr	r3, [r7, #4]
3418ba0c:	681b      	ldr	r3, [r3, #0]
3418ba0e:	4a19      	ldr	r2, [pc, #100]	@ (3418ba74 <HAL_RAMCFG_EnableAXISRAM+0xa4>)
3418ba10:	4293      	cmp	r3, r2
3418ba12:	d018      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba14:	687b      	ldr	r3, [r7, #4]
3418ba16:	681b      	ldr	r3, [r3, #0]
3418ba18:	4a17      	ldr	r2, [pc, #92]	@ (3418ba78 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
3418ba1a:	4293      	cmp	r3, r2
3418ba1c:	d013      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba1e:	687b      	ldr	r3, [r7, #4]
3418ba20:	681b      	ldr	r3, [r3, #0]
3418ba22:	4a16      	ldr	r2, [pc, #88]	@ (3418ba7c <HAL_RAMCFG_EnableAXISRAM+0xac>)
3418ba24:	4293      	cmp	r3, r2
3418ba26:	d00e      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba28:	687b      	ldr	r3, [r7, #4]
3418ba2a:	681b      	ldr	r3, [r3, #0]
3418ba2c:	4a14      	ldr	r2, [pc, #80]	@ (3418ba80 <HAL_RAMCFG_EnableAXISRAM+0xb0>)
3418ba2e:	4293      	cmp	r3, r2
3418ba30:	d009      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba32:	687b      	ldr	r3, [r7, #4]
3418ba34:	681b      	ldr	r3, [r3, #0]
3418ba36:	4a13      	ldr	r2, [pc, #76]	@ (3418ba84 <HAL_RAMCFG_EnableAXISRAM+0xb4>)
3418ba38:	4293      	cmp	r3, r2
3418ba3a:	d004      	beq.n	3418ba46 <HAL_RAMCFG_EnableAXISRAM+0x76>
3418ba3c:	f240 4107 	movw	r1, #1031	@ 0x407
3418ba40:	4811      	ldr	r0, [pc, #68]	@ (3418ba88 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
3418ba42:	f7f6 fc13 	bl	3418226c <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
3418ba46:	687b      	ldr	r3, [r7, #4]
3418ba48:	681b      	ldr	r3, [r3, #0]
3418ba4a:	681a      	ldr	r2, [r3, #0]
3418ba4c:	687b      	ldr	r3, [r7, #4]
3418ba4e:	681b      	ldr	r3, [r3, #0]
3418ba50:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
3418ba54:	601a      	str	r2, [r3, #0]
}
3418ba56:	bf00      	nop
3418ba58:	3708      	adds	r7, #8
3418ba5a:	46bd      	mov	sp, r7
3418ba5c:	bd80      	pop	{r7, pc}
3418ba5e:	bf00      	nop
3418ba60:	52023080 	.word	0x52023080
3418ba64:	42023080 	.word	0x42023080
3418ba68:	52023100 	.word	0x52023100
3418ba6c:	42023100 	.word	0x42023100
3418ba70:	52023180 	.word	0x52023180
3418ba74:	42023180 	.word	0x42023180
3418ba78:	52023200 	.word	0x52023200
3418ba7c:	42023200 	.word	0x42023200
3418ba80:	52023280 	.word	0x52023280
3418ba84:	42023280 	.word	0x42023280
3418ba88:	341a5328 	.word	0x341a5328

3418ba8c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
3418ba8c:	b480      	push	{r7}
3418ba8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3418ba90:	4b06      	ldr	r3, [pc, #24]	@ (3418baac <LL_RCC_HSE_IsReady+0x20>)
3418ba92:	685b      	ldr	r3, [r3, #4]
3418ba94:	f003 0310 	and.w	r3, r3, #16
3418ba98:	2b00      	cmp	r3, #0
3418ba9a:	d001      	beq.n	3418baa0 <LL_RCC_HSE_IsReady+0x14>
3418ba9c:	2301      	movs	r3, #1
3418ba9e:	e000      	b.n	3418baa2 <LL_RCC_HSE_IsReady+0x16>
3418baa0:	2300      	movs	r3, #0
}
3418baa2:	4618      	mov	r0, r3
3418baa4:	46bd      	mov	sp, r7
3418baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418baaa:	4770      	bx	lr
3418baac:	56028000 	.word	0x56028000

3418bab0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
3418bab0:	b480      	push	{r7}
3418bab2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
3418bab4:	4b04      	ldr	r3, [pc, #16]	@ (3418bac8 <LL_RCC_HSI_Enable+0x18>)
3418bab6:	2208      	movs	r2, #8
3418bab8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418babc:	bf00      	nop
3418babe:	46bd      	mov	sp, r7
3418bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bac4:	4770      	bx	lr
3418bac6:	bf00      	nop
3418bac8:	56028000 	.word	0x56028000

3418bacc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
3418bacc:	b480      	push	{r7}
3418bace:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
3418bad0:	4b05      	ldr	r3, [pc, #20]	@ (3418bae8 <LL_RCC_HSI_Disable+0x1c>)
3418bad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418bad6:	461a      	mov	r2, r3
3418bad8:	2308      	movs	r3, #8
3418bada:	6013      	str	r3, [r2, #0]
}
3418badc:	bf00      	nop
3418bade:	46bd      	mov	sp, r7
3418bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bae4:	4770      	bx	lr
3418bae6:	bf00      	nop
3418bae8:	56028000 	.word	0x56028000

3418baec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
3418baec:	b480      	push	{r7}
3418baee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3418baf0:	4b06      	ldr	r3, [pc, #24]	@ (3418bb0c <LL_RCC_HSI_IsReady+0x20>)
3418baf2:	685b      	ldr	r3, [r3, #4]
3418baf4:	f003 0308 	and.w	r3, r3, #8
3418baf8:	2b00      	cmp	r3, #0
3418bafa:	d001      	beq.n	3418bb00 <LL_RCC_HSI_IsReady+0x14>
3418bafc:	2301      	movs	r3, #1
3418bafe:	e000      	b.n	3418bb02 <LL_RCC_HSI_IsReady+0x16>
3418bb00:	2300      	movs	r3, #0
}
3418bb02:	4618      	mov	r0, r3
3418bb04:	46bd      	mov	sp, r7
3418bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb0a:	4770      	bx	lr
3418bb0c:	56028000 	.word	0x56028000

3418bb10 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
3418bb10:	b480      	push	{r7}
3418bb12:	b083      	sub	sp, #12
3418bb14:	af00      	add	r7, sp, #0
3418bb16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
3418bb18:	4b06      	ldr	r3, [pc, #24]	@ (3418bb34 <LL_RCC_HSI_SetDivider+0x24>)
3418bb1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418bb1c:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
3418bb20:	4904      	ldr	r1, [pc, #16]	@ (3418bb34 <LL_RCC_HSI_SetDivider+0x24>)
3418bb22:	687b      	ldr	r3, [r7, #4]
3418bb24:	4313      	orrs	r3, r2
3418bb26:	648b      	str	r3, [r1, #72]	@ 0x48
}
3418bb28:	bf00      	nop
3418bb2a:	370c      	adds	r7, #12
3418bb2c:	46bd      	mov	sp, r7
3418bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb32:	4770      	bx	lr
3418bb34:	56028000 	.word	0x56028000

3418bb38 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
3418bb38:	b480      	push	{r7}
3418bb3a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418bb3c:	4b04      	ldr	r3, [pc, #16]	@ (3418bb50 <LL_RCC_HSI_GetDivider+0x18>)
3418bb3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418bb40:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3418bb44:	4618      	mov	r0, r3
3418bb46:	46bd      	mov	sp, r7
3418bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb4c:	4770      	bx	lr
3418bb4e:	bf00      	nop
3418bb50:	56028000 	.word	0x56028000

3418bb54 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
3418bb54:	b480      	push	{r7}
3418bb56:	b083      	sub	sp, #12
3418bb58:	af00      	add	r7, sp, #0
3418bb5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
3418bb5c:	4b07      	ldr	r3, [pc, #28]	@ (3418bb7c <LL_RCC_HSI_SetCalibTrimming+0x28>)
3418bb5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418bb60:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
3418bb64:	687b      	ldr	r3, [r7, #4]
3418bb66:	041b      	lsls	r3, r3, #16
3418bb68:	4904      	ldr	r1, [pc, #16]	@ (3418bb7c <LL_RCC_HSI_SetCalibTrimming+0x28>)
3418bb6a:	4313      	orrs	r3, r2
3418bb6c:	648b      	str	r3, [r1, #72]	@ 0x48
}
3418bb6e:	bf00      	nop
3418bb70:	370c      	adds	r7, #12
3418bb72:	46bd      	mov	sp, r7
3418bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb78:	4770      	bx	lr
3418bb7a:	bf00      	nop
3418bb7c:	56028000 	.word	0x56028000

3418bb80 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
3418bb80:	b480      	push	{r7}
3418bb82:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3418bb84:	4b04      	ldr	r3, [pc, #16]	@ (3418bb98 <LL_RCC_MSI_Enable+0x18>)
3418bb86:	2204      	movs	r2, #4
3418bb88:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418bb8c:	bf00      	nop
3418bb8e:	46bd      	mov	sp, r7
3418bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bb94:	4770      	bx	lr
3418bb96:	bf00      	nop
3418bb98:	56028000 	.word	0x56028000

3418bb9c <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
3418bb9c:	b480      	push	{r7}
3418bb9e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3418bba0:	4b05      	ldr	r3, [pc, #20]	@ (3418bbb8 <LL_RCC_MSI_Disable+0x1c>)
3418bba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418bba6:	461a      	mov	r2, r3
3418bba8:	2304      	movs	r3, #4
3418bbaa:	6013      	str	r3, [r2, #0]
}
3418bbac:	bf00      	nop
3418bbae:	46bd      	mov	sp, r7
3418bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bbb4:	4770      	bx	lr
3418bbb6:	bf00      	nop
3418bbb8:	56028000 	.word	0x56028000

3418bbbc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
3418bbbc:	b480      	push	{r7}
3418bbbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418bbc0:	4b06      	ldr	r3, [pc, #24]	@ (3418bbdc <LL_RCC_MSI_IsReady+0x20>)
3418bbc2:	685b      	ldr	r3, [r3, #4]
3418bbc4:	f003 0304 	and.w	r3, r3, #4
3418bbc8:	2b00      	cmp	r3, #0
3418bbca:	d001      	beq.n	3418bbd0 <LL_RCC_MSI_IsReady+0x14>
3418bbcc:	2301      	movs	r3, #1
3418bbce:	e000      	b.n	3418bbd2 <LL_RCC_MSI_IsReady+0x16>
3418bbd0:	2300      	movs	r3, #0
}
3418bbd2:	4618      	mov	r0, r3
3418bbd4:	46bd      	mov	sp, r7
3418bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bbda:	4770      	bx	lr
3418bbdc:	56028000 	.word	0x56028000

3418bbe0 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
3418bbe0:	b480      	push	{r7}
3418bbe2:	b083      	sub	sp, #12
3418bbe4:	af00      	add	r7, sp, #0
3418bbe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
3418bbe8:	4b06      	ldr	r3, [pc, #24]	@ (3418bc04 <LL_RCC_MSI_SetFrequency+0x24>)
3418bbea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bbec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3418bbf0:	4904      	ldr	r1, [pc, #16]	@ (3418bc04 <LL_RCC_MSI_SetFrequency+0x24>)
3418bbf2:	687b      	ldr	r3, [r7, #4]
3418bbf4:	4313      	orrs	r3, r2
3418bbf6:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418bbf8:	bf00      	nop
3418bbfa:	370c      	adds	r7, #12
3418bbfc:	46bd      	mov	sp, r7
3418bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc02:	4770      	bx	lr
3418bc04:	56028000 	.word	0x56028000

3418bc08 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
3418bc08:	b480      	push	{r7}
3418bc0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418bc0c:	4b04      	ldr	r3, [pc, #16]	@ (3418bc20 <LL_RCC_MSI_GetFrequency+0x18>)
3418bc0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bc10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3418bc14:	4618      	mov	r0, r3
3418bc16:	46bd      	mov	sp, r7
3418bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc1c:	4770      	bx	lr
3418bc1e:	bf00      	nop
3418bc20:	56028000 	.word	0x56028000

3418bc24 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
3418bc24:	b480      	push	{r7}
3418bc26:	b083      	sub	sp, #12
3418bc28:	af00      	add	r7, sp, #0
3418bc2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3418bc2c:	4b07      	ldr	r3, [pc, #28]	@ (3418bc4c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418bc2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bc30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
3418bc34:	687b      	ldr	r3, [r7, #4]
3418bc36:	041b      	lsls	r3, r3, #16
3418bc38:	4904      	ldr	r1, [pc, #16]	@ (3418bc4c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418bc3a:	4313      	orrs	r3, r2
3418bc3c:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418bc3e:	bf00      	nop
3418bc40:	370c      	adds	r7, #12
3418bc42:	46bd      	mov	sp, r7
3418bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc48:	4770      	bx	lr
3418bc4a:	bf00      	nop
3418bc4c:	56028000 	.word	0x56028000

3418bc50 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
3418bc50:	b480      	push	{r7}
3418bc52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418bc54:	4b06      	ldr	r3, [pc, #24]	@ (3418bc70 <LL_RCC_LSE_IsReady+0x20>)
3418bc56:	685b      	ldr	r3, [r3, #4]
3418bc58:	f003 0302 	and.w	r3, r3, #2
3418bc5c:	2b00      	cmp	r3, #0
3418bc5e:	d001      	beq.n	3418bc64 <LL_RCC_LSE_IsReady+0x14>
3418bc60:	2301      	movs	r3, #1
3418bc62:	e000      	b.n	3418bc66 <LL_RCC_LSE_IsReady+0x16>
3418bc64:	2300      	movs	r3, #0
}
3418bc66:	4618      	mov	r0, r3
3418bc68:	46bd      	mov	sp, r7
3418bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc6e:	4770      	bx	lr
3418bc70:	56028000 	.word	0x56028000

3418bc74 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
3418bc74:	b480      	push	{r7}
3418bc76:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
3418bc78:	4b04      	ldr	r3, [pc, #16]	@ (3418bc8c <LL_RCC_LSI_Enable+0x18>)
3418bc7a:	2201      	movs	r2, #1
3418bc7c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418bc80:	bf00      	nop
3418bc82:	46bd      	mov	sp, r7
3418bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bc88:	4770      	bx	lr
3418bc8a:	bf00      	nop
3418bc8c:	56028000 	.word	0x56028000

3418bc90 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
3418bc90:	b480      	push	{r7}
3418bc92:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
3418bc94:	4b05      	ldr	r3, [pc, #20]	@ (3418bcac <LL_RCC_LSI_Disable+0x1c>)
3418bc96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418bc9a:	461a      	mov	r2, r3
3418bc9c:	2301      	movs	r3, #1
3418bc9e:	6013      	str	r3, [r2, #0]
}
3418bca0:	bf00      	nop
3418bca2:	46bd      	mov	sp, r7
3418bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bca8:	4770      	bx	lr
3418bcaa:	bf00      	nop
3418bcac:	56028000 	.word	0x56028000

3418bcb0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
3418bcb0:	b480      	push	{r7}
3418bcb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3418bcb4:	4b04      	ldr	r3, [pc, #16]	@ (3418bcc8 <LL_RCC_LSI_IsReady+0x18>)
3418bcb6:	685b      	ldr	r3, [r3, #4]
3418bcb8:	f003 0301 	and.w	r3, r3, #1
}
3418bcbc:	4618      	mov	r0, r3
3418bcbe:	46bd      	mov	sp, r7
3418bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bcc4:	4770      	bx	lr
3418bcc6:	bf00      	nop
3418bcc8:	56028000 	.word	0x56028000

3418bccc <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
3418bccc:	b480      	push	{r7}
3418bcce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3418bcd0:	4b04      	ldr	r3, [pc, #16]	@ (3418bce4 <LL_RCC_GetCpuClkSource+0x18>)
3418bcd2:	6a1b      	ldr	r3, [r3, #32]
3418bcd4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418bcd8:	4618      	mov	r0, r3
3418bcda:	46bd      	mov	sp, r7
3418bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bce0:	4770      	bx	lr
3418bce2:	bf00      	nop
3418bce4:	56028000 	.word	0x56028000

3418bce8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
3418bce8:	b480      	push	{r7}
3418bcea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3418bcec:	4b04      	ldr	r3, [pc, #16]	@ (3418bd00 <LL_RCC_GetSysClkSource+0x18>)
3418bcee:	6a1b      	ldr	r3, [r3, #32]
3418bcf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418bcf4:	4618      	mov	r0, r3
3418bcf6:	46bd      	mov	sp, r7
3418bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bcfc:	4770      	bx	lr
3418bcfe:	bf00      	nop
3418bd00:	56028000 	.word	0x56028000

3418bd04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_32
  *         @arg @ref LL_RCC_AHB_DIV_64
  *         @arg @ref LL_RCC_AHB_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
3418bd04:	b480      	push	{r7}
3418bd06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418bd08:	4b04      	ldr	r3, [pc, #16]	@ (3418bd1c <LL_RCC_GetAHBPrescaler+0x18>)
3418bd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bd0c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
3418bd10:	4618      	mov	r0, r3
3418bd12:	46bd      	mov	sp, r7
3418bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bd18:	4770      	bx	lr
3418bd1a:	bf00      	nop
3418bd1c:	56028000 	.word	0x56028000

3418bd20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_32
  *         @arg @ref LL_RCC_APB1_DIV_64
  *         @arg @ref LL_RCC_APB1_DIV_128
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
3418bd20:	b480      	push	{r7}
3418bd22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3418bd24:	4b04      	ldr	r3, [pc, #16]	@ (3418bd38 <LL_RCC_GetAPB1Prescaler+0x18>)
3418bd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bd28:	f003 0307 	and.w	r3, r3, #7
}
3418bd2c:	4618      	mov	r0, r3
3418bd2e:	46bd      	mov	sp, r7
3418bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bd34:	4770      	bx	lr
3418bd36:	bf00      	nop
3418bd38:	56028000 	.word	0x56028000

3418bd3c <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
3418bd3c:	b480      	push	{r7}
3418bd3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3418bd40:	4b04      	ldr	r3, [pc, #16]	@ (3418bd54 <LL_RCC_PLL1_GetSource+0x18>)
3418bd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418bd46:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418bd4a:	4618      	mov	r0, r3
3418bd4c:	46bd      	mov	sp, r7
3418bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bd52:	4770      	bx	lr
3418bd54:	56028000 	.word	0x56028000

3418bd58 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
3418bd58:	b480      	push	{r7}
3418bd5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418bd5c:	4b07      	ldr	r3, [pc, #28]	@ (3418bd7c <LL_RCC_PLL1_IsReady+0x24>)
3418bd5e:	685b      	ldr	r3, [r3, #4]
3418bd60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418bd64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418bd68:	d101      	bne.n	3418bd6e <LL_RCC_PLL1_IsReady+0x16>
3418bd6a:	2301      	movs	r3, #1
3418bd6c:	e000      	b.n	3418bd70 <LL_RCC_PLL1_IsReady+0x18>
3418bd6e:	2300      	movs	r3, #0
}
3418bd70:	4618      	mov	r0, r3
3418bd72:	46bd      	mov	sp, r7
3418bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bd78:	4770      	bx	lr
3418bd7a:	bf00      	nop
3418bd7c:	56028000 	.word	0x56028000

3418bd80 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
3418bd80:	b480      	push	{r7}
3418bd82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418bd84:	4b07      	ldr	r3, [pc, #28]	@ (3418bda4 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418bd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418bd8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418bd8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418bd92:	d101      	bne.n	3418bd98 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418bd94:	2301      	movs	r3, #1
3418bd96:	e000      	b.n	3418bd9a <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3418bd98:	2300      	movs	r3, #0
}
3418bd9a:	4618      	mov	r0, r3
3418bd9c:	46bd      	mov	sp, r7
3418bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bda2:	4770      	bx	lr
3418bda4:	56028000 	.word	0x56028000

3418bda8 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
3418bda8:	b480      	push	{r7}
3418bdaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3418bdac:	4b04      	ldr	r3, [pc, #16]	@ (3418bdc0 <LL_RCC_PLL2_GetSource+0x18>)
3418bdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bdb2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418bdb6:	4618      	mov	r0, r3
3418bdb8:	46bd      	mov	sp, r7
3418bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bdbe:	4770      	bx	lr
3418bdc0:	56028000 	.word	0x56028000

3418bdc4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
3418bdc4:	b480      	push	{r7}
3418bdc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418bdc8:	4b07      	ldr	r3, [pc, #28]	@ (3418bde8 <LL_RCC_PLL2_IsReady+0x24>)
3418bdca:	685b      	ldr	r3, [r3, #4]
3418bdcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418bdd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418bdd4:	d101      	bne.n	3418bdda <LL_RCC_PLL2_IsReady+0x16>
3418bdd6:	2301      	movs	r3, #1
3418bdd8:	e000      	b.n	3418bddc <LL_RCC_PLL2_IsReady+0x18>
3418bdda:	2300      	movs	r3, #0
}
3418bddc:	4618      	mov	r0, r3
3418bdde:	46bd      	mov	sp, r7
3418bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bde4:	4770      	bx	lr
3418bde6:	bf00      	nop
3418bde8:	56028000 	.word	0x56028000

3418bdec <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
3418bdec:	b480      	push	{r7}
3418bdee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418bdf0:	4b07      	ldr	r3, [pc, #28]	@ (3418be10 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418bdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418bdf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418bdfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418bdfe:	d101      	bne.n	3418be04 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418be00:	2301      	movs	r3, #1
3418be02:	e000      	b.n	3418be06 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418be04:	2300      	movs	r3, #0
}
3418be06:	4618      	mov	r0, r3
3418be08:	46bd      	mov	sp, r7
3418be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be0e:	4770      	bx	lr
3418be10:	56028000 	.word	0x56028000

3418be14 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
3418be14:	b480      	push	{r7}
3418be16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418be18:	4b04      	ldr	r3, [pc, #16]	@ (3418be2c <LL_RCC_PLL3_GetSource+0x18>)
3418be1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418be1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418be22:	4618      	mov	r0, r3
3418be24:	46bd      	mov	sp, r7
3418be26:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be2a:	4770      	bx	lr
3418be2c:	56028000 	.word	0x56028000

3418be30 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
3418be30:	b480      	push	{r7}
3418be32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418be34:	4b07      	ldr	r3, [pc, #28]	@ (3418be54 <LL_RCC_PLL3_IsReady+0x24>)
3418be36:	685b      	ldr	r3, [r3, #4]
3418be38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418be3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418be40:	d101      	bne.n	3418be46 <LL_RCC_PLL3_IsReady+0x16>
3418be42:	2301      	movs	r3, #1
3418be44:	e000      	b.n	3418be48 <LL_RCC_PLL3_IsReady+0x18>
3418be46:	2300      	movs	r3, #0
}
3418be48:	4618      	mov	r0, r3
3418be4a:	46bd      	mov	sp, r7
3418be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be50:	4770      	bx	lr
3418be52:	bf00      	nop
3418be54:	56028000 	.word	0x56028000

3418be58 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
3418be58:	b480      	push	{r7}
3418be5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418be5c:	4b07      	ldr	r3, [pc, #28]	@ (3418be7c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418be5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418be62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418be66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418be6a:	d101      	bne.n	3418be70 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418be6c:	2301      	movs	r3, #1
3418be6e:	e000      	b.n	3418be72 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418be70:	2300      	movs	r3, #0
}
3418be72:	4618      	mov	r0, r3
3418be74:	46bd      	mov	sp, r7
3418be76:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be7a:	4770      	bx	lr
3418be7c:	56028000 	.word	0x56028000

3418be80 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
3418be80:	b480      	push	{r7}
3418be82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418be84:	4b04      	ldr	r3, [pc, #16]	@ (3418be98 <LL_RCC_PLL4_GetSource+0x18>)
3418be86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418be8a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418be8e:	4618      	mov	r0, r3
3418be90:	46bd      	mov	sp, r7
3418be92:	f85d 7b04 	ldr.w	r7, [sp], #4
3418be96:	4770      	bx	lr
3418be98:	56028000 	.word	0x56028000

3418be9c <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
3418be9c:	b480      	push	{r7}
3418be9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418bea0:	4b07      	ldr	r3, [pc, #28]	@ (3418bec0 <LL_RCC_PLL4_IsReady+0x24>)
3418bea2:	685b      	ldr	r3, [r3, #4]
3418bea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418bea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418beac:	d101      	bne.n	3418beb2 <LL_RCC_PLL4_IsReady+0x16>
3418beae:	2301      	movs	r3, #1
3418beb0:	e000      	b.n	3418beb4 <LL_RCC_PLL4_IsReady+0x18>
3418beb2:	2300      	movs	r3, #0
}
3418beb4:	4618      	mov	r0, r3
3418beb6:	46bd      	mov	sp, r7
3418beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bebc:	4770      	bx	lr
3418bebe:	bf00      	nop
3418bec0:	56028000 	.word	0x56028000

3418bec4 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
3418bec4:	b480      	push	{r7}
3418bec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418bec8:	4b07      	ldr	r3, [pc, #28]	@ (3418bee8 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418beca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418bece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418bed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418bed6:	d101      	bne.n	3418bedc <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418bed8:	2301      	movs	r3, #1
3418beda:	e000      	b.n	3418bede <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418bedc:	2300      	movs	r3, #0
}
3418bede:	4618      	mov	r0, r3
3418bee0:	46bd      	mov	sp, r7
3418bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bee6:	4770      	bx	lr
3418bee8:	56028000 	.word	0x56028000

3418beec <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
3418beec:	b480      	push	{r7}
3418beee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
3418bef0:	4b04      	ldr	r3, [pc, #16]	@ (3418bf04 <LL_RCC_IC1_Enable+0x18>)
3418bef2:	2201      	movs	r2, #1
3418bef4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418bef8:	bf00      	nop
3418befa:	46bd      	mov	sp, r7
3418befc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf00:	4770      	bx	lr
3418bf02:	bf00      	nop
3418bf04:	56028000 	.word	0x56028000

3418bf08 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
3418bf08:	b480      	push	{r7}
3418bf0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3418bf0c:	4b04      	ldr	r3, [pc, #16]	@ (3418bf20 <LL_RCC_IC1_GetSource+0x18>)
3418bf0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418bf12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418bf16:	4618      	mov	r0, r3
3418bf18:	46bd      	mov	sp, r7
3418bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf1e:	4770      	bx	lr
3418bf20:	56028000 	.word	0x56028000

3418bf24 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
3418bf24:	b480      	push	{r7}
3418bf26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3418bf28:	4b05      	ldr	r3, [pc, #20]	@ (3418bf40 <LL_RCC_IC1_GetDivider+0x1c>)
3418bf2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418bf2e:	0c1b      	lsrs	r3, r3, #16
3418bf30:	b2db      	uxtb	r3, r3
3418bf32:	3301      	adds	r3, #1
}
3418bf34:	4618      	mov	r0, r3
3418bf36:	46bd      	mov	sp, r7
3418bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf3c:	4770      	bx	lr
3418bf3e:	bf00      	nop
3418bf40:	56028000 	.word	0x56028000

3418bf44 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
3418bf44:	b480      	push	{r7}
3418bf46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3418bf48:	4b04      	ldr	r3, [pc, #16]	@ (3418bf5c <LL_RCC_IC2_GetSource+0x18>)
3418bf4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418bf4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418bf52:	4618      	mov	r0, r3
3418bf54:	46bd      	mov	sp, r7
3418bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf5a:	4770      	bx	lr
3418bf5c:	56028000 	.word	0x56028000

3418bf60 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
3418bf60:	b480      	push	{r7}
3418bf62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3418bf64:	4b05      	ldr	r3, [pc, #20]	@ (3418bf7c <LL_RCC_IC2_GetDivider+0x1c>)
3418bf66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418bf6a:	0c1b      	lsrs	r3, r3, #16
3418bf6c:	b2db      	uxtb	r3, r3
3418bf6e:	3301      	adds	r3, #1
}
3418bf70:	4618      	mov	r0, r3
3418bf72:	46bd      	mov	sp, r7
3418bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf78:	4770      	bx	lr
3418bf7a:	bf00      	nop
3418bf7c:	56028000 	.word	0x56028000

3418bf80 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
3418bf80:	b480      	push	{r7}
3418bf82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418bf84:	4b04      	ldr	r3, [pc, #16]	@ (3418bf98 <LL_RCC_IC6_GetSource+0x18>)
3418bf86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418bf8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418bf8e:	4618      	mov	r0, r3
3418bf90:	46bd      	mov	sp, r7
3418bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf96:	4770      	bx	lr
3418bf98:	56028000 	.word	0x56028000

3418bf9c <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
3418bf9c:	b480      	push	{r7}
3418bf9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418bfa0:	4b04      	ldr	r3, [pc, #16]	@ (3418bfb4 <LL_RCC_IC11_GetSource+0x18>)
3418bfa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418bfa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418bfaa:	4618      	mov	r0, r3
3418bfac:	46bd      	mov	sp, r7
3418bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bfb2:	4770      	bx	lr
3418bfb4:	56028000 	.word	0x56028000

3418bfb8 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
3418bfb8:	b580      	push	{r7, lr}
3418bfba:	b0a2      	sub	sp, #136	@ 0x88
3418bfbc:	af00      	add	r7, sp, #0
3418bfbe:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
3418bfc0:	687b      	ldr	r3, [r7, #4]
3418bfc2:	2b00      	cmp	r3, #0
3418bfc4:	d102      	bne.n	3418bfcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
3418bfc6:	2301      	movs	r3, #1
3418bfc8:	f000 bd10 	b.w	3418c9ec <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
3418bfcc:	687b      	ldr	r3, [r7, #4]
3418bfce:	681b      	ldr	r3, [r3, #0]
3418bfd0:	2b00      	cmp	r3, #0
3418bfd2:	d022      	beq.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418bfd4:	687b      	ldr	r3, [r7, #4]
3418bfd6:	681b      	ldr	r3, [r3, #0]
3418bfd8:	f003 0301 	and.w	r3, r3, #1
3418bfdc:	2b00      	cmp	r3, #0
3418bfde:	d11c      	bne.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418bfe0:	687b      	ldr	r3, [r7, #4]
3418bfe2:	681b      	ldr	r3, [r3, #0]
3418bfe4:	f003 0302 	and.w	r3, r3, #2
3418bfe8:	2b00      	cmp	r3, #0
3418bfea:	d116      	bne.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418bfec:	687b      	ldr	r3, [r7, #4]
3418bfee:	681b      	ldr	r3, [r3, #0]
3418bff0:	f003 0310 	and.w	r3, r3, #16
3418bff4:	2b00      	cmp	r3, #0
3418bff6:	d110      	bne.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418bff8:	687b      	ldr	r3, [r7, #4]
3418bffa:	681b      	ldr	r3, [r3, #0]
3418bffc:	f003 0308 	and.w	r3, r3, #8
3418c000:	2b00      	cmp	r3, #0
3418c002:	d10a      	bne.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418c004:	687b      	ldr	r3, [r7, #4]
3418c006:	681b      	ldr	r3, [r3, #0]
3418c008:	f003 0304 	and.w	r3, r3, #4
3418c00c:	2b00      	cmp	r3, #0
3418c00e:	d104      	bne.n	3418c01a <HAL_RCC_OscConfig+0x62>
3418c010:	f44f 71b9 	mov.w	r1, #370	@ 0x172
3418c014:	4892      	ldr	r0, [pc, #584]	@ (3418c260 <HAL_RCC_OscConfig+0x2a8>)
3418c016:	f7f6 f929 	bl	3418226c <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
3418c01a:	f7ff fe57 	bl	3418bccc <LL_RCC_GetCpuClkSource>
3418c01e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
3418c022:	f7ff fe61 	bl	3418bce8 <LL_RCC_GetSysClkSource>
3418c026:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3418c02a:	f7ff fe87 	bl	3418bd3c <LL_RCC_PLL1_GetSource>
3418c02e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
3418c030:	f7ff feba 	bl	3418bda8 <LL_RCC_PLL2_GetSource>
3418c034:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3418c036:	f7ff feed 	bl	3418be14 <LL_RCC_PLL3_GetSource>
3418c03a:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
3418c03c:	f7ff ff20 	bl	3418be80 <LL_RCC_PLL4_GetSource>
3418c040:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
3418c042:	4b88      	ldr	r3, [pc, #544]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c044:	685b      	ldr	r3, [r3, #4]
3418c046:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3418c048:	687b      	ldr	r3, [r7, #4]
3418c04a:	681b      	ldr	r3, [r3, #0]
3418c04c:	f003 0301 	and.w	r3, r3, #1
3418c050:	2b00      	cmp	r3, #0
3418c052:	f000 80c3 	beq.w	3418c1dc <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
3418c056:	687b      	ldr	r3, [r7, #4]
3418c058:	685b      	ldr	r3, [r3, #4]
3418c05a:	2b00      	cmp	r3, #0
3418c05c:	d013      	beq.n	3418c086 <HAL_RCC_OscConfig+0xce>
3418c05e:	687b      	ldr	r3, [r7, #4]
3418c060:	685b      	ldr	r3, [r3, #4]
3418c062:	2b10      	cmp	r3, #16
3418c064:	d00f      	beq.n	3418c086 <HAL_RCC_OscConfig+0xce>
3418c066:	687b      	ldr	r3, [r7, #4]
3418c068:	685b      	ldr	r3, [r3, #4]
3418c06a:	f248 0210 	movw	r2, #32784	@ 0x8010
3418c06e:	4293      	cmp	r3, r2
3418c070:	d009      	beq.n	3418c086 <HAL_RCC_OscConfig+0xce>
3418c072:	687b      	ldr	r3, [r7, #4]
3418c074:	685b      	ldr	r3, [r3, #4]
3418c076:	4a7c      	ldr	r2, [pc, #496]	@ (3418c268 <HAL_RCC_OscConfig+0x2b0>)
3418c078:	4293      	cmp	r3, r2
3418c07a:	d004      	beq.n	3418c086 <HAL_RCC_OscConfig+0xce>
3418c07c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
3418c080:	4877      	ldr	r0, [pc, #476]	@ (3418c260 <HAL_RCC_OscConfig+0x2a8>)
3418c082:	f7f6 f8f3 	bl	3418226c <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418c086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c08a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418c08e:	d028      	beq.n	3418c0e2 <HAL_RCC_OscConfig+0x12a>
3418c090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c098:	d023      	beq.n	3418c0e2 <HAL_RCC_OscConfig+0x12a>
3418c09a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418c09c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0a0:	d104      	bne.n	3418c0ac <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418c0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c0a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418c0a8:	2b00      	cmp	r3, #0
3418c0aa:	d11a      	bne.n	3418c0e2 <HAL_RCC_OscConfig+0x12a>
3418c0ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418c0ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0b2:	d104      	bne.n	3418c0be <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418c0b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c0b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418c0ba:	2b00      	cmp	r3, #0
3418c0bc:	d111      	bne.n	3418c0e2 <HAL_RCC_OscConfig+0x12a>
3418c0be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418c0c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0c4:	d104      	bne.n	3418c0d0 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418c0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c0c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418c0cc:	2b00      	cmp	r3, #0
3418c0ce:	d108      	bne.n	3418c0e2 <HAL_RCC_OscConfig+0x12a>
3418c0d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418c0d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0d6:	d10b      	bne.n	3418c0f0 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418c0d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c0da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c0de:	2b00      	cmp	r3, #0
3418c0e0:	d006      	beq.n	3418c0f0 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3418c0e2:	687b      	ldr	r3, [r7, #4]
3418c0e4:	685b      	ldr	r3, [r3, #4]
3418c0e6:	2b00      	cmp	r3, #0
3418c0e8:	d178      	bne.n	3418c1dc <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
3418c0ea:	2301      	movs	r3, #1
3418c0ec:	f000 bc7e 	b.w	3418c9ec <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3418c0f0:	687b      	ldr	r3, [r7, #4]
3418c0f2:	685b      	ldr	r3, [r3, #4]
3418c0f4:	2b10      	cmp	r3, #16
3418c0f6:	d104      	bne.n	3418c102 <HAL_RCC_OscConfig+0x14a>
3418c0f8:	4b5a      	ldr	r3, [pc, #360]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c0fa:	2210      	movs	r2, #16
3418c0fc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c100:	e043      	b.n	3418c18a <HAL_RCC_OscConfig+0x1d2>
3418c102:	687b      	ldr	r3, [r7, #4]
3418c104:	685b      	ldr	r3, [r3, #4]
3418c106:	2b00      	cmp	r3, #0
3418c108:	d10c      	bne.n	3418c124 <HAL_RCC_OscConfig+0x16c>
3418c10a:	4b56      	ldr	r3, [pc, #344]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c10c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418c110:	461a      	mov	r2, r3
3418c112:	2310      	movs	r3, #16
3418c114:	6013      	str	r3, [r2, #0]
3418c116:	4b53      	ldr	r3, [pc, #332]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c11a:	4a52      	ldr	r2, [pc, #328]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c11c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418c120:	6553      	str	r3, [r2, #84]	@ 0x54
3418c122:	e032      	b.n	3418c18a <HAL_RCC_OscConfig+0x1d2>
3418c124:	687b      	ldr	r3, [r7, #4]
3418c126:	685b      	ldr	r3, [r3, #4]
3418c128:	f248 0210 	movw	r2, #32784	@ 0x8010
3418c12c:	4293      	cmp	r3, r2
3418c12e:	d110      	bne.n	3418c152 <HAL_RCC_OscConfig+0x19a>
3418c130:	4b4c      	ldr	r3, [pc, #304]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c134:	4a4b      	ldr	r2, [pc, #300]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418c13a:	6553      	str	r3, [r2, #84]	@ 0x54
3418c13c:	4b49      	ldr	r3, [pc, #292]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c140:	4a48      	ldr	r2, [pc, #288]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c146:	6553      	str	r3, [r2, #84]	@ 0x54
3418c148:	4b46      	ldr	r3, [pc, #280]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c14a:	2210      	movs	r2, #16
3418c14c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c150:	e01b      	b.n	3418c18a <HAL_RCC_OscConfig+0x1d2>
3418c152:	687b      	ldr	r3, [r7, #4]
3418c154:	685b      	ldr	r3, [r3, #4]
3418c156:	4a44      	ldr	r2, [pc, #272]	@ (3418c268 <HAL_RCC_OscConfig+0x2b0>)
3418c158:	4293      	cmp	r3, r2
3418c15a:	d10a      	bne.n	3418c172 <HAL_RCC_OscConfig+0x1ba>
3418c15c:	4b41      	ldr	r3, [pc, #260]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c15e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c160:	4a40      	ldr	r2, [pc, #256]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c162:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
3418c166:	6553      	str	r3, [r2, #84]	@ 0x54
3418c168:	4b3e      	ldr	r3, [pc, #248]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c16a:	2210      	movs	r2, #16
3418c16c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c170:	e00b      	b.n	3418c18a <HAL_RCC_OscConfig+0x1d2>
3418c172:	4b3c      	ldr	r3, [pc, #240]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418c178:	461a      	mov	r2, r3
3418c17a:	2310      	movs	r3, #16
3418c17c:	6013      	str	r3, [r2, #0]
3418c17e:	4b39      	ldr	r3, [pc, #228]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418c182:	4a38      	ldr	r2, [pc, #224]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c184:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418c188:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418c18a:	f7f8 f9d9 	bl	34184540 <HAL_GetTick>
3418c18e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3418c190:	687b      	ldr	r3, [r7, #4]
3418c192:	685b      	ldr	r3, [r3, #4]
3418c194:	2b00      	cmp	r3, #0
3418c196:	d01b      	beq.n	3418c1d0 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418c198:	e009      	b.n	3418c1ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418c19a:	f7f8 f9d1 	bl	34184540 <HAL_GetTick>
3418c19e:	4602      	mov	r2, r0
3418c1a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c1a2:	1ad3      	subs	r3, r2, r3
3418c1a4:	2b64      	cmp	r3, #100	@ 0x64
3418c1a6:	d902      	bls.n	3418c1ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
3418c1a8:	2303      	movs	r3, #3
3418c1aa:	f000 bc1f 	b.w	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418c1ae:	4b2d      	ldr	r3, [pc, #180]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c1b0:	685b      	ldr	r3, [r3, #4]
3418c1b2:	f003 0310 	and.w	r3, r3, #16
3418c1b6:	2b00      	cmp	r3, #0
3418c1b8:	d0ef      	beq.n	3418c19a <HAL_RCC_OscConfig+0x1e2>
3418c1ba:	e00f      	b.n	3418c1dc <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418c1bc:	f7f8 f9c0 	bl	34184540 <HAL_GetTick>
3418c1c0:	4602      	mov	r2, r0
3418c1c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c1c4:	1ad3      	subs	r3, r2, r3
3418c1c6:	2b64      	cmp	r3, #100	@ 0x64
3418c1c8:	d902      	bls.n	3418c1d0 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
3418c1ca:	2303      	movs	r3, #3
3418c1cc:	f000 bc0e 	b.w	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3418c1d0:	4b24      	ldr	r3, [pc, #144]	@ (3418c264 <HAL_RCC_OscConfig+0x2ac>)
3418c1d2:	685b      	ldr	r3, [r3, #4]
3418c1d4:	f003 0310 	and.w	r3, r3, #16
3418c1d8:	2b00      	cmp	r3, #0
3418c1da:	d1ef      	bne.n	3418c1bc <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418c1dc:	687b      	ldr	r3, [r7, #4]
3418c1de:	681b      	ldr	r3, [r3, #0]
3418c1e0:	f003 0302 	and.w	r3, r3, #2
3418c1e4:	2b00      	cmp	r3, #0
3418c1e6:	f000 80c3 	beq.w	3418c370 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
3418c1ea:	687b      	ldr	r3, [r7, #4]
3418c1ec:	68db      	ldr	r3, [r3, #12]
3418c1ee:	2b00      	cmp	r3, #0
3418c1f0:	d008      	beq.n	3418c204 <HAL_RCC_OscConfig+0x24c>
3418c1f2:	687b      	ldr	r3, [r7, #4]
3418c1f4:	68db      	ldr	r3, [r3, #12]
3418c1f6:	2b08      	cmp	r3, #8
3418c1f8:	d004      	beq.n	3418c204 <HAL_RCC_OscConfig+0x24c>
3418c1fa:	f240 11b5 	movw	r1, #437	@ 0x1b5
3418c1fe:	4818      	ldr	r0, [pc, #96]	@ (3418c260 <HAL_RCC_OscConfig+0x2a8>)
3418c200:	f7f6 f834 	bl	3418226c <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418c204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c208:	2b00      	cmp	r3, #0
3418c20a:	d023      	beq.n	3418c254 <HAL_RCC_OscConfig+0x29c>
3418c20c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c210:	2b00      	cmp	r3, #0
3418c212:	d01f      	beq.n	3418c254 <HAL_RCC_OscConfig+0x29c>
3418c214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418c216:	2b00      	cmp	r3, #0
3418c218:	d104      	bne.n	3418c224 <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418c21a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c21c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418c220:	2b00      	cmp	r3, #0
3418c222:	d117      	bne.n	3418c254 <HAL_RCC_OscConfig+0x29c>
3418c224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418c226:	2b00      	cmp	r3, #0
3418c228:	d104      	bne.n	3418c234 <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418c22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c22c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418c230:	2b00      	cmp	r3, #0
3418c232:	d10f      	bne.n	3418c254 <HAL_RCC_OscConfig+0x29c>
3418c234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418c236:	2b00      	cmp	r3, #0
3418c238:	d104      	bne.n	3418c244 <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418c23a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c23c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418c240:	2b00      	cmp	r3, #0
3418c242:	d107      	bne.n	3418c254 <HAL_RCC_OscConfig+0x29c>
3418c244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418c246:	2b00      	cmp	r3, #0
3418c248:	d13b      	bne.n	3418c2c2 <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418c24a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c24c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c250:	2b00      	cmp	r3, #0
3418c252:	d036      	beq.n	3418c2c2 <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418c254:	687b      	ldr	r3, [r7, #4]
3418c256:	68db      	ldr	r3, [r3, #12]
3418c258:	2b00      	cmp	r3, #0
3418c25a:	d107      	bne.n	3418c26c <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
3418c25c:	2301      	movs	r3, #1
3418c25e:	e3c5      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
3418c260:	341a5360 	.word	0x341a5360
3418c264:	56028000 	.word	0x56028000
3418c268:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
3418c26c:	687b      	ldr	r3, [r7, #4]
3418c26e:	691b      	ldr	r3, [r3, #16]
3418c270:	2b00      	cmp	r3, #0
3418c272:	d012      	beq.n	3418c29a <HAL_RCC_OscConfig+0x2e2>
3418c274:	687b      	ldr	r3, [r7, #4]
3418c276:	691b      	ldr	r3, [r3, #16]
3418c278:	2b80      	cmp	r3, #128	@ 0x80
3418c27a:	d00e      	beq.n	3418c29a <HAL_RCC_OscConfig+0x2e2>
3418c27c:	687b      	ldr	r3, [r7, #4]
3418c27e:	691b      	ldr	r3, [r3, #16]
3418c280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418c284:	d009      	beq.n	3418c29a <HAL_RCC_OscConfig+0x2e2>
3418c286:	687b      	ldr	r3, [r7, #4]
3418c288:	691b      	ldr	r3, [r3, #16]
3418c28a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
3418c28e:	d004      	beq.n	3418c29a <HAL_RCC_OscConfig+0x2e2>
3418c290:	f240 11c7 	movw	r1, #455	@ 0x1c7
3418c294:	48a2      	ldr	r0, [pc, #648]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c296:	f7f5 ffe9 	bl	3418226c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3418c29a:	687b      	ldr	r3, [r7, #4]
3418c29c:	695b      	ldr	r3, [r3, #20]
3418c29e:	2b7f      	cmp	r3, #127	@ 0x7f
3418c2a0:	d904      	bls.n	3418c2ac <HAL_RCC_OscConfig+0x2f4>
3418c2a2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
3418c2a6:	489e      	ldr	r0, [pc, #632]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c2a8:	f7f5 ffe0 	bl	3418226c <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418c2ac:	687b      	ldr	r3, [r7, #4]
3418c2ae:	691b      	ldr	r3, [r3, #16]
3418c2b0:	4618      	mov	r0, r3
3418c2b2:	f7ff fc2d 	bl	3418bb10 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418c2b6:	687b      	ldr	r3, [r7, #4]
3418c2b8:	695b      	ldr	r3, [r3, #20]
3418c2ba:	4618      	mov	r0, r3
3418c2bc:	f7ff fc4a 	bl	3418bb54 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
3418c2c0:	e056      	b.n	3418c370 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
3418c2c2:	687b      	ldr	r3, [r7, #4]
3418c2c4:	68db      	ldr	r3, [r3, #12]
3418c2c6:	2b00      	cmp	r3, #0
3418c2c8:	d03e      	beq.n	3418c348 <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
3418c2ca:	687b      	ldr	r3, [r7, #4]
3418c2cc:	691b      	ldr	r3, [r3, #16]
3418c2ce:	2b00      	cmp	r3, #0
3418c2d0:	d012      	beq.n	3418c2f8 <HAL_RCC_OscConfig+0x340>
3418c2d2:	687b      	ldr	r3, [r7, #4]
3418c2d4:	691b      	ldr	r3, [r3, #16]
3418c2d6:	2b80      	cmp	r3, #128	@ 0x80
3418c2d8:	d00e      	beq.n	3418c2f8 <HAL_RCC_OscConfig+0x340>
3418c2da:	687b      	ldr	r3, [r7, #4]
3418c2dc:	691b      	ldr	r3, [r3, #16]
3418c2de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418c2e2:	d009      	beq.n	3418c2f8 <HAL_RCC_OscConfig+0x340>
3418c2e4:	687b      	ldr	r3, [r7, #4]
3418c2e6:	691b      	ldr	r3, [r3, #16]
3418c2e8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
3418c2ec:	d004      	beq.n	3418c2f8 <HAL_RCC_OscConfig+0x340>
3418c2ee:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
3418c2f2:	488b      	ldr	r0, [pc, #556]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c2f4:	f7f5 ffba 	bl	3418226c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3418c2f8:	687b      	ldr	r3, [r7, #4]
3418c2fa:	695b      	ldr	r3, [r3, #20]
3418c2fc:	2b7f      	cmp	r3, #127	@ 0x7f
3418c2fe:	d904      	bls.n	3418c30a <HAL_RCC_OscConfig+0x352>
3418c300:	f240 11d7 	movw	r1, #471	@ 0x1d7
3418c304:	4886      	ldr	r0, [pc, #536]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c306:	f7f5 ffb1 	bl	3418226c <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
3418c30a:	f7ff fbd1 	bl	3418bab0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418c30e:	f7f8 f917 	bl	34184540 <HAL_GetTick>
3418c312:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
3418c314:	e008      	b.n	3418c328 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418c316:	f7f8 f913 	bl	34184540 <HAL_GetTick>
3418c31a:	4602      	mov	r2, r0
3418c31c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c31e:	1ad3      	subs	r3, r2, r3
3418c320:	2b01      	cmp	r3, #1
3418c322:	d901      	bls.n	3418c328 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
3418c324:	2303      	movs	r3, #3
3418c326:	e361      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
3418c328:	f7ff fbe0 	bl	3418baec <LL_RCC_HSI_IsReady>
3418c32c:	4603      	mov	r3, r0
3418c32e:	2b00      	cmp	r3, #0
3418c330:	d0f1      	beq.n	3418c316 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418c332:	687b      	ldr	r3, [r7, #4]
3418c334:	691b      	ldr	r3, [r3, #16]
3418c336:	4618      	mov	r0, r3
3418c338:	f7ff fbea 	bl	3418bb10 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418c33c:	687b      	ldr	r3, [r7, #4]
3418c33e:	695b      	ldr	r3, [r3, #20]
3418c340:	4618      	mov	r0, r3
3418c342:	f7ff fc07 	bl	3418bb54 <LL_RCC_HSI_SetCalibTrimming>
3418c346:	e013      	b.n	3418c370 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3418c348:	f7ff fbc0 	bl	3418bacc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418c34c:	f7f8 f8f8 	bl	34184540 <HAL_GetTick>
3418c350:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
3418c352:	e008      	b.n	3418c366 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418c354:	f7f8 f8f4 	bl	34184540 <HAL_GetTick>
3418c358:	4602      	mov	r2, r0
3418c35a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c35c:	1ad3      	subs	r3, r2, r3
3418c35e:	2b01      	cmp	r3, #1
3418c360:	d901      	bls.n	3418c366 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
3418c362:	2303      	movs	r3, #3
3418c364:	e342      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
3418c366:	f7ff fbc1 	bl	3418baec <LL_RCC_HSI_IsReady>
3418c36a:	4603      	mov	r3, r0
3418c36c:	2b00      	cmp	r3, #0
3418c36e:	d1f1      	bne.n	3418c354 <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3418c370:	687b      	ldr	r3, [r7, #4]
3418c372:	681b      	ldr	r3, [r3, #0]
3418c374:	f003 0310 	and.w	r3, r3, #16
3418c378:	2b00      	cmp	r3, #0
3418c37a:	f000 809e 	beq.w	3418c4ba <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
3418c37e:	687b      	ldr	r3, [r7, #4]
3418c380:	69db      	ldr	r3, [r3, #28]
3418c382:	2b00      	cmp	r3, #0
3418c384:	d008      	beq.n	3418c398 <HAL_RCC_OscConfig+0x3e0>
3418c386:	687b      	ldr	r3, [r7, #4]
3418c388:	69db      	ldr	r3, [r3, #28]
3418c38a:	2b04      	cmp	r3, #4
3418c38c:	d004      	beq.n	3418c398 <HAL_RCC_OscConfig+0x3e0>
3418c38e:	f240 2105 	movw	r1, #517	@ 0x205
3418c392:	4863      	ldr	r0, [pc, #396]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c394:	f7f5 ff6a 	bl	3418226c <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418c398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c39c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418c3a0:	d028      	beq.n	3418c3f4 <HAL_RCC_OscConfig+0x43c>
3418c3a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c3aa:	d023      	beq.n	3418c3f4 <HAL_RCC_OscConfig+0x43c>
3418c3ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418c3ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c3b2:	d104      	bne.n	3418c3be <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418c3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418c3ba:	2b00      	cmp	r3, #0
3418c3bc:	d11a      	bne.n	3418c3f4 <HAL_RCC_OscConfig+0x43c>
3418c3be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418c3c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c3c4:	d104      	bne.n	3418c3d0 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418c3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c3c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418c3cc:	2b00      	cmp	r3, #0
3418c3ce:	d111      	bne.n	3418c3f4 <HAL_RCC_OscConfig+0x43c>
3418c3d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418c3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c3d6:	d104      	bne.n	3418c3e2 <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418c3d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c3da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418c3de:	2b00      	cmp	r3, #0
3418c3e0:	d108      	bne.n	3418c3f4 <HAL_RCC_OscConfig+0x43c>
3418c3e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418c3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c3e8:	d119      	bne.n	3418c41e <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418c3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418c3ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c3f0:	2b00      	cmp	r3, #0
3418c3f2:	d014      	beq.n	3418c41e <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418c3f4:	687b      	ldr	r3, [r7, #4]
3418c3f6:	69db      	ldr	r3, [r3, #28]
3418c3f8:	2b00      	cmp	r3, #0
3418c3fa:	d101      	bne.n	3418c400 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
3418c3fc:	2301      	movs	r3, #1
3418c3fe:	e2f5      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3418c400:	687b      	ldr	r3, [r7, #4]
3418c402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c404:	2b1f      	cmp	r3, #31
3418c406:	d904      	bls.n	3418c412 <HAL_RCC_OscConfig+0x45a>
3418c408:	f44f 7106 	mov.w	r1, #536	@ 0x218
3418c40c:	4844      	ldr	r0, [pc, #272]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c40e:	f7f5 ff2d 	bl	3418226c <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418c412:	687b      	ldr	r3, [r7, #4]
3418c414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c416:	4618      	mov	r0, r3
3418c418:	f7ff fc04 	bl	3418bc24 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418c41c:	e04d      	b.n	3418c4ba <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3418c41e:	687b      	ldr	r3, [r7, #4]
3418c420:	69db      	ldr	r3, [r3, #28]
3418c422:	2b00      	cmp	r3, #0
3418c424:	d035      	beq.n	3418c492 <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
3418c426:	687b      	ldr	r3, [r7, #4]
3418c428:	6a1b      	ldr	r3, [r3, #32]
3418c42a:	2b00      	cmp	r3, #0
3418c42c:	d009      	beq.n	3418c442 <HAL_RCC_OscConfig+0x48a>
3418c42e:	687b      	ldr	r3, [r7, #4]
3418c430:	6a1b      	ldr	r3, [r3, #32]
3418c432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418c436:	d004      	beq.n	3418c442 <HAL_RCC_OscConfig+0x48a>
3418c438:	f44f 7109 	mov.w	r1, #548	@ 0x224
3418c43c:	4838      	ldr	r0, [pc, #224]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c43e:	f7f5 ff15 	bl	3418226c <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3418c442:	687b      	ldr	r3, [r7, #4]
3418c444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c446:	2b1f      	cmp	r3, #31
3418c448:	d904      	bls.n	3418c454 <HAL_RCC_OscConfig+0x49c>
3418c44a:	f240 2125 	movw	r1, #549	@ 0x225
3418c44e:	4834      	ldr	r0, [pc, #208]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c450:	f7f5 ff0c 	bl	3418226c <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
3418c454:	687b      	ldr	r3, [r7, #4]
3418c456:	6a1b      	ldr	r3, [r3, #32]
3418c458:	4618      	mov	r0, r3
3418c45a:	f7ff fbc1 	bl	3418bbe0 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
3418c45e:	f7ff fb8f 	bl	3418bb80 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418c462:	f7f8 f86d 	bl	34184540 <HAL_GetTick>
3418c466:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3418c468:	e008      	b.n	3418c47c <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418c46a:	f7f8 f869 	bl	34184540 <HAL_GetTick>
3418c46e:	4602      	mov	r2, r0
3418c470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c472:	1ad3      	subs	r3, r2, r3
3418c474:	2b01      	cmp	r3, #1
3418c476:	d901      	bls.n	3418c47c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
3418c478:	2303      	movs	r3, #3
3418c47a:	e2b7      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
3418c47c:	f7ff fb9e 	bl	3418bbbc <LL_RCC_MSI_IsReady>
3418c480:	4603      	mov	r3, r0
3418c482:	2b00      	cmp	r3, #0
3418c484:	d0f1      	beq.n	3418c46a <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418c486:	687b      	ldr	r3, [r7, #4]
3418c488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c48a:	4618      	mov	r0, r3
3418c48c:	f7ff fbca 	bl	3418bc24 <LL_RCC_MSI_SetCalibTrimming>
3418c490:	e013      	b.n	3418c4ba <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
3418c492:	f7ff fb83 	bl	3418bb9c <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418c496:	f7f8 f853 	bl	34184540 <HAL_GetTick>
3418c49a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
3418c49c:	e008      	b.n	3418c4b0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418c49e:	f7f8 f84f 	bl	34184540 <HAL_GetTick>
3418c4a2:	4602      	mov	r2, r0
3418c4a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c4a6:	1ad3      	subs	r3, r2, r3
3418c4a8:	2b01      	cmp	r3, #1
3418c4aa:	d901      	bls.n	3418c4b0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
3418c4ac:	2303      	movs	r3, #3
3418c4ae:	e29d      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
3418c4b0:	f7ff fb84 	bl	3418bbbc <LL_RCC_MSI_IsReady>
3418c4b4:	4603      	mov	r3, r0
3418c4b6:	2b00      	cmp	r3, #0
3418c4b8:	d1f1      	bne.n	3418c49e <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3418c4ba:	687b      	ldr	r3, [r7, #4]
3418c4bc:	681b      	ldr	r3, [r3, #0]
3418c4be:	f003 0308 	and.w	r3, r3, #8
3418c4c2:	2b00      	cmp	r3, #0
3418c4c4:	d03c      	beq.n	3418c540 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
3418c4c6:	687b      	ldr	r3, [r7, #4]
3418c4c8:	699b      	ldr	r3, [r3, #24]
3418c4ca:	2b00      	cmp	r3, #0
3418c4cc:	d008      	beq.n	3418c4e0 <HAL_RCC_OscConfig+0x528>
3418c4ce:	687b      	ldr	r3, [r7, #4]
3418c4d0:	699b      	ldr	r3, [r3, #24]
3418c4d2:	2b01      	cmp	r3, #1
3418c4d4:	d004      	beq.n	3418c4e0 <HAL_RCC_OscConfig+0x528>
3418c4d6:	f240 2155 	movw	r1, #597	@ 0x255
3418c4da:	4811      	ldr	r0, [pc, #68]	@ (3418c520 <HAL_RCC_OscConfig+0x568>)
3418c4dc:	f7f5 fec6 	bl	3418226c <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3418c4e0:	687b      	ldr	r3, [r7, #4]
3418c4e2:	699b      	ldr	r3, [r3, #24]
3418c4e4:	2b00      	cmp	r3, #0
3418c4e6:	d014      	beq.n	3418c512 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
3418c4e8:	f7ff fbc4 	bl	3418bc74 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418c4ec:	f7f8 f828 	bl	34184540 <HAL_GetTick>
3418c4f0:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418c4f2:	e008      	b.n	3418c506 <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418c4f4:	f7f8 f824 	bl	34184540 <HAL_GetTick>
3418c4f8:	4602      	mov	r2, r0
3418c4fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c4fc:	1ad3      	subs	r3, r2, r3
3418c4fe:	2b01      	cmp	r3, #1
3418c500:	d901      	bls.n	3418c506 <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
3418c502:	2303      	movs	r3, #3
3418c504:	e272      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
3418c506:	f7ff fbd3 	bl	3418bcb0 <LL_RCC_LSI_IsReady>
3418c50a:	4603      	mov	r3, r0
3418c50c:	2b00      	cmp	r3, #0
3418c50e:	d0f1      	beq.n	3418c4f4 <HAL_RCC_OscConfig+0x53c>
3418c510:	e016      	b.n	3418c540 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
3418c512:	f7ff fbbd 	bl	3418bc90 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418c516:	f7f8 f813 	bl	34184540 <HAL_GetTick>
3418c51a:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
3418c51c:	e00b      	b.n	3418c536 <HAL_RCC_OscConfig+0x57e>
3418c51e:	bf00      	nop
3418c520:	341a5360 	.word	0x341a5360
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418c524:	f7f8 f80c 	bl	34184540 <HAL_GetTick>
3418c528:	4602      	mov	r2, r0
3418c52a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c52c:	1ad3      	subs	r3, r2, r3
3418c52e:	2b01      	cmp	r3, #1
3418c530:	d901      	bls.n	3418c536 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
3418c532:	2303      	movs	r3, #3
3418c534:	e25a      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
3418c536:	f7ff fbbb 	bl	3418bcb0 <LL_RCC_LSI_IsReady>
3418c53a:	4603      	mov	r3, r0
3418c53c:	2b00      	cmp	r3, #0
3418c53e:	d1f1      	bne.n	3418c524 <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
3418c540:	687b      	ldr	r3, [r7, #4]
3418c542:	681b      	ldr	r3, [r3, #0]
3418c544:	f003 0304 	and.w	r3, r3, #4
3418c548:	2b00      	cmp	r3, #0
3418c54a:	f000 80a4 	beq.w	3418c696 <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
3418c54e:	687b      	ldr	r3, [r7, #4]
3418c550:	689b      	ldr	r3, [r3, #8]
3418c552:	2b00      	cmp	r3, #0
3418c554:	d013      	beq.n	3418c57e <HAL_RCC_OscConfig+0x5c6>
3418c556:	687b      	ldr	r3, [r7, #4]
3418c558:	689b      	ldr	r3, [r3, #8]
3418c55a:	2b02      	cmp	r3, #2
3418c55c:	d00f      	beq.n	3418c57e <HAL_RCC_OscConfig+0x5c6>
3418c55e:	687b      	ldr	r3, [r7, #4]
3418c560:	689b      	ldr	r3, [r3, #8]
3418c562:	f248 0202 	movw	r2, #32770	@ 0x8002
3418c566:	4293      	cmp	r3, r2
3418c568:	d009      	beq.n	3418c57e <HAL_RCC_OscConfig+0x5c6>
3418c56a:	687b      	ldr	r3, [r7, #4]
3418c56c:	689b      	ldr	r3, [r3, #8]
3418c56e:	4a9b      	ldr	r2, [pc, #620]	@ (3418c7dc <HAL_RCC_OscConfig+0x824>)
3418c570:	4293      	cmp	r3, r2
3418c572:	d004      	beq.n	3418c57e <HAL_RCC_OscConfig+0x5c6>
3418c574:	f44f 7120 	mov.w	r1, #640	@ 0x280
3418c578:	4899      	ldr	r0, [pc, #612]	@ (3418c7e0 <HAL_RCC_OscConfig+0x828>)
3418c57a:	f7f5 fe77 	bl	3418226c <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3418c57e:	687b      	ldr	r3, [r7, #4]
3418c580:	689b      	ldr	r3, [r3, #8]
3418c582:	2b02      	cmp	r3, #2
3418c584:	d104      	bne.n	3418c590 <HAL_RCC_OscConfig+0x5d8>
3418c586:	4b97      	ldr	r3, [pc, #604]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c588:	2202      	movs	r2, #2
3418c58a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c58e:	e055      	b.n	3418c63c <HAL_RCC_OscConfig+0x684>
3418c590:	687b      	ldr	r3, [r7, #4]
3418c592:	689b      	ldr	r3, [r3, #8]
3418c594:	2b00      	cmp	r3, #0
3418c596:	d112      	bne.n	3418c5be <HAL_RCC_OscConfig+0x606>
3418c598:	4b92      	ldr	r3, [pc, #584]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c59a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418c59e:	461a      	mov	r2, r3
3418c5a0:	2302      	movs	r3, #2
3418c5a2:	6013      	str	r3, [r2, #0]
3418c5a4:	4b8f      	ldr	r3, [pc, #572]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c5a8:	4a8e      	ldr	r2, [pc, #568]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c5ae:	6413      	str	r3, [r2, #64]	@ 0x40
3418c5b0:	4b8c      	ldr	r3, [pc, #560]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c5b4:	4a8b      	ldr	r2, [pc, #556]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418c5ba:	6413      	str	r3, [r2, #64]	@ 0x40
3418c5bc:	e03e      	b.n	3418c63c <HAL_RCC_OscConfig+0x684>
3418c5be:	687b      	ldr	r3, [r7, #4]
3418c5c0:	689b      	ldr	r3, [r3, #8]
3418c5c2:	f248 0202 	movw	r2, #32770	@ 0x8002
3418c5c6:	4293      	cmp	r3, r2
3418c5c8:	d110      	bne.n	3418c5ec <HAL_RCC_OscConfig+0x634>
3418c5ca:	4b86      	ldr	r3, [pc, #536]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c5ce:	4a85      	ldr	r2, [pc, #532]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418c5d4:	6413      	str	r3, [r2, #64]	@ 0x40
3418c5d6:	4b83      	ldr	r3, [pc, #524]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c5da:	4a82      	ldr	r2, [pc, #520]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c5e0:	6413      	str	r3, [r2, #64]	@ 0x40
3418c5e2:	4b80      	ldr	r3, [pc, #512]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5e4:	2202      	movs	r2, #2
3418c5e6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c5ea:	e027      	b.n	3418c63c <HAL_RCC_OscConfig+0x684>
3418c5ec:	687b      	ldr	r3, [r7, #4]
3418c5ee:	689b      	ldr	r3, [r3, #8]
3418c5f0:	4a7a      	ldr	r2, [pc, #488]	@ (3418c7dc <HAL_RCC_OscConfig+0x824>)
3418c5f2:	4293      	cmp	r3, r2
3418c5f4:	d110      	bne.n	3418c618 <HAL_RCC_OscConfig+0x660>
3418c5f6:	4b7b      	ldr	r3, [pc, #492]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c5fa:	4a7a      	ldr	r2, [pc, #488]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c5fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418c600:	6413      	str	r3, [r2, #64]	@ 0x40
3418c602:	4b78      	ldr	r3, [pc, #480]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c606:	4a77      	ldr	r2, [pc, #476]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418c60c:	6413      	str	r3, [r2, #64]	@ 0x40
3418c60e:	4b75      	ldr	r3, [pc, #468]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c610:	2202      	movs	r2, #2
3418c612:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418c616:	e011      	b.n	3418c63c <HAL_RCC_OscConfig+0x684>
3418c618:	4b72      	ldr	r3, [pc, #456]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418c61e:	461a      	mov	r2, r3
3418c620:	2302      	movs	r3, #2
3418c622:	6013      	str	r3, [r2, #0]
3418c624:	4b6f      	ldr	r3, [pc, #444]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c628:	4a6e      	ldr	r2, [pc, #440]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c62a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418c62e:	6413      	str	r3, [r2, #64]	@ 0x40
3418c630:	4b6c      	ldr	r3, [pc, #432]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c634:	4a6b      	ldr	r2, [pc, #428]	@ (3418c7e4 <HAL_RCC_OscConfig+0x82c>)
3418c636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418c63a:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3418c63c:	687b      	ldr	r3, [r7, #4]
3418c63e:	689b      	ldr	r3, [r3, #8]
3418c640:	2b00      	cmp	r3, #0
3418c642:	d014      	beq.n	3418c66e <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418c644:	f7f7 ff7c 	bl	34184540 <HAL_GetTick>
3418c648:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
3418c64a:	e00a      	b.n	3418c662 <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418c64c:	f7f7 ff78 	bl	34184540 <HAL_GetTick>
3418c650:	4602      	mov	r2, r0
3418c652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c654:	1ad3      	subs	r3, r2, r3
3418c656:	f241 3288 	movw	r2, #5000	@ 0x1388
3418c65a:	4293      	cmp	r3, r2
3418c65c:	d901      	bls.n	3418c662 <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
3418c65e:	2303      	movs	r3, #3
3418c660:	e1c4      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
3418c662:	f7ff faf5 	bl	3418bc50 <LL_RCC_LSE_IsReady>
3418c666:	4603      	mov	r3, r0
3418c668:	2b00      	cmp	r3, #0
3418c66a:	d0ef      	beq.n	3418c64c <HAL_RCC_OscConfig+0x694>
3418c66c:	e013      	b.n	3418c696 <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418c66e:	f7f7 ff67 	bl	34184540 <HAL_GetTick>
3418c672:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
3418c674:	e00a      	b.n	3418c68c <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418c676:	f7f7 ff63 	bl	34184540 <HAL_GetTick>
3418c67a:	4602      	mov	r2, r0
3418c67c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418c67e:	1ad3      	subs	r3, r2, r3
3418c680:	f241 3288 	movw	r2, #5000	@ 0x1388
3418c684:	4293      	cmp	r3, r2
3418c686:	d901      	bls.n	3418c68c <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
3418c688:	2303      	movs	r3, #3
3418c68a:	e1af      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
3418c68c:	f7ff fae0 	bl	3418bc50 <LL_RCC_LSE_IsReady>
3418c690:	4603      	mov	r3, r0
3418c692:	2b00      	cmp	r3, #0
3418c694:	d1ef      	bne.n	3418c676 <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
3418c696:	687b      	ldr	r3, [r7, #4]
3418c698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c69a:	2b00      	cmp	r3, #0
3418c69c:	d010      	beq.n	3418c6c0 <HAL_RCC_OscConfig+0x708>
3418c69e:	687b      	ldr	r3, [r7, #4]
3418c6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c6a2:	2b01      	cmp	r3, #1
3418c6a4:	d00c      	beq.n	3418c6c0 <HAL_RCC_OscConfig+0x708>
3418c6a6:	687b      	ldr	r3, [r7, #4]
3418c6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c6aa:	2b02      	cmp	r3, #2
3418c6ac:	d008      	beq.n	3418c6c0 <HAL_RCC_OscConfig+0x708>
3418c6ae:	687b      	ldr	r3, [r7, #4]
3418c6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c6b2:	2b03      	cmp	r3, #3
3418c6b4:	d004      	beq.n	3418c6c0 <HAL_RCC_OscConfig+0x708>
3418c6b6:	f240 21a5 	movw	r1, #677	@ 0x2a5
3418c6ba:	4849      	ldr	r0, [pc, #292]	@ (3418c7e0 <HAL_RCC_OscConfig+0x828>)
3418c6bc:	f7f5 fdd6 	bl	3418226c <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3418c6c0:	687b      	ldr	r3, [r7, #4]
3418c6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c6c4:	2b00      	cmp	r3, #0
3418c6c6:	d04c      	beq.n	3418c762 <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
3418c6c8:	687b      	ldr	r3, [r7, #4]
3418c6ca:	3328      	adds	r3, #40	@ 0x28
3418c6cc:	4619      	mov	r1, r3
3418c6ce:	2000      	movs	r0, #0
3418c6d0:	f001 f96c 	bl	3418d9ac <RCC_PLL_IsNewConfig>
3418c6d4:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418c6d6:	f7ff fb3f 	bl	3418bd58 <LL_RCC_PLL1_IsReady>
3418c6da:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
3418c6dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3418c6de:	2b01      	cmp	r3, #1
3418c6e0:	d130      	bne.n	3418c744 <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418c6e2:	f7ff fc11 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418c6e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418c6e8:	f7ff fc2c 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418c6ec:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418c6ee:	f7ff fc47 	bl	3418bf80 <LL_RCC_IC6_GetSource>
3418c6f2:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418c6f4:	f7ff fc52 	bl	3418bf9c <LL_RCC_IC11_GetSource>
3418c6f8:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3418c6fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c6fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418c702:	d104      	bne.n	3418c70e <HAL_RCC_OscConfig+0x756>
3418c704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3418c706:	2b00      	cmp	r3, #0
3418c708:	d101      	bne.n	3418c70e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
3418c70a:	2301      	movs	r3, #1
3418c70c:	e16e      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418c70e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c712:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c716:	d10a      	bne.n	3418c72e <HAL_RCC_OscConfig+0x776>
3418c718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3418c71a:	2b00      	cmp	r3, #0
3418c71c:	d005      	beq.n	3418c72a <HAL_RCC_OscConfig+0x772>
3418c71e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418c720:	2b00      	cmp	r3, #0
3418c722:	d002      	beq.n	3418c72a <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418c724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418c726:	2b00      	cmp	r3, #0
3418c728:	d101      	bne.n	3418c72e <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3418c72a:	2301      	movs	r3, #1
3418c72c:	e15e      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
3418c72e:	687b      	ldr	r3, [r7, #4]
3418c730:	3328      	adds	r3, #40	@ 0x28
3418c732:	4619      	mov	r1, r3
3418c734:	2000      	movs	r0, #0
3418c736:	f000 ff69 	bl	3418d60c <RCC_PLL_Config>
3418c73a:	4603      	mov	r3, r0
3418c73c:	2b00      	cmp	r3, #0
3418c73e:	d010      	beq.n	3418c762 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
3418c740:	2301      	movs	r3, #1
3418c742:	e153      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
3418c744:	687b      	ldr	r3, [r7, #4]
3418c746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c748:	2b02      	cmp	r3, #2
3418c74a:	d10a      	bne.n	3418c762 <HAL_RCC_OscConfig+0x7aa>
3418c74c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418c74e:	2b00      	cmp	r3, #0
3418c750:	d107      	bne.n	3418c762 <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3418c752:	2000      	movs	r0, #0
3418c754:	f001 f8fe 	bl	3418d954 <RCC_PLL_Enable>
3418c758:	4603      	mov	r3, r0
3418c75a:	2b00      	cmp	r3, #0
3418c75c:	d001      	beq.n	3418c762 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
3418c75e:	2301      	movs	r3, #1
3418c760:	e144      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
3418c762:	687b      	ldr	r3, [r7, #4]
3418c764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c766:	2b00      	cmp	r3, #0
3418c768:	d010      	beq.n	3418c78c <HAL_RCC_OscConfig+0x7d4>
3418c76a:	687b      	ldr	r3, [r7, #4]
3418c76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c76e:	2b01      	cmp	r3, #1
3418c770:	d00c      	beq.n	3418c78c <HAL_RCC_OscConfig+0x7d4>
3418c772:	687b      	ldr	r3, [r7, #4]
3418c774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c776:	2b02      	cmp	r3, #2
3418c778:	d008      	beq.n	3418c78c <HAL_RCC_OscConfig+0x7d4>
3418c77a:	687b      	ldr	r3, [r7, #4]
3418c77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c77e:	2b03      	cmp	r3, #3
3418c780:	d004      	beq.n	3418c78c <HAL_RCC_OscConfig+0x7d4>
3418c782:	f240 21d3 	movw	r1, #723	@ 0x2d3
3418c786:	4816      	ldr	r0, [pc, #88]	@ (3418c7e0 <HAL_RCC_OscConfig+0x828>)
3418c788:	f7f5 fd70 	bl	3418226c <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
3418c78c:	687b      	ldr	r3, [r7, #4]
3418c78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c790:	2b00      	cmp	r3, #0
3418c792:	d056      	beq.n	3418c842 <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3418c794:	687b      	ldr	r3, [r7, #4]
3418c796:	3344      	adds	r3, #68	@ 0x44
3418c798:	4619      	mov	r1, r3
3418c79a:	2001      	movs	r0, #1
3418c79c:	f001 f906 	bl	3418d9ac <RCC_PLL_IsNewConfig>
3418c7a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
3418c7a2:	f7ff fb0f 	bl	3418bdc4 <LL_RCC_PLL2_IsReady>
3418c7a6:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
3418c7a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418c7aa:	2b01      	cmp	r3, #1
3418c7ac:	d13a      	bne.n	3418c824 <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418c7ae:	f7ff fbab 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418c7b2:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418c7b4:	f7ff fbc6 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418c7b8:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418c7ba:	f7ff fbe1 	bl	3418bf80 <LL_RCC_IC6_GetSource>
3418c7be:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418c7c0:	f7ff fbec 	bl	3418bf9c <LL_RCC_IC11_GetSource>
3418c7c4:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3418c7c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c7ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418c7ce:	d10b      	bne.n	3418c7e8 <HAL_RCC_OscConfig+0x830>
3418c7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418c7d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c7d6:	d107      	bne.n	3418c7e8 <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
3418c7d8:	2301      	movs	r3, #1
3418c7da:	e107      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
3418c7dc:	00018002 	.word	0x00018002
3418c7e0:	341a5360 	.word	0x341a5360
3418c7e4:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418c7e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c7ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c7f0:	d10d      	bne.n	3418c80e <HAL_RCC_OscConfig+0x856>
3418c7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418c7f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c7f8:	d007      	beq.n	3418c80a <HAL_RCC_OscConfig+0x852>
3418c7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418c7fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c800:	d003      	beq.n	3418c80a <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418c804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c808:	d101      	bne.n	3418c80e <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3418c80a:	2301      	movs	r3, #1
3418c80c:	e0ee      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3418c80e:	687b      	ldr	r3, [r7, #4]
3418c810:	3344      	adds	r3, #68	@ 0x44
3418c812:	4619      	mov	r1, r3
3418c814:	2001      	movs	r0, #1
3418c816:	f000 fef9 	bl	3418d60c <RCC_PLL_Config>
3418c81a:	4603      	mov	r3, r0
3418c81c:	2b00      	cmp	r3, #0
3418c81e:	d010      	beq.n	3418c842 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
3418c820:	2301      	movs	r3, #1
3418c822:	e0e3      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
3418c824:	687b      	ldr	r3, [r7, #4]
3418c826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c828:	2b02      	cmp	r3, #2
3418c82a:	d10a      	bne.n	3418c842 <HAL_RCC_OscConfig+0x88a>
3418c82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418c82e:	2b00      	cmp	r3, #0
3418c830:	d107      	bne.n	3418c842 <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3418c832:	2001      	movs	r0, #1
3418c834:	f001 f88e 	bl	3418d954 <RCC_PLL_Enable>
3418c838:	4603      	mov	r3, r0
3418c83a:	2b00      	cmp	r3, #0
3418c83c:	d001      	beq.n	3418c842 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
3418c83e:	2301      	movs	r3, #1
3418c840:	e0d4      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
3418c842:	687b      	ldr	r3, [r7, #4]
3418c844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c846:	2b00      	cmp	r3, #0
3418c848:	d010      	beq.n	3418c86c <HAL_RCC_OscConfig+0x8b4>
3418c84a:	687b      	ldr	r3, [r7, #4]
3418c84c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c84e:	2b01      	cmp	r3, #1
3418c850:	d00c      	beq.n	3418c86c <HAL_RCC_OscConfig+0x8b4>
3418c852:	687b      	ldr	r3, [r7, #4]
3418c854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c856:	2b02      	cmp	r3, #2
3418c858:	d008      	beq.n	3418c86c <HAL_RCC_OscConfig+0x8b4>
3418c85a:	687b      	ldr	r3, [r7, #4]
3418c85c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c85e:	2b03      	cmp	r3, #3
3418c860:	d004      	beq.n	3418c86c <HAL_RCC_OscConfig+0x8b4>
3418c862:	f240 3101 	movw	r1, #769	@ 0x301
3418c866:	4863      	ldr	r0, [pc, #396]	@ (3418c9f4 <HAL_RCC_OscConfig+0xa3c>)
3418c868:	f7f5 fd00 	bl	3418226c <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3418c86c:	687b      	ldr	r3, [r7, #4]
3418c86e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c870:	2b00      	cmp	r3, #0
3418c872:	d050      	beq.n	3418c916 <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
3418c874:	687b      	ldr	r3, [r7, #4]
3418c876:	3360      	adds	r3, #96	@ 0x60
3418c878:	4619      	mov	r1, r3
3418c87a:	2002      	movs	r0, #2
3418c87c:	f001 f896 	bl	3418d9ac <RCC_PLL_IsNewConfig>
3418c880:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
3418c882:	f7ff fa69 	bl	3418bd58 <LL_RCC_PLL1_IsReady>
3418c886:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
3418c888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418c88a:	2b01      	cmp	r3, #1
3418c88c:	d134      	bne.n	3418c8f8 <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418c88e:	f7ff fb3b 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418c892:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418c894:	f7ff fb56 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418c898:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418c89a:	f7ff fb71 	bl	3418bf80 <LL_RCC_IC6_GetSource>
3418c89e:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418c8a0:	f7ff fb7c 	bl	3418bf9c <LL_RCC_IC11_GetSource>
3418c8a4:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
3418c8a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c8aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418c8ae:	d105      	bne.n	3418c8bc <HAL_RCC_OscConfig+0x904>
3418c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418c8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8b6:	d101      	bne.n	3418c8bc <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
3418c8b8:	2301      	movs	r3, #1
3418c8ba:	e097      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
3418c8bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c8c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c8c4:	d10d      	bne.n	3418c8e2 <HAL_RCC_OscConfig+0x92a>
3418c8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c8c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8cc:	d007      	beq.n	3418c8de <HAL_RCC_OscConfig+0x926>
3418c8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c8d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8d4:	d003      	beq.n	3418c8de <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
3418c8d6:	6a3b      	ldr	r3, [r7, #32]
3418c8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8dc:	d101      	bne.n	3418c8e2 <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
3418c8de:	2301      	movs	r3, #1
3418c8e0:	e084      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
3418c8e2:	687b      	ldr	r3, [r7, #4]
3418c8e4:	3360      	adds	r3, #96	@ 0x60
3418c8e6:	4619      	mov	r1, r3
3418c8e8:	2002      	movs	r0, #2
3418c8ea:	f000 fe8f 	bl	3418d60c <RCC_PLL_Config>
3418c8ee:	4603      	mov	r3, r0
3418c8f0:	2b00      	cmp	r3, #0
3418c8f2:	d010      	beq.n	3418c916 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
3418c8f4:	2301      	movs	r3, #1
3418c8f6:	e079      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
3418c8f8:	687b      	ldr	r3, [r7, #4]
3418c8fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c8fc:	2b02      	cmp	r3, #2
3418c8fe:	d10a      	bne.n	3418c916 <HAL_RCC_OscConfig+0x95e>
3418c900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418c902:	2b00      	cmp	r3, #0
3418c904:	d107      	bne.n	3418c916 <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3418c906:	2002      	movs	r0, #2
3418c908:	f001 f824 	bl	3418d954 <RCC_PLL_Enable>
3418c90c:	4603      	mov	r3, r0
3418c90e:	2b00      	cmp	r3, #0
3418c910:	d001      	beq.n	3418c916 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
3418c912:	2301      	movs	r3, #1
3418c914:	e06a      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
3418c916:	687b      	ldr	r3, [r7, #4]
3418c918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c91a:	2b00      	cmp	r3, #0
3418c91c:	d010      	beq.n	3418c940 <HAL_RCC_OscConfig+0x988>
3418c91e:	687b      	ldr	r3, [r7, #4]
3418c920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c922:	2b01      	cmp	r3, #1
3418c924:	d00c      	beq.n	3418c940 <HAL_RCC_OscConfig+0x988>
3418c926:	687b      	ldr	r3, [r7, #4]
3418c928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c92a:	2b02      	cmp	r3, #2
3418c92c:	d008      	beq.n	3418c940 <HAL_RCC_OscConfig+0x988>
3418c92e:	687b      	ldr	r3, [r7, #4]
3418c930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c932:	2b03      	cmp	r3, #3
3418c934:	d004      	beq.n	3418c940 <HAL_RCC_OscConfig+0x988>
3418c936:	f240 312e 	movw	r1, #814	@ 0x32e
3418c93a:	482e      	ldr	r0, [pc, #184]	@ (3418c9f4 <HAL_RCC_OscConfig+0xa3c>)
3418c93c:	f7f5 fc96 	bl	3418226c <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
3418c940:	687b      	ldr	r3, [r7, #4]
3418c942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c944:	2b00      	cmp	r3, #0
3418c946:	d050      	beq.n	3418c9ea <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3418c948:	687b      	ldr	r3, [r7, #4]
3418c94a:	337c      	adds	r3, #124	@ 0x7c
3418c94c:	4619      	mov	r1, r3
3418c94e:	2003      	movs	r0, #3
3418c950:	f001 f82c 	bl	3418d9ac <RCC_PLL_IsNewConfig>
3418c954:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
3418c956:	f7ff faa1 	bl	3418be9c <LL_RCC_PLL4_IsReady>
3418c95a:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
3418c95c:	69fb      	ldr	r3, [r7, #28]
3418c95e:	2b01      	cmp	r3, #1
3418c960:	d134      	bne.n	3418c9cc <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418c962:	f7ff fad1 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418c966:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418c968:	f7ff faec 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418c96c:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418c96e:	f7ff fb07 	bl	3418bf80 <LL_RCC_IC6_GetSource>
3418c972:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418c974:	f7ff fb12 	bl	3418bf9c <LL_RCC_IC11_GetSource>
3418c978:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3418c97a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418c97e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418c982:	d105      	bne.n	3418c990 <HAL_RCC_OscConfig+0x9d8>
3418c984:	697b      	ldr	r3, [r7, #20]
3418c986:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c98a:	d101      	bne.n	3418c990 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
3418c98c:	2301      	movs	r3, #1
3418c98e:	e02d      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
3418c990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418c994:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c998:	d10d      	bne.n	3418c9b6 <HAL_RCC_OscConfig+0x9fe>
3418c99a:	693b      	ldr	r3, [r7, #16]
3418c99c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9a0:	d007      	beq.n	3418c9b2 <HAL_RCC_OscConfig+0x9fa>
3418c9a2:	68fb      	ldr	r3, [r7, #12]
3418c9a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9a8:	d003      	beq.n	3418c9b2 <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
3418c9aa:	68bb      	ldr	r3, [r7, #8]
3418c9ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9b0:	d101      	bne.n	3418c9b6 <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
3418c9b2:	2301      	movs	r3, #1
3418c9b4:	e01a      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
3418c9b6:	687b      	ldr	r3, [r7, #4]
3418c9b8:	337c      	adds	r3, #124	@ 0x7c
3418c9ba:	4619      	mov	r1, r3
3418c9bc:	2003      	movs	r0, #3
3418c9be:	f000 fe25 	bl	3418d60c <RCC_PLL_Config>
3418c9c2:	4603      	mov	r3, r0
3418c9c4:	2b00      	cmp	r3, #0
3418c9c6:	d010      	beq.n	3418c9ea <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
3418c9c8:	2301      	movs	r3, #1
3418c9ca:	e00f      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
3418c9cc:	687b      	ldr	r3, [r7, #4]
3418c9ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418c9d0:	2b02      	cmp	r3, #2
3418c9d2:	d10a      	bne.n	3418c9ea <HAL_RCC_OscConfig+0xa32>
3418c9d4:	69bb      	ldr	r3, [r7, #24]
3418c9d6:	2b00      	cmp	r3, #0
3418c9d8:	d107      	bne.n	3418c9ea <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3418c9da:	2003      	movs	r0, #3
3418c9dc:	f000 ffba 	bl	3418d954 <RCC_PLL_Enable>
3418c9e0:	4603      	mov	r3, r0
3418c9e2:	2b00      	cmp	r3, #0
3418c9e4:	d001      	beq.n	3418c9ea <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
3418c9e6:	2301      	movs	r3, #1
3418c9e8:	e000      	b.n	3418c9ec <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
3418c9ea:	2300      	movs	r3, #0
}
3418c9ec:	4618      	mov	r0, r3
3418c9ee:	3788      	adds	r7, #136	@ 0x88
3418c9f0:	46bd      	mov	sp, r7
3418c9f2:	bd80      	pop	{r7, pc}
3418c9f4:	341a5360 	.word	0x341a5360

3418c9f8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
3418c9f8:	b580      	push	{r7, lr}
3418c9fa:	b084      	sub	sp, #16
3418c9fc:	af00      	add	r7, sp, #0
3418c9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
3418ca00:	687b      	ldr	r3, [r7, #4]
3418ca02:	2b00      	cmp	r3, #0
3418ca04:	d102      	bne.n	3418ca0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
3418ca06:	2301      	movs	r3, #1
3418ca08:	f000 bc6d 	b.w	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
3418ca0c:	687b      	ldr	r3, [r7, #4]
3418ca0e:	681b      	ldr	r3, [r3, #0]
3418ca10:	2b7f      	cmp	r3, #127	@ 0x7f
3418ca12:	d904      	bls.n	3418ca1e <HAL_RCC_ClockConfig+0x26>
3418ca14:	f240 317e 	movw	r1, #894	@ 0x37e
3418ca18:	4880      	ldr	r0, [pc, #512]	@ (3418cc1c <HAL_RCC_ClockConfig+0x224>)
3418ca1a:	f7f5 fc27 	bl	3418226c <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418ca1e:	687b      	ldr	r3, [r7, #4]
3418ca20:	681b      	ldr	r3, [r3, #0]
3418ca22:	f003 0308 	and.w	r3, r3, #8
3418ca26:	2b00      	cmp	r3, #0
3418ca28:	d035      	beq.n	3418ca96 <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3418ca2a:	687b      	ldr	r3, [r7, #4]
3418ca2c:	691b      	ldr	r3, [r3, #16]
3418ca2e:	2b00      	cmp	r3, #0
3418ca30:	d020      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca32:	687b      	ldr	r3, [r7, #4]
3418ca34:	691b      	ldr	r3, [r3, #16]
3418ca36:	2b01      	cmp	r3, #1
3418ca38:	d01c      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca3a:	687b      	ldr	r3, [r7, #4]
3418ca3c:	691b      	ldr	r3, [r3, #16]
3418ca3e:	2b02      	cmp	r3, #2
3418ca40:	d018      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca42:	687b      	ldr	r3, [r7, #4]
3418ca44:	691b      	ldr	r3, [r3, #16]
3418ca46:	2b03      	cmp	r3, #3
3418ca48:	d014      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca4a:	687b      	ldr	r3, [r7, #4]
3418ca4c:	691b      	ldr	r3, [r3, #16]
3418ca4e:	2b04      	cmp	r3, #4
3418ca50:	d010      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca52:	687b      	ldr	r3, [r7, #4]
3418ca54:	691b      	ldr	r3, [r3, #16]
3418ca56:	2b05      	cmp	r3, #5
3418ca58:	d00c      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca5a:	687b      	ldr	r3, [r7, #4]
3418ca5c:	691b      	ldr	r3, [r3, #16]
3418ca5e:	2b06      	cmp	r3, #6
3418ca60:	d008      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca62:	687b      	ldr	r3, [r7, #4]
3418ca64:	691b      	ldr	r3, [r3, #16]
3418ca66:	2b07      	cmp	r3, #7
3418ca68:	d004      	beq.n	3418ca74 <HAL_RCC_ClockConfig+0x7c>
3418ca6a:	f240 3185 	movw	r1, #901	@ 0x385
3418ca6e:	486b      	ldr	r0, [pc, #428]	@ (3418cc1c <HAL_RCC_ClockConfig+0x224>)
3418ca70:	f7f5 fbfc 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3418ca74:	687b      	ldr	r3, [r7, #4]
3418ca76:	691a      	ldr	r2, [r3, #16]
3418ca78:	4b69      	ldr	r3, [pc, #420]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418ca7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ca7c:	f003 0307 	and.w	r3, r3, #7
3418ca80:	429a      	cmp	r2, r3
3418ca82:	d908      	bls.n	3418ca96 <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3418ca84:	4b66      	ldr	r3, [pc, #408]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418ca86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ca88:	f023 0207 	bic.w	r2, r3, #7
3418ca8c:	687b      	ldr	r3, [r7, #4]
3418ca8e:	691b      	ldr	r3, [r3, #16]
3418ca90:	4963      	ldr	r1, [pc, #396]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418ca92:	4313      	orrs	r3, r2
3418ca94:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3418ca96:	687b      	ldr	r3, [r7, #4]
3418ca98:	681b      	ldr	r3, [r3, #0]
3418ca9a:	f003 0310 	and.w	r3, r3, #16
3418ca9e:	2b00      	cmp	r3, #0
3418caa0:	d035      	beq.n	3418cb0e <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
3418caa2:	687b      	ldr	r3, [r7, #4]
3418caa4:	695b      	ldr	r3, [r3, #20]
3418caa6:	2b00      	cmp	r3, #0
3418caa8:	d020      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418caaa:	687b      	ldr	r3, [r7, #4]
3418caac:	695b      	ldr	r3, [r3, #20]
3418caae:	2b10      	cmp	r3, #16
3418cab0:	d01c      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418cab2:	687b      	ldr	r3, [r7, #4]
3418cab4:	695b      	ldr	r3, [r3, #20]
3418cab6:	2b20      	cmp	r3, #32
3418cab8:	d018      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418caba:	687b      	ldr	r3, [r7, #4]
3418cabc:	695b      	ldr	r3, [r3, #20]
3418cabe:	2b30      	cmp	r3, #48	@ 0x30
3418cac0:	d014      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418cac2:	687b      	ldr	r3, [r7, #4]
3418cac4:	695b      	ldr	r3, [r3, #20]
3418cac6:	2b40      	cmp	r3, #64	@ 0x40
3418cac8:	d010      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418caca:	687b      	ldr	r3, [r7, #4]
3418cacc:	695b      	ldr	r3, [r3, #20]
3418cace:	2b50      	cmp	r3, #80	@ 0x50
3418cad0:	d00c      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418cad2:	687b      	ldr	r3, [r7, #4]
3418cad4:	695b      	ldr	r3, [r3, #20]
3418cad6:	2b60      	cmp	r3, #96	@ 0x60
3418cad8:	d008      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418cada:	687b      	ldr	r3, [r7, #4]
3418cadc:	695b      	ldr	r3, [r3, #20]
3418cade:	2b70      	cmp	r3, #112	@ 0x70
3418cae0:	d004      	beq.n	3418caec <HAL_RCC_ClockConfig+0xf4>
3418cae2:	f240 318f 	movw	r1, #911	@ 0x38f
3418cae6:	484d      	ldr	r0, [pc, #308]	@ (3418cc1c <HAL_RCC_ClockConfig+0x224>)
3418cae8:	f7f5 fbc0 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418caec:	687b      	ldr	r3, [r7, #4]
3418caee:	695a      	ldr	r2, [r3, #20]
3418caf0:	4b4b      	ldr	r3, [pc, #300]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418caf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418caf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3418caf8:	429a      	cmp	r2, r3
3418cafa:	d908      	bls.n	3418cb0e <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418cafc:	4b48      	ldr	r3, [pc, #288]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cb00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418cb04:	687b      	ldr	r3, [r7, #4]
3418cb06:	695b      	ldr	r3, [r3, #20]
3418cb08:	4945      	ldr	r1, [pc, #276]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cb0a:	4313      	orrs	r3, r2
3418cb0c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3418cb0e:	687b      	ldr	r3, [r7, #4]
3418cb10:	681b      	ldr	r3, [r3, #0]
3418cb12:	f003 0320 	and.w	r3, r3, #32
3418cb16:	2b00      	cmp	r3, #0
3418cb18:	d03c      	beq.n	3418cb94 <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3418cb1a:	687b      	ldr	r3, [r7, #4]
3418cb1c:	699b      	ldr	r3, [r3, #24]
3418cb1e:	2b00      	cmp	r3, #0
3418cb20:	d027      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb22:	687b      	ldr	r3, [r7, #4]
3418cb24:	699b      	ldr	r3, [r3, #24]
3418cb26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418cb2a:	d022      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb2c:	687b      	ldr	r3, [r7, #4]
3418cb2e:	699b      	ldr	r3, [r3, #24]
3418cb30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418cb34:	d01d      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb36:	687b      	ldr	r3, [r7, #4]
3418cb38:	699b      	ldr	r3, [r3, #24]
3418cb3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418cb3e:	d018      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb40:	687b      	ldr	r3, [r7, #4]
3418cb42:	699b      	ldr	r3, [r3, #24]
3418cb44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418cb48:	d013      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb4a:	687b      	ldr	r3, [r7, #4]
3418cb4c:	699b      	ldr	r3, [r3, #24]
3418cb4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
3418cb52:	d00e      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb54:	687b      	ldr	r3, [r7, #4]
3418cb56:	699b      	ldr	r3, [r3, #24]
3418cb58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
3418cb5c:	d009      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb5e:	687b      	ldr	r3, [r7, #4]
3418cb60:	699b      	ldr	r3, [r3, #24]
3418cb62:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
3418cb66:	d004      	beq.n	3418cb72 <HAL_RCC_ClockConfig+0x17a>
3418cb68:	f240 3199 	movw	r1, #921	@ 0x399
3418cb6c:	482b      	ldr	r0, [pc, #172]	@ (3418cc1c <HAL_RCC_ClockConfig+0x224>)
3418cb6e:	f7f5 fb7d 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418cb72:	687b      	ldr	r3, [r7, #4]
3418cb74:	699a      	ldr	r2, [r3, #24]
3418cb76:	4b2a      	ldr	r3, [pc, #168]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cb7a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418cb7e:	429a      	cmp	r2, r3
3418cb80:	d908      	bls.n	3418cb94 <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418cb82:	4b27      	ldr	r3, [pc, #156]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cb86:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3418cb8a:	687b      	ldr	r3, [r7, #4]
3418cb8c:	699b      	ldr	r3, [r3, #24]
3418cb8e:	4924      	ldr	r1, [pc, #144]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cb90:	4313      	orrs	r3, r2
3418cb92:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418cb94:	687b      	ldr	r3, [r7, #4]
3418cb96:	681b      	ldr	r3, [r3, #0]
3418cb98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418cb9c:	2b00      	cmp	r3, #0
3418cb9e:	d041      	beq.n	3418cc24 <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
3418cba0:	687b      	ldr	r3, [r7, #4]
3418cba2:	69db      	ldr	r3, [r3, #28]
3418cba4:	2b00      	cmp	r3, #0
3418cba6:	d027      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cba8:	687b      	ldr	r3, [r7, #4]
3418cbaa:	69db      	ldr	r3, [r3, #28]
3418cbac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418cbb0:	d022      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbb2:	687b      	ldr	r3, [r7, #4]
3418cbb4:	69db      	ldr	r3, [r3, #28]
3418cbb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418cbba:	d01d      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbbc:	687b      	ldr	r3, [r7, #4]
3418cbbe:	69db      	ldr	r3, [r3, #28]
3418cbc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418cbc4:	d018      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbc6:	687b      	ldr	r3, [r7, #4]
3418cbc8:	69db      	ldr	r3, [r3, #28]
3418cbca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418cbce:	d013      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbd0:	687b      	ldr	r3, [r7, #4]
3418cbd2:	69db      	ldr	r3, [r3, #28]
3418cbd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418cbd8:	d00e      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbda:	687b      	ldr	r3, [r7, #4]
3418cbdc:	69db      	ldr	r3, [r3, #28]
3418cbde:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418cbe2:	d009      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbe4:	687b      	ldr	r3, [r7, #4]
3418cbe6:	69db      	ldr	r3, [r3, #28]
3418cbe8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418cbec:	d004      	beq.n	3418cbf8 <HAL_RCC_ClockConfig+0x200>
3418cbee:	f240 31a3 	movw	r1, #931	@ 0x3a3
3418cbf2:	480a      	ldr	r0, [pc, #40]	@ (3418cc1c <HAL_RCC_ClockConfig+0x224>)
3418cbf4:	f7f5 fb3a 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418cbf8:	687b      	ldr	r3, [r7, #4]
3418cbfa:	69da      	ldr	r2, [r3, #28]
3418cbfc:	4b08      	ldr	r3, [pc, #32]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cc00:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3418cc04:	429a      	cmp	r2, r3
3418cc06:	d90d      	bls.n	3418cc24 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418cc08:	4b05      	ldr	r3, [pc, #20]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cc0c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418cc10:	687b      	ldr	r3, [r7, #4]
3418cc12:	69db      	ldr	r3, [r3, #28]
3418cc14:	4902      	ldr	r1, [pc, #8]	@ (3418cc20 <HAL_RCC_ClockConfig+0x228>)
3418cc16:	4313      	orrs	r3, r2
3418cc18:	624b      	str	r3, [r1, #36]	@ 0x24
3418cc1a:	e003      	b.n	3418cc24 <HAL_RCC_ClockConfig+0x22c>
3418cc1c:	341a5360 	.word	0x341a5360
3418cc20:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3418cc24:	687b      	ldr	r3, [r7, #4]
3418cc26:	681b      	ldr	r3, [r3, #0]
3418cc28:	f003 0304 	and.w	r3, r3, #4
3418cc2c:	2b00      	cmp	r3, #0
3418cc2e:	d03c      	beq.n	3418ccaa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3418cc30:	687b      	ldr	r3, [r7, #4]
3418cc32:	68db      	ldr	r3, [r3, #12]
3418cc34:	2b00      	cmp	r3, #0
3418cc36:	d027      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc38:	687b      	ldr	r3, [r7, #4]
3418cc3a:	68db      	ldr	r3, [r3, #12]
3418cc3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418cc40:	d022      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc42:	687b      	ldr	r3, [r7, #4]
3418cc44:	68db      	ldr	r3, [r3, #12]
3418cc46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418cc4a:	d01d      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc4c:	687b      	ldr	r3, [r7, #4]
3418cc4e:	68db      	ldr	r3, [r3, #12]
3418cc50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418cc54:	d018      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc56:	687b      	ldr	r3, [r7, #4]
3418cc58:	68db      	ldr	r3, [r3, #12]
3418cc5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418cc5e:	d013      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc60:	687b      	ldr	r3, [r7, #4]
3418cc62:	68db      	ldr	r3, [r3, #12]
3418cc64:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
3418cc68:	d00e      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc6a:	687b      	ldr	r3, [r7, #4]
3418cc6c:	68db      	ldr	r3, [r3, #12]
3418cc6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
3418cc72:	d009      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc74:	687b      	ldr	r3, [r7, #4]
3418cc76:	68db      	ldr	r3, [r3, #12]
3418cc78:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
3418cc7c:	d004      	beq.n	3418cc88 <HAL_RCC_ClockConfig+0x290>
3418cc7e:	f240 31ad 	movw	r1, #941	@ 0x3ad
3418cc82:	4874      	ldr	r0, [pc, #464]	@ (3418ce54 <HAL_RCC_ClockConfig+0x45c>)
3418cc84:	f7f5 faf2 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418cc88:	687b      	ldr	r3, [r7, #4]
3418cc8a:	68da      	ldr	r2, [r3, #12]
3418cc8c:	4b72      	ldr	r3, [pc, #456]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cc90:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418cc94:	429a      	cmp	r2, r3
3418cc96:	d908      	bls.n	3418ccaa <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418cc98:	4b6f      	ldr	r3, [pc, #444]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cc9c:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418cca0:	687b      	ldr	r3, [r7, #4]
3418cca2:	68db      	ldr	r3, [r3, #12]
3418cca4:	496c      	ldr	r1, [pc, #432]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cca6:	4313      	orrs	r3, r2
3418cca8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
3418ccaa:	687b      	ldr	r3, [r7, #4]
3418ccac:	681b      	ldr	r3, [r3, #0]
3418ccae:	f003 0301 	and.w	r3, r3, #1
3418ccb2:	2b00      	cmp	r3, #0
3418ccb4:	f000 80a2 	beq.w	3418cdfc <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
3418ccb8:	687b      	ldr	r3, [r7, #4]
3418ccba:	685b      	ldr	r3, [r3, #4]
3418ccbc:	2b00      	cmp	r3, #0
3418ccbe:	d013      	beq.n	3418cce8 <HAL_RCC_ClockConfig+0x2f0>
3418ccc0:	687b      	ldr	r3, [r7, #4]
3418ccc2:	685b      	ldr	r3, [r3, #4]
3418ccc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418ccc8:	d00e      	beq.n	3418cce8 <HAL_RCC_ClockConfig+0x2f0>
3418ccca:	687b      	ldr	r3, [r7, #4]
3418cccc:	685b      	ldr	r3, [r3, #4]
3418ccce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418ccd2:	d009      	beq.n	3418cce8 <HAL_RCC_ClockConfig+0x2f0>
3418ccd4:	687b      	ldr	r3, [r7, #4]
3418ccd6:	685b      	ldr	r3, [r3, #4]
3418ccd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418ccdc:	d004      	beq.n	3418cce8 <HAL_RCC_ClockConfig+0x2f0>
3418ccde:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
3418cce2:	485c      	ldr	r0, [pc, #368]	@ (3418ce54 <HAL_RCC_ClockConfig+0x45c>)
3418cce4:	f7f5 fac2 	bl	3418226c <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
3418cce8:	687b      	ldr	r3, [r7, #4]
3418ccea:	685b      	ldr	r3, [r3, #4]
3418ccec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418ccf0:	d106      	bne.n	3418cd00 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418ccf2:	f7fe fecb 	bl	3418ba8c <LL_RCC_HSE_IsReady>
3418ccf6:	4603      	mov	r3, r0
3418ccf8:	2b00      	cmp	r3, #0
3418ccfa:	d15a      	bne.n	3418cdb2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
3418ccfc:	2301      	movs	r3, #1
3418ccfe:	e2f2      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
3418cd00:	687b      	ldr	r3, [r7, #4]
3418cd02:	685b      	ldr	r3, [r3, #4]
3418cd04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418cd08:	d140      	bne.n	3418cd8c <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
3418cd0a:	687b      	ldr	r3, [r7, #4]
3418cd0c:	6a1b      	ldr	r3, [r3, #32]
3418cd0e:	2b00      	cmp	r3, #0
3418cd10:	d013      	beq.n	3418cd3a <HAL_RCC_ClockConfig+0x342>
3418cd12:	687b      	ldr	r3, [r7, #4]
3418cd14:	6a1b      	ldr	r3, [r3, #32]
3418cd16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cd1a:	d00e      	beq.n	3418cd3a <HAL_RCC_ClockConfig+0x342>
3418cd1c:	687b      	ldr	r3, [r7, #4]
3418cd1e:	6a1b      	ldr	r3, [r3, #32]
3418cd20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cd24:	d009      	beq.n	3418cd3a <HAL_RCC_ClockConfig+0x342>
3418cd26:	687b      	ldr	r3, [r7, #4]
3418cd28:	6a1b      	ldr	r3, [r3, #32]
3418cd2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cd2e:	d004      	beq.n	3418cd3a <HAL_RCC_ClockConfig+0x342>
3418cd30:	f240 31c7 	movw	r1, #967	@ 0x3c7
3418cd34:	4847      	ldr	r0, [pc, #284]	@ (3418ce54 <HAL_RCC_ClockConfig+0x45c>)
3418cd36:	f7f5 fa99 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
3418cd3a:	687b      	ldr	r3, [r7, #4]
3418cd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cd3e:	2b00      	cmp	r3, #0
3418cd40:	d004      	beq.n	3418cd4c <HAL_RCC_ClockConfig+0x354>
3418cd42:	687b      	ldr	r3, [r7, #4]
3418cd44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418cd4a:	d904      	bls.n	3418cd56 <HAL_RCC_ClockConfig+0x35e>
3418cd4c:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
3418cd50:	4840      	ldr	r0, [pc, #256]	@ (3418ce54 <HAL_RCC_ClockConfig+0x45c>)
3418cd52:	f7f5 fa8b 	bl	3418226c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
3418cd56:	f7ff f8d7 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418cd5a:	4602      	mov	r2, r0
3418cd5c:	687b      	ldr	r3, [r7, #4]
3418cd5e:	6a1b      	ldr	r3, [r3, #32]
3418cd60:	4619      	mov	r1, r3
3418cd62:	4610      	mov	r0, r2
3418cd64:	f000 fed6 	bl	3418db14 <RCC_IC_CheckPLLSources>
3418cd68:	4603      	mov	r3, r0
3418cd6a:	2b01      	cmp	r3, #1
3418cd6c:	d001      	beq.n	3418cd72 <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
3418cd6e:	2301      	movs	r3, #1
3418cd70:	e2b9      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
3418cd72:	687b      	ldr	r3, [r7, #4]
3418cd74:	6a1a      	ldr	r2, [r3, #32]
3418cd76:	687b      	ldr	r3, [r7, #4]
3418cd78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418cd7a:	3b01      	subs	r3, #1
3418cd7c:	041b      	lsls	r3, r3, #16
3418cd7e:	4936      	ldr	r1, [pc, #216]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cd80:	4313      	orrs	r3, r2
3418cd82:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
3418cd86:	f7ff f8b1 	bl	3418beec <LL_RCC_IC1_Enable>
3418cd8a:	e012      	b.n	3418cdb2 <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
3418cd8c:	687b      	ldr	r3, [r7, #4]
3418cd8e:	685b      	ldr	r3, [r3, #4]
3418cd90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418cd94:	d106      	bne.n	3418cda4 <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418cd96:	f7fe ff11 	bl	3418bbbc <LL_RCC_MSI_IsReady>
3418cd9a:	4603      	mov	r3, r0
3418cd9c:	2b00      	cmp	r3, #0
3418cd9e:	d108      	bne.n	3418cdb2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
3418cda0:	2301      	movs	r3, #1
3418cda2:	e2a0      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418cda4:	f7fe fea2 	bl	3418baec <LL_RCC_HSI_IsReady>
3418cda8:	4603      	mov	r3, r0
3418cdaa:	2b00      	cmp	r3, #0
3418cdac:	d101      	bne.n	3418cdb2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
3418cdae:	2301      	movs	r3, #1
3418cdb0:	e299      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3418cdb2:	4b29      	ldr	r3, [pc, #164]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cdb4:	6a1b      	ldr	r3, [r3, #32]
3418cdb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
3418cdba:	687b      	ldr	r3, [r7, #4]
3418cdbc:	685b      	ldr	r3, [r3, #4]
3418cdbe:	4926      	ldr	r1, [pc, #152]	@ (3418ce58 <HAL_RCC_ClockConfig+0x460>)
3418cdc0:	4313      	orrs	r3, r2
3418cdc2:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418cdc4:	f7f7 fbbc 	bl	34184540 <HAL_GetTick>
3418cdc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3418cdca:	e00a      	b.n	3418cde2 <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3418cdcc:	f7f7 fbb8 	bl	34184540 <HAL_GetTick>
3418cdd0:	4602      	mov	r2, r0
3418cdd2:	68fb      	ldr	r3, [r7, #12]
3418cdd4:	1ad3      	subs	r3, r2, r3
3418cdd6:	f241 3288 	movw	r2, #5000	@ 0x1388
3418cdda:	4293      	cmp	r3, r2
3418cddc:	d901      	bls.n	3418cde2 <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
3418cdde:	2303      	movs	r3, #3
3418cde0:	e281      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3418cde2:	f7fe ff73 	bl	3418bccc <LL_RCC_GetCpuClkSource>
3418cde6:	4602      	mov	r2, r0
3418cde8:	687b      	ldr	r3, [r7, #4]
3418cdea:	685b      	ldr	r3, [r3, #4]
3418cdec:	011b      	lsls	r3, r3, #4
3418cdee:	429a      	cmp	r2, r3
3418cdf0:	d1ec      	bne.n	3418cdcc <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
3418cdf2:	f000 fa83 	bl	3418d2fc <HAL_RCC_GetCpuClockFreq>
3418cdf6:	4603      	mov	r3, r0
3418cdf8:	4a18      	ldr	r2, [pc, #96]	@ (3418ce5c <HAL_RCC_ClockConfig+0x464>)
3418cdfa:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
3418cdfc:	687b      	ldr	r3, [r7, #4]
3418cdfe:	681b      	ldr	r3, [r3, #0]
3418ce00:	f003 0302 	and.w	r3, r3, #2
3418ce04:	2b00      	cmp	r3, #0
3418ce06:	f000 8127 	beq.w	3418d058 <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
3418ce0a:	687b      	ldr	r3, [r7, #4]
3418ce0c:	689b      	ldr	r3, [r3, #8]
3418ce0e:	2b00      	cmp	r3, #0
3418ce10:	d013      	beq.n	3418ce3a <HAL_RCC_ClockConfig+0x442>
3418ce12:	687b      	ldr	r3, [r7, #4]
3418ce14:	689b      	ldr	r3, [r3, #8]
3418ce16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418ce1a:	d00e      	beq.n	3418ce3a <HAL_RCC_ClockConfig+0x442>
3418ce1c:	687b      	ldr	r3, [r7, #4]
3418ce1e:	689b      	ldr	r3, [r3, #8]
3418ce20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418ce24:	d009      	beq.n	3418ce3a <HAL_RCC_ClockConfig+0x442>
3418ce26:	687b      	ldr	r3, [r7, #4]
3418ce28:	689b      	ldr	r3, [r3, #8]
3418ce2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418ce2e:	d004      	beq.n	3418ce3a <HAL_RCC_ClockConfig+0x442>
3418ce30:	f240 4101 	movw	r1, #1025	@ 0x401
3418ce34:	4807      	ldr	r0, [pc, #28]	@ (3418ce54 <HAL_RCC_ClockConfig+0x45c>)
3418ce36:	f7f5 fa19 	bl	3418226c <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3418ce3a:	687b      	ldr	r3, [r7, #4]
3418ce3c:	689b      	ldr	r3, [r3, #8]
3418ce3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418ce42:	d10d      	bne.n	3418ce60 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3418ce44:	f7fe fe22 	bl	3418ba8c <LL_RCC_HSE_IsReady>
3418ce48:	4603      	mov	r3, r0
3418ce4a:	2b00      	cmp	r3, #0
3418ce4c:	f040 80e0 	bne.w	3418d010 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
3418ce50:	2301      	movs	r3, #1
3418ce52:	e248      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
3418ce54:	341a5360 	.word	0x341a5360
3418ce58:	56028000 	.word	0x56028000
3418ce5c:	341c0064 	.word	0x341c0064
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
3418ce60:	687b      	ldr	r3, [r7, #4]
3418ce62:	689b      	ldr	r3, [r3, #8]
3418ce64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418ce68:	f040 80c0 	bne.w	3418cfec <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
3418ce6c:	687b      	ldr	r3, [r7, #4]
3418ce6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ce70:	2b00      	cmp	r3, #0
3418ce72:	d013      	beq.n	3418ce9c <HAL_RCC_ClockConfig+0x4a4>
3418ce74:	687b      	ldr	r3, [r7, #4]
3418ce76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ce78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ce7c:	d00e      	beq.n	3418ce9c <HAL_RCC_ClockConfig+0x4a4>
3418ce7e:	687b      	ldr	r3, [r7, #4]
3418ce80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ce82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ce86:	d009      	beq.n	3418ce9c <HAL_RCC_ClockConfig+0x4a4>
3418ce88:	687b      	ldr	r3, [r7, #4]
3418ce8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ce8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ce90:	d004      	beq.n	3418ce9c <HAL_RCC_ClockConfig+0x4a4>
3418ce92:	f44f 6182 	mov.w	r1, #1040	@ 0x410
3418ce96:	486a      	ldr	r0, [pc, #424]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418ce98:	f7f5 f9e8 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
3418ce9c:	687b      	ldr	r3, [r7, #4]
3418ce9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418cea0:	2b00      	cmp	r3, #0
3418cea2:	d004      	beq.n	3418ceae <HAL_RCC_ClockConfig+0x4b6>
3418cea4:	687b      	ldr	r3, [r7, #4]
3418cea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418cea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418ceac:	d904      	bls.n	3418ceb8 <HAL_RCC_ClockConfig+0x4c0>
3418ceae:	f240 4111 	movw	r1, #1041	@ 0x411
3418ceb2:	4863      	ldr	r0, [pc, #396]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418ceb4:	f7f5 f9da 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
3418ceb8:	687b      	ldr	r3, [r7, #4]
3418ceba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418cebc:	2b00      	cmp	r3, #0
3418cebe:	d013      	beq.n	3418cee8 <HAL_RCC_ClockConfig+0x4f0>
3418cec0:	687b      	ldr	r3, [r7, #4]
3418cec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418cec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cec8:	d00e      	beq.n	3418cee8 <HAL_RCC_ClockConfig+0x4f0>
3418ceca:	687b      	ldr	r3, [r7, #4]
3418cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418cece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ced2:	d009      	beq.n	3418cee8 <HAL_RCC_ClockConfig+0x4f0>
3418ced4:	687b      	ldr	r3, [r7, #4]
3418ced6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418ced8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cedc:	d004      	beq.n	3418cee8 <HAL_RCC_ClockConfig+0x4f0>
3418cede:	f240 4112 	movw	r1, #1042	@ 0x412
3418cee2:	4857      	ldr	r0, [pc, #348]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418cee4:	f7f5 f9c2 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
3418cee8:	687b      	ldr	r3, [r7, #4]
3418ceea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418ceec:	2b00      	cmp	r3, #0
3418ceee:	d004      	beq.n	3418cefa <HAL_RCC_ClockConfig+0x502>
3418cef0:	687b      	ldr	r3, [r7, #4]
3418cef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418cef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418cef8:	d904      	bls.n	3418cf04 <HAL_RCC_ClockConfig+0x50c>
3418cefa:	f240 4113 	movw	r1, #1043	@ 0x413
3418cefe:	4850      	ldr	r0, [pc, #320]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418cf00:	f7f5 f9b4 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
3418cf04:	687b      	ldr	r3, [r7, #4]
3418cf06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418cf08:	2b00      	cmp	r3, #0
3418cf0a:	d013      	beq.n	3418cf34 <HAL_RCC_ClockConfig+0x53c>
3418cf0c:	687b      	ldr	r3, [r7, #4]
3418cf0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418cf10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cf14:	d00e      	beq.n	3418cf34 <HAL_RCC_ClockConfig+0x53c>
3418cf16:	687b      	ldr	r3, [r7, #4]
3418cf18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418cf1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cf1e:	d009      	beq.n	3418cf34 <HAL_RCC_ClockConfig+0x53c>
3418cf20:	687b      	ldr	r3, [r7, #4]
3418cf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418cf24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cf28:	d004      	beq.n	3418cf34 <HAL_RCC_ClockConfig+0x53c>
3418cf2a:	f240 4114 	movw	r1, #1044	@ 0x414
3418cf2e:	4844      	ldr	r0, [pc, #272]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418cf30:	f7f5 f99c 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
3418cf34:	687b      	ldr	r3, [r7, #4]
3418cf36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418cf38:	2b00      	cmp	r3, #0
3418cf3a:	d004      	beq.n	3418cf46 <HAL_RCC_ClockConfig+0x54e>
3418cf3c:	687b      	ldr	r3, [r7, #4]
3418cf3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418cf40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418cf44:	d904      	bls.n	3418cf50 <HAL_RCC_ClockConfig+0x558>
3418cf46:	f240 4115 	movw	r1, #1045	@ 0x415
3418cf4a:	483d      	ldr	r0, [pc, #244]	@ (3418d040 <HAL_RCC_ClockConfig+0x648>)
3418cf4c:	f7f5 f98e 	bl	3418226c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
3418cf50:	f7fe fff8 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418cf54:	4602      	mov	r2, r0
3418cf56:	687b      	ldr	r3, [r7, #4]
3418cf58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418cf5a:	4619      	mov	r1, r3
3418cf5c:	4610      	mov	r0, r2
3418cf5e:	f000 fdd9 	bl	3418db14 <RCC_IC_CheckPLLSources>
3418cf62:	4603      	mov	r3, r0
3418cf64:	2b01      	cmp	r3, #1
3418cf66:	d001      	beq.n	3418cf6c <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
3418cf68:	2301      	movs	r3, #1
3418cf6a:	e1bc      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
3418cf6c:	f7ff f808 	bl	3418bf80 <LL_RCC_IC6_GetSource>
3418cf70:	4602      	mov	r2, r0
3418cf72:	687b      	ldr	r3, [r7, #4]
3418cf74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418cf76:	4619      	mov	r1, r3
3418cf78:	4610      	mov	r0, r2
3418cf7a:	f000 fdcb 	bl	3418db14 <RCC_IC_CheckPLLSources>
3418cf7e:	4603      	mov	r3, r0
3418cf80:	2b01      	cmp	r3, #1
3418cf82:	d001      	beq.n	3418cf88 <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
3418cf84:	2301      	movs	r3, #1
3418cf86:	e1ae      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
3418cf88:	f7ff f808 	bl	3418bf9c <LL_RCC_IC11_GetSource>
3418cf8c:	4602      	mov	r2, r0
3418cf8e:	687b      	ldr	r3, [r7, #4]
3418cf90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418cf92:	4619      	mov	r1, r3
3418cf94:	4610      	mov	r0, r2
3418cf96:	f000 fdbd 	bl	3418db14 <RCC_IC_CheckPLLSources>
3418cf9a:	4603      	mov	r3, r0
3418cf9c:	2b01      	cmp	r3, #1
3418cf9e:	d001      	beq.n	3418cfa4 <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
3418cfa0:	2301      	movs	r3, #1
3418cfa2:	e1a0      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
3418cfa4:	687b      	ldr	r3, [r7, #4]
3418cfa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418cfa8:	687b      	ldr	r3, [r7, #4]
3418cfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418cfac:	3b01      	subs	r3, #1
3418cfae:	041b      	lsls	r3, r3, #16
3418cfb0:	4924      	ldr	r1, [pc, #144]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418cfb2:	4313      	orrs	r3, r2
3418cfb4:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
3418cfb8:	687b      	ldr	r3, [r7, #4]
3418cfba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418cfbc:	687b      	ldr	r3, [r7, #4]
3418cfbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418cfc0:	3b01      	subs	r3, #1
3418cfc2:	041b      	lsls	r3, r3, #16
3418cfc4:	491f      	ldr	r1, [pc, #124]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418cfc6:	4313      	orrs	r3, r2
3418cfc8:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
3418cfcc:	687b      	ldr	r3, [r7, #4]
3418cfce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418cfd0:	687b      	ldr	r3, [r7, #4]
3418cfd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418cfd4:	3b01      	subs	r3, #1
3418cfd6:	041b      	lsls	r3, r3, #16
3418cfd8:	491a      	ldr	r1, [pc, #104]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418cfda:	4313      	orrs	r3, r2
3418cfdc:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
3418cfe0:	4b18      	ldr	r3, [pc, #96]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418cfe2:	f240 4222 	movw	r2, #1058	@ 0x422
3418cfe6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
3418cfea:	e011      	b.n	3418d010 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
3418cfec:	687b      	ldr	r3, [r7, #4]
3418cfee:	689b      	ldr	r3, [r3, #8]
3418cff0:	2b00      	cmp	r3, #0
3418cff2:	d106      	bne.n	3418d002 <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418cff4:	f7fe fd7a 	bl	3418baec <LL_RCC_HSI_IsReady>
3418cff8:	4603      	mov	r3, r0
3418cffa:	2b00      	cmp	r3, #0
3418cffc:	d108      	bne.n	3418d010 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
3418cffe:	2301      	movs	r3, #1
3418d000:	e171      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418d002:	f7fe fddb 	bl	3418bbbc <LL_RCC_MSI_IsReady>
3418d006:	4603      	mov	r3, r0
3418d008:	2b00      	cmp	r3, #0
3418d00a:	d101      	bne.n	3418d010 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
3418d00c:	2301      	movs	r3, #1
3418d00e:	e16a      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
3418d010:	4b0c      	ldr	r3, [pc, #48]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418d012:	6a1b      	ldr	r3, [r3, #32]
3418d014:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418d018:	687b      	ldr	r3, [r7, #4]
3418d01a:	689b      	ldr	r3, [r3, #8]
3418d01c:	4909      	ldr	r1, [pc, #36]	@ (3418d044 <HAL_RCC_ClockConfig+0x64c>)
3418d01e:	4313      	orrs	r3, r2
3418d020:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418d022:	f7f7 fa8d 	bl	34184540 <HAL_GetTick>
3418d026:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418d028:	e00e      	b.n	3418d048 <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3418d02a:	f7f7 fa89 	bl	34184540 <HAL_GetTick>
3418d02e:	4602      	mov	r2, r0
3418d030:	68fb      	ldr	r3, [r7, #12]
3418d032:	1ad3      	subs	r3, r2, r3
3418d034:	f241 3288 	movw	r2, #5000	@ 0x1388
3418d038:	4293      	cmp	r3, r2
3418d03a:	d905      	bls.n	3418d048 <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
3418d03c:	2303      	movs	r3, #3
3418d03e:	e152      	b.n	3418d2e6 <HAL_RCC_ClockConfig+0x8ee>
3418d040:	341a5360 	.word	0x341a5360
3418d044:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418d048:	f7fe fe4e 	bl	3418bce8 <LL_RCC_GetSysClkSource>
3418d04c:	4602      	mov	r2, r0
3418d04e:	687b      	ldr	r3, [r7, #4]
3418d050:	689b      	ldr	r3, [r3, #8]
3418d052:	011b      	lsls	r3, r3, #4
3418d054:	429a      	cmp	r2, r3
3418d056:	d1e8      	bne.n	3418d02a <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3418d058:	687b      	ldr	r3, [r7, #4]
3418d05a:	681b      	ldr	r3, [r3, #0]
3418d05c:	f003 0304 	and.w	r3, r3, #4
3418d060:	2b00      	cmp	r3, #0
3418d062:	d03c      	beq.n	3418d0de <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3418d064:	687b      	ldr	r3, [r7, #4]
3418d066:	68db      	ldr	r3, [r3, #12]
3418d068:	2b00      	cmp	r3, #0
3418d06a:	d027      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d06c:	687b      	ldr	r3, [r7, #4]
3418d06e:	68db      	ldr	r3, [r3, #12]
3418d070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418d074:	d022      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d076:	687b      	ldr	r3, [r7, #4]
3418d078:	68db      	ldr	r3, [r3, #12]
3418d07a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418d07e:	d01d      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d080:	687b      	ldr	r3, [r7, #4]
3418d082:	68db      	ldr	r3, [r3, #12]
3418d084:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418d088:	d018      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d08a:	687b      	ldr	r3, [r7, #4]
3418d08c:	68db      	ldr	r3, [r3, #12]
3418d08e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418d092:	d013      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d094:	687b      	ldr	r3, [r7, #4]
3418d096:	68db      	ldr	r3, [r3, #12]
3418d098:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
3418d09c:	d00e      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d09e:	687b      	ldr	r3, [r7, #4]
3418d0a0:	68db      	ldr	r3, [r3, #12]
3418d0a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
3418d0a6:	d009      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d0a8:	687b      	ldr	r3, [r7, #4]
3418d0aa:	68db      	ldr	r3, [r3, #12]
3418d0ac:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
3418d0b0:	d004      	beq.n	3418d0bc <HAL_RCC_ClockConfig+0x6c4>
3418d0b2:	f44f 618b 	mov.w	r1, #1112	@ 0x458
3418d0b6:	488e      	ldr	r0, [pc, #568]	@ (3418d2f0 <HAL_RCC_ClockConfig+0x8f8>)
3418d0b8:	f7f5 f8d8 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418d0bc:	687b      	ldr	r3, [r7, #4]
3418d0be:	68da      	ldr	r2, [r3, #12]
3418d0c0:	4b8c      	ldr	r3, [pc, #560]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d0c4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418d0c8:	429a      	cmp	r2, r3
3418d0ca:	d208      	bcs.n	3418d0de <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418d0cc:	4b89      	ldr	r3, [pc, #548]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d0d0:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
3418d0d4:	687b      	ldr	r3, [r7, #4]
3418d0d6:	68db      	ldr	r3, [r3, #12]
3418d0d8:	4986      	ldr	r1, [pc, #536]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d0da:	4313      	orrs	r3, r2
3418d0dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418d0de:	687b      	ldr	r3, [r7, #4]
3418d0e0:	681b      	ldr	r3, [r3, #0]
3418d0e2:	f003 0308 	and.w	r3, r3, #8
3418d0e6:	2b00      	cmp	r3, #0
3418d0e8:	d035      	beq.n	3418d156 <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3418d0ea:	687b      	ldr	r3, [r7, #4]
3418d0ec:	691b      	ldr	r3, [r3, #16]
3418d0ee:	2b00      	cmp	r3, #0
3418d0f0:	d020      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d0f2:	687b      	ldr	r3, [r7, #4]
3418d0f4:	691b      	ldr	r3, [r3, #16]
3418d0f6:	2b01      	cmp	r3, #1
3418d0f8:	d01c      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d0fa:	687b      	ldr	r3, [r7, #4]
3418d0fc:	691b      	ldr	r3, [r3, #16]
3418d0fe:	2b02      	cmp	r3, #2
3418d100:	d018      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d102:	687b      	ldr	r3, [r7, #4]
3418d104:	691b      	ldr	r3, [r3, #16]
3418d106:	2b03      	cmp	r3, #3
3418d108:	d014      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d10a:	687b      	ldr	r3, [r7, #4]
3418d10c:	691b      	ldr	r3, [r3, #16]
3418d10e:	2b04      	cmp	r3, #4
3418d110:	d010      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d112:	687b      	ldr	r3, [r7, #4]
3418d114:	691b      	ldr	r3, [r3, #16]
3418d116:	2b05      	cmp	r3, #5
3418d118:	d00c      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d11a:	687b      	ldr	r3, [r7, #4]
3418d11c:	691b      	ldr	r3, [r3, #16]
3418d11e:	2b06      	cmp	r3, #6
3418d120:	d008      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d122:	687b      	ldr	r3, [r7, #4]
3418d124:	691b      	ldr	r3, [r3, #16]
3418d126:	2b07      	cmp	r3, #7
3418d128:	d004      	beq.n	3418d134 <HAL_RCC_ClockConfig+0x73c>
3418d12a:	f240 4163 	movw	r1, #1123	@ 0x463
3418d12e:	4870      	ldr	r0, [pc, #448]	@ (3418d2f0 <HAL_RCC_ClockConfig+0x8f8>)
3418d130:	f7f5 f89c 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3418d134:	687b      	ldr	r3, [r7, #4]
3418d136:	691a      	ldr	r2, [r3, #16]
3418d138:	4b6e      	ldr	r3, [pc, #440]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d13c:	f003 0307 	and.w	r3, r3, #7
3418d140:	429a      	cmp	r2, r3
3418d142:	d208      	bcs.n	3418d156 <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3418d144:	4b6b      	ldr	r3, [pc, #428]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d148:	f023 0207 	bic.w	r2, r3, #7
3418d14c:	687b      	ldr	r3, [r7, #4]
3418d14e:	691b      	ldr	r3, [r3, #16]
3418d150:	4968      	ldr	r1, [pc, #416]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d152:	4313      	orrs	r3, r2
3418d154:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3418d156:	687b      	ldr	r3, [r7, #4]
3418d158:	681b      	ldr	r3, [r3, #0]
3418d15a:	f003 0310 	and.w	r3, r3, #16
3418d15e:	2b00      	cmp	r3, #0
3418d160:	d035      	beq.n	3418d1ce <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
3418d162:	687b      	ldr	r3, [r7, #4]
3418d164:	695b      	ldr	r3, [r3, #20]
3418d166:	2b00      	cmp	r3, #0
3418d168:	d020      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d16a:	687b      	ldr	r3, [r7, #4]
3418d16c:	695b      	ldr	r3, [r3, #20]
3418d16e:	2b10      	cmp	r3, #16
3418d170:	d01c      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d172:	687b      	ldr	r3, [r7, #4]
3418d174:	695b      	ldr	r3, [r3, #20]
3418d176:	2b20      	cmp	r3, #32
3418d178:	d018      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d17a:	687b      	ldr	r3, [r7, #4]
3418d17c:	695b      	ldr	r3, [r3, #20]
3418d17e:	2b30      	cmp	r3, #48	@ 0x30
3418d180:	d014      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d182:	687b      	ldr	r3, [r7, #4]
3418d184:	695b      	ldr	r3, [r3, #20]
3418d186:	2b40      	cmp	r3, #64	@ 0x40
3418d188:	d010      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d18a:	687b      	ldr	r3, [r7, #4]
3418d18c:	695b      	ldr	r3, [r3, #20]
3418d18e:	2b50      	cmp	r3, #80	@ 0x50
3418d190:	d00c      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d192:	687b      	ldr	r3, [r7, #4]
3418d194:	695b      	ldr	r3, [r3, #20]
3418d196:	2b60      	cmp	r3, #96	@ 0x60
3418d198:	d008      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d19a:	687b      	ldr	r3, [r7, #4]
3418d19c:	695b      	ldr	r3, [r3, #20]
3418d19e:	2b70      	cmp	r3, #112	@ 0x70
3418d1a0:	d004      	beq.n	3418d1ac <HAL_RCC_ClockConfig+0x7b4>
3418d1a2:	f240 416d 	movw	r1, #1133	@ 0x46d
3418d1a6:	4852      	ldr	r0, [pc, #328]	@ (3418d2f0 <HAL_RCC_ClockConfig+0x8f8>)
3418d1a8:	f7f5 f860 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3418d1ac:	687b      	ldr	r3, [r7, #4]
3418d1ae:	695a      	ldr	r2, [r3, #20]
3418d1b0:	4b50      	ldr	r3, [pc, #320]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d1b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3418d1b8:	429a      	cmp	r2, r3
3418d1ba:	d208      	bcs.n	3418d1ce <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418d1bc:	4b4d      	ldr	r3, [pc, #308]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d1c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418d1c4:	687b      	ldr	r3, [r7, #4]
3418d1c6:	695b      	ldr	r3, [r3, #20]
3418d1c8:	494a      	ldr	r1, [pc, #296]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d1ca:	4313      	orrs	r3, r2
3418d1cc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3418d1ce:	687b      	ldr	r3, [r7, #4]
3418d1d0:	681b      	ldr	r3, [r3, #0]
3418d1d2:	f003 0320 	and.w	r3, r3, #32
3418d1d6:	2b00      	cmp	r3, #0
3418d1d8:	d03c      	beq.n	3418d254 <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3418d1da:	687b      	ldr	r3, [r7, #4]
3418d1dc:	699b      	ldr	r3, [r3, #24]
3418d1de:	2b00      	cmp	r3, #0
3418d1e0:	d027      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d1e2:	687b      	ldr	r3, [r7, #4]
3418d1e4:	699b      	ldr	r3, [r3, #24]
3418d1e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418d1ea:	d022      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d1ec:	687b      	ldr	r3, [r7, #4]
3418d1ee:	699b      	ldr	r3, [r3, #24]
3418d1f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418d1f4:	d01d      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d1f6:	687b      	ldr	r3, [r7, #4]
3418d1f8:	699b      	ldr	r3, [r3, #24]
3418d1fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418d1fe:	d018      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d200:	687b      	ldr	r3, [r7, #4]
3418d202:	699b      	ldr	r3, [r3, #24]
3418d204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418d208:	d013      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d20a:	687b      	ldr	r3, [r7, #4]
3418d20c:	699b      	ldr	r3, [r3, #24]
3418d20e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
3418d212:	d00e      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d214:	687b      	ldr	r3, [r7, #4]
3418d216:	699b      	ldr	r3, [r3, #24]
3418d218:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
3418d21c:	d009      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d21e:	687b      	ldr	r3, [r7, #4]
3418d220:	699b      	ldr	r3, [r3, #24]
3418d222:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
3418d226:	d004      	beq.n	3418d232 <HAL_RCC_ClockConfig+0x83a>
3418d228:	f240 4177 	movw	r1, #1143	@ 0x477
3418d22c:	4830      	ldr	r0, [pc, #192]	@ (3418d2f0 <HAL_RCC_ClockConfig+0x8f8>)
3418d22e:	f7f5 f81d 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418d232:	687b      	ldr	r3, [r7, #4]
3418d234:	699a      	ldr	r2, [r3, #24]
3418d236:	4b2f      	ldr	r3, [pc, #188]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d23a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418d23e:	429a      	cmp	r2, r3
3418d240:	d208      	bcs.n	3418d254 <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418d242:	4b2c      	ldr	r3, [pc, #176]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d246:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3418d24a:	687b      	ldr	r3, [r7, #4]
3418d24c:	699b      	ldr	r3, [r3, #24]
3418d24e:	4929      	ldr	r1, [pc, #164]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d250:	4313      	orrs	r3, r2
3418d252:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418d254:	687b      	ldr	r3, [r7, #4]
3418d256:	681b      	ldr	r3, [r3, #0]
3418d258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418d25c:	2b00      	cmp	r3, #0
3418d25e:	d03c      	beq.n	3418d2da <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
3418d260:	687b      	ldr	r3, [r7, #4]
3418d262:	69db      	ldr	r3, [r3, #28]
3418d264:	2b00      	cmp	r3, #0
3418d266:	d027      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d268:	687b      	ldr	r3, [r7, #4]
3418d26a:	69db      	ldr	r3, [r3, #28]
3418d26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418d270:	d022      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d272:	687b      	ldr	r3, [r7, #4]
3418d274:	69db      	ldr	r3, [r3, #28]
3418d276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418d27a:	d01d      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d27c:	687b      	ldr	r3, [r7, #4]
3418d27e:	69db      	ldr	r3, [r3, #28]
3418d280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418d284:	d018      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d286:	687b      	ldr	r3, [r7, #4]
3418d288:	69db      	ldr	r3, [r3, #28]
3418d28a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418d28e:	d013      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d290:	687b      	ldr	r3, [r7, #4]
3418d292:	69db      	ldr	r3, [r3, #28]
3418d294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418d298:	d00e      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d29a:	687b      	ldr	r3, [r7, #4]
3418d29c:	69db      	ldr	r3, [r3, #28]
3418d29e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418d2a2:	d009      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d2a4:	687b      	ldr	r3, [r7, #4]
3418d2a6:	69db      	ldr	r3, [r3, #28]
3418d2a8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418d2ac:	d004      	beq.n	3418d2b8 <HAL_RCC_ClockConfig+0x8c0>
3418d2ae:	f240 4181 	movw	r1, #1153	@ 0x481
3418d2b2:	480f      	ldr	r0, [pc, #60]	@ (3418d2f0 <HAL_RCC_ClockConfig+0x8f8>)
3418d2b4:	f7f4 ffda 	bl	3418226c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418d2b8:	687b      	ldr	r3, [r7, #4]
3418d2ba:	69da      	ldr	r2, [r3, #28]
3418d2bc:	4b0d      	ldr	r3, [pc, #52]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d2c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3418d2c4:	429a      	cmp	r2, r3
3418d2c6:	d208      	bcs.n	3418d2da <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418d2c8:	4b0a      	ldr	r3, [pc, #40]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d2cc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418d2d0:	687b      	ldr	r3, [r7, #4]
3418d2d2:	69db      	ldr	r3, [r3, #28]
3418d2d4:	4907      	ldr	r1, [pc, #28]	@ (3418d2f4 <HAL_RCC_ClockConfig+0x8fc>)
3418d2d6:	4313      	orrs	r3, r2
3418d2d8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
3418d2da:	4b07      	ldr	r3, [pc, #28]	@ (3418d2f8 <HAL_RCC_ClockConfig+0x900>)
3418d2dc:	681b      	ldr	r3, [r3, #0]
3418d2de:	4618      	mov	r0, r3
3418d2e0:	f7f7 f8e4 	bl	341844ac <HAL_InitTick>
3418d2e4:	4603      	mov	r3, r0
}
3418d2e6:	4618      	mov	r0, r3
3418d2e8:	3710      	adds	r7, #16
3418d2ea:	46bd      	mov	sp, r7
3418d2ec:	bd80      	pop	{r7, pc}
3418d2ee:	bf00      	nop
3418d2f0:	341a5360 	.word	0x341a5360
3418d2f4:	56028000 	.word	0x56028000
3418d2f8:	341c0068 	.word	0x341c0068

3418d2fc <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
3418d2fc:	b580      	push	{r7, lr}
3418d2fe:	b082      	sub	sp, #8
3418d300:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418d302:	2300      	movs	r3, #0
3418d304:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
3418d306:	f7fe fce1 	bl	3418bccc <LL_RCC_GetCpuClkSource>
3418d30a:	4603      	mov	r3, r0
3418d30c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418d310:	d025      	beq.n	3418d35e <HAL_RCC_GetCpuClockFreq+0x62>
3418d312:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418d316:	d860      	bhi.n	3418d3da <HAL_RCC_GetCpuClockFreq+0xde>
3418d318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418d31c:	d01c      	beq.n	3418d358 <HAL_RCC_GetCpuClockFreq+0x5c>
3418d31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418d322:	d85a      	bhi.n	3418d3da <HAL_RCC_GetCpuClockFreq+0xde>
3418d324:	2b00      	cmp	r3, #0
3418d326:	d003      	beq.n	3418d330 <HAL_RCC_GetCpuClockFreq+0x34>
3418d328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418d32c:	d009      	beq.n	3418d342 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418d32e:	e054      	b.n	3418d3da <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d330:	f7fe fc02 	bl	3418bb38 <LL_RCC_HSI_GetDivider>
3418d334:	4603      	mov	r3, r0
3418d336:	09db      	lsrs	r3, r3, #7
3418d338:	4a2b      	ldr	r2, [pc, #172]	@ (3418d3e8 <HAL_RCC_GetCpuClockFreq+0xec>)
3418d33a:	fa22 f303 	lsr.w	r3, r2, r3
3418d33e:	607b      	str	r3, [r7, #4]
      break;
3418d340:	e04c      	b.n	3418d3dc <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418d342:	f7fe fc61 	bl	3418bc08 <LL_RCC_MSI_GetFrequency>
3418d346:	4603      	mov	r3, r0
3418d348:	2b00      	cmp	r3, #0
3418d34a:	d102      	bne.n	3418d352 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
3418d34c:	4b27      	ldr	r3, [pc, #156]	@ (3418d3ec <HAL_RCC_GetCpuClockFreq+0xf0>)
3418d34e:	607b      	str	r3, [r7, #4]
      break;
3418d350:	e044      	b.n	3418d3dc <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
3418d352:	4b27      	ldr	r3, [pc, #156]	@ (3418d3f0 <HAL_RCC_GetCpuClockFreq+0xf4>)
3418d354:	607b      	str	r3, [r7, #4]
      break;
3418d356:	e041      	b.n	3418d3dc <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
3418d358:	4b26      	ldr	r3, [pc, #152]	@ (3418d3f4 <HAL_RCC_GetCpuClockFreq+0xf8>)
3418d35a:	607b      	str	r3, [r7, #4]
      break;
3418d35c:	e03e      	b.n	3418d3dc <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
3418d35e:	f7fe fde1 	bl	3418bf24 <LL_RCC_IC1_GetDivider>
3418d362:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
3418d364:	f7fe fdd0 	bl	3418bf08 <LL_RCC_IC1_GetSource>
3418d368:	4603      	mov	r3, r0
3418d36a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d36e:	d029      	beq.n	3418d3c4 <HAL_RCC_GetCpuClockFreq+0xc8>
3418d370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d374:	d82f      	bhi.n	3418d3d6 <HAL_RCC_GetCpuClockFreq+0xda>
3418d376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d37a:	d01a      	beq.n	3418d3b2 <HAL_RCC_GetCpuClockFreq+0xb6>
3418d37c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d380:	d829      	bhi.n	3418d3d6 <HAL_RCC_GetCpuClockFreq+0xda>
3418d382:	2b00      	cmp	r3, #0
3418d384:	d003      	beq.n	3418d38e <HAL_RCC_GetCpuClockFreq+0x92>
3418d386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d38a:	d009      	beq.n	3418d3a0 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
3418d38c:	e023      	b.n	3418d3d6 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d38e:	f009 f89f 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d392:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d394:	687a      	ldr	r2, [r7, #4]
3418d396:	683b      	ldr	r3, [r7, #0]
3418d398:	fbb2 f3f3 	udiv	r3, r2, r3
3418d39c:	607b      	str	r3, [r7, #4]
          break;
3418d39e:	e01b      	b.n	3418d3d8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d3a0:	f009 f8dc 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3418d3a4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d3a6:	687a      	ldr	r2, [r7, #4]
3418d3a8:	683b      	ldr	r3, [r7, #0]
3418d3aa:	fbb2 f3f3 	udiv	r3, r2, r3
3418d3ae:	607b      	str	r3, [r7, #4]
          break;
3418d3b0:	e012      	b.n	3418d3d8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d3b2:	f009 f919 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d3b6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d3b8:	687a      	ldr	r2, [r7, #4]
3418d3ba:	683b      	ldr	r3, [r7, #0]
3418d3bc:	fbb2 f3f3 	udiv	r3, r2, r3
3418d3c0:	607b      	str	r3, [r7, #4]
          break;
3418d3c2:	e009      	b.n	3418d3d8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d3c4:	f009 f956 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3418d3c8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d3ca:	687a      	ldr	r2, [r7, #4]
3418d3cc:	683b      	ldr	r3, [r7, #0]
3418d3ce:	fbb2 f3f3 	udiv	r3, r2, r3
3418d3d2:	607b      	str	r3, [r7, #4]
          break;
3418d3d4:	e000      	b.n	3418d3d8 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
3418d3d6:	bf00      	nop
      break;
3418d3d8:	e000      	b.n	3418d3dc <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
3418d3da:	bf00      	nop
  }

  return frequency;
3418d3dc:	687b      	ldr	r3, [r7, #4]
}
3418d3de:	4618      	mov	r0, r3
3418d3e0:	3708      	adds	r7, #8
3418d3e2:	46bd      	mov	sp, r7
3418d3e4:	bd80      	pop	{r7, pc}
3418d3e6:	bf00      	nop
3418d3e8:	03d09000 	.word	0x03d09000
3418d3ec:	003d0900 	.word	0x003d0900
3418d3f0:	00f42400 	.word	0x00f42400
3418d3f4:	02dc6c00 	.word	0x02dc6c00

3418d3f8 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
3418d3f8:	b580      	push	{r7, lr}
3418d3fa:	b082      	sub	sp, #8
3418d3fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418d3fe:	2300      	movs	r3, #0
3418d400:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
3418d402:	f7fe fc71 	bl	3418bce8 <LL_RCC_GetSysClkSource>
3418d406:	4603      	mov	r3, r0
3418d408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d40c:	d025      	beq.n	3418d45a <HAL_RCC_GetSysClockFreq+0x62>
3418d40e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d412:	d860      	bhi.n	3418d4d6 <HAL_RCC_GetSysClockFreq+0xde>
3418d414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d418:	d01c      	beq.n	3418d454 <HAL_RCC_GetSysClockFreq+0x5c>
3418d41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d41e:	d85a      	bhi.n	3418d4d6 <HAL_RCC_GetSysClockFreq+0xde>
3418d420:	2b00      	cmp	r3, #0
3418d422:	d003      	beq.n	3418d42c <HAL_RCC_GetSysClockFreq+0x34>
3418d424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d428:	d009      	beq.n	3418d43e <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418d42a:	e054      	b.n	3418d4d6 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d42c:	f7fe fb84 	bl	3418bb38 <LL_RCC_HSI_GetDivider>
3418d430:	4603      	mov	r3, r0
3418d432:	09db      	lsrs	r3, r3, #7
3418d434:	4a2b      	ldr	r2, [pc, #172]	@ (3418d4e4 <HAL_RCC_GetSysClockFreq+0xec>)
3418d436:	fa22 f303 	lsr.w	r3, r2, r3
3418d43a:	607b      	str	r3, [r7, #4]
      break;
3418d43c:	e04c      	b.n	3418d4d8 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418d43e:	f7fe fbe3 	bl	3418bc08 <LL_RCC_MSI_GetFrequency>
3418d442:	4603      	mov	r3, r0
3418d444:	2b00      	cmp	r3, #0
3418d446:	d102      	bne.n	3418d44e <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
3418d448:	4b27      	ldr	r3, [pc, #156]	@ (3418d4e8 <HAL_RCC_GetSysClockFreq+0xf0>)
3418d44a:	607b      	str	r3, [r7, #4]
      break;
3418d44c:	e044      	b.n	3418d4d8 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
3418d44e:	4b27      	ldr	r3, [pc, #156]	@ (3418d4ec <HAL_RCC_GetSysClockFreq+0xf4>)
3418d450:	607b      	str	r3, [r7, #4]
      break;
3418d452:	e041      	b.n	3418d4d8 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
3418d454:	4b26      	ldr	r3, [pc, #152]	@ (3418d4f0 <HAL_RCC_GetSysClockFreq+0xf8>)
3418d456:	607b      	str	r3, [r7, #4]
      break;
3418d458:	e03e      	b.n	3418d4d8 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
3418d45a:	f7fe fd81 	bl	3418bf60 <LL_RCC_IC2_GetDivider>
3418d45e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
3418d460:	f7fe fd70 	bl	3418bf44 <LL_RCC_IC2_GetSource>
3418d464:	4603      	mov	r3, r0
3418d466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d46a:	d029      	beq.n	3418d4c0 <HAL_RCC_GetSysClockFreq+0xc8>
3418d46c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d470:	d82f      	bhi.n	3418d4d2 <HAL_RCC_GetSysClockFreq+0xda>
3418d472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d476:	d01a      	beq.n	3418d4ae <HAL_RCC_GetSysClockFreq+0xb6>
3418d478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d47c:	d829      	bhi.n	3418d4d2 <HAL_RCC_GetSysClockFreq+0xda>
3418d47e:	2b00      	cmp	r3, #0
3418d480:	d003      	beq.n	3418d48a <HAL_RCC_GetSysClockFreq+0x92>
3418d482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d486:	d009      	beq.n	3418d49c <HAL_RCC_GetSysClockFreq+0xa4>
          break;
3418d488:	e023      	b.n	3418d4d2 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d48a:	f009 f821 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d48e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d490:	687a      	ldr	r2, [r7, #4]
3418d492:	683b      	ldr	r3, [r7, #0]
3418d494:	fbb2 f3f3 	udiv	r3, r2, r3
3418d498:	607b      	str	r3, [r7, #4]
          break;
3418d49a:	e01b      	b.n	3418d4d4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d49c:	f009 f85e 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3418d4a0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d4a2:	687a      	ldr	r2, [r7, #4]
3418d4a4:	683b      	ldr	r3, [r7, #0]
3418d4a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418d4aa:	607b      	str	r3, [r7, #4]
          break;
3418d4ac:	e012      	b.n	3418d4d4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d4ae:	f009 f89b 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d4b2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d4b4:	687a      	ldr	r2, [r7, #4]
3418d4b6:	683b      	ldr	r3, [r7, #0]
3418d4b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418d4bc:	607b      	str	r3, [r7, #4]
          break;
3418d4be:	e009      	b.n	3418d4d4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d4c0:	f009 f8d8 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3418d4c4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418d4c6:	687a      	ldr	r2, [r7, #4]
3418d4c8:	683b      	ldr	r3, [r7, #0]
3418d4ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418d4ce:	607b      	str	r3, [r7, #4]
          break;
3418d4d0:	e000      	b.n	3418d4d4 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
3418d4d2:	bf00      	nop
      break;
3418d4d4:	e000      	b.n	3418d4d8 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
3418d4d6:	bf00      	nop
  }

  return frequency;
3418d4d8:	687b      	ldr	r3, [r7, #4]
}
3418d4da:	4618      	mov	r0, r3
3418d4dc:	3708      	adds	r7, #8
3418d4de:	46bd      	mov	sp, r7
3418d4e0:	bd80      	pop	{r7, pc}
3418d4e2:	bf00      	nop
3418d4e4:	03d09000 	.word	0x03d09000
3418d4e8:	003d0900 	.word	0x003d0900
3418d4ec:	00f42400 	.word	0x00f42400
3418d4f0:	02dc6c00 	.word	0x02dc6c00

3418d4f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
3418d4f4:	b598      	push	{r3, r4, r7, lr}
3418d4f6:	af00      	add	r7, sp, #0
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
3418d4f8:	f7ff ff7e 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3418d4fc:	4604      	mov	r4, r0
3418d4fe:	f7fe fc01 	bl	3418bd04 <LL_RCC_GetAHBPrescaler>
3418d502:	4603      	mov	r3, r0
3418d504:	0d1b      	lsrs	r3, r3, #20
3418d506:	f003 0307 	and.w	r3, r3, #7
3418d50a:	40dc      	lsrs	r4, r3
3418d50c:	f7fe fc08 	bl	3418bd20 <LL_RCC_GetAPB1Prescaler>
3418d510:	4603      	mov	r3, r0
3418d512:	f003 0307 	and.w	r3, r3, #7
3418d516:	fa24 f303 	lsr.w	r3, r4, r3
                                LL_RCC_GetAPB1Prescaler());
}
3418d51a:	4618      	mov	r0, r3
3418d51c:	bd98      	pop	{r3, r4, r7, pc}
	...

3418d520 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
3418d520:	b480      	push	{r7}
3418d522:	b085      	sub	sp, #20
3418d524:	af00      	add	r7, sp, #0
3418d526:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
3418d528:	687b      	ldr	r3, [r7, #4]
3418d52a:	227f      	movs	r2, #127	@ 0x7f
3418d52c:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
3418d52e:	4b36      	ldr	r3, [pc, #216]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d530:	6a1b      	ldr	r3, [r3, #32]
3418d532:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
3418d534:	68fb      	ldr	r3, [r7, #12]
3418d536:	091b      	lsrs	r3, r3, #4
3418d538:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
3418d53c:	687b      	ldr	r3, [r7, #4]
3418d53e:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
3418d540:	68fb      	ldr	r3, [r7, #12]
3418d542:	091b      	lsrs	r3, r3, #4
3418d544:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
3418d548:	687b      	ldr	r3, [r7, #4]
3418d54a:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
3418d54c:	4b2e      	ldr	r3, [pc, #184]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d550:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
3418d552:	68fb      	ldr	r3, [r7, #12]
3418d554:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
3418d558:	687b      	ldr	r3, [r7, #4]
3418d55a:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
3418d55c:	68fb      	ldr	r3, [r7, #12]
3418d55e:	f003 0207 	and.w	r2, r3, #7
3418d562:	687b      	ldr	r3, [r7, #4]
3418d564:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
3418d566:	68fb      	ldr	r3, [r7, #12]
3418d568:	f003 0270 	and.w	r2, r3, #112	@ 0x70
3418d56c:	687b      	ldr	r3, [r7, #4]
3418d56e:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
3418d570:	68fb      	ldr	r3, [r7, #12]
3418d572:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
3418d576:	687b      	ldr	r3, [r7, #4]
3418d578:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
3418d57a:	68fb      	ldr	r3, [r7, #12]
3418d57c:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
3418d580:	687b      	ldr	r3, [r7, #4]
3418d582:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
3418d584:	4b20      	ldr	r3, [pc, #128]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418d58a:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
3418d58c:	68fb      	ldr	r3, [r7, #12]
3418d58e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418d592:	687b      	ldr	r3, [r7, #4]
3418d594:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
3418d596:	68fb      	ldr	r3, [r7, #12]
3418d598:	0c1b      	lsrs	r3, r3, #16
3418d59a:	b2db      	uxtb	r3, r3
3418d59c:	1c5a      	adds	r2, r3, #1
3418d59e:	687b      	ldr	r3, [r7, #4]
3418d5a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418d5a2:	4b19      	ldr	r3, [pc, #100]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d5a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418d5a8:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
3418d5aa:	68fb      	ldr	r3, [r7, #12]
3418d5ac:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418d5b0:	687b      	ldr	r3, [r7, #4]
3418d5b2:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
3418d5b4:	68fb      	ldr	r3, [r7, #12]
3418d5b6:	0c1b      	lsrs	r3, r3, #16
3418d5b8:	b2db      	uxtb	r3, r3
3418d5ba:	1c5a      	adds	r2, r3, #1
3418d5bc:	687b      	ldr	r3, [r7, #4]
3418d5be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
3418d5c0:	4b11      	ldr	r3, [pc, #68]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d5c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418d5c6:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
3418d5c8:	68fb      	ldr	r3, [r7, #12]
3418d5ca:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418d5ce:	687b      	ldr	r3, [r7, #4]
3418d5d0:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
3418d5d2:	68fb      	ldr	r3, [r7, #12]
3418d5d4:	0c1b      	lsrs	r3, r3, #16
3418d5d6:	b2db      	uxtb	r3, r3
3418d5d8:	1c5a      	adds	r2, r3, #1
3418d5da:	687b      	ldr	r3, [r7, #4]
3418d5dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
3418d5de:	4b0a      	ldr	r3, [pc, #40]	@ (3418d608 <HAL_RCC_GetClockConfig+0xe8>)
3418d5e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418d5e4:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
3418d5e6:	68fb      	ldr	r3, [r7, #12]
3418d5e8:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418d5ec:	687b      	ldr	r3, [r7, #4]
3418d5ee:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
3418d5f0:	68fb      	ldr	r3, [r7, #12]
3418d5f2:	0c1b      	lsrs	r3, r3, #16
3418d5f4:	b2db      	uxtb	r3, r3
3418d5f6:	1c5a      	adds	r2, r3, #1
3418d5f8:	687b      	ldr	r3, [r7, #4]
3418d5fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
3418d5fc:	bf00      	nop
3418d5fe:	3714      	adds	r7, #20
3418d600:	46bd      	mov	sp, r7
3418d602:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d606:	4770      	bx	lr
3418d608:	56028000 	.word	0x56028000

3418d60c <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3418d60c:	b580      	push	{r7, lr}
3418d60e:	b088      	sub	sp, #32
3418d610:	af00      	add	r7, sp, #0
3418d612:	6078      	str	r0, [r7, #4]
3418d614:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
3418d616:	2300      	movs	r3, #0
3418d618:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418d61a:	687b      	ldr	r3, [r7, #4]
3418d61c:	011a      	lsls	r2, r3, #4
3418d61e:	4b9a      	ldr	r3, [pc, #616]	@ (3418d888 <RCC_PLL_Config+0x27c>)
3418d620:	4413      	add	r3, r2
3418d622:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3418d624:	687b      	ldr	r3, [r7, #4]
3418d626:	011a      	lsls	r2, r3, #4
3418d628:	4b98      	ldr	r3, [pc, #608]	@ (3418d88c <RCC_PLL_Config+0x280>)
3418d62a:	4413      	add	r3, r2
3418d62c:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418d62e:	687b      	ldr	r3, [r7, #4]
3418d630:	011a      	lsls	r2, r3, #4
3418d632:	4b97      	ldr	r3, [pc, #604]	@ (3418d890 <RCC_PLL_Config+0x284>)
3418d634:	4413      	add	r3, r2
3418d636:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
3418d638:	683b      	ldr	r3, [r7, #0]
3418d63a:	681b      	ldr	r3, [r3, #0]
3418d63c:	2b02      	cmp	r3, #2
3418d63e:	f040 80e9 	bne.w	3418d814 <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3418d642:	683b      	ldr	r3, [r7, #0]
3418d644:	685b      	ldr	r3, [r3, #4]
3418d646:	2b00      	cmp	r3, #0
3418d648:	d013      	beq.n	3418d672 <RCC_PLL_Config+0x66>
3418d64a:	683b      	ldr	r3, [r7, #0]
3418d64c:	685b      	ldr	r3, [r3, #4]
3418d64e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d652:	d00e      	beq.n	3418d672 <RCC_PLL_Config+0x66>
3418d654:	683b      	ldr	r3, [r7, #0]
3418d656:	685b      	ldr	r3, [r3, #4]
3418d658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d65c:	d009      	beq.n	3418d672 <RCC_PLL_Config+0x66>
3418d65e:	683b      	ldr	r3, [r7, #0]
3418d660:	685b      	ldr	r3, [r3, #4]
3418d662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d666:	d004      	beq.n	3418d672 <RCC_PLL_Config+0x66>
3418d668:	f240 71fa 	movw	r1, #2042	@ 0x7fa
3418d66c:	4889      	ldr	r0, [pc, #548]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d66e:	f7f4 fdfd 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3418d672:	683b      	ldr	r3, [r7, #0]
3418d674:	68db      	ldr	r3, [r3, #12]
3418d676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418d67a:	d304      	bcc.n	3418d686 <RCC_PLL_Config+0x7a>
3418d67c:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3418d680:	4884      	ldr	r0, [pc, #528]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d682:	f7f4 fdf3 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
3418d686:	683b      	ldr	r3, [r7, #0]
3418d688:	689b      	ldr	r3, [r3, #8]
3418d68a:	2b00      	cmp	r3, #0
3418d68c:	d003      	beq.n	3418d696 <RCC_PLL_Config+0x8a>
3418d68e:	683b      	ldr	r3, [r7, #0]
3418d690:	689b      	ldr	r3, [r3, #8]
3418d692:	2b3f      	cmp	r3, #63	@ 0x3f
3418d694:	d904      	bls.n	3418d6a0 <RCC_PLL_Config+0x94>
3418d696:	f240 71fc 	movw	r1, #2044	@ 0x7fc
3418d69a:	487e      	ldr	r0, [pc, #504]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d69c:	f7f4 fde6 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3418d6a0:	683b      	ldr	r3, [r7, #0]
3418d6a2:	691b      	ldr	r3, [r3, #16]
3418d6a4:	2b09      	cmp	r3, #9
3418d6a6:	d905      	bls.n	3418d6b4 <RCC_PLL_Config+0xa8>
3418d6a8:	683b      	ldr	r3, [r7, #0]
3418d6aa:	691b      	ldr	r3, [r3, #16]
3418d6ac:	f640 12c4 	movw	r2, #2500	@ 0x9c4
3418d6b0:	4293      	cmp	r3, r2
3418d6b2:	d904      	bls.n	3418d6be <RCC_PLL_Config+0xb2>
3418d6b4:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3418d6b8:	4876      	ldr	r0, [pc, #472]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d6ba:	f7f4 fdd7 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
3418d6be:	683b      	ldr	r3, [r7, #0]
3418d6c0:	695b      	ldr	r3, [r3, #20]
3418d6c2:	2b00      	cmp	r3, #0
3418d6c4:	d003      	beq.n	3418d6ce <RCC_PLL_Config+0xc2>
3418d6c6:	683b      	ldr	r3, [r7, #0]
3418d6c8:	695b      	ldr	r3, [r3, #20]
3418d6ca:	2b07      	cmp	r3, #7
3418d6cc:	d904      	bls.n	3418d6d8 <RCC_PLL_Config+0xcc>
3418d6ce:	f240 71fe 	movw	r1, #2046	@ 0x7fe
3418d6d2:	4870      	ldr	r0, [pc, #448]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d6d4:	f7f4 fdca 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
3418d6d8:	683b      	ldr	r3, [r7, #0]
3418d6da:	699b      	ldr	r3, [r3, #24]
3418d6dc:	2b00      	cmp	r3, #0
3418d6de:	d003      	beq.n	3418d6e8 <RCC_PLL_Config+0xdc>
3418d6e0:	683b      	ldr	r3, [r7, #0]
3418d6e2:	699b      	ldr	r3, [r3, #24]
3418d6e4:	2b07      	cmp	r3, #7
3418d6e6:	d904      	bls.n	3418d6f2 <RCC_PLL_Config+0xe6>
3418d6e8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
3418d6ec:	4869      	ldr	r0, [pc, #420]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d6ee:	f7f4 fdbd 	bl	3418226c <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418d6f2:	4a69      	ldr	r2, [pc, #420]	@ (3418d898 <RCC_PLL_Config+0x28c>)
3418d6f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d6f8:	687b      	ldr	r3, [r7, #4]
3418d6fa:	fa01 f303 	lsl.w	r3, r1, r3
3418d6fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418d702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418d704:	f7f6 ff1c 	bl	34184540 <HAL_GetTick>
3418d708:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d70a:	e008      	b.n	3418d71e <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418d70c:	f7f6 ff18 	bl	34184540 <HAL_GetTick>
3418d710:	4602      	mov	r2, r0
3418d712:	68fb      	ldr	r3, [r7, #12]
3418d714:	1ad3      	subs	r3, r2, r3
3418d716:	2b01      	cmp	r3, #1
3418d718:	d901      	bls.n	3418d71e <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
3418d71a:	2303      	movs	r3, #3
3418d71c:	e114      	b.n	3418d948 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d71e:	4b5e      	ldr	r3, [pc, #376]	@ (3418d898 <RCC_PLL_Config+0x28c>)
3418d720:	685a      	ldr	r2, [r3, #4]
3418d722:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d726:	687b      	ldr	r3, [r7, #4]
3418d728:	fa01 f303 	lsl.w	r3, r1, r3
3418d72c:	401a      	ands	r2, r3
3418d72e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d732:	687b      	ldr	r3, [r7, #4]
3418d734:	fa01 f303 	lsl.w	r3, r1, r3
3418d738:	429a      	cmp	r2, r3
3418d73a:	d0e7      	beq.n	3418d70c <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3418d73c:	693b      	ldr	r3, [r7, #16]
3418d73e:	681b      	ldr	r3, [r3, #0]
3418d740:	f043 0204 	orr.w	r2, r3, #4
3418d744:	693b      	ldr	r3, [r7, #16]
3418d746:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418d748:	69bb      	ldr	r3, [r7, #24]
3418d74a:	681b      	ldr	r3, [r3, #0]
3418d74c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418d750:	69bb      	ldr	r3, [r7, #24]
3418d752:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
3418d754:	69bb      	ldr	r3, [r7, #24]
3418d756:	681a      	ldr	r2, [r3, #0]
3418d758:	4b50      	ldr	r3, [pc, #320]	@ (3418d89c <RCC_PLL_Config+0x290>)
3418d75a:	4013      	ands	r3, r2
3418d75c:	683a      	ldr	r2, [r7, #0]
3418d75e:	6851      	ldr	r1, [r2, #4]
3418d760:	683a      	ldr	r2, [r7, #0]
3418d762:	6892      	ldr	r2, [r2, #8]
3418d764:	0512      	lsls	r2, r2, #20
3418d766:	4311      	orrs	r1, r2
3418d768:	683a      	ldr	r2, [r7, #0]
3418d76a:	6912      	ldr	r2, [r2, #16]
3418d76c:	0212      	lsls	r2, r2, #8
3418d76e:	430a      	orrs	r2, r1
3418d770:	431a      	orrs	r2, r3
3418d772:	69bb      	ldr	r3, [r7, #24]
3418d774:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
3418d776:	693b      	ldr	r3, [r7, #16]
3418d778:	681b      	ldr	r3, [r3, #0]
3418d77a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3418d77e:	683b      	ldr	r3, [r7, #0]
3418d780:	695b      	ldr	r3, [r3, #20]
3418d782:	06d9      	lsls	r1, r3, #27
3418d784:	683b      	ldr	r3, [r7, #0]
3418d786:	699b      	ldr	r3, [r3, #24]
3418d788:	061b      	lsls	r3, r3, #24
3418d78a:	430b      	orrs	r3, r1
3418d78c:	431a      	orrs	r2, r3
3418d78e:	693b      	ldr	r3, [r7, #16]
3418d790:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3418d792:	697b      	ldr	r3, [r7, #20]
3418d794:	681b      	ldr	r3, [r3, #0]
3418d796:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
3418d79a:	683b      	ldr	r3, [r7, #0]
3418d79c:	68db      	ldr	r3, [r3, #12]
3418d79e:	431a      	orrs	r2, r3
3418d7a0:	697b      	ldr	r3, [r7, #20]
3418d7a2:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
3418d7a4:	693b      	ldr	r3, [r7, #16]
3418d7a6:	681b      	ldr	r3, [r3, #0]
3418d7a8:	f023 0208 	bic.w	r2, r3, #8
3418d7ac:	693b      	ldr	r3, [r7, #16]
3418d7ae:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3418d7b0:	683b      	ldr	r3, [r7, #0]
3418d7b2:	68db      	ldr	r3, [r3, #12]
3418d7b4:	2b00      	cmp	r3, #0
3418d7b6:	d005      	beq.n	3418d7c4 <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
3418d7b8:	693b      	ldr	r3, [r7, #16]
3418d7ba:	681b      	ldr	r3, [r3, #0]
3418d7bc:	f043 020a 	orr.w	r2, r3, #10
3418d7c0:	693b      	ldr	r3, [r7, #16]
3418d7c2:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3418d7c4:	693b      	ldr	r3, [r7, #16]
3418d7c6:	681b      	ldr	r3, [r3, #0]
3418d7c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3418d7cc:	f043 0301 	orr.w	r3, r3, #1
3418d7d0:	693a      	ldr	r2, [r7, #16]
3418d7d2:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3418d7d4:	4a30      	ldr	r2, [pc, #192]	@ (3418d898 <RCC_PLL_Config+0x28c>)
3418d7d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d7da:	687b      	ldr	r3, [r7, #4]
3418d7dc:	fa01 f303 	lsl.w	r3, r1, r3
3418d7e0:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418d7e4:	f7f6 feac 	bl	34184540 <HAL_GetTick>
3418d7e8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418d7ea:	e008      	b.n	3418d7fe <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418d7ec:	f7f6 fea8 	bl	34184540 <HAL_GetTick>
3418d7f0:	4602      	mov	r2, r0
3418d7f2:	68fb      	ldr	r3, [r7, #12]
3418d7f4:	1ad3      	subs	r3, r2, r3
3418d7f6:	2b01      	cmp	r3, #1
3418d7f8:	d901      	bls.n	3418d7fe <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
3418d7fa:	2303      	movs	r3, #3
3418d7fc:	e0a4      	b.n	3418d948 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418d7fe:	4b26      	ldr	r3, [pc, #152]	@ (3418d898 <RCC_PLL_Config+0x28c>)
3418d800:	685a      	ldr	r2, [r3, #4]
3418d802:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d806:	687b      	ldr	r3, [r7, #4]
3418d808:	fa01 f303 	lsl.w	r3, r1, r3
3418d80c:	4013      	ands	r3, r2
3418d80e:	2b00      	cmp	r3, #0
3418d810:	d0ec      	beq.n	3418d7ec <RCC_PLL_Config+0x1e0>
3418d812:	e098      	b.n	3418d946 <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3418d814:	683b      	ldr	r3, [r7, #0]
3418d816:	681b      	ldr	r3, [r3, #0]
3418d818:	2b03      	cmp	r3, #3
3418d81a:	d15f      	bne.n	3418d8dc <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3418d81c:	683b      	ldr	r3, [r7, #0]
3418d81e:	685b      	ldr	r3, [r3, #4]
3418d820:	2b00      	cmp	r3, #0
3418d822:	d013      	beq.n	3418d84c <RCC_PLL_Config+0x240>
3418d824:	683b      	ldr	r3, [r7, #0]
3418d826:	685b      	ldr	r3, [r3, #4]
3418d828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d82c:	d00e      	beq.n	3418d84c <RCC_PLL_Config+0x240>
3418d82e:	683b      	ldr	r3, [r7, #0]
3418d830:	685b      	ldr	r3, [r3, #4]
3418d832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d836:	d009      	beq.n	3418d84c <RCC_PLL_Config+0x240>
3418d838:	683b      	ldr	r3, [r7, #0]
3418d83a:	685b      	ldr	r3, [r3, #4]
3418d83c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d840:	d004      	beq.n	3418d84c <RCC_PLL_Config+0x240>
3418d842:	f640 013f 	movw	r1, #2111	@ 0x83f
3418d846:	4813      	ldr	r0, [pc, #76]	@ (3418d894 <RCC_PLL_Config+0x288>)
3418d848:	f7f4 fd10 	bl	3418226c <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3418d84c:	683b      	ldr	r3, [r7, #0]
3418d84e:	685b      	ldr	r3, [r3, #4]
3418d850:	4618      	mov	r0, r3
3418d852:	f000 f925 	bl	3418daa0 <RCC_PLL_Source_IsReady>
3418d856:	4603      	mov	r3, r0
3418d858:	2b01      	cmp	r3, #1
3418d85a:	d13c      	bne.n	3418d8d6 <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418d85c:	4a0e      	ldr	r2, [pc, #56]	@ (3418d898 <RCC_PLL_Config+0x28c>)
3418d85e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d862:	687b      	ldr	r3, [r7, #4]
3418d864:	fa01 f303 	lsl.w	r3, r1, r3
3418d868:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418d86c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418d86e:	f7f6 fe67 	bl	34184540 <HAL_GetTick>
3418d872:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d874:	e014      	b.n	3418d8a0 <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418d876:	f7f6 fe63 	bl	34184540 <HAL_GetTick>
3418d87a:	4602      	mov	r2, r0
3418d87c:	68fb      	ldr	r3, [r7, #12]
3418d87e:	1ad3      	subs	r3, r2, r3
3418d880:	2b01      	cmp	r3, #1
3418d882:	d90d      	bls.n	3418d8a0 <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
3418d884:	2303      	movs	r3, #3
3418d886:	e05f      	b.n	3418d948 <RCC_PLL_Config+0x33c>
3418d888:	56028080 	.word	0x56028080
3418d88c:	56028084 	.word	0x56028084
3418d890:	56028088 	.word	0x56028088
3418d894:	341a5360 	.word	0x341a5360
3418d898:	56028000 	.word	0x56028000
3418d89c:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d8a0:	4b2b      	ldr	r3, [pc, #172]	@ (3418d950 <RCC_PLL_Config+0x344>)
3418d8a2:	685a      	ldr	r2, [r3, #4]
3418d8a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d8a8:	687b      	ldr	r3, [r7, #4]
3418d8aa:	fa01 f303 	lsl.w	r3, r1, r3
3418d8ae:	401a      	ands	r2, r3
3418d8b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d8b4:	687b      	ldr	r3, [r7, #4]
3418d8b6:	fa01 f303 	lsl.w	r3, r1, r3
3418d8ba:	429a      	cmp	r2, r3
3418d8bc:	d0db      	beq.n	3418d876 <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3418d8be:	69bb      	ldr	r3, [r7, #24]
3418d8c0:	681b      	ldr	r3, [r3, #0]
3418d8c2:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3418d8c6:	683b      	ldr	r3, [r7, #0]
3418d8c8:	685b      	ldr	r3, [r3, #4]
3418d8ca:	4313      	orrs	r3, r2
3418d8cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418d8d0:	69bb      	ldr	r3, [r7, #24]
3418d8d2:	601a      	str	r2, [r3, #0]
3418d8d4:	e037      	b.n	3418d946 <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3418d8d6:	2301      	movs	r3, #1
3418d8d8:	77fb      	strb	r3, [r7, #31]
3418d8da:	e034      	b.n	3418d946 <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
3418d8dc:	683b      	ldr	r3, [r7, #0]
3418d8de:	681b      	ldr	r3, [r3, #0]
3418d8e0:	2b01      	cmp	r3, #1
3418d8e2:	d130      	bne.n	3418d946 <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
3418d8e4:	693b      	ldr	r3, [r7, #16]
3418d8e6:	681b      	ldr	r3, [r3, #0]
3418d8e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
3418d8ec:	693b      	ldr	r3, [r7, #16]
3418d8ee:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418d8f0:	4a17      	ldr	r2, [pc, #92]	@ (3418d950 <RCC_PLL_Config+0x344>)
3418d8f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d8f6:	687b      	ldr	r3, [r7, #4]
3418d8f8:	fa01 f303 	lsl.w	r3, r1, r3
3418d8fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418d900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3418d902:	f7f6 fe1d 	bl	34184540 <HAL_GetTick>
3418d906:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d908:	e008      	b.n	3418d91c <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418d90a:	f7f6 fe19 	bl	34184540 <HAL_GetTick>
3418d90e:	4602      	mov	r2, r0
3418d910:	68fb      	ldr	r3, [r7, #12]
3418d912:	1ad3      	subs	r3, r2, r3
3418d914:	2b01      	cmp	r3, #1
3418d916:	d901      	bls.n	3418d91c <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
3418d918:	2303      	movs	r3, #3
3418d91a:	e015      	b.n	3418d948 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418d91c:	4b0c      	ldr	r3, [pc, #48]	@ (3418d950 <RCC_PLL_Config+0x344>)
3418d91e:	685a      	ldr	r2, [r3, #4]
3418d920:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d924:	687b      	ldr	r3, [r7, #4]
3418d926:	fa01 f303 	lsl.w	r3, r1, r3
3418d92a:	401a      	ands	r2, r3
3418d92c:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d930:	687b      	ldr	r3, [r7, #4]
3418d932:	fa01 f303 	lsl.w	r3, r1, r3
3418d936:	429a      	cmp	r2, r3
3418d938:	d0e7      	beq.n	3418d90a <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418d93a:	69bb      	ldr	r3, [r7, #24]
3418d93c:	681b      	ldr	r3, [r3, #0]
3418d93e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418d942:	69bb      	ldr	r3, [r7, #24]
3418d944:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
3418d946:	7ffb      	ldrb	r3, [r7, #31]
}
3418d948:	4618      	mov	r0, r3
3418d94a:	3720      	adds	r7, #32
3418d94c:	46bd      	mov	sp, r7
3418d94e:	bd80      	pop	{r7, pc}
3418d950:	56028000 	.word	0x56028000

3418d954 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
3418d954:	b580      	push	{r7, lr}
3418d956:	b084      	sub	sp, #16
3418d958:	af00      	add	r7, sp, #0
3418d95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
3418d95c:	2300      	movs	r3, #0
3418d95e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3418d960:	4a11      	ldr	r2, [pc, #68]	@ (3418d9a8 <RCC_PLL_Enable+0x54>)
3418d962:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d966:	687b      	ldr	r3, [r7, #4]
3418d968:	fa01 f303 	lsl.w	r3, r1, r3
3418d96c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3418d970:	f7f6 fde6 	bl	34184540 <HAL_GetTick>
3418d974:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418d976:	e008      	b.n	3418d98a <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418d978:	f7f6 fde2 	bl	34184540 <HAL_GetTick>
3418d97c:	4602      	mov	r2, r0
3418d97e:	68bb      	ldr	r3, [r7, #8]
3418d980:	1ad3      	subs	r3, r2, r3
3418d982:	2b01      	cmp	r3, #1
3418d984:	d901      	bls.n	3418d98a <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418d986:	2303      	movs	r3, #3
3418d988:	e00a      	b.n	3418d9a0 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418d98a:	4b07      	ldr	r3, [pc, #28]	@ (3418d9a8 <RCC_PLL_Enable+0x54>)
3418d98c:	685a      	ldr	r2, [r3, #4]
3418d98e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418d992:	687b      	ldr	r3, [r7, #4]
3418d994:	fa01 f303 	lsl.w	r3, r1, r3
3418d998:	4013      	ands	r3, r2
3418d99a:	2b00      	cmp	r3, #0
3418d99c:	d0ec      	beq.n	3418d978 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3418d99e:	7bfb      	ldrb	r3, [r7, #15]
}
3418d9a0:	4618      	mov	r0, r3
3418d9a2:	3710      	adds	r7, #16
3418d9a4:	46bd      	mov	sp, r7
3418d9a6:	bd80      	pop	{r7, pc}
3418d9a8:	56028000 	.word	0x56028000

3418d9ac <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3418d9ac:	b480      	push	{r7}
3418d9ae:	b089      	sub	sp, #36	@ 0x24
3418d9b0:	af00      	add	r7, sp, #0
3418d9b2:	6078      	str	r0, [r7, #4]
3418d9b4:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3418d9b6:	2300      	movs	r3, #0
3418d9b8:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418d9ba:	687b      	ldr	r3, [r7, #4]
3418d9bc:	011a      	lsls	r2, r3, #4
3418d9be:	4b34      	ldr	r3, [pc, #208]	@ (3418da90 <RCC_PLL_IsNewConfig+0xe4>)
3418d9c0:	4413      	add	r3, r2
3418d9c2:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3418d9c4:	687b      	ldr	r3, [r7, #4]
3418d9c6:	011a      	lsls	r2, r3, #4
3418d9c8:	4b32      	ldr	r3, [pc, #200]	@ (3418da94 <RCC_PLL_IsNewConfig+0xe8>)
3418d9ca:	4413      	add	r3, r2
3418d9cc:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418d9ce:	687b      	ldr	r3, [r7, #4]
3418d9d0:	011a      	lsls	r2, r3, #4
3418d9d2:	4b31      	ldr	r3, [pc, #196]	@ (3418da98 <RCC_PLL_IsNewConfig+0xec>)
3418d9d4:	4413      	add	r3, r2
3418d9d6:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418d9d8:	697b      	ldr	r3, [r7, #20]
3418d9da:	681b      	ldr	r3, [r3, #0]
3418d9dc:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
3418d9e0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
3418d9e4:	683a      	ldr	r2, [r7, #0]
3418d9e6:	6851      	ldr	r1, [r2, #4]
3418d9e8:	683a      	ldr	r2, [r7, #0]
3418d9ea:	6892      	ldr	r2, [r2, #8]
3418d9ec:	0512      	lsls	r2, r2, #20
3418d9ee:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3418d9f0:	683a      	ldr	r2, [r7, #0]
3418d9f2:	6912      	ldr	r2, [r2, #16]
3418d9f4:	0212      	lsls	r2, r2, #8
3418d9f6:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418d9f8:	4293      	cmp	r3, r2
3418d9fa:	d002      	beq.n	3418da02 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
3418d9fc:	2301      	movs	r3, #1
3418d9fe:	61fb      	str	r3, [r7, #28]
3418da00:	e03e      	b.n	3418da80 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418da02:	693b      	ldr	r3, [r7, #16]
3418da04:	681b      	ldr	r3, [r3, #0]
3418da06:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
3418da0a:	683b      	ldr	r3, [r7, #0]
3418da0c:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418da0e:	429a      	cmp	r2, r3
3418da10:	d002      	beq.n	3418da18 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3418da12:	2301      	movs	r3, #1
3418da14:	61fb      	str	r3, [r7, #28]
3418da16:	e033      	b.n	3418da80 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418da18:	68fb      	ldr	r3, [r7, #12]
3418da1a:	681b      	ldr	r3, [r3, #0]
3418da1c:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3418da20:	683b      	ldr	r3, [r7, #0]
3418da22:	695b      	ldr	r3, [r3, #20]
3418da24:	06d9      	lsls	r1, r3, #27
3418da26:	683b      	ldr	r3, [r7, #0]
3418da28:	699b      	ldr	r3, [r3, #24]
3418da2a:	061b      	lsls	r3, r3, #24
3418da2c:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418da2e:	429a      	cmp	r2, r3
3418da30:	d002      	beq.n	3418da38 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3418da32:	2301      	movs	r3, #1
3418da34:	61fb      	str	r3, [r7, #28]
3418da36:	e023      	b.n	3418da80 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418da38:	4b18      	ldr	r3, [pc, #96]	@ (3418da9c <RCC_PLL_IsNewConfig+0xf0>)
3418da3a:	685a      	ldr	r2, [r3, #4]
3418da3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418da40:	687b      	ldr	r3, [r7, #4]
3418da42:	fa01 f303 	lsl.w	r3, r1, r3
3418da46:	401a      	ands	r2, r3
3418da48:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418da4c:	687b      	ldr	r3, [r7, #4]
3418da4e:	fa01 f303 	lsl.w	r3, r1, r3
3418da52:	429a      	cmp	r2, r3
3418da54:	d102      	bne.n	3418da5c <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3418da56:	2302      	movs	r3, #2
3418da58:	61bb      	str	r3, [r7, #24]
3418da5a:	e00a      	b.n	3418da72 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3418da5c:	697b      	ldr	r3, [r7, #20]
3418da5e:	681b      	ldr	r3, [r3, #0]
3418da60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418da64:	2b00      	cmp	r3, #0
3418da66:	d002      	beq.n	3418da6e <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418da68:	2303      	movs	r3, #3
3418da6a:	61bb      	str	r3, [r7, #24]
3418da6c:	e001      	b.n	3418da72 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3418da6e:	2301      	movs	r3, #1
3418da70:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3418da72:	683b      	ldr	r3, [r7, #0]
3418da74:	681b      	ldr	r3, [r3, #0]
3418da76:	69ba      	ldr	r2, [r7, #24]
3418da78:	429a      	cmp	r2, r3
3418da7a:	d001      	beq.n	3418da80 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
3418da7c:	2301      	movs	r3, #1
3418da7e:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
3418da80:	69fb      	ldr	r3, [r7, #28]
}
3418da82:	4618      	mov	r0, r3
3418da84:	3724      	adds	r7, #36	@ 0x24
3418da86:	46bd      	mov	sp, r7
3418da88:	f85d 7b04 	ldr.w	r7, [sp], #4
3418da8c:	4770      	bx	lr
3418da8e:	bf00      	nop
3418da90:	56028080 	.word	0x56028080
3418da94:	56028084 	.word	0x56028084
3418da98:	56028088 	.word	0x56028088
3418da9c:	56028000 	.word	0x56028000

3418daa0 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
3418daa0:	b580      	push	{r7, lr}
3418daa2:	b084      	sub	sp, #16
3418daa4:	af00      	add	r7, sp, #0
3418daa6:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418daa8:	2301      	movs	r3, #1
3418daaa:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
3418daac:	687b      	ldr	r3, [r7, #4]
3418daae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dab2:	d01b      	beq.n	3418daec <RCC_PLL_Source_IsReady+0x4c>
3418dab4:	687b      	ldr	r3, [r7, #4]
3418dab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418daba:	d81f      	bhi.n	3418dafc <RCC_PLL_Source_IsReady+0x5c>
3418dabc:	687b      	ldr	r3, [r7, #4]
3418dabe:	2b00      	cmp	r3, #0
3418dac0:	d004      	beq.n	3418dacc <RCC_PLL_Source_IsReady+0x2c>
3418dac2:	687b      	ldr	r3, [r7, #4]
3418dac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418dac8:	d008      	beq.n	3418dadc <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3418daca:	e017      	b.n	3418dafc <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
3418dacc:	f7fe f80e 	bl	3418baec <LL_RCC_HSI_IsReady>
3418dad0:	4603      	mov	r3, r0
3418dad2:	2b00      	cmp	r3, #0
3418dad4:	d114      	bne.n	3418db00 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3418dad6:	2300      	movs	r3, #0
3418dad8:	60fb      	str	r3, [r7, #12]
      break;
3418dada:	e011      	b.n	3418db00 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
3418dadc:	f7fe f86e 	bl	3418bbbc <LL_RCC_MSI_IsReady>
3418dae0:	4603      	mov	r3, r0
3418dae2:	2b00      	cmp	r3, #0
3418dae4:	d10e      	bne.n	3418db04 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418dae6:	2300      	movs	r3, #0
3418dae8:	60fb      	str	r3, [r7, #12]
      break;
3418daea:	e00b      	b.n	3418db04 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
3418daec:	f7fd ffce 	bl	3418ba8c <LL_RCC_HSE_IsReady>
3418daf0:	4603      	mov	r3, r0
3418daf2:	2b00      	cmp	r3, #0
3418daf4:	d108      	bne.n	3418db08 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3418daf6:	2300      	movs	r3, #0
3418daf8:	60fb      	str	r3, [r7, #12]
      break;
3418dafa:	e005      	b.n	3418db08 <RCC_PLL_Source_IsReady+0x68>
      break;
3418dafc:	bf00      	nop
3418dafe:	e004      	b.n	3418db0a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418db00:	bf00      	nop
3418db02:	e002      	b.n	3418db0a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418db04:	bf00      	nop
3418db06:	e000      	b.n	3418db0a <RCC_PLL_Source_IsReady+0x6a>
      break;
3418db08:	bf00      	nop
  }

  return ret;
3418db0a:	68fb      	ldr	r3, [r7, #12]
}
3418db0c:	4618      	mov	r0, r3
3418db0e:	3710      	adds	r7, #16
3418db10:	46bd      	mov	sp, r7
3418db12:	bd80      	pop	{r7, pc}

3418db14 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
3418db14:	b580      	push	{r7, lr}
3418db16:	b084      	sub	sp, #16
3418db18:	af00      	add	r7, sp, #0
3418db1a:	6078      	str	r0, [r7, #4]
3418db1c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
3418db1e:	2301      	movs	r3, #1
3418db20:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3418db22:	687b      	ldr	r3, [r7, #4]
3418db24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418db28:	d03a      	beq.n	3418dba0 <RCC_IC_CheckPLLSources+0x8c>
3418db2a:	687b      	ldr	r3, [r7, #4]
3418db2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418db30:	d843      	bhi.n	3418dbba <RCC_IC_CheckPLLSources+0xa6>
3418db32:	687b      	ldr	r3, [r7, #4]
3418db34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418db38:	d025      	beq.n	3418db86 <RCC_IC_CheckPLLSources+0x72>
3418db3a:	687b      	ldr	r3, [r7, #4]
3418db3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418db40:	d83b      	bhi.n	3418dbba <RCC_IC_CheckPLLSources+0xa6>
3418db42:	687b      	ldr	r3, [r7, #4]
3418db44:	2b00      	cmp	r3, #0
3418db46:	d004      	beq.n	3418db52 <RCC_IC_CheckPLLSources+0x3e>
3418db48:	687b      	ldr	r3, [r7, #4]
3418db4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418db4e:	d00d      	beq.n	3418db6c <RCC_IC_CheckPLLSources+0x58>
3418db50:	e033      	b.n	3418dbba <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418db52:	f7fe f901 	bl	3418bd58 <LL_RCC_PLL1_IsReady>
3418db56:	4603      	mov	r3, r0
3418db58:	2b00      	cmp	r3, #0
3418db5a:	d131      	bne.n	3418dbc0 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3418db5c:	f7fe f910 	bl	3418bd80 <LL_RCC_PLL1_IsEnabledBypass>
3418db60:	4603      	mov	r3, r0
3418db62:	2b00      	cmp	r3, #0
3418db64:	d12c      	bne.n	3418dbc0 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418db66:	2300      	movs	r3, #0
3418db68:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418db6a:	e029      	b.n	3418dbc0 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3418db6c:	f7fe f92a 	bl	3418bdc4 <LL_RCC_PLL2_IsReady>
3418db70:	4603      	mov	r3, r0
3418db72:	2b00      	cmp	r3, #0
3418db74:	d126      	bne.n	3418dbc4 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418db76:	f7fe f939 	bl	3418bdec <LL_RCC_PLL2_IsEnabledBypass>
3418db7a:	4603      	mov	r3, r0
3418db7c:	2b00      	cmp	r3, #0
3418db7e:	d121      	bne.n	3418dbc4 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
3418db80:	2300      	movs	r3, #0
3418db82:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418db84:	e01e      	b.n	3418dbc4 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418db86:	f7fe f953 	bl	3418be30 <LL_RCC_PLL3_IsReady>
3418db8a:	4603      	mov	r3, r0
3418db8c:	2b00      	cmp	r3, #0
3418db8e:	d11b      	bne.n	3418dbc8 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418db90:	f7fe f962 	bl	3418be58 <LL_RCC_PLL3_IsEnabledBypass>
3418db94:	4603      	mov	r3, r0
3418db96:	2b00      	cmp	r3, #0
3418db98:	d116      	bne.n	3418dbc8 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418db9a:	2300      	movs	r3, #0
3418db9c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418db9e:	e013      	b.n	3418dbc8 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418dba0:	f7fe f97c 	bl	3418be9c <LL_RCC_PLL4_IsReady>
3418dba4:	4603      	mov	r3, r0
3418dba6:	2b00      	cmp	r3, #0
3418dba8:	d110      	bne.n	3418dbcc <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418dbaa:	f7fe f98b 	bl	3418bec4 <LL_RCC_PLL4_IsEnabledBypass>
3418dbae:	4603      	mov	r3, r0
3418dbb0:	2b00      	cmp	r3, #0
3418dbb2:	d10b      	bne.n	3418dbcc <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
3418dbb4:	2300      	movs	r3, #0
3418dbb6:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418dbb8:	e008      	b.n	3418dbcc <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3418dbba:	2300      	movs	r3, #0
3418dbbc:	60fb      	str	r3, [r7, #12]
      break;
3418dbbe:	e006      	b.n	3418dbce <RCC_IC_CheckPLLSources+0xba>
      break;
3418dbc0:	bf00      	nop
3418dbc2:	e004      	b.n	3418dbce <RCC_IC_CheckPLLSources+0xba>
      break;
3418dbc4:	bf00      	nop
3418dbc6:	e002      	b.n	3418dbce <RCC_IC_CheckPLLSources+0xba>
      break;
3418dbc8:	bf00      	nop
3418dbca:	e000      	b.n	3418dbce <RCC_IC_CheckPLLSources+0xba>
      break;
3418dbcc:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418dbce:	683b      	ldr	r3, [r7, #0]
3418dbd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dbd4:	d03a      	beq.n	3418dc4c <RCC_IC_CheckPLLSources+0x138>
3418dbd6:	683b      	ldr	r3, [r7, #0]
3418dbd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dbdc:	d843      	bhi.n	3418dc66 <RCC_IC_CheckPLLSources+0x152>
3418dbde:	683b      	ldr	r3, [r7, #0]
3418dbe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dbe4:	d025      	beq.n	3418dc32 <RCC_IC_CheckPLLSources+0x11e>
3418dbe6:	683b      	ldr	r3, [r7, #0]
3418dbe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dbec:	d83b      	bhi.n	3418dc66 <RCC_IC_CheckPLLSources+0x152>
3418dbee:	683b      	ldr	r3, [r7, #0]
3418dbf0:	2b00      	cmp	r3, #0
3418dbf2:	d004      	beq.n	3418dbfe <RCC_IC_CheckPLLSources+0xea>
3418dbf4:	683b      	ldr	r3, [r7, #0]
3418dbf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418dbfa:	d00d      	beq.n	3418dc18 <RCC_IC_CheckPLLSources+0x104>
3418dbfc:	e033      	b.n	3418dc66 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418dbfe:	f7fe f8ab 	bl	3418bd58 <LL_RCC_PLL1_IsReady>
3418dc02:	4603      	mov	r3, r0
3418dc04:	2b00      	cmp	r3, #0
3418dc06:	d131      	bne.n	3418dc6c <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3418dc08:	f7fe f8ba 	bl	3418bd80 <LL_RCC_PLL1_IsEnabledBypass>
3418dc0c:	4603      	mov	r3, r0
3418dc0e:	2b00      	cmp	r3, #0
3418dc10:	d12c      	bne.n	3418dc6c <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3418dc12:	2300      	movs	r3, #0
3418dc14:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418dc16:	e029      	b.n	3418dc6c <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3418dc18:	f7fe f8d4 	bl	3418bdc4 <LL_RCC_PLL2_IsReady>
3418dc1c:	4603      	mov	r3, r0
3418dc1e:	2b00      	cmp	r3, #0
3418dc20:	d126      	bne.n	3418dc70 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418dc22:	f7fe f8e3 	bl	3418bdec <LL_RCC_PLL2_IsEnabledBypass>
3418dc26:	4603      	mov	r3, r0
3418dc28:	2b00      	cmp	r3, #0
3418dc2a:	d121      	bne.n	3418dc70 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
3418dc2c:	2300      	movs	r3, #0
3418dc2e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418dc30:	e01e      	b.n	3418dc70 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418dc32:	f7fe f8fd 	bl	3418be30 <LL_RCC_PLL3_IsReady>
3418dc36:	4603      	mov	r3, r0
3418dc38:	2b00      	cmp	r3, #0
3418dc3a:	d11b      	bne.n	3418dc74 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3418dc3c:	f7fe f90c 	bl	3418be58 <LL_RCC_PLL3_IsEnabledBypass>
3418dc40:	4603      	mov	r3, r0
3418dc42:	2b00      	cmp	r3, #0
3418dc44:	d116      	bne.n	3418dc74 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3418dc46:	2300      	movs	r3, #0
3418dc48:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418dc4a:	e013      	b.n	3418dc74 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3418dc4c:	f7fe f926 	bl	3418be9c <LL_RCC_PLL4_IsReady>
3418dc50:	4603      	mov	r3, r0
3418dc52:	2b00      	cmp	r3, #0
3418dc54:	d110      	bne.n	3418dc78 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418dc56:	f7fe f935 	bl	3418bec4 <LL_RCC_PLL4_IsEnabledBypass>
3418dc5a:	4603      	mov	r3, r0
3418dc5c:	2b00      	cmp	r3, #0
3418dc5e:	d10b      	bne.n	3418dc78 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
3418dc60:	2300      	movs	r3, #0
3418dc62:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418dc64:	e008      	b.n	3418dc78 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418dc66:	2300      	movs	r3, #0
3418dc68:	60fb      	str	r3, [r7, #12]
      break;
3418dc6a:	e006      	b.n	3418dc7a <RCC_IC_CheckPLLSources+0x166>
      break;
3418dc6c:	bf00      	nop
3418dc6e:	e004      	b.n	3418dc7a <RCC_IC_CheckPLLSources+0x166>
      break;
3418dc70:	bf00      	nop
3418dc72:	e002      	b.n	3418dc7a <RCC_IC_CheckPLLSources+0x166>
      break;
3418dc74:	bf00      	nop
3418dc76:	e000      	b.n	3418dc7a <RCC_IC_CheckPLLSources+0x166>
      break;
3418dc78:	bf00      	nop
  }

  return ret;
3418dc7a:	68fb      	ldr	r3, [r7, #12]
}
3418dc7c:	4618      	mov	r0, r3
3418dc7e:	3710      	adds	r7, #16
3418dc80:	46bd      	mov	sp, r7
3418dc82:	bd80      	pop	{r7, pc}

3418dc84 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
3418dc84:	b480      	push	{r7}
3418dc86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418dc88:	4b05      	ldr	r3, [pc, #20]	@ (3418dca0 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418dc8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418dc8c:	4a04      	ldr	r2, [pc, #16]	@ (3418dca0 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418dc8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418dc92:	6553      	str	r3, [r2, #84]	@ 0x54
}
3418dc94:	bf00      	nop
3418dc96:	46bd      	mov	sp, r7
3418dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dc9c:	4770      	bx	lr
3418dc9e:	bf00      	nop
3418dca0:	56028000 	.word	0x56028000

3418dca4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
3418dca4:	b480      	push	{r7}
3418dca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418dca8:	4b05      	ldr	r3, [pc, #20]	@ (3418dcc0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418dcaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418dcac:	4a04      	ldr	r2, [pc, #16]	@ (3418dcc0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418dcae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418dcb2:	6553      	str	r3, [r2, #84]	@ 0x54
}
3418dcb4:	bf00      	nop
3418dcb6:	46bd      	mov	sp, r7
3418dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dcbc:	4770      	bx	lr
3418dcbe:	bf00      	nop
3418dcc0:	56028000 	.word	0x56028000

3418dcc4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
3418dcc4:	b480      	push	{r7}
3418dcc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3418dcc8:	4b06      	ldr	r3, [pc, #24]	@ (3418dce4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
3418dcca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418dccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418dcd0:	2b40      	cmp	r3, #64	@ 0x40
3418dcd2:	d101      	bne.n	3418dcd8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
3418dcd4:	2301      	movs	r3, #1
3418dcd6:	e000      	b.n	3418dcda <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
3418dcd8:	2300      	movs	r3, #0
}
3418dcda:	4618      	mov	r0, r3
3418dcdc:	46bd      	mov	sp, r7
3418dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dce2:	4770      	bx	lr
3418dce4:	56028000 	.word	0x56028000

3418dce8 <LL_RCC_HSE_IsReady>:
{
3418dce8:	b480      	push	{r7}
3418dcea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3418dcec:	4b06      	ldr	r3, [pc, #24]	@ (3418dd08 <LL_RCC_HSE_IsReady+0x20>)
3418dcee:	685b      	ldr	r3, [r3, #4]
3418dcf0:	f003 0310 	and.w	r3, r3, #16
3418dcf4:	2b00      	cmp	r3, #0
3418dcf6:	d001      	beq.n	3418dcfc <LL_RCC_HSE_IsReady+0x14>
3418dcf8:	2301      	movs	r3, #1
3418dcfa:	e000      	b.n	3418dcfe <LL_RCC_HSE_IsReady+0x16>
3418dcfc:	2300      	movs	r3, #0
}
3418dcfe:	4618      	mov	r0, r3
3418dd00:	46bd      	mov	sp, r7
3418dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd06:	4770      	bx	lr
3418dd08:	56028000 	.word	0x56028000

3418dd0c <LL_RCC_HSI_IsReady>:
{
3418dd0c:	b480      	push	{r7}
3418dd0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3418dd10:	4b06      	ldr	r3, [pc, #24]	@ (3418dd2c <LL_RCC_HSI_IsReady+0x20>)
3418dd12:	685b      	ldr	r3, [r3, #4]
3418dd14:	f003 0308 	and.w	r3, r3, #8
3418dd18:	2b00      	cmp	r3, #0
3418dd1a:	d001      	beq.n	3418dd20 <LL_RCC_HSI_IsReady+0x14>
3418dd1c:	2301      	movs	r3, #1
3418dd1e:	e000      	b.n	3418dd22 <LL_RCC_HSI_IsReady+0x16>
3418dd20:	2300      	movs	r3, #0
}
3418dd22:	4618      	mov	r0, r3
3418dd24:	46bd      	mov	sp, r7
3418dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd2a:	4770      	bx	lr
3418dd2c:	56028000 	.word	0x56028000

3418dd30 <LL_RCC_HSI_GetDivider>:
{
3418dd30:	b480      	push	{r7}
3418dd32:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418dd34:	4b04      	ldr	r3, [pc, #16]	@ (3418dd48 <LL_RCC_HSI_GetDivider+0x18>)
3418dd36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418dd38:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3418dd3c:	4618      	mov	r0, r3
3418dd3e:	46bd      	mov	sp, r7
3418dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd44:	4770      	bx	lr
3418dd46:	bf00      	nop
3418dd48:	56028000 	.word	0x56028000

3418dd4c <LL_RCC_MSI_IsReady>:
{
3418dd4c:	b480      	push	{r7}
3418dd4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418dd50:	4b06      	ldr	r3, [pc, #24]	@ (3418dd6c <LL_RCC_MSI_IsReady+0x20>)
3418dd52:	685b      	ldr	r3, [r3, #4]
3418dd54:	f003 0304 	and.w	r3, r3, #4
3418dd58:	2b00      	cmp	r3, #0
3418dd5a:	d001      	beq.n	3418dd60 <LL_RCC_MSI_IsReady+0x14>
3418dd5c:	2301      	movs	r3, #1
3418dd5e:	e000      	b.n	3418dd62 <LL_RCC_MSI_IsReady+0x16>
3418dd60:	2300      	movs	r3, #0
}
3418dd62:	4618      	mov	r0, r3
3418dd64:	46bd      	mov	sp, r7
3418dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd6a:	4770      	bx	lr
3418dd6c:	56028000 	.word	0x56028000

3418dd70 <LL_RCC_MSI_GetFrequency>:
{
3418dd70:	b480      	push	{r7}
3418dd72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418dd74:	4b04      	ldr	r3, [pc, #16]	@ (3418dd88 <LL_RCC_MSI_GetFrequency+0x18>)
3418dd76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dd78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3418dd7c:	4618      	mov	r0, r3
3418dd7e:	46bd      	mov	sp, r7
3418dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd84:	4770      	bx	lr
3418dd86:	bf00      	nop
3418dd88:	56028000 	.word	0x56028000

3418dd8c <LL_RCC_LSE_IsReady>:
{
3418dd8c:	b480      	push	{r7}
3418dd8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3418dd90:	4b06      	ldr	r3, [pc, #24]	@ (3418ddac <LL_RCC_LSE_IsReady+0x20>)
3418dd92:	685b      	ldr	r3, [r3, #4]
3418dd94:	f003 0302 	and.w	r3, r3, #2
3418dd98:	2b00      	cmp	r3, #0
3418dd9a:	d001      	beq.n	3418dda0 <LL_RCC_LSE_IsReady+0x14>
3418dd9c:	2301      	movs	r3, #1
3418dd9e:	e000      	b.n	3418dda2 <LL_RCC_LSE_IsReady+0x16>
3418dda0:	2300      	movs	r3, #0
}
3418dda2:	4618      	mov	r0, r3
3418dda4:	46bd      	mov	sp, r7
3418dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ddaa:	4770      	bx	lr
3418ddac:	56028000 	.word	0x56028000

3418ddb0 <LL_RCC_LSI_IsReady>:
{
3418ddb0:	b480      	push	{r7}
3418ddb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3418ddb4:	4b04      	ldr	r3, [pc, #16]	@ (3418ddc8 <LL_RCC_LSI_IsReady+0x18>)
3418ddb6:	685b      	ldr	r3, [r3, #4]
3418ddb8:	f003 0301 	and.w	r3, r3, #1
}
3418ddbc:	4618      	mov	r0, r3
3418ddbe:	46bd      	mov	sp, r7
3418ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ddc4:	4770      	bx	lr
3418ddc6:	bf00      	nop
3418ddc8:	56028000 	.word	0x56028000

3418ddcc <LL_RCC_GetAHBPrescaler>:
{
3418ddcc:	b480      	push	{r7}
3418ddce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418ddd0:	4b04      	ldr	r3, [pc, #16]	@ (3418dde4 <LL_RCC_GetAHBPrescaler+0x18>)
3418ddd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ddd4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
3418ddd8:	4618      	mov	r0, r3
3418ddda:	46bd      	mov	sp, r7
3418dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dde0:	4770      	bx	lr
3418dde2:	bf00      	nop
3418dde4:	56028000 	.word	0x56028000

3418dde8 <LL_RCC_GetAPB1Prescaler>:
{
3418dde8:	b480      	push	{r7}
3418ddea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3418ddec:	4b04      	ldr	r3, [pc, #16]	@ (3418de00 <LL_RCC_GetAPB1Prescaler+0x18>)
3418ddee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ddf0:	f003 0307 	and.w	r3, r3, #7
}
3418ddf4:	4618      	mov	r0, r3
3418ddf6:	46bd      	mov	sp, r7
3418ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ddfc:	4770      	bx	lr
3418ddfe:	bf00      	nop
3418de00:	56028000 	.word	0x56028000

3418de04 <LL_RCC_GetAPB2Prescaler>:
{
3418de04:	b480      	push	{r7}
3418de06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3418de08:	4b04      	ldr	r3, [pc, #16]	@ (3418de1c <LL_RCC_GetAPB2Prescaler+0x18>)
3418de0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418de0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3418de10:	4618      	mov	r0, r3
3418de12:	46bd      	mov	sp, r7
3418de14:	f85d 7b04 	ldr.w	r7, [sp], #4
3418de18:	4770      	bx	lr
3418de1a:	bf00      	nop
3418de1c:	56028000 	.word	0x56028000

3418de20 <LL_RCC_GetAPB4Prescaler>:
{
3418de20:	b480      	push	{r7}
3418de22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3418de24:	4b04      	ldr	r3, [pc, #16]	@ (3418de38 <LL_RCC_GetAPB4Prescaler+0x18>)
3418de26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418de28:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
3418de2c:	4618      	mov	r0, r3
3418de2e:	46bd      	mov	sp, r7
3418de30:	f85d 7b04 	ldr.w	r7, [sp], #4
3418de34:	4770      	bx	lr
3418de36:	bf00      	nop
3418de38:	56028000 	.word	0x56028000

3418de3c <LL_RCC_GetAPB5Prescaler>:
{
3418de3c:	b480      	push	{r7}
3418de3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
3418de40:	4b04      	ldr	r3, [pc, #16]	@ (3418de54 <LL_RCC_GetAPB5Prescaler+0x18>)
3418de42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418de44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
3418de48:	4618      	mov	r0, r3
3418de4a:	46bd      	mov	sp, r7
3418de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418de50:	4770      	bx	lr
3418de52:	bf00      	nop
3418de54:	56028000 	.word	0x56028000

3418de58 <LL_RCC_SetClockSource>:
{
3418de58:	b480      	push	{r7}
3418de5a:	b085      	sub	sp, #20
3418de5c:	af00      	add	r7, sp, #0
3418de5e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3418de60:	687b      	ldr	r3, [r7, #4]
3418de62:	b2da      	uxtb	r2, r3
3418de64:	4b10      	ldr	r3, [pc, #64]	@ (3418dea8 <LL_RCC_SetClockSource+0x50>)
3418de66:	4413      	add	r3, r2
3418de68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3418de6a:	68fb      	ldr	r3, [r7, #12]
3418de6c:	681a      	ldr	r2, [r3, #0]
3418de6e:	687b      	ldr	r3, [r7, #4]
3418de70:	0e19      	lsrs	r1, r3, #24
3418de72:	687b      	ldr	r3, [r7, #4]
3418de74:	0a1b      	lsrs	r3, r3, #8
3418de76:	f003 031f 	and.w	r3, r3, #31
3418de7a:	fa01 f303 	lsl.w	r3, r1, r3
3418de7e:	43db      	mvns	r3, r3
3418de80:	401a      	ands	r2, r3
3418de82:	687b      	ldr	r3, [r7, #4]
3418de84:	0c1b      	lsrs	r3, r3, #16
3418de86:	b2d9      	uxtb	r1, r3
3418de88:	687b      	ldr	r3, [r7, #4]
3418de8a:	0a1b      	lsrs	r3, r3, #8
3418de8c:	f003 031f 	and.w	r3, r3, #31
3418de90:	fa01 f303 	lsl.w	r3, r1, r3
3418de94:	431a      	orrs	r2, r3
3418de96:	68fb      	ldr	r3, [r7, #12]
3418de98:	601a      	str	r2, [r3, #0]
}
3418de9a:	bf00      	nop
3418de9c:	3714      	adds	r7, #20
3418de9e:	46bd      	mov	sp, r7
3418dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dea4:	4770      	bx	lr
3418dea6:	bf00      	nop
3418dea8:	56028144 	.word	0x56028144

3418deac <LL_RCC_GetADCPrescaler>:
{
3418deac:	b480      	push	{r7}
3418deae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3418deb0:	4b04      	ldr	r3, [pc, #16]	@ (3418dec4 <LL_RCC_GetADCPrescaler+0x18>)
3418deb2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418deb6:	0a1b      	lsrs	r3, r3, #8
3418deb8:	b2db      	uxtb	r3, r3
}
3418deba:	4618      	mov	r0, r3
3418debc:	46bd      	mov	sp, r7
3418debe:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dec2:	4770      	bx	lr
3418dec4:	56028000 	.word	0x56028000

3418dec8 <LL_RCC_SetADFClockSource>:
{
3418dec8:	b480      	push	{r7}
3418deca:	b083      	sub	sp, #12
3418decc:	af00      	add	r7, sp, #0
3418dece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3418ded0:	4b07      	ldr	r3, [pc, #28]	@ (3418def0 <LL_RCC_SetADFClockSource+0x28>)
3418ded2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418ded6:	f023 0207 	bic.w	r2, r3, #7
3418deda:	4905      	ldr	r1, [pc, #20]	@ (3418def0 <LL_RCC_SetADFClockSource+0x28>)
3418dedc:	687b      	ldr	r3, [r7, #4]
3418dede:	4313      	orrs	r3, r2
3418dee0:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3418dee4:	bf00      	nop
3418dee6:	370c      	adds	r7, #12
3418dee8:	46bd      	mov	sp, r7
3418deea:	f85d 7b04 	ldr.w	r7, [sp], #4
3418deee:	4770      	bx	lr
3418def0:	56028000 	.word	0x56028000

3418def4 <LL_RCC_SetCLKPClockSource>:
{
3418def4:	b480      	push	{r7}
3418def6:	b083      	sub	sp, #12
3418def8:	af00      	add	r7, sp, #0
3418defa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
3418defc:	4b07      	ldr	r3, [pc, #28]	@ (3418df1c <LL_RCC_SetCLKPClockSource+0x28>)
3418defe:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418df02:	f023 0207 	bic.w	r2, r3, #7
3418df06:	4905      	ldr	r1, [pc, #20]	@ (3418df1c <LL_RCC_SetCLKPClockSource+0x28>)
3418df08:	687b      	ldr	r3, [r7, #4]
3418df0a:	4313      	orrs	r3, r2
3418df0c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418df10:	bf00      	nop
3418df12:	370c      	adds	r7, #12
3418df14:	46bd      	mov	sp, r7
3418df16:	f85d 7b04 	ldr.w	r7, [sp], #4
3418df1a:	4770      	bx	lr
3418df1c:	56028000 	.word	0x56028000

3418df20 <LL_RCC_SetDCMIPPClockSource>:
{
3418df20:	b480      	push	{r7}
3418df22:	b083      	sub	sp, #12
3418df24:	af00      	add	r7, sp, #0
3418df26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
3418df28:	4b07      	ldr	r3, [pc, #28]	@ (3418df48 <LL_RCC_SetDCMIPPClockSource+0x28>)
3418df2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418df2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3418df32:	4905      	ldr	r1, [pc, #20]	@ (3418df48 <LL_RCC_SetDCMIPPClockSource+0x28>)
3418df34:	687b      	ldr	r3, [r7, #4]
3418df36:	4313      	orrs	r3, r2
3418df38:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3418df3c:	bf00      	nop
3418df3e:	370c      	adds	r7, #12
3418df40:	46bd      	mov	sp, r7
3418df42:	f85d 7b04 	ldr.w	r7, [sp], #4
3418df46:	4770      	bx	lr
3418df48:	56028000 	.word	0x56028000

3418df4c <LL_RCC_SetETHClockSource>:
{
3418df4c:	b480      	push	{r7}
3418df4e:	b083      	sub	sp, #12
3418df50:	af00      	add	r7, sp, #0
3418df52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3418df54:	4b07      	ldr	r3, [pc, #28]	@ (3418df74 <LL_RCC_SetETHClockSource+0x28>)
3418df56:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418df5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3418df5e:	4905      	ldr	r1, [pc, #20]	@ (3418df74 <LL_RCC_SetETHClockSource+0x28>)
3418df60:	687b      	ldr	r3, [r7, #4]
3418df62:	4313      	orrs	r3, r2
3418df64:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418df68:	bf00      	nop
3418df6a:	370c      	adds	r7, #12
3418df6c:	46bd      	mov	sp, r7
3418df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418df72:	4770      	bx	lr
3418df74:	56028000 	.word	0x56028000

3418df78 <LL_RCC_SetETHPHYInterface>:
{
3418df78:	b480      	push	{r7}
3418df7a:	b083      	sub	sp, #12
3418df7c:	af00      	add	r7, sp, #0
3418df7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
3418df80:	4b07      	ldr	r3, [pc, #28]	@ (3418dfa0 <LL_RCC_SetETHPHYInterface+0x28>)
3418df82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418df86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418df8a:	4905      	ldr	r1, [pc, #20]	@ (3418dfa0 <LL_RCC_SetETHPHYInterface+0x28>)
3418df8c:	687b      	ldr	r3, [r7, #4]
3418df8e:	4313      	orrs	r3, r2
3418df90:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418df94:	bf00      	nop
3418df96:	370c      	adds	r7, #12
3418df98:	46bd      	mov	sp, r7
3418df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418df9e:	4770      	bx	lr
3418dfa0:	56028000 	.word	0x56028000

3418dfa4 <LL_RCC_GetETH1PTPDivider>:
{
3418dfa4:	b480      	push	{r7}
3418dfa6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3418dfa8:	4b04      	ldr	r3, [pc, #16]	@ (3418dfbc <LL_RCC_GetETH1PTPDivider+0x18>)
3418dfaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418dfae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
3418dfb2:	4618      	mov	r0, r3
3418dfb4:	46bd      	mov	sp, r7
3418dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dfba:	4770      	bx	lr
3418dfbc:	56028000 	.word	0x56028000

3418dfc0 <LL_RCC_SetETHREFRXClockSource>:
{
3418dfc0:	b480      	push	{r7}
3418dfc2:	b083      	sub	sp, #12
3418dfc4:	af00      	add	r7, sp, #0
3418dfc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
3418dfc8:	4b07      	ldr	r3, [pc, #28]	@ (3418dfe8 <LL_RCC_SetETHREFRXClockSource+0x28>)
3418dfca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418dfce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3418dfd2:	4905      	ldr	r1, [pc, #20]	@ (3418dfe8 <LL_RCC_SetETHREFRXClockSource+0x28>)
3418dfd4:	687b      	ldr	r3, [r7, #4]
3418dfd6:	4313      	orrs	r3, r2
3418dfd8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418dfdc:	bf00      	nop
3418dfde:	370c      	adds	r7, #12
3418dfe0:	46bd      	mov	sp, r7
3418dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dfe6:	4770      	bx	lr
3418dfe8:	56028000 	.word	0x56028000

3418dfec <LL_RCC_SetETHREFTXClockSource>:
{
3418dfec:	b480      	push	{r7}
3418dfee:	b083      	sub	sp, #12
3418dff0:	af00      	add	r7, sp, #0
3418dff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
3418dff4:	4b07      	ldr	r3, [pc, #28]	@ (3418e014 <LL_RCC_SetETHREFTXClockSource+0x28>)
3418dff6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418dffa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3418dffe:	4905      	ldr	r1, [pc, #20]	@ (3418e014 <LL_RCC_SetETHREFTXClockSource+0x28>)
3418e000:	687b      	ldr	r3, [r7, #4]
3418e002:	4313      	orrs	r3, r2
3418e004:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3418e008:	bf00      	nop
3418e00a:	370c      	adds	r7, #12
3418e00c:	46bd      	mov	sp, r7
3418e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e012:	4770      	bx	lr
3418e014:	56028000 	.word	0x56028000

3418e018 <LL_RCC_SetFDCANClockSource>:
{
3418e018:	b480      	push	{r7}
3418e01a:	b083      	sub	sp, #12
3418e01c:	af00      	add	r7, sp, #0
3418e01e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3418e020:	4b07      	ldr	r3, [pc, #28]	@ (3418e040 <LL_RCC_SetFDCANClockSource+0x28>)
3418e022:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418e026:	f023 0203 	bic.w	r2, r3, #3
3418e02a:	4905      	ldr	r1, [pc, #20]	@ (3418e040 <LL_RCC_SetFDCANClockSource+0x28>)
3418e02c:	687b      	ldr	r3, [r7, #4]
3418e02e:	4313      	orrs	r3, r2
3418e030:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418e034:	bf00      	nop
3418e036:	370c      	adds	r7, #12
3418e038:	46bd      	mov	sp, r7
3418e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e03e:	4770      	bx	lr
3418e040:	56028000 	.word	0x56028000

3418e044 <LL_RCC_SetFMCClockSource>:
{
3418e044:	b480      	push	{r7}
3418e046:	b083      	sub	sp, #12
3418e048:	af00      	add	r7, sp, #0
3418e04a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
3418e04c:	4b07      	ldr	r3, [pc, #28]	@ (3418e06c <LL_RCC_SetFMCClockSource+0x28>)
3418e04e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418e052:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418e056:	4905      	ldr	r1, [pc, #20]	@ (3418e06c <LL_RCC_SetFMCClockSource+0x28>)
3418e058:	687b      	ldr	r3, [r7, #4]
3418e05a:	4313      	orrs	r3, r2
3418e05c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418e060:	bf00      	nop
3418e062:	370c      	adds	r7, #12
3418e064:	46bd      	mov	sp, r7
3418e066:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e06a:	4770      	bx	lr
3418e06c:	56028000 	.word	0x56028000

3418e070 <LL_RCC_SetI2CClockSource>:
{
3418e070:	b580      	push	{r7, lr}
3418e072:	b082      	sub	sp, #8
3418e074:	af00      	add	r7, sp, #0
3418e076:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e078:	6878      	ldr	r0, [r7, #4]
3418e07a:	f7ff feed 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e07e:	bf00      	nop
3418e080:	3708      	adds	r7, #8
3418e082:	46bd      	mov	sp, r7
3418e084:	bd80      	pop	{r7, pc}

3418e086 <LL_RCC_SetI3CClockSource>:
{
3418e086:	b580      	push	{r7, lr}
3418e088:	b082      	sub	sp, #8
3418e08a:	af00      	add	r7, sp, #0
3418e08c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e08e:	6878      	ldr	r0, [r7, #4]
3418e090:	f7ff fee2 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e094:	bf00      	nop
3418e096:	3708      	adds	r7, #8
3418e098:	46bd      	mov	sp, r7
3418e09a:	bd80      	pop	{r7, pc}

3418e09c <LL_RCC_SetLPTIMClockSource>:
{
3418e09c:	b580      	push	{r7, lr}
3418e09e:	b082      	sub	sp, #8
3418e0a0:	af00      	add	r7, sp, #0
3418e0a2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e0a4:	6878      	ldr	r0, [r7, #4]
3418e0a6:	f7ff fed7 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e0aa:	bf00      	nop
3418e0ac:	3708      	adds	r7, #8
3418e0ae:	46bd      	mov	sp, r7
3418e0b0:	bd80      	pop	{r7, pc}
	...

3418e0b4 <LL_RCC_SetLPUARTClockSource>:
{
3418e0b4:	b480      	push	{r7}
3418e0b6:	b083      	sub	sp, #12
3418e0b8:	af00      	add	r7, sp, #0
3418e0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3418e0bc:	4b07      	ldr	r3, [pc, #28]	@ (3418e0dc <LL_RCC_SetLPUARTClockSource+0x28>)
3418e0be:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418e0c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
3418e0c6:	4905      	ldr	r1, [pc, #20]	@ (3418e0dc <LL_RCC_SetLPUARTClockSource+0x28>)
3418e0c8:	687b      	ldr	r3, [r7, #4]
3418e0ca:	4313      	orrs	r3, r2
3418e0cc:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
3418e0d0:	bf00      	nop
3418e0d2:	370c      	adds	r7, #12
3418e0d4:	46bd      	mov	sp, r7
3418e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e0da:	4770      	bx	lr
3418e0dc:	56028000 	.word	0x56028000

3418e0e0 <LL_RCC_SetLTDCClockSource>:
{
3418e0e0:	b480      	push	{r7}
3418e0e2:	b083      	sub	sp, #12
3418e0e4:	af00      	add	r7, sp, #0
3418e0e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
3418e0e8:	4b07      	ldr	r3, [pc, #28]	@ (3418e108 <LL_RCC_SetLTDCClockSource+0x28>)
3418e0ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418e0ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418e0f2:	4905      	ldr	r1, [pc, #20]	@ (3418e108 <LL_RCC_SetLTDCClockSource+0x28>)
3418e0f4:	687b      	ldr	r3, [r7, #4]
3418e0f6:	4313      	orrs	r3, r2
3418e0f8:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
3418e0fc:	bf00      	nop
3418e0fe:	370c      	adds	r7, #12
3418e100:	46bd      	mov	sp, r7
3418e102:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e106:	4770      	bx	lr
3418e108:	56028000 	.word	0x56028000

3418e10c <LL_RCC_SetMDFClockSource>:
{
3418e10c:	b480      	push	{r7}
3418e10e:	b083      	sub	sp, #12
3418e110:	af00      	add	r7, sp, #0
3418e112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3418e114:	4b07      	ldr	r3, [pc, #28]	@ (3418e134 <LL_RCC_SetMDFClockSource+0x28>)
3418e116:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418e11a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418e11e:	4905      	ldr	r1, [pc, #20]	@ (3418e134 <LL_RCC_SetMDFClockSource+0x28>)
3418e120:	687b      	ldr	r3, [r7, #4]
3418e122:	4313      	orrs	r3, r2
3418e124:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
3418e128:	bf00      	nop
3418e12a:	370c      	adds	r7, #12
3418e12c:	46bd      	mov	sp, r7
3418e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e132:	4770      	bx	lr
3418e134:	56028000 	.word	0x56028000

3418e138 <LL_RCC_SetOTGPHYClockSource>:
{
3418e138:	b580      	push	{r7, lr}
3418e13a:	b082      	sub	sp, #8
3418e13c:	af00      	add	r7, sp, #0
3418e13e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e140:	6878      	ldr	r0, [r7, #4]
3418e142:	f7ff fe89 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e146:	bf00      	nop
3418e148:	3708      	adds	r7, #8
3418e14a:	46bd      	mov	sp, r7
3418e14c:	bd80      	pop	{r7, pc}

3418e14e <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3418e14e:	b580      	push	{r7, lr}
3418e150:	b082      	sub	sp, #8
3418e152:	af00      	add	r7, sp, #0
3418e154:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e156:	6878      	ldr	r0, [r7, #4]
3418e158:	f7ff fe7e 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e15c:	bf00      	nop
3418e15e:	3708      	adds	r7, #8
3418e160:	46bd      	mov	sp, r7
3418e162:	bd80      	pop	{r7, pc}

3418e164 <LL_RCC_SetPSSIClockSource>:
{
3418e164:	b480      	push	{r7}
3418e166:	b083      	sub	sp, #12
3418e168:	af00      	add	r7, sp, #0
3418e16a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3418e16c:	4b07      	ldr	r3, [pc, #28]	@ (3418e18c <LL_RCC_SetPSSIClockSource+0x28>)
3418e16e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e172:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418e176:	4905      	ldr	r1, [pc, #20]	@ (3418e18c <LL_RCC_SetPSSIClockSource+0x28>)
3418e178:	687b      	ldr	r3, [r7, #4]
3418e17a:	4313      	orrs	r3, r2
3418e17c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418e180:	bf00      	nop
3418e182:	370c      	adds	r7, #12
3418e184:	46bd      	mov	sp, r7
3418e186:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e18a:	4770      	bx	lr
3418e18c:	56028000 	.word	0x56028000

3418e190 <LL_RCC_SetSAIClockSource>:
{
3418e190:	b580      	push	{r7, lr}
3418e192:	b082      	sub	sp, #8
3418e194:	af00      	add	r7, sp, #0
3418e196:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e198:	6878      	ldr	r0, [r7, #4]
3418e19a:	f7ff fe5d 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e19e:	bf00      	nop
3418e1a0:	3708      	adds	r7, #8
3418e1a2:	46bd      	mov	sp, r7
3418e1a4:	bd80      	pop	{r7, pc}

3418e1a6 <LL_RCC_SetSDMMCClockSource>:
{
3418e1a6:	b580      	push	{r7, lr}
3418e1a8:	b082      	sub	sp, #8
3418e1aa:	af00      	add	r7, sp, #0
3418e1ac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e1ae:	6878      	ldr	r0, [r7, #4]
3418e1b0:	f7ff fe52 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e1b4:	bf00      	nop
3418e1b6:	3708      	adds	r7, #8
3418e1b8:	46bd      	mov	sp, r7
3418e1ba:	bd80      	pop	{r7, pc}

3418e1bc <LL_RCC_SetSPDIFRXClockSource>:
{
3418e1bc:	b480      	push	{r7}
3418e1be:	b083      	sub	sp, #12
3418e1c0:	af00      	add	r7, sp, #0
3418e1c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3418e1c4:	4b07      	ldr	r3, [pc, #28]	@ (3418e1e4 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418e1c6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418e1ca:	f023 0207 	bic.w	r2, r3, #7
3418e1ce:	4905      	ldr	r1, [pc, #20]	@ (3418e1e4 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418e1d0:	687b      	ldr	r3, [r7, #4]
3418e1d2:	4313      	orrs	r3, r2
3418e1d4:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
3418e1d8:	bf00      	nop
3418e1da:	370c      	adds	r7, #12
3418e1dc:	46bd      	mov	sp, r7
3418e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e1e2:	4770      	bx	lr
3418e1e4:	56028000 	.word	0x56028000

3418e1e8 <LL_RCC_SetSPIClockSource>:
{
3418e1e8:	b580      	push	{r7, lr}
3418e1ea:	b082      	sub	sp, #8
3418e1ec:	af00      	add	r7, sp, #0
3418e1ee:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e1f0:	6878      	ldr	r0, [r7, #4]
3418e1f2:	f7ff fe31 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e1f6:	bf00      	nop
3418e1f8:	3708      	adds	r7, #8
3418e1fa:	46bd      	mov	sp, r7
3418e1fc:	bd80      	pop	{r7, pc}

3418e1fe <LL_RCC_SetUSARTClockSource>:
{
3418e1fe:	b580      	push	{r7, lr}
3418e200:	b082      	sub	sp, #8
3418e202:	af00      	add	r7, sp, #0
3418e204:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e206:	6878      	ldr	r0, [r7, #4]
3418e208:	f7ff fe26 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e20c:	bf00      	nop
3418e20e:	3708      	adds	r7, #8
3418e210:	46bd      	mov	sp, r7
3418e212:	bd80      	pop	{r7, pc}

3418e214 <LL_RCC_SetXSPIClockSource>:
{
3418e214:	b580      	push	{r7, lr}
3418e216:	b082      	sub	sp, #8
3418e218:	af00      	add	r7, sp, #0
3418e21a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418e21c:	6878      	ldr	r0, [r7, #4]
3418e21e:	f7ff fe1b 	bl	3418de58 <LL_RCC_SetClockSource>
}
3418e222:	bf00      	nop
3418e224:	3708      	adds	r7, #8
3418e226:	46bd      	mov	sp, r7
3418e228:	bd80      	pop	{r7, pc}
	...

3418e22c <LL_RCC_GetClockSource>:
{
3418e22c:	b480      	push	{r7}
3418e22e:	b085      	sub	sp, #20
3418e230:	af00      	add	r7, sp, #0
3418e232:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3418e234:	687b      	ldr	r3, [r7, #4]
3418e236:	b2da      	uxtb	r2, r3
3418e238:	4b0e      	ldr	r3, [pc, #56]	@ (3418e274 <LL_RCC_GetClockSource+0x48>)
3418e23a:	4413      	add	r3, r2
3418e23c:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3418e23e:	68fb      	ldr	r3, [r7, #12]
3418e240:	681a      	ldr	r2, [r3, #0]
3418e242:	687b      	ldr	r3, [r7, #4]
3418e244:	0e19      	lsrs	r1, r3, #24
3418e246:	687b      	ldr	r3, [r7, #4]
3418e248:	0a1b      	lsrs	r3, r3, #8
3418e24a:	f003 031f 	and.w	r3, r3, #31
3418e24e:	fa01 f303 	lsl.w	r3, r1, r3
3418e252:	401a      	ands	r2, r3
3418e254:	687b      	ldr	r3, [r7, #4]
3418e256:	0a1b      	lsrs	r3, r3, #8
3418e258:	f003 031f 	and.w	r3, r3, #31
3418e25c:	fa22 f303 	lsr.w	r3, r2, r3
3418e260:	041a      	lsls	r2, r3, #16
3418e262:	687b      	ldr	r3, [r7, #4]
3418e264:	4313      	orrs	r3, r2
}
3418e266:	4618      	mov	r0, r3
3418e268:	3714      	adds	r7, #20
3418e26a:	46bd      	mov	sp, r7
3418e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e270:	4770      	bx	lr
3418e272:	bf00      	nop
3418e274:	56028144 	.word	0x56028144

3418e278 <LL_RCC_GetADCClockSource>:
{
3418e278:	b480      	push	{r7}
3418e27a:	b083      	sub	sp, #12
3418e27c:	af00      	add	r7, sp, #0
3418e27e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3418e280:	4b05      	ldr	r3, [pc, #20]	@ (3418e298 <LL_RCC_GetADCClockSource+0x20>)
3418e282:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418e286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3418e28a:	4618      	mov	r0, r3
3418e28c:	370c      	adds	r7, #12
3418e28e:	46bd      	mov	sp, r7
3418e290:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e294:	4770      	bx	lr
3418e296:	bf00      	nop
3418e298:	56028000 	.word	0x56028000

3418e29c <LL_RCC_GetADFClockSource>:
{
3418e29c:	b480      	push	{r7}
3418e29e:	b083      	sub	sp, #12
3418e2a0:	af00      	add	r7, sp, #0
3418e2a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3418e2a4:	4b05      	ldr	r3, [pc, #20]	@ (3418e2bc <LL_RCC_GetADFClockSource+0x20>)
3418e2a6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418e2aa:	f003 0307 	and.w	r3, r3, #7
}
3418e2ae:	4618      	mov	r0, r3
3418e2b0:	370c      	adds	r7, #12
3418e2b2:	46bd      	mov	sp, r7
3418e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e2b8:	4770      	bx	lr
3418e2ba:	bf00      	nop
3418e2bc:	56028000 	.word	0x56028000

3418e2c0 <LL_RCC_GetCLKPClockSource>:
{
3418e2c0:	b480      	push	{r7}
3418e2c2:	b083      	sub	sp, #12
3418e2c4:	af00      	add	r7, sp, #0
3418e2c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
3418e2c8:	4b05      	ldr	r3, [pc, #20]	@ (3418e2e0 <LL_RCC_GetCLKPClockSource+0x20>)
3418e2ca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e2ce:	f003 0307 	and.w	r3, r3, #7
}
3418e2d2:	4618      	mov	r0, r3
3418e2d4:	370c      	adds	r7, #12
3418e2d6:	46bd      	mov	sp, r7
3418e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e2dc:	4770      	bx	lr
3418e2de:	bf00      	nop
3418e2e0:	56028000 	.word	0x56028000

3418e2e4 <LL_RCC_GetDCMIPPClockSource>:
{
3418e2e4:	b480      	push	{r7}
3418e2e6:	b083      	sub	sp, #12
3418e2e8:	af00      	add	r7, sp, #0
3418e2ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
3418e2ec:	4b05      	ldr	r3, [pc, #20]	@ (3418e304 <LL_RCC_GetDCMIPPClockSource+0x20>)
3418e2ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418e2f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418e2f6:	4618      	mov	r0, r3
3418e2f8:	370c      	adds	r7, #12
3418e2fa:	46bd      	mov	sp, r7
3418e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e300:	4770      	bx	lr
3418e302:	bf00      	nop
3418e304:	56028000 	.word	0x56028000

3418e308 <LL_RCC_GetETHClockSource>:
{
3418e308:	b480      	push	{r7}
3418e30a:	b083      	sub	sp, #12
3418e30c:	af00      	add	r7, sp, #0
3418e30e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3418e310:	4b05      	ldr	r3, [pc, #20]	@ (3418e328 <LL_RCC_GetETHClockSource+0x20>)
3418e312:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418e316:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
3418e31a:	4618      	mov	r0, r3
3418e31c:	370c      	adds	r7, #12
3418e31e:	46bd      	mov	sp, r7
3418e320:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e324:	4770      	bx	lr
3418e326:	bf00      	nop
3418e328:	56028000 	.word	0x56028000

3418e32c <LL_RCC_GetETHPTPClockSource>:
{
3418e32c:	b480      	push	{r7}
3418e32e:	b083      	sub	sp, #12
3418e330:	af00      	add	r7, sp, #0
3418e332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3418e334:	4b05      	ldr	r3, [pc, #20]	@ (3418e34c <LL_RCC_GetETHPTPClockSource+0x20>)
3418e336:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418e33a:	f003 0303 	and.w	r3, r3, #3
}
3418e33e:	4618      	mov	r0, r3
3418e340:	370c      	adds	r7, #12
3418e342:	46bd      	mov	sp, r7
3418e344:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e348:	4770      	bx	lr
3418e34a:	bf00      	nop
3418e34c:	56028000 	.word	0x56028000

3418e350 <LL_RCC_GetFDCANClockSource>:
{
3418e350:	b480      	push	{r7}
3418e352:	b083      	sub	sp, #12
3418e354:	af00      	add	r7, sp, #0
3418e356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3418e358:	4b05      	ldr	r3, [pc, #20]	@ (3418e370 <LL_RCC_GetFDCANClockSource+0x20>)
3418e35a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418e35e:	f003 0303 	and.w	r3, r3, #3
}
3418e362:	4618      	mov	r0, r3
3418e364:	370c      	adds	r7, #12
3418e366:	46bd      	mov	sp, r7
3418e368:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e36c:	4770      	bx	lr
3418e36e:	bf00      	nop
3418e370:	56028000 	.word	0x56028000

3418e374 <LL_RCC_GetFMCClockSource>:
{
3418e374:	b480      	push	{r7}
3418e376:	b083      	sub	sp, #12
3418e378:	af00      	add	r7, sp, #0
3418e37a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
3418e37c:	4b05      	ldr	r3, [pc, #20]	@ (3418e394 <LL_RCC_GetFMCClockSource+0x20>)
3418e37e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418e382:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3418e386:	4618      	mov	r0, r3
3418e388:	370c      	adds	r7, #12
3418e38a:	46bd      	mov	sp, r7
3418e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e390:	4770      	bx	lr
3418e392:	bf00      	nop
3418e394:	56028000 	.word	0x56028000

3418e398 <LL_RCC_GetI2CClockSource>:
{
3418e398:	b580      	push	{r7, lr}
3418e39a:	b082      	sub	sp, #8
3418e39c:	af00      	add	r7, sp, #0
3418e39e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e3a0:	6878      	ldr	r0, [r7, #4]
3418e3a2:	f7ff ff43 	bl	3418e22c <LL_RCC_GetClockSource>
3418e3a6:	4603      	mov	r3, r0
}
3418e3a8:	4618      	mov	r0, r3
3418e3aa:	3708      	adds	r7, #8
3418e3ac:	46bd      	mov	sp, r7
3418e3ae:	bd80      	pop	{r7, pc}

3418e3b0 <LL_RCC_GetI3CClockSource>:
{
3418e3b0:	b580      	push	{r7, lr}
3418e3b2:	b082      	sub	sp, #8
3418e3b4:	af00      	add	r7, sp, #0
3418e3b6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e3b8:	6878      	ldr	r0, [r7, #4]
3418e3ba:	f7ff ff37 	bl	3418e22c <LL_RCC_GetClockSource>
3418e3be:	4603      	mov	r3, r0
}
3418e3c0:	4618      	mov	r0, r3
3418e3c2:	3708      	adds	r7, #8
3418e3c4:	46bd      	mov	sp, r7
3418e3c6:	bd80      	pop	{r7, pc}

3418e3c8 <LL_RCC_GetLPTIMClockSource>:
{
3418e3c8:	b580      	push	{r7, lr}
3418e3ca:	b082      	sub	sp, #8
3418e3cc:	af00      	add	r7, sp, #0
3418e3ce:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e3d0:	6878      	ldr	r0, [r7, #4]
3418e3d2:	f7ff ff2b 	bl	3418e22c <LL_RCC_GetClockSource>
3418e3d6:	4603      	mov	r3, r0
}
3418e3d8:	4618      	mov	r0, r3
3418e3da:	3708      	adds	r7, #8
3418e3dc:	46bd      	mov	sp, r7
3418e3de:	bd80      	pop	{r7, pc}

3418e3e0 <LL_RCC_GetLPUARTClockSource>:
{
3418e3e0:	b480      	push	{r7}
3418e3e2:	b083      	sub	sp, #12
3418e3e4:	af00      	add	r7, sp, #0
3418e3e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3418e3e8:	4b05      	ldr	r3, [pc, #20]	@ (3418e400 <LL_RCC_GetLPUARTClockSource+0x20>)
3418e3ea:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418e3ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
3418e3f2:	4618      	mov	r0, r3
3418e3f4:	370c      	adds	r7, #12
3418e3f6:	46bd      	mov	sp, r7
3418e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3fc:	4770      	bx	lr
3418e3fe:	bf00      	nop
3418e400:	56028000 	.word	0x56028000

3418e404 <LL_RCC_GetLTDCClockSource>:
{
3418e404:	b480      	push	{r7}
3418e406:	b083      	sub	sp, #12
3418e408:	af00      	add	r7, sp, #0
3418e40a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
3418e40c:	4b05      	ldr	r3, [pc, #20]	@ (3418e424 <LL_RCC_GetLTDCClockSource+0x20>)
3418e40e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418e412:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
3418e416:	4618      	mov	r0, r3
3418e418:	370c      	adds	r7, #12
3418e41a:	46bd      	mov	sp, r7
3418e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e420:	4770      	bx	lr
3418e422:	bf00      	nop
3418e424:	56028000 	.word	0x56028000

3418e428 <LL_RCC_GetMDFClockSource>:
{
3418e428:	b480      	push	{r7}
3418e42a:	b083      	sub	sp, #12
3418e42c:	af00      	add	r7, sp, #0
3418e42e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3418e430:	4b05      	ldr	r3, [pc, #20]	@ (3418e448 <LL_RCC_GetMDFClockSource+0x20>)
3418e432:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418e436:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
3418e43a:	4618      	mov	r0, r3
3418e43c:	370c      	adds	r7, #12
3418e43e:	46bd      	mov	sp, r7
3418e440:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e444:	4770      	bx	lr
3418e446:	bf00      	nop
3418e448:	56028000 	.word	0x56028000

3418e44c <LL_RCC_GetPSSIClockSource>:
{
3418e44c:	b480      	push	{r7}
3418e44e:	b083      	sub	sp, #12
3418e450:	af00      	add	r7, sp, #0
3418e452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3418e454:	4b05      	ldr	r3, [pc, #20]	@ (3418e46c <LL_RCC_GetPSSIClockSource+0x20>)
3418e456:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e45a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3418e45e:	4618      	mov	r0, r3
3418e460:	370c      	adds	r7, #12
3418e462:	46bd      	mov	sp, r7
3418e464:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e468:	4770      	bx	lr
3418e46a:	bf00      	nop
3418e46c:	56028000 	.word	0x56028000

3418e470 <LL_RCC_GetSAIClockSource>:
{
3418e470:	b580      	push	{r7, lr}
3418e472:	b082      	sub	sp, #8
3418e474:	af00      	add	r7, sp, #0
3418e476:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e478:	6878      	ldr	r0, [r7, #4]
3418e47a:	f7ff fed7 	bl	3418e22c <LL_RCC_GetClockSource>
3418e47e:	4603      	mov	r3, r0
}
3418e480:	4618      	mov	r0, r3
3418e482:	3708      	adds	r7, #8
3418e484:	46bd      	mov	sp, r7
3418e486:	bd80      	pop	{r7, pc}

3418e488 <LL_RCC_GetSDMMCClockSource>:
{
3418e488:	b580      	push	{r7, lr}
3418e48a:	b082      	sub	sp, #8
3418e48c:	af00      	add	r7, sp, #0
3418e48e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e490:	6878      	ldr	r0, [r7, #4]
3418e492:	f7ff fecb 	bl	3418e22c <LL_RCC_GetClockSource>
3418e496:	4603      	mov	r3, r0
}
3418e498:	4618      	mov	r0, r3
3418e49a:	3708      	adds	r7, #8
3418e49c:	46bd      	mov	sp, r7
3418e49e:	bd80      	pop	{r7, pc}

3418e4a0 <LL_RCC_GetSPDIFRXClockSource>:
{
3418e4a0:	b480      	push	{r7}
3418e4a2:	b083      	sub	sp, #12
3418e4a4:	af00      	add	r7, sp, #0
3418e4a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
3418e4a8:	4b05      	ldr	r3, [pc, #20]	@ (3418e4c0 <LL_RCC_GetSPDIFRXClockSource+0x20>)
3418e4aa:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3418e4ae:	f003 0307 	and.w	r3, r3, #7
}
3418e4b2:	4618      	mov	r0, r3
3418e4b4:	370c      	adds	r7, #12
3418e4b6:	46bd      	mov	sp, r7
3418e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e4bc:	4770      	bx	lr
3418e4be:	bf00      	nop
3418e4c0:	56028000 	.word	0x56028000

3418e4c4 <LL_RCC_GetSPIClockSource>:
{
3418e4c4:	b580      	push	{r7, lr}
3418e4c6:	b082      	sub	sp, #8
3418e4c8:	af00      	add	r7, sp, #0
3418e4ca:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e4cc:	6878      	ldr	r0, [r7, #4]
3418e4ce:	f7ff fead 	bl	3418e22c <LL_RCC_GetClockSource>
3418e4d2:	4603      	mov	r3, r0
}
3418e4d4:	4618      	mov	r0, r3
3418e4d6:	3708      	adds	r7, #8
3418e4d8:	46bd      	mov	sp, r7
3418e4da:	bd80      	pop	{r7, pc}

3418e4dc <LL_RCC_GetUSARTClockSource>:
{
3418e4dc:	b580      	push	{r7, lr}
3418e4de:	b082      	sub	sp, #8
3418e4e0:	af00      	add	r7, sp, #0
3418e4e2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e4e4:	6878      	ldr	r0, [r7, #4]
3418e4e6:	f7ff fea1 	bl	3418e22c <LL_RCC_GetClockSource>
3418e4ea:	4603      	mov	r3, r0
}
3418e4ec:	4618      	mov	r0, r3
3418e4ee:	3708      	adds	r7, #8
3418e4f0:	46bd      	mov	sp, r7
3418e4f2:	bd80      	pop	{r7, pc}

3418e4f4 <LL_RCC_GetUARTClockSource>:
{
3418e4f4:	b580      	push	{r7, lr}
3418e4f6:	b082      	sub	sp, #8
3418e4f8:	af00      	add	r7, sp, #0
3418e4fa:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e4fc:	6878      	ldr	r0, [r7, #4]
3418e4fe:	f7ff fe95 	bl	3418e22c <LL_RCC_GetClockSource>
3418e502:	4603      	mov	r3, r0
}
3418e504:	4618      	mov	r0, r3
3418e506:	3708      	adds	r7, #8
3418e508:	46bd      	mov	sp, r7
3418e50a:	bd80      	pop	{r7, pc}

3418e50c <LL_RCC_GetUSBClockSource>:
{
3418e50c:	b580      	push	{r7, lr}
3418e50e:	b082      	sub	sp, #8
3418e510:	af00      	add	r7, sp, #0
3418e512:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e514:	6878      	ldr	r0, [r7, #4]
3418e516:	f7ff fe89 	bl	3418e22c <LL_RCC_GetClockSource>
3418e51a:	4603      	mov	r3, r0
}
3418e51c:	4618      	mov	r0, r3
3418e51e:	3708      	adds	r7, #8
3418e520:	46bd      	mov	sp, r7
3418e522:	bd80      	pop	{r7, pc}

3418e524 <LL_RCC_GetXSPIClockSource>:
{
3418e524:	b580      	push	{r7, lr}
3418e526:	b082      	sub	sp, #8
3418e528:	af00      	add	r7, sp, #0
3418e52a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418e52c:	6878      	ldr	r0, [r7, #4]
3418e52e:	f7ff fe7d 	bl	3418e22c <LL_RCC_GetClockSource>
3418e532:	4603      	mov	r3, r0
}
3418e534:	4618      	mov	r0, r3
3418e536:	3708      	adds	r7, #8
3418e538:	46bd      	mov	sp, r7
3418e53a:	bd80      	pop	{r7, pc}

3418e53c <LL_RCC_SetRTCClockSource>:
{
3418e53c:	b480      	push	{r7}
3418e53e:	b083      	sub	sp, #12
3418e540:	af00      	add	r7, sp, #0
3418e542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3418e544:	4b07      	ldr	r3, [pc, #28]	@ (3418e564 <LL_RCC_SetRTCClockSource+0x28>)
3418e546:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e54a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
3418e54e:	4905      	ldr	r1, [pc, #20]	@ (3418e564 <LL_RCC_SetRTCClockSource+0x28>)
3418e550:	687b      	ldr	r3, [r7, #4]
3418e552:	4313      	orrs	r3, r2
3418e554:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418e558:	bf00      	nop
3418e55a:	370c      	adds	r7, #12
3418e55c:	46bd      	mov	sp, r7
3418e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e562:	4770      	bx	lr
3418e564:	56028000 	.word	0x56028000

3418e568 <LL_RCC_GetRTCClockSource>:
{
3418e568:	b480      	push	{r7}
3418e56a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3418e56c:	4b04      	ldr	r3, [pc, #16]	@ (3418e580 <LL_RCC_GetRTCClockSource+0x18>)
3418e56e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3418e576:	4618      	mov	r0, r3
3418e578:	46bd      	mov	sp, r7
3418e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e57e:	4770      	bx	lr
3418e580:	56028000 	.word	0x56028000

3418e584 <LL_RCC_SetRTC_HSEPrescaler>:
{
3418e584:	b480      	push	{r7}
3418e586:	b083      	sub	sp, #12
3418e588:	af00      	add	r7, sp, #0
3418e58a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3418e58c:	4b07      	ldr	r3, [pc, #28]	@ (3418e5ac <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418e58e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418e592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3418e596:	4905      	ldr	r1, [pc, #20]	@ (3418e5ac <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418e598:	687b      	ldr	r3, [r7, #4]
3418e59a:	4313      	orrs	r3, r2
3418e59c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418e5a0:	bf00      	nop
3418e5a2:	370c      	adds	r7, #12
3418e5a4:	46bd      	mov	sp, r7
3418e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e5aa:	4770      	bx	lr
3418e5ac:	56028000 	.word	0x56028000

3418e5b0 <LL_RCC_SetTIMPrescaler>:
{
3418e5b0:	b480      	push	{r7}
3418e5b2:	b083      	sub	sp, #12
3418e5b4:	af00      	add	r7, sp, #0
3418e5b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3418e5b8:	4b07      	ldr	r3, [pc, #28]	@ (3418e5d8 <LL_RCC_SetTIMPrescaler+0x28>)
3418e5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418e5bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418e5c0:	687b      	ldr	r3, [r7, #4]
3418e5c2:	061b      	lsls	r3, r3, #24
3418e5c4:	4904      	ldr	r1, [pc, #16]	@ (3418e5d8 <LL_RCC_SetTIMPrescaler+0x28>)
3418e5c6:	4313      	orrs	r3, r2
3418e5c8:	624b      	str	r3, [r1, #36]	@ 0x24
}
3418e5ca:	bf00      	nop
3418e5cc:	370c      	adds	r7, #12
3418e5ce:	46bd      	mov	sp, r7
3418e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e5d4:	4770      	bx	lr
3418e5d6:	bf00      	nop
3418e5d8:	56028000 	.word	0x56028000

3418e5dc <LL_RCC_GetTIMPrescaler>:
{
3418e5dc:	b480      	push	{r7}
3418e5de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3418e5e0:	4b04      	ldr	r3, [pc, #16]	@ (3418e5f4 <LL_RCC_GetTIMPrescaler+0x18>)
3418e5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418e5e4:	0e1b      	lsrs	r3, r3, #24
3418e5e6:	f003 0303 	and.w	r3, r3, #3
}
3418e5ea:	4618      	mov	r0, r3
3418e5ec:	46bd      	mov	sp, r7
3418e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e5f2:	4770      	bx	lr
3418e5f4:	56028000 	.word	0x56028000

3418e5f8 <LL_RCC_PLL1_GetSource>:
{
3418e5f8:	b480      	push	{r7}
3418e5fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3418e5fc:	4b04      	ldr	r3, [pc, #16]	@ (3418e610 <LL_RCC_PLL1_GetSource+0x18>)
3418e5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418e602:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418e606:	4618      	mov	r0, r3
3418e608:	46bd      	mov	sp, r7
3418e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e60e:	4770      	bx	lr
3418e610:	56028000 	.word	0x56028000

3418e614 <LL_RCC_PLL1_IsReady>:
{
3418e614:	b480      	push	{r7}
3418e616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418e618:	4b07      	ldr	r3, [pc, #28]	@ (3418e638 <LL_RCC_PLL1_IsReady+0x24>)
3418e61a:	685b      	ldr	r3, [r3, #4]
3418e61c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418e620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418e624:	d101      	bne.n	3418e62a <LL_RCC_PLL1_IsReady+0x16>
3418e626:	2301      	movs	r3, #1
3418e628:	e000      	b.n	3418e62c <LL_RCC_PLL1_IsReady+0x18>
3418e62a:	2300      	movs	r3, #0
}
3418e62c:	4618      	mov	r0, r3
3418e62e:	46bd      	mov	sp, r7
3418e630:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e634:	4770      	bx	lr
3418e636:	bf00      	nop
3418e638:	56028000 	.word	0x56028000

3418e63c <LL_RCC_PLL1_IsEnabledBypass>:
{
3418e63c:	b480      	push	{r7}
3418e63e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418e640:	4b07      	ldr	r3, [pc, #28]	@ (3418e660 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418e642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418e646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418e64a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e64e:	d101      	bne.n	3418e654 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418e650:	2301      	movs	r3, #1
3418e652:	e000      	b.n	3418e656 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3418e654:	2300      	movs	r3, #0
}
3418e656:	4618      	mov	r0, r3
3418e658:	46bd      	mov	sp, r7
3418e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e65e:	4770      	bx	lr
3418e660:	56028000 	.word	0x56028000

3418e664 <LL_RCC_PLL1_GetN>:
{
3418e664:	b480      	push	{r7}
3418e666:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3418e668:	4b05      	ldr	r3, [pc, #20]	@ (3418e680 <LL_RCC_PLL1_GetN+0x1c>)
3418e66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418e66e:	0a1b      	lsrs	r3, r3, #8
3418e670:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418e674:	4618      	mov	r0, r3
3418e676:	46bd      	mov	sp, r7
3418e678:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e67c:	4770      	bx	lr
3418e67e:	bf00      	nop
3418e680:	56028000 	.word	0x56028000

3418e684 <LL_RCC_PLL1_GetM>:
{
3418e684:	b480      	push	{r7}
3418e686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418e688:	4b05      	ldr	r3, [pc, #20]	@ (3418e6a0 <LL_RCC_PLL1_GetM+0x1c>)
3418e68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418e68e:	0d1b      	lsrs	r3, r3, #20
3418e690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418e694:	4618      	mov	r0, r3
3418e696:	46bd      	mov	sp, r7
3418e698:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e69c:	4770      	bx	lr
3418e69e:	bf00      	nop
3418e6a0:	56028000 	.word	0x56028000

3418e6a4 <LL_RCC_PLL1_GetP1>:
{
3418e6a4:	b480      	push	{r7}
3418e6a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3418e6a8:	4b05      	ldr	r3, [pc, #20]	@ (3418e6c0 <LL_RCC_PLL1_GetP1+0x1c>)
3418e6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418e6ae:	0edb      	lsrs	r3, r3, #27
3418e6b0:	f003 0307 	and.w	r3, r3, #7
}
3418e6b4:	4618      	mov	r0, r3
3418e6b6:	46bd      	mov	sp, r7
3418e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e6bc:	4770      	bx	lr
3418e6be:	bf00      	nop
3418e6c0:	56028000 	.word	0x56028000

3418e6c4 <LL_RCC_PLL1_GetP2>:
{
3418e6c4:	b480      	push	{r7}
3418e6c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3418e6c8:	4b05      	ldr	r3, [pc, #20]	@ (3418e6e0 <LL_RCC_PLL1_GetP2+0x1c>)
3418e6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418e6ce:	0e1b      	lsrs	r3, r3, #24
3418e6d0:	f003 0307 	and.w	r3, r3, #7
}
3418e6d4:	4618      	mov	r0, r3
3418e6d6:	46bd      	mov	sp, r7
3418e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e6dc:	4770      	bx	lr
3418e6de:	bf00      	nop
3418e6e0:	56028000 	.word	0x56028000

3418e6e4 <LL_RCC_PLL1P_IsEnabled>:
{
3418e6e4:	b480      	push	{r7}
3418e6e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3418e6e8:	4b07      	ldr	r3, [pc, #28]	@ (3418e708 <LL_RCC_PLL1P_IsEnabled+0x24>)
3418e6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418e6ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418e6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418e6f6:	d101      	bne.n	3418e6fc <LL_RCC_PLL1P_IsEnabled+0x18>
3418e6f8:	2301      	movs	r3, #1
3418e6fa:	e000      	b.n	3418e6fe <LL_RCC_PLL1P_IsEnabled+0x1a>
3418e6fc:	2300      	movs	r3, #0
}
3418e6fe:	4618      	mov	r0, r3
3418e700:	46bd      	mov	sp, r7
3418e702:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e706:	4770      	bx	lr
3418e708:	56028000 	.word	0x56028000

3418e70c <LL_RCC_PLL1_GetFRACN>:
{
3418e70c:	b480      	push	{r7}
3418e70e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3418e710:	4b04      	ldr	r3, [pc, #16]	@ (3418e724 <LL_RCC_PLL1_GetFRACN+0x18>)
3418e712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418e716:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418e71a:	4618      	mov	r0, r3
3418e71c:	46bd      	mov	sp, r7
3418e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e722:	4770      	bx	lr
3418e724:	56028000 	.word	0x56028000

3418e728 <LL_RCC_PLL2_GetSource>:
{
3418e728:	b480      	push	{r7}
3418e72a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3418e72c:	4b04      	ldr	r3, [pc, #16]	@ (3418e740 <LL_RCC_PLL2_GetSource+0x18>)
3418e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418e732:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418e736:	4618      	mov	r0, r3
3418e738:	46bd      	mov	sp, r7
3418e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e73e:	4770      	bx	lr
3418e740:	56028000 	.word	0x56028000

3418e744 <LL_RCC_PLL2_IsReady>:
{
3418e744:	b480      	push	{r7}
3418e746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418e748:	4b07      	ldr	r3, [pc, #28]	@ (3418e768 <LL_RCC_PLL2_IsReady+0x24>)
3418e74a:	685b      	ldr	r3, [r3, #4]
3418e74c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418e750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418e754:	d101      	bne.n	3418e75a <LL_RCC_PLL2_IsReady+0x16>
3418e756:	2301      	movs	r3, #1
3418e758:	e000      	b.n	3418e75c <LL_RCC_PLL2_IsReady+0x18>
3418e75a:	2300      	movs	r3, #0
}
3418e75c:	4618      	mov	r0, r3
3418e75e:	46bd      	mov	sp, r7
3418e760:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e764:	4770      	bx	lr
3418e766:	bf00      	nop
3418e768:	56028000 	.word	0x56028000

3418e76c <LL_RCC_PLL2_IsEnabledBypass>:
{
3418e76c:	b480      	push	{r7}
3418e76e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3418e770:	4b07      	ldr	r3, [pc, #28]	@ (3418e790 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3418e772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418e776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418e77a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e77e:	d101      	bne.n	3418e784 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3418e780:	2301      	movs	r3, #1
3418e782:	e000      	b.n	3418e786 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418e784:	2300      	movs	r3, #0
}
3418e786:	4618      	mov	r0, r3
3418e788:	46bd      	mov	sp, r7
3418e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e78e:	4770      	bx	lr
3418e790:	56028000 	.word	0x56028000

3418e794 <LL_RCC_PLL2_GetN>:
{
3418e794:	b480      	push	{r7}
3418e796:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418e798:	4b05      	ldr	r3, [pc, #20]	@ (3418e7b0 <LL_RCC_PLL2_GetN+0x1c>)
3418e79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418e79e:	0a1b      	lsrs	r3, r3, #8
3418e7a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418e7a4:	4618      	mov	r0, r3
3418e7a6:	46bd      	mov	sp, r7
3418e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e7ac:	4770      	bx	lr
3418e7ae:	bf00      	nop
3418e7b0:	56028000 	.word	0x56028000

3418e7b4 <LL_RCC_PLL2_GetM>:
{
3418e7b4:	b480      	push	{r7}
3418e7b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3418e7b8:	4b05      	ldr	r3, [pc, #20]	@ (3418e7d0 <LL_RCC_PLL2_GetM+0x1c>)
3418e7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418e7be:	0d1b      	lsrs	r3, r3, #20
3418e7c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418e7c4:	4618      	mov	r0, r3
3418e7c6:	46bd      	mov	sp, r7
3418e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e7cc:	4770      	bx	lr
3418e7ce:	bf00      	nop
3418e7d0:	56028000 	.word	0x56028000

3418e7d4 <LL_RCC_PLL2_GetP1>:
{
3418e7d4:	b480      	push	{r7}
3418e7d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3418e7d8:	4b05      	ldr	r3, [pc, #20]	@ (3418e7f0 <LL_RCC_PLL2_GetP1+0x1c>)
3418e7da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418e7de:	0edb      	lsrs	r3, r3, #27
3418e7e0:	f003 0307 	and.w	r3, r3, #7
}
3418e7e4:	4618      	mov	r0, r3
3418e7e6:	46bd      	mov	sp, r7
3418e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e7ec:	4770      	bx	lr
3418e7ee:	bf00      	nop
3418e7f0:	56028000 	.word	0x56028000

3418e7f4 <LL_RCC_PLL2_GetP2>:
{
3418e7f4:	b480      	push	{r7}
3418e7f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3418e7f8:	4b05      	ldr	r3, [pc, #20]	@ (3418e810 <LL_RCC_PLL2_GetP2+0x1c>)
3418e7fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418e7fe:	0e1b      	lsrs	r3, r3, #24
3418e800:	f003 0307 	and.w	r3, r3, #7
}
3418e804:	4618      	mov	r0, r3
3418e806:	46bd      	mov	sp, r7
3418e808:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e80c:	4770      	bx	lr
3418e80e:	bf00      	nop
3418e810:	56028000 	.word	0x56028000

3418e814 <LL_RCC_PLL2P_IsEnabled>:
{
3418e814:	b480      	push	{r7}
3418e816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3418e818:	4b07      	ldr	r3, [pc, #28]	@ (3418e838 <LL_RCC_PLL2P_IsEnabled+0x24>)
3418e81a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418e81e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418e822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418e826:	d101      	bne.n	3418e82c <LL_RCC_PLL2P_IsEnabled+0x18>
3418e828:	2301      	movs	r3, #1
3418e82a:	e000      	b.n	3418e82e <LL_RCC_PLL2P_IsEnabled+0x1a>
3418e82c:	2300      	movs	r3, #0
}
3418e82e:	4618      	mov	r0, r3
3418e830:	46bd      	mov	sp, r7
3418e832:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e836:	4770      	bx	lr
3418e838:	56028000 	.word	0x56028000

3418e83c <LL_RCC_PLL2_GetFRACN>:
{
3418e83c:	b480      	push	{r7}
3418e83e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3418e840:	4b04      	ldr	r3, [pc, #16]	@ (3418e854 <LL_RCC_PLL2_GetFRACN+0x18>)
3418e842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e846:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418e84a:	4618      	mov	r0, r3
3418e84c:	46bd      	mov	sp, r7
3418e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e852:	4770      	bx	lr
3418e854:	56028000 	.word	0x56028000

3418e858 <LL_RCC_PLL3_GetSource>:
{
3418e858:	b480      	push	{r7}
3418e85a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418e85c:	4b04      	ldr	r3, [pc, #16]	@ (3418e870 <LL_RCC_PLL3_GetSource+0x18>)
3418e85e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418e862:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418e866:	4618      	mov	r0, r3
3418e868:	46bd      	mov	sp, r7
3418e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e86e:	4770      	bx	lr
3418e870:	56028000 	.word	0x56028000

3418e874 <LL_RCC_PLL3_IsReady>:
{
3418e874:	b480      	push	{r7}
3418e876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418e878:	4b07      	ldr	r3, [pc, #28]	@ (3418e898 <LL_RCC_PLL3_IsReady+0x24>)
3418e87a:	685b      	ldr	r3, [r3, #4]
3418e87c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418e880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418e884:	d101      	bne.n	3418e88a <LL_RCC_PLL3_IsReady+0x16>
3418e886:	2301      	movs	r3, #1
3418e888:	e000      	b.n	3418e88c <LL_RCC_PLL3_IsReady+0x18>
3418e88a:	2300      	movs	r3, #0
}
3418e88c:	4618      	mov	r0, r3
3418e88e:	46bd      	mov	sp, r7
3418e890:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e894:	4770      	bx	lr
3418e896:	bf00      	nop
3418e898:	56028000 	.word	0x56028000

3418e89c <LL_RCC_PLL3_IsEnabledBypass>:
{
3418e89c:	b480      	push	{r7}
3418e89e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3418e8a0:	4b07      	ldr	r3, [pc, #28]	@ (3418e8c0 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3418e8a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418e8a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418e8aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e8ae:	d101      	bne.n	3418e8b4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3418e8b0:	2301      	movs	r3, #1
3418e8b2:	e000      	b.n	3418e8b6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3418e8b4:	2300      	movs	r3, #0
}
3418e8b6:	4618      	mov	r0, r3
3418e8b8:	46bd      	mov	sp, r7
3418e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e8be:	4770      	bx	lr
3418e8c0:	56028000 	.word	0x56028000

3418e8c4 <LL_RCC_PLL3_GetN>:
{
3418e8c4:	b480      	push	{r7}
3418e8c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3418e8c8:	4b05      	ldr	r3, [pc, #20]	@ (3418e8e0 <LL_RCC_PLL3_GetN+0x1c>)
3418e8ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418e8ce:	0a1b      	lsrs	r3, r3, #8
3418e8d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418e8d4:	4618      	mov	r0, r3
3418e8d6:	46bd      	mov	sp, r7
3418e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e8dc:	4770      	bx	lr
3418e8de:	bf00      	nop
3418e8e0:	56028000 	.word	0x56028000

3418e8e4 <LL_RCC_PLL3_GetM>:
{
3418e8e4:	b480      	push	{r7}
3418e8e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418e8e8:	4b05      	ldr	r3, [pc, #20]	@ (3418e900 <LL_RCC_PLL3_GetM+0x1c>)
3418e8ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418e8ee:	0d1b      	lsrs	r3, r3, #20
3418e8f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418e8f4:	4618      	mov	r0, r3
3418e8f6:	46bd      	mov	sp, r7
3418e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e8fc:	4770      	bx	lr
3418e8fe:	bf00      	nop
3418e900:	56028000 	.word	0x56028000

3418e904 <LL_RCC_PLL3_GetP1>:
{
3418e904:	b480      	push	{r7}
3418e906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3418e908:	4b05      	ldr	r3, [pc, #20]	@ (3418e920 <LL_RCC_PLL3_GetP1+0x1c>)
3418e90a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418e90e:	0edb      	lsrs	r3, r3, #27
3418e910:	f003 0307 	and.w	r3, r3, #7
}
3418e914:	4618      	mov	r0, r3
3418e916:	46bd      	mov	sp, r7
3418e918:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e91c:	4770      	bx	lr
3418e91e:	bf00      	nop
3418e920:	56028000 	.word	0x56028000

3418e924 <LL_RCC_PLL3_GetP2>:
{
3418e924:	b480      	push	{r7}
3418e926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3418e928:	4b05      	ldr	r3, [pc, #20]	@ (3418e940 <LL_RCC_PLL3_GetP2+0x1c>)
3418e92a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418e92e:	0e1b      	lsrs	r3, r3, #24
3418e930:	f003 0307 	and.w	r3, r3, #7
}
3418e934:	4618      	mov	r0, r3
3418e936:	46bd      	mov	sp, r7
3418e938:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e93c:	4770      	bx	lr
3418e93e:	bf00      	nop
3418e940:	56028000 	.word	0x56028000

3418e944 <LL_RCC_PLL3P_IsEnabled>:
{
3418e944:	b480      	push	{r7}
3418e946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3418e948:	4b07      	ldr	r3, [pc, #28]	@ (3418e968 <LL_RCC_PLL3P_IsEnabled+0x24>)
3418e94a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418e94e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418e952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418e956:	d101      	bne.n	3418e95c <LL_RCC_PLL3P_IsEnabled+0x18>
3418e958:	2301      	movs	r3, #1
3418e95a:	e000      	b.n	3418e95e <LL_RCC_PLL3P_IsEnabled+0x1a>
3418e95c:	2300      	movs	r3, #0
}
3418e95e:	4618      	mov	r0, r3
3418e960:	46bd      	mov	sp, r7
3418e962:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e966:	4770      	bx	lr
3418e968:	56028000 	.word	0x56028000

3418e96c <LL_RCC_PLL3_GetFRACN>:
{
3418e96c:	b480      	push	{r7}
3418e96e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418e970:	4b04      	ldr	r3, [pc, #16]	@ (3418e984 <LL_RCC_PLL3_GetFRACN+0x18>)
3418e972:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418e976:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418e97a:	4618      	mov	r0, r3
3418e97c:	46bd      	mov	sp, r7
3418e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e982:	4770      	bx	lr
3418e984:	56028000 	.word	0x56028000

3418e988 <LL_RCC_PLL4_GetSource>:
{
3418e988:	b480      	push	{r7}
3418e98a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418e98c:	4b04      	ldr	r3, [pc, #16]	@ (3418e9a0 <LL_RCC_PLL4_GetSource+0x18>)
3418e98e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418e992:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418e996:	4618      	mov	r0, r3
3418e998:	46bd      	mov	sp, r7
3418e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e99e:	4770      	bx	lr
3418e9a0:	56028000 	.word	0x56028000

3418e9a4 <LL_RCC_PLL4_IsReady>:
{
3418e9a4:	b480      	push	{r7}
3418e9a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418e9a8:	4b07      	ldr	r3, [pc, #28]	@ (3418e9c8 <LL_RCC_PLL4_IsReady+0x24>)
3418e9aa:	685b      	ldr	r3, [r3, #4]
3418e9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418e9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418e9b4:	d101      	bne.n	3418e9ba <LL_RCC_PLL4_IsReady+0x16>
3418e9b6:	2301      	movs	r3, #1
3418e9b8:	e000      	b.n	3418e9bc <LL_RCC_PLL4_IsReady+0x18>
3418e9ba:	2300      	movs	r3, #0
}
3418e9bc:	4618      	mov	r0, r3
3418e9be:	46bd      	mov	sp, r7
3418e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e9c4:	4770      	bx	lr
3418e9c6:	bf00      	nop
3418e9c8:	56028000 	.word	0x56028000

3418e9cc <LL_RCC_PLL4_IsEnabledBypass>:
{
3418e9cc:	b480      	push	{r7}
3418e9ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418e9d0:	4b07      	ldr	r3, [pc, #28]	@ (3418e9f0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418e9d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418e9d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418e9da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e9de:	d101      	bne.n	3418e9e4 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418e9e0:	2301      	movs	r3, #1
3418e9e2:	e000      	b.n	3418e9e6 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3418e9e4:	2300      	movs	r3, #0
}
3418e9e6:	4618      	mov	r0, r3
3418e9e8:	46bd      	mov	sp, r7
3418e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e9ee:	4770      	bx	lr
3418e9f0:	56028000 	.word	0x56028000

3418e9f4 <LL_RCC_PLL4_GetN>:
{
3418e9f4:	b480      	push	{r7}
3418e9f6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3418e9f8:	4b05      	ldr	r3, [pc, #20]	@ (3418ea10 <LL_RCC_PLL4_GetN+0x1c>)
3418e9fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418e9fe:	0a1b      	lsrs	r3, r3, #8
3418ea00:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3418ea04:	4618      	mov	r0, r3
3418ea06:	46bd      	mov	sp, r7
3418ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ea0c:	4770      	bx	lr
3418ea0e:	bf00      	nop
3418ea10:	56028000 	.word	0x56028000

3418ea14 <LL_RCC_PLL4_GetM>:
{
3418ea14:	b480      	push	{r7}
3418ea16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3418ea18:	4b05      	ldr	r3, [pc, #20]	@ (3418ea30 <LL_RCC_PLL4_GetM+0x1c>)
3418ea1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418ea1e:	0d1b      	lsrs	r3, r3, #20
3418ea20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3418ea24:	4618      	mov	r0, r3
3418ea26:	46bd      	mov	sp, r7
3418ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ea2c:	4770      	bx	lr
3418ea2e:	bf00      	nop
3418ea30:	56028000 	.word	0x56028000

3418ea34 <LL_RCC_PLL4_GetP1>:
{
3418ea34:	b480      	push	{r7}
3418ea36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3418ea38:	4b05      	ldr	r3, [pc, #20]	@ (3418ea50 <LL_RCC_PLL4_GetP1+0x1c>)
3418ea3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418ea3e:	0edb      	lsrs	r3, r3, #27
3418ea40:	f003 0307 	and.w	r3, r3, #7
}
3418ea44:	4618      	mov	r0, r3
3418ea46:	46bd      	mov	sp, r7
3418ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ea4c:	4770      	bx	lr
3418ea4e:	bf00      	nop
3418ea50:	56028000 	.word	0x56028000

3418ea54 <LL_RCC_PLL4_GetP2>:
{
3418ea54:	b480      	push	{r7}
3418ea56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418ea58:	4b05      	ldr	r3, [pc, #20]	@ (3418ea70 <LL_RCC_PLL4_GetP2+0x1c>)
3418ea5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418ea5e:	0e1b      	lsrs	r3, r3, #24
3418ea60:	f003 0307 	and.w	r3, r3, #7
}
3418ea64:	4618      	mov	r0, r3
3418ea66:	46bd      	mov	sp, r7
3418ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ea6c:	4770      	bx	lr
3418ea6e:	bf00      	nop
3418ea70:	56028000 	.word	0x56028000

3418ea74 <LL_RCC_PLL4P_IsEnabled>:
{
3418ea74:	b480      	push	{r7}
3418ea76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418ea78:	4b07      	ldr	r3, [pc, #28]	@ (3418ea98 <LL_RCC_PLL4P_IsEnabled+0x24>)
3418ea7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418ea7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3418ea82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418ea86:	d101      	bne.n	3418ea8c <LL_RCC_PLL4P_IsEnabled+0x18>
3418ea88:	2301      	movs	r3, #1
3418ea8a:	e000      	b.n	3418ea8e <LL_RCC_PLL4P_IsEnabled+0x1a>
3418ea8c:	2300      	movs	r3, #0
}
3418ea8e:	4618      	mov	r0, r3
3418ea90:	46bd      	mov	sp, r7
3418ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ea96:	4770      	bx	lr
3418ea98:	56028000 	.word	0x56028000

3418ea9c <LL_RCC_PLL4_GetFRACN>:
{
3418ea9c:	b480      	push	{r7}
3418ea9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418eaa0:	4b04      	ldr	r3, [pc, #16]	@ (3418eab4 <LL_RCC_PLL4_GetFRACN+0x18>)
3418eaa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418eaa6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418eaaa:	4618      	mov	r0, r3
3418eaac:	46bd      	mov	sp, r7
3418eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eab2:	4770      	bx	lr
3418eab4:	56028000 	.word	0x56028000

3418eab8 <LL_RCC_IC3_Enable>:
{
3418eab8:	b480      	push	{r7}
3418eaba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3418eabc:	4b04      	ldr	r3, [pc, #16]	@ (3418ead0 <LL_RCC_IC3_Enable+0x18>)
3418eabe:	2204      	movs	r2, #4
3418eac0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418eac4:	bf00      	nop
3418eac6:	46bd      	mov	sp, r7
3418eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eacc:	4770      	bx	lr
3418eace:	bf00      	nop
3418ead0:	56028000 	.word	0x56028000

3418ead4 <LL_RCC_IC3_IsEnabled>:
{
3418ead4:	b480      	push	{r7}
3418ead6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3418ead8:	4b07      	ldr	r3, [pc, #28]	@ (3418eaf8 <LL_RCC_IC3_IsEnabled+0x24>)
3418eada:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418eade:	f003 0304 	and.w	r3, r3, #4
3418eae2:	2b04      	cmp	r3, #4
3418eae4:	d101      	bne.n	3418eaea <LL_RCC_IC3_IsEnabled+0x16>
3418eae6:	2301      	movs	r3, #1
3418eae8:	e000      	b.n	3418eaec <LL_RCC_IC3_IsEnabled+0x18>
3418eaea:	2300      	movs	r3, #0
}
3418eaec:	4618      	mov	r0, r3
3418eaee:	46bd      	mov	sp, r7
3418eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eaf4:	4770      	bx	lr
3418eaf6:	bf00      	nop
3418eaf8:	56028000 	.word	0x56028000

3418eafc <LL_RCC_IC3_GetSource>:
{
3418eafc:	b480      	push	{r7}
3418eafe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3418eb00:	4b04      	ldr	r3, [pc, #16]	@ (3418eb14 <LL_RCC_IC3_GetSource+0x18>)
3418eb02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418eb06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418eb0a:	4618      	mov	r0, r3
3418eb0c:	46bd      	mov	sp, r7
3418eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eb12:	4770      	bx	lr
3418eb14:	56028000 	.word	0x56028000

3418eb18 <LL_RCC_IC3_GetDivider>:
{
3418eb18:	b480      	push	{r7}
3418eb1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3418eb1c:	4b05      	ldr	r3, [pc, #20]	@ (3418eb34 <LL_RCC_IC3_GetDivider+0x1c>)
3418eb1e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418eb22:	0c1b      	lsrs	r3, r3, #16
3418eb24:	b2db      	uxtb	r3, r3
3418eb26:	3301      	adds	r3, #1
}
3418eb28:	4618      	mov	r0, r3
3418eb2a:	46bd      	mov	sp, r7
3418eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eb30:	4770      	bx	lr
3418eb32:	bf00      	nop
3418eb34:	56028000 	.word	0x56028000

3418eb38 <LL_RCC_IC4_Enable>:
{
3418eb38:	b480      	push	{r7}
3418eb3a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3418eb3c:	4b04      	ldr	r3, [pc, #16]	@ (3418eb50 <LL_RCC_IC4_Enable+0x18>)
3418eb3e:	2208      	movs	r2, #8
3418eb40:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418eb44:	bf00      	nop
3418eb46:	46bd      	mov	sp, r7
3418eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eb4c:	4770      	bx	lr
3418eb4e:	bf00      	nop
3418eb50:	56028000 	.word	0x56028000

3418eb54 <LL_RCC_IC4_IsEnabled>:
{
3418eb54:	b480      	push	{r7}
3418eb56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3418eb58:	4b07      	ldr	r3, [pc, #28]	@ (3418eb78 <LL_RCC_IC4_IsEnabled+0x24>)
3418eb5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418eb5e:	f003 0308 	and.w	r3, r3, #8
3418eb62:	2b08      	cmp	r3, #8
3418eb64:	d101      	bne.n	3418eb6a <LL_RCC_IC4_IsEnabled+0x16>
3418eb66:	2301      	movs	r3, #1
3418eb68:	e000      	b.n	3418eb6c <LL_RCC_IC4_IsEnabled+0x18>
3418eb6a:	2300      	movs	r3, #0
}
3418eb6c:	4618      	mov	r0, r3
3418eb6e:	46bd      	mov	sp, r7
3418eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eb74:	4770      	bx	lr
3418eb76:	bf00      	nop
3418eb78:	56028000 	.word	0x56028000

3418eb7c <LL_RCC_IC4_GetSource>:
{
3418eb7c:	b480      	push	{r7}
3418eb7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3418eb80:	4b04      	ldr	r3, [pc, #16]	@ (3418eb94 <LL_RCC_IC4_GetSource+0x18>)
3418eb82:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418eb86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418eb8a:	4618      	mov	r0, r3
3418eb8c:	46bd      	mov	sp, r7
3418eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eb92:	4770      	bx	lr
3418eb94:	56028000 	.word	0x56028000

3418eb98 <LL_RCC_IC4_GetDivider>:
{
3418eb98:	b480      	push	{r7}
3418eb9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3418eb9c:	4b05      	ldr	r3, [pc, #20]	@ (3418ebb4 <LL_RCC_IC4_GetDivider+0x1c>)
3418eb9e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418eba2:	0c1b      	lsrs	r3, r3, #16
3418eba4:	b2db      	uxtb	r3, r3
3418eba6:	3301      	adds	r3, #1
}
3418eba8:	4618      	mov	r0, r3
3418ebaa:	46bd      	mov	sp, r7
3418ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ebb0:	4770      	bx	lr
3418ebb2:	bf00      	nop
3418ebb4:	56028000 	.word	0x56028000

3418ebb8 <LL_RCC_IC5_Enable>:
{
3418ebb8:	b480      	push	{r7}
3418ebba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3418ebbc:	4b04      	ldr	r3, [pc, #16]	@ (3418ebd0 <LL_RCC_IC5_Enable+0x18>)
3418ebbe:	2210      	movs	r2, #16
3418ebc0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ebc4:	bf00      	nop
3418ebc6:	46bd      	mov	sp, r7
3418ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ebcc:	4770      	bx	lr
3418ebce:	bf00      	nop
3418ebd0:	56028000 	.word	0x56028000

3418ebd4 <LL_RCC_IC5_IsEnabled>:
{
3418ebd4:	b480      	push	{r7}
3418ebd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3418ebd8:	4b07      	ldr	r3, [pc, #28]	@ (3418ebf8 <LL_RCC_IC5_IsEnabled+0x24>)
3418ebda:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ebde:	f003 0310 	and.w	r3, r3, #16
3418ebe2:	2b10      	cmp	r3, #16
3418ebe4:	d101      	bne.n	3418ebea <LL_RCC_IC5_IsEnabled+0x16>
3418ebe6:	2301      	movs	r3, #1
3418ebe8:	e000      	b.n	3418ebec <LL_RCC_IC5_IsEnabled+0x18>
3418ebea:	2300      	movs	r3, #0
}
3418ebec:	4618      	mov	r0, r3
3418ebee:	46bd      	mov	sp, r7
3418ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ebf4:	4770      	bx	lr
3418ebf6:	bf00      	nop
3418ebf8:	56028000 	.word	0x56028000

3418ebfc <LL_RCC_IC5_GetSource>:
{
3418ebfc:	b480      	push	{r7}
3418ebfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3418ec00:	4b04      	ldr	r3, [pc, #16]	@ (3418ec14 <LL_RCC_IC5_GetSource+0x18>)
3418ec02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418ec06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ec0a:	4618      	mov	r0, r3
3418ec0c:	46bd      	mov	sp, r7
3418ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec12:	4770      	bx	lr
3418ec14:	56028000 	.word	0x56028000

3418ec18 <LL_RCC_IC5_GetDivider>:
{
3418ec18:	b480      	push	{r7}
3418ec1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3418ec1c:	4b05      	ldr	r3, [pc, #20]	@ (3418ec34 <LL_RCC_IC5_GetDivider+0x1c>)
3418ec1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418ec22:	0c1b      	lsrs	r3, r3, #16
3418ec24:	b2db      	uxtb	r3, r3
3418ec26:	3301      	adds	r3, #1
}
3418ec28:	4618      	mov	r0, r3
3418ec2a:	46bd      	mov	sp, r7
3418ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec30:	4770      	bx	lr
3418ec32:	bf00      	nop
3418ec34:	56028000 	.word	0x56028000

3418ec38 <LL_RCC_IC7_Enable>:
{
3418ec38:	b480      	push	{r7}
3418ec3a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3418ec3c:	4b04      	ldr	r3, [pc, #16]	@ (3418ec50 <LL_RCC_IC7_Enable+0x18>)
3418ec3e:	2240      	movs	r2, #64	@ 0x40
3418ec40:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ec44:	bf00      	nop
3418ec46:	46bd      	mov	sp, r7
3418ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec4c:	4770      	bx	lr
3418ec4e:	bf00      	nop
3418ec50:	56028000 	.word	0x56028000

3418ec54 <LL_RCC_IC7_IsEnabled>:
{
3418ec54:	b480      	push	{r7}
3418ec56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3418ec58:	4b07      	ldr	r3, [pc, #28]	@ (3418ec78 <LL_RCC_IC7_IsEnabled+0x24>)
3418ec5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ec5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418ec62:	2b40      	cmp	r3, #64	@ 0x40
3418ec64:	d101      	bne.n	3418ec6a <LL_RCC_IC7_IsEnabled+0x16>
3418ec66:	2301      	movs	r3, #1
3418ec68:	e000      	b.n	3418ec6c <LL_RCC_IC7_IsEnabled+0x18>
3418ec6a:	2300      	movs	r3, #0
}
3418ec6c:	4618      	mov	r0, r3
3418ec6e:	46bd      	mov	sp, r7
3418ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec74:	4770      	bx	lr
3418ec76:	bf00      	nop
3418ec78:	56028000 	.word	0x56028000

3418ec7c <LL_RCC_IC7_GetSource>:
{
3418ec7c:	b480      	push	{r7}
3418ec7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3418ec80:	4b04      	ldr	r3, [pc, #16]	@ (3418ec94 <LL_RCC_IC7_GetSource+0x18>)
3418ec82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418ec86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ec8a:	4618      	mov	r0, r3
3418ec8c:	46bd      	mov	sp, r7
3418ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec92:	4770      	bx	lr
3418ec94:	56028000 	.word	0x56028000

3418ec98 <LL_RCC_IC7_GetDivider>:
{
3418ec98:	b480      	push	{r7}
3418ec9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
3418ec9c:	4b05      	ldr	r3, [pc, #20]	@ (3418ecb4 <LL_RCC_IC7_GetDivider+0x1c>)
3418ec9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418eca2:	0c1b      	lsrs	r3, r3, #16
3418eca4:	b2db      	uxtb	r3, r3
3418eca6:	3301      	adds	r3, #1
}
3418eca8:	4618      	mov	r0, r3
3418ecaa:	46bd      	mov	sp, r7
3418ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ecb0:	4770      	bx	lr
3418ecb2:	bf00      	nop
3418ecb4:	56028000 	.word	0x56028000

3418ecb8 <LL_RCC_IC8_Enable>:
{
3418ecb8:	b480      	push	{r7}
3418ecba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418ecbc:	4b04      	ldr	r3, [pc, #16]	@ (3418ecd0 <LL_RCC_IC8_Enable+0x18>)
3418ecbe:	2280      	movs	r2, #128	@ 0x80
3418ecc0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ecc4:	bf00      	nop
3418ecc6:	46bd      	mov	sp, r7
3418ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eccc:	4770      	bx	lr
3418ecce:	bf00      	nop
3418ecd0:	56028000 	.word	0x56028000

3418ecd4 <LL_RCC_IC8_IsEnabled>:
{
3418ecd4:	b480      	push	{r7}
3418ecd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
3418ecd8:	4b07      	ldr	r3, [pc, #28]	@ (3418ecf8 <LL_RCC_IC8_IsEnabled+0x24>)
3418ecda:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ecde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418ece2:	2b80      	cmp	r3, #128	@ 0x80
3418ece4:	d101      	bne.n	3418ecea <LL_RCC_IC8_IsEnabled+0x16>
3418ece6:	2301      	movs	r3, #1
3418ece8:	e000      	b.n	3418ecec <LL_RCC_IC8_IsEnabled+0x18>
3418ecea:	2300      	movs	r3, #0
}
3418ecec:	4618      	mov	r0, r3
3418ecee:	46bd      	mov	sp, r7
3418ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ecf4:	4770      	bx	lr
3418ecf6:	bf00      	nop
3418ecf8:	56028000 	.word	0x56028000

3418ecfc <LL_RCC_IC8_GetSource>:
{
3418ecfc:	b480      	push	{r7}
3418ecfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3418ed00:	4b04      	ldr	r3, [pc, #16]	@ (3418ed14 <LL_RCC_IC8_GetSource+0x18>)
3418ed02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ed06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ed0a:	4618      	mov	r0, r3
3418ed0c:	46bd      	mov	sp, r7
3418ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed12:	4770      	bx	lr
3418ed14:	56028000 	.word	0x56028000

3418ed18 <LL_RCC_IC8_GetDivider>:
{
3418ed18:	b480      	push	{r7}
3418ed1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
3418ed1c:	4b05      	ldr	r3, [pc, #20]	@ (3418ed34 <LL_RCC_IC8_GetDivider+0x1c>)
3418ed1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418ed22:	0c1b      	lsrs	r3, r3, #16
3418ed24:	b2db      	uxtb	r3, r3
3418ed26:	3301      	adds	r3, #1
}
3418ed28:	4618      	mov	r0, r3
3418ed2a:	46bd      	mov	sp, r7
3418ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed30:	4770      	bx	lr
3418ed32:	bf00      	nop
3418ed34:	56028000 	.word	0x56028000

3418ed38 <LL_RCC_IC9_Enable>:
{
3418ed38:	b480      	push	{r7}
3418ed3a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3418ed3c:	4b04      	ldr	r3, [pc, #16]	@ (3418ed50 <LL_RCC_IC9_Enable+0x18>)
3418ed3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418ed42:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ed46:	bf00      	nop
3418ed48:	46bd      	mov	sp, r7
3418ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed4e:	4770      	bx	lr
3418ed50:	56028000 	.word	0x56028000

3418ed54 <LL_RCC_IC9_IsEnabled>:
{
3418ed54:	b480      	push	{r7}
3418ed56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
3418ed58:	4b07      	ldr	r3, [pc, #28]	@ (3418ed78 <LL_RCC_IC9_IsEnabled+0x24>)
3418ed5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ed5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418ed62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418ed66:	d101      	bne.n	3418ed6c <LL_RCC_IC9_IsEnabled+0x18>
3418ed68:	2301      	movs	r3, #1
3418ed6a:	e000      	b.n	3418ed6e <LL_RCC_IC9_IsEnabled+0x1a>
3418ed6c:	2300      	movs	r3, #0
}
3418ed6e:	4618      	mov	r0, r3
3418ed70:	46bd      	mov	sp, r7
3418ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed76:	4770      	bx	lr
3418ed78:	56028000 	.word	0x56028000

3418ed7c <LL_RCC_IC9_GetSource>:
{
3418ed7c:	b480      	push	{r7}
3418ed7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3418ed80:	4b04      	ldr	r3, [pc, #16]	@ (3418ed94 <LL_RCC_IC9_GetSource+0x18>)
3418ed82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418ed86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ed8a:	4618      	mov	r0, r3
3418ed8c:	46bd      	mov	sp, r7
3418ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed92:	4770      	bx	lr
3418ed94:	56028000 	.word	0x56028000

3418ed98 <LL_RCC_IC9_GetDivider>:
{
3418ed98:	b480      	push	{r7}
3418ed9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
3418ed9c:	4b05      	ldr	r3, [pc, #20]	@ (3418edb4 <LL_RCC_IC9_GetDivider+0x1c>)
3418ed9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418eda2:	0c1b      	lsrs	r3, r3, #16
3418eda4:	b2db      	uxtb	r3, r3
3418eda6:	3301      	adds	r3, #1
}
3418eda8:	4618      	mov	r0, r3
3418edaa:	46bd      	mov	sp, r7
3418edac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418edb0:	4770      	bx	lr
3418edb2:	bf00      	nop
3418edb4:	56028000 	.word	0x56028000

3418edb8 <LL_RCC_IC10_Enable>:
{
3418edb8:	b480      	push	{r7}
3418edba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3418edbc:	4b04      	ldr	r3, [pc, #16]	@ (3418edd0 <LL_RCC_IC10_Enable+0x18>)
3418edbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418edc2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418edc6:	bf00      	nop
3418edc8:	46bd      	mov	sp, r7
3418edca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418edce:	4770      	bx	lr
3418edd0:	56028000 	.word	0x56028000

3418edd4 <LL_RCC_IC10_IsEnabled>:
{
3418edd4:	b480      	push	{r7}
3418edd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3418edd8:	4b07      	ldr	r3, [pc, #28]	@ (3418edf8 <LL_RCC_IC10_IsEnabled+0x24>)
3418edda:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418edde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418ede2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418ede6:	d101      	bne.n	3418edec <LL_RCC_IC10_IsEnabled+0x18>
3418ede8:	2301      	movs	r3, #1
3418edea:	e000      	b.n	3418edee <LL_RCC_IC10_IsEnabled+0x1a>
3418edec:	2300      	movs	r3, #0
}
3418edee:	4618      	mov	r0, r3
3418edf0:	46bd      	mov	sp, r7
3418edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418edf6:	4770      	bx	lr
3418edf8:	56028000 	.word	0x56028000

3418edfc <LL_RCC_IC10_GetSource>:
{
3418edfc:	b480      	push	{r7}
3418edfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3418ee00:	4b04      	ldr	r3, [pc, #16]	@ (3418ee14 <LL_RCC_IC10_GetSource+0x18>)
3418ee02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418ee06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ee0a:	4618      	mov	r0, r3
3418ee0c:	46bd      	mov	sp, r7
3418ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee12:	4770      	bx	lr
3418ee14:	56028000 	.word	0x56028000

3418ee18 <LL_RCC_IC10_GetDivider>:
{
3418ee18:	b480      	push	{r7}
3418ee1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3418ee1c:	4b05      	ldr	r3, [pc, #20]	@ (3418ee34 <LL_RCC_IC10_GetDivider+0x1c>)
3418ee1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418ee22:	0c1b      	lsrs	r3, r3, #16
3418ee24:	b2db      	uxtb	r3, r3
3418ee26:	3301      	adds	r3, #1
}
3418ee28:	4618      	mov	r0, r3
3418ee2a:	46bd      	mov	sp, r7
3418ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee30:	4770      	bx	lr
3418ee32:	bf00      	nop
3418ee34:	56028000 	.word	0x56028000

3418ee38 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
3418ee38:	b480      	push	{r7}
3418ee3a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
3418ee3c:	4b04      	ldr	r3, [pc, #16]	@ (3418ee50 <LL_RCC_IC12_Enable+0x18>)
3418ee3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418ee42:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ee46:	bf00      	nop
3418ee48:	46bd      	mov	sp, r7
3418ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee4e:	4770      	bx	lr
3418ee50:	56028000 	.word	0x56028000

3418ee54 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
3418ee54:	b480      	push	{r7}
3418ee56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
3418ee58:	4b07      	ldr	r3, [pc, #28]	@ (3418ee78 <LL_RCC_IC12_IsEnabled+0x24>)
3418ee5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ee5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418ee62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418ee66:	d101      	bne.n	3418ee6c <LL_RCC_IC12_IsEnabled+0x18>
3418ee68:	2301      	movs	r3, #1
3418ee6a:	e000      	b.n	3418ee6e <LL_RCC_IC12_IsEnabled+0x1a>
3418ee6c:	2300      	movs	r3, #0
}
3418ee6e:	4618      	mov	r0, r3
3418ee70:	46bd      	mov	sp, r7
3418ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee76:	4770      	bx	lr
3418ee78:	56028000 	.word	0x56028000

3418ee7c <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
3418ee7c:	b480      	push	{r7}
3418ee7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3418ee80:	4b04      	ldr	r3, [pc, #16]	@ (3418ee94 <LL_RCC_IC12_GetSource+0x18>)
3418ee82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418ee86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ee8a:	4618      	mov	r0, r3
3418ee8c:	46bd      	mov	sp, r7
3418ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ee92:	4770      	bx	lr
3418ee94:	56028000 	.word	0x56028000

3418ee98 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
3418ee98:	b480      	push	{r7}
3418ee9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3418ee9c:	4b05      	ldr	r3, [pc, #20]	@ (3418eeb4 <LL_RCC_IC12_GetDivider+0x1c>)
3418ee9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418eea2:	0c1b      	lsrs	r3, r3, #16
3418eea4:	b2db      	uxtb	r3, r3
3418eea6:	3301      	adds	r3, #1
}
3418eea8:	4618      	mov	r0, r3
3418eeaa:	46bd      	mov	sp, r7
3418eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eeb0:	4770      	bx	lr
3418eeb2:	bf00      	nop
3418eeb4:	56028000 	.word	0x56028000

3418eeb8 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
3418eeb8:	b480      	push	{r7}
3418eeba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3418eebc:	4b04      	ldr	r3, [pc, #16]	@ (3418eed0 <LL_RCC_IC13_Enable+0x18>)
3418eebe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418eec2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418eec6:	bf00      	nop
3418eec8:	46bd      	mov	sp, r7
3418eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eece:	4770      	bx	lr
3418eed0:	56028000 	.word	0x56028000

3418eed4 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
3418eed4:	b480      	push	{r7}
3418eed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3418eed8:	4b07      	ldr	r3, [pc, #28]	@ (3418eef8 <LL_RCC_IC13_IsEnabled+0x24>)
3418eeda:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418eede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418eee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418eee6:	d101      	bne.n	3418eeec <LL_RCC_IC13_IsEnabled+0x18>
3418eee8:	2301      	movs	r3, #1
3418eeea:	e000      	b.n	3418eeee <LL_RCC_IC13_IsEnabled+0x1a>
3418eeec:	2300      	movs	r3, #0
}
3418eeee:	4618      	mov	r0, r3
3418eef0:	46bd      	mov	sp, r7
3418eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eef6:	4770      	bx	lr
3418eef8:	56028000 	.word	0x56028000

3418eefc <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
3418eefc:	b480      	push	{r7}
3418eefe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3418ef00:	4b04      	ldr	r3, [pc, #16]	@ (3418ef14 <LL_RCC_IC13_GetSource+0x18>)
3418ef02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418ef06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ef0a:	4618      	mov	r0, r3
3418ef0c:	46bd      	mov	sp, r7
3418ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef12:	4770      	bx	lr
3418ef14:	56028000 	.word	0x56028000

3418ef18 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
3418ef18:	b480      	push	{r7}
3418ef1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3418ef1c:	4b05      	ldr	r3, [pc, #20]	@ (3418ef34 <LL_RCC_IC13_GetDivider+0x1c>)
3418ef1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418ef22:	0c1b      	lsrs	r3, r3, #16
3418ef24:	b2db      	uxtb	r3, r3
3418ef26:	3301      	adds	r3, #1
}
3418ef28:	4618      	mov	r0, r3
3418ef2a:	46bd      	mov	sp, r7
3418ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef30:	4770      	bx	lr
3418ef32:	bf00      	nop
3418ef34:	56028000 	.word	0x56028000

3418ef38 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
3418ef38:	b480      	push	{r7}
3418ef3a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3418ef3c:	4b04      	ldr	r3, [pc, #16]	@ (3418ef50 <LL_RCC_IC14_Enable+0x18>)
3418ef3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418ef42:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418ef46:	bf00      	nop
3418ef48:	46bd      	mov	sp, r7
3418ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef4e:	4770      	bx	lr
3418ef50:	56028000 	.word	0x56028000

3418ef54 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
3418ef54:	b480      	push	{r7}
3418ef56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
3418ef58:	4b07      	ldr	r3, [pc, #28]	@ (3418ef78 <LL_RCC_IC14_IsEnabled+0x24>)
3418ef5a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418ef5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418ef62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418ef66:	d101      	bne.n	3418ef6c <LL_RCC_IC14_IsEnabled+0x18>
3418ef68:	2301      	movs	r3, #1
3418ef6a:	e000      	b.n	3418ef6e <LL_RCC_IC14_IsEnabled+0x1a>
3418ef6c:	2300      	movs	r3, #0
}
3418ef6e:	4618      	mov	r0, r3
3418ef70:	46bd      	mov	sp, r7
3418ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef76:	4770      	bx	lr
3418ef78:	56028000 	.word	0x56028000

3418ef7c <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
3418ef7c:	b480      	push	{r7}
3418ef7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3418ef80:	4b04      	ldr	r3, [pc, #16]	@ (3418ef94 <LL_RCC_IC14_GetSource+0x18>)
3418ef82:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418ef86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418ef8a:	4618      	mov	r0, r3
3418ef8c:	46bd      	mov	sp, r7
3418ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ef92:	4770      	bx	lr
3418ef94:	56028000 	.word	0x56028000

3418ef98 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
3418ef98:	b480      	push	{r7}
3418ef9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
3418ef9c:	4b05      	ldr	r3, [pc, #20]	@ (3418efb4 <LL_RCC_IC14_GetDivider+0x1c>)
3418ef9e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418efa2:	0c1b      	lsrs	r3, r3, #16
3418efa4:	b2db      	uxtb	r3, r3
3418efa6:	3301      	adds	r3, #1
}
3418efa8:	4618      	mov	r0, r3
3418efaa:	46bd      	mov	sp, r7
3418efac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418efb0:	4770      	bx	lr
3418efb2:	bf00      	nop
3418efb4:	56028000 	.word	0x56028000

3418efb8 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
3418efb8:	b480      	push	{r7}
3418efba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418efbc:	4b04      	ldr	r3, [pc, #16]	@ (3418efd0 <LL_RCC_IC15_Enable+0x18>)
3418efbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418efc2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418efc6:	bf00      	nop
3418efc8:	46bd      	mov	sp, r7
3418efca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418efce:	4770      	bx	lr
3418efd0:	56028000 	.word	0x56028000

3418efd4 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
3418efd4:	b480      	push	{r7}
3418efd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
3418efd8:	4b07      	ldr	r3, [pc, #28]	@ (3418eff8 <LL_RCC_IC15_IsEnabled+0x24>)
3418efda:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418efde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418efe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418efe6:	d101      	bne.n	3418efec <LL_RCC_IC15_IsEnabled+0x18>
3418efe8:	2301      	movs	r3, #1
3418efea:	e000      	b.n	3418efee <LL_RCC_IC15_IsEnabled+0x1a>
3418efec:	2300      	movs	r3, #0
}
3418efee:	4618      	mov	r0, r3
3418eff0:	46bd      	mov	sp, r7
3418eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418eff6:	4770      	bx	lr
3418eff8:	56028000 	.word	0x56028000

3418effc <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
3418effc:	b480      	push	{r7}
3418effe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3418f000:	4b04      	ldr	r3, [pc, #16]	@ (3418f014 <LL_RCC_IC15_GetSource+0x18>)
3418f002:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418f006:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f00a:	4618      	mov	r0, r3
3418f00c:	46bd      	mov	sp, r7
3418f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f012:	4770      	bx	lr
3418f014:	56028000 	.word	0x56028000

3418f018 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
3418f018:	b480      	push	{r7}
3418f01a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
3418f01c:	4b05      	ldr	r3, [pc, #20]	@ (3418f034 <LL_RCC_IC15_GetDivider+0x1c>)
3418f01e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418f022:	0c1b      	lsrs	r3, r3, #16
3418f024:	b2db      	uxtb	r3, r3
3418f026:	3301      	adds	r3, #1
}
3418f028:	4618      	mov	r0, r3
3418f02a:	46bd      	mov	sp, r7
3418f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f030:	4770      	bx	lr
3418f032:	bf00      	nop
3418f034:	56028000 	.word	0x56028000

3418f038 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
3418f038:	b480      	push	{r7}
3418f03a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3418f03c:	4b04      	ldr	r3, [pc, #16]	@ (3418f050 <LL_RCC_IC16_Enable+0x18>)
3418f03e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418f042:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418f046:	bf00      	nop
3418f048:	46bd      	mov	sp, r7
3418f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f04e:	4770      	bx	lr
3418f050:	56028000 	.word	0x56028000

3418f054 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
3418f054:	b480      	push	{r7}
3418f056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
3418f058:	4b07      	ldr	r3, [pc, #28]	@ (3418f078 <LL_RCC_IC16_IsEnabled+0x24>)
3418f05a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418f05e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418f062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418f066:	d101      	bne.n	3418f06c <LL_RCC_IC16_IsEnabled+0x18>
3418f068:	2301      	movs	r3, #1
3418f06a:	e000      	b.n	3418f06e <LL_RCC_IC16_IsEnabled+0x1a>
3418f06c:	2300      	movs	r3, #0
}
3418f06e:	4618      	mov	r0, r3
3418f070:	46bd      	mov	sp, r7
3418f072:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f076:	4770      	bx	lr
3418f078:	56028000 	.word	0x56028000

3418f07c <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
3418f07c:	b480      	push	{r7}
3418f07e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3418f080:	4b04      	ldr	r3, [pc, #16]	@ (3418f094 <LL_RCC_IC16_GetSource+0x18>)
3418f082:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418f086:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f08a:	4618      	mov	r0, r3
3418f08c:	46bd      	mov	sp, r7
3418f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f092:	4770      	bx	lr
3418f094:	56028000 	.word	0x56028000

3418f098 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
3418f098:	b480      	push	{r7}
3418f09a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3418f09c:	4b05      	ldr	r3, [pc, #20]	@ (3418f0b4 <LL_RCC_IC16_GetDivider+0x1c>)
3418f09e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418f0a2:	0c1b      	lsrs	r3, r3, #16
3418f0a4:	b2db      	uxtb	r3, r3
3418f0a6:	3301      	adds	r3, #1
}
3418f0a8:	4618      	mov	r0, r3
3418f0aa:	46bd      	mov	sp, r7
3418f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f0b0:	4770      	bx	lr
3418f0b2:	bf00      	nop
3418f0b4:	56028000 	.word	0x56028000

3418f0b8 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
3418f0b8:	b480      	push	{r7}
3418f0ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3418f0bc:	4b04      	ldr	r3, [pc, #16]	@ (3418f0d0 <LL_RCC_IC17_Enable+0x18>)
3418f0be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418f0c2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418f0c6:	bf00      	nop
3418f0c8:	46bd      	mov	sp, r7
3418f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f0ce:	4770      	bx	lr
3418f0d0:	56028000 	.word	0x56028000

3418f0d4 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
3418f0d4:	b480      	push	{r7}
3418f0d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
3418f0d8:	4b07      	ldr	r3, [pc, #28]	@ (3418f0f8 <LL_RCC_IC17_IsEnabled+0x24>)
3418f0da:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418f0de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418f0e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418f0e6:	d101      	bne.n	3418f0ec <LL_RCC_IC17_IsEnabled+0x18>
3418f0e8:	2301      	movs	r3, #1
3418f0ea:	e000      	b.n	3418f0ee <LL_RCC_IC17_IsEnabled+0x1a>
3418f0ec:	2300      	movs	r3, #0
}
3418f0ee:	4618      	mov	r0, r3
3418f0f0:	46bd      	mov	sp, r7
3418f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f0f6:	4770      	bx	lr
3418f0f8:	56028000 	.word	0x56028000

3418f0fc <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
3418f0fc:	b480      	push	{r7}
3418f0fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3418f100:	4b04      	ldr	r3, [pc, #16]	@ (3418f114 <LL_RCC_IC17_GetSource+0x18>)
3418f102:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418f106:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f10a:	4618      	mov	r0, r3
3418f10c:	46bd      	mov	sp, r7
3418f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f112:	4770      	bx	lr
3418f114:	56028000 	.word	0x56028000

3418f118 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
3418f118:	b480      	push	{r7}
3418f11a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3418f11c:	4b05      	ldr	r3, [pc, #20]	@ (3418f134 <LL_RCC_IC17_GetDivider+0x1c>)
3418f11e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418f122:	0c1b      	lsrs	r3, r3, #16
3418f124:	b2db      	uxtb	r3, r3
3418f126:	3301      	adds	r3, #1
}
3418f128:	4618      	mov	r0, r3
3418f12a:	46bd      	mov	sp, r7
3418f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f130:	4770      	bx	lr
3418f132:	bf00      	nop
3418f134:	56028000 	.word	0x56028000

3418f138 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
3418f138:	b480      	push	{r7}
3418f13a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3418f13c:	4b04      	ldr	r3, [pc, #16]	@ (3418f150 <LL_RCC_IC18_Enable+0x18>)
3418f13e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418f142:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418f146:	bf00      	nop
3418f148:	46bd      	mov	sp, r7
3418f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f14e:	4770      	bx	lr
3418f150:	56028000 	.word	0x56028000

3418f154 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
3418f154:	b480      	push	{r7}
3418f156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
3418f158:	4b07      	ldr	r3, [pc, #28]	@ (3418f178 <LL_RCC_IC18_IsEnabled+0x24>)
3418f15a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418f15e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418f162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418f166:	d101      	bne.n	3418f16c <LL_RCC_IC18_IsEnabled+0x18>
3418f168:	2301      	movs	r3, #1
3418f16a:	e000      	b.n	3418f16e <LL_RCC_IC18_IsEnabled+0x1a>
3418f16c:	2300      	movs	r3, #0
}
3418f16e:	4618      	mov	r0, r3
3418f170:	46bd      	mov	sp, r7
3418f172:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f176:	4770      	bx	lr
3418f178:	56028000 	.word	0x56028000

3418f17c <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
3418f17c:	b480      	push	{r7}
3418f17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
3418f180:	4b04      	ldr	r3, [pc, #16]	@ (3418f194 <LL_RCC_IC18_GetSource+0x18>)
3418f182:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418f186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f18a:	4618      	mov	r0, r3
3418f18c:	46bd      	mov	sp, r7
3418f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f192:	4770      	bx	lr
3418f194:	56028000 	.word	0x56028000

3418f198 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
3418f198:	b480      	push	{r7}
3418f19a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3418f19c:	4b05      	ldr	r3, [pc, #20]	@ (3418f1b4 <LL_RCC_IC18_GetDivider+0x1c>)
3418f19e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418f1a2:	0c1b      	lsrs	r3, r3, #16
3418f1a4:	b2db      	uxtb	r3, r3
3418f1a6:	3301      	adds	r3, #1
}
3418f1a8:	4618      	mov	r0, r3
3418f1aa:	46bd      	mov	sp, r7
3418f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f1b0:	4770      	bx	lr
3418f1b2:	bf00      	nop
3418f1b4:	56028000 	.word	0x56028000

3418f1b8 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
3418f1b8:	b480      	push	{r7}
3418f1ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3418f1bc:	4b04      	ldr	r3, [pc, #16]	@ (3418f1d0 <LL_RCC_IC19_Enable+0x18>)
3418f1be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3418f1c2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418f1c6:	bf00      	nop
3418f1c8:	46bd      	mov	sp, r7
3418f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f1ce:	4770      	bx	lr
3418f1d0:	56028000 	.word	0x56028000

3418f1d4 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
3418f1d4:	b480      	push	{r7}
3418f1d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3418f1d8:	4b07      	ldr	r3, [pc, #28]	@ (3418f1f8 <LL_RCC_IC19_IsEnabled+0x24>)
3418f1da:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418f1de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418f1e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418f1e6:	d101      	bne.n	3418f1ec <LL_RCC_IC19_IsEnabled+0x18>
3418f1e8:	2301      	movs	r3, #1
3418f1ea:	e000      	b.n	3418f1ee <LL_RCC_IC19_IsEnabled+0x1a>
3418f1ec:	2300      	movs	r3, #0
}
3418f1ee:	4618      	mov	r0, r3
3418f1f0:	46bd      	mov	sp, r7
3418f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f1f6:	4770      	bx	lr
3418f1f8:	56028000 	.word	0x56028000

3418f1fc <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
3418f1fc:	b480      	push	{r7}
3418f1fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3418f200:	4b04      	ldr	r3, [pc, #16]	@ (3418f214 <LL_RCC_IC19_GetSource+0x18>)
3418f202:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418f206:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f20a:	4618      	mov	r0, r3
3418f20c:	46bd      	mov	sp, r7
3418f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f212:	4770      	bx	lr
3418f214:	56028000 	.word	0x56028000

3418f218 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
3418f218:	b480      	push	{r7}
3418f21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3418f21c:	4b05      	ldr	r3, [pc, #20]	@ (3418f234 <LL_RCC_IC19_GetDivider+0x1c>)
3418f21e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418f222:	0c1b      	lsrs	r3, r3, #16
3418f224:	b2db      	uxtb	r3, r3
3418f226:	3301      	adds	r3, #1
}
3418f228:	4618      	mov	r0, r3
3418f22a:	46bd      	mov	sp, r7
3418f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f230:	4770      	bx	lr
3418f232:	bf00      	nop
3418f234:	56028000 	.word	0x56028000

3418f238 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
3418f238:	b480      	push	{r7}
3418f23a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3418f23c:	4b04      	ldr	r3, [pc, #16]	@ (3418f250 <LL_RCC_IC20_Enable+0x18>)
3418f23e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3418f242:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418f246:	bf00      	nop
3418f248:	46bd      	mov	sp, r7
3418f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f24e:	4770      	bx	lr
3418f250:	56028000 	.word	0x56028000

3418f254 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
3418f254:	b480      	push	{r7}
3418f256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3418f258:	4b07      	ldr	r3, [pc, #28]	@ (3418f278 <LL_RCC_IC20_IsEnabled+0x24>)
3418f25a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418f25e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418f262:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3418f266:	d101      	bne.n	3418f26c <LL_RCC_IC20_IsEnabled+0x18>
3418f268:	2301      	movs	r3, #1
3418f26a:	e000      	b.n	3418f26e <LL_RCC_IC20_IsEnabled+0x1a>
3418f26c:	2300      	movs	r3, #0
}
3418f26e:	4618      	mov	r0, r3
3418f270:	46bd      	mov	sp, r7
3418f272:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f276:	4770      	bx	lr
3418f278:	56028000 	.word	0x56028000

3418f27c <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
3418f27c:	b480      	push	{r7}
3418f27e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3418f280:	4b04      	ldr	r3, [pc, #16]	@ (3418f294 <LL_RCC_IC20_GetSource+0x18>)
3418f282:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418f286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418f28a:	4618      	mov	r0, r3
3418f28c:	46bd      	mov	sp, r7
3418f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f292:	4770      	bx	lr
3418f294:	56028000 	.word	0x56028000

3418f298 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
3418f298:	b480      	push	{r7}
3418f29a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3418f29c:	4b05      	ldr	r3, [pc, #20]	@ (3418f2b4 <LL_RCC_IC20_GetDivider+0x1c>)
3418f29e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418f2a2:	0c1b      	lsrs	r3, r3, #16
3418f2a4:	b2db      	uxtb	r3, r3
3418f2a6:	3301      	adds	r3, #1
}
3418f2a8:	4618      	mov	r0, r3
3418f2aa:	46bd      	mov	sp, r7
3418f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f2b0:	4770      	bx	lr
3418f2b2:	bf00      	nop
3418f2b4:	56028000 	.word	0x56028000

3418f2b8 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
3418f2b8:	b480      	push	{r7}
3418f2ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418f2bc:	4b04      	ldr	r3, [pc, #16]	@ (3418f2d0 <LL_RCC_CLKP_Enable+0x18>)
3418f2be:	2240      	movs	r2, #64	@ 0x40
3418f2c0:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
3418f2c4:	bf00      	nop
3418f2c6:	46bd      	mov	sp, r7
3418f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f2cc:	4770      	bx	lr
3418f2ce:	bf00      	nop
3418f2d0:	56028000 	.word	0x56028000

3418f2d4 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
3418f2d4:	b480      	push	{r7}
3418f2d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
3418f2d8:	4b07      	ldr	r3, [pc, #28]	@ (3418f2f8 <LL_RCC_CLKP_IsEnabled+0x24>)
3418f2da:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
3418f2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f2e2:	2b40      	cmp	r3, #64	@ 0x40
3418f2e4:	d101      	bne.n	3418f2ea <LL_RCC_CLKP_IsEnabled+0x16>
3418f2e6:	2301      	movs	r3, #1
3418f2e8:	e000      	b.n	3418f2ec <LL_RCC_CLKP_IsEnabled+0x18>
3418f2ea:	2300      	movs	r3, #0
}
3418f2ec:	4618      	mov	r0, r3
3418f2ee:	46bd      	mov	sp, r7
3418f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f2f4:	4770      	bx	lr
3418f2f6:	bf00      	nop
3418f2f8:	56028000 	.word	0x56028000

3418f2fc <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
3418f2fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418f300:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
3418f304:	af00      	add	r7, sp, #0
3418f306:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
3418f30a:	2300      	movs	r3, #0
3418f30c:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3418f310:	2300      	movs	r3, #0
3418f312:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3418f316:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f31e:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
3418f322:	2500      	movs	r5, #0
3418f324:	ea54 0305 	orrs.w	r3, r4, r5
3418f328:	f040 83e0 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f32c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f330:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f334:	f04f 0800 	mov.w	r8, #0
3418f338:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
3418f33c:	ea58 0309 	orrs.w	r3, r8, r9
3418f340:	f040 83d4 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f348:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f34c:	f04f 0a00 	mov.w	sl, #0
3418f350:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
3418f354:	ea5a 030b 	orrs.w	r3, sl, fp
3418f358:	f040 83c8 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f360:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f364:	2100      	movs	r1, #0
3418f366:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
3418f36a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3418f36e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
3418f372:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
3418f376:	4603      	mov	r3, r0
3418f378:	460a      	mov	r2, r1
3418f37a:	4313      	orrs	r3, r2
3418f37c:	f040 83b6 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f384:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f388:	f002 0304 	and.w	r3, r2, #4
3418f38c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
3418f390:	2300      	movs	r3, #0
3418f392:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
3418f396:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
3418f39a:	4603      	mov	r3, r0
3418f39c:	460a      	mov	r2, r1
3418f39e:	4313      	orrs	r3, r2
3418f3a0:	f040 83a4 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f3ac:	f002 0301 	and.w	r3, r2, #1
3418f3b0:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
3418f3b4:	2300      	movs	r3, #0
3418f3b6:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
3418f3ba:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
3418f3be:	4603      	mov	r3, r0
3418f3c0:	460a      	mov	r2, r1
3418f3c2:	4313      	orrs	r3, r2
3418f3c4:	f040 8392 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f3c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f3d0:	f002 0302 	and.w	r3, r2, #2
3418f3d4:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
3418f3d8:	2300      	movs	r3, #0
3418f3da:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
3418f3de:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
3418f3e2:	4603      	mov	r3, r0
3418f3e4:	460a      	mov	r2, r1
3418f3e6:	4313      	orrs	r3, r2
3418f3e8:	f040 8380 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f3ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f3f4:	f002 0308 	and.w	r3, r2, #8
3418f3f8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
3418f3fc:	2300      	movs	r3, #0
3418f3fe:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
3418f402:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
3418f406:	4603      	mov	r3, r0
3418f408:	460a      	mov	r2, r1
3418f40a:	4313      	orrs	r3, r2
3418f40c:	f040 836e 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f414:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f418:	f002 0310 	and.w	r3, r2, #16
3418f41c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
3418f420:	2300      	movs	r3, #0
3418f422:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
3418f426:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
3418f42a:	4603      	mov	r3, r0
3418f42c:	460a      	mov	r2, r1
3418f42e:	4313      	orrs	r3, r2
3418f430:	f040 835c 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f434:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f438:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f43c:	f002 0320 	and.w	r3, r2, #32
3418f440:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
3418f444:	2300      	movs	r3, #0
3418f446:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
3418f44a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
3418f44e:	4603      	mov	r3, r0
3418f450:	460a      	mov	r2, r1
3418f452:	4313      	orrs	r3, r2
3418f454:	f040 834a 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f458:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f460:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3418f464:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
3418f468:	2300      	movs	r3, #0
3418f46a:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
3418f46e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
3418f472:	4603      	mov	r3, r0
3418f474:	460a      	mov	r2, r1
3418f476:	4313      	orrs	r3, r2
3418f478:	f040 8338 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f480:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f484:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3418f488:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
3418f48c:	2300      	movs	r3, #0
3418f48e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
3418f492:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
3418f496:	4603      	mov	r3, r0
3418f498:	460a      	mov	r2, r1
3418f49a:	4313      	orrs	r3, r2
3418f49c:	f040 8326 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f4a8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3418f4ac:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
3418f4b0:	2300      	movs	r3, #0
3418f4b2:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
3418f4b6:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
3418f4ba:	4603      	mov	r3, r0
3418f4bc:	460a      	mov	r2, r1
3418f4be:	4313      	orrs	r3, r2
3418f4c0:	f040 8314 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f4c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f4cc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3418f4d0:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
3418f4d4:	2300      	movs	r3, #0
3418f4d6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
3418f4da:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
3418f4de:	4603      	mov	r3, r0
3418f4e0:	460a      	mov	r2, r1
3418f4e2:	4313      	orrs	r3, r2
3418f4e4:	f040 8302 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f4f0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3418f4f4:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
3418f4f8:	2300      	movs	r3, #0
3418f4fa:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
3418f4fe:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
3418f502:	4603      	mov	r3, r0
3418f504:	460a      	mov	r2, r1
3418f506:	4313      	orrs	r3, r2
3418f508:	f040 82f0 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f50c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f510:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f514:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3418f518:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
3418f51c:	2300      	movs	r3, #0
3418f51e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
3418f522:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
3418f526:	4603      	mov	r3, r0
3418f528:	460a      	mov	r2, r1
3418f52a:	4313      	orrs	r3, r2
3418f52c:	f040 82de 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f530:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f534:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f538:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3418f53c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
3418f540:	2300      	movs	r3, #0
3418f542:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
3418f546:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
3418f54a:	4603      	mov	r3, r0
3418f54c:	460a      	mov	r2, r1
3418f54e:	4313      	orrs	r3, r2
3418f550:	f040 82cc 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f554:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f558:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f55c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3418f560:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
3418f564:	2300      	movs	r3, #0
3418f566:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
3418f56a:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
3418f56e:	4603      	mov	r3, r0
3418f570:	460a      	mov	r2, r1
3418f572:	4313      	orrs	r3, r2
3418f574:	f040 82ba 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f578:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f580:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3418f584:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
3418f588:	2300      	movs	r3, #0
3418f58a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
3418f58e:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
3418f592:	4603      	mov	r3, r0
3418f594:	460a      	mov	r2, r1
3418f596:	4313      	orrs	r3, r2
3418f598:	f040 82a8 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f59c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f5a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3418f5a8:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
3418f5ac:	2300      	movs	r3, #0
3418f5ae:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
3418f5b2:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
3418f5b6:	4603      	mov	r3, r0
3418f5b8:	460a      	mov	r2, r1
3418f5ba:	4313      	orrs	r3, r2
3418f5bc:	f040 8296 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f5c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f5c8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3418f5cc:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
3418f5d0:	2300      	movs	r3, #0
3418f5d2:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
3418f5d6:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
3418f5da:	4603      	mov	r3, r0
3418f5dc:	460a      	mov	r2, r1
3418f5de:	4313      	orrs	r3, r2
3418f5e0:	f040 8284 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f5e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f5ec:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3418f5f0:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
3418f5f4:	2300      	movs	r3, #0
3418f5f6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
3418f5fa:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
3418f5fe:	4603      	mov	r3, r0
3418f600:	460a      	mov	r2, r1
3418f602:	4313      	orrs	r3, r2
3418f604:	f040 8272 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f610:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3418f614:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
3418f618:	2300      	movs	r3, #0
3418f61a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
3418f61e:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
3418f622:	4603      	mov	r3, r0
3418f624:	460a      	mov	r2, r1
3418f626:	4313      	orrs	r3, r2
3418f628:	f040 8260 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f62c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f630:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f634:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3418f638:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
3418f63c:	2300      	movs	r3, #0
3418f63e:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
3418f642:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
3418f646:	4603      	mov	r3, r0
3418f648:	460a      	mov	r2, r1
3418f64a:	4313      	orrs	r3, r2
3418f64c:	f040 824e 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f654:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f658:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3418f65c:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
3418f660:	2300      	movs	r3, #0
3418f662:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
3418f666:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
3418f66a:	4603      	mov	r3, r0
3418f66c:	460a      	mov	r2, r1
3418f66e:	4313      	orrs	r3, r2
3418f670:	f040 823c 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f674:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f678:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f67c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3418f680:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
3418f684:	2300      	movs	r3, #0
3418f686:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
3418f68a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
3418f68e:	4603      	mov	r3, r0
3418f690:	460a      	mov	r2, r1
3418f692:	4313      	orrs	r3, r2
3418f694:	f040 822a 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f698:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f6a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3418f6a4:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
3418f6a8:	2300      	movs	r3, #0
3418f6aa:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
3418f6ae:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
3418f6b2:	4603      	mov	r3, r0
3418f6b4:	460a      	mov	r2, r1
3418f6b6:	4313      	orrs	r3, r2
3418f6b8:	f040 8218 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f6c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3418f6c8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
3418f6cc:	2300      	movs	r3, #0
3418f6ce:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
3418f6d2:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
3418f6d6:	4603      	mov	r3, r0
3418f6d8:	460a      	mov	r2, r1
3418f6da:	4313      	orrs	r3, r2
3418f6dc:	f040 8206 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f6e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f6e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3418f6ec:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
3418f6f0:	2300      	movs	r3, #0
3418f6f2:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
3418f6f6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
3418f6fa:	4603      	mov	r3, r0
3418f6fc:	460a      	mov	r2, r1
3418f6fe:	4313      	orrs	r3, r2
3418f700:	f040 81f4 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f708:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f70c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3418f710:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
3418f714:	2300      	movs	r3, #0
3418f716:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
3418f71a:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
3418f71e:	4603      	mov	r3, r0
3418f720:	460a      	mov	r2, r1
3418f722:	4313      	orrs	r3, r2
3418f724:	f040 81e2 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f728:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f730:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3418f734:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
3418f738:	2300      	movs	r3, #0
3418f73a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
3418f73e:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
3418f742:	4603      	mov	r3, r0
3418f744:	460a      	mov	r2, r1
3418f746:	4313      	orrs	r3, r2
3418f748:	f040 81d0 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f74c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f750:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f754:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3418f758:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
3418f75c:	2300      	movs	r3, #0
3418f75e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
3418f762:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
3418f766:	4603      	mov	r3, r0
3418f768:	460a      	mov	r2, r1
3418f76a:	4313      	orrs	r3, r2
3418f76c:	f040 81be 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f770:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f774:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f778:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3418f77c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
3418f780:	2300      	movs	r3, #0
3418f782:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
3418f786:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
3418f78a:	4603      	mov	r3, r0
3418f78c:	460a      	mov	r2, r1
3418f78e:	4313      	orrs	r3, r2
3418f790:	f040 81ac 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f798:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f79c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3418f7a0:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
3418f7a4:	2300      	movs	r3, #0
3418f7a6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
3418f7aa:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
3418f7ae:	4603      	mov	r3, r0
3418f7b0:	460a      	mov	r2, r1
3418f7b2:	4313      	orrs	r3, r2
3418f7b4:	f040 819a 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f7b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f7c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3418f7c4:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
3418f7c8:	2300      	movs	r3, #0
3418f7ca:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
3418f7ce:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
3418f7d2:	4603      	mov	r3, r0
3418f7d4:	460a      	mov	r2, r1
3418f7d6:	4313      	orrs	r3, r2
3418f7d8:	f040 8188 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f7dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f7e4:	2100      	movs	r1, #0
3418f7e6:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
3418f7ea:	f003 0301 	and.w	r3, r3, #1
3418f7ee:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
3418f7f2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
3418f7f6:	4603      	mov	r3, r0
3418f7f8:	460a      	mov	r2, r1
3418f7fa:	4313      	orrs	r3, r2
3418f7fc:	f040 8176 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f800:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f804:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f808:	2100      	movs	r1, #0
3418f80a:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
3418f80e:	f003 0302 	and.w	r3, r3, #2
3418f812:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
3418f816:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
3418f81a:	4603      	mov	r3, r0
3418f81c:	460a      	mov	r2, r1
3418f81e:	4313      	orrs	r3, r2
3418f820:	f040 8164 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f824:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f828:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f82c:	2100      	movs	r1, #0
3418f82e:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
3418f832:	f003 0304 	and.w	r3, r3, #4
3418f836:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
3418f83a:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
3418f83e:	4603      	mov	r3, r0
3418f840:	460a      	mov	r2, r1
3418f842:	4313      	orrs	r3, r2
3418f844:	f040 8152 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f848:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f850:	2100      	movs	r1, #0
3418f852:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
3418f856:	f003 0308 	and.w	r3, r3, #8
3418f85a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
3418f85e:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
3418f862:	4603      	mov	r3, r0
3418f864:	460a      	mov	r2, r1
3418f866:	4313      	orrs	r3, r2
3418f868:	f040 8140 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f86c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f870:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f874:	2100      	movs	r1, #0
3418f876:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
3418f87a:	f003 0310 	and.w	r3, r3, #16
3418f87e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
3418f882:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
3418f886:	4603      	mov	r3, r0
3418f888:	460a      	mov	r2, r1
3418f88a:	4313      	orrs	r3, r2
3418f88c:	f040 812e 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f890:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f894:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f898:	2100      	movs	r1, #0
3418f89a:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
3418f89e:	f003 0320 	and.w	r3, r3, #32
3418f8a2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
3418f8a6:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
3418f8aa:	4603      	mov	r3, r0
3418f8ac:	460a      	mov	r2, r1
3418f8ae:	4313      	orrs	r3, r2
3418f8b0:	f040 811c 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f8bc:	2100      	movs	r1, #0
3418f8be:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
3418f8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f8c6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
3418f8ca:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
3418f8ce:	4603      	mov	r3, r0
3418f8d0:	460a      	mov	r2, r1
3418f8d2:	4313      	orrs	r3, r2
3418f8d4:	f040 810a 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f8d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f8e0:	2100      	movs	r1, #0
3418f8e2:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
3418f8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418f8ea:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
3418f8ee:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
3418f8f2:	4603      	mov	r3, r0
3418f8f4:	460a      	mov	r2, r1
3418f8f6:	4313      	orrs	r3, r2
3418f8f8:	f040 80f8 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f8fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f900:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f904:	2100      	movs	r1, #0
3418f906:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
3418f90a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418f90e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
3418f912:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
3418f916:	4603      	mov	r3, r0
3418f918:	460a      	mov	r2, r1
3418f91a:	4313      	orrs	r3, r2
3418f91c:	f040 80e6 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f920:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f924:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f928:	2100      	movs	r1, #0
3418f92a:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
3418f92e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418f932:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
3418f936:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
3418f93a:	4603      	mov	r3, r0
3418f93c:	460a      	mov	r2, r1
3418f93e:	4313      	orrs	r3, r2
3418f940:	f040 80d4 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f944:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f948:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f94c:	2100      	movs	r1, #0
3418f94e:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
3418f952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418f956:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
3418f95a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
3418f95e:	4603      	mov	r3, r0
3418f960:	460a      	mov	r2, r1
3418f962:	4313      	orrs	r3, r2
3418f964:	f040 80c2 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f968:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f96c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f970:	2100      	movs	r1, #0
3418f972:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
3418f976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418f97a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
3418f97e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
3418f982:	4603      	mov	r3, r0
3418f984:	460a      	mov	r2, r1
3418f986:	4313      	orrs	r3, r2
3418f988:	f040 80b0 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f98c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f990:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f994:	2100      	movs	r1, #0
3418f996:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
3418f99a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418f99e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
3418f9a2:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
3418f9a6:	4603      	mov	r3, r0
3418f9a8:	460a      	mov	r2, r1
3418f9aa:	4313      	orrs	r3, r2
3418f9ac:	f040 809e 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f9b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f9b8:	2100      	movs	r1, #0
3418f9ba:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
3418f9be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418f9c2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
3418f9c6:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
3418f9ca:	4603      	mov	r3, r0
3418f9cc:	460a      	mov	r2, r1
3418f9ce:	4313      	orrs	r3, r2
3418f9d0:	f040 808c 	bne.w	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f9d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f9dc:	2100      	movs	r1, #0
3418f9de:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
3418f9e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418f9e6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
3418f9ea:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
3418f9ee:	4603      	mov	r3, r0
3418f9f0:	460a      	mov	r2, r1
3418f9f2:	4313      	orrs	r3, r2
3418f9f4:	d17a      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418f9f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
3418f9fe:	2100      	movs	r1, #0
3418fa00:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
3418fa04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418fa08:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
3418fa0c:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
3418fa10:	4603      	mov	r3, r0
3418fa12:	460a      	mov	r2, r1
3418fa14:	4313      	orrs	r3, r2
3418fa16:	d169      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fa18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fa20:	2100      	movs	r1, #0
3418fa22:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
3418fa26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418fa2a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
3418fa2e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
3418fa32:	4603      	mov	r3, r0
3418fa34:	460a      	mov	r2, r1
3418fa36:	4313      	orrs	r3, r2
3418fa38:	d158      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fa3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fa42:	2100      	movs	r1, #0
3418fa44:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
3418fa48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418fa4c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
3418fa50:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
3418fa54:	4603      	mov	r3, r0
3418fa56:	460a      	mov	r2, r1
3418fa58:	4313      	orrs	r3, r2
3418fa5a:	d147      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fa5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fa64:	2100      	movs	r1, #0
3418fa66:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
3418fa6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418fa6e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
3418fa72:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
3418fa76:	4603      	mov	r3, r0
3418fa78:	460a      	mov	r2, r1
3418fa7a:	4313      	orrs	r3, r2
3418fa7c:	d136      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fa7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
3418fa86:	2100      	movs	r1, #0
3418fa88:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
3418fa8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418fa90:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
3418fa94:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
3418fa98:	4603      	mov	r3, r0
3418fa9a:	460a      	mov	r2, r1
3418fa9c:	4313      	orrs	r3, r2
3418fa9e:	d125      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418faa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
3418faa8:	2100      	movs	r1, #0
3418faaa:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
3418faae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418fab2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
3418fab6:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
3418faba:	4603      	mov	r3, r0
3418fabc:	460a      	mov	r2, r1
3418fabe:	4313      	orrs	r3, r2
3418fac0:	d114      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fac2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
3418faca:	2100      	movs	r1, #0
3418facc:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
3418fad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418fad4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
3418fad8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
3418fadc:	4603      	mov	r3, r0
3418fade:	460a      	mov	r2, r1
3418fae0:	4313      	orrs	r3, r2
3418fae2:	d103      	bne.n	3418faec <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3418fae4:	2188      	movs	r1, #136	@ 0x88
3418fae6:	48d3      	ldr	r0, [pc, #844]	@ (3418fe34 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
3418fae8:	f7f2 fbc0 	bl	3418226c <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3418faec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
3418faf4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3418faf8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
3418fafc:	2300      	movs	r3, #0
3418fafe:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
3418fb02:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
3418fb06:	4603      	mov	r3, r0
3418fb08:	460a      	mov	r2, r1
3418fb0a:	4313      	orrs	r3, r2
3418fb0c:	f000 82b5 	beq.w	3419007a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3418fb10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb14:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418fb1c:	f000 8240 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb24:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418fb2c:	f000 8238 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb34:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418fb3c:	f000 8230 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb44:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb48:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
3418fb4c:	f000 8228 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb54:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb58:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
3418fb5c:	f000 8220 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb64:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb68:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
3418fb6c:	f000 8218 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb74:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb78:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
3418fb7c:	f000 8210 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb84:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb88:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
3418fb8c:	f000 8208 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fb90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fb94:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fb98:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
3418fb9c:	f000 8200 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fba4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fba8:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
3418fbac:	f000 81f8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fbb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fbb4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fbb8:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
3418fbbc:	f000 81f0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fbc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fbc4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fbc8:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
3418fbcc:	f000 81e8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fbd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fbd4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fbd8:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
3418fbdc:	f000 81e0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fbe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fbe4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fbe8:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
3418fbec:	f000 81d8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fbf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fbf4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fbf8:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
3418fbfc:	f000 81d0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc04:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fc08:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
3418fc0c:	f000 81c8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc14:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fc18:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
3418fc1c:	f000 81c0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc24:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fc28:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
3418fc2c:	f000 81b8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc34:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc38:	4b7f      	ldr	r3, [pc, #508]	@ (3418fe38 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3418fc3a:	429a      	cmp	r2, r3
3418fc3c:	f000 81b0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc44:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc48:	4b7c      	ldr	r3, [pc, #496]	@ (3418fe3c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3418fc4a:	429a      	cmp	r2, r3
3418fc4c:	f000 81a8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc54:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc58:	4b79      	ldr	r3, [pc, #484]	@ (3418fe40 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
3418fc5a:	429a      	cmp	r2, r3
3418fc5c:	f000 81a0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc64:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc68:	4b76      	ldr	r3, [pc, #472]	@ (3418fe44 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3418fc6a:	429a      	cmp	r2, r3
3418fc6c:	f000 8198 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc74:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc78:	4b73      	ldr	r3, [pc, #460]	@ (3418fe48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3418fc7a:	429a      	cmp	r2, r3
3418fc7c:	f000 8190 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc84:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc88:	4b70      	ldr	r3, [pc, #448]	@ (3418fe4c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
3418fc8a:	429a      	cmp	r2, r3
3418fc8c:	f000 8188 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fc90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fc94:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fc98:	4b6d      	ldr	r3, [pc, #436]	@ (3418fe50 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
3418fc9a:	429a      	cmp	r2, r3
3418fc9c:	f000 8180 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fca0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fca4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fca8:	4b6a      	ldr	r3, [pc, #424]	@ (3418fe54 <HAL_RCCEx_PeriphCLKConfig+0xb58>)
3418fcaa:	429a      	cmp	r2, r3
3418fcac:	f000 8178 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fcb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fcb4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fcb8:	4b67      	ldr	r3, [pc, #412]	@ (3418fe58 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
3418fcba:	429a      	cmp	r2, r3
3418fcbc:	f000 8170 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fcc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fcc4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fcc8:	4b64      	ldr	r3, [pc, #400]	@ (3418fe5c <HAL_RCCEx_PeriphCLKConfig+0xb60>)
3418fcca:	429a      	cmp	r2, r3
3418fccc:	f000 8168 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fcd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fcd4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fcd8:	4b61      	ldr	r3, [pc, #388]	@ (3418fe60 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
3418fcda:	429a      	cmp	r2, r3
3418fcdc:	f000 8160 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fce4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fce8:	4b5e      	ldr	r3, [pc, #376]	@ (3418fe64 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
3418fcea:	429a      	cmp	r2, r3
3418fcec:	f000 8158 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fcf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fcf4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fcf8:	4b5b      	ldr	r3, [pc, #364]	@ (3418fe68 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
3418fcfa:	429a      	cmp	r2, r3
3418fcfc:	f000 8150 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd04:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd08:	4b58      	ldr	r3, [pc, #352]	@ (3418fe6c <HAL_RCCEx_PeriphCLKConfig+0xb70>)
3418fd0a:	429a      	cmp	r2, r3
3418fd0c:	f000 8148 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd14:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd18:	4b55      	ldr	r3, [pc, #340]	@ (3418fe70 <HAL_RCCEx_PeriphCLKConfig+0xb74>)
3418fd1a:	429a      	cmp	r2, r3
3418fd1c:	f000 8140 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd24:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd28:	4b52      	ldr	r3, [pc, #328]	@ (3418fe74 <HAL_RCCEx_PeriphCLKConfig+0xb78>)
3418fd2a:	429a      	cmp	r2, r3
3418fd2c:	f000 8138 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd34:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd38:	4b4f      	ldr	r3, [pc, #316]	@ (3418fe78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
3418fd3a:	429a      	cmp	r2, r3
3418fd3c:	f000 8130 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd44:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd48:	4b4c      	ldr	r3, [pc, #304]	@ (3418fe7c <HAL_RCCEx_PeriphCLKConfig+0xb80>)
3418fd4a:	429a      	cmp	r2, r3
3418fd4c:	f000 8128 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd54:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd58:	4b49      	ldr	r3, [pc, #292]	@ (3418fe80 <HAL_RCCEx_PeriphCLKConfig+0xb84>)
3418fd5a:	429a      	cmp	r2, r3
3418fd5c:	f000 8120 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd64:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd68:	4b46      	ldr	r3, [pc, #280]	@ (3418fe84 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
3418fd6a:	429a      	cmp	r2, r3
3418fd6c:	f000 8118 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd74:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd78:	4b43      	ldr	r3, [pc, #268]	@ (3418fe88 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
3418fd7a:	429a      	cmp	r2, r3
3418fd7c:	f000 8110 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd84:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd88:	4b40      	ldr	r3, [pc, #256]	@ (3418fe8c <HAL_RCCEx_PeriphCLKConfig+0xb90>)
3418fd8a:	429a      	cmp	r2, r3
3418fd8c:	f000 8108 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fd90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fd94:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fd98:	4b3d      	ldr	r3, [pc, #244]	@ (3418fe90 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
3418fd9a:	429a      	cmp	r2, r3
3418fd9c:	f000 8100 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fda0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fda4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fda8:	4b3a      	ldr	r3, [pc, #232]	@ (3418fe94 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
3418fdaa:	429a      	cmp	r2, r3
3418fdac:	f000 80f8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fdb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fdb4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fdb8:	4b37      	ldr	r3, [pc, #220]	@ (3418fe98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
3418fdba:	429a      	cmp	r2, r3
3418fdbc:	f000 80f0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fdc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fdc4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fdc8:	4b34      	ldr	r3, [pc, #208]	@ (3418fe9c <HAL_RCCEx_PeriphCLKConfig+0xba0>)
3418fdca:	429a      	cmp	r2, r3
3418fdcc:	f000 80e8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fdd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fdd4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fdd8:	4b31      	ldr	r3, [pc, #196]	@ (3418fea0 <HAL_RCCEx_PeriphCLKConfig+0xba4>)
3418fdda:	429a      	cmp	r2, r3
3418fddc:	f000 80e0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fde0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fde4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fde8:	4b2e      	ldr	r3, [pc, #184]	@ (3418fea4 <HAL_RCCEx_PeriphCLKConfig+0xba8>)
3418fdea:	429a      	cmp	r2, r3
3418fdec:	f000 80d8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fdf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fdf4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fdf8:	4b2b      	ldr	r3, [pc, #172]	@ (3418fea8 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
3418fdfa:	429a      	cmp	r2, r3
3418fdfc:	f000 80d0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fe00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fe04:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fe08:	4b28      	ldr	r3, [pc, #160]	@ (3418feac <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
3418fe0a:	429a      	cmp	r2, r3
3418fe0c:	f000 80c8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fe10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fe14:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fe18:	4b25      	ldr	r3, [pc, #148]	@ (3418feb0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
3418fe1a:	429a      	cmp	r2, r3
3418fe1c:	f000 80c0 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fe20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fe24:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fe28:	4b22      	ldr	r3, [pc, #136]	@ (3418feb4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
3418fe2a:	429a      	cmp	r2, r3
3418fe2c:	f000 80b8 	beq.w	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fe30:	e042      	b.n	3418feb8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
3418fe32:	bf00      	nop
3418fe34:	341a5394 	.word	0x341a5394
3418fe38:	00010300 	.word	0x00010300
3418fe3c:	00011300 	.word	0x00011300
3418fe40:	00012300 	.word	0x00012300
3418fe44:	00013300 	.word	0x00013300
3418fe48:	00014300 	.word	0x00014300
3418fe4c:	00015300 	.word	0x00015300
3418fe50:	00016300 	.word	0x00016300
3418fe54:	00017300 	.word	0x00017300
3418fe58:	00018300 	.word	0x00018300
3418fe5c:	00019300 	.word	0x00019300
3418fe60:	0001a300 	.word	0x0001a300
3418fe64:	0001b300 	.word	0x0001b300
3418fe68:	0001c300 	.word	0x0001c300
3418fe6c:	0001d300 	.word	0x0001d300
3418fe70:	0001e300 	.word	0x0001e300
3418fe74:	0001f300 	.word	0x0001f300
3418fe78:	00020300 	.word	0x00020300
3418fe7c:	00021300 	.word	0x00021300
3418fe80:	00022300 	.word	0x00022300
3418fe84:	00023300 	.word	0x00023300
3418fe88:	00024300 	.word	0x00024300
3418fe8c:	00025300 	.word	0x00025300
3418fe90:	00026300 	.word	0x00026300
3418fe94:	00027300 	.word	0x00027300
3418fe98:	00028300 	.word	0x00028300
3418fe9c:	00029300 	.word	0x00029300
3418fea0:	0002a300 	.word	0x0002a300
3418fea4:	0002b300 	.word	0x0002b300
3418fea8:	0002c300 	.word	0x0002c300
3418feac:	0002d300 	.word	0x0002d300
3418feb0:	0002e300 	.word	0x0002e300
3418feb4:	0002f300 	.word	0x0002f300
3418feb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418febc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fec0:	4bb4      	ldr	r3, [pc, #720]	@ (34190194 <HAL_RCCEx_PeriphCLKConfig+0xe98>)
3418fec2:	429a      	cmp	r2, r3
3418fec4:	d06c      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fec6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418feca:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fece:	4bb2      	ldr	r3, [pc, #712]	@ (34190198 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
3418fed0:	429a      	cmp	r2, r3
3418fed2:	d065      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fed4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fed8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fedc:	4baf      	ldr	r3, [pc, #700]	@ (3419019c <HAL_RCCEx_PeriphCLKConfig+0xea0>)
3418fede:	429a      	cmp	r2, r3
3418fee0:	d05e      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fee2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fee6:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418feea:	4bad      	ldr	r3, [pc, #692]	@ (341901a0 <HAL_RCCEx_PeriphCLKConfig+0xea4>)
3418feec:	429a      	cmp	r2, r3
3418feee:	d057      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418fef4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418fef8:	4baa      	ldr	r3, [pc, #680]	@ (341901a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>)
3418fefa:	429a      	cmp	r2, r3
3418fefc:	d050      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418fefe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff02:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff06:	4ba8      	ldr	r3, [pc, #672]	@ (341901a8 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
3418ff08:	429a      	cmp	r2, r3
3418ff0a:	d049      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff10:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff14:	4ba5      	ldr	r3, [pc, #660]	@ (341901ac <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
3418ff16:	429a      	cmp	r2, r3
3418ff18:	d042      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff1e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff22:	4ba3      	ldr	r3, [pc, #652]	@ (341901b0 <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
3418ff24:	429a      	cmp	r2, r3
3418ff26:	d03b      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff2c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff30:	4ba0      	ldr	r3, [pc, #640]	@ (341901b4 <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
3418ff32:	429a      	cmp	r2, r3
3418ff34:	d034      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff3a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff3e:	4b9e      	ldr	r3, [pc, #632]	@ (341901b8 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
3418ff40:	429a      	cmp	r2, r3
3418ff42:	d02d      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff48:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff4c:	4b9b      	ldr	r3, [pc, #620]	@ (341901bc <HAL_RCCEx_PeriphCLKConfig+0xec0>)
3418ff4e:	429a      	cmp	r2, r3
3418ff50:	d026      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff56:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff5a:	4b99      	ldr	r3, [pc, #612]	@ (341901c0 <HAL_RCCEx_PeriphCLKConfig+0xec4>)
3418ff5c:	429a      	cmp	r2, r3
3418ff5e:	d01f      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff64:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff68:	4b96      	ldr	r3, [pc, #600]	@ (341901c4 <HAL_RCCEx_PeriphCLKConfig+0xec8>)
3418ff6a:	429a      	cmp	r2, r3
3418ff6c:	d018      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff72:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff76:	4b94      	ldr	r3, [pc, #592]	@ (341901c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
3418ff78:	429a      	cmp	r2, r3
3418ff7a:	d011      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff80:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff84:	4b91      	ldr	r3, [pc, #580]	@ (341901cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
3418ff86:	429a      	cmp	r2, r3
3418ff88:	d00a      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ff8e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3418ff92:	4b8f      	ldr	r3, [pc, #572]	@ (341901d0 <HAL_RCCEx_PeriphCLKConfig+0xed4>)
3418ff94:	429a      	cmp	r2, r3
3418ff96:	d003      	beq.n	3418ffa0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3418ff98:	218e      	movs	r1, #142	@ 0x8e
3418ff9a:	488e      	ldr	r0, [pc, #568]	@ (341901d4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3418ff9c:	f7f2 f966 	bl	3418226c <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3418ffa0:	f7fe fae2 	bl	3418e568 <LL_RCC_GetRTCClockSource>
3418ffa4:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3418ffa8:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3418ffac:	2b00      	cmp	r3, #0
3418ffae:	d018      	beq.n	3418ffe2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
3418ffb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ffb4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418ffb8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3418ffbc:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3418ffc0:	4293      	cmp	r3, r2
3418ffc2:	d00e      	beq.n	3418ffe2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3418ffc4:	4b84      	ldr	r3, [pc, #528]	@ (341901d8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3418ffc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418ffc8:	4a83      	ldr	r2, [pc, #524]	@ (341901d8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3418ffca:	f043 0301 	orr.w	r3, r3, #1
3418ffce:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3418ffd0:	4b81      	ldr	r3, [pc, #516]	@ (341901d8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3418ffd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418ffd4:	f003 0301 	and.w	r3, r3, #1
3418ffd8:	2b00      	cmp	r3, #0
3418ffda:	d102      	bne.n	3418ffe2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
3418ffdc:	2301      	movs	r3, #1
3418ffde:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3418ffe2:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3418ffe6:	2b00      	cmp	r3, #0
3418ffe8:	d143      	bne.n	34190072 <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3418ffea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3418ffee:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418fff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418fff6:	d117      	bne.n	34190028 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418fff8:	f7f4 faa2 	bl	34184540 <HAL_GetTick>
3418fffc:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34190000:	e00d      	b.n	3419001e <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34190002:	f7f4 fa9d 	bl	34184540 <HAL_GetTick>
34190006:	4602      	mov	r2, r0
34190008:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3419000c:	1ad2      	subs	r2, r2, r3
3419000e:	f241 3388 	movw	r3, #5000	@ 0x1388
34190012:	429a      	cmp	r2, r3
34190014:	d903      	bls.n	3419001e <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
34190016:	2303      	movs	r3, #3
34190018:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3419001c:	e004      	b.n	34190028 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3419001e:	f7fd feb5 	bl	3418dd8c <LL_RCC_LSE_IsReady>
34190022:	4603      	mov	r3, r0
34190024:	2b00      	cmp	r3, #0
34190026:	d0ec      	beq.n	34190002 <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
34190028:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3419002c:	2b00      	cmp	r3, #0
3419002e:	d11b      	bne.n	34190068 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34190030:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190034:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34190038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3419003c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34190040:	d108      	bne.n	34190054 <HAL_RCCEx_PeriphCLKConfig+0xd58>
34190042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190046:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3419004a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3419004e:	4618      	mov	r0, r3
34190050:	f7fe fa98 	bl	3418e584 <LL_RCC_SetRTC_HSEPrescaler>
34190054:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190058:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3419005c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34190060:	4618      	mov	r0, r3
34190062:	f7fe fa6b 	bl	3418e53c <LL_RCC_SetRTCClockSource>
34190066:	e008      	b.n	3419007a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
34190068:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3419006c:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
34190070:	e003      	b.n	3419007a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34190072:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
34190076:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3419007a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419007e:	e9d3 2300 	ldrd	r2, r3, [r3]
34190082:	f002 0304 	and.w	r3, r2, #4
34190086:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3419008a:	2300      	movs	r3, #0
3419008c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
34190090:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
34190094:	4603      	mov	r3, r0
34190096:	460a      	mov	r2, r1
34190098:	4313      	orrs	r3, r2
3419009a:	f000 81dc 	beq.w	34190456 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3419009e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900a6:	2b00      	cmp	r3, #0
341900a8:	d02d      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900b2:	2b01      	cmp	r3, #1
341900b4:	d027      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900be:	2b02      	cmp	r3, #2
341900c0:	d021      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900ca:	2b03      	cmp	r3, #3
341900cc:	d01b      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900d6:	2b04      	cmp	r3, #4
341900d8:	d015      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900e2:	2b05      	cmp	r3, #5
341900e4:	d00f      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900ee:	2b06      	cmp	r3, #6
341900f0:	d009      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341900f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341900fa:	2b07      	cmp	r3, #7
341900fc:	d003      	beq.n	34190106 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
341900fe:	21d4      	movs	r1, #212	@ 0xd4
34190100:	4834      	ldr	r0, [pc, #208]	@ (341901d4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
34190102:	f7f2 f8b3 	bl	3418226c <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34190106:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419010a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3419010e:	2b04      	cmp	r3, #4
34190110:	d166      	bne.n	341901e0 <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34190112:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190118:	2b00      	cmp	r3, #0
3419011a:	d015      	beq.n	34190148 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3419011c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190126:	d00f      	beq.n	34190148 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
34190128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419012c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419012e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190132:	d009      	beq.n	34190148 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
34190134:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419013a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419013e:	d003      	beq.n	34190148 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
34190140:	21d9      	movs	r1, #217	@ 0xd9
34190142:	4824      	ldr	r0, [pc, #144]	@ (341901d4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
34190144:	f7f2 f892 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34190148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419014c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419014e:	2b00      	cmp	r3, #0
34190150:	d005      	beq.n	3419015e <HAL_RCCEx_PeriphCLKConfig+0xe62>
34190152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419015c:	d903      	bls.n	34190166 <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3419015e:	21da      	movs	r1, #218	@ 0xda
34190160:	481c      	ldr	r0, [pc, #112]	@ (341901d4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
34190162:	f7f2 f883 	bl	3418226c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34190166:	4b1d      	ldr	r3, [pc, #116]	@ (341901dc <HAL_RCCEx_PeriphCLKConfig+0xee0>)
34190168:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3419016c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190170:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190174:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3419017a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419017e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190180:	3b01      	subs	r3, #1
34190182:	041b      	lsls	r3, r3, #16
34190184:	4313      	orrs	r3, r2
34190186:	4a15      	ldr	r2, [pc, #84]	@ (341901dc <HAL_RCCEx_PeriphCLKConfig+0xee0>)
34190188:	430b      	orrs	r3, r1
3419018a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3419018e:	f7fe fd13 	bl	3418ebb8 <LL_RCC_IC5_Enable>
34190192:	e159      	b.n	34190448 <HAL_RCCEx_PeriphCLKConfig+0x114c>
34190194:	00030300 	.word	0x00030300
34190198:	00031300 	.word	0x00031300
3419019c:	00032300 	.word	0x00032300
341901a0:	00033300 	.word	0x00033300
341901a4:	00034300 	.word	0x00034300
341901a8:	00035300 	.word	0x00035300
341901ac:	00036300 	.word	0x00036300
341901b0:	00037300 	.word	0x00037300
341901b4:	00038300 	.word	0x00038300
341901b8:	00039300 	.word	0x00039300
341901bc:	0003a300 	.word	0x0003a300
341901c0:	0003b300 	.word	0x0003b300
341901c4:	0003c300 	.word	0x0003c300
341901c8:	0003d300 	.word	0x0003d300
341901cc:	0003e300 	.word	0x0003e300
341901d0:	0003f300 	.word	0x0003f300
341901d4:	341a5394 	.word	0x341a5394
341901d8:	56024800 	.word	0x56024800
341901dc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
341901e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341901e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341901e8:	2b05      	cmp	r3, #5
341901ea:	d140      	bne.n	3419026e <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
341901ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341901f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341901f2:	2b00      	cmp	r3, #0
341901f4:	d015      	beq.n	34190222 <HAL_RCCEx_PeriphCLKConfig+0xf26>
341901f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341901fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341901fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190200:	d00f      	beq.n	34190222 <HAL_RCCEx_PeriphCLKConfig+0xf26>
34190202:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34190208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419020c:	d009      	beq.n	34190222 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3419020e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34190214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190218:	d003      	beq.n	34190222 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3419021a:	21e6      	movs	r1, #230	@ 0xe6
3419021c:	4860      	ldr	r0, [pc, #384]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3419021e:	f7f2 f825 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34190222:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34190228:	2b00      	cmp	r3, #0
3419022a:	d005      	beq.n	34190238 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3419022c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34190232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190236:	d903      	bls.n	34190240 <HAL_RCCEx_PeriphCLKConfig+0xf44>
34190238:	21e7      	movs	r1, #231	@ 0xe7
3419023a:	4859      	ldr	r0, [pc, #356]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3419023c:	f7f2 f816 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34190240:	4b58      	ldr	r3, [pc, #352]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
34190242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34190246:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419024a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419024e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34190254:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3419025a:	3b01      	subs	r3, #1
3419025c:	041b      	lsls	r3, r3, #16
3419025e:	4313      	orrs	r3, r2
34190260:	4a50      	ldr	r2, [pc, #320]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
34190262:	430b      	orrs	r3, r1
34190264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34190268:	f7fe fda6 	bl	3418edb8 <LL_RCC_IC10_Enable>
3419026c:	e0ec      	b.n	34190448 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3419026e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190272:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34190276:	2b06      	cmp	r3, #6
34190278:	d140      	bne.n	341902fc <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3419027a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419027e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34190280:	2b00      	cmp	r3, #0
34190282:	d015      	beq.n	341902b0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
34190284:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419028a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419028e:	d00f      	beq.n	341902b0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
34190290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34190296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419029a:	d009      	beq.n	341902b0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3419029c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341902a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341902a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341902a6:	d003      	beq.n	341902b0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
341902a8:	21f3      	movs	r1, #243	@ 0xf3
341902aa:	483d      	ldr	r0, [pc, #244]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
341902ac:	f7f1 ffde 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
341902b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341902b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341902b6:	2b00      	cmp	r3, #0
341902b8:	d005      	beq.n	341902c6 <HAL_RCCEx_PeriphCLKConfig+0xfca>
341902ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341902be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341902c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341902c4:	d903      	bls.n	341902ce <HAL_RCCEx_PeriphCLKConfig+0xfd2>
341902c6:	21f4      	movs	r1, #244	@ 0xf4
341902c8:	4835      	ldr	r0, [pc, #212]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
341902ca:	f7f1 ffcf 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341902ce:	4b35      	ldr	r3, [pc, #212]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
341902d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341902d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341902d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341902dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341902e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341902e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341902e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341902e8:	3b01      	subs	r3, #1
341902ea:	041b      	lsls	r3, r3, #16
341902ec:	4313      	orrs	r3, r2
341902ee:	4a2d      	ldr	r2, [pc, #180]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
341902f0:	430b      	orrs	r3, r1
341902f2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341902f6:	f7fe fe5f 	bl	3418efb8 <LL_RCC_IC15_Enable>
341902fa:	e0a5      	b.n	34190448 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
341902fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190300:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34190304:	2b03      	cmp	r3, #3
34190306:	d14f      	bne.n	341903a8 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34190308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419030c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34190310:	2b00      	cmp	r3, #0
34190312:	d019      	beq.n	34190348 <HAL_RCCEx_PeriphCLKConfig+0x104c>
34190314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3419031c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190320:	d012      	beq.n	34190348 <HAL_RCCEx_PeriphCLKConfig+0x104c>
34190322:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3419032a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419032e:	d00b      	beq.n	34190348 <HAL_RCCEx_PeriphCLKConfig+0x104c>
34190330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34190338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419033c:	d004      	beq.n	34190348 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3419033e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34190342:	4817      	ldr	r0, [pc, #92]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
34190344:	f7f1 ff92 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34190348:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419034c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34190350:	2b00      	cmp	r3, #0
34190352:	d006      	beq.n	34190362 <HAL_RCCEx_PeriphCLKConfig+0x1066>
34190354:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3419035c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190360:	d904      	bls.n	3419036c <HAL_RCCEx_PeriphCLKConfig+0x1070>
34190362:	f240 1101 	movw	r1, #257	@ 0x101
34190366:	480e      	ldr	r0, [pc, #56]	@ (341903a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
34190368:	f7f1 ff80 	bl	3418226c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3419036c:	4b0d      	ldr	r3, [pc, #52]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3419036e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34190372:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190376:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419037a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419037e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34190382:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3419038a:	3b01      	subs	r3, #1
3419038c:	041b      	lsls	r3, r3, #16
3419038e:	4313      	orrs	r3, r2
34190390:	4a04      	ldr	r2, [pc, #16]	@ (341903a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
34190392:	430b      	orrs	r3, r1
34190394:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34190398:	f7fe ff0e 	bl	3418f1b8 <LL_RCC_IC19_Enable>
3419039c:	e054      	b.n	34190448 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3419039e:	bf00      	nop
341903a0:	341a5394 	.word	0x341a5394
341903a4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
341903a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341903b0:	2b07      	cmp	r3, #7
341903b2:	d149      	bne.n	34190448 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
341903b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341903bc:	2b00      	cmp	r3, #0
341903be:	d019      	beq.n	341903f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
341903c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341903c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341903cc:	d012      	beq.n	341903f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
341903ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341903d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341903da:	d00b      	beq.n	341903f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
341903dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341903e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341903e8:	d004      	beq.n	341903f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
341903ea:	f240 110d 	movw	r1, #269	@ 0x10d
341903ee:	487d      	ldr	r0, [pc, #500]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
341903f0:	f7f1 ff3c 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
341903f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341903f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341903fc:	2b00      	cmp	r3, #0
341903fe:	d006      	beq.n	3419040e <HAL_RCCEx_PeriphCLKConfig+0x1112>
34190400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34190408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419040c:	d904      	bls.n	34190418 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3419040e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34190412:	4874      	ldr	r0, [pc, #464]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
34190414:	f7f1 ff2a 	bl	3418226c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34190418:	4b73      	ldr	r3, [pc, #460]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3419041a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3419041e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190422:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190426:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419042a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3419042e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34190436:	3b01      	subs	r3, #1
34190438:	041b      	lsls	r3, r3, #16
3419043a:	4313      	orrs	r3, r2
3419043c:	4a6a      	ldr	r2, [pc, #424]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3419043e:	430b      	orrs	r3, r1
34190440:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34190444:	f7fe fef8 	bl	3418f238 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34190448:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419044c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34190450:	4618      	mov	r0, r3
34190452:	f7fd fd4f 	bl	3418def4 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34190456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419045a:	e9d3 2300 	ldrd	r2, r3, [r3]
3419045e:	2100      	movs	r1, #0
34190460:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
34190464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
34190468:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3419046c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
34190470:	4603      	mov	r3, r0
34190472:	460a      	mov	r2, r1
34190474:	4313      	orrs	r3, r2
34190476:	f000 80d1 	beq.w	3419061c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3419047a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419047e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34190482:	4b5a      	ldr	r3, [pc, #360]	@ (341905ec <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
34190484:	429a      	cmp	r2, r3
34190486:	d019      	beq.n	341904bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
34190488:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419048c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34190490:	4b57      	ldr	r3, [pc, #348]	@ (341905f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
34190492:	429a      	cmp	r2, r3
34190494:	d012      	beq.n	341904bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
34190496:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419049a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3419049e:	4b55      	ldr	r3, [pc, #340]	@ (341905f4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
341904a0:	429a      	cmp	r2, r3
341904a2:	d00b      	beq.n	341904bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
341904a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
341904ac:	4b52      	ldr	r3, [pc, #328]	@ (341905f8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
341904ae:	429a      	cmp	r2, r3
341904b0:	d004      	beq.n	341904bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
341904b2:	f44f 7192 	mov.w	r1, #292	@ 0x124
341904b6:	484b      	ldr	r0, [pc, #300]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
341904b8:	f7f1 fed8 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
341904bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
341904c4:	4b4b      	ldr	r3, [pc, #300]	@ (341905f4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
341904c6:	429a      	cmp	r2, r3
341904c8:	d142      	bne.n	34190550 <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
341904ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904ce:	699b      	ldr	r3, [r3, #24]
341904d0:	2b00      	cmp	r3, #0
341904d2:	d016      	beq.n	34190502 <HAL_RCCEx_PeriphCLKConfig+0x1206>
341904d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904d8:	699b      	ldr	r3, [r3, #24]
341904da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341904de:	d010      	beq.n	34190502 <HAL_RCCEx_PeriphCLKConfig+0x1206>
341904e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904e4:	699b      	ldr	r3, [r3, #24]
341904e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341904ea:	d00a      	beq.n	34190502 <HAL_RCCEx_PeriphCLKConfig+0x1206>
341904ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341904f0:	699b      	ldr	r3, [r3, #24]
341904f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341904f6:	d004      	beq.n	34190502 <HAL_RCCEx_PeriphCLKConfig+0x1206>
341904f8:	f240 1129 	movw	r1, #297	@ 0x129
341904fc:	4839      	ldr	r0, [pc, #228]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
341904fe:	f7f1 feb5 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34190502:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190506:	69db      	ldr	r3, [r3, #28]
34190508:	2b00      	cmp	r3, #0
3419050a:	d005      	beq.n	34190518 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3419050c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190510:	69db      	ldr	r3, [r3, #28]
34190512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190516:	d904      	bls.n	34190522 <HAL_RCCEx_PeriphCLKConfig+0x1226>
34190518:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3419051c:	4831      	ldr	r0, [pc, #196]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3419051e:	f7f1 fea5 	bl	3418226c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34190522:	4b31      	ldr	r3, [pc, #196]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
34190524:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34190528:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419052c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190530:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190534:	699a      	ldr	r2, [r3, #24]
34190536:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419053a:	69db      	ldr	r3, [r3, #28]
3419053c:	3b01      	subs	r3, #1
3419053e:	041b      	lsls	r3, r3, #16
34190540:	4313      	orrs	r3, r2
34190542:	4a29      	ldr	r2, [pc, #164]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
34190544:	430b      	orrs	r3, r1
34190546:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3419054a:	f7fe fab5 	bl	3418eab8 <LL_RCC_IC3_Enable>
3419054e:	e05e      	b.n	3419060e <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34190550:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190554:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34190558:	4b27      	ldr	r3, [pc, #156]	@ (341905f8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3419055a:	429a      	cmp	r2, r3
3419055c:	d14e      	bne.n	341905fc <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3419055e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190562:	6a1b      	ldr	r3, [r3, #32]
34190564:	2b00      	cmp	r3, #0
34190566:	d016      	beq.n	34190596 <HAL_RCCEx_PeriphCLKConfig+0x129a>
34190568:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419056c:	6a1b      	ldr	r3, [r3, #32]
3419056e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190572:	d010      	beq.n	34190596 <HAL_RCCEx_PeriphCLKConfig+0x129a>
34190574:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190578:	6a1b      	ldr	r3, [r3, #32]
3419057a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419057e:	d00a      	beq.n	34190596 <HAL_RCCEx_PeriphCLKConfig+0x129a>
34190580:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190584:	6a1b      	ldr	r3, [r3, #32]
34190586:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419058a:	d004      	beq.n	34190596 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3419058c:	f44f 719b 	mov.w	r1, #310	@ 0x136
34190590:	4814      	ldr	r0, [pc, #80]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
34190592:	f7f1 fe6b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34190596:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419059a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419059c:	2b00      	cmp	r3, #0
3419059e:	d005      	beq.n	341905ac <HAL_RCCEx_PeriphCLKConfig+0x12b0>
341905a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341905a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341905a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341905aa:	d904      	bls.n	341905b6 <HAL_RCCEx_PeriphCLKConfig+0x12ba>
341905ac:	f240 1137 	movw	r1, #311	@ 0x137
341905b0:	480c      	ldr	r0, [pc, #48]	@ (341905e4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
341905b2:	f7f1 fe5b 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341905b6:	4b0c      	ldr	r3, [pc, #48]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
341905b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341905bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341905c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341905c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341905c8:	6a1a      	ldr	r2, [r3, #32]
341905ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341905ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341905d0:	3b01      	subs	r3, #1
341905d2:	041b      	lsls	r3, r3, #16
341905d4:	4313      	orrs	r3, r2
341905d6:	4a04      	ldr	r2, [pc, #16]	@ (341905e8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
341905d8:	430b      	orrs	r3, r1
341905da:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341905de:	f7fe faab 	bl	3418eb38 <LL_RCC_IC4_Enable>
341905e2:	e014      	b.n	3419060e <HAL_RCCEx_PeriphCLKConfig+0x1312>
341905e4:	341a5394 	.word	0x341a5394
341905e8:	56028000 	.word	0x56028000
341905ec:	03000014 	.word	0x03000014
341905f0:	03010014 	.word	0x03010014
341905f4:	03020014 	.word	0x03020014
341905f8:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
341905fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190600:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34190604:	4baf      	ldr	r3, [pc, #700]	@ (341908c4 <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
34190606:	429a      	cmp	r2, r3
34190608:	d101      	bne.n	3419060e <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3419060a:	f7fe fe55 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3419060e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34190616:	4618      	mov	r0, r3
34190618:	f7fd fdfc 	bl	3418e214 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3419061c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190620:	e9d3 2300 	ldrd	r2, r3, [r3]
34190624:	2100      	movs	r1, #0
34190626:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3419062a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3419062e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
34190632:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
34190636:	4603      	mov	r3, r0
34190638:	460a      	mov	r2, r1
3419063a:	4313      	orrs	r3, r2
3419063c:	f000 80c5 	beq.w	341907ca <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34190640:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190644:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34190648:	4b9f      	ldr	r3, [pc, #636]	@ (341908c8 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3419064a:	429a      	cmp	r2, r3
3419064c:	d019      	beq.n	34190682 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3419064e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190652:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34190656:	4b9d      	ldr	r3, [pc, #628]	@ (341908cc <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
34190658:	429a      	cmp	r2, r3
3419065a:	d012      	beq.n	34190682 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3419065c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190660:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34190664:	4b9a      	ldr	r3, [pc, #616]	@ (341908d0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
34190666:	429a      	cmp	r2, r3
34190668:	d00b      	beq.n	34190682 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3419066a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419066e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34190672:	4b98      	ldr	r3, [pc, #608]	@ (341908d4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
34190674:	429a      	cmp	r2, r3
34190676:	d004      	beq.n	34190682 <HAL_RCCEx_PeriphCLKConfig+0x1386>
34190678:	f240 1151 	movw	r1, #337	@ 0x151
3419067c:	4896      	ldr	r0, [pc, #600]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3419067e:	f7f1 fdf5 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34190682:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190686:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3419068a:	4b91      	ldr	r3, [pc, #580]	@ (341908d0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3419068c:	429a      	cmp	r2, r3
3419068e:	d142      	bne.n	34190716 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34190690:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190694:	699b      	ldr	r3, [r3, #24]
34190696:	2b00      	cmp	r3, #0
34190698:	d016      	beq.n	341906c8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3419069a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419069e:	699b      	ldr	r3, [r3, #24]
341906a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341906a4:	d010      	beq.n	341906c8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
341906a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341906aa:	699b      	ldr	r3, [r3, #24]
341906ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341906b0:	d00a      	beq.n	341906c8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
341906b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341906b6:	699b      	ldr	r3, [r3, #24]
341906b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341906bc:	d004      	beq.n	341906c8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
341906be:	f44f 71ab 	mov.w	r1, #342	@ 0x156
341906c2:	4885      	ldr	r0, [pc, #532]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
341906c4:	f7f1 fdd2 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
341906c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341906cc:	69db      	ldr	r3, [r3, #28]
341906ce:	2b00      	cmp	r3, #0
341906d0:	d005      	beq.n	341906de <HAL_RCCEx_PeriphCLKConfig+0x13e2>
341906d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341906d6:	69db      	ldr	r3, [r3, #28]
341906d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341906dc:	d904      	bls.n	341906e8 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
341906de:	f240 1157 	movw	r1, #343	@ 0x157
341906e2:	487d      	ldr	r0, [pc, #500]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
341906e4:	f7f1 fdc2 	bl	3418226c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341906e8:	4b7c      	ldr	r3, [pc, #496]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
341906ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341906ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341906f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341906f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341906fa:	699a      	ldr	r2, [r3, #24]
341906fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190700:	69db      	ldr	r3, [r3, #28]
34190702:	3b01      	subs	r3, #1
34190704:	041b      	lsls	r3, r3, #16
34190706:	4313      	orrs	r3, r2
34190708:	4a74      	ldr	r2, [pc, #464]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3419070a:	430b      	orrs	r3, r1
3419070c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34190710:	f7fe f9d2 	bl	3418eab8 <LL_RCC_IC3_Enable>
34190714:	e052      	b.n	341907bc <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34190716:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419071a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3419071e:	4b6d      	ldr	r3, [pc, #436]	@ (341908d4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
34190720:	429a      	cmp	r2, r3
34190722:	d142      	bne.n	341907aa <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34190724:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190728:	6a1b      	ldr	r3, [r3, #32]
3419072a:	2b00      	cmp	r3, #0
3419072c:	d016      	beq.n	3419075c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3419072e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190732:	6a1b      	ldr	r3, [r3, #32]
34190734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190738:	d010      	beq.n	3419075c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3419073a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419073e:	6a1b      	ldr	r3, [r3, #32]
34190740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190744:	d00a      	beq.n	3419075c <HAL_RCCEx_PeriphCLKConfig+0x1460>
34190746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419074a:	6a1b      	ldr	r3, [r3, #32]
3419074c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190750:	d004      	beq.n	3419075c <HAL_RCCEx_PeriphCLKConfig+0x1460>
34190752:	f240 1163 	movw	r1, #355	@ 0x163
34190756:	4860      	ldr	r0, [pc, #384]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
34190758:	f7f1 fd88 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3419075c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190762:	2b00      	cmp	r3, #0
34190764:	d005      	beq.n	34190772 <HAL_RCCEx_PeriphCLKConfig+0x1476>
34190766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419076c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190770:	d904      	bls.n	3419077c <HAL_RCCEx_PeriphCLKConfig+0x1480>
34190772:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34190776:	4858      	ldr	r0, [pc, #352]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
34190778:	f7f1 fd78 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3419077c:	4b57      	ldr	r3, [pc, #348]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3419077e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34190782:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190786:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419078a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419078e:	6a1a      	ldr	r2, [r3, #32]
34190790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190796:	3b01      	subs	r3, #1
34190798:	041b      	lsls	r3, r3, #16
3419079a:	4313      	orrs	r3, r2
3419079c:	4a4f      	ldr	r2, [pc, #316]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3419079e:	430b      	orrs	r3, r1
341907a0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341907a4:	f7fe f9c8 	bl	3418eb38 <LL_RCC_IC4_Enable>
341907a8:	e008      	b.n	341907bc <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
341907aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341907ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
341907b2:	4b46      	ldr	r3, [pc, #280]	@ (341908cc <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
341907b4:	429a      	cmp	r2, r3
341907b6:	d101      	bne.n	341907bc <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
341907b8:	f7fe fd7e 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
341907bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341907c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341907c4:	4618      	mov	r0, r3
341907c6:	f7fd fd25 	bl	3418e214 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
341907ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341907ce:	e9d3 2300 	ldrd	r2, r3, [r3]
341907d2:	2100      	movs	r1, #0
341907d4:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
341907d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
341907dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
341907e0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
341907e4:	4603      	mov	r3, r0
341907e6:	460a      	mov	r2, r1
341907e8:	4313      	orrs	r3, r2
341907ea:	f000 80db 	beq.w	341909a4 <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
341907ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341907f2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341907f6:	4b3a      	ldr	r3, [pc, #232]	@ (341908e0 <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
341907f8:	429a      	cmp	r2, r3
341907fa:	d019      	beq.n	34190830 <HAL_RCCEx_PeriphCLKConfig+0x1534>
341907fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190800:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34190804:	4b37      	ldr	r3, [pc, #220]	@ (341908e4 <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
34190806:	429a      	cmp	r2, r3
34190808:	d012      	beq.n	34190830 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3419080a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419080e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34190812:	4b35      	ldr	r3, [pc, #212]	@ (341908e8 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
34190814:	429a      	cmp	r2, r3
34190816:	d00b      	beq.n	34190830 <HAL_RCCEx_PeriphCLKConfig+0x1534>
34190818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419081c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34190820:	4b32      	ldr	r3, [pc, #200]	@ (341908ec <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
34190822:	429a      	cmp	r2, r3
34190824:	d004      	beq.n	34190830 <HAL_RCCEx_PeriphCLKConfig+0x1534>
34190826:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3419082a:	482b      	ldr	r0, [pc, #172]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3419082c:	f7f1 fd1e 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34190830:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190834:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34190838:	4b2b      	ldr	r3, [pc, #172]	@ (341908e8 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3419083a:	429a      	cmp	r2, r3
3419083c:	d158      	bne.n	341908f0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3419083e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190842:	699b      	ldr	r3, [r3, #24]
34190844:	2b00      	cmp	r3, #0
34190846:	d016      	beq.n	34190876 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34190848:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419084c:	699b      	ldr	r3, [r3, #24]
3419084e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190852:	d010      	beq.n	34190876 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34190854:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190858:	699b      	ldr	r3, [r3, #24]
3419085a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419085e:	d00a      	beq.n	34190876 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34190860:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190864:	699b      	ldr	r3, [r3, #24]
34190866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419086a:	d004      	beq.n	34190876 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3419086c:	f240 1183 	movw	r1, #387	@ 0x183
34190870:	4819      	ldr	r0, [pc, #100]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
34190872:	f7f1 fcfb 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34190876:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419087a:	69db      	ldr	r3, [r3, #28]
3419087c:	2b00      	cmp	r3, #0
3419087e:	d005      	beq.n	3419088c <HAL_RCCEx_PeriphCLKConfig+0x1590>
34190880:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190884:	69db      	ldr	r3, [r3, #28]
34190886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419088a:	d904      	bls.n	34190896 <HAL_RCCEx_PeriphCLKConfig+0x159a>
3419088c:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34190890:	4811      	ldr	r0, [pc, #68]	@ (341908d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
34190892:	f7f1 fceb 	bl	3418226c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34190896:	4b11      	ldr	r3, [pc, #68]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
34190898:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3419089c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341908a0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341908a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341908a8:	699a      	ldr	r2, [r3, #24]
341908aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341908ae:	69db      	ldr	r3, [r3, #28]
341908b0:	3b01      	subs	r3, #1
341908b2:	041b      	lsls	r3, r3, #16
341908b4:	4313      	orrs	r3, r2
341908b6:	4a09      	ldr	r2, [pc, #36]	@ (341908dc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
341908b8:	430b      	orrs	r3, r1
341908ba:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341908be:	f7fe f8fb 	bl	3418eab8 <LL_RCC_IC3_Enable>
341908c2:	e068      	b.n	34190996 <HAL_RCCEx_PeriphCLKConfig+0x169a>
341908c4:	03010014 	.word	0x03010014
341908c8:	03000414 	.word	0x03000414
341908cc:	03010414 	.word	0x03010414
341908d0:	03020414 	.word	0x03020414
341908d4:	03030414 	.word	0x03030414
341908d8:	341a5394 	.word	0x341a5394
341908dc:	56028000 	.word	0x56028000
341908e0:	03000814 	.word	0x03000814
341908e4:	03010814 	.word	0x03010814
341908e8:	03020814 	.word	0x03020814
341908ec:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
341908f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341908f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341908f8:	4b8b      	ldr	r3, [pc, #556]	@ (34190b28 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
341908fa:	429a      	cmp	r2, r3
341908fc:	d142      	bne.n	34190984 <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
341908fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190902:	6a1b      	ldr	r3, [r3, #32]
34190904:	2b00      	cmp	r3, #0
34190906:	d016      	beq.n	34190936 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34190908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419090c:	6a1b      	ldr	r3, [r3, #32]
3419090e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190912:	d010      	beq.n	34190936 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34190914:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190918:	6a1b      	ldr	r3, [r3, #32]
3419091a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419091e:	d00a      	beq.n	34190936 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34190920:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190924:	6a1b      	ldr	r3, [r3, #32]
34190926:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419092a:	d004      	beq.n	34190936 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3419092c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
34190930:	487e      	ldr	r0, [pc, #504]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190932:	f7f1 fc9b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34190936:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419093a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419093c:	2b00      	cmp	r3, #0
3419093e:	d005      	beq.n	3419094c <HAL_RCCEx_PeriphCLKConfig+0x1650>
34190940:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419094a:	d904      	bls.n	34190956 <HAL_RCCEx_PeriphCLKConfig+0x165a>
3419094c:	f240 1191 	movw	r1, #401	@ 0x191
34190950:	4876      	ldr	r0, [pc, #472]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190952:	f7f1 fc8b 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34190956:	4b76      	ldr	r3, [pc, #472]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190958:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3419095c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190960:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190964:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190968:	6a1a      	ldr	r2, [r3, #32]
3419096a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419096e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190970:	3b01      	subs	r3, #1
34190972:	041b      	lsls	r3, r3, #16
34190974:	4313      	orrs	r3, r2
34190976:	4a6e      	ldr	r2, [pc, #440]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190978:	430b      	orrs	r3, r1
3419097a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3419097e:	f7fe f8db 	bl	3418eb38 <LL_RCC_IC4_Enable>
34190982:	e008      	b.n	34190996 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34190984:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190988:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3419098c:	4b69      	ldr	r3, [pc, #420]	@ (34190b34 <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3419098e:	429a      	cmp	r2, r3
34190990:	d101      	bne.n	34190996 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
34190992:	f7fe fc91 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34190996:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419099a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3419099e:	4618      	mov	r0, r3
341909a0:	f7fd fc38 	bl	3418e214 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
341909a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341909a8:	e9d3 2300 	ldrd	r2, r3, [r3]
341909ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
341909b0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
341909b4:	2300      	movs	r3, #0
341909b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
341909ba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
341909be:	4603      	mov	r3, r0
341909c0:	460a      	mov	r2, r1
341909c2:	4313      	orrs	r3, r2
341909c4:	f000 80c7 	beq.w	34190b56 <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
341909c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341909cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341909d0:	2b00      	cmp	r3, #0
341909d2:	d016      	beq.n	34190a02 <HAL_RCCEx_PeriphCLKConfig+0x1706>
341909d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341909d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341909dc:	2b10      	cmp	r3, #16
341909de:	d010      	beq.n	34190a02 <HAL_RCCEx_PeriphCLKConfig+0x1706>
341909e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341909e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341909e8:	2b20      	cmp	r3, #32
341909ea:	d00a      	beq.n	34190a02 <HAL_RCCEx_PeriphCLKConfig+0x1706>
341909ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341909f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341909f4:	2b30      	cmp	r3, #48	@ 0x30
341909f6:	d004      	beq.n	34190a02 <HAL_RCCEx_PeriphCLKConfig+0x1706>
341909f8:	f240 11ab 	movw	r1, #427	@ 0x1ab
341909fc:	484b      	ldr	r0, [pc, #300]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
341909fe:	f7f1 fc35 	bl	3418226c <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34190a02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34190a0a:	2b20      	cmp	r3, #32
34190a0c:	d142      	bne.n	34190a94 <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34190a0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a12:	699b      	ldr	r3, [r3, #24]
34190a14:	2b00      	cmp	r3, #0
34190a16:	d016      	beq.n	34190a46 <HAL_RCCEx_PeriphCLKConfig+0x174a>
34190a18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a1c:	699b      	ldr	r3, [r3, #24]
34190a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190a22:	d010      	beq.n	34190a46 <HAL_RCCEx_PeriphCLKConfig+0x174a>
34190a24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a28:	699b      	ldr	r3, [r3, #24]
34190a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190a2e:	d00a      	beq.n	34190a46 <HAL_RCCEx_PeriphCLKConfig+0x174a>
34190a30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a34:	699b      	ldr	r3, [r3, #24]
34190a36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190a3a:	d004      	beq.n	34190a46 <HAL_RCCEx_PeriphCLKConfig+0x174a>
34190a3c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
34190a40:	483a      	ldr	r0, [pc, #232]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190a42:	f7f1 fc13 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34190a46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a4a:	69db      	ldr	r3, [r3, #28]
34190a4c:	2b00      	cmp	r3, #0
34190a4e:	d005      	beq.n	34190a5c <HAL_RCCEx_PeriphCLKConfig+0x1760>
34190a50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a54:	69db      	ldr	r3, [r3, #28]
34190a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190a5a:	d904      	bls.n	34190a66 <HAL_RCCEx_PeriphCLKConfig+0x176a>
34190a5c:	f240 11b1 	movw	r1, #433	@ 0x1b1
34190a60:	4832      	ldr	r0, [pc, #200]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190a62:	f7f1 fc03 	bl	3418226c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34190a66:	4b32      	ldr	r3, [pc, #200]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190a68:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34190a6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190a70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190a74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a78:	699a      	ldr	r2, [r3, #24]
34190a7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a7e:	69db      	ldr	r3, [r3, #28]
34190a80:	3b01      	subs	r3, #1
34190a82:	041b      	lsls	r3, r3, #16
34190a84:	4313      	orrs	r3, r2
34190a86:	4a2a      	ldr	r2, [pc, #168]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190a88:	430b      	orrs	r3, r1
34190a8a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34190a8e:	f7fe f813 	bl	3418eab8 <LL_RCC_IC3_Enable>
34190a92:	e059      	b.n	34190b48 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34190a94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34190a9c:	2b30      	cmp	r3, #48	@ 0x30
34190a9e:	d14b      	bne.n	34190b38 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34190aa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190aa4:	6a1b      	ldr	r3, [r3, #32]
34190aa6:	2b00      	cmp	r3, #0
34190aa8:	d016      	beq.n	34190ad8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
34190aaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190aae:	6a1b      	ldr	r3, [r3, #32]
34190ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190ab4:	d010      	beq.n	34190ad8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
34190ab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190aba:	6a1b      	ldr	r3, [r3, #32]
34190abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190ac0:	d00a      	beq.n	34190ad8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
34190ac2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ac6:	6a1b      	ldr	r3, [r3, #32]
34190ac8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190acc:	d004      	beq.n	34190ad8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
34190ace:	f240 11bd 	movw	r1, #445	@ 0x1bd
34190ad2:	4816      	ldr	r0, [pc, #88]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190ad4:	f7f1 fbca 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34190ad8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190ade:	2b00      	cmp	r3, #0
34190ae0:	d005      	beq.n	34190aee <HAL_RCCEx_PeriphCLKConfig+0x17f2>
34190ae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190aec:	d904      	bls.n	34190af8 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
34190aee:	f44f 71df 	mov.w	r1, #446	@ 0x1be
34190af2:	480e      	ldr	r0, [pc, #56]	@ (34190b2c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
34190af4:	f7f1 fbba 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34190af8:	4b0d      	ldr	r3, [pc, #52]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190afa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34190afe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190b02:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190b06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b0a:	6a1a      	ldr	r2, [r3, #32]
34190b0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190b12:	3b01      	subs	r3, #1
34190b14:	041b      	lsls	r3, r3, #16
34190b16:	4313      	orrs	r3, r2
34190b18:	4a05      	ldr	r2, [pc, #20]	@ (34190b30 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
34190b1a:	430b      	orrs	r3, r1
34190b1c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34190b20:	f7fe f80a 	bl	3418eb38 <LL_RCC_IC4_Enable>
34190b24:	e010      	b.n	34190b48 <HAL_RCCEx_PeriphCLKConfig+0x184c>
34190b26:	bf00      	nop
34190b28:	03030814 	.word	0x03030814
34190b2c:	341a5394 	.word	0x341a5394
34190b30:	56028000 	.word	0x56028000
34190b34:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34190b38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34190b40:	2b10      	cmp	r3, #16
34190b42:	d101      	bne.n	34190b48 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
34190b44:	f7fe fbb8 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34190b48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34190b50:	4618      	mov	r0, r3
34190b52:	f7fd fa77 	bl	3418e044 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34190b56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
34190b5e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34190b62:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34190b66:	2300      	movs	r3, #0
34190b68:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34190b6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
34190b70:	4603      	mov	r3, r0
34190b72:	460a      	mov	r2, r1
34190b74:	4313      	orrs	r3, r2
34190b76:	f000 80c5 	beq.w	34190d04 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34190b7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b7e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190b82:	4b9f      	ldr	r3, [pc, #636]	@ (34190e00 <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
34190b84:	429a      	cmp	r2, r3
34190b86:	d019      	beq.n	34190bbc <HAL_RCCEx_PeriphCLKConfig+0x18c0>
34190b88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b8c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190b90:	4b9c      	ldr	r3, [pc, #624]	@ (34190e04 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
34190b92:	429a      	cmp	r2, r3
34190b94:	d012      	beq.n	34190bbc <HAL_RCCEx_PeriphCLKConfig+0x18c0>
34190b96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190b9a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190b9e:	4b9a      	ldr	r3, [pc, #616]	@ (34190e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
34190ba0:	429a      	cmp	r2, r3
34190ba2:	d00b      	beq.n	34190bbc <HAL_RCCEx_PeriphCLKConfig+0x18c0>
34190ba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ba8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190bac:	4b97      	ldr	r3, [pc, #604]	@ (34190e0c <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
34190bae:	429a      	cmp	r2, r3
34190bb0:	d004      	beq.n	34190bbc <HAL_RCCEx_PeriphCLKConfig+0x18c0>
34190bb2:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34190bb6:	4896      	ldr	r0, [pc, #600]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190bb8:	f7f1 fb58 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34190bbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190bc0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190bc4:	4b90      	ldr	r3, [pc, #576]	@ (34190e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
34190bc6:	429a      	cmp	r2, r3
34190bc8:	d142      	bne.n	34190c50 <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34190bca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190bce:	6a1b      	ldr	r3, [r3, #32]
34190bd0:	2b00      	cmp	r3, #0
34190bd2:	d016      	beq.n	34190c02 <HAL_RCCEx_PeriphCLKConfig+0x1906>
34190bd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190bd8:	6a1b      	ldr	r3, [r3, #32]
34190bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190bde:	d010      	beq.n	34190c02 <HAL_RCCEx_PeriphCLKConfig+0x1906>
34190be0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190be4:	6a1b      	ldr	r3, [r3, #32]
34190be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190bea:	d00a      	beq.n	34190c02 <HAL_RCCEx_PeriphCLKConfig+0x1906>
34190bec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190bf0:	6a1b      	ldr	r3, [r3, #32]
34190bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190bf6:	d004      	beq.n	34190c02 <HAL_RCCEx_PeriphCLKConfig+0x1906>
34190bf8:	f240 11dd 	movw	r1, #477	@ 0x1dd
34190bfc:	4884      	ldr	r0, [pc, #528]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190bfe:	f7f1 fb35 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34190c02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190c08:	2b00      	cmp	r3, #0
34190c0a:	d005      	beq.n	34190c18 <HAL_RCCEx_PeriphCLKConfig+0x191c>
34190c0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190c16:	d904      	bls.n	34190c22 <HAL_RCCEx_PeriphCLKConfig+0x1926>
34190c18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34190c1c:	487c      	ldr	r0, [pc, #496]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190c1e:	f7f1 fb25 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34190c22:	4b7c      	ldr	r3, [pc, #496]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190c24:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34190c28:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190c2c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190c30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c34:	6a1a      	ldr	r2, [r3, #32]
34190c36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190c3c:	3b01      	subs	r3, #1
34190c3e:	041b      	lsls	r3, r3, #16
34190c40:	4313      	orrs	r3, r2
34190c42:	4a74      	ldr	r2, [pc, #464]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190c44:	430b      	orrs	r3, r1
34190c46:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34190c4a:	f7fd ff75 	bl	3418eb38 <LL_RCC_IC4_Enable>
34190c4e:	e052      	b.n	34190cf6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34190c50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c54:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190c58:	4b6c      	ldr	r3, [pc, #432]	@ (34190e0c <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
34190c5a:	429a      	cmp	r2, r3
34190c5c:	d142      	bne.n	34190ce4 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34190c5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190c64:	2b00      	cmp	r3, #0
34190c66:	d016      	beq.n	34190c96 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34190c68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190c72:	d010      	beq.n	34190c96 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34190c74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190c7e:	d00a      	beq.n	34190c96 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34190c80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190c86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190c8a:	d004      	beq.n	34190c96 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34190c8c:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
34190c90:	485f      	ldr	r0, [pc, #380]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190c92:	f7f1 faeb 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34190c96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190c9c:	2b00      	cmp	r3, #0
34190c9e:	d005      	beq.n	34190cac <HAL_RCCEx_PeriphCLKConfig+0x19b0>
34190ca0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190caa:	d904      	bls.n	34190cb6 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
34190cac:	f240 11eb 	movw	r1, #491	@ 0x1eb
34190cb0:	4857      	ldr	r0, [pc, #348]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190cb2:	f7f1 fadb 	bl	3418226c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34190cb6:	4b57      	ldr	r3, [pc, #348]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190cb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34190cbc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190cc0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190cc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34190cca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190cd0:	3b01      	subs	r3, #1
34190cd2:	041b      	lsls	r3, r3, #16
34190cd4:	4313      	orrs	r3, r2
34190cd6:	4a4f      	ldr	r2, [pc, #316]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190cd8:	430b      	orrs	r3, r1
34190cda:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34190cde:	f7fd ff6b 	bl	3418ebb8 <LL_RCC_IC5_Enable>
34190ce2:	e008      	b.n	34190cf6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34190ce4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ce8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34190cec:	4b45      	ldr	r3, [pc, #276]	@ (34190e04 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
34190cee:	429a      	cmp	r2, r3
34190cf0:	d101      	bne.n	34190cf6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
34190cf2:	f7fe fae1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
34190cf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190cfa:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
34190cfe:	4618      	mov	r0, r3
34190d00:	f7fd fa51 	bl	3418e1a6 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34190d04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d08:	e9d3 2300 	ldrd	r2, r3, [r3]
34190d0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34190d10:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
34190d14:	2300      	movs	r3, #0
34190d16:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
34190d1a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
34190d1e:	4603      	mov	r3, r0
34190d20:	460a      	mov	r2, r1
34190d22:	4313      	orrs	r3, r2
34190d24:	f000 80da 	beq.w	34190edc <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34190d28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d2c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190d30:	4b39      	ldr	r3, [pc, #228]	@ (34190e18 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
34190d32:	429a      	cmp	r2, r3
34190d34:	d019      	beq.n	34190d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
34190d36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d3a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190d3e:	4b37      	ldr	r3, [pc, #220]	@ (34190e1c <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
34190d40:	429a      	cmp	r2, r3
34190d42:	d012      	beq.n	34190d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
34190d44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d48:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190d4c:	4b34      	ldr	r3, [pc, #208]	@ (34190e20 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
34190d4e:	429a      	cmp	r2, r3
34190d50:	d00b      	beq.n	34190d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
34190d52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d56:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190d5a:	4b32      	ldr	r3, [pc, #200]	@ (34190e24 <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
34190d5c:	429a      	cmp	r2, r3
34190d5e:	d004      	beq.n	34190d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
34190d60:	f240 2105 	movw	r1, #517	@ 0x205
34190d64:	482a      	ldr	r0, [pc, #168]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190d66:	f7f1 fa81 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34190d6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d6e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190d72:	4b2b      	ldr	r3, [pc, #172]	@ (34190e20 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
34190d74:	429a      	cmp	r2, r3
34190d76:	d157      	bne.n	34190e28 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34190d78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d7c:	6a1b      	ldr	r3, [r3, #32]
34190d7e:	2b00      	cmp	r3, #0
34190d80:	d016      	beq.n	34190db0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
34190d82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d86:	6a1b      	ldr	r3, [r3, #32]
34190d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190d8c:	d010      	beq.n	34190db0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
34190d8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d92:	6a1b      	ldr	r3, [r3, #32]
34190d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190d98:	d00a      	beq.n	34190db0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
34190d9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190d9e:	6a1b      	ldr	r3, [r3, #32]
34190da0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190da4:	d004      	beq.n	34190db0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
34190da6:	f240 210a 	movw	r1, #522	@ 0x20a
34190daa:	4819      	ldr	r0, [pc, #100]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190dac:	f7f1 fa5e 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34190db0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190db6:	2b00      	cmp	r3, #0
34190db8:	d005      	beq.n	34190dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aca>
34190dba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190dc4:	d904      	bls.n	34190dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
34190dc6:	f240 210b 	movw	r1, #523	@ 0x20b
34190dca:	4811      	ldr	r0, [pc, #68]	@ (34190e10 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
34190dcc:	f7f1 fa4e 	bl	3418226c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34190dd0:	4b10      	ldr	r3, [pc, #64]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190dd2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34190dd6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190dda:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190dde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190de2:	6a1a      	ldr	r2, [r3, #32]
34190de4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190dea:	3b01      	subs	r3, #1
34190dec:	041b      	lsls	r3, r3, #16
34190dee:	4313      	orrs	r3, r2
34190df0:	4a08      	ldr	r2, [pc, #32]	@ (34190e14 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
34190df2:	430b      	orrs	r3, r1
34190df4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34190df8:	f7fd fe9e 	bl	3418eb38 <LL_RCC_IC4_Enable>
34190dfc:	e067      	b.n	34190ece <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
34190dfe:	bf00      	nop
34190e00:	0300001c 	.word	0x0300001c
34190e04:	0301001c 	.word	0x0301001c
34190e08:	0302001c 	.word	0x0302001c
34190e0c:	0303001c 	.word	0x0303001c
34190e10:	341a5394 	.word	0x341a5394
34190e14:	56028000 	.word	0x56028000
34190e18:	0300041c 	.word	0x0300041c
34190e1c:	0301041c 	.word	0x0301041c
34190e20:	0302041c 	.word	0x0302041c
34190e24:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34190e28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e2c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190e30:	4ba0      	ldr	r3, [pc, #640]	@ (341910b4 <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
34190e32:	429a      	cmp	r2, r3
34190e34:	d142      	bne.n	34190ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34190e36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190e3c:	2b00      	cmp	r3, #0
34190e3e:	d016      	beq.n	34190e6e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
34190e40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190e4a:	d010      	beq.n	34190e6e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
34190e4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190e56:	d00a      	beq.n	34190e6e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
34190e58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34190e5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190e62:	d004      	beq.n	34190e6e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
34190e64:	f240 2117 	movw	r1, #535	@ 0x217
34190e68:	4893      	ldr	r0, [pc, #588]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190e6a:	f7f1 f9ff 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34190e6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190e74:	2b00      	cmp	r3, #0
34190e76:	d005      	beq.n	34190e84 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
34190e78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190e82:	d904      	bls.n	34190e8e <HAL_RCCEx_PeriphCLKConfig+0x1b92>
34190e84:	f44f 7106 	mov.w	r1, #536	@ 0x218
34190e88:	488b      	ldr	r0, [pc, #556]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190e8a:	f7f1 f9ef 	bl	3418226c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34190e8e:	4b8b      	ldr	r3, [pc, #556]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
34190e90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34190e94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190e98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34190e9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34190ea2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190ea8:	3b01      	subs	r3, #1
34190eaa:	041b      	lsls	r3, r3, #16
34190eac:	4313      	orrs	r3, r2
34190eae:	4a83      	ldr	r2, [pc, #524]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
34190eb0:	430b      	orrs	r3, r1
34190eb2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34190eb6:	f7fd fe7f 	bl	3418ebb8 <LL_RCC_IC5_Enable>
34190eba:	e008      	b.n	34190ece <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34190ebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ec0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34190ec4:	4b7e      	ldr	r3, [pc, #504]	@ (341910c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
34190ec6:	429a      	cmp	r2, r3
34190ec8:	d101      	bne.n	34190ece <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
34190eca:	f7fe f9f5 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
34190ece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ed2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
34190ed6:	4618      	mov	r0, r3
34190ed8:	f7fd f965 	bl	3418e1a6 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34190edc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
34190ee4:	f002 0301 	and.w	r3, r2, #1
34190ee8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
34190eec:	2300      	movs	r3, #0
34190eee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
34190ef2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
34190ef6:	4603      	mov	r3, r0
34190ef8:	460a      	mov	r2, r1
34190efa:	4313      	orrs	r3, r2
34190efc:	f000 8100 	beq.w	34191100 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34190f00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f08:	2b00      	cmp	r3, #0
34190f0a:	d02e      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f14:	2b10      	cmp	r3, #16
34190f16:	d028      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f20:	2b20      	cmp	r3, #32
34190f22:	d022      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f2c:	2b30      	cmp	r3, #48	@ 0x30
34190f2e:	d01c      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f38:	2b40      	cmp	r3, #64	@ 0x40
34190f3a:	d016      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f44:	2b50      	cmp	r3, #80	@ 0x50
34190f46:	d010      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f50:	2b60      	cmp	r3, #96	@ 0x60
34190f52:	d00a      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f5c:	2b70      	cmp	r3, #112	@ 0x70
34190f5e:	d004      	beq.n	34190f6a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
34190f60:	f240 2132 	movw	r1, #562	@ 0x232
34190f64:	4854      	ldr	r0, [pc, #336]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190f66:	f7f1 f981 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34190f6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34190f72:	2b00      	cmp	r3, #0
34190f74:	d006      	beq.n	34190f84 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
34190f76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34190f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190f82:	d904      	bls.n	34190f8e <HAL_RCCEx_PeriphCLKConfig+0x1c92>
34190f84:	f240 2133 	movw	r1, #563	@ 0x233
34190f88:	484b      	ldr	r0, [pc, #300]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190f8a:	f7f1 f96f 	bl	3418226c <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34190f8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34190f96:	2b20      	cmp	r3, #32
34190f98:	d142      	bne.n	34191020 <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34190f9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190fa0:	2b00      	cmp	r3, #0
34190fa2:	d016      	beq.n	34190fd2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
34190fa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190fae:	d010      	beq.n	34190fd2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
34190fb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34190fba:	d00a      	beq.n	34190fd2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
34190fbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190fc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34190fc6:	d004      	beq.n	34190fd2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
34190fc8:	f44f 710e 	mov.w	r1, #568	@ 0x238
34190fcc:	483a      	ldr	r0, [pc, #232]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190fce:	f7f1 f94d 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34190fd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34190fd8:	2b00      	cmp	r3, #0
34190fda:	d005      	beq.n	34190fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
34190fdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34190fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34190fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34190fe6:	d904      	bls.n	34190ff2 <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
34190fe8:	f240 2139 	movw	r1, #569	@ 0x239
34190fec:	4832      	ldr	r0, [pc, #200]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34190fee:	f7f1 f93d 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34190ff2:	4b32      	ldr	r3, [pc, #200]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
34190ff4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34190ff8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34190ffc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34191006:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419100a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419100c:	3b01      	subs	r3, #1
3419100e:	041b      	lsls	r3, r3, #16
34191010:	4313      	orrs	r3, r2
34191012:	4a2a      	ldr	r2, [pc, #168]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
34191014:	430b      	orrs	r3, r1
34191016:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3419101a:	f7fd fe0d 	bl	3418ec38 <LL_RCC_IC7_Enable>
3419101e:	e059      	b.n	341910d4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34191020:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191024:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34191028:	2b30      	cmp	r3, #48	@ 0x30
3419102a:	d14b      	bne.n	341910c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3419102c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191032:	2b00      	cmp	r3, #0
34191034:	d016      	beq.n	34191064 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
34191036:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419103c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191040:	d010      	beq.n	34191064 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
34191042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419104c:	d00a      	beq.n	34191064 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3419104e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191054:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191058:	d004      	beq.n	34191064 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3419105a:	f240 2145 	movw	r1, #581	@ 0x245
3419105e:	4816      	ldr	r0, [pc, #88]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34191060:	f7f1 f904 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34191064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419106a:	2b00      	cmp	r3, #0
3419106c:	d005      	beq.n	3419107a <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3419106e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34191074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191078:	d904      	bls.n	34191084 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3419107a:	f240 2146 	movw	r1, #582	@ 0x246
3419107e:	480e      	ldr	r0, [pc, #56]	@ (341910b8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
34191080:	f7f1 f8f4 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34191084:	4b0d      	ldr	r3, [pc, #52]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
34191086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419108a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419108e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191092:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34191098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419109e:	3b01      	subs	r3, #1
341910a0:	041b      	lsls	r3, r3, #16
341910a2:	4313      	orrs	r3, r2
341910a4:	4a05      	ldr	r2, [pc, #20]	@ (341910bc <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
341910a6:	430b      	orrs	r3, r1
341910a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341910ac:	f7fd fe04 	bl	3418ecb8 <LL_RCC_IC8_Enable>
341910b0:	e010      	b.n	341910d4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
341910b2:	bf00      	nop
341910b4:	0303041c 	.word	0x0303041c
341910b8:	341a5394 	.word	0x341a5394
341910bc:	56028000 	.word	0x56028000
341910c0:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
341910c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341910c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341910cc:	2b10      	cmp	r3, #16
341910ce:	d101      	bne.n	341910d4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
341910d0:	f7fe f8f2 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
341910d4:	4b77      	ldr	r3, [pc, #476]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
341910d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341910da:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
341910de:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
341910e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341910e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
341910ea:	3b01      	subs	r3, #1
341910ec:	021a      	lsls	r2, r3, #8
341910ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341910f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341910f6:	4313      	orrs	r3, r2
341910f8:	4a6e      	ldr	r2, [pc, #440]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
341910fa:	430b      	orrs	r3, r1
341910fc:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34191100:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191104:	e9d3 2300 	ldrd	r2, r3, [r3]
34191108:	f002 0302 	and.w	r3, r2, #2
3419110c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
34191110:	2300      	movs	r3, #0
34191112:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
34191116:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3419111a:	4603      	mov	r3, r0
3419111c:	460a      	mov	r2, r1
3419111e:	4313      	orrs	r3, r2
34191120:	f000 80db 	beq.w	341912da <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34191124:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191128:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3419112c:	2b00      	cmp	r3, #0
3419112e:	d02e      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191130:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191134:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191138:	2b01      	cmp	r3, #1
3419113a:	d028      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3419113c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191140:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191144:	2b02      	cmp	r3, #2
34191146:	d022      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419114c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191150:	2b03      	cmp	r3, #3
34191152:	d01c      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191154:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191158:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3419115c:	2b04      	cmp	r3, #4
3419115e:	d016      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191164:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191168:	2b05      	cmp	r3, #5
3419116a:	d010      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3419116c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191170:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191174:	2b06      	cmp	r3, #6
34191176:	d00a      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191178:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419117c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191180:	2b07      	cmp	r3, #7
34191182:	d004      	beq.n	3419118e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
34191184:	f240 2161 	movw	r1, #609	@ 0x261
34191188:	484b      	ldr	r0, [pc, #300]	@ (341912b8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3419118a:	f7f1 f86f 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3419118e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191192:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191196:	2b02      	cmp	r3, #2
34191198:	d142      	bne.n	34191220 <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3419119a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341911a0:	2b00      	cmp	r3, #0
341911a2:	d016      	beq.n	341911d2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
341911a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341911a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341911aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341911ae:	d010      	beq.n	341911d2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
341911b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341911b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341911b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341911ba:	d00a      	beq.n	341911d2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
341911bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341911c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341911c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341911c6:	d004      	beq.n	341911d2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
341911c8:	f240 2166 	movw	r1, #614	@ 0x266
341911cc:	483a      	ldr	r0, [pc, #232]	@ (341912b8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
341911ce:	f7f1 f84d 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
341911d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341911d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341911d8:	2b00      	cmp	r3, #0
341911da:	d005      	beq.n	341911e8 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
341911dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341911e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341911e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341911e6:	d904      	bls.n	341911f2 <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
341911e8:	f240 2167 	movw	r1, #615	@ 0x267
341911ec:	4832      	ldr	r0, [pc, #200]	@ (341912b8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
341911ee:	f7f1 f83d 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341911f2:	4b30      	ldr	r3, [pc, #192]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
341911f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341911f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341911fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191200:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34191206:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419120a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419120c:	3b01      	subs	r3, #1
3419120e:	041b      	lsls	r3, r3, #16
34191210:	4313      	orrs	r3, r2
34191212:	4a28      	ldr	r2, [pc, #160]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
34191214:	430b      	orrs	r3, r1
34191216:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3419121a:	f7fd fd0d 	bl	3418ec38 <LL_RCC_IC7_Enable>
3419121e:	e055      	b.n	341912cc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34191220:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191224:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34191228:	2b03      	cmp	r3, #3
3419122a:	d147      	bne.n	341912bc <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3419122c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191232:	2b00      	cmp	r3, #0
34191234:	d016      	beq.n	34191264 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
34191236:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419123c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191240:	d010      	beq.n	34191264 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
34191242:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419124c:	d00a      	beq.n	34191264 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3419124e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34191254:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191258:	d004      	beq.n	34191264 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3419125a:	f240 2173 	movw	r1, #627	@ 0x273
3419125e:	4816      	ldr	r0, [pc, #88]	@ (341912b8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
34191260:	f7f1 f804 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34191264:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419126a:	2b00      	cmp	r3, #0
3419126c:	d005      	beq.n	3419127a <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3419126e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34191274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191278:	d904      	bls.n	34191284 <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3419127a:	f44f 711d 	mov.w	r1, #628	@ 0x274
3419127e:	480e      	ldr	r0, [pc, #56]	@ (341912b8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
34191280:	f7f0 fff4 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34191284:	4b0b      	ldr	r3, [pc, #44]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
34191286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419128a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419128e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191292:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34191298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419129e:	3b01      	subs	r3, #1
341912a0:	041b      	lsls	r3, r3, #16
341912a2:	4313      	orrs	r3, r2
341912a4:	4a03      	ldr	r2, [pc, #12]	@ (341912b4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
341912a6:	430b      	orrs	r3, r1
341912a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341912ac:	f7fd fd04 	bl	3418ecb8 <LL_RCC_IC8_Enable>
341912b0:	e00c      	b.n	341912cc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
341912b2:	bf00      	nop
341912b4:	56028000 	.word	0x56028000
341912b8:	341a5394 	.word	0x341a5394
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
341912bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341912c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341912c4:	2b01      	cmp	r3, #1
341912c6:	d101      	bne.n	341912cc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
341912c8:	f7fd fff6 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
341912cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341912d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341912d4:	4618      	mov	r0, r3
341912d6:	f7fc fdf7 	bl	3418dec8 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
341912da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341912de:	e9d3 2300 	ldrd	r2, r3, [r3]
341912e2:	f002 0308 	and.w	r3, r2, #8
341912e6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
341912ea:	2300      	movs	r3, #0
341912ec:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
341912f0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
341912f4:	4603      	mov	r3, r0
341912f6:	460a      	mov	r2, r1
341912f8:	4313      	orrs	r3, r2
341912fa:	d049      	beq.n	34191390 <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
341912fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34191304:	2b00      	cmp	r3, #0
34191306:	d019      	beq.n	3419133c <HAL_RCCEx_PeriphCLKConfig+0x2040>
34191308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419130c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34191310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191314:	d012      	beq.n	3419133c <HAL_RCCEx_PeriphCLKConfig+0x2040>
34191316:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3419131e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191322:	d00b      	beq.n	3419133c <HAL_RCCEx_PeriphCLKConfig+0x2040>
34191324:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3419132c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191330:	d004      	beq.n	3419133c <HAL_RCCEx_PeriphCLKConfig+0x2040>
34191332:	f240 218e 	movw	r1, #654	@ 0x28e
34191336:	489e      	ldr	r0, [pc, #632]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34191338:	f7f0 ff98 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3419133c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34191344:	2b00      	cmp	r3, #0
34191346:	d006      	beq.n	34191356 <HAL_RCCEx_PeriphCLKConfig+0x205a>
34191348:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419134c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34191350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191354:	d904      	bls.n	34191360 <HAL_RCCEx_PeriphCLKConfig+0x2064>
34191356:	f240 218f 	movw	r1, #655	@ 0x28f
3419135a:	4895      	ldr	r0, [pc, #596]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3419135c:	f7f0 ff86 	bl	3418226c <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34191360:	4b94      	ldr	r3, [pc, #592]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
34191362:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34191366:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419136a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419136e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191372:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34191376:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3419137e:	3b01      	subs	r3, #1
34191380:	041b      	lsls	r3, r3, #16
34191382:	4313      	orrs	r3, r2
34191384:	4a8b      	ldr	r2, [pc, #556]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
34191386:	430b      	orrs	r3, r1
34191388:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3419138c:	f7fd fed4 	bl	3418f138 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34191390:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191394:	e9d3 2300 	ldrd	r2, r3, [r3]
34191398:	f002 0310 	and.w	r3, r2, #16
3419139c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
341913a0:	2300      	movs	r3, #0
341913a2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
341913a6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
341913aa:	4603      	mov	r3, r0
341913ac:	460a      	mov	r2, r1
341913ae:	4313      	orrs	r3, r2
341913b0:	f000 8082 	beq.w	341914b8 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
341913b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341913b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341913bc:	2b00      	cmp	r3, #0
341913be:	d019      	beq.n	341913f4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
341913c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341913c4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341913c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341913cc:	d012      	beq.n	341913f4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
341913ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341913d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341913d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341913da:	d00b      	beq.n	341913f4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
341913dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341913e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341913e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341913e8:	d004      	beq.n	341913f4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
341913ea:	f240 219d 	movw	r1, #669	@ 0x29d
341913ee:	4870      	ldr	r0, [pc, #448]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
341913f0:	f7f0 ff3c 	bl	3418226c <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
341913f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341913f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341913fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34191400:	d14a      	bne.n	34191498 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34191402:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419140a:	2b00      	cmp	r3, #0
3419140c:	d019      	beq.n	34191442 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3419140e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34191416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419141a:	d012      	beq.n	34191442 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3419141c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34191424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191428:	d00b      	beq.n	34191442 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3419142a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34191432:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191436:	d004      	beq.n	34191442 <HAL_RCCEx_PeriphCLKConfig+0x2146>
34191438:	f240 21a2 	movw	r1, #674	@ 0x2a2
3419143c:	485c      	ldr	r0, [pc, #368]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3419143e:	f7f0 ff15 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34191442:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3419144a:	2b00      	cmp	r3, #0
3419144c:	d006      	beq.n	3419145c <HAL_RCCEx_PeriphCLKConfig+0x2160>
3419144e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34191456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419145a:	d904      	bls.n	34191466 <HAL_RCCEx_PeriphCLKConfig+0x216a>
3419145c:	f240 21a3 	movw	r1, #675	@ 0x2a3
34191460:	4853      	ldr	r0, [pc, #332]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34191462:	f7f0 ff03 	bl	3418226c <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34191466:	4b53      	ldr	r3, [pc, #332]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
34191468:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3419146c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191470:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191474:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191478:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3419147c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34191484:	3b01      	subs	r3, #1
34191486:	041b      	lsls	r3, r3, #16
34191488:	4313      	orrs	r3, r2
3419148a:	4a4a      	ldr	r2, [pc, #296]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3419148c:	430b      	orrs	r3, r1
3419148e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
34191492:	f7fd fe11 	bl	3418f0b8 <LL_RCC_IC17_Enable>
34191496:	e008      	b.n	341914aa <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34191498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419149c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341914a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341914a4:	d101      	bne.n	341914aa <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
341914a6:	f7fd ff07 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
341914aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341914ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341914b2:	4618      	mov	r0, r3
341914b4:	f7fc fd34 	bl	3418df20 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
341914b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341914bc:	e9d3 2300 	ldrd	r2, r3, [r3]
341914c0:	f002 0320 	and.w	r3, r2, #32
341914c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
341914c8:	2300      	movs	r3, #0
341914ca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
341914ce:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
341914d2:	4603      	mov	r3, r0
341914d4:	460a      	mov	r2, r1
341914d6:	4313      	orrs	r3, r2
341914d8:	d07e      	beq.n	341915d8 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
341914da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341914de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341914e2:	2b00      	cmp	r3, #0
341914e4:	d019      	beq.n	3419151a <HAL_RCCEx_PeriphCLKConfig+0x221e>
341914e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341914ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341914ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341914f2:	d012      	beq.n	3419151a <HAL_RCCEx_PeriphCLKConfig+0x221e>
341914f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341914f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341914fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34191500:	d00b      	beq.n	3419151a <HAL_RCCEx_PeriphCLKConfig+0x221e>
34191502:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191506:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3419150a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3419150e:	d004      	beq.n	3419151a <HAL_RCCEx_PeriphCLKConfig+0x221e>
34191510:	f240 21bd 	movw	r1, #701	@ 0x2bd
34191514:	4826      	ldr	r0, [pc, #152]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34191516:	f7f0 fea9 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3419151a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419151e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34191522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34191526:	d147      	bne.n	341915b8 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34191528:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3419152e:	2b00      	cmp	r3, #0
34191530:	d016      	beq.n	34191560 <HAL_RCCEx_PeriphCLKConfig+0x2264>
34191532:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34191538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419153c:	d010      	beq.n	34191560 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3419153e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34191544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191548:	d00a      	beq.n	34191560 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3419154a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419154e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34191550:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191554:	d004      	beq.n	34191560 <HAL_RCCEx_PeriphCLKConfig+0x2264>
34191556:	f240 21c2 	movw	r1, #706	@ 0x2c2
3419155a:	4815      	ldr	r0, [pc, #84]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3419155c:	f7f0 fe86 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34191560:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34191566:	2b00      	cmp	r3, #0
34191568:	d005      	beq.n	34191576 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3419156a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419156e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34191570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191574:	d904      	bls.n	34191580 <HAL_RCCEx_PeriphCLKConfig+0x2284>
34191576:	f240 21c3 	movw	r1, #707	@ 0x2c3
3419157a:	480d      	ldr	r0, [pc, #52]	@ (341915b0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3419157c:	f7f0 fe76 	bl	3418226c <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34191580:	4b0c      	ldr	r3, [pc, #48]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
34191582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34191586:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419158a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419158e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191592:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
34191594:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3419159a:	3b01      	subs	r3, #1
3419159c:	041b      	lsls	r3, r3, #16
3419159e:	4313      	orrs	r3, r2
341915a0:	4a04      	ldr	r2, [pc, #16]	@ (341915b4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
341915a2:	430b      	orrs	r3, r1
341915a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
341915a8:	f7fd fc46 	bl	3418ee38 <LL_RCC_IC12_Enable>
341915ac:	e00d      	b.n	341915ca <HAL_RCCEx_PeriphCLKConfig+0x22ce>
341915ae:	bf00      	nop
341915b0:	341a5394 	.word	0x341a5394
341915b4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
341915b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341915bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341915c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341915c4:	d101      	bne.n	341915ca <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
341915c6:	f7fd fe77 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
341915ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341915ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341915d2:	4618      	mov	r0, r3
341915d4:	f7fc fcba 	bl	3418df4c <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
341915d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341915dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341915e0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
341915e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
341915e8:	2300      	movs	r3, #0
341915ea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
341915ee:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
341915f2:	4603      	mov	r3, r0
341915f4:	460a      	mov	r2, r1
341915f6:	4313      	orrs	r3, r2
341915f8:	d01f      	beq.n	3419163a <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
341915fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341915fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34191602:	2b00      	cmp	r3, #0
34191604:	d012      	beq.n	3419162c <HAL_RCCEx_PeriphCLKConfig+0x2330>
34191606:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419160a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3419160e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34191612:	d00b      	beq.n	3419162c <HAL_RCCEx_PeriphCLKConfig+0x2330>
34191614:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191618:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3419161c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34191620:	d004      	beq.n	3419162c <HAL_RCCEx_PeriphCLKConfig+0x2330>
34191622:	f240 21dd 	movw	r1, #733	@ 0x2dd
34191626:	48c1      	ldr	r0, [pc, #772]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
34191628:	f7f0 fe20 	bl	3418226c <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3419162c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191630:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34191634:	4618      	mov	r0, r3
34191636:	f7fc fc9f 	bl	3418df78 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3419163a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419163e:	e9d3 2300 	ldrd	r2, r3, [r3]
34191642:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34191646:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3419164a:	2300      	movs	r3, #0
3419164c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
34191650:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
34191654:	4603      	mov	r3, r0
34191656:	460a      	mov	r2, r1
34191658:	4313      	orrs	r3, r2
3419165a:	d018      	beq.n	3419168e <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3419165c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191660:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34191664:	2b00      	cmp	r3, #0
34191666:	d00b      	beq.n	34191680 <HAL_RCCEx_PeriphCLKConfig+0x2384>
34191668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419166c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34191670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34191674:	d004      	beq.n	34191680 <HAL_RCCEx_PeriphCLKConfig+0x2384>
34191676:	f240 21e7 	movw	r1, #743	@ 0x2e7
3419167a:	48ac      	ldr	r0, [pc, #688]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3419167c:	f7f0 fdf6 	bl	3418226c <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
34191680:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191684:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34191688:	4618      	mov	r0, r3
3419168a:	f7fc fc99 	bl	3418dfc0 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3419168e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191692:	e9d3 2300 	ldrd	r2, r3, [r3]
34191696:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3419169a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3419169e:	2300      	movs	r3, #0
341916a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
341916a4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
341916a8:	4603      	mov	r3, r0
341916aa:	460a      	mov	r2, r1
341916ac:	4313      	orrs	r3, r2
341916ae:	d018      	beq.n	341916e2 <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
341916b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341916b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341916b8:	2b00      	cmp	r3, #0
341916ba:	d00b      	beq.n	341916d4 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
341916bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341916c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341916c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341916c8:	d004      	beq.n	341916d4 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
341916ca:	f240 21f1 	movw	r1, #753	@ 0x2f1
341916ce:	4897      	ldr	r0, [pc, #604]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
341916d0:	f7f0 fdcc 	bl	3418226c <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
341916d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341916d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341916dc:	4618      	mov	r0, r3
341916de:	f7fc fc85 	bl	3418dfec <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
341916e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341916e6:	e9d3 2300 	ldrd	r2, r3, [r3]
341916ea:	f402 7300 	and.w	r3, r2, #512	@ 0x200
341916ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
341916f2:	2300      	movs	r3, #0
341916f4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
341916f8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
341916fc:	4603      	mov	r3, r0
341916fe:	460a      	mov	r2, r1
34191700:	4313      	orrs	r3, r2
34191702:	f000 8093 	beq.w	3419182c <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34191706:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419170a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3419170e:	2b00      	cmp	r3, #0
34191710:	d016      	beq.n	34191740 <HAL_RCCEx_PeriphCLKConfig+0x2444>
34191712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191716:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3419171a:	2b01      	cmp	r3, #1
3419171c:	d010      	beq.n	34191740 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3419171e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191722:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34191726:	2b02      	cmp	r3, #2
34191728:	d00a      	beq.n	34191740 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3419172a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419172e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34191732:	2b03      	cmp	r3, #3
34191734:	d004      	beq.n	34191740 <HAL_RCCEx_PeriphCLKConfig+0x2444>
34191736:	f240 21fb 	movw	r1, #763	@ 0x2fb
3419173a:	487c      	ldr	r0, [pc, #496]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3419173c:	f7f0 fd96 	bl	3418226c <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34191740:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34191748:	2b00      	cmp	r3, #0
3419174a:	d005      	beq.n	34191758 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3419174c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34191754:	2b10      	cmp	r3, #16
34191756:	d904      	bls.n	34191762 <HAL_RCCEx_PeriphCLKConfig+0x2466>
34191758:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3419175c:	4873      	ldr	r0, [pc, #460]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3419175e:	f7f0 fd85 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34191762:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3419176a:	2b02      	cmp	r3, #2
3419176c:	d142      	bne.n	341917f4 <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3419176e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34191774:	2b00      	cmp	r3, #0
34191776:	d016      	beq.n	341917a6 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
34191778:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419177c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419177e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191782:	d010      	beq.n	341917a6 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
34191784:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419178a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419178e:	d00a      	beq.n	341917a6 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
34191790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34191796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419179a:	d004      	beq.n	341917a6 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3419179c:	f240 3101 	movw	r1, #769	@ 0x301
341917a0:	4862      	ldr	r0, [pc, #392]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
341917a2:	f7f0 fd63 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
341917a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341917aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341917ac:	2b00      	cmp	r3, #0
341917ae:	d005      	beq.n	341917bc <HAL_RCCEx_PeriphCLKConfig+0x24c0>
341917b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341917b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341917b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341917ba:	d904      	bls.n	341917c6 <HAL_RCCEx_PeriphCLKConfig+0x24ca>
341917bc:	f240 3102 	movw	r1, #770	@ 0x302
341917c0:	485a      	ldr	r0, [pc, #360]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
341917c2:	f7f0 fd53 	bl	3418226c <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
341917c6:	4b5a      	ldr	r3, [pc, #360]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
341917c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341917cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341917d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341917d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341917d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
341917da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341917de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341917e0:	3b01      	subs	r3, #1
341917e2:	041b      	lsls	r3, r3, #16
341917e4:	4313      	orrs	r3, r2
341917e6:	4a52      	ldr	r2, [pc, #328]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
341917e8:	430b      	orrs	r3, r1
341917ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
341917ee:	f7fd fb63 	bl	3418eeb8 <LL_RCC_IC13_Enable>
341917f2:	e007      	b.n	34191804 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
341917f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341917f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341917fc:	2b01      	cmp	r3, #1
341917fe:	d101      	bne.n	34191804 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
34191800:	f7fd fd5a 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34191804:	4b4a      	ldr	r3, [pc, #296]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
34191806:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3419180a:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3419180e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34191816:	3b01      	subs	r3, #1
34191818:	011a      	lsls	r2, r3, #4
3419181a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419181e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34191822:	4313      	orrs	r3, r2
34191824:	4a42      	ldr	r2, [pc, #264]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
34191826:	430b      	orrs	r3, r1
34191828:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3419182c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191830:	e9d3 2300 	ldrd	r2, r3, [r3]
34191834:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
34191838:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3419183c:	2300      	movs	r3, #0
3419183e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
34191842:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
34191846:	4603      	mov	r3, r0
34191848:	460a      	mov	r2, r1
3419184a:	4313      	orrs	r3, r2
3419184c:	f000 8081 	beq.w	34191952 <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34191850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191854:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34191858:	2b00      	cmp	r3, #0
3419185a:	d016      	beq.n	3419188a <HAL_RCCEx_PeriphCLKConfig+0x258e>
3419185c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191860:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34191864:	2b01      	cmp	r3, #1
34191866:	d010      	beq.n	3419188a <HAL_RCCEx_PeriphCLKConfig+0x258e>
34191868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419186c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34191870:	2b02      	cmp	r3, #2
34191872:	d00a      	beq.n	3419188a <HAL_RCCEx_PeriphCLKConfig+0x258e>
34191874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3419187c:	2b03      	cmp	r3, #3
3419187e:	d004      	beq.n	3419188a <HAL_RCCEx_PeriphCLKConfig+0x258e>
34191880:	f240 311d 	movw	r1, #797	@ 0x31d
34191884:	4829      	ldr	r0, [pc, #164]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
34191886:	f7f0 fcf1 	bl	3418226c <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3419188a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419188e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34191892:	2b02      	cmp	r3, #2
34191894:	d14e      	bne.n	34191934 <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34191896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419189a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3419189e:	2b00      	cmp	r3, #0
341918a0:	d019      	beq.n	341918d6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
341918a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341918a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341918aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341918ae:	d012      	beq.n	341918d6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
341918b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341918b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341918b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341918bc:	d00b      	beq.n	341918d6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
341918be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341918c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341918c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341918ca:	d004      	beq.n	341918d6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
341918cc:	f240 3122 	movw	r1, #802	@ 0x322
341918d0:	4816      	ldr	r0, [pc, #88]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
341918d2:	f7f0 fccb 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
341918d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341918da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341918de:	2b00      	cmp	r3, #0
341918e0:	d006      	beq.n	341918f0 <HAL_RCCEx_PeriphCLKConfig+0x25f4>
341918e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341918e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341918ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341918ee:	d904      	bls.n	341918fa <HAL_RCCEx_PeriphCLKConfig+0x25fe>
341918f0:	f240 3123 	movw	r1, #803	@ 0x323
341918f4:	480d      	ldr	r0, [pc, #52]	@ (3419192c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
341918f6:	f7f0 fcb9 	bl	3418226c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
341918fa:	4b0d      	ldr	r3, [pc, #52]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
341918fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34191900:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191904:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419190c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34191910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34191918:	3b01      	subs	r3, #1
3419191a:	041b      	lsls	r3, r3, #16
3419191c:	4313      	orrs	r3, r2
3419191e:	4a04      	ldr	r2, [pc, #16]	@ (34191930 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
34191920:	430b      	orrs	r3, r1
34191922:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34191926:	f7fd fc47 	bl	3418f1b8 <LL_RCC_IC19_Enable>
3419192a:	e00b      	b.n	34191944 <HAL_RCCEx_PeriphCLKConfig+0x2648>
3419192c:	341a5394 	.word	0x341a5394
34191930:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34191934:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3419193c:	2b01      	cmp	r3, #1
3419193e:	d101      	bne.n	34191944 <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
34191940:	f7fd fcba 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34191944:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191948:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3419194c:	4618      	mov	r0, r3
3419194e:	f7fc fb63 	bl	3418e018 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34191952:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191956:	e9d3 2300 	ldrd	r2, r3, [r3]
3419195a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3419195e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34191962:	2300      	movs	r3, #0
34191964:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34191968:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3419196c:	4603      	mov	r3, r0
3419196e:	460a      	mov	r2, r1
34191970:	4313      	orrs	r3, r2
34191972:	f000 80d3 	beq.w	34191b1c <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34191976:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419197a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3419197e:	4bad      	ldr	r3, [pc, #692]	@ (34191c34 <HAL_RCCEx_PeriphCLKConfig+0x2938>)
34191980:	429a      	cmp	r2, r3
34191982:	d027      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
34191984:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191988:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3419198c:	4baa      	ldr	r3, [pc, #680]	@ (34191c38 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3419198e:	429a      	cmp	r2, r3
34191990:	d020      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
34191992:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191996:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3419199a:	4ba8      	ldr	r3, [pc, #672]	@ (34191c3c <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3419199c:	429a      	cmp	r2, r3
3419199e:	d019      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
341919a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341919a8:	4ba5      	ldr	r3, [pc, #660]	@ (34191c40 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
341919aa:	429a      	cmp	r2, r3
341919ac:	d012      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
341919ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341919b6:	4ba3      	ldr	r3, [pc, #652]	@ (34191c44 <HAL_RCCEx_PeriphCLKConfig+0x2948>)
341919b8:	429a      	cmp	r2, r3
341919ba:	d00b      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
341919bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341919c4:	4ba0      	ldr	r3, [pc, #640]	@ (34191c48 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
341919c6:	429a      	cmp	r2, r3
341919c8:	d004      	beq.n	341919d4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
341919ca:	f240 313d 	movw	r1, #829	@ 0x33d
341919ce:	489f      	ldr	r0, [pc, #636]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
341919d0:	f7f0 fc4c 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
341919d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919d8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341919dc:	4b97      	ldr	r3, [pc, #604]	@ (34191c3c <HAL_RCCEx_PeriphCLKConfig+0x2940>)
341919de:	429a      	cmp	r2, r3
341919e0:	d142      	bne.n	34191a68 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
341919e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341919e8:	2b00      	cmp	r3, #0
341919ea:	d016      	beq.n	34191a1a <HAL_RCCEx_PeriphCLKConfig+0x271e>
341919ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341919f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341919f6:	d010      	beq.n	34191a1a <HAL_RCCEx_PeriphCLKConfig+0x271e>
341919f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341919fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341919fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191a02:	d00a      	beq.n	34191a1a <HAL_RCCEx_PeriphCLKConfig+0x271e>
34191a04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191a0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191a0e:	d004      	beq.n	34191a1a <HAL_RCCEx_PeriphCLKConfig+0x271e>
34191a10:	f240 3142 	movw	r1, #834	@ 0x342
34191a14:	488d      	ldr	r0, [pc, #564]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191a16:	f7f0 fc29 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34191a1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191a20:	2b00      	cmp	r3, #0
34191a22:	d005      	beq.n	34191a30 <HAL_RCCEx_PeriphCLKConfig+0x2734>
34191a24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191a2e:	d904      	bls.n	34191a3a <HAL_RCCEx_PeriphCLKConfig+0x273e>
34191a30:	f240 3143 	movw	r1, #835	@ 0x343
34191a34:	4885      	ldr	r0, [pc, #532]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191a36:	f7f0 fc19 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34191a3a:	4b85      	ldr	r3, [pc, #532]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34191a40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191a44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191a48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34191a4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191a54:	3b01      	subs	r3, #1
34191a56:	041b      	lsls	r3, r3, #16
34191a58:	4313      	orrs	r3, r2
34191a5a:	4a7d      	ldr	r2, [pc, #500]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191a5c:	430b      	orrs	r3, r1
34191a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34191a62:	f7fd f9a9 	bl	3418edb8 <LL_RCC_IC10_Enable>
34191a66:	e052      	b.n	34191b0e <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34191a68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a6c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34191a70:	4b73      	ldr	r3, [pc, #460]	@ (34191c40 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
34191a72:	429a      	cmp	r2, r3
34191a74:	d142      	bne.n	34191afc <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34191a76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191a7c:	2b00      	cmp	r3, #0
34191a7e:	d016      	beq.n	34191aae <HAL_RCCEx_PeriphCLKConfig+0x27b2>
34191a80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191a8a:	d010      	beq.n	34191aae <HAL_RCCEx_PeriphCLKConfig+0x27b2>
34191a8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191a96:	d00a      	beq.n	34191aae <HAL_RCCEx_PeriphCLKConfig+0x27b2>
34191a98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191aa2:	d004      	beq.n	34191aae <HAL_RCCEx_PeriphCLKConfig+0x27b2>
34191aa4:	f240 314f 	movw	r1, #847	@ 0x34f
34191aa8:	4868      	ldr	r0, [pc, #416]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191aaa:	f7f0 fbdf 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34191aae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191ab4:	2b00      	cmp	r3, #0
34191ab6:	d005      	beq.n	34191ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c8>
34191ab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191ac2:	d904      	bls.n	34191ace <HAL_RCCEx_PeriphCLKConfig+0x27d2>
34191ac4:	f44f 7154 	mov.w	r1, #848	@ 0x350
34191ac8:	4860      	ldr	r0, [pc, #384]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191aca:	f7f0 fbcf 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34191ace:	4b60      	ldr	r3, [pc, #384]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191ad0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34191ad4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191ad8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191adc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ae0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34191ae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191ae8:	3b01      	subs	r3, #1
34191aea:	041b      	lsls	r3, r3, #16
34191aec:	4313      	orrs	r3, r2
34191aee:	4a58      	ldr	r2, [pc, #352]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191af0:	430b      	orrs	r3, r1
34191af2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34191af6:	f7fd fa5f 	bl	3418efb8 <LL_RCC_IC15_Enable>
34191afa:	e008      	b.n	34191b0e <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34191afc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b00:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34191b04:	4b4c      	ldr	r3, [pc, #304]	@ (34191c38 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
34191b06:	429a      	cmp	r2, r3
34191b08:	d101      	bne.n	34191b0e <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
34191b0a:	f7fd fbd5 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
34191b0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34191b16:	4618      	mov	r0, r3
34191b18:	f7fc faaa 	bl	3418e070 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34191b1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b20:	e9d3 2300 	ldrd	r2, r3, [r3]
34191b24:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34191b28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34191b2c:	2300      	movs	r3, #0
34191b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
34191b32:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34191b36:	4603      	mov	r3, r0
34191b38:	460a      	mov	r2, r1
34191b3a:	4313      	orrs	r3, r2
34191b3c:	f000 80f0 	beq.w	34191d20 <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34191b40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b44:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b48:	4b42      	ldr	r3, [pc, #264]	@ (34191c54 <HAL_RCCEx_PeriphCLKConfig+0x2958>)
34191b4a:	429a      	cmp	r2, r3
34191b4c:	d027      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b52:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b56:	4b40      	ldr	r3, [pc, #256]	@ (34191c58 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
34191b58:	429a      	cmp	r2, r3
34191b5a:	d020      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b60:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b64:	4b3d      	ldr	r3, [pc, #244]	@ (34191c5c <HAL_RCCEx_PeriphCLKConfig+0x2960>)
34191b66:	429a      	cmp	r2, r3
34191b68:	d019      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b6e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b72:	4b3b      	ldr	r3, [pc, #236]	@ (34191c60 <HAL_RCCEx_PeriphCLKConfig+0x2964>)
34191b74:	429a      	cmp	r2, r3
34191b76:	d012      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b7c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b80:	4b38      	ldr	r3, [pc, #224]	@ (34191c64 <HAL_RCCEx_PeriphCLKConfig+0x2968>)
34191b82:	429a      	cmp	r2, r3
34191b84:	d00b      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191b8a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191b8e:	4b36      	ldr	r3, [pc, #216]	@ (34191c68 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
34191b90:	429a      	cmp	r2, r3
34191b92:	d004      	beq.n	34191b9e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
34191b94:	f240 316a 	movw	r1, #874	@ 0x36a
34191b98:	482c      	ldr	r0, [pc, #176]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191b9a:	f7f0 fb67 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34191b9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ba2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191ba6:	4b2d      	ldr	r3, [pc, #180]	@ (34191c5c <HAL_RCCEx_PeriphCLKConfig+0x2960>)
34191ba8:	429a      	cmp	r2, r3
34191baa:	d15f      	bne.n	34191c6c <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34191bac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191bb2:	2b00      	cmp	r3, #0
34191bb4:	d016      	beq.n	34191be4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
34191bb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191bc0:	d010      	beq.n	34191be4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
34191bc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191bcc:	d00a      	beq.n	34191be4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
34191bce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191bd8:	d004      	beq.n	34191be4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
34191bda:	f240 316f 	movw	r1, #879	@ 0x36f
34191bde:	481b      	ldr	r0, [pc, #108]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191be0:	f7f0 fb44 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34191be4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191bea:	2b00      	cmp	r3, #0
34191bec:	d005      	beq.n	34191bfa <HAL_RCCEx_PeriphCLKConfig+0x28fe>
34191bee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191bf8:	d904      	bls.n	34191c04 <HAL_RCCEx_PeriphCLKConfig+0x2908>
34191bfa:	f44f 715c 	mov.w	r1, #880	@ 0x370
34191bfe:	4813      	ldr	r0, [pc, #76]	@ (34191c4c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
34191c00:	f7f0 fb34 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34191c04:	4b12      	ldr	r3, [pc, #72]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34191c0a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191c0e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191c12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34191c18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191c1e:	3b01      	subs	r3, #1
34191c20:	041b      	lsls	r3, r3, #16
34191c22:	4313      	orrs	r3, r2
34191c24:	4a0a      	ldr	r2, [pc, #40]	@ (34191c50 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
34191c26:	430b      	orrs	r3, r1
34191c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34191c2c:	f7fd f8c4 	bl	3418edb8 <LL_RCC_IC10_Enable>
34191c30:	e06f      	b.n	34191d12 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
34191c32:	bf00      	nop
34191c34:	0700000c 	.word	0x0700000c
34191c38:	0701000c 	.word	0x0701000c
34191c3c:	0702000c 	.word	0x0702000c
34191c40:	0703000c 	.word	0x0703000c
34191c44:	0704000c 	.word	0x0704000c
34191c48:	0705000c 	.word	0x0705000c
34191c4c:	341a5394 	.word	0x341a5394
34191c50:	56028000 	.word	0x56028000
34191c54:	0700040c 	.word	0x0700040c
34191c58:	0701040c 	.word	0x0701040c
34191c5c:	0702040c 	.word	0x0702040c
34191c60:	0703040c 	.word	0x0703040c
34191c64:	0704040c 	.word	0x0704040c
34191c68:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34191c6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c70:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191c74:	4b95      	ldr	r3, [pc, #596]	@ (34191ecc <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
34191c76:	429a      	cmp	r2, r3
34191c78:	d142      	bne.n	34191d00 <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34191c7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191c80:	2b00      	cmp	r3, #0
34191c82:	d016      	beq.n	34191cb2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
34191c84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191c8e:	d010      	beq.n	34191cb2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
34191c90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191c9a:	d00a      	beq.n	34191cb2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
34191c9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191ca2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191ca6:	d004      	beq.n	34191cb2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
34191ca8:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34191cac:	4888      	ldr	r0, [pc, #544]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191cae:	f7f0 fadd 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34191cb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191cb8:	2b00      	cmp	r3, #0
34191cba:	d005      	beq.n	34191cc8 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
34191cbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191cc6:	d904      	bls.n	34191cd2 <HAL_RCCEx_PeriphCLKConfig+0x29d6>
34191cc8:	f240 317d 	movw	r1, #893	@ 0x37d
34191ccc:	4880      	ldr	r0, [pc, #512]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191cce:	f7f0 facd 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34191cd2:	4b80      	ldr	r3, [pc, #512]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191cd4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34191cd8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191cdc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191ce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ce4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34191ce6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191cec:	3b01      	subs	r3, #1
34191cee:	041b      	lsls	r3, r3, #16
34191cf0:	4313      	orrs	r3, r2
34191cf2:	4a78      	ldr	r2, [pc, #480]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191cf4:	430b      	orrs	r3, r1
34191cf6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34191cfa:	f7fd f95d 	bl	3418efb8 <LL_RCC_IC15_Enable>
34191cfe:	e008      	b.n	34191d12 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34191d00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d04:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34191d08:	4b73      	ldr	r3, [pc, #460]	@ (34191ed8 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
34191d0a:	429a      	cmp	r2, r3
34191d0c:	d101      	bne.n	34191d12 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
34191d0e:	f7fd fad3 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34191d12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34191d1a:	4618      	mov	r0, r3
34191d1c:	f7fc f9a8 	bl	3418e070 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34191d20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d24:	e9d3 2300 	ldrd	r2, r3, [r3]
34191d28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34191d2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34191d30:	2300      	movs	r3, #0
34191d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34191d36:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34191d3a:	4603      	mov	r3, r0
34191d3c:	460a      	mov	r2, r1
34191d3e:	4313      	orrs	r3, r2
34191d40:	f000 80e8 	beq.w	34191f14 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34191d44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d4c:	4b63      	ldr	r3, [pc, #396]	@ (34191edc <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
34191d4e:	429a      	cmp	r2, r3
34191d50:	d027      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d5a:	4b61      	ldr	r3, [pc, #388]	@ (34191ee0 <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
34191d5c:	429a      	cmp	r2, r3
34191d5e:	d020      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d68:	4b5e      	ldr	r3, [pc, #376]	@ (34191ee4 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
34191d6a:	429a      	cmp	r2, r3
34191d6c:	d019      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d72:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d76:	4b5c      	ldr	r3, [pc, #368]	@ (34191ee8 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
34191d78:	429a      	cmp	r2, r3
34191d7a:	d012      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d84:	4b59      	ldr	r3, [pc, #356]	@ (34191eec <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
34191d86:	429a      	cmp	r2, r3
34191d88:	d00b      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191d8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191d92:	4b57      	ldr	r3, [pc, #348]	@ (34191ef0 <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
34191d94:	429a      	cmp	r2, r3
34191d96:	d004      	beq.n	34191da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
34191d98:	f240 3197 	movw	r1, #919	@ 0x397
34191d9c:	484c      	ldr	r0, [pc, #304]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191d9e:	f7f0 fa65 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34191da2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191da6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191daa:	4b4e      	ldr	r3, [pc, #312]	@ (34191ee4 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
34191dac:	429a      	cmp	r2, r3
34191dae:	d142      	bne.n	34191e36 <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34191db0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191db6:	2b00      	cmp	r3, #0
34191db8:	d016      	beq.n	34191de8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
34191dba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191dc4:	d010      	beq.n	34191de8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
34191dc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191dd0:	d00a      	beq.n	34191de8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
34191dd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191dd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191ddc:	d004      	beq.n	34191de8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
34191dde:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34191de2:	483b      	ldr	r0, [pc, #236]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191de4:	f7f0 fa42 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34191de8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191dee:	2b00      	cmp	r3, #0
34191df0:	d005      	beq.n	34191dfe <HAL_RCCEx_PeriphCLKConfig+0x2b02>
34191df2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191dfc:	d904      	bls.n	34191e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
34191dfe:	f240 319d 	movw	r1, #925	@ 0x39d
34191e02:	4833      	ldr	r0, [pc, #204]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191e04:	f7f0 fa32 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34191e08:	4b32      	ldr	r3, [pc, #200]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34191e0e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191e12:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191e16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34191e1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191e22:	3b01      	subs	r3, #1
34191e24:	041b      	lsls	r3, r3, #16
34191e26:	4313      	orrs	r3, r2
34191e28:	4a2a      	ldr	r2, [pc, #168]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191e2a:	430b      	orrs	r3, r1
34191e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34191e30:	f7fc ffc2 	bl	3418edb8 <LL_RCC_IC10_Enable>
34191e34:	e067      	b.n	34191f06 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34191e36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e3a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191e3e:	4b2a      	ldr	r3, [pc, #168]	@ (34191ee8 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
34191e40:	429a      	cmp	r2, r3
34191e42:	d157      	bne.n	34191ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34191e44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191e4a:	2b00      	cmp	r3, #0
34191e4c:	d016      	beq.n	34191e7c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
34191e4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191e58:	d010      	beq.n	34191e7c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
34191e5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191e64:	d00a      	beq.n	34191e7c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
34191e66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34191e6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191e70:	d004      	beq.n	34191e7c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
34191e72:	f240 31a9 	movw	r1, #937	@ 0x3a9
34191e76:	4816      	ldr	r0, [pc, #88]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191e78:	f7f0 f9f8 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34191e7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191e82:	2b00      	cmp	r3, #0
34191e84:	d005      	beq.n	34191e92 <HAL_RCCEx_PeriphCLKConfig+0x2b96>
34191e86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191e90:	d904      	bls.n	34191e9c <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
34191e92:	f240 31aa 	movw	r1, #938	@ 0x3aa
34191e96:	480e      	ldr	r0, [pc, #56]	@ (34191ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34191e98:	f7f0 f9e8 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34191e9c:	4b0d      	ldr	r3, [pc, #52]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191e9e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34191ea2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34191ea6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34191eaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191eae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34191eb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34191eb6:	3b01      	subs	r3, #1
34191eb8:	041b      	lsls	r3, r3, #16
34191eba:	4313      	orrs	r3, r2
34191ebc:	4a05      	ldr	r2, [pc, #20]	@ (34191ed4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
34191ebe:	430b      	orrs	r3, r1
34191ec0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34191ec4:	f7fd f878 	bl	3418efb8 <LL_RCC_IC15_Enable>
34191ec8:	e01d      	b.n	34191f06 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
34191eca:	bf00      	nop
34191ecc:	0703040c 	.word	0x0703040c
34191ed0:	341a5394 	.word	0x341a5394
34191ed4:	56028000 	.word	0x56028000
34191ed8:	0701040c 	.word	0x0701040c
34191edc:	0700080c 	.word	0x0700080c
34191ee0:	0701080c 	.word	0x0701080c
34191ee4:	0702080c 	.word	0x0702080c
34191ee8:	0703080c 	.word	0x0703080c
34191eec:	0704080c 	.word	0x0704080c
34191ef0:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34191ef4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191ef8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34191efc:	4b70      	ldr	r3, [pc, #448]	@ (341920c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
34191efe:	429a      	cmp	r2, r3
34191f00:	d101      	bne.n	34191f06 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
34191f02:	f7fd f9d9 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34191f06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34191f0e:	4618      	mov	r0, r3
34191f10:	f7fc f8ae 	bl	3418e070 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34191f14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f18:	e9d3 2300 	ldrd	r2, r3, [r3]
34191f1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34191f20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34191f24:	2300      	movs	r3, #0
34191f26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34191f2a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
34191f2e:	4603      	mov	r3, r0
34191f30:	460a      	mov	r2, r1
34191f32:	4313      	orrs	r3, r2
34191f34:	f000 80e6 	beq.w	34192104 <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34191f38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f3c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f40:	4b60      	ldr	r3, [pc, #384]	@ (341920c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
34191f42:	429a      	cmp	r2, r3
34191f44:	d027      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f4a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f4e:	4b5e      	ldr	r3, [pc, #376]	@ (341920c8 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
34191f50:	429a      	cmp	r2, r3
34191f52:	d020      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f58:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f5c:	4b5b      	ldr	r3, [pc, #364]	@ (341920cc <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
34191f5e:	429a      	cmp	r2, r3
34191f60:	d019      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f66:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f6a:	4b59      	ldr	r3, [pc, #356]	@ (341920d0 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
34191f6c:	429a      	cmp	r2, r3
34191f6e:	d012      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f74:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f78:	4b56      	ldr	r3, [pc, #344]	@ (341920d4 <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
34191f7a:	429a      	cmp	r2, r3
34191f7c:	d00b      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f82:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f86:	4b54      	ldr	r3, [pc, #336]	@ (341920d8 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
34191f88:	429a      	cmp	r2, r3
34191f8a:	d004      	beq.n	34191f96 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
34191f8c:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34191f90:	4852      	ldr	r0, [pc, #328]	@ (341920dc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
34191f92:	f7f0 f96b 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34191f96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191f9a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34191f9e:	4b4b      	ldr	r3, [pc, #300]	@ (341920cc <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
34191fa0:	429a      	cmp	r2, r3
34191fa2:	d142      	bne.n	3419202a <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34191fa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191faa:	2b00      	cmp	r3, #0
34191fac:	d016      	beq.n	34191fdc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
34191fae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34191fb8:	d010      	beq.n	34191fdc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
34191fba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34191fc4:	d00a      	beq.n	34191fdc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
34191fc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34191fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34191fd0:	d004      	beq.n	34191fdc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
34191fd2:	f240 31c9 	movw	r1, #969	@ 0x3c9
34191fd6:	4841      	ldr	r0, [pc, #260]	@ (341920dc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
34191fd8:	f7f0 f948 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34191fdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191fe2:	2b00      	cmp	r3, #0
34191fe4:	d005      	beq.n	34191ff2 <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
34191fe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34191fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34191fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191ff0:	d904      	bls.n	34191ffc <HAL_RCCEx_PeriphCLKConfig+0x2d00>
34191ff2:	f240 31ca 	movw	r1, #970	@ 0x3ca
34191ff6:	4839      	ldr	r0, [pc, #228]	@ (341920dc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
34191ff8:	f7f0 f938 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34191ffc:	4b38      	ldr	r3, [pc, #224]	@ (341920e0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
34191ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34192002:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192006:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419200a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419200e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34192010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34192016:	3b01      	subs	r3, #1
34192018:	041b      	lsls	r3, r3, #16
3419201a:	4313      	orrs	r3, r2
3419201c:	4a30      	ldr	r2, [pc, #192]	@ (341920e0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3419201e:	430b      	orrs	r3, r1
34192020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34192024:	f7fc fec8 	bl	3418edb8 <LL_RCC_IC10_Enable>
34192028:	e065      	b.n	341920f6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3419202a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419202e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34192032:	4b27      	ldr	r3, [pc, #156]	@ (341920d0 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
34192034:	429a      	cmp	r2, r3
34192036:	d155      	bne.n	341920e4 <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419203c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419203e:	2b00      	cmp	r3, #0
34192040:	d016      	beq.n	34192070 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
34192042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419204c:	d010      	beq.n	34192070 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3419204e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192052:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192058:	d00a      	beq.n	34192070 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3419205a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419205e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192064:	d004      	beq.n	34192070 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
34192066:	f240 31d6 	movw	r1, #982	@ 0x3d6
3419206a:	481c      	ldr	r0, [pc, #112]	@ (341920dc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3419206c:	f7f0 f8fe 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34192070:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192076:	2b00      	cmp	r3, #0
34192078:	d005      	beq.n	34192086 <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3419207a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419207e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192084:	d904      	bls.n	34192090 <HAL_RCCEx_PeriphCLKConfig+0x2d94>
34192086:	f240 31d7 	movw	r1, #983	@ 0x3d7
3419208a:	4814      	ldr	r0, [pc, #80]	@ (341920dc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3419208c:	f7f0 f8ee 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192090:	4b13      	ldr	r3, [pc, #76]	@ (341920e0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
34192092:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34192096:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419209a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419209e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341920a2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341920a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341920a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341920aa:	3b01      	subs	r3, #1
341920ac:	041b      	lsls	r3, r3, #16
341920ae:	4313      	orrs	r3, r2
341920b0:	4a0b      	ldr	r2, [pc, #44]	@ (341920e0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
341920b2:	430b      	orrs	r3, r1
341920b4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341920b8:	f7fc ff7e 	bl	3418efb8 <LL_RCC_IC15_Enable>
341920bc:	e01b      	b.n	341920f6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
341920be:	bf00      	nop
341920c0:	0701080c 	.word	0x0701080c
341920c4:	07000c0c 	.word	0x07000c0c
341920c8:	07010c0c 	.word	0x07010c0c
341920cc:	07020c0c 	.word	0x07020c0c
341920d0:	07030c0c 	.word	0x07030c0c
341920d4:	07040c0c 	.word	0x07040c0c
341920d8:	07050c0c 	.word	0x07050c0c
341920dc:	341a5394 	.word	0x341a5394
341920e0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
341920e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341920e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
341920ec:	4b70      	ldr	r3, [pc, #448]	@ (341922b0 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
341920ee:	429a      	cmp	r2, r3
341920f0:	d101      	bne.n	341920f6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
341920f2:	f7fd f8e1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
341920f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341920fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341920fe:	4618      	mov	r0, r3
34192100:	f7fb ffb6 	bl	3418e070 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34192104:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192108:	e9d3 2300 	ldrd	r2, r3, [r3]
3419210c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34192110:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
34192114:	2300      	movs	r3, #0
34192116:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3419211a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3419211e:	4603      	mov	r3, r0
34192120:	460a      	mov	r2, r1
34192122:	4313      	orrs	r3, r2
34192124:	f000 80e6 	beq.w	341922f4 <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34192128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419212c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34192130:	4b60      	ldr	r3, [pc, #384]	@ (341922b4 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34192132:	429a      	cmp	r2, r3
34192134:	d027      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
34192136:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419213a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3419213e:	4b5e      	ldr	r3, [pc, #376]	@ (341922b8 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34192140:	429a      	cmp	r2, r3
34192142:	d020      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
34192144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192148:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3419214c:	4b5b      	ldr	r3, [pc, #364]	@ (341922bc <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3419214e:	429a      	cmp	r2, r3
34192150:	d019      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
34192152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192156:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3419215a:	4b59      	ldr	r3, [pc, #356]	@ (341922c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3419215c:	429a      	cmp	r2, r3
3419215e:	d012      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
34192160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192164:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34192168:	4b56      	ldr	r3, [pc, #344]	@ (341922c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3419216a:	429a      	cmp	r2, r3
3419216c:	d00b      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3419216e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192172:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34192176:	4b54      	ldr	r3, [pc, #336]	@ (341922c8 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
34192178:	429a      	cmp	r2, r3
3419217a:	d004      	beq.n	34192186 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3419217c:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34192180:	4852      	ldr	r0, [pc, #328]	@ (341922cc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
34192182:	f7f0 f873 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34192186:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419218a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3419218e:	4b4b      	ldr	r3, [pc, #300]	@ (341922bc <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
34192190:	429a      	cmp	r2, r3
34192192:	d142      	bne.n	3419221a <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34192194:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3419219a:	2b00      	cmp	r3, #0
3419219c:	d016      	beq.n	341921cc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3419219e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341921a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341921a8:	d010      	beq.n	341921cc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
341921aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341921b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341921b4:	d00a      	beq.n	341921cc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
341921b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341921bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341921c0:	d004      	beq.n	341921cc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
341921c2:	f240 31f6 	movw	r1, #1014	@ 0x3f6
341921c6:	4841      	ldr	r0, [pc, #260]	@ (341922cc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
341921c8:	f7f0 f850 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
341921cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341921d2:	2b00      	cmp	r3, #0
341921d4:	d005      	beq.n	341921e2 <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
341921d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341921dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341921e0:	d904      	bls.n	341921ec <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
341921e2:	f240 31f7 	movw	r1, #1015	@ 0x3f7
341921e6:	4839      	ldr	r0, [pc, #228]	@ (341922cc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
341921e8:	f7f0 f840 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341921ec:	4b38      	ldr	r3, [pc, #224]	@ (341922d0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
341921ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341921f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341921f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341921fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341921fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34192200:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34192206:	3b01      	subs	r3, #1
34192208:	041b      	lsls	r3, r3, #16
3419220a:	4313      	orrs	r3, r2
3419220c:	4a30      	ldr	r2, [pc, #192]	@ (341922d0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3419220e:	430b      	orrs	r3, r1
34192210:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34192214:	f7fc fdd0 	bl	3418edb8 <LL_RCC_IC10_Enable>
34192218:	e065      	b.n	341922e6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3419221a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419221e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34192222:	4b27      	ldr	r3, [pc, #156]	@ (341922c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34192224:	429a      	cmp	r2, r3
34192226:	d155      	bne.n	341922d4 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419222c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419222e:	2b00      	cmp	r3, #0
34192230:	d016      	beq.n	34192260 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
34192232:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419223c:	d010      	beq.n	34192260 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3419223e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192242:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192248:	d00a      	beq.n	34192260 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3419224a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419224e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192250:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192254:	d004      	beq.n	34192260 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
34192256:	f240 4103 	movw	r1, #1027	@ 0x403
3419225a:	481c      	ldr	r0, [pc, #112]	@ (341922cc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3419225c:	f7f0 f806 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34192260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192266:	2b00      	cmp	r3, #0
34192268:	d005      	beq.n	34192276 <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3419226a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419226e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192274:	d904      	bls.n	34192280 <HAL_RCCEx_PeriphCLKConfig+0x2f84>
34192276:	f240 4104 	movw	r1, #1028	@ 0x404
3419227a:	4814      	ldr	r0, [pc, #80]	@ (341922cc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3419227c:	f7ef fff6 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192280:	4b13      	ldr	r3, [pc, #76]	@ (341922d0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34192282:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34192286:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419228a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419228e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192292:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34192294:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419229a:	3b01      	subs	r3, #1
3419229c:	041b      	lsls	r3, r3, #16
3419229e:	4313      	orrs	r3, r2
341922a0:	4a0b      	ldr	r2, [pc, #44]	@ (341922d0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
341922a2:	430b      	orrs	r3, r1
341922a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341922a8:	f7fc fe86 	bl	3418efb8 <LL_RCC_IC15_Enable>
341922ac:	e01b      	b.n	341922e6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
341922ae:	bf00      	nop
341922b0:	07010c0c 	.word	0x07010c0c
341922b4:	0700100c 	.word	0x0700100c
341922b8:	0701100c 	.word	0x0701100c
341922bc:	0702100c 	.word	0x0702100c
341922c0:	0703100c 	.word	0x0703100c
341922c4:	0704100c 	.word	0x0704100c
341922c8:	0705100c 	.word	0x0705100c
341922cc:	341a5394 	.word	0x341a5394
341922d0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
341922d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341922d8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341922dc:	4b70      	ldr	r3, [pc, #448]	@ (341924a0 <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
341922de:	429a      	cmp	r2, r3
341922e0:	d101      	bne.n	341922e6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
341922e2:	f7fc ffe9 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
341922e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341922ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341922ee:	4618      	mov	r0, r3
341922f0:	f7fb fec9 	bl	3418e086 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
341922f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341922f8:	e9d3 2300 	ldrd	r2, r3, [r3]
341922fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34192300:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34192304:	2300      	movs	r3, #0
34192306:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3419230a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3419230e:	4603      	mov	r3, r0
34192310:	460a      	mov	r2, r1
34192312:	4313      	orrs	r3, r2
34192314:	f000 80e6 	beq.w	341924e4 <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34192318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419231c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34192320:	4b60      	ldr	r3, [pc, #384]	@ (341924a4 <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
34192322:	429a      	cmp	r2, r3
34192324:	d027      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
34192326:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419232a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3419232e:	4b5e      	ldr	r3, [pc, #376]	@ (341924a8 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
34192330:	429a      	cmp	r2, r3
34192332:	d020      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
34192334:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192338:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3419233c:	4b5b      	ldr	r3, [pc, #364]	@ (341924ac <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3419233e:	429a      	cmp	r2, r3
34192340:	d019      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
34192342:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192346:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3419234a:	4b59      	ldr	r3, [pc, #356]	@ (341924b0 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3419234c:	429a      	cmp	r2, r3
3419234e:	d012      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
34192350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192354:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34192358:	4b56      	ldr	r3, [pc, #344]	@ (341924b4 <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3419235a:	429a      	cmp	r2, r3
3419235c:	d00b      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3419235e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192362:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34192366:	4b54      	ldr	r3, [pc, #336]	@ (341924b8 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
34192368:	429a      	cmp	r2, r3
3419236a:	d004      	beq.n	34192376 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3419236c:	f240 411e 	movw	r1, #1054	@ 0x41e
34192370:	4852      	ldr	r0, [pc, #328]	@ (341924bc <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
34192372:	f7ef ff7b 	bl	3418226c <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34192376:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419237a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3419237e:	4b4b      	ldr	r3, [pc, #300]	@ (341924ac <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
34192380:	429a      	cmp	r2, r3
34192382:	d142      	bne.n	3419240a <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34192384:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3419238a:	2b00      	cmp	r3, #0
3419238c:	d016      	beq.n	341923bc <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3419238e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34192394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192398:	d010      	beq.n	341923bc <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3419239a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341923a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341923a4:	d00a      	beq.n	341923bc <HAL_RCCEx_PeriphCLKConfig+0x30c0>
341923a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341923aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341923ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341923b0:	d004      	beq.n	341923bc <HAL_RCCEx_PeriphCLKConfig+0x30c0>
341923b2:	f240 4123 	movw	r1, #1059	@ 0x423
341923b6:	4841      	ldr	r0, [pc, #260]	@ (341924bc <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
341923b8:	f7ef ff58 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
341923bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341923c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341923c2:	2b00      	cmp	r3, #0
341923c4:	d005      	beq.n	341923d2 <HAL_RCCEx_PeriphCLKConfig+0x30d6>
341923c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341923ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341923cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341923d0:	d904      	bls.n	341923dc <HAL_RCCEx_PeriphCLKConfig+0x30e0>
341923d2:	f240 4124 	movw	r1, #1060	@ 0x424
341923d6:	4839      	ldr	r0, [pc, #228]	@ (341924bc <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
341923d8:	f7ef ff48 	bl	3418226c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341923dc:	4b38      	ldr	r3, [pc, #224]	@ (341924c0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
341923de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341923e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341923e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341923ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341923ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341923f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341923f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341923f6:	3b01      	subs	r3, #1
341923f8:	041b      	lsls	r3, r3, #16
341923fa:	4313      	orrs	r3, r2
341923fc:	4a30      	ldr	r2, [pc, #192]	@ (341924c0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
341923fe:	430b      	orrs	r3, r1
34192400:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34192404:	f7fc fcd8 	bl	3418edb8 <LL_RCC_IC10_Enable>
34192408:	e065      	b.n	341924d6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3419240a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419240e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34192412:	4b27      	ldr	r3, [pc, #156]	@ (341924b0 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
34192414:	429a      	cmp	r2, r3
34192416:	d155      	bne.n	341924c4 <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419241c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419241e:	2b00      	cmp	r3, #0
34192420:	d016      	beq.n	34192450 <HAL_RCCEx_PeriphCLKConfig+0x3154>
34192422:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419242c:	d010      	beq.n	34192450 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3419242e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192432:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192438:	d00a      	beq.n	34192450 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3419243a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419243e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192444:	d004      	beq.n	34192450 <HAL_RCCEx_PeriphCLKConfig+0x3154>
34192446:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3419244a:	481c      	ldr	r0, [pc, #112]	@ (341924bc <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3419244c:	f7ef ff0e 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34192450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192456:	2b00      	cmp	r3, #0
34192458:	d005      	beq.n	34192466 <HAL_RCCEx_PeriphCLKConfig+0x316a>
3419245a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419245e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192464:	d904      	bls.n	34192470 <HAL_RCCEx_PeriphCLKConfig+0x3174>
34192466:	f240 4131 	movw	r1, #1073	@ 0x431
3419246a:	4814      	ldr	r0, [pc, #80]	@ (341924bc <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3419246c:	f7ef fefe 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192470:	4b13      	ldr	r3, [pc, #76]	@ (341924c0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
34192472:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34192476:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419247a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419247e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192482:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34192484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419248a:	3b01      	subs	r3, #1
3419248c:	041b      	lsls	r3, r3, #16
3419248e:	4313      	orrs	r3, r2
34192490:	4a0b      	ldr	r2, [pc, #44]	@ (341924c0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
34192492:	430b      	orrs	r3, r1
34192494:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34192498:	f7fc fd8e 	bl	3418efb8 <LL_RCC_IC15_Enable>
3419249c:	e01b      	b.n	341924d6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
3419249e:	bf00      	nop
341924a0:	0701100c 	.word	0x0701100c
341924a4:	0700140c 	.word	0x0700140c
341924a8:	0701140c 	.word	0x0701140c
341924ac:	0702140c 	.word	0x0702140c
341924b0:	0703140c 	.word	0x0703140c
341924b4:	0704140c 	.word	0x0704140c
341924b8:	0705140c 	.word	0x0705140c
341924bc:	341a5394 	.word	0x341a5394
341924c0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
341924c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341924c8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
341924cc:	4b98      	ldr	r3, [pc, #608]	@ (34192730 <HAL_RCCEx_PeriphCLKConfig+0x3434>)
341924ce:	429a      	cmp	r2, r3
341924d0:	d101      	bne.n	341924d6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
341924d2:	f7fc fef1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
341924d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341924da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341924de:	4618      	mov	r0, r3
341924e0:	f7fb fdd1 	bl	3418e086 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
341924e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341924e8:	e9d3 2300 	ldrd	r2, r3, [r3]
341924ec:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
341924f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
341924f4:	2300      	movs	r3, #0
341924f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
341924fa:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
341924fe:	4603      	mov	r3, r0
34192500:	460a      	mov	r2, r1
34192502:	4313      	orrs	r3, r2
34192504:	f000 8089 	beq.w	3419261a <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34192508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419250c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34192510:	4b88      	ldr	r3, [pc, #544]	@ (34192734 <HAL_RCCEx_PeriphCLKConfig+0x3438>)
34192512:	429a      	cmp	r2, r3
34192514:	d027      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
34192516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419251a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3419251e:	4b86      	ldr	r3, [pc, #536]	@ (34192738 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
34192520:	429a      	cmp	r2, r3
34192522:	d020      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
34192524:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192528:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3419252c:	4b83      	ldr	r3, [pc, #524]	@ (3419273c <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3419252e:	429a      	cmp	r2, r3
34192530:	d019      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
34192532:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192536:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3419253a:	4b81      	ldr	r3, [pc, #516]	@ (34192740 <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3419253c:	429a      	cmp	r2, r3
3419253e:	d012      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
34192540:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192544:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34192548:	4b7e      	ldr	r3, [pc, #504]	@ (34192744 <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3419254a:	429a      	cmp	r2, r3
3419254c:	d00b      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3419254e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192552:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34192556:	4b7c      	ldr	r3, [pc, #496]	@ (34192748 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
34192558:	429a      	cmp	r2, r3
3419255a:	d004      	beq.n	34192566 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3419255c:	f240 414b 	movw	r1, #1099	@ 0x44b
34192560:	487a      	ldr	r0, [pc, #488]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
34192562:	f7ef fe83 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34192566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419256a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3419256e:	4b73      	ldr	r3, [pc, #460]	@ (3419273c <HAL_RCCEx_PeriphCLKConfig+0x3440>)
34192570:	429a      	cmp	r2, r3
34192572:	d142      	bne.n	341925fa <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192574:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419257a:	2b00      	cmp	r3, #0
3419257c:	d016      	beq.n	341925ac <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3419257e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192588:	d010      	beq.n	341925ac <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3419258a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419258e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192594:	d00a      	beq.n	341925ac <HAL_RCCEx_PeriphCLKConfig+0x32b0>
34192596:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419259a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419259c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341925a0:	d004      	beq.n	341925ac <HAL_RCCEx_PeriphCLKConfig+0x32b0>
341925a2:	f44f 618a 	mov.w	r1, #1104	@ 0x450
341925a6:	4869      	ldr	r0, [pc, #420]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
341925a8:	f7ef fe60 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
341925ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341925b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341925b2:	2b00      	cmp	r3, #0
341925b4:	d005      	beq.n	341925c2 <HAL_RCCEx_PeriphCLKConfig+0x32c6>
341925b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341925ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341925bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341925c0:	d904      	bls.n	341925cc <HAL_RCCEx_PeriphCLKConfig+0x32d0>
341925c2:	f240 4151 	movw	r1, #1105	@ 0x451
341925c6:	4861      	ldr	r0, [pc, #388]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
341925c8:	f7ef fe50 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341925cc:	4b60      	ldr	r3, [pc, #384]	@ (34192750 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
341925ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341925d2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341925d6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341925da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341925de:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341925e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341925e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341925e6:	3b01      	subs	r3, #1
341925e8:	041b      	lsls	r3, r3, #16
341925ea:	4313      	orrs	r3, r2
341925ec:	4a58      	ldr	r2, [pc, #352]	@ (34192750 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
341925ee:	430b      	orrs	r3, r1
341925f0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341925f4:	f7fc fce0 	bl	3418efb8 <LL_RCC_IC15_Enable>
341925f8:	e008      	b.n	3419260c <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
341925fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341925fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34192602:	4b4d      	ldr	r3, [pc, #308]	@ (34192738 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
34192604:	429a      	cmp	r2, r3
34192606:	d101      	bne.n	3419260c <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
34192608:	f7fc fe56 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3419260c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192610:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34192614:	4618      	mov	r0, r3
34192616:	f7fb fd41 	bl	3418e09c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3419261a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419261e:	e9d3 2300 	ldrd	r2, r3, [r3]
34192622:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34192626:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3419262a:	2300      	movs	r3, #0
3419262c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34192630:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
34192634:	4603      	mov	r3, r0
34192636:	460a      	mov	r2, r1
34192638:	4313      	orrs	r3, r2
3419263a:	f000 80a7 	beq.w	3419278c <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3419263e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192642:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34192646:	4b43      	ldr	r3, [pc, #268]	@ (34192754 <HAL_RCCEx_PeriphCLKConfig+0x3458>)
34192648:	429a      	cmp	r2, r3
3419264a:	d027      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3419264c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192650:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34192654:	4b40      	ldr	r3, [pc, #256]	@ (34192758 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
34192656:	429a      	cmp	r2, r3
34192658:	d020      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3419265a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419265e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34192662:	4b3e      	ldr	r3, [pc, #248]	@ (3419275c <HAL_RCCEx_PeriphCLKConfig+0x3460>)
34192664:	429a      	cmp	r2, r3
34192666:	d019      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
34192668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419266c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34192670:	4b3b      	ldr	r3, [pc, #236]	@ (34192760 <HAL_RCCEx_PeriphCLKConfig+0x3464>)
34192672:	429a      	cmp	r2, r3
34192674:	d012      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
34192676:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419267a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3419267e:	4b39      	ldr	r3, [pc, #228]	@ (34192764 <HAL_RCCEx_PeriphCLKConfig+0x3468>)
34192680:	429a      	cmp	r2, r3
34192682:	d00b      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
34192684:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192688:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3419268c:	4b36      	ldr	r3, [pc, #216]	@ (34192768 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3419268e:	429a      	cmp	r2, r3
34192690:	d004      	beq.n	3419269c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
34192692:	f240 416b 	movw	r1, #1131	@ 0x46b
34192696:	482d      	ldr	r0, [pc, #180]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
34192698:	f7ef fde8 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3419269c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
341926a4:	4b2d      	ldr	r3, [pc, #180]	@ (3419275c <HAL_RCCEx_PeriphCLKConfig+0x3460>)
341926a6:	429a      	cmp	r2, r3
341926a8:	d160      	bne.n	3419276c <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
341926aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341926b0:	2b00      	cmp	r3, #0
341926b2:	d016      	beq.n	341926e2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
341926b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341926ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341926be:	d010      	beq.n	341926e2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
341926c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341926c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341926ca:	d00a      	beq.n	341926e2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
341926cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341926d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341926d6:	d004      	beq.n	341926e2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
341926d8:	f44f 618e 	mov.w	r1, #1136	@ 0x470
341926dc:	481b      	ldr	r0, [pc, #108]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
341926de:	f7ef fdc5 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
341926e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341926e8:	2b00      	cmp	r3, #0
341926ea:	d005      	beq.n	341926f8 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
341926ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341926f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341926f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341926f6:	d904      	bls.n	34192702 <HAL_RCCEx_PeriphCLKConfig+0x3406>
341926f8:	f240 4171 	movw	r1, #1137	@ 0x471
341926fc:	4813      	ldr	r0, [pc, #76]	@ (3419274c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
341926fe:	f7ef fdb5 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192702:	4b13      	ldr	r3, [pc, #76]	@ (34192750 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
34192704:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34192708:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419270c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192714:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34192716:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419271a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419271c:	3b01      	subs	r3, #1
3419271e:	041b      	lsls	r3, r3, #16
34192720:	4313      	orrs	r3, r2
34192722:	4a0b      	ldr	r2, [pc, #44]	@ (34192750 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
34192724:	430b      	orrs	r3, r1
34192726:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3419272a:	f7fc fc45 	bl	3418efb8 <LL_RCC_IC15_Enable>
3419272e:	e026      	b.n	3419277e <HAL_RCCEx_PeriphCLKConfig+0x3482>
34192730:	0701140c 	.word	0x0701140c
34192734:	0700082c 	.word	0x0700082c
34192738:	0701082c 	.word	0x0701082c
3419273c:	0702082c 	.word	0x0702082c
34192740:	0703082c 	.word	0x0703082c
34192744:	0704082c 	.word	0x0704082c
34192748:	0705082c 	.word	0x0705082c
3419274c:	341a5394 	.word	0x341a5394
34192750:	56028000 	.word	0x56028000
34192754:	07000c2c 	.word	0x07000c2c
34192758:	07010c2c 	.word	0x07010c2c
3419275c:	07020c2c 	.word	0x07020c2c
34192760:	07030c2c 	.word	0x07030c2c
34192764:	07040c2c 	.word	0x07040c2c
34192768:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3419276c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192770:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34192774:	4b98      	ldr	r3, [pc, #608]	@ (341929d8 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
34192776:	429a      	cmp	r2, r3
34192778:	d101      	bne.n	3419277e <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3419277a:	f7fc fd9d 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3419277e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192782:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34192786:	4618      	mov	r0, r3
34192788:	f7fb fc88 	bl	3418e09c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3419278c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192790:	e9d3 2300 	ldrd	r2, r3, [r3]
34192794:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34192798:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3419279c:	2300      	movs	r3, #0
3419279e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
341927a2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
341927a6:	4603      	mov	r3, r0
341927a8:	460a      	mov	r2, r1
341927aa:	4313      	orrs	r3, r2
341927ac:	f000 8089 	beq.w	341928c2 <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
341927b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927b8:	4b88      	ldr	r3, [pc, #544]	@ (341929dc <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
341927ba:	429a      	cmp	r2, r3
341927bc:	d027      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
341927be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927c6:	4b86      	ldr	r3, [pc, #536]	@ (341929e0 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
341927c8:	429a      	cmp	r2, r3
341927ca:	d020      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
341927cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927d4:	4b83      	ldr	r3, [pc, #524]	@ (341929e4 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
341927d6:	429a      	cmp	r2, r3
341927d8:	d019      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
341927da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927e2:	4b81      	ldr	r3, [pc, #516]	@ (341929e8 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
341927e4:	429a      	cmp	r2, r3
341927e6:	d012      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
341927e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927ec:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927f0:	4b7e      	ldr	r3, [pc, #504]	@ (341929ec <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
341927f2:	429a      	cmp	r2, r3
341927f4:	d00b      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
341927f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341927fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341927fe:	4b7c      	ldr	r3, [pc, #496]	@ (341929f0 <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
34192800:	429a      	cmp	r2, r3
34192802:	d004      	beq.n	3419280e <HAL_RCCEx_PeriphCLKConfig+0x3512>
34192804:	f240 418b 	movw	r1, #1163	@ 0x48b
34192808:	487a      	ldr	r0, [pc, #488]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3419280a:	f7ef fd2f 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3419280e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192812:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34192816:	4b73      	ldr	r3, [pc, #460]	@ (341929e4 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
34192818:	429a      	cmp	r2, r3
3419281a:	d142      	bne.n	341928a2 <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3419281c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192822:	2b00      	cmp	r3, #0
34192824:	d016      	beq.n	34192854 <HAL_RCCEx_PeriphCLKConfig+0x3558>
34192826:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419282a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419282c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192830:	d010      	beq.n	34192854 <HAL_RCCEx_PeriphCLKConfig+0x3558>
34192832:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419283c:	d00a      	beq.n	34192854 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3419283e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192848:	d004      	beq.n	34192854 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3419284a:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3419284e:	4869      	ldr	r0, [pc, #420]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
34192850:	f7ef fd0c 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34192854:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419285a:	2b00      	cmp	r3, #0
3419285c:	d005      	beq.n	3419286a <HAL_RCCEx_PeriphCLKConfig+0x356e>
3419285e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192868:	d904      	bls.n	34192874 <HAL_RCCEx_PeriphCLKConfig+0x3578>
3419286a:	f240 4191 	movw	r1, #1169	@ 0x491
3419286e:	4861      	ldr	r0, [pc, #388]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
34192870:	f7ef fcfc 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192874:	4b60      	ldr	r3, [pc, #384]	@ (341929f8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
34192876:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3419287a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419287e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192882:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192886:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34192888:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419288c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419288e:	3b01      	subs	r3, #1
34192890:	041b      	lsls	r3, r3, #16
34192892:	4313      	orrs	r3, r2
34192894:	4a58      	ldr	r2, [pc, #352]	@ (341929f8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
34192896:	430b      	orrs	r3, r1
34192898:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3419289c:	f7fc fb8c 	bl	3418efb8 <LL_RCC_IC15_Enable>
341928a0:	e008      	b.n	341928b4 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
341928a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341928a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341928aa:	4b4d      	ldr	r3, [pc, #308]	@ (341929e0 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
341928ac:	429a      	cmp	r2, r3
341928ae:	d101      	bne.n	341928b4 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
341928b0:	f7fc fd02 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
341928b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341928b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341928bc:	4618      	mov	r0, r3
341928be:	f7fb fbed 	bl	3418e09c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
341928c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341928c6:	e9d3 2300 	ldrd	r2, r3, [r3]
341928ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
341928ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
341928d2:	2300      	movs	r3, #0
341928d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
341928d8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
341928dc:	4603      	mov	r3, r0
341928de:	460a      	mov	r2, r1
341928e0:	4313      	orrs	r3, r2
341928e2:	f000 80a7 	beq.w	34192a34 <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
341928e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341928ea:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
341928ee:	4b43      	ldr	r3, [pc, #268]	@ (341929fc <HAL_RCCEx_PeriphCLKConfig+0x3700>)
341928f0:	429a      	cmp	r2, r3
341928f2:	d027      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
341928f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341928f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
341928fc:	4b40      	ldr	r3, [pc, #256]	@ (34192a00 <HAL_RCCEx_PeriphCLKConfig+0x3704>)
341928fe:	429a      	cmp	r2, r3
34192900:	d020      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
34192902:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192906:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3419290a:	4b3e      	ldr	r3, [pc, #248]	@ (34192a04 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3419290c:	429a      	cmp	r2, r3
3419290e:	d019      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
34192910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192914:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34192918:	4b3b      	ldr	r3, [pc, #236]	@ (34192a08 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3419291a:	429a      	cmp	r2, r3
3419291c:	d012      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3419291e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192922:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34192926:	4b39      	ldr	r3, [pc, #228]	@ (34192a0c <HAL_RCCEx_PeriphCLKConfig+0x3710>)
34192928:	429a      	cmp	r2, r3
3419292a:	d00b      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3419292c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192930:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34192934:	4b36      	ldr	r3, [pc, #216]	@ (34192a10 <HAL_RCCEx_PeriphCLKConfig+0x3714>)
34192936:	429a      	cmp	r2, r3
34192938:	d004      	beq.n	34192944 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3419293a:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3419293e:	482d      	ldr	r0, [pc, #180]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
34192940:	f7ef fc94 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34192944:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192948:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3419294c:	4b2d      	ldr	r3, [pc, #180]	@ (34192a04 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3419294e:	429a      	cmp	r2, r3
34192950:	d160      	bne.n	34192a14 <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192952:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192958:	2b00      	cmp	r3, #0
3419295a:	d016      	beq.n	3419298a <HAL_RCCEx_PeriphCLKConfig+0x368e>
3419295c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192966:	d010      	beq.n	3419298a <HAL_RCCEx_PeriphCLKConfig+0x368e>
34192968:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419296c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419296e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192972:	d00a      	beq.n	3419298a <HAL_RCCEx_PeriphCLKConfig+0x368e>
34192974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419297a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419297e:	d004      	beq.n	3419298a <HAL_RCCEx_PeriphCLKConfig+0x368e>
34192980:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34192984:	481b      	ldr	r0, [pc, #108]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
34192986:	f7ef fc71 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3419298a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419298e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192990:	2b00      	cmp	r3, #0
34192992:	d005      	beq.n	341929a0 <HAL_RCCEx_PeriphCLKConfig+0x36a4>
34192994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419299a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419299e:	d904      	bls.n	341929aa <HAL_RCCEx_PeriphCLKConfig+0x36ae>
341929a0:	f240 41b1 	movw	r1, #1201	@ 0x4b1
341929a4:	4813      	ldr	r0, [pc, #76]	@ (341929f4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
341929a6:	f7ef fc61 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341929aa:	4b13      	ldr	r3, [pc, #76]	@ (341929f8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
341929ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341929b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341929b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341929b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341929bc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341929be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341929c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341929c4:	3b01      	subs	r3, #1
341929c6:	041b      	lsls	r3, r3, #16
341929c8:	4313      	orrs	r3, r2
341929ca:	4a0b      	ldr	r2, [pc, #44]	@ (341929f8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
341929cc:	430b      	orrs	r3, r1
341929ce:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341929d2:	f7fc faf1 	bl	3418efb8 <LL_RCC_IC15_Enable>
341929d6:	e026      	b.n	34192a26 <HAL_RCCEx_PeriphCLKConfig+0x372a>
341929d8:	07010c2c 	.word	0x07010c2c
341929dc:	0700102c 	.word	0x0700102c
341929e0:	0701102c 	.word	0x0701102c
341929e4:	0702102c 	.word	0x0702102c
341929e8:	0703102c 	.word	0x0703102c
341929ec:	0704102c 	.word	0x0704102c
341929f0:	0705102c 	.word	0x0705102c
341929f4:	341a5394 	.word	0x341a5394
341929f8:	56028000 	.word	0x56028000
341929fc:	0700142c 	.word	0x0700142c
34192a00:	0701142c 	.word	0x0701142c
34192a04:	0702142c 	.word	0x0702142c
34192a08:	0703142c 	.word	0x0703142c
34192a0c:	0704142c 	.word	0x0704142c
34192a10:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34192a14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a18:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34192a1c:	4b9b      	ldr	r3, [pc, #620]	@ (34192c8c <HAL_RCCEx_PeriphCLKConfig+0x3990>)
34192a1e:	429a      	cmp	r2, r3
34192a20:	d101      	bne.n	34192a26 <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
34192a22:	f7fc fc49 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
34192a26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34192a2e:	4618      	mov	r0, r3
34192a30:	f7fb fb34 	bl	3418e09c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34192a34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a38:	e9d3 2300 	ldrd	r2, r3, [r3]
34192a3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34192a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34192a44:	2300      	movs	r3, #0
34192a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
34192a4a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34192a4e:	4603      	mov	r3, r0
34192a50:	460a      	mov	r2, r1
34192a52:	4313      	orrs	r3, r2
34192a54:	f000 8089 	beq.w	34192b6a <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34192a58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192a60:	4b8b      	ldr	r3, [pc, #556]	@ (34192c90 <HAL_RCCEx_PeriphCLKConfig+0x3994>)
34192a62:	429a      	cmp	r2, r3
34192a64:	d027      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192a66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192a6e:	4b89      	ldr	r3, [pc, #548]	@ (34192c94 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
34192a70:	429a      	cmp	r2, r3
34192a72:	d020      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192a74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a78:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192a7c:	4b86      	ldr	r3, [pc, #536]	@ (34192c98 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
34192a7e:	429a      	cmp	r2, r3
34192a80:	d019      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192a82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192a8a:	4b84      	ldr	r3, [pc, #528]	@ (34192c9c <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
34192a8c:	429a      	cmp	r2, r3
34192a8e:	d012      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192a90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192a94:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192a98:	4b81      	ldr	r3, [pc, #516]	@ (34192ca0 <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
34192a9a:	429a      	cmp	r2, r3
34192a9c:	d00b      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192a9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192aa2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192aa6:	4b7f      	ldr	r3, [pc, #508]	@ (34192ca4 <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
34192aa8:	429a      	cmp	r2, r3
34192aaa:	d004      	beq.n	34192ab6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
34192aac:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34192ab0:	487d      	ldr	r0, [pc, #500]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192ab2:	f7ef fbdb 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34192ab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192aba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192abe:	4b76      	ldr	r3, [pc, #472]	@ (34192c98 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
34192ac0:	429a      	cmp	r2, r3
34192ac2:	d142      	bne.n	34192b4a <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34192ac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192aca:	2b00      	cmp	r3, #0
34192acc:	d016      	beq.n	34192afc <HAL_RCCEx_PeriphCLKConfig+0x3800>
34192ace:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192ad8:	d010      	beq.n	34192afc <HAL_RCCEx_PeriphCLKConfig+0x3800>
34192ada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192ae4:	d00a      	beq.n	34192afc <HAL_RCCEx_PeriphCLKConfig+0x3800>
34192ae6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192aea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34192aec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192af0:	d004      	beq.n	34192afc <HAL_RCCEx_PeriphCLKConfig+0x3800>
34192af2:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34192af6:	486c      	ldr	r0, [pc, #432]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192af8:	f7ef fbb8 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34192afc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192b02:	2b00      	cmp	r3, #0
34192b04:	d005      	beq.n	34192b12 <HAL_RCCEx_PeriphCLKConfig+0x3816>
34192b06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192b10:	d904      	bls.n	34192b1c <HAL_RCCEx_PeriphCLKConfig+0x3820>
34192b12:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34192b16:	4864      	ldr	r0, [pc, #400]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192b18:	f7ef fba8 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34192b1c:	4b63      	ldr	r3, [pc, #396]	@ (34192cac <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
34192b1e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34192b22:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192b26:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192b2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b2e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34192b30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34192b36:	3b01      	subs	r3, #1
34192b38:	041b      	lsls	r3, r3, #16
34192b3a:	4313      	orrs	r3, r2
34192b3c:	4a5b      	ldr	r2, [pc, #364]	@ (34192cac <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
34192b3e:	430b      	orrs	r3, r1
34192b40:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34192b44:	f7fc fa38 	bl	3418efb8 <LL_RCC_IC15_Enable>
34192b48:	e008      	b.n	34192b5c <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34192b4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34192b52:	4b50      	ldr	r3, [pc, #320]	@ (34192c94 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
34192b54:	429a      	cmp	r2, r3
34192b56:	d101      	bne.n	34192b5c <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
34192b58:	f7fc fbae 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34192b5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b60:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34192b64:	4618      	mov	r0, r3
34192b66:	f7fb fa99 	bl	3418e09c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34192b6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
34192b72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34192b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34192b7a:	2300      	movs	r3, #0
34192b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34192b80:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34192b84:	4603      	mov	r3, r0
34192b86:	460a      	mov	r2, r1
34192b88:	4313      	orrs	r3, r2
34192b8a:	f000 80eb 	beq.w	34192d64 <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34192b8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b92:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192b96:	2b00      	cmp	r3, #0
34192b98:	d02e      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192b9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192b9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192ba6:	d027      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192ba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192bac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34192bb4:	d020      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192bb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192bba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34192bc2:	d019      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192bc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192bc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34192bd0:	d012      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192bd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192bd6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192bda:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34192bde:	d00b      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192be0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192be4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192be8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34192bec:	d004      	beq.n	34192bf8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
34192bee:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34192bf2:	482d      	ldr	r0, [pc, #180]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192bf4:	f7ef fb3a 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34192bf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192bfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34192c04:	d154      	bne.n	34192cb0 <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34192c06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34192c0c:	2b00      	cmp	r3, #0
34192c0e:	d016      	beq.n	34192c3e <HAL_RCCEx_PeriphCLKConfig+0x3942>
34192c10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34192c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192c1a:	d010      	beq.n	34192c3e <HAL_RCCEx_PeriphCLKConfig+0x3942>
34192c1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34192c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192c26:	d00a      	beq.n	34192c3e <HAL_RCCEx_PeriphCLKConfig+0x3942>
34192c28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34192c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192c32:	d004      	beq.n	34192c3e <HAL_RCCEx_PeriphCLKConfig+0x3942>
34192c34:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34192c38:	481b      	ldr	r0, [pc, #108]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192c3a:	f7ef fb17 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34192c3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34192c44:	2b00      	cmp	r3, #0
34192c46:	d005      	beq.n	34192c54 <HAL_RCCEx_PeriphCLKConfig+0x3958>
34192c48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34192c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192c52:	d904      	bls.n	34192c5e <HAL_RCCEx_PeriphCLKConfig+0x3962>
34192c54:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34192c58:	4813      	ldr	r0, [pc, #76]	@ (34192ca8 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
34192c5a:	f7ef fb07 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34192c5e:	4b13      	ldr	r3, [pc, #76]	@ (34192cac <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
34192c60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34192c64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192c68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192c6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34192c72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34192c78:	3b01      	subs	r3, #1
34192c7a:	041b      	lsls	r3, r3, #16
34192c7c:	4313      	orrs	r3, r2
34192c7e:	4a0b      	ldr	r2, [pc, #44]	@ (34192cac <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
34192c80:	430b      	orrs	r3, r1
34192c82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34192c86:	f7fc f857 	bl	3418ed38 <LL_RCC_IC9_Enable>
34192c8a:	e064      	b.n	34192d56 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
34192c8c:	0701142c 	.word	0x0701142c
34192c90:	0700182c 	.word	0x0700182c
34192c94:	0701182c 	.word	0x0701182c
34192c98:	0702182c 	.word	0x0702182c
34192c9c:	0703182c 	.word	0x0703182c
34192ca0:	0704182c 	.word	0x0704182c
34192ca4:	0705182c 	.word	0x0705182c
34192ca8:	341a5394 	.word	0x341a5394
34192cac:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34192cb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192cb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192cb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34192cbc:	d142      	bne.n	34192d44 <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34192cbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34192cc4:	2b00      	cmp	r3, #0
34192cc6:	d016      	beq.n	34192cf6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
34192cc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34192cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192cd2:	d010      	beq.n	34192cf6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
34192cd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34192cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192cde:	d00a      	beq.n	34192cf6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
34192ce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34192ce6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192cea:	d004      	beq.n	34192cf6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
34192cec:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34192cf0:	48b2      	ldr	r0, [pc, #712]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192cf2:	f7ef fabb 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34192cf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34192cfc:	2b00      	cmp	r3, #0
34192cfe:	d005      	beq.n	34192d0c <HAL_RCCEx_PeriphCLKConfig+0x3a10>
34192d00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34192d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192d0a:	d904      	bls.n	34192d16 <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
34192d0c:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34192d10:	48aa      	ldr	r0, [pc, #680]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192d12:	f7ef faab 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34192d16:	4baa      	ldr	r3, [pc, #680]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192d18:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34192d1c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192d20:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192d24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34192d2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34192d30:	3b01      	subs	r3, #1
34192d32:	041b      	lsls	r3, r3, #16
34192d34:	4313      	orrs	r3, r2
34192d36:	4aa2      	ldr	r2, [pc, #648]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192d38:	430b      	orrs	r3, r1
34192d3a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34192d3e:	f7fc f8fb 	bl	3418ef38 <LL_RCC_IC14_Enable>
34192d42:	e008      	b.n	34192d56 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34192d44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d48:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192d50:	d101      	bne.n	34192d56 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
34192d52:	f7fc fab1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
34192d56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34192d5e:	4618      	mov	r0, r3
34192d60:	f7fb f9a8 	bl	3418e0b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34192d64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d68:	e9d3 2300 	ldrd	r2, r3, [r3]
34192d6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34192d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34192d74:	2300      	movs	r3, #0
34192d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34192d7a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34192d7e:	4603      	mov	r3, r0
34192d80:	460a      	mov	r2, r1
34192d82:	4313      	orrs	r3, r2
34192d84:	f000 8082 	beq.w	34192e8c <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34192d88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d8c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192d90:	2b00      	cmp	r3, #0
34192d92:	d019      	beq.n	34192dc8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
34192d94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192d98:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34192da0:	d012      	beq.n	34192dc8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
34192da2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192da6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34192dae:	d00b      	beq.n	34192dc8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
34192db0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192db4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192db8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34192dbc:	d004      	beq.n	34192dc8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
34192dbe:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34192dc2:	487e      	ldr	r0, [pc, #504]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192dc4:	f7ef fa52 	bl	3418226c <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34192dc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192dcc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34192dd4:	d14a      	bne.n	34192e6c <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34192dd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34192dde:	2b00      	cmp	r3, #0
34192de0:	d019      	beq.n	34192e16 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
34192de2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34192dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192dee:	d012      	beq.n	34192e16 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
34192df0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34192df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192dfc:	d00b      	beq.n	34192e16 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
34192dfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34192e06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192e0a:	d004      	beq.n	34192e16 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
34192e0c:	f240 511d 	movw	r1, #1309	@ 0x51d
34192e10:	486a      	ldr	r0, [pc, #424]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192e12:	f7ef fa2b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
34192e16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34192e1e:	2b00      	cmp	r3, #0
34192e20:	d006      	beq.n	34192e30 <HAL_RCCEx_PeriphCLKConfig+0x3b34>
34192e22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34192e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192e2e:	d904      	bls.n	34192e3a <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
34192e30:	f240 511e 	movw	r1, #1310	@ 0x51e
34192e34:	4861      	ldr	r0, [pc, #388]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192e36:	f7ef fa19 	bl	3418226c <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34192e3a:	4b61      	ldr	r3, [pc, #388]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192e3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34192e40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192e44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192e48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e4c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34192e50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34192e58:	3b01      	subs	r3, #1
34192e5a:	041b      	lsls	r3, r3, #16
34192e5c:	4313      	orrs	r3, r2
34192e5e:	4a58      	ldr	r2, [pc, #352]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192e60:	430b      	orrs	r3, r1
34192e62:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34192e66:	f7fc f8e7 	bl	3418f038 <LL_RCC_IC16_Enable>
34192e6a:	e008      	b.n	34192e7e <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34192e6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e70:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34192e78:	d101      	bne.n	34192e7e <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
34192e7a:	f7fc fa1d 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34192e7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e82:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34192e86:	4618      	mov	r0, r3
34192e88:	f7fb f92a 	bl	3418e0e0 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34192e8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192e90:	e9d3 2300 	ldrd	r2, r3, [r3]
34192e94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34192e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34192e9c:	2300      	movs	r3, #0
34192e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34192ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34192ea6:	4603      	mov	r3, r0
34192ea8:	460a      	mov	r2, r1
34192eaa:	4313      	orrs	r3, r2
34192eac:	f000 80e4 	beq.w	34193078 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
34192eb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192eb4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192eb8:	2b00      	cmp	r3, #0
34192eba:	d035      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192ebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ec0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34192ec8:	d02e      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192eca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ece:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34192ed6:	d027      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192ed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192edc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192ee0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34192ee4:	d020      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192ee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192eea:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192eee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34192ef2:	d019      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192ef4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ef8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34192f00:	d012      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192f02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f06:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192f0a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34192f0e:	d00b      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192f10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f14:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192f18:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34192f1c:	d004      	beq.n	34192f28 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
34192f1e:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
34192f22:	4826      	ldr	r0, [pc, #152]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192f24:	f7ef f9a2 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34192f28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f2c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34192f34:	d146      	bne.n	34192fc4 <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34192f36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192f3c:	2b00      	cmp	r3, #0
34192f3e:	d016      	beq.n	34192f6e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
34192f40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192f4a:	d010      	beq.n	34192f6e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
34192f4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192f56:	d00a      	beq.n	34192f6e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
34192f58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34192f5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192f62:	d004      	beq.n	34192f6e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
34192f64:	f240 513d 	movw	r1, #1341	@ 0x53d
34192f68:	4814      	ldr	r0, [pc, #80]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192f6a:	f7ef f97f 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34192f6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34192f74:	2b00      	cmp	r3, #0
34192f76:	d005      	beq.n	34192f84 <HAL_RCCEx_PeriphCLKConfig+0x3c88>
34192f78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34192f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34192f82:	d904      	bls.n	34192f8e <HAL_RCCEx_PeriphCLKConfig+0x3c92>
34192f84:	f240 513e 	movw	r1, #1342	@ 0x53e
34192f88:	480c      	ldr	r0, [pc, #48]	@ (34192fbc <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
34192f8a:	f7ef f96f 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34192f8e:	4b0c      	ldr	r3, [pc, #48]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192f90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34192f94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34192f98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34192f9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34192fa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34192fa8:	3b01      	subs	r3, #1
34192faa:	041b      	lsls	r3, r3, #16
34192fac:	4313      	orrs	r3, r2
34192fae:	4a04      	ldr	r2, [pc, #16]	@ (34192fc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
34192fb0:	430b      	orrs	r3, r1
34192fb2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34192fb6:	f7fb fe3f 	bl	3418ec38 <LL_RCC_IC7_Enable>
34192fba:	e056      	b.n	3419306a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
34192fbc:	341a5394 	.word	0x341a5394
34192fc0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34192fc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34192fcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34192fd0:	d142      	bne.n	34193058 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34192fd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34192fd8:	2b00      	cmp	r3, #0
34192fda:	d016      	beq.n	3419300a <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
34192fdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34192fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34192fe6:	d010      	beq.n	3419300a <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
34192fe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34192fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34192ff2:	d00a      	beq.n	3419300a <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
34192ff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34192ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34192ffa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34192ffe:	d004      	beq.n	3419300a <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
34193000:	f240 514a 	movw	r1, #1354	@ 0x54a
34193004:	48b0      	ldr	r0, [pc, #704]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
34193006:	f7ef f931 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3419300a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193010:	2b00      	cmp	r3, #0
34193012:	d005      	beq.n	34193020 <HAL_RCCEx_PeriphCLKConfig+0x3d24>
34193014:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419301a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419301e:	d904      	bls.n	3419302a <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
34193020:	f240 514b 	movw	r1, #1355	@ 0x54b
34193024:	48a8      	ldr	r0, [pc, #672]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
34193026:	f7ef f921 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3419302a:	4ba8      	ldr	r3, [pc, #672]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3419302c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34193030:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193034:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419303c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3419303e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193044:	3b01      	subs	r3, #1
34193046:	041b      	lsls	r3, r3, #16
34193048:	4313      	orrs	r3, r2
3419304a:	4aa0      	ldr	r2, [pc, #640]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3419304c:	430b      	orrs	r3, r1
3419304e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34193052:	f7fb fe31 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193056:	e008      	b.n	3419306a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34193058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419305c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34193060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34193064:	d101      	bne.n	3419306a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
34193066:	f7fc f927 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3419306a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419306e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34193072:	4618      	mov	r0, r3
34193074:	f7fb f84a 	bl	3418e10c <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34193078:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419307c:	e9d3 2300 	ldrd	r2, r3, [r3]
34193080:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34193084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34193088:	2300      	movs	r3, #0
3419308a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3419308e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34193092:	4603      	mov	r3, r0
34193094:	460a      	mov	r2, r1
34193096:	4313      	orrs	r3, r2
34193098:	d07c      	beq.n	34193194 <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3419309a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419309e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341930a2:	2b00      	cmp	r3, #0
341930a4:	d016      	beq.n	341930d4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
341930a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930aa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341930ae:	2b10      	cmp	r3, #16
341930b0:	d010      	beq.n	341930d4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
341930b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341930ba:	2b20      	cmp	r3, #32
341930bc:	d00a      	beq.n	341930d4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
341930be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341930c6:	2b30      	cmp	r3, #48	@ 0x30
341930c8:	d004      	beq.n	341930d4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
341930ca:	f240 5165 	movw	r1, #1381	@ 0x565
341930ce:	487e      	ldr	r0, [pc, #504]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
341930d0:	f7ef f8cc 	bl	3418226c <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
341930d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341930dc:	2b20      	cmp	r3, #32
341930de:	d14a      	bne.n	34193176 <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
341930e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341930e8:	2b00      	cmp	r3, #0
341930ea:	d019      	beq.n	34193120 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
341930ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341930f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341930f8:	d012      	beq.n	34193120 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
341930fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341930fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34193102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193106:	d00b      	beq.n	34193120 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
34193108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419310c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34193110:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193114:	d004      	beq.n	34193120 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
34193116:	f240 516a 	movw	r1, #1386	@ 0x56a
3419311a:	486b      	ldr	r0, [pc, #428]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3419311c:	f7ef f8a6 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34193120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34193128:	2b00      	cmp	r3, #0
3419312a:	d006      	beq.n	3419313a <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3419312c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34193134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193138:	d904      	bls.n	34193144 <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3419313a:	f240 516b 	movw	r1, #1387	@ 0x56b
3419313e:	4862      	ldr	r0, [pc, #392]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
34193140:	f7ef f894 	bl	3418226c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34193144:	4b61      	ldr	r3, [pc, #388]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
34193146:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3419314a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419314e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193156:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3419315a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419315e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34193162:	3b01      	subs	r3, #1
34193164:	041b      	lsls	r3, r3, #16
34193166:	4313      	orrs	r3, r2
34193168:	4a58      	ldr	r2, [pc, #352]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3419316a:	430b      	orrs	r3, r1
3419316c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34193170:	f7fc f862 	bl	3418f238 <LL_RCC_IC20_Enable>
34193174:	e007      	b.n	34193186 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34193176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419317a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3419317e:	2b10      	cmp	r3, #16
34193180:	d101      	bne.n	34193186 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
34193182:	f7fc f899 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
34193186:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419318a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3419318e:	4618      	mov	r0, r3
34193190:	f7fa ffe8 	bl	3418e164 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34193194:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193198:	e9d3 2300 	ldrd	r2, r3, [r3]
3419319c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
341931a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
341931a4:	2300      	movs	r3, #0
341931a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
341931aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
341931ae:	4603      	mov	r3, r0
341931b0:	460a      	mov	r2, r1
341931b2:	4313      	orrs	r3, r2
341931b4:	f000 80f6 	beq.w	341933a4 <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
341931b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341931bc:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341931c0:	4b43      	ldr	r3, [pc, #268]	@ (341932d0 <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
341931c2:	429a      	cmp	r2, r3
341931c4:	d035      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
341931c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341931ca:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341931ce:	4b41      	ldr	r3, [pc, #260]	@ (341932d4 <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
341931d0:	429a      	cmp	r2, r3
341931d2:	d02e      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
341931d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341931d8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341931dc:	4b3e      	ldr	r3, [pc, #248]	@ (341932d8 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
341931de:	429a      	cmp	r2, r3
341931e0:	d027      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
341931e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341931e6:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341931ea:	4b3c      	ldr	r3, [pc, #240]	@ (341932dc <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
341931ec:	429a      	cmp	r2, r3
341931ee:	d020      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
341931f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341931f4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341931f8:	4b39      	ldr	r3, [pc, #228]	@ (341932e0 <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
341931fa:	429a      	cmp	r2, r3
341931fc:	d019      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
341931fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193202:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34193206:	4b37      	ldr	r3, [pc, #220]	@ (341932e4 <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
34193208:	429a      	cmp	r2, r3
3419320a:	d012      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3419320c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193210:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34193214:	4b34      	ldr	r3, [pc, #208]	@ (341932e8 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
34193216:	429a      	cmp	r2, r3
34193218:	d00b      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3419321a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419321e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34193222:	4b32      	ldr	r3, [pc, #200]	@ (341932ec <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
34193224:	429a      	cmp	r2, r3
34193226:	d004      	beq.n	34193232 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
34193228:	f240 5185 	movw	r1, #1413	@ 0x585
3419322c:	4826      	ldr	r0, [pc, #152]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3419322e:	f7ef f81d 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34193232:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193236:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3419323a:	4b27      	ldr	r3, [pc, #156]	@ (341932d8 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3419323c:	429a      	cmp	r2, r3
3419323e:	d157      	bne.n	341932f0 <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34193240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193246:	2b00      	cmp	r3, #0
34193248:	d016      	beq.n	34193278 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3419324a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193254:	d010      	beq.n	34193278 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
34193256:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419325c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193260:	d00a      	beq.n	34193278 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
34193262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419326c:	d004      	beq.n	34193278 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3419326e:	f240 518a 	movw	r1, #1418	@ 0x58a
34193272:	4815      	ldr	r0, [pc, #84]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
34193274:	f7ee fffa 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34193278:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419327e:	2b00      	cmp	r3, #0
34193280:	d005      	beq.n	3419328e <HAL_RCCEx_PeriphCLKConfig+0x3f92>
34193282:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34193288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419328c:	d904      	bls.n	34193298 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3419328e:	f240 518b 	movw	r1, #1419	@ 0x58b
34193292:	480d      	ldr	r0, [pc, #52]	@ (341932c8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
34193294:	f7ee ffea 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34193298:	4b0c      	ldr	r3, [pc, #48]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3419329a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3419329e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341932a2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341932a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341932aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341932ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341932b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341932b2:	3b01      	subs	r3, #1
341932b4:	041b      	lsls	r3, r3, #16
341932b6:	4313      	orrs	r3, r2
341932b8:	4a04      	ldr	r2, [pc, #16]	@ (341932cc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
341932ba:	430b      	orrs	r3, r1
341932bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341932c0:	f7fb fcba 	bl	3418ec38 <LL_RCC_IC7_Enable>
341932c4:	e067      	b.n	34193396 <HAL_RCCEx_PeriphCLKConfig+0x409a>
341932c6:	bf00      	nop
341932c8:	341a5394 	.word	0x341a5394
341932cc:	56028000 	.word	0x56028000
341932d0:	07001418 	.word	0x07001418
341932d4:	07011418 	.word	0x07011418
341932d8:	07021418 	.word	0x07021418
341932dc:	07031418 	.word	0x07031418
341932e0:	07041418 	.word	0x07041418
341932e4:	07051418 	.word	0x07051418
341932e8:	07061418 	.word	0x07061418
341932ec:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
341932f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341932f4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341932f8:	4b9c      	ldr	r3, [pc, #624]	@ (3419356c <HAL_RCCEx_PeriphCLKConfig+0x4270>)
341932fa:	429a      	cmp	r2, r3
341932fc:	d142      	bne.n	34193384 <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
341932fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193304:	2b00      	cmp	r3, #0
34193306:	d016      	beq.n	34193336 <HAL_RCCEx_PeriphCLKConfig+0x403a>
34193308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419330e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193312:	d010      	beq.n	34193336 <HAL_RCCEx_PeriphCLKConfig+0x403a>
34193314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419331a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419331e:	d00a      	beq.n	34193336 <HAL_RCCEx_PeriphCLKConfig+0x403a>
34193320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419332a:	d004      	beq.n	34193336 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3419332c:	f240 5197 	movw	r1, #1431	@ 0x597
34193330:	488f      	ldr	r0, [pc, #572]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
34193332:	f7ee ff9b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34193336:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419333c:	2b00      	cmp	r3, #0
3419333e:	d005      	beq.n	3419334c <HAL_RCCEx_PeriphCLKConfig+0x4050>
34193340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419334a:	d904      	bls.n	34193356 <HAL_RCCEx_PeriphCLKConfig+0x405a>
3419334c:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34193350:	4887      	ldr	r0, [pc, #540]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
34193352:	f7ee ff8b 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34193356:	4b87      	ldr	r3, [pc, #540]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
34193358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419335c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193360:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3419336a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193370:	3b01      	subs	r3, #1
34193372:	041b      	lsls	r3, r3, #16
34193374:	4313      	orrs	r3, r2
34193376:	4a7f      	ldr	r2, [pc, #508]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
34193378:	430b      	orrs	r3, r1
3419337a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3419337e:	f7fb fc9b 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193382:	e008      	b.n	34193396 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34193384:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193388:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3419338c:	4b7a      	ldr	r3, [pc, #488]	@ (34193578 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3419338e:	429a      	cmp	r2, r3
34193390:	d101      	bne.n	34193396 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
34193392:	f7fb ff91 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34193396:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419339a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3419339e:	4618      	mov	r0, r3
341933a0:	f7fa fef6 	bl	3418e190 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
341933a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341933a8:	e9d3 2300 	ldrd	r2, r3, [r3]
341933ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
341933b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
341933b4:	2300      	movs	r3, #0
341933b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
341933ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
341933be:	4603      	mov	r3, r0
341933c0:	460a      	mov	r2, r1
341933c2:	4313      	orrs	r3, r2
341933c4:	f000 80fa 	beq.w	341935bc <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
341933c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341933cc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341933d0:	4b6a      	ldr	r3, [pc, #424]	@ (3419357c <HAL_RCCEx_PeriphCLKConfig+0x4280>)
341933d2:	429a      	cmp	r2, r3
341933d4:	d035      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
341933d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341933da:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341933de:	4b68      	ldr	r3, [pc, #416]	@ (34193580 <HAL_RCCEx_PeriphCLKConfig+0x4284>)
341933e0:	429a      	cmp	r2, r3
341933e2:	d02e      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
341933e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341933e8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341933ec:	4b65      	ldr	r3, [pc, #404]	@ (34193584 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
341933ee:	429a      	cmp	r2, r3
341933f0:	d027      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
341933f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341933f6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341933fa:	4b63      	ldr	r3, [pc, #396]	@ (34193588 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
341933fc:	429a      	cmp	r2, r3
341933fe:	d020      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
34193400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193404:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34193408:	4b60      	ldr	r3, [pc, #384]	@ (3419358c <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3419340a:	429a      	cmp	r2, r3
3419340c:	d019      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3419340e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193412:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34193416:	4b5e      	ldr	r3, [pc, #376]	@ (34193590 <HAL_RCCEx_PeriphCLKConfig+0x4294>)
34193418:	429a      	cmp	r2, r3
3419341a:	d012      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3419341c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193420:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34193424:	4b5b      	ldr	r3, [pc, #364]	@ (34193594 <HAL_RCCEx_PeriphCLKConfig+0x4298>)
34193426:	429a      	cmp	r2, r3
34193428:	d00b      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3419342a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419342e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34193432:	4b59      	ldr	r3, [pc, #356]	@ (34193598 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
34193434:	429a      	cmp	r2, r3
34193436:	d004      	beq.n	34193442 <HAL_RCCEx_PeriphCLKConfig+0x4146>
34193438:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3419343c:	484c      	ldr	r0, [pc, #304]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3419343e:	f7ee ff15 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34193442:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193446:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3419344a:	4b4e      	ldr	r3, [pc, #312]	@ (34193584 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3419344c:	429a      	cmp	r2, r3
3419344e:	d142      	bne.n	341934d6 <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34193450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193456:	2b00      	cmp	r3, #0
34193458:	d016      	beq.n	34193488 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3419345a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193464:	d010      	beq.n	34193488 <HAL_RCCEx_PeriphCLKConfig+0x418c>
34193466:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419346c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193470:	d00a      	beq.n	34193488 <HAL_RCCEx_PeriphCLKConfig+0x418c>
34193472:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419347c:	d004      	beq.n	34193488 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3419347e:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34193482:	483b      	ldr	r0, [pc, #236]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
34193484:	f7ee fef2 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34193488:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419348e:	2b00      	cmp	r3, #0
34193490:	d005      	beq.n	3419349e <HAL_RCCEx_PeriphCLKConfig+0x41a2>
34193492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34193498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419349c:	d904      	bls.n	341934a8 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3419349e:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
341934a2:	4833      	ldr	r0, [pc, #204]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
341934a4:	f7ee fee2 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341934a8:	4b32      	ldr	r3, [pc, #200]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
341934aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341934ae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341934b2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341934b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341934bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341934c2:	3b01      	subs	r3, #1
341934c4:	041b      	lsls	r3, r3, #16
341934c6:	4313      	orrs	r3, r2
341934c8:	4a2a      	ldr	r2, [pc, #168]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
341934ca:	430b      	orrs	r3, r1
341934cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341934d0:	f7fb fbb2 	bl	3418ec38 <LL_RCC_IC7_Enable>
341934d4:	e06b      	b.n	341935ae <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
341934d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934da:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341934de:	4b2a      	ldr	r3, [pc, #168]	@ (34193588 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
341934e0:	429a      	cmp	r2, r3
341934e2:	d15b      	bne.n	3419359c <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
341934e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341934ea:	2b00      	cmp	r3, #0
341934ec:	d016      	beq.n	3419351c <HAL_RCCEx_PeriphCLKConfig+0x4220>
341934ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341934f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341934f8:	d010      	beq.n	3419351c <HAL_RCCEx_PeriphCLKConfig+0x4220>
341934fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341934fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193504:	d00a      	beq.n	3419351c <HAL_RCCEx_PeriphCLKConfig+0x4220>
34193506:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419350c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193510:	d004      	beq.n	3419351c <HAL_RCCEx_PeriphCLKConfig+0x4220>
34193512:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34193516:	4816      	ldr	r0, [pc, #88]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
34193518:	f7ee fea8 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3419351c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193522:	2b00      	cmp	r3, #0
34193524:	d005      	beq.n	34193532 <HAL_RCCEx_PeriphCLKConfig+0x4236>
34193526:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419352c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193530:	d904      	bls.n	3419353c <HAL_RCCEx_PeriphCLKConfig+0x4240>
34193532:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34193536:	480e      	ldr	r0, [pc, #56]	@ (34193570 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
34193538:	f7ee fe98 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3419353c:	4b0d      	ldr	r3, [pc, #52]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3419353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34193542:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193546:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419354a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419354e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34193550:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193556:	3b01      	subs	r3, #1
34193558:	041b      	lsls	r3, r3, #16
3419355a:	4313      	orrs	r3, r2
3419355c:	4a05      	ldr	r2, [pc, #20]	@ (34193574 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3419355e:	430b      	orrs	r3, r1
34193560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34193564:	f7fb fba8 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193568:	e021      	b.n	341935ae <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3419356a:	bf00      	nop
3419356c:	07031418 	.word	0x07031418
34193570:	341a5394 	.word	0x341a5394
34193574:	56028000 	.word	0x56028000
34193578:	07011418 	.word	0x07011418
3419357c:	07001818 	.word	0x07001818
34193580:	07011818 	.word	0x07011818
34193584:	07021818 	.word	0x07021818
34193588:	07031818 	.word	0x07031818
3419358c:	07041818 	.word	0x07041818
34193590:	07051818 	.word	0x07051818
34193594:	07061818 	.word	0x07061818
34193598:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3419359c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935a0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341935a4:	4b6f      	ldr	r3, [pc, #444]	@ (34193764 <HAL_RCCEx_PeriphCLKConfig+0x4468>)
341935a6:	429a      	cmp	r2, r3
341935a8:	d101      	bne.n	341935ae <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
341935aa:	f7fb fe85 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
341935ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935b2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
341935b6:	4618      	mov	r0, r3
341935b8:	f7fa fdea 	bl	3418e190 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
341935bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935c0:	e9d3 2300 	ldrd	r2, r3, [r3]
341935c4:	2100      	movs	r1, #0
341935c6:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
341935ca:	f003 0301 	and.w	r3, r3, #1
341935ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
341935d2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
341935d6:	4603      	mov	r3, r0
341935d8:	460a      	mov	r2, r1
341935da:	4313      	orrs	r3, r2
341935dc:	f000 80d7 	beq.w	3419378e <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
341935e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935e4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341935e8:	2b00      	cmp	r3, #0
341935ea:	d028      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
341935ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341935f4:	2b01      	cmp	r3, #1
341935f6:	d022      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
341935f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341935fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193600:	2b02      	cmp	r3, #2
34193602:	d01c      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
34193604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193608:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3419360c:	2b03      	cmp	r3, #3
3419360e:	d016      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
34193610:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193614:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193618:	2b04      	cmp	r3, #4
3419361a:	d010      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3419361c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193620:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193624:	2b05      	cmp	r3, #5
34193626:	d00a      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
34193628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419362c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193630:	2b06      	cmp	r3, #6
34193632:	d004      	beq.n	3419363e <HAL_RCCEx_PeriphCLKConfig+0x4342>
34193634:	f240 51df 	movw	r1, #1503	@ 0x5df
34193638:	484b      	ldr	r0, [pc, #300]	@ (34193768 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3419363a:	f7ee fe17 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3419363e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193642:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193646:	2b02      	cmp	r3, #2
34193648:	d142      	bne.n	341936d0 <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3419364a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193650:	2b00      	cmp	r3, #0
34193652:	d016      	beq.n	34193682 <HAL_RCCEx_PeriphCLKConfig+0x4386>
34193654:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419365a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419365e:	d010      	beq.n	34193682 <HAL_RCCEx_PeriphCLKConfig+0x4386>
34193660:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419366a:	d00a      	beq.n	34193682 <HAL_RCCEx_PeriphCLKConfig+0x4386>
3419366c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34193672:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193676:	d004      	beq.n	34193682 <HAL_RCCEx_PeriphCLKConfig+0x4386>
34193678:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3419367c:	483a      	ldr	r0, [pc, #232]	@ (34193768 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3419367e:	f7ee fdf5 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34193682:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34193688:	2b00      	cmp	r3, #0
3419368a:	d005      	beq.n	34193698 <HAL_RCCEx_PeriphCLKConfig+0x439c>
3419368c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34193692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193696:	d904      	bls.n	341936a2 <HAL_RCCEx_PeriphCLKConfig+0x43a6>
34193698:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3419369c:	4832      	ldr	r0, [pc, #200]	@ (34193768 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3419369e:	f7ee fde5 	bl	3418226c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341936a2:	4b32      	ldr	r3, [pc, #200]	@ (3419376c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
341936a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341936a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341936ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341936b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341936b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341936bc:	3b01      	subs	r3, #1
341936be:	041b      	lsls	r3, r3, #16
341936c0:	4313      	orrs	r3, r2
341936c2:	4a2a      	ldr	r2, [pc, #168]	@ (3419376c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
341936c4:	430b      	orrs	r3, r1
341936c6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341936ca:	f7fb fab5 	bl	3418ec38 <LL_RCC_IC7_Enable>
341936ce:	e057      	b.n	34193780 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
341936d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936d4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341936d8:	2b03      	cmp	r3, #3
341936da:	d149      	bne.n	34193770 <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
341936dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341936e2:	2b00      	cmp	r3, #0
341936e4:	d016      	beq.n	34193714 <HAL_RCCEx_PeriphCLKConfig+0x4418>
341936e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341936ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341936f0:	d010      	beq.n	34193714 <HAL_RCCEx_PeriphCLKConfig+0x4418>
341936f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341936f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341936f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341936fc:	d00a      	beq.n	34193714 <HAL_RCCEx_PeriphCLKConfig+0x4418>
341936fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193704:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193708:	d004      	beq.n	34193714 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3419370a:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3419370e:	4816      	ldr	r0, [pc, #88]	@ (34193768 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
34193710:	f7ee fdac 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34193714:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419371a:	2b00      	cmp	r3, #0
3419371c:	d005      	beq.n	3419372a <HAL_RCCEx_PeriphCLKConfig+0x442e>
3419371e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193728:	d904      	bls.n	34193734 <HAL_RCCEx_PeriphCLKConfig+0x4438>
3419372a:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3419372e:	480e      	ldr	r0, [pc, #56]	@ (34193768 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
34193730:	f7ee fd9c 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34193734:	4b0d      	ldr	r3, [pc, #52]	@ (3419376c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
34193736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419373a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419373e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193742:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34193748:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419374e:	3b01      	subs	r3, #1
34193750:	041b      	lsls	r3, r3, #16
34193752:	4313      	orrs	r3, r2
34193754:	4a05      	ldr	r2, [pc, #20]	@ (3419376c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
34193756:	430b      	orrs	r3, r1
34193758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3419375c:	f7fb faac 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193760:	e00e      	b.n	34193780 <HAL_RCCEx_PeriphCLKConfig+0x4484>
34193762:	bf00      	nop
34193764:	07011818 	.word	0x07011818
34193768:	341a5394 	.word	0x341a5394
3419376c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34193770:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193774:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193778:	2b01      	cmp	r3, #1
3419377a:	d101      	bne.n	34193780 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
3419377c:	f7fb fd9c 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34193780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193784:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34193788:	4618      	mov	r0, r3
3419378a:	f7fa fd17 	bl	3418e1bc <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3419378e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193792:	e9d3 2300 	ldrd	r2, r3, [r3]
34193796:	2100      	movs	r1, #0
34193798:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3419379c:	f003 0302 	and.w	r3, r3, #2
341937a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
341937a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
341937a8:	4603      	mov	r3, r0
341937aa:	460a      	mov	r2, r1
341937ac:	4313      	orrs	r3, r2
341937ae:	f000 80da 	beq.w	34193966 <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
341937b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937b6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341937ba:	4bb4      	ldr	r3, [pc, #720]	@ (34193a8c <HAL_RCCEx_PeriphCLKConfig+0x4790>)
341937bc:	429a      	cmp	r2, r3
341937be:	d02e      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
341937c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341937c8:	4bb1      	ldr	r3, [pc, #708]	@ (34193a90 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
341937ca:	429a      	cmp	r2, r3
341937cc:	d027      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
341937ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937d2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341937d6:	4baf      	ldr	r3, [pc, #700]	@ (34193a94 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
341937d8:	429a      	cmp	r2, r3
341937da:	d020      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
341937dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937e0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341937e4:	4bac      	ldr	r3, [pc, #688]	@ (34193a98 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
341937e6:	429a      	cmp	r2, r3
341937e8:	d019      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
341937ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937ee:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341937f2:	4baa      	ldr	r3, [pc, #680]	@ (34193a9c <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
341937f4:	429a      	cmp	r2, r3
341937f6:	d012      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
341937f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341937fc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34193800:	4ba7      	ldr	r3, [pc, #668]	@ (34193aa0 <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
34193802:	429a      	cmp	r2, r3
34193804:	d00b      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
34193806:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419380a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3419380e:	4ba5      	ldr	r3, [pc, #660]	@ (34193aa4 <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
34193810:	429a      	cmp	r2, r3
34193812:	d004      	beq.n	3419381e <HAL_RCCEx_PeriphCLKConfig+0x4522>
34193814:	f240 610c 	movw	r1, #1548	@ 0x60c
34193818:	48a3      	ldr	r0, [pc, #652]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3419381a:	f7ee fd27 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3419381e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193822:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34193826:	4b9b      	ldr	r3, [pc, #620]	@ (34193a94 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
34193828:	429a      	cmp	r2, r3
3419382a:	d142      	bne.n	341938b2 <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3419382c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193832:	2b00      	cmp	r3, #0
34193834:	d016      	beq.n	34193864 <HAL_RCCEx_PeriphCLKConfig+0x4568>
34193836:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419383c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193840:	d010      	beq.n	34193864 <HAL_RCCEx_PeriphCLKConfig+0x4568>
34193842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419384c:	d00a      	beq.n	34193864 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3419384e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193858:	d004      	beq.n	34193864 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3419385a:	f240 6111 	movw	r1, #1553	@ 0x611
3419385e:	4892      	ldr	r0, [pc, #584]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34193860:	f7ee fd04 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34193864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419386a:	2b00      	cmp	r3, #0
3419386c:	d005      	beq.n	3419387a <HAL_RCCEx_PeriphCLKConfig+0x457e>
3419386e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193878:	d904      	bls.n	34193884 <HAL_RCCEx_PeriphCLKConfig+0x4588>
3419387a:	f240 6112 	movw	r1, #1554	@ 0x612
3419387e:	488a      	ldr	r0, [pc, #552]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34193880:	f7ee fcf4 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34193884:	4b89      	ldr	r3, [pc, #548]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
34193886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419388a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419388e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193892:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34193898:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419389e:	3b01      	subs	r3, #1
341938a0:	041b      	lsls	r3, r3, #16
341938a2:	4313      	orrs	r3, r2
341938a4:	4a81      	ldr	r2, [pc, #516]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
341938a6:	430b      	orrs	r3, r1
341938a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341938ac:	f7fb fa04 	bl	3418ecb8 <LL_RCC_IC8_Enable>
341938b0:	e052      	b.n	34193958 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
341938b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938b6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341938ba:	4b77      	ldr	r3, [pc, #476]	@ (34193a98 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
341938bc:	429a      	cmp	r2, r3
341938be:	d142      	bne.n	34193946 <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341938c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341938c6:	2b00      	cmp	r3, #0
341938c8:	d016      	beq.n	341938f8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
341938ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341938d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341938d4:	d010      	beq.n	341938f8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
341938d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341938dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341938e0:	d00a      	beq.n	341938f8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
341938e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341938e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341938ec:	d004      	beq.n	341938f8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
341938ee:	f240 611e 	movw	r1, #1566	@ 0x61e
341938f2:	486d      	ldr	r0, [pc, #436]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
341938f4:	f7ee fcba 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
341938f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341938fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341938fe:	2b00      	cmp	r3, #0
34193900:	d005      	beq.n	3419390e <HAL_RCCEx_PeriphCLKConfig+0x4612>
34193902:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419390c:	d904      	bls.n	34193918 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3419390e:	f240 611f 	movw	r1, #1567	@ 0x61f
34193912:	4865      	ldr	r0, [pc, #404]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34193914:	f7ee fcaa 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34193918:	4b64      	ldr	r3, [pc, #400]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3419391a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3419391e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193922:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193926:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419392a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419392c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193932:	3b01      	subs	r3, #1
34193934:	041b      	lsls	r3, r3, #16
34193936:	4313      	orrs	r3, r2
34193938:	4a5c      	ldr	r2, [pc, #368]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3419393a:	430b      	orrs	r3, r1
3419393c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34193940:	f7fb f9fa 	bl	3418ed38 <LL_RCC_IC9_Enable>
34193944:	e008      	b.n	34193958 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34193946:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419394a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3419394e:	4b50      	ldr	r3, [pc, #320]	@ (34193a90 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
34193950:	429a      	cmp	r2, r3
34193952:	d101      	bne.n	34193958 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
34193954:	f7fb fcb0 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
34193958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419395c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
34193960:	4618      	mov	r0, r3
34193962:	f7fa fc41 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34193966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419396a:	e9d3 2300 	ldrd	r2, r3, [r3]
3419396e:	2100      	movs	r1, #0
34193970:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
34193974:	f003 0304 	and.w	r3, r3, #4
34193978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3419397c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
34193980:	4603      	mov	r3, r0
34193982:	460a      	mov	r2, r1
34193984:	4313      	orrs	r3, r2
34193986:	f000 80fb 	beq.w	34193b80 <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3419398a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419398e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34193992:	4b47      	ldr	r3, [pc, #284]	@ (34193ab0 <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
34193994:	429a      	cmp	r2, r3
34193996:	d02e      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
34193998:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419399c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939a0:	4b44      	ldr	r3, [pc, #272]	@ (34193ab4 <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
341939a2:	429a      	cmp	r2, r3
341939a4:	d027      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939aa:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939ae:	4b42      	ldr	r3, [pc, #264]	@ (34193ab8 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
341939b0:	429a      	cmp	r2, r3
341939b2:	d020      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939b8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939bc:	4b3f      	ldr	r3, [pc, #252]	@ (34193abc <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
341939be:	429a      	cmp	r2, r3
341939c0:	d019      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939c6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939ca:	4b3d      	ldr	r3, [pc, #244]	@ (34193ac0 <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
341939cc:	429a      	cmp	r2, r3
341939ce:	d012      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939d4:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939d8:	4b3a      	ldr	r3, [pc, #232]	@ (34193ac4 <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
341939da:	429a      	cmp	r2, r3
341939dc:	d00b      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939e2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939e6:	4b38      	ldr	r3, [pc, #224]	@ (34193ac8 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
341939e8:	429a      	cmp	r2, r3
341939ea:	d004      	beq.n	341939f6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
341939ec:	f240 6139 	movw	r1, #1593	@ 0x639
341939f0:	482d      	ldr	r0, [pc, #180]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
341939f2:	f7ee fc3b 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
341939f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341939fa:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341939fe:	4b2e      	ldr	r3, [pc, #184]	@ (34193ab8 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
34193a00:	429a      	cmp	r2, r3
34193a02:	d163      	bne.n	34193acc <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34193a04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193a0a:	2b00      	cmp	r3, #0
34193a0c:	d016      	beq.n	34193a3c <HAL_RCCEx_PeriphCLKConfig+0x4740>
34193a0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193a18:	d010      	beq.n	34193a3c <HAL_RCCEx_PeriphCLKConfig+0x4740>
34193a1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193a24:	d00a      	beq.n	34193a3c <HAL_RCCEx_PeriphCLKConfig+0x4740>
34193a26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193a2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193a30:	d004      	beq.n	34193a3c <HAL_RCCEx_PeriphCLKConfig+0x4740>
34193a32:	f240 613e 	movw	r1, #1598	@ 0x63e
34193a36:	481c      	ldr	r0, [pc, #112]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34193a38:	f7ee fc18 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34193a3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193a42:	2b00      	cmp	r3, #0
34193a44:	d005      	beq.n	34193a52 <HAL_RCCEx_PeriphCLKConfig+0x4756>
34193a46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193a50:	d904      	bls.n	34193a5c <HAL_RCCEx_PeriphCLKConfig+0x4760>
34193a52:	f240 613f 	movw	r1, #1599	@ 0x63f
34193a56:	4814      	ldr	r0, [pc, #80]	@ (34193aa8 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34193a58:	f7ee fc08 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34193a5c:	4b13      	ldr	r3, [pc, #76]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
34193a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34193a62:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193a66:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193a6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34193a70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193a76:	3b01      	subs	r3, #1
34193a78:	041b      	lsls	r3, r3, #16
34193a7a:	4313      	orrs	r3, r2
34193a7c:	4a0b      	ldr	r2, [pc, #44]	@ (34193aac <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
34193a7e:	430b      	orrs	r3, r1
34193a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34193a84:	f7fb f918 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193a88:	e073      	b.n	34193b72 <HAL_RCCEx_PeriphCLKConfig+0x4876>
34193a8a:	bf00      	nop
34193a8c:	07000420 	.word	0x07000420
34193a90:	07010420 	.word	0x07010420
34193a94:	07020420 	.word	0x07020420
34193a98:	07030420 	.word	0x07030420
34193a9c:	07040420 	.word	0x07040420
34193aa0:	07050420 	.word	0x07050420
34193aa4:	07060420 	.word	0x07060420
34193aa8:	341a5394 	.word	0x341a5394
34193aac:	56028000 	.word	0x56028000
34193ab0:	07000820 	.word	0x07000820
34193ab4:	07010820 	.word	0x07010820
34193ab8:	07020820 	.word	0x07020820
34193abc:	07030820 	.word	0x07030820
34193ac0:	07040820 	.word	0x07040820
34193ac4:	07050820 	.word	0x07050820
34193ac8:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34193acc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ad0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34193ad4:	4b98      	ldr	r3, [pc, #608]	@ (34193d38 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
34193ad6:	429a      	cmp	r2, r3
34193ad8:	d142      	bne.n	34193b60 <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34193ada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193ae0:	2b00      	cmp	r3, #0
34193ae2:	d016      	beq.n	34193b12 <HAL_RCCEx_PeriphCLKConfig+0x4816>
34193ae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193aee:	d010      	beq.n	34193b12 <HAL_RCCEx_PeriphCLKConfig+0x4816>
34193af0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193afa:	d00a      	beq.n	34193b12 <HAL_RCCEx_PeriphCLKConfig+0x4816>
34193afc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193b02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193b06:	d004      	beq.n	34193b12 <HAL_RCCEx_PeriphCLKConfig+0x4816>
34193b08:	f240 614b 	movw	r1, #1611	@ 0x64b
34193b0c:	488b      	ldr	r0, [pc, #556]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193b0e:	f7ee fbad 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34193b12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193b18:	2b00      	cmp	r3, #0
34193b1a:	d005      	beq.n	34193b28 <HAL_RCCEx_PeriphCLKConfig+0x482c>
34193b1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193b26:	d904      	bls.n	34193b32 <HAL_RCCEx_PeriphCLKConfig+0x4836>
34193b28:	f240 614c 	movw	r1, #1612	@ 0x64c
34193b2c:	4883      	ldr	r0, [pc, #524]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193b2e:	f7ee fb9d 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34193b32:	4b83      	ldr	r3, [pc, #524]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193b34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34193b38:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193b3c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193b40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34193b46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193b4c:	3b01      	subs	r3, #1
34193b4e:	041b      	lsls	r3, r3, #16
34193b50:	4313      	orrs	r3, r2
34193b52:	4a7b      	ldr	r2, [pc, #492]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193b54:	430b      	orrs	r3, r1
34193b56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34193b5a:	f7fb f8ed 	bl	3418ed38 <LL_RCC_IC9_Enable>
34193b5e:	e008      	b.n	34193b72 <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34193b60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b64:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34193b68:	4b76      	ldr	r3, [pc, #472]	@ (34193d44 <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
34193b6a:	429a      	cmp	r2, r3
34193b6c:	d101      	bne.n	34193b72 <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
34193b6e:	f7fb fba3 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
34193b72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b76:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
34193b7a:	4618      	mov	r0, r3
34193b7c:	f7fa fb34 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34193b80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193b84:	e9d3 2300 	ldrd	r2, r3, [r3]
34193b88:	2100      	movs	r1, #0
34193b8a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34193b8e:	f003 0308 	and.w	r3, r3, #8
34193b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
34193b96:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
34193b9a:	4603      	mov	r3, r0
34193b9c:	460a      	mov	r2, r1
34193b9e:	4313      	orrs	r3, r2
34193ba0:	f000 80f0 	beq.w	34193d84 <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34193ba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ba8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193bac:	4b66      	ldr	r3, [pc, #408]	@ (34193d48 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
34193bae:	429a      	cmp	r2, r3
34193bb0:	d02e      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193bb6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193bba:	4b64      	ldr	r3, [pc, #400]	@ (34193d4c <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
34193bbc:	429a      	cmp	r2, r3
34193bbe:	d027      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193bc4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193bc8:	4b61      	ldr	r3, [pc, #388]	@ (34193d50 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
34193bca:	429a      	cmp	r2, r3
34193bcc:	d020      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193bd2:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193bd6:	4b5f      	ldr	r3, [pc, #380]	@ (34193d54 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
34193bd8:	429a      	cmp	r2, r3
34193bda:	d019      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193be0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193be4:	4b5c      	ldr	r3, [pc, #368]	@ (34193d58 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
34193be6:	429a      	cmp	r2, r3
34193be8:	d012      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193bee:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193bf2:	4b5a      	ldr	r3, [pc, #360]	@ (34193d5c <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
34193bf4:	429a      	cmp	r2, r3
34193bf6:	d00b      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193bf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193bfc:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193c00:	4b57      	ldr	r3, [pc, #348]	@ (34193d60 <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
34193c02:	429a      	cmp	r2, r3
34193c04:	d004      	beq.n	34193c10 <HAL_RCCEx_PeriphCLKConfig+0x4914>
34193c06:	f240 6166 	movw	r1, #1638	@ 0x666
34193c0a:	484c      	ldr	r0, [pc, #304]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193c0c:	f7ee fb2e 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34193c10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c14:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193c18:	4b4d      	ldr	r3, [pc, #308]	@ (34193d50 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
34193c1a:	429a      	cmp	r2, r3
34193c1c:	d142      	bne.n	34193ca4 <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34193c1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193c24:	2b00      	cmp	r3, #0
34193c26:	d016      	beq.n	34193c56 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34193c28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193c32:	d010      	beq.n	34193c56 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34193c34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193c3e:	d00a      	beq.n	34193c56 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34193c40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34193c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193c4a:	d004      	beq.n	34193c56 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34193c4c:	f240 616b 	movw	r1, #1643	@ 0x66b
34193c50:	483a      	ldr	r0, [pc, #232]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193c52:	f7ee fb0b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34193c56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193c5c:	2b00      	cmp	r3, #0
34193c5e:	d005      	beq.n	34193c6c <HAL_RCCEx_PeriphCLKConfig+0x4970>
34193c60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193c6a:	d904      	bls.n	34193c76 <HAL_RCCEx_PeriphCLKConfig+0x497a>
34193c6c:	f240 616c 	movw	r1, #1644	@ 0x66c
34193c70:	4832      	ldr	r0, [pc, #200]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193c72:	f7ee fafb 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34193c76:	4b32      	ldr	r3, [pc, #200]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34193c7c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193c80:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193c84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34193c8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34193c90:	3b01      	subs	r3, #1
34193c92:	041b      	lsls	r3, r3, #16
34193c94:	4313      	orrs	r3, r2
34193c96:	4a2a      	ldr	r2, [pc, #168]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193c98:	430b      	orrs	r3, r1
34193c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34193c9e:	f7fb f80b 	bl	3418ecb8 <LL_RCC_IC8_Enable>
34193ca2:	e068      	b.n	34193d76 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34193ca4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ca8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193cac:	4b29      	ldr	r3, [pc, #164]	@ (34193d54 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
34193cae:	429a      	cmp	r2, r3
34193cb0:	d158      	bne.n	34193d64 <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34193cb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193cb8:	2b00      	cmp	r3, #0
34193cba:	d016      	beq.n	34193cea <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34193cbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193cc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193cc6:	d010      	beq.n	34193cea <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34193cc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193cd2:	d00a      	beq.n	34193cea <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34193cd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193cda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193cde:	d004      	beq.n	34193cea <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34193ce0:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34193ce4:	4815      	ldr	r0, [pc, #84]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193ce6:	f7ee fac1 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34193cea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193cf0:	2b00      	cmp	r3, #0
34193cf2:	d005      	beq.n	34193d00 <HAL_RCCEx_PeriphCLKConfig+0x4a04>
34193cf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193cfe:	d904      	bls.n	34193d0a <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
34193d00:	f240 6179 	movw	r1, #1657	@ 0x679
34193d04:	480d      	ldr	r0, [pc, #52]	@ (34193d3c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34193d06:	f7ee fab1 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34193d0a:	4b0d      	ldr	r3, [pc, #52]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34193d10:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193d14:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193d18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34193d1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193d24:	3b01      	subs	r3, #1
34193d26:	041b      	lsls	r3, r3, #16
34193d28:	4313      	orrs	r3, r2
34193d2a:	4a05      	ldr	r2, [pc, #20]	@ (34193d40 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34193d2c:	430b      	orrs	r3, r1
34193d2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34193d32:	f7fb f801 	bl	3418ed38 <LL_RCC_IC9_Enable>
34193d36:	e01e      	b.n	34193d76 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
34193d38:	07030820 	.word	0x07030820
34193d3c:	341a5394 	.word	0x341a5394
34193d40:	56028000 	.word	0x56028000
34193d44:	07010820 	.word	0x07010820
34193d48:	07000c20 	.word	0x07000c20
34193d4c:	07010c20 	.word	0x07010c20
34193d50:	07020c20 	.word	0x07020c20
34193d54:	07030c20 	.word	0x07030c20
34193d58:	07040c20 	.word	0x07040c20
34193d5c:	07050c20 	.word	0x07050c20
34193d60:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34193d64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193d68:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34193d6c:	4b73      	ldr	r3, [pc, #460]	@ (34193f3c <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
34193d6e:	429a      	cmp	r2, r3
34193d70:	d101      	bne.n	34193d76 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
34193d72:	f7fb faa1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
34193d76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193d7a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
34193d7e:	4618      	mov	r0, r3
34193d80:	f7fa fa32 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34193d84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193d88:	e9d3 2300 	ldrd	r2, r3, [r3]
34193d8c:	2100      	movs	r1, #0
34193d8e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
34193d92:	f003 0310 	and.w	r3, r3, #16
34193d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34193d9a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
34193d9e:	4603      	mov	r3, r0
34193da0:	460a      	mov	r2, r1
34193da2:	4313      	orrs	r3, r2
34193da4:	f000 80ee 	beq.w	34193f84 <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34193da8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193dac:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193db0:	4b63      	ldr	r3, [pc, #396]	@ (34193f40 <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
34193db2:	429a      	cmp	r2, r3
34193db4:	d02e      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193db6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193dba:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193dbe:	4b61      	ldr	r3, [pc, #388]	@ (34193f44 <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
34193dc0:	429a      	cmp	r2, r3
34193dc2:	d027      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193dc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193dc8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193dcc:	4b5e      	ldr	r3, [pc, #376]	@ (34193f48 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
34193dce:	429a      	cmp	r2, r3
34193dd0:	d020      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193dd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193dd6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193dda:	4b5c      	ldr	r3, [pc, #368]	@ (34193f4c <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
34193ddc:	429a      	cmp	r2, r3
34193dde:	d019      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193de0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193de4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193de8:	4b59      	ldr	r3, [pc, #356]	@ (34193f50 <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
34193dea:	429a      	cmp	r2, r3
34193dec:	d012      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193dee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193df2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193df6:	4b57      	ldr	r3, [pc, #348]	@ (34193f54 <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
34193df8:	429a      	cmp	r2, r3
34193dfa:	d00b      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193dfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e00:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193e04:	4b54      	ldr	r3, [pc, #336]	@ (34193f58 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
34193e06:	429a      	cmp	r2, r3
34193e08:	d004      	beq.n	34193e14 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34193e0a:	f240 6193 	movw	r1, #1683	@ 0x693
34193e0e:	4853      	ldr	r0, [pc, #332]	@ (34193f5c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34193e10:	f7ee fa2c 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34193e14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e18:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193e1c:	4b4a      	ldr	r3, [pc, #296]	@ (34193f48 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
34193e1e:	429a      	cmp	r2, r3
34193e20:	d142      	bne.n	34193ea8 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34193e22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193e28:	2b00      	cmp	r3, #0
34193e2a:	d016      	beq.n	34193e5a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34193e2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193e36:	d010      	beq.n	34193e5a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34193e38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193e42:	d00a      	beq.n	34193e5a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34193e44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34193e4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193e4e:	d004      	beq.n	34193e5a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34193e50:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34193e54:	4841      	ldr	r0, [pc, #260]	@ (34193f5c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34193e56:	f7ee fa09 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34193e5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193e60:	2b00      	cmp	r3, #0
34193e62:	d005      	beq.n	34193e70 <HAL_RCCEx_PeriphCLKConfig+0x4b74>
34193e64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193e6e:	d904      	bls.n	34193e7a <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
34193e70:	f240 6199 	movw	r1, #1689	@ 0x699
34193e74:	4839      	ldr	r0, [pc, #228]	@ (34193f5c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34193e76:	f7ee f9f9 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34193e7a:	4b39      	ldr	r3, [pc, #228]	@ (34193f60 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
34193e7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34193e80:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193e84:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193e88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34193e8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34193e94:	3b01      	subs	r3, #1
34193e96:	041b      	lsls	r3, r3, #16
34193e98:	4313      	orrs	r3, r2
34193e9a:	4a31      	ldr	r2, [pc, #196]	@ (34193f60 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
34193e9c:	430b      	orrs	r3, r1
34193e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34193ea2:	f7fa ff49 	bl	3418ed38 <LL_RCC_IC9_Enable>
34193ea6:	e066      	b.n	34193f76 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34193ea8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193eac:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193eb0:	4b26      	ldr	r3, [pc, #152]	@ (34193f4c <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
34193eb2:	429a      	cmp	r2, r3
34193eb4:	d156      	bne.n	34193f64 <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34193eb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34193ebc:	2b00      	cmp	r3, #0
34193ebe:	d016      	beq.n	34193eee <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34193ec0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34193ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34193eca:	d010      	beq.n	34193eee <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34193ecc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34193ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34193ed6:	d00a      	beq.n	34193eee <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34193ed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34193ede:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34193ee2:	d004      	beq.n	34193eee <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34193ee4:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34193ee8:	481c      	ldr	r0, [pc, #112]	@ (34193f5c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34193eea:	f7ee f9bf 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34193eee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34193ef4:	2b00      	cmp	r3, #0
34193ef6:	d005      	beq.n	34193f04 <HAL_RCCEx_PeriphCLKConfig+0x4c08>
34193ef8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34193efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34193f02:	d904      	bls.n	34193f0e <HAL_RCCEx_PeriphCLKConfig+0x4c12>
34193f04:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34193f08:	4814      	ldr	r0, [pc, #80]	@ (34193f5c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34193f0a:	f7ee f9af 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34193f0e:	4b14      	ldr	r3, [pc, #80]	@ (34193f60 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
34193f10:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34193f14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34193f18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34193f1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193f20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34193f22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34193f28:	3b01      	subs	r3, #1
34193f2a:	041b      	lsls	r3, r3, #16
34193f2c:	4313      	orrs	r3, r2
34193f2e:	4a0c      	ldr	r2, [pc, #48]	@ (34193f60 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
34193f30:	430b      	orrs	r3, r1
34193f32:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34193f36:	f7fa ffff 	bl	3418ef38 <LL_RCC_IC14_Enable>
34193f3a:	e01c      	b.n	34193f76 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
34193f3c:	07010c20 	.word	0x07010c20
34193f40:	07001020 	.word	0x07001020
34193f44:	07011020 	.word	0x07011020
34193f48:	07021020 	.word	0x07021020
34193f4c:	07031020 	.word	0x07031020
34193f50:	07041020 	.word	0x07041020
34193f54:	07051020 	.word	0x07051020
34193f58:	07061020 	.word	0x07061020
34193f5c:	341a5394 	.word	0x341a5394
34193f60:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34193f64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193f68:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34193f6c:	4b73      	ldr	r3, [pc, #460]	@ (3419413c <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
34193f6e:	429a      	cmp	r2, r3
34193f70:	d101      	bne.n	34193f76 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
34193f72:	f7fb f9a1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34193f76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34193f7e:	4618      	mov	r0, r3
34193f80:	f7fa f932 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34193f84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193f88:	e9d3 2300 	ldrd	r2, r3, [r3]
34193f8c:	2100      	movs	r1, #0
34193f8e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34193f92:	f003 0320 	and.w	r3, r3, #32
34193f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34193f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34193f9e:	4603      	mov	r3, r0
34193fa0:	460a      	mov	r2, r1
34193fa2:	4313      	orrs	r3, r2
34193fa4:	f000 80ee 	beq.w	34194184 <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34193fa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193fac:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193fb0:	4b63      	ldr	r3, [pc, #396]	@ (34194140 <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
34193fb2:	429a      	cmp	r2, r3
34193fb4:	d02e      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193fb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193fba:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193fbe:	4b61      	ldr	r3, [pc, #388]	@ (34194144 <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
34193fc0:	429a      	cmp	r2, r3
34193fc2:	d027      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193fc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193fc8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193fcc:	4b5e      	ldr	r3, [pc, #376]	@ (34194148 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
34193fce:	429a      	cmp	r2, r3
34193fd0:	d020      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193fd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193fd6:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193fda:	4b5c      	ldr	r3, [pc, #368]	@ (3419414c <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
34193fdc:	429a      	cmp	r2, r3
34193fde:	d019      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193fe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193fe4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193fe8:	4b59      	ldr	r3, [pc, #356]	@ (34194150 <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
34193fea:	429a      	cmp	r2, r3
34193fec:	d012      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193fee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34193ff2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34193ff6:	4b57      	ldr	r3, [pc, #348]	@ (34194154 <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
34193ff8:	429a      	cmp	r2, r3
34193ffa:	d00b      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34193ffc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194000:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34194004:	4b54      	ldr	r3, [pc, #336]	@ (34194158 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
34194006:	429a      	cmp	r2, r3
34194008:	d004      	beq.n	34194014 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3419400a:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3419400e:	4853      	ldr	r0, [pc, #332]	@ (3419415c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34194010:	f7ee f92c 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34194014:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194018:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3419401c:	4b4a      	ldr	r3, [pc, #296]	@ (34194148 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3419401e:	429a      	cmp	r2, r3
34194020:	d142      	bne.n	341940a8 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194022:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194028:	2b00      	cmp	r3, #0
3419402a:	d016      	beq.n	3419405a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3419402c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194036:	d010      	beq.n	3419405a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34194038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419403c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419403e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194042:	d00a      	beq.n	3419405a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34194044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419404a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419404e:	d004      	beq.n	3419405a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34194050:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34194054:	4841      	ldr	r0, [pc, #260]	@ (3419415c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34194056:	f7ee f909 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3419405a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419405e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194060:	2b00      	cmp	r3, #0
34194062:	d005      	beq.n	34194070 <HAL_RCCEx_PeriphCLKConfig+0x4d74>
34194064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419406a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419406e:	d904      	bls.n	3419407a <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
34194070:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34194074:	4839      	ldr	r0, [pc, #228]	@ (3419415c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34194076:	f7ee f8f9 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419407a:	4b39      	ldr	r3, [pc, #228]	@ (34194160 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3419407c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194080:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194084:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419408c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419408e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194094:	3b01      	subs	r3, #1
34194096:	041b      	lsls	r3, r3, #16
34194098:	4313      	orrs	r3, r2
3419409a:	4a31      	ldr	r2, [pc, #196]	@ (34194160 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3419409c:	430b      	orrs	r3, r1
3419409e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341940a2:	f7fa fe49 	bl	3418ed38 <LL_RCC_IC9_Enable>
341940a6:	e066      	b.n	34194176 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
341940a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940ac:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341940b0:	4b26      	ldr	r3, [pc, #152]	@ (3419414c <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
341940b2:	429a      	cmp	r2, r3
341940b4:	d156      	bne.n	34194164 <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
341940b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341940bc:	2b00      	cmp	r3, #0
341940be:	d016      	beq.n	341940ee <HAL_RCCEx_PeriphCLKConfig+0x4df2>
341940c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341940c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341940ca:	d010      	beq.n	341940ee <HAL_RCCEx_PeriphCLKConfig+0x4df2>
341940cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341940d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341940d6:	d00a      	beq.n	341940ee <HAL_RCCEx_PeriphCLKConfig+0x4df2>
341940d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341940de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341940e2:	d004      	beq.n	341940ee <HAL_RCCEx_PeriphCLKConfig+0x4df2>
341940e4:	f240 61d2 	movw	r1, #1746	@ 0x6d2
341940e8:	481c      	ldr	r0, [pc, #112]	@ (3419415c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
341940ea:	f7ee f8bf 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341940ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341940f4:	2b00      	cmp	r3, #0
341940f6:	d005      	beq.n	34194104 <HAL_RCCEx_PeriphCLKConfig+0x4e08>
341940f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341940fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341940fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194102:	d904      	bls.n	3419410e <HAL_RCCEx_PeriphCLKConfig+0x4e12>
34194104:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34194108:	4814      	ldr	r0, [pc, #80]	@ (3419415c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3419410a:	f7ee f8af 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3419410e:	4b14      	ldr	r3, [pc, #80]	@ (34194160 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34194110:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194114:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194118:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419411c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194120:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194122:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194128:	3b01      	subs	r3, #1
3419412a:	041b      	lsls	r3, r3, #16
3419412c:	4313      	orrs	r3, r2
3419412e:	4a0c      	ldr	r2, [pc, #48]	@ (34194160 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34194130:	430b      	orrs	r3, r1
34194132:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34194136:	f7fa feff 	bl	3418ef38 <LL_RCC_IC14_Enable>
3419413a:	e01c      	b.n	34194176 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
3419413c:	07011020 	.word	0x07011020
34194140:	07001420 	.word	0x07001420
34194144:	07011420 	.word	0x07011420
34194148:	07021420 	.word	0x07021420
3419414c:	07031420 	.word	0x07031420
34194150:	07041420 	.word	0x07041420
34194154:	07051420 	.word	0x07051420
34194158:	07061420 	.word	0x07061420
3419415c:	341a5394 	.word	0x341a5394
34194160:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34194164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194168:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3419416c:	4b72      	ldr	r3, [pc, #456]	@ (34194338 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
3419416e:	429a      	cmp	r2, r3
34194170:	d101      	bne.n	34194176 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
34194172:	f7fb f8a1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34194176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419417a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3419417e:	4618      	mov	r0, r3
34194180:	f7fa f832 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34194184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194188:	e9d3 2300 	ldrd	r2, r3, [r3]
3419418c:	2100      	movs	r1, #0
3419418e:	67b9      	str	r1, [r7, #120]	@ 0x78
34194190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34194194:	67fb      	str	r3, [r7, #124]	@ 0x7c
34194196:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3419419a:	4603      	mov	r3, r0
3419419c:	460a      	mov	r2, r1
3419419e:	4313      	orrs	r3, r2
341941a0:	f000 80ee 	beq.w	34194380 <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
341941a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941a8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941ac:	4b63      	ldr	r3, [pc, #396]	@ (3419433c <HAL_RCCEx_PeriphCLKConfig+0x5040>)
341941ae:	429a      	cmp	r2, r3
341941b0:	d02e      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941b6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941ba:	4b61      	ldr	r3, [pc, #388]	@ (34194340 <HAL_RCCEx_PeriphCLKConfig+0x5044>)
341941bc:	429a      	cmp	r2, r3
341941be:	d027      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941c4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941c8:	4b5e      	ldr	r3, [pc, #376]	@ (34194344 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
341941ca:	429a      	cmp	r2, r3
341941cc:	d020      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941d2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941d6:	4b5c      	ldr	r3, [pc, #368]	@ (34194348 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
341941d8:	429a      	cmp	r2, r3
341941da:	d019      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941e0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941e4:	4b59      	ldr	r3, [pc, #356]	@ (3419434c <HAL_RCCEx_PeriphCLKConfig+0x5050>)
341941e6:	429a      	cmp	r2, r3
341941e8:	d012      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941ee:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341941f2:	4b57      	ldr	r3, [pc, #348]	@ (34194350 <HAL_RCCEx_PeriphCLKConfig+0x5054>)
341941f4:	429a      	cmp	r2, r3
341941f6:	d00b      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
341941f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341941fc:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34194200:	4b54      	ldr	r3, [pc, #336]	@ (34194354 <HAL_RCCEx_PeriphCLKConfig+0x5058>)
34194202:	429a      	cmp	r2, r3
34194204:	d004      	beq.n	34194210 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34194206:	f240 61ed 	movw	r1, #1773	@ 0x6ed
3419420a:	4853      	ldr	r0, [pc, #332]	@ (34194358 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3419420c:	f7ee f82e 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34194210:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194214:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34194218:	4b4a      	ldr	r3, [pc, #296]	@ (34194344 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3419421a:	429a      	cmp	r2, r3
3419421c:	d142      	bne.n	341942a4 <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3419421e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34194224:	2b00      	cmp	r3, #0
34194226:	d016      	beq.n	34194256 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34194228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419422e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194232:	d010      	beq.n	34194256 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34194234:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419423a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419423e:	d00a      	beq.n	34194256 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34194240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34194246:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419424a:	d004      	beq.n	34194256 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3419424c:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34194250:	4841      	ldr	r0, [pc, #260]	@ (34194358 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34194252:	f7ee f80b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34194256:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419425a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419425c:	2b00      	cmp	r3, #0
3419425e:	d005      	beq.n	3419426c <HAL_RCCEx_PeriphCLKConfig+0x4f70>
34194260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34194266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419426a:	d904      	bls.n	34194276 <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
3419426c:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34194270:	4839      	ldr	r0, [pc, #228]	@ (34194358 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34194272:	f7ed fffb 	bl	3418226c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34194276:	4b39      	ldr	r3, [pc, #228]	@ (3419435c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34194278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3419427c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194280:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194284:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3419428a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34194290:	3b01      	subs	r3, #1
34194292:	041b      	lsls	r3, r3, #16
34194294:	4313      	orrs	r3, r2
34194296:	4a31      	ldr	r2, [pc, #196]	@ (3419435c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34194298:	430b      	orrs	r3, r1
3419429a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3419429e:	f7fa fd0b 	bl	3418ecb8 <LL_RCC_IC8_Enable>
341942a2:	e066      	b.n	34194372 <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
341942a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942a8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341942ac:	4b26      	ldr	r3, [pc, #152]	@ (34194348 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
341942ae:	429a      	cmp	r2, r3
341942b0:	d156      	bne.n	34194360 <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341942b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341942b8:	2b00      	cmp	r3, #0
341942ba:	d016      	beq.n	341942ea <HAL_RCCEx_PeriphCLKConfig+0x4fee>
341942bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341942c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341942c6:	d010      	beq.n	341942ea <HAL_RCCEx_PeriphCLKConfig+0x4fee>
341942c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341942ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341942d2:	d00a      	beq.n	341942ea <HAL_RCCEx_PeriphCLKConfig+0x4fee>
341942d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341942da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341942de:	d004      	beq.n	341942ea <HAL_RCCEx_PeriphCLKConfig+0x4fee>
341942e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
341942e4:	481c      	ldr	r0, [pc, #112]	@ (34194358 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
341942e6:	f7ed ffc1 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
341942ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341942f0:	2b00      	cmp	r3, #0
341942f2:	d005      	beq.n	34194300 <HAL_RCCEx_PeriphCLKConfig+0x5004>
341942f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341942f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341942fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341942fe:	d904      	bls.n	3419430a <HAL_RCCEx_PeriphCLKConfig+0x500e>
34194300:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34194304:	4814      	ldr	r0, [pc, #80]	@ (34194358 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34194306:	f7ed ffb1 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419430a:	4b14      	ldr	r3, [pc, #80]	@ (3419435c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3419430c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194310:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194314:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419431c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419431e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194324:	3b01      	subs	r3, #1
34194326:	041b      	lsls	r3, r3, #16
34194328:	4313      	orrs	r3, r2
3419432a:	4a0c      	ldr	r2, [pc, #48]	@ (3419435c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3419432c:	430b      	orrs	r3, r1
3419432e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194332:	f7fa fd01 	bl	3418ed38 <LL_RCC_IC9_Enable>
34194336:	e01c      	b.n	34194372 <HAL_RCCEx_PeriphCLKConfig+0x5076>
34194338:	07011420 	.word	0x07011420
3419433c:	07001820 	.word	0x07001820
34194340:	07011820 	.word	0x07011820
34194344:	07021820 	.word	0x07021820
34194348:	07031820 	.word	0x07031820
3419434c:	07041820 	.word	0x07041820
34194350:	07051820 	.word	0x07051820
34194354:	07061820 	.word	0x07061820
34194358:	341a5394 	.word	0x341a5394
3419435c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34194360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194364:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34194368:	4b72      	ldr	r3, [pc, #456]	@ (34194534 <HAL_RCCEx_PeriphCLKConfig+0x5238>)
3419436a:	429a      	cmp	r2, r3
3419436c:	d101      	bne.n	34194372 <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
3419436e:	f7fa ffa3 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34194372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194376:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3419437a:	4618      	mov	r0, r3
3419437c:	f7f9 ff34 	bl	3418e1e8 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34194380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194384:	e9d3 2300 	ldrd	r2, r3, [r3]
34194388:	2100      	movs	r1, #0
3419438a:	6739      	str	r1, [r7, #112]	@ 0x70
3419438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34194390:	677b      	str	r3, [r7, #116]	@ 0x74
34194392:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34194396:	4603      	mov	r3, r0
34194398:	460a      	mov	r2, r1
3419439a:	4313      	orrs	r3, r2
3419439c:	f000 80ee 	beq.w	3419457c <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
341943a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943a4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943a8:	4b63      	ldr	r3, [pc, #396]	@ (34194538 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
341943aa:	429a      	cmp	r2, r3
341943ac:	d02e      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943b6:	4b61      	ldr	r3, [pc, #388]	@ (3419453c <HAL_RCCEx_PeriphCLKConfig+0x5240>)
341943b8:	429a      	cmp	r2, r3
341943ba:	d027      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943c0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943c4:	4b5e      	ldr	r3, [pc, #376]	@ (34194540 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
341943c6:	429a      	cmp	r2, r3
341943c8:	d020      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943d2:	4b5c      	ldr	r3, [pc, #368]	@ (34194544 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
341943d4:	429a      	cmp	r2, r3
341943d6:	d019      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943dc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943e0:	4b59      	ldr	r3, [pc, #356]	@ (34194548 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
341943e2:	429a      	cmp	r2, r3
341943e4:	d012      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943ee:	4b57      	ldr	r3, [pc, #348]	@ (3419454c <HAL_RCCEx_PeriphCLKConfig+0x5250>)
341943f0:	429a      	cmp	r2, r3
341943f2:	d00b      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
341943f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341943f8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341943fc:	4b54      	ldr	r3, [pc, #336]	@ (34194550 <HAL_RCCEx_PeriphCLKConfig+0x5254>)
341943fe:	429a      	cmp	r2, r3
34194400:	d004      	beq.n	3419440c <HAL_RCCEx_PeriphCLKConfig+0x5110>
34194402:	f240 711a 	movw	r1, #1818	@ 0x71a
34194406:	4853      	ldr	r0, [pc, #332]	@ (34194554 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34194408:	f7ed ff30 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3419440c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194410:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34194414:	4b4a      	ldr	r3, [pc, #296]	@ (34194540 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
34194416:	429a      	cmp	r2, r3
34194418:	d142      	bne.n	341944a0 <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3419441a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419441e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194420:	2b00      	cmp	r3, #0
34194422:	d016      	beq.n	34194452 <HAL_RCCEx_PeriphCLKConfig+0x5156>
34194424:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419442a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419442e:	d010      	beq.n	34194452 <HAL_RCCEx_PeriphCLKConfig+0x5156>
34194430:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419443a:	d00a      	beq.n	34194452 <HAL_RCCEx_PeriphCLKConfig+0x5156>
3419443c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194446:	d004      	beq.n	34194452 <HAL_RCCEx_PeriphCLKConfig+0x5156>
34194448:	f240 711f 	movw	r1, #1823	@ 0x71f
3419444c:	4841      	ldr	r0, [pc, #260]	@ (34194554 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3419444e:	f7ed ff0d 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34194452:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194458:	2b00      	cmp	r3, #0
3419445a:	d005      	beq.n	34194468 <HAL_RCCEx_PeriphCLKConfig+0x516c>
3419445c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194466:	d904      	bls.n	34194472 <HAL_RCCEx_PeriphCLKConfig+0x5176>
34194468:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3419446c:	4839      	ldr	r0, [pc, #228]	@ (34194554 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3419446e:	f7ed fefd 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34194472:	4b39      	ldr	r3, [pc, #228]	@ (34194558 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34194474:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194478:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419447c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34194486:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419448a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419448c:	3b01      	subs	r3, #1
3419448e:	041b      	lsls	r3, r3, #16
34194490:	4313      	orrs	r3, r2
34194492:	4a31      	ldr	r2, [pc, #196]	@ (34194558 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34194494:	430b      	orrs	r3, r1
34194496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3419449a:	f7fa fc4d 	bl	3418ed38 <LL_RCC_IC9_Enable>
3419449e:	e066      	b.n	3419456e <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
341944a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944a4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341944a8:	4b26      	ldr	r3, [pc, #152]	@ (34194544 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
341944aa:	429a      	cmp	r2, r3
341944ac:	d156      	bne.n	3419455c <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
341944ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341944b4:	2b00      	cmp	r3, #0
341944b6:	d016      	beq.n	341944e6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
341944b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341944be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341944c2:	d010      	beq.n	341944e6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
341944c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341944ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341944ce:	d00a      	beq.n	341944e6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
341944d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341944d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341944da:	d004      	beq.n	341944e6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
341944dc:	f240 712c 	movw	r1, #1836	@ 0x72c
341944e0:	481c      	ldr	r0, [pc, #112]	@ (34194554 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
341944e2:	f7ed fec3 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341944e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341944ec:	2b00      	cmp	r3, #0
341944ee:	d005      	beq.n	341944fc <HAL_RCCEx_PeriphCLKConfig+0x5200>
341944f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341944f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341944f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341944fa:	d904      	bls.n	34194506 <HAL_RCCEx_PeriphCLKConfig+0x520a>
341944fc:	f240 712d 	movw	r1, #1837	@ 0x72d
34194500:	4814      	ldr	r0, [pc, #80]	@ (34194554 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34194502:	f7ed feb3 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34194506:	4b14      	ldr	r3, [pc, #80]	@ (34194558 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34194508:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3419450c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194510:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194514:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194518:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3419451a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194520:	3b01      	subs	r3, #1
34194522:	041b      	lsls	r3, r3, #16
34194524:	4313      	orrs	r3, r2
34194526:	4a0c      	ldr	r2, [pc, #48]	@ (34194558 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34194528:	430b      	orrs	r3, r1
3419452a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3419452e:	f7fa fd03 	bl	3418ef38 <LL_RCC_IC14_Enable>
34194532:	e01c      	b.n	3419456e <HAL_RCCEx_PeriphCLKConfig+0x5272>
34194534:	07011820 	.word	0x07011820
34194538:	07000030 	.word	0x07000030
3419453c:	07010030 	.word	0x07010030
34194540:	07020030 	.word	0x07020030
34194544:	07030030 	.word	0x07030030
34194548:	07040030 	.word	0x07040030
3419454c:	07050030 	.word	0x07050030
34194550:	07060030 	.word	0x07060030
34194554:	341a5394 	.word	0x341a5394
34194558:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3419455c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194560:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34194564:	4b72      	ldr	r3, [pc, #456]	@ (34194730 <HAL_RCCEx_PeriphCLKConfig+0x5434>)
34194566:	429a      	cmp	r2, r3
34194568:	d101      	bne.n	3419456e <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
3419456a:	f7fa fea5 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3419456e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194572:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34194576:	4618      	mov	r0, r3
34194578:	f7f9 fe41 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3419457c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194580:	e9d3 2300 	ldrd	r2, r3, [r3]
34194584:	2100      	movs	r1, #0
34194586:	66b9      	str	r1, [r7, #104]	@ 0x68
34194588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3419458c:	66fb      	str	r3, [r7, #108]	@ 0x6c
3419458e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34194592:	4603      	mov	r3, r0
34194594:	460a      	mov	r2, r1
34194596:	4313      	orrs	r3, r2
34194598:	f000 80ee 	beq.w	34194778 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3419459c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945a0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945a4:	4b63      	ldr	r3, [pc, #396]	@ (34194734 <HAL_RCCEx_PeriphCLKConfig+0x5438>)
341945a6:	429a      	cmp	r2, r3
341945a8:	d02e      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945ae:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945b2:	4b61      	ldr	r3, [pc, #388]	@ (34194738 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
341945b4:	429a      	cmp	r2, r3
341945b6:	d027      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945bc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945c0:	4b5e      	ldr	r3, [pc, #376]	@ (3419473c <HAL_RCCEx_PeriphCLKConfig+0x5440>)
341945c2:	429a      	cmp	r2, r3
341945c4:	d020      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945ca:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945ce:	4b5c      	ldr	r3, [pc, #368]	@ (34194740 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
341945d0:	429a      	cmp	r2, r3
341945d2:	d019      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945d8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945dc:	4b59      	ldr	r3, [pc, #356]	@ (34194744 <HAL_RCCEx_PeriphCLKConfig+0x5448>)
341945de:	429a      	cmp	r2, r3
341945e0:	d012      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945e6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945ea:	4b57      	ldr	r3, [pc, #348]	@ (34194748 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
341945ec:	429a      	cmp	r2, r3
341945ee:	d00b      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341945f4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341945f8:	4b54      	ldr	r3, [pc, #336]	@ (3419474c <HAL_RCCEx_PeriphCLKConfig+0x5450>)
341945fa:	429a      	cmp	r2, r3
341945fc:	d004      	beq.n	34194608 <HAL_RCCEx_PeriphCLKConfig+0x530c>
341945fe:	f240 7147 	movw	r1, #1863	@ 0x747
34194602:	4853      	ldr	r0, [pc, #332]	@ (34194750 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
34194604:	f7ed fe32 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34194608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419460c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34194610:	4b4a      	ldr	r3, [pc, #296]	@ (3419473c <HAL_RCCEx_PeriphCLKConfig+0x5440>)
34194612:	429a      	cmp	r2, r3
34194614:	d142      	bne.n	3419469c <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194616:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419461a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419461c:	2b00      	cmp	r3, #0
3419461e:	d016      	beq.n	3419464e <HAL_RCCEx_PeriphCLKConfig+0x5352>
34194620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419462a:	d010      	beq.n	3419464e <HAL_RCCEx_PeriphCLKConfig+0x5352>
3419462c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194636:	d00a      	beq.n	3419464e <HAL_RCCEx_PeriphCLKConfig+0x5352>
34194638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419463c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419463e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194642:	d004      	beq.n	3419464e <HAL_RCCEx_PeriphCLKConfig+0x5352>
34194644:	f240 714c 	movw	r1, #1868	@ 0x74c
34194648:	4841      	ldr	r0, [pc, #260]	@ (34194750 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3419464a:	f7ed fe0f 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3419464e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194654:	2b00      	cmp	r3, #0
34194656:	d005      	beq.n	34194664 <HAL_RCCEx_PeriphCLKConfig+0x5368>
34194658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419465e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194662:	d904      	bls.n	3419466e <HAL_RCCEx_PeriphCLKConfig+0x5372>
34194664:	f240 714d 	movw	r1, #1869	@ 0x74d
34194668:	4839      	ldr	r0, [pc, #228]	@ (34194750 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3419466a:	f7ed fdff 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419466e:	4b39      	ldr	r3, [pc, #228]	@ (34194754 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34194670:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194674:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194678:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419467c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194680:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34194682:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194688:	3b01      	subs	r3, #1
3419468a:	041b      	lsls	r3, r3, #16
3419468c:	4313      	orrs	r3, r2
3419468e:	4a31      	ldr	r2, [pc, #196]	@ (34194754 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34194690:	430b      	orrs	r3, r1
34194692:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194696:	f7fa fb4f 	bl	3418ed38 <LL_RCC_IC9_Enable>
3419469a:	e066      	b.n	3419476a <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3419469c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946a0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
341946a4:	4b26      	ldr	r3, [pc, #152]	@ (34194740 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
341946a6:	429a      	cmp	r2, r3
341946a8:	d156      	bne.n	34194758 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
341946aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341946b0:	2b00      	cmp	r3, #0
341946b2:	d016      	beq.n	341946e2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
341946b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341946ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341946be:	d010      	beq.n	341946e2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
341946c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341946c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341946ca:	d00a      	beq.n	341946e2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
341946cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341946d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341946d6:	d004      	beq.n	341946e2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
341946d8:	f240 7159 	movw	r1, #1881	@ 0x759
341946dc:	481c      	ldr	r0, [pc, #112]	@ (34194750 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
341946de:	f7ed fdc5 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341946e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341946e8:	2b00      	cmp	r3, #0
341946ea:	d005      	beq.n	341946f8 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
341946ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341946f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341946f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341946f6:	d904      	bls.n	34194702 <HAL_RCCEx_PeriphCLKConfig+0x5406>
341946f8:	f240 715a 	movw	r1, #1882	@ 0x75a
341946fc:	4814      	ldr	r0, [pc, #80]	@ (34194750 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
341946fe:	f7ed fdb5 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34194702:	4b14      	ldr	r3, [pc, #80]	@ (34194754 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34194704:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194708:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419470c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194714:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194716:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3419471c:	3b01      	subs	r3, #1
3419471e:	041b      	lsls	r3, r3, #16
34194720:	4313      	orrs	r3, r2
34194722:	4a0c      	ldr	r2, [pc, #48]	@ (34194754 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34194724:	430b      	orrs	r3, r1
34194726:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3419472a:	f7fa fc05 	bl	3418ef38 <LL_RCC_IC14_Enable>
3419472e:	e01c      	b.n	3419476a <HAL_RCCEx_PeriphCLKConfig+0x546e>
34194730:	07010030 	.word	0x07010030
34194734:	07000430 	.word	0x07000430
34194738:	07010430 	.word	0x07010430
3419473c:	07020430 	.word	0x07020430
34194740:	07030430 	.word	0x07030430
34194744:	07040430 	.word	0x07040430
34194748:	07050430 	.word	0x07050430
3419474c:	07060430 	.word	0x07060430
34194750:	341a5394 	.word	0x341a5394
34194754:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34194758:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419475c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34194760:	4b72      	ldr	r3, [pc, #456]	@ (3419492c <HAL_RCCEx_PeriphCLKConfig+0x5630>)
34194762:	429a      	cmp	r2, r3
34194764:	d101      	bne.n	3419476a <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
34194766:	f7fa fda7 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3419476a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419476e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34194772:	4618      	mov	r0, r3
34194774:	f7f9 fd43 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34194778:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419477c:	e9d3 2300 	ldrd	r2, r3, [r3]
34194780:	2100      	movs	r1, #0
34194782:	6639      	str	r1, [r7, #96]	@ 0x60
34194784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34194788:	667b      	str	r3, [r7, #100]	@ 0x64
3419478a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3419478e:	4603      	mov	r3, r0
34194790:	460a      	mov	r2, r1
34194792:	4313      	orrs	r3, r2
34194794:	f000 80ee 	beq.w	34194974 <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34194798:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419479c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947a0:	4b63      	ldr	r3, [pc, #396]	@ (34194930 <HAL_RCCEx_PeriphCLKConfig+0x5634>)
341947a2:	429a      	cmp	r2, r3
341947a4:	d02e      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947aa:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947ae:	4b61      	ldr	r3, [pc, #388]	@ (34194934 <HAL_RCCEx_PeriphCLKConfig+0x5638>)
341947b0:	429a      	cmp	r2, r3
341947b2:	d027      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947b8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947bc:	4b5e      	ldr	r3, [pc, #376]	@ (34194938 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
341947be:	429a      	cmp	r2, r3
341947c0:	d020      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947c6:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947ca:	4b5c      	ldr	r3, [pc, #368]	@ (3419493c <HAL_RCCEx_PeriphCLKConfig+0x5640>)
341947cc:	429a      	cmp	r2, r3
341947ce:	d019      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947d4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947d8:	4b59      	ldr	r3, [pc, #356]	@ (34194940 <HAL_RCCEx_PeriphCLKConfig+0x5644>)
341947da:	429a      	cmp	r2, r3
341947dc:	d012      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947e2:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947e6:	4b57      	ldr	r3, [pc, #348]	@ (34194944 <HAL_RCCEx_PeriphCLKConfig+0x5648>)
341947e8:	429a      	cmp	r2, r3
341947ea:	d00b      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341947f0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341947f4:	4b54      	ldr	r3, [pc, #336]	@ (34194948 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
341947f6:	429a      	cmp	r2, r3
341947f8:	d004      	beq.n	34194804 <HAL_RCCEx_PeriphCLKConfig+0x5508>
341947fa:	f240 7174 	movw	r1, #1908	@ 0x774
341947fe:	4853      	ldr	r0, [pc, #332]	@ (3419494c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34194800:	f7ed fd34 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34194804:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194808:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3419480c:	4b4a      	ldr	r3, [pc, #296]	@ (34194938 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3419480e:	429a      	cmp	r2, r3
34194810:	d142      	bne.n	34194898 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194812:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194818:	2b00      	cmp	r3, #0
3419481a:	d016      	beq.n	3419484a <HAL_RCCEx_PeriphCLKConfig+0x554e>
3419481c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194826:	d010      	beq.n	3419484a <HAL_RCCEx_PeriphCLKConfig+0x554e>
34194828:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419482c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419482e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194832:	d00a      	beq.n	3419484a <HAL_RCCEx_PeriphCLKConfig+0x554e>
34194834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419483a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419483e:	d004      	beq.n	3419484a <HAL_RCCEx_PeriphCLKConfig+0x554e>
34194840:	f240 7179 	movw	r1, #1913	@ 0x779
34194844:	4841      	ldr	r0, [pc, #260]	@ (3419494c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34194846:	f7ed fd11 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3419484a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419484e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194850:	2b00      	cmp	r3, #0
34194852:	d005      	beq.n	34194860 <HAL_RCCEx_PeriphCLKConfig+0x5564>
34194854:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419485a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419485e:	d904      	bls.n	3419486a <HAL_RCCEx_PeriphCLKConfig+0x556e>
34194860:	f240 717a 	movw	r1, #1914	@ 0x77a
34194864:	4839      	ldr	r0, [pc, #228]	@ (3419494c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34194866:	f7ed fd01 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419486a:	4b39      	ldr	r3, [pc, #228]	@ (34194950 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3419486c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194870:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194874:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194878:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419487c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419487e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194884:	3b01      	subs	r3, #1
34194886:	041b      	lsls	r3, r3, #16
34194888:	4313      	orrs	r3, r2
3419488a:	4a31      	ldr	r2, [pc, #196]	@ (34194950 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3419488c:	430b      	orrs	r3, r1
3419488e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194892:	f7fa fa51 	bl	3418ed38 <LL_RCC_IC9_Enable>
34194896:	e066      	b.n	34194966 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34194898:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419489c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341948a0:	4b26      	ldr	r3, [pc, #152]	@ (3419493c <HAL_RCCEx_PeriphCLKConfig+0x5640>)
341948a2:	429a      	cmp	r2, r3
341948a4:	d156      	bne.n	34194954 <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
341948a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341948ac:	2b00      	cmp	r3, #0
341948ae:	d016      	beq.n	341948de <HAL_RCCEx_PeriphCLKConfig+0x55e2>
341948b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341948b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341948ba:	d010      	beq.n	341948de <HAL_RCCEx_PeriphCLKConfig+0x55e2>
341948bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341948c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341948c6:	d00a      	beq.n	341948de <HAL_RCCEx_PeriphCLKConfig+0x55e2>
341948c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341948ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341948d2:	d004      	beq.n	341948de <HAL_RCCEx_PeriphCLKConfig+0x55e2>
341948d4:	f240 7186 	movw	r1, #1926	@ 0x786
341948d8:	481c      	ldr	r0, [pc, #112]	@ (3419494c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
341948da:	f7ed fcc7 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341948de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341948e4:	2b00      	cmp	r3, #0
341948e6:	d005      	beq.n	341948f4 <HAL_RCCEx_PeriphCLKConfig+0x55f8>
341948e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341948ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341948ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341948f2:	d904      	bls.n	341948fe <HAL_RCCEx_PeriphCLKConfig+0x5602>
341948f4:	f240 7187 	movw	r1, #1927	@ 0x787
341948f8:	4814      	ldr	r0, [pc, #80]	@ (3419494c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
341948fa:	f7ed fcb7 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341948fe:	4b14      	ldr	r3, [pc, #80]	@ (34194950 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
34194900:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194904:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194908:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3419490c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194910:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194912:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194918:	3b01      	subs	r3, #1
3419491a:	041b      	lsls	r3, r3, #16
3419491c:	4313      	orrs	r3, r2
3419491e:	4a0c      	ldr	r2, [pc, #48]	@ (34194950 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
34194920:	430b      	orrs	r3, r1
34194922:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34194926:	f7fa fb07 	bl	3418ef38 <LL_RCC_IC14_Enable>
3419492a:	e01c      	b.n	34194966 <HAL_RCCEx_PeriphCLKConfig+0x566a>
3419492c:	07010430 	.word	0x07010430
34194930:	07000830 	.word	0x07000830
34194934:	07010830 	.word	0x07010830
34194938:	07020830 	.word	0x07020830
3419493c:	07030830 	.word	0x07030830
34194940:	07040830 	.word	0x07040830
34194944:	07050830 	.word	0x07050830
34194948:	07060830 	.word	0x07060830
3419494c:	341a5394 	.word	0x341a5394
34194950:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34194954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194958:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3419495c:	4b72      	ldr	r3, [pc, #456]	@ (34194b28 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3419495e:	429a      	cmp	r2, r3
34194960:	d101      	bne.n	34194966 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
34194962:	f7fa fca9 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34194966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419496a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3419496e:	4618      	mov	r0, r3
34194970:	f7f9 fc45 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34194974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194978:	e9d3 2300 	ldrd	r2, r3, [r3]
3419497c:	2100      	movs	r1, #0
3419497e:	65b9      	str	r1, [r7, #88]	@ 0x58
34194980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34194984:	65fb      	str	r3, [r7, #92]	@ 0x5c
34194986:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3419498a:	4603      	mov	r3, r0
3419498c:	460a      	mov	r2, r1
3419498e:	4313      	orrs	r3, r2
34194990:	f000 80ee 	beq.w	34194b70 <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34194994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194998:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3419499c:	4b63      	ldr	r3, [pc, #396]	@ (34194b2c <HAL_RCCEx_PeriphCLKConfig+0x5830>)
3419499e:	429a      	cmp	r2, r3
341949a0:	d02e      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949a6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949aa:	4b61      	ldr	r3, [pc, #388]	@ (34194b30 <HAL_RCCEx_PeriphCLKConfig+0x5834>)
341949ac:	429a      	cmp	r2, r3
341949ae:	d027      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949b4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949b8:	4b5e      	ldr	r3, [pc, #376]	@ (34194b34 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
341949ba:	429a      	cmp	r2, r3
341949bc:	d020      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949c2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949c6:	4b5c      	ldr	r3, [pc, #368]	@ (34194b38 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
341949c8:	429a      	cmp	r2, r3
341949ca:	d019      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949d0:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949d4:	4b59      	ldr	r3, [pc, #356]	@ (34194b3c <HAL_RCCEx_PeriphCLKConfig+0x5840>)
341949d6:	429a      	cmp	r2, r3
341949d8:	d012      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949de:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949e2:	4b57      	ldr	r3, [pc, #348]	@ (34194b40 <HAL_RCCEx_PeriphCLKConfig+0x5844>)
341949e4:	429a      	cmp	r2, r3
341949e6:	d00b      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341949ec:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341949f0:	4b54      	ldr	r3, [pc, #336]	@ (34194b44 <HAL_RCCEx_PeriphCLKConfig+0x5848>)
341949f2:	429a      	cmp	r2, r3
341949f4:	d004      	beq.n	34194a00 <HAL_RCCEx_PeriphCLKConfig+0x5704>
341949f6:	f240 71a1 	movw	r1, #1953	@ 0x7a1
341949fa:	4853      	ldr	r0, [pc, #332]	@ (34194b48 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
341949fc:	f7ed fc36 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34194a00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a04:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34194a08:	4b4a      	ldr	r3, [pc, #296]	@ (34194b34 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
34194a0a:	429a      	cmp	r2, r3
34194a0c:	d142      	bne.n	34194a94 <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194a0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194a14:	2b00      	cmp	r3, #0
34194a16:	d016      	beq.n	34194a46 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34194a18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194a22:	d010      	beq.n	34194a46 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34194a24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194a2e:	d00a      	beq.n	34194a46 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34194a30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194a36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194a3a:	d004      	beq.n	34194a46 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34194a3c:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34194a40:	4841      	ldr	r0, [pc, #260]	@ (34194b48 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34194a42:	f7ed fc13 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34194a46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194a4c:	2b00      	cmp	r3, #0
34194a4e:	d005      	beq.n	34194a5c <HAL_RCCEx_PeriphCLKConfig+0x5760>
34194a50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194a5a:	d904      	bls.n	34194a66 <HAL_RCCEx_PeriphCLKConfig+0x576a>
34194a5c:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34194a60:	4839      	ldr	r0, [pc, #228]	@ (34194b48 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34194a62:	f7ed fc03 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34194a66:	4b39      	ldr	r3, [pc, #228]	@ (34194b4c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34194a68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194a6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194a70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194a74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34194a7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194a80:	3b01      	subs	r3, #1
34194a82:	041b      	lsls	r3, r3, #16
34194a84:	4313      	orrs	r3, r2
34194a86:	4a31      	ldr	r2, [pc, #196]	@ (34194b4c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34194a88:	430b      	orrs	r3, r1
34194a8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194a8e:	f7fa f953 	bl	3418ed38 <LL_RCC_IC9_Enable>
34194a92:	e066      	b.n	34194b62 <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34194a94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194a98:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34194a9c:	4b26      	ldr	r3, [pc, #152]	@ (34194b38 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
34194a9e:	429a      	cmp	r2, r3
34194aa0:	d156      	bne.n	34194b50 <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34194aa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194aa8:	2b00      	cmp	r3, #0
34194aaa:	d016      	beq.n	34194ada <HAL_RCCEx_PeriphCLKConfig+0x57de>
34194aac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194ab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194ab6:	d010      	beq.n	34194ada <HAL_RCCEx_PeriphCLKConfig+0x57de>
34194ab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194ac2:	d00a      	beq.n	34194ada <HAL_RCCEx_PeriphCLKConfig+0x57de>
34194ac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194aca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194ace:	d004      	beq.n	34194ada <HAL_RCCEx_PeriphCLKConfig+0x57de>
34194ad0:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34194ad4:	481c      	ldr	r0, [pc, #112]	@ (34194b48 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34194ad6:	f7ed fbc9 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34194ada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194ae0:	2b00      	cmp	r3, #0
34194ae2:	d005      	beq.n	34194af0 <HAL_RCCEx_PeriphCLKConfig+0x57f4>
34194ae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194aee:	d904      	bls.n	34194afa <HAL_RCCEx_PeriphCLKConfig+0x57fe>
34194af0:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34194af4:	4814      	ldr	r0, [pc, #80]	@ (34194b48 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34194af6:	f7ed fbb9 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34194afa:	4b14      	ldr	r3, [pc, #80]	@ (34194b4c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34194afc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194b00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194b04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194b08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194b0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194b14:	3b01      	subs	r3, #1
34194b16:	041b      	lsls	r3, r3, #16
34194b18:	4313      	orrs	r3, r2
34194b1a:	4a0c      	ldr	r2, [pc, #48]	@ (34194b4c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34194b1c:	430b      	orrs	r3, r1
34194b1e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34194b22:	f7fa fa09 	bl	3418ef38 <LL_RCC_IC14_Enable>
34194b26:	e01c      	b.n	34194b62 <HAL_RCCEx_PeriphCLKConfig+0x5866>
34194b28:	07010830 	.word	0x07010830
34194b2c:	07000c30 	.word	0x07000c30
34194b30:	07010c30 	.word	0x07010c30
34194b34:	07020c30 	.word	0x07020c30
34194b38:	07030c30 	.word	0x07030c30
34194b3c:	07040c30 	.word	0x07040c30
34194b40:	07050c30 	.word	0x07050c30
34194b44:	07060c30 	.word	0x07060c30
34194b48:	341a5394 	.word	0x341a5394
34194b4c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34194b50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b54:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34194b58:	4b72      	ldr	r3, [pc, #456]	@ (34194d24 <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
34194b5a:	429a      	cmp	r2, r3
34194b5c:	d101      	bne.n	34194b62 <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
34194b5e:	f7fa fbab 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34194b62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b66:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34194b6a:	4618      	mov	r0, r3
34194b6c:	f7f9 fb47 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34194b70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b74:	e9d3 2300 	ldrd	r2, r3, [r3]
34194b78:	2100      	movs	r1, #0
34194b7a:	6539      	str	r1, [r7, #80]	@ 0x50
34194b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34194b80:	657b      	str	r3, [r7, #84]	@ 0x54
34194b82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34194b86:	4603      	mov	r3, r0
34194b88:	460a      	mov	r2, r1
34194b8a:	4313      	orrs	r3, r2
34194b8c:	f000 80ee 	beq.w	34194d6c <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34194b90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194b94:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194b98:	4b63      	ldr	r3, [pc, #396]	@ (34194d28 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
34194b9a:	429a      	cmp	r2, r3
34194b9c:	d02e      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194b9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ba2:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194ba6:	4b61      	ldr	r3, [pc, #388]	@ (34194d2c <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
34194ba8:	429a      	cmp	r2, r3
34194baa:	d027      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194bac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194bb0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194bb4:	4b5e      	ldr	r3, [pc, #376]	@ (34194d30 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
34194bb6:	429a      	cmp	r2, r3
34194bb8:	d020      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194bba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194bbe:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194bc2:	4b5c      	ldr	r3, [pc, #368]	@ (34194d34 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
34194bc4:	429a      	cmp	r2, r3
34194bc6:	d019      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194bc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194bcc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194bd0:	4b59      	ldr	r3, [pc, #356]	@ (34194d38 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
34194bd2:	429a      	cmp	r2, r3
34194bd4:	d012      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194bd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194bda:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194bde:	4b57      	ldr	r3, [pc, #348]	@ (34194d3c <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
34194be0:	429a      	cmp	r2, r3
34194be2:	d00b      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194be4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194be8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194bec:	4b54      	ldr	r3, [pc, #336]	@ (34194d40 <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
34194bee:	429a      	cmp	r2, r3
34194bf0:	d004      	beq.n	34194bfc <HAL_RCCEx_PeriphCLKConfig+0x5900>
34194bf2:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34194bf6:	4853      	ldr	r0, [pc, #332]	@ (34194d44 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34194bf8:	f7ed fb38 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34194bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c00:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194c04:	4b4a      	ldr	r3, [pc, #296]	@ (34194d30 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
34194c06:	429a      	cmp	r2, r3
34194c08:	d142      	bne.n	34194c90 <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194c0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194c10:	2b00      	cmp	r3, #0
34194c12:	d016      	beq.n	34194c42 <HAL_RCCEx_PeriphCLKConfig+0x5946>
34194c14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194c1e:	d010      	beq.n	34194c42 <HAL_RCCEx_PeriphCLKConfig+0x5946>
34194c20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194c2a:	d00a      	beq.n	34194c42 <HAL_RCCEx_PeriphCLKConfig+0x5946>
34194c2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194c32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194c36:	d004      	beq.n	34194c42 <HAL_RCCEx_PeriphCLKConfig+0x5946>
34194c38:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34194c3c:	4841      	ldr	r0, [pc, #260]	@ (34194d44 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34194c3e:	f7ed fb15 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34194c42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194c48:	2b00      	cmp	r3, #0
34194c4a:	d005      	beq.n	34194c58 <HAL_RCCEx_PeriphCLKConfig+0x595c>
34194c4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194c56:	d904      	bls.n	34194c62 <HAL_RCCEx_PeriphCLKConfig+0x5966>
34194c58:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34194c5c:	4839      	ldr	r0, [pc, #228]	@ (34194d44 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34194c5e:	f7ed fb05 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34194c62:	4b39      	ldr	r3, [pc, #228]	@ (34194d48 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34194c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194c68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194c6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194c70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34194c76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194c7c:	3b01      	subs	r3, #1
34194c7e:	041b      	lsls	r3, r3, #16
34194c80:	4313      	orrs	r3, r2
34194c82:	4a31      	ldr	r2, [pc, #196]	@ (34194d48 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34194c84:	430b      	orrs	r3, r1
34194c86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194c8a:	f7fa f855 	bl	3418ed38 <LL_RCC_IC9_Enable>
34194c8e:	e066      	b.n	34194d5e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34194c90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194c94:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194c98:	4b26      	ldr	r3, [pc, #152]	@ (34194d34 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
34194c9a:	429a      	cmp	r2, r3
34194c9c:	d156      	bne.n	34194d4c <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34194c9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194ca4:	2b00      	cmp	r3, #0
34194ca6:	d016      	beq.n	34194cd6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
34194ca8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194cb2:	d010      	beq.n	34194cd6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
34194cb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194cba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194cbe:	d00a      	beq.n	34194cd6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
34194cc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194cca:	d004      	beq.n	34194cd6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
34194ccc:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34194cd0:	481c      	ldr	r0, [pc, #112]	@ (34194d44 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34194cd2:	f7ed facb 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34194cd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194cdc:	2b00      	cmp	r3, #0
34194cde:	d005      	beq.n	34194cec <HAL_RCCEx_PeriphCLKConfig+0x59f0>
34194ce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194cea:	d904      	bls.n	34194cf6 <HAL_RCCEx_PeriphCLKConfig+0x59fa>
34194cec:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34194cf0:	4814      	ldr	r0, [pc, #80]	@ (34194d44 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34194cf2:	f7ed fabb 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34194cf6:	4b14      	ldr	r3, [pc, #80]	@ (34194d48 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34194cf8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194cfc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194d00:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194d04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194d0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194d10:	3b01      	subs	r3, #1
34194d12:	041b      	lsls	r3, r3, #16
34194d14:	4313      	orrs	r3, r2
34194d16:	4a0c      	ldr	r2, [pc, #48]	@ (34194d48 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34194d18:	430b      	orrs	r3, r1
34194d1a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34194d1e:	f7fa f90b 	bl	3418ef38 <LL_RCC_IC14_Enable>
34194d22:	e01c      	b.n	34194d5e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
34194d24:	07010c30 	.word	0x07010c30
34194d28:	07001030 	.word	0x07001030
34194d2c:	07011030 	.word	0x07011030
34194d30:	07021030 	.word	0x07021030
34194d34:	07031030 	.word	0x07031030
34194d38:	07041030 	.word	0x07041030
34194d3c:	07051030 	.word	0x07051030
34194d40:	07061030 	.word	0x07061030
34194d44:	341a5394 	.word	0x341a5394
34194d48:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34194d4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d50:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34194d54:	4b72      	ldr	r3, [pc, #456]	@ (34194f20 <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
34194d56:	429a      	cmp	r2, r3
34194d58:	d101      	bne.n	34194d5e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
34194d5a:	f7fa faad 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34194d5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d62:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
34194d66:	4618      	mov	r0, r3
34194d68:	f7f9 fa49 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34194d6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d70:	e9d3 2300 	ldrd	r2, r3, [r3]
34194d74:	2100      	movs	r1, #0
34194d76:	64b9      	str	r1, [r7, #72]	@ 0x48
34194d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34194d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
34194d7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34194d82:	4603      	mov	r3, r0
34194d84:	460a      	mov	r2, r1
34194d86:	4313      	orrs	r3, r2
34194d88:	f000 80ee 	beq.w	34194f68 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34194d8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d90:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194d94:	4b63      	ldr	r3, [pc, #396]	@ (34194f24 <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
34194d96:	429a      	cmp	r2, r3
34194d98:	d02e      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194d9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194d9e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194da2:	4b61      	ldr	r3, [pc, #388]	@ (34194f28 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
34194da4:	429a      	cmp	r2, r3
34194da6:	d027      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194da8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194dac:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194db0:	4b5e      	ldr	r3, [pc, #376]	@ (34194f2c <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
34194db2:	429a      	cmp	r2, r3
34194db4:	d020      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194db6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194dba:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194dbe:	4b5c      	ldr	r3, [pc, #368]	@ (34194f30 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
34194dc0:	429a      	cmp	r2, r3
34194dc2:	d019      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194dc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194dc8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194dcc:	4b59      	ldr	r3, [pc, #356]	@ (34194f34 <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
34194dce:	429a      	cmp	r2, r3
34194dd0:	d012      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194dd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194dd6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194dda:	4b57      	ldr	r3, [pc, #348]	@ (34194f38 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
34194ddc:	429a      	cmp	r2, r3
34194dde:	d00b      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194de0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194de4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194de8:	4b54      	ldr	r3, [pc, #336]	@ (34194f3c <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
34194dea:	429a      	cmp	r2, r3
34194dec:	d004      	beq.n	34194df8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34194dee:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34194df2:	4853      	ldr	r0, [pc, #332]	@ (34194f40 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34194df4:	f7ed fa3a 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34194df8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194dfc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194e00:	4b4a      	ldr	r3, [pc, #296]	@ (34194f2c <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
34194e02:	429a      	cmp	r2, r3
34194e04:	d142      	bne.n	34194e8c <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34194e06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194e0c:	2b00      	cmp	r3, #0
34194e0e:	d016      	beq.n	34194e3e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34194e10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194e1a:	d010      	beq.n	34194e3e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34194e1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194e26:	d00a      	beq.n	34194e3e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34194e28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34194e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194e32:	d004      	beq.n	34194e3e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34194e34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34194e38:	4841      	ldr	r0, [pc, #260]	@ (34194f40 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34194e3a:	f7ed fa17 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34194e3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194e44:	2b00      	cmp	r3, #0
34194e46:	d005      	beq.n	34194e54 <HAL_RCCEx_PeriphCLKConfig+0x5b58>
34194e48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194e52:	d904      	bls.n	34194e5e <HAL_RCCEx_PeriphCLKConfig+0x5b62>
34194e54:	f640 0101 	movw	r1, #2049	@ 0x801
34194e58:	4839      	ldr	r0, [pc, #228]	@ (34194f40 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34194e5a:	f7ed fa07 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34194e5e:	4b39      	ldr	r3, [pc, #228]	@ (34194f44 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34194e60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34194e64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194e68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194e6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34194e72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34194e78:	3b01      	subs	r3, #1
34194e7a:	041b      	lsls	r3, r3, #16
34194e7c:	4313      	orrs	r3, r2
34194e7e:	4a31      	ldr	r2, [pc, #196]	@ (34194f44 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34194e80:	430b      	orrs	r3, r1
34194e82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34194e86:	f7f9 ff57 	bl	3418ed38 <LL_RCC_IC9_Enable>
34194e8a:	e066      	b.n	34194f5a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34194e8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e90:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194e94:	4b26      	ldr	r3, [pc, #152]	@ (34194f30 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
34194e96:	429a      	cmp	r2, r3
34194e98:	d156      	bne.n	34194f48 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34194e9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194ea0:	2b00      	cmp	r3, #0
34194ea2:	d016      	beq.n	34194ed2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
34194ea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34194eae:	d010      	beq.n	34194ed2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
34194eb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34194eba:	d00a      	beq.n	34194ed2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
34194ebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34194ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34194ec6:	d004      	beq.n	34194ed2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
34194ec8:	f640 010d 	movw	r1, #2061	@ 0x80d
34194ecc:	481c      	ldr	r0, [pc, #112]	@ (34194f40 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34194ece:	f7ed f9cd 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34194ed2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194ed8:	2b00      	cmp	r3, #0
34194eda:	d005      	beq.n	34194ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
34194edc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34194ee6:	d904      	bls.n	34194ef2 <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
34194ee8:	f640 010e 	movw	r1, #2062	@ 0x80e
34194eec:	4814      	ldr	r0, [pc, #80]	@ (34194f40 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34194eee:	f7ed f9bd 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34194ef2:	4b14      	ldr	r3, [pc, #80]	@ (34194f44 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34194ef4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34194ef8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34194efc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34194f00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34194f06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34194f0c:	3b01      	subs	r3, #1
34194f0e:	041b      	lsls	r3, r3, #16
34194f10:	4313      	orrs	r3, r2
34194f12:	4a0c      	ldr	r2, [pc, #48]	@ (34194f44 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34194f14:	430b      	orrs	r3, r1
34194f16:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34194f1a:	f7fa f80d 	bl	3418ef38 <LL_RCC_IC14_Enable>
34194f1e:	e01c      	b.n	34194f5a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
34194f20:	07011030 	.word	0x07011030
34194f24:	07001430 	.word	0x07001430
34194f28:	07011430 	.word	0x07011430
34194f2c:	07021430 	.word	0x07021430
34194f30:	07031430 	.word	0x07031430
34194f34:	07041430 	.word	0x07041430
34194f38:	07051430 	.word	0x07051430
34194f3c:	07061430 	.word	0x07061430
34194f40:	341a5394 	.word	0x341a5394
34194f44:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34194f48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f4c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34194f50:	4b72      	ldr	r3, [pc, #456]	@ (3419511c <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
34194f52:	429a      	cmp	r2, r3
34194f54:	d101      	bne.n	34194f5a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
34194f56:	f7fa f9af 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34194f5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f5e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34194f62:	4618      	mov	r0, r3
34194f64:	f7f9 f94b 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34194f68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34194f70:	2100      	movs	r1, #0
34194f72:	6439      	str	r1, [r7, #64]	@ 0x40
34194f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34194f78:	647b      	str	r3, [r7, #68]	@ 0x44
34194f7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34194f7e:	4603      	mov	r3, r0
34194f80:	460a      	mov	r2, r1
34194f82:	4313      	orrs	r3, r2
34194f84:	f000 80ee 	beq.w	34195164 <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34194f88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f8c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194f90:	4b63      	ldr	r3, [pc, #396]	@ (34195120 <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
34194f92:	429a      	cmp	r2, r3
34194f94:	d02e      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194f96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194f9a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194f9e:	4b61      	ldr	r3, [pc, #388]	@ (34195124 <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
34194fa0:	429a      	cmp	r2, r3
34194fa2:	d027      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194fa8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194fac:	4b5e      	ldr	r3, [pc, #376]	@ (34195128 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
34194fae:	429a      	cmp	r2, r3
34194fb0:	d020      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194fb6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194fba:	4b5c      	ldr	r3, [pc, #368]	@ (3419512c <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
34194fbc:	429a      	cmp	r2, r3
34194fbe:	d019      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194fc4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194fc8:	4b59      	ldr	r3, [pc, #356]	@ (34195130 <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
34194fca:	429a      	cmp	r2, r3
34194fcc:	d012      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194fd2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194fd6:	4b57      	ldr	r3, [pc, #348]	@ (34195134 <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
34194fd8:	429a      	cmp	r2, r3
34194fda:	d00b      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194fe0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194fe4:	4b54      	ldr	r3, [pc, #336]	@ (34195138 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
34194fe6:	429a      	cmp	r2, r3
34194fe8:	d004      	beq.n	34194ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34194fea:	f640 0128 	movw	r1, #2088	@ 0x828
34194fee:	4853      	ldr	r0, [pc, #332]	@ (3419513c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34194ff0:	f7ed f93c 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34194ff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34194ff8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34194ffc:	4b4a      	ldr	r3, [pc, #296]	@ (34195128 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
34194ffe:	429a      	cmp	r2, r3
34195000:	d142      	bne.n	34195088 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34195002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195008:	2b00      	cmp	r3, #0
3419500a:	d016      	beq.n	3419503a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3419500c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34195016:	d010      	beq.n	3419503a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34195018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419501e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34195022:	d00a      	beq.n	3419503a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34195024:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419502a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419502e:	d004      	beq.n	3419503a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34195030:	f640 012d 	movw	r1, #2093	@ 0x82d
34195034:	4841      	ldr	r0, [pc, #260]	@ (3419513c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34195036:	f7ed f919 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3419503a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419503e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195040:	2b00      	cmp	r3, #0
34195042:	d005      	beq.n	34195050 <HAL_RCCEx_PeriphCLKConfig+0x5d54>
34195044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419504a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419504e:	d904      	bls.n	3419505a <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
34195050:	f640 012e 	movw	r1, #2094	@ 0x82e
34195054:	4839      	ldr	r0, [pc, #228]	@ (3419513c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34195056:	f7ed f909 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419505a:	4b39      	ldr	r3, [pc, #228]	@ (34195140 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3419505c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34195060:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34195064:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34195068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419506c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419506e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195074:	3b01      	subs	r3, #1
34195076:	041b      	lsls	r3, r3, #16
34195078:	4313      	orrs	r3, r2
3419507a:	4a31      	ldr	r2, [pc, #196]	@ (34195140 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3419507c:	430b      	orrs	r3, r1
3419507e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34195082:	f7f9 fe59 	bl	3418ed38 <LL_RCC_IC9_Enable>
34195086:	e066      	b.n	34195156 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34195088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419508c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34195090:	4b26      	ldr	r3, [pc, #152]	@ (3419512c <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
34195092:	429a      	cmp	r2, r3
34195094:	d156      	bne.n	34195144 <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34195096:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419509c:	2b00      	cmp	r3, #0
3419509e:	d016      	beq.n	341950ce <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
341950a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341950a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341950a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341950aa:	d010      	beq.n	341950ce <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
341950ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341950b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341950b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341950b6:	d00a      	beq.n	341950ce <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
341950b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341950bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341950be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341950c2:	d004      	beq.n	341950ce <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
341950c4:	f640 013a 	movw	r1, #2106	@ 0x83a
341950c8:	481c      	ldr	r0, [pc, #112]	@ (3419513c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
341950ca:	f7ed f8cf 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341950ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341950d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341950d4:	2b00      	cmp	r3, #0
341950d6:	d005      	beq.n	341950e4 <HAL_RCCEx_PeriphCLKConfig+0x5de8>
341950d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341950dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341950de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341950e2:	d904      	bls.n	341950ee <HAL_RCCEx_PeriphCLKConfig+0x5df2>
341950e4:	f640 013b 	movw	r1, #2107	@ 0x83b
341950e8:	4814      	ldr	r0, [pc, #80]	@ (3419513c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
341950ea:	f7ed f8bf 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341950ee:	4b14      	ldr	r3, [pc, #80]	@ (34195140 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
341950f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341950f4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341950f8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341950fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195100:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34195102:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34195108:	3b01      	subs	r3, #1
3419510a:	041b      	lsls	r3, r3, #16
3419510c:	4313      	orrs	r3, r2
3419510e:	4a0c      	ldr	r2, [pc, #48]	@ (34195140 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
34195110:	430b      	orrs	r3, r1
34195112:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34195116:	f7f9 ff0f 	bl	3418ef38 <LL_RCC_IC14_Enable>
3419511a:	e01c      	b.n	34195156 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
3419511c:	07011430 	.word	0x07011430
34195120:	07001830 	.word	0x07001830
34195124:	07011830 	.word	0x07011830
34195128:	07021830 	.word	0x07021830
3419512c:	07031830 	.word	0x07031830
34195130:	07041830 	.word	0x07041830
34195134:	07051830 	.word	0x07051830
34195138:	07061830 	.word	0x07061830
3419513c:	341a5394 	.word	0x341a5394
34195140:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34195144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195148:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3419514c:	4b72      	ldr	r3, [pc, #456]	@ (34195318 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
3419514e:	429a      	cmp	r2, r3
34195150:	d101      	bne.n	34195156 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
34195152:	f7fa f8b1 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34195156:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419515a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3419515e:	4618      	mov	r0, r3
34195160:	f7f9 f84d 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34195164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195168:	e9d3 2300 	ldrd	r2, r3, [r3]
3419516c:	2100      	movs	r1, #0
3419516e:	63b9      	str	r1, [r7, #56]	@ 0x38
34195170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34195174:	63fb      	str	r3, [r7, #60]	@ 0x3c
34195176:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3419517a:	4603      	mov	r3, r0
3419517c:	460a      	mov	r2, r1
3419517e:	4313      	orrs	r3, r2
34195180:	f000 80ee 	beq.w	34195360 <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34195184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195188:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3419518c:	4b63      	ldr	r3, [pc, #396]	@ (3419531c <HAL_RCCEx_PeriphCLKConfig+0x6020>)
3419518e:	429a      	cmp	r2, r3
34195190:	d02e      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34195192:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195196:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3419519a:	4b61      	ldr	r3, [pc, #388]	@ (34195320 <HAL_RCCEx_PeriphCLKConfig+0x6024>)
3419519c:	429a      	cmp	r2, r3
3419519e:	d027      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951a4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951a8:	4b5e      	ldr	r3, [pc, #376]	@ (34195324 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
341951aa:	429a      	cmp	r2, r3
341951ac:	d020      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951b2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951b6:	4b5c      	ldr	r3, [pc, #368]	@ (34195328 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
341951b8:	429a      	cmp	r2, r3
341951ba:	d019      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951c0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951c4:	4b59      	ldr	r3, [pc, #356]	@ (3419532c <HAL_RCCEx_PeriphCLKConfig+0x6030>)
341951c6:	429a      	cmp	r2, r3
341951c8:	d012      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951ce:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951d2:	4b57      	ldr	r3, [pc, #348]	@ (34195330 <HAL_RCCEx_PeriphCLKConfig+0x6034>)
341951d4:	429a      	cmp	r2, r3
341951d6:	d00b      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951dc:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951e0:	4b54      	ldr	r3, [pc, #336]	@ (34195334 <HAL_RCCEx_PeriphCLKConfig+0x6038>)
341951e2:	429a      	cmp	r2, r3
341951e4:	d004      	beq.n	341951f0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
341951e6:	f640 0155 	movw	r1, #2133	@ 0x855
341951ea:	4853      	ldr	r0, [pc, #332]	@ (34195338 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
341951ec:	f7ed f83e 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
341951f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341951f4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341951f8:	4b4a      	ldr	r3, [pc, #296]	@ (34195324 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
341951fa:	429a      	cmp	r2, r3
341951fc:	d142      	bne.n	34195284 <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341951fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195204:	2b00      	cmp	r3, #0
34195206:	d016      	beq.n	34195236 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34195208:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419520c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419520e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34195212:	d010      	beq.n	34195236 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34195214:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419521a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419521e:	d00a      	beq.n	34195236 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34195220:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195226:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419522a:	d004      	beq.n	34195236 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3419522c:	f640 015a 	movw	r1, #2138	@ 0x85a
34195230:	4841      	ldr	r0, [pc, #260]	@ (34195338 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34195232:	f7ed f81b 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34195236:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419523a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419523c:	2b00      	cmp	r3, #0
3419523e:	d005      	beq.n	3419524c <HAL_RCCEx_PeriphCLKConfig+0x5f50>
34195240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419524a:	d904      	bls.n	34195256 <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
3419524c:	f640 015b 	movw	r1, #2139	@ 0x85b
34195250:	4839      	ldr	r0, [pc, #228]	@ (34195338 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34195252:	f7ed f80b 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34195256:	4b39      	ldr	r3, [pc, #228]	@ (3419533c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34195258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3419525c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34195260:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34195264:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419526a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419526e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195270:	3b01      	subs	r3, #1
34195272:	041b      	lsls	r3, r3, #16
34195274:	4313      	orrs	r3, r2
34195276:	4a31      	ldr	r2, [pc, #196]	@ (3419533c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34195278:	430b      	orrs	r3, r1
3419527a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3419527e:	f7f9 fd5b 	bl	3418ed38 <LL_RCC_IC9_Enable>
34195282:	e066      	b.n	34195352 <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34195284:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195288:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3419528c:	4b26      	ldr	r3, [pc, #152]	@ (34195328 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3419528e:	429a      	cmp	r2, r3
34195290:	d156      	bne.n	34195340 <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34195292:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34195298:	2b00      	cmp	r3, #0
3419529a:	d016      	beq.n	341952ca <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3419529c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341952a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341952a6:	d010      	beq.n	341952ca <HAL_RCCEx_PeriphCLKConfig+0x5fce>
341952a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341952ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341952b2:	d00a      	beq.n	341952ca <HAL_RCCEx_PeriphCLKConfig+0x5fce>
341952b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341952ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341952be:	d004      	beq.n	341952ca <HAL_RCCEx_PeriphCLKConfig+0x5fce>
341952c0:	f640 0167 	movw	r1, #2151	@ 0x867
341952c4:	481c      	ldr	r0, [pc, #112]	@ (34195338 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
341952c6:	f7ec ffd1 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341952ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341952d0:	2b00      	cmp	r3, #0
341952d2:	d005      	beq.n	341952e0 <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
341952d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341952da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341952de:	d904      	bls.n	341952ea <HAL_RCCEx_PeriphCLKConfig+0x5fee>
341952e0:	f640 0168 	movw	r1, #2152	@ 0x868
341952e4:	4814      	ldr	r0, [pc, #80]	@ (34195338 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
341952e6:	f7ec ffc1 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341952ea:	4b14      	ldr	r3, [pc, #80]	@ (3419533c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
341952ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341952f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341952f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341952f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341952fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341952fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34195304:	3b01      	subs	r3, #1
34195306:	041b      	lsls	r3, r3, #16
34195308:	4313      	orrs	r3, r2
3419530a:	4a0c      	ldr	r2, [pc, #48]	@ (3419533c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3419530c:	430b      	orrs	r3, r1
3419530e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34195312:	f7f9 fe11 	bl	3418ef38 <LL_RCC_IC14_Enable>
34195316:	e01c      	b.n	34195352 <HAL_RCCEx_PeriphCLKConfig+0x6056>
34195318:	07011830 	.word	0x07011830
3419531c:	07001c30 	.word	0x07001c30
34195320:	07011c30 	.word	0x07011c30
34195324:	07021c30 	.word	0x07021c30
34195328:	07031c30 	.word	0x07031c30
3419532c:	07041c30 	.word	0x07041c30
34195330:	07051c30 	.word	0x07051c30
34195334:	07061c30 	.word	0x07061c30
34195338:	341a5394 	.word	0x341a5394
3419533c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34195340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195344:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34195348:	4b72      	ldr	r3, [pc, #456]	@ (34195514 <HAL_RCCEx_PeriphCLKConfig+0x6218>)
3419534a:	429a      	cmp	r2, r3
3419534c:	d101      	bne.n	34195352 <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
3419534e:	f7f9 ffb3 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34195352:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195356:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3419535a:	4618      	mov	r0, r3
3419535c:	f7f8 ff4f 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34195360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195364:	e9d3 2300 	ldrd	r2, r3, [r3]
34195368:	2100      	movs	r1, #0
3419536a:	6339      	str	r1, [r7, #48]	@ 0x30
3419536c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34195370:	637b      	str	r3, [r7, #52]	@ 0x34
34195372:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34195376:	4603      	mov	r3, r0
34195378:	460a      	mov	r2, r1
3419537a:	4313      	orrs	r3, r2
3419537c:	f000 80ee 	beq.w	3419555c <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34195380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195384:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34195388:	4a63      	ldr	r2, [pc, #396]	@ (34195518 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
3419538a:	4293      	cmp	r3, r2
3419538c:	d02e      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3419538e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195392:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34195396:	4a61      	ldr	r2, [pc, #388]	@ (3419551c <HAL_RCCEx_PeriphCLKConfig+0x6220>)
34195398:	4293      	cmp	r3, r2
3419539a:	d027      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3419539c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953a0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953a4:	4a5e      	ldr	r2, [pc, #376]	@ (34195520 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
341953a6:	4293      	cmp	r3, r2
341953a8:	d020      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
341953aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953ae:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953b2:	4a5c      	ldr	r2, [pc, #368]	@ (34195524 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
341953b4:	4293      	cmp	r3, r2
341953b6:	d019      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
341953b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953bc:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953c0:	4a59      	ldr	r2, [pc, #356]	@ (34195528 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
341953c2:	4293      	cmp	r3, r2
341953c4:	d012      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
341953c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953ca:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953ce:	4a57      	ldr	r2, [pc, #348]	@ (3419552c <HAL_RCCEx_PeriphCLKConfig+0x6230>)
341953d0:	4293      	cmp	r3, r2
341953d2:	d00b      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
341953d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953d8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953dc:	4a54      	ldr	r2, [pc, #336]	@ (34195530 <HAL_RCCEx_PeriphCLKConfig+0x6234>)
341953de:	4293      	cmp	r3, r2
341953e0:	d004      	beq.n	341953ec <HAL_RCCEx_PeriphCLKConfig+0x60f0>
341953e2:	f640 0182 	movw	r1, #2178	@ 0x882
341953e6:	4853      	ldr	r0, [pc, #332]	@ (34195534 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
341953e8:	f7ec ff40 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
341953ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953f0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341953f4:	4a4a      	ldr	r2, [pc, #296]	@ (34195520 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
341953f6:	4293      	cmp	r3, r2
341953f8:	d142      	bne.n	34195480 <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341953fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341953fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195400:	2b00      	cmp	r3, #0
34195402:	d016      	beq.n	34195432 <HAL_RCCEx_PeriphCLKConfig+0x6136>
34195404:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419540a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419540e:	d010      	beq.n	34195432 <HAL_RCCEx_PeriphCLKConfig+0x6136>
34195410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419541a:	d00a      	beq.n	34195432 <HAL_RCCEx_PeriphCLKConfig+0x6136>
3419541c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34195426:	d004      	beq.n	34195432 <HAL_RCCEx_PeriphCLKConfig+0x6136>
34195428:	f640 0187 	movw	r1, #2183	@ 0x887
3419542c:	4841      	ldr	r0, [pc, #260]	@ (34195534 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3419542e:	f7ec ff1d 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34195432:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195438:	2b00      	cmp	r3, #0
3419543a:	d005      	beq.n	34195448 <HAL_RCCEx_PeriphCLKConfig+0x614c>
3419543c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34195446:	d904      	bls.n	34195452 <HAL_RCCEx_PeriphCLKConfig+0x6156>
34195448:	f640 0188 	movw	r1, #2184	@ 0x888
3419544c:	4839      	ldr	r0, [pc, #228]	@ (34195534 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3419544e:	f7ec ff0d 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34195452:	4b39      	ldr	r3, [pc, #228]	@ (34195538 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34195454:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34195458:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3419545c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34195460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195464:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34195466:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419546a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419546c:	3b01      	subs	r3, #1
3419546e:	041b      	lsls	r3, r3, #16
34195470:	4313      	orrs	r3, r2
34195472:	4a31      	ldr	r2, [pc, #196]	@ (34195538 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34195474:	430b      	orrs	r3, r1
34195476:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3419547a:	f7f9 fc5d 	bl	3418ed38 <LL_RCC_IC9_Enable>
3419547e:	e066      	b.n	3419554e <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34195480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195484:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34195488:	4a26      	ldr	r2, [pc, #152]	@ (34195524 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3419548a:	4293      	cmp	r3, r2
3419548c:	d156      	bne.n	3419553c <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3419548e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34195494:	2b00      	cmp	r3, #0
34195496:	d016      	beq.n	341954c6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
34195498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419549e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341954a2:	d010      	beq.n	341954c6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
341954a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341954aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341954ae:	d00a      	beq.n	341954c6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
341954b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341954b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341954ba:	d004      	beq.n	341954c6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
341954bc:	f640 0194 	movw	r1, #2196	@ 0x894
341954c0:	481c      	ldr	r0, [pc, #112]	@ (34195534 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
341954c2:	f7ec fed3 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341954c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341954cc:	2b00      	cmp	r3, #0
341954ce:	d005      	beq.n	341954dc <HAL_RCCEx_PeriphCLKConfig+0x61e0>
341954d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341954d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341954da:	d904      	bls.n	341954e6 <HAL_RCCEx_PeriphCLKConfig+0x61ea>
341954dc:	f640 0195 	movw	r1, #2197	@ 0x895
341954e0:	4814      	ldr	r0, [pc, #80]	@ (34195534 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
341954e2:	f7ec fec3 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341954e6:	4b14      	ldr	r3, [pc, #80]	@ (34195538 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
341954e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341954ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341954f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341954f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341954fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341954fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34195500:	3b01      	subs	r3, #1
34195502:	041b      	lsls	r3, r3, #16
34195504:	4313      	orrs	r3, r2
34195506:	4a0c      	ldr	r2, [pc, #48]	@ (34195538 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34195508:	430b      	orrs	r3, r1
3419550a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3419550e:	f7f9 fd13 	bl	3418ef38 <LL_RCC_IC14_Enable>
34195512:	e01c      	b.n	3419554e <HAL_RCCEx_PeriphCLKConfig+0x6252>
34195514:	07011c30 	.word	0x07011c30
34195518:	07000034 	.word	0x07000034
3419551c:	07010034 	.word	0x07010034
34195520:	07020034 	.word	0x07020034
34195524:	07030034 	.word	0x07030034
34195528:	07040034 	.word	0x07040034
3419552c:	07050034 	.word	0x07050034
34195530:	07060034 	.word	0x07060034
34195534:	341a5394 	.word	0x341a5394
34195538:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3419553c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195540:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34195544:	4ab7      	ldr	r2, [pc, #732]	@ (34195824 <HAL_RCCEx_PeriphCLKConfig+0x6528>)
34195546:	4293      	cmp	r3, r2
34195548:	d101      	bne.n	3419554e <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
3419554a:	f7f9 feb5 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3419554e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195552:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34195556:	4618      	mov	r0, r3
34195558:	f7f8 fe51 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3419555c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195560:	e9d3 2300 	ldrd	r2, r3, [r3]
34195564:	2100      	movs	r1, #0
34195566:	62b9      	str	r1, [r7, #40]	@ 0x28
34195568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3419556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
3419556e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34195572:	4603      	mov	r3, r0
34195574:	460a      	mov	r2, r1
34195576:	4313      	orrs	r3, r2
34195578:	f000 80da 	beq.w	34195730 <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3419557c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195580:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34195584:	4aa8      	ldr	r2, [pc, #672]	@ (34195828 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
34195586:	4293      	cmp	r3, r2
34195588:	d02e      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3419558a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419558e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34195592:	4aa6      	ldr	r2, [pc, #664]	@ (3419582c <HAL_RCCEx_PeriphCLKConfig+0x6530>)
34195594:	4293      	cmp	r3, r2
34195596:	d027      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34195598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419559c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955a0:	4aa3      	ldr	r2, [pc, #652]	@ (34195830 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
341955a2:	4293      	cmp	r3, r2
341955a4:	d020      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
341955a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955aa:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955ae:	4aa1      	ldr	r2, [pc, #644]	@ (34195834 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
341955b0:	4293      	cmp	r3, r2
341955b2:	d019      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
341955b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955b8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955bc:	4a9e      	ldr	r2, [pc, #632]	@ (34195838 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
341955be:	4293      	cmp	r3, r2
341955c0:	d012      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
341955c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955ca:	4a9c      	ldr	r2, [pc, #624]	@ (3419583c <HAL_RCCEx_PeriphCLKConfig+0x6540>)
341955cc:	4293      	cmp	r3, r2
341955ce:	d00b      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
341955d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955d4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955d8:	4a99      	ldr	r2, [pc, #612]	@ (34195840 <HAL_RCCEx_PeriphCLKConfig+0x6544>)
341955da:	4293      	cmp	r3, r2
341955dc:	d004      	beq.n	341955e8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
341955de:	f640 01af 	movw	r1, #2223	@ 0x8af
341955e2:	4898      	ldr	r0, [pc, #608]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
341955e4:	f7ec fe42 	bl	3418226c <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
341955e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341955f0:	4a8f      	ldr	r2, [pc, #572]	@ (34195830 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
341955f2:	4293      	cmp	r3, r2
341955f4:	d142      	bne.n	3419567c <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341955f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341955fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341955fc:	2b00      	cmp	r3, #0
341955fe:	d016      	beq.n	3419562e <HAL_RCCEx_PeriphCLKConfig+0x6332>
34195600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419560a:	d010      	beq.n	3419562e <HAL_RCCEx_PeriphCLKConfig+0x6332>
3419560c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34195612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34195616:	d00a      	beq.n	3419562e <HAL_RCCEx_PeriphCLKConfig+0x6332>
34195618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419561c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419561e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34195622:	d004      	beq.n	3419562e <HAL_RCCEx_PeriphCLKConfig+0x6332>
34195624:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34195628:	4886      	ldr	r0, [pc, #536]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3419562a:	f7ec fe1f 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3419562e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34195634:	2b00      	cmp	r3, #0
34195636:	d005      	beq.n	34195644 <HAL_RCCEx_PeriphCLKConfig+0x6348>
34195638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419563c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419563e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34195642:	d904      	bls.n	3419564e <HAL_RCCEx_PeriphCLKConfig+0x6352>
34195644:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34195648:	487e      	ldr	r0, [pc, #504]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3419564a:	f7ec fe0f 	bl	3418226c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3419564e:	4b7e      	ldr	r3, [pc, #504]	@ (34195848 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
34195650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34195654:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34195658:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3419565c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195660:	6c91      	ldr	r1, [r2, #72]	@ 0x48
34195662:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195666:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
34195668:	3a01      	subs	r2, #1
3419566a:	0412      	lsls	r2, r2, #16
3419566c:	430a      	orrs	r2, r1
3419566e:	4976      	ldr	r1, [pc, #472]	@ (34195848 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
34195670:	4313      	orrs	r3, r2
34195672:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34195676:	f7f9 fb5f 	bl	3418ed38 <LL_RCC_IC9_Enable>
3419567a:	e052      	b.n	34195722 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3419567c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195680:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34195684:	4a6b      	ldr	r2, [pc, #428]	@ (34195834 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
34195686:	4293      	cmp	r3, r2
34195688:	d142      	bne.n	34195710 <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3419568a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419568e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34195690:	2b00      	cmp	r3, #0
34195692:	d016      	beq.n	341956c2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
34195694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419569a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419569e:	d010      	beq.n	341956c2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
341956a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341956a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341956a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341956aa:	d00a      	beq.n	341956c2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
341956ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341956b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
341956b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341956b6:	d004      	beq.n	341956c2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
341956b8:	f640 01c1 	movw	r1, #2241	@ 0x8c1
341956bc:	4861      	ldr	r0, [pc, #388]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
341956be:	f7ec fdd5 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341956c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341956c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341956c8:	2b00      	cmp	r3, #0
341956ca:	d005      	beq.n	341956d8 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
341956cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341956d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341956d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341956d6:	d904      	bls.n	341956e2 <HAL_RCCEx_PeriphCLKConfig+0x63e6>
341956d8:	f640 01c2 	movw	r1, #2242	@ 0x8c2
341956dc:	4859      	ldr	r0, [pc, #356]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
341956de:	f7ec fdc5 	bl	3418226c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341956e2:	4b59      	ldr	r3, [pc, #356]	@ (34195848 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
341956e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341956e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341956ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341956f0:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
341956f4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
341956f6:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
341956fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
341956fc:	3a01      	subs	r2, #1
341956fe:	0412      	lsls	r2, r2, #16
34195700:	430a      	orrs	r2, r1
34195702:	4951      	ldr	r1, [pc, #324]	@ (34195848 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
34195704:	4313      	orrs	r3, r2
34195706:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3419570a:	f7f9 fc15 	bl	3418ef38 <LL_RCC_IC14_Enable>
3419570e:	e008      	b.n	34195722 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34195710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195714:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34195718:	4a44      	ldr	r2, [pc, #272]	@ (3419582c <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3419571a:	4293      	cmp	r3, r2
3419571c:	d101      	bne.n	34195722 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3419571e:	f7f9 fdcb 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34195722:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195726:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3419572a:	4618      	mov	r0, r3
3419572c:	f7f8 fd67 	bl	3418e1fe <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34195730:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195734:	e9d3 2300 	ldrd	r2, r3, [r3]
34195738:	2100      	movs	r1, #0
3419573a:	6239      	str	r1, [r7, #32]
3419573c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34195740:	627b      	str	r3, [r7, #36]	@ 0x24
34195742:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34195746:	4603      	mov	r3, r0
34195748:	460a      	mov	r2, r1
3419574a:	4313      	orrs	r3, r2
3419574c:	d02e      	beq.n	341957ac <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3419574e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195752:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34195756:	4a3d      	ldr	r2, [pc, #244]	@ (3419584c <HAL_RCCEx_PeriphCLKConfig+0x6550>)
34195758:	4293      	cmp	r3, r2
3419575a:	d012      	beq.n	34195782 <HAL_RCCEx_PeriphCLKConfig+0x6486>
3419575c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195760:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34195764:	4a3a      	ldr	r2, [pc, #232]	@ (34195850 <HAL_RCCEx_PeriphCLKConfig+0x6554>)
34195766:	4293      	cmp	r3, r2
34195768:	d00b      	beq.n	34195782 <HAL_RCCEx_PeriphCLKConfig+0x6486>
3419576a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419576e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34195772:	4a38      	ldr	r2, [pc, #224]	@ (34195854 <HAL_RCCEx_PeriphCLKConfig+0x6558>)
34195774:	4293      	cmp	r3, r2
34195776:	d004      	beq.n	34195782 <HAL_RCCEx_PeriphCLKConfig+0x6486>
34195778:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3419577c:	4831      	ldr	r0, [pc, #196]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3419577e:	f7ec fd75 	bl	3418226c <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34195782:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195786:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3419578a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3419578e:	4618      	mov	r0, r3
34195790:	f7f8 fcdd 	bl	3418e14e <LL_RCC_SetOTGPHYCKREFClockSource>
34195794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195798:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3419579c:	0fdb      	lsrs	r3, r3, #31
3419579e:	2b01      	cmp	r3, #1
341957a0:	d102      	bne.n	341957a8 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
341957a2:	f7f8 fa7f 	bl	3418dca4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341957a6:	e001      	b.n	341957ac <HAL_RCCEx_PeriphCLKConfig+0x64b0>
341957a8:	f7f8 fa6c 	bl	3418dc84 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
341957ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341957b0:	e9d3 2300 	ldrd	r2, r3, [r3]
341957b4:	2100      	movs	r1, #0
341957b6:	61b9      	str	r1, [r7, #24]
341957b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
341957bc:	61fb      	str	r3, [r7, #28]
341957be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
341957c2:	4603      	mov	r3, r0
341957c4:	460a      	mov	r2, r1
341957c6:	4313      	orrs	r3, r2
341957c8:	d04e      	beq.n	34195868 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
341957ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341957ce:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341957d2:	4a21      	ldr	r2, [pc, #132]	@ (34195858 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
341957d4:	4293      	cmp	r3, r2
341957d6:	d012      	beq.n	341957fe <HAL_RCCEx_PeriphCLKConfig+0x6502>
341957d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341957dc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341957e0:	4a1e      	ldr	r2, [pc, #120]	@ (3419585c <HAL_RCCEx_PeriphCLKConfig+0x6560>)
341957e2:	4293      	cmp	r3, r2
341957e4:	d00b      	beq.n	341957fe <HAL_RCCEx_PeriphCLKConfig+0x6502>
341957e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341957ea:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341957ee:	4a1c      	ldr	r2, [pc, #112]	@ (34195860 <HAL_RCCEx_PeriphCLKConfig+0x6564>)
341957f0:	4293      	cmp	r3, r2
341957f2:	d004      	beq.n	341957fe <HAL_RCCEx_PeriphCLKConfig+0x6502>
341957f4:	f640 01e6 	movw	r1, #2278	@ 0x8e6
341957f8:	4812      	ldr	r0, [pc, #72]	@ (34195844 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
341957fa:	f7ec fd37 	bl	3418226c <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
341957fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195802:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34195806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3419580a:	4618      	mov	r0, r3
3419580c:	f7f8 fc9f 	bl	3418e14e <LL_RCC_SetOTGPHYCKREFClockSource>
34195810:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195814:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34195818:	0fdb      	lsrs	r3, r3, #31
3419581a:	2b01      	cmp	r3, #1
3419581c:	d122      	bne.n	34195864 <HAL_RCCEx_PeriphCLKConfig+0x6568>
3419581e:	f7f8 fa41 	bl	3418dca4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34195822:	e021      	b.n	34195868 <HAL_RCCEx_PeriphCLKConfig+0x656c>
34195824:	07010034 	.word	0x07010034
34195828:	07000434 	.word	0x07000434
3419582c:	07010434 	.word	0x07010434
34195830:	07020434 	.word	0x07020434
34195834:	07030434 	.word	0x07030434
34195838:	07040434 	.word	0x07040434
3419583c:	07050434 	.word	0x07050434
34195840:	07060434 	.word	0x07060434
34195844:	341a5394 	.word	0x341a5394
34195848:	56028000 	.word	0x56028000
3419584c:	01001014 	.word	0x01001014
34195850:	01011014 	.word	0x01011014
34195854:	81011014 	.word	0x81011014
34195858:	01001814 	.word	0x01001814
3419585c:	01011814 	.word	0x01011814
34195860:	81011814 	.word	0x81011814
34195864:	f7f8 fa0e 	bl	3418dc84 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34195868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419586c:	e9d3 2300 	ldrd	r2, r3, [r3]
34195870:	2100      	movs	r1, #0
34195872:	6139      	str	r1, [r7, #16]
34195874:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34195878:	617b      	str	r3, [r7, #20]
3419587a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3419587e:	4603      	mov	r3, r0
34195880:	460a      	mov	r2, r1
34195882:	4313      	orrs	r3, r2
34195884:	f000 8090 	beq.w	341959a8 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34195888:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419588c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34195890:	4ab5      	ldr	r2, [pc, #724]	@ (34195b68 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
34195892:	4293      	cmp	r3, r2
34195894:	d020      	beq.n	341958d8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
34195896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419589a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3419589e:	4ab3      	ldr	r2, [pc, #716]	@ (34195b6c <HAL_RCCEx_PeriphCLKConfig+0x6870>)
341958a0:	4293      	cmp	r3, r2
341958a2:	d019      	beq.n	341958d8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
341958a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958a8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341958ac:	4ab0      	ldr	r2, [pc, #704]	@ (34195b70 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
341958ae:	4293      	cmp	r3, r2
341958b0:	d012      	beq.n	341958d8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
341958b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958b6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341958ba:	4aae      	ldr	r2, [pc, #696]	@ (34195b74 <HAL_RCCEx_PeriphCLKConfig+0x6878>)
341958bc:	4293      	cmp	r3, r2
341958be:	d00b      	beq.n	341958d8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
341958c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958c4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341958c8:	4aab      	ldr	r2, [pc, #684]	@ (34195b78 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
341958ca:	4293      	cmp	r3, r2
341958cc:	d004      	beq.n	341958d8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
341958ce:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
341958d2:	48aa      	ldr	r0, [pc, #680]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
341958d4:	f7ec fcca 	bl	3418226c <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
341958d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958dc:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341958e0:	4aa3      	ldr	r2, [pc, #652]	@ (34195b70 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
341958e2:	4293      	cmp	r3, r2
341958e4:	d142      	bne.n	3419596c <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
341958e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341958ec:	2b00      	cmp	r3, #0
341958ee:	d016      	beq.n	3419591e <HAL_RCCEx_PeriphCLKConfig+0x6622>
341958f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341958f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
341958f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341958fa:	d010      	beq.n	3419591e <HAL_RCCEx_PeriphCLKConfig+0x6622>
341958fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34195902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34195906:	d00a      	beq.n	3419591e <HAL_RCCEx_PeriphCLKConfig+0x6622>
34195908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419590c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419590e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34195912:	d004      	beq.n	3419591e <HAL_RCCEx_PeriphCLKConfig+0x6622>
34195914:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34195918:	4898      	ldr	r0, [pc, #608]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3419591a:	f7ec fca7 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3419591e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34195924:	2b00      	cmp	r3, #0
34195926:	d005      	beq.n	34195934 <HAL_RCCEx_PeriphCLKConfig+0x6638>
34195928:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3419592c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3419592e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34195932:	d904      	bls.n	3419593e <HAL_RCCEx_PeriphCLKConfig+0x6642>
34195934:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34195938:	4890      	ldr	r0, [pc, #576]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3419593a:	f7ec fc97 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3419593e:	4b90      	ldr	r3, [pc, #576]	@ (34195b80 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34195940:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34195944:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34195948:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3419594c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195950:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34195952:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195956:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34195958:	3a01      	subs	r2, #1
3419595a:	0412      	lsls	r2, r2, #16
3419595c:	430a      	orrs	r2, r1
3419595e:	4988      	ldr	r1, [pc, #544]	@ (34195b80 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34195960:	4313      	orrs	r3, r2
34195962:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34195966:	f7f9 fb27 	bl	3418efb8 <LL_RCC_IC15_Enable>
3419596a:	e008      	b.n	3419597e <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3419596c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195970:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34195974:	4a7d      	ldr	r2, [pc, #500]	@ (34195b6c <HAL_RCCEx_PeriphCLKConfig+0x6870>)
34195976:	4293      	cmp	r3, r2
34195978:	d101      	bne.n	3419597e <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
3419597a:	f7f9 fc9d 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3419597e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195982:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34195986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3419598a:	4618      	mov	r0, r3
3419598c:	f7f8 fbd4 	bl	3418e138 <LL_RCC_SetOTGPHYClockSource>
34195990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195994:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34195998:	0fdb      	lsrs	r3, r3, #31
3419599a:	2b01      	cmp	r3, #1
3419599c:	d102      	bne.n	341959a4 <HAL_RCCEx_PeriphCLKConfig+0x66a8>
3419599e:	f7f8 f981 	bl	3418dca4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341959a2:	e001      	b.n	341959a8 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
341959a4:	f7f8 f96e 	bl	3418dc84 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
341959a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341959ac:	e9d3 2300 	ldrd	r2, r3, [r3]
341959b0:	2100      	movs	r1, #0
341959b2:	60b9      	str	r1, [r7, #8]
341959b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
341959b8:	60fb      	str	r3, [r7, #12]
341959ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
341959be:	4603      	mov	r3, r0
341959c0:	460a      	mov	r2, r1
341959c2:	4313      	orrs	r3, r2
341959c4:	f000 8090 	beq.w	34195ae8 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
341959c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341959cc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341959d0:	4a6c      	ldr	r2, [pc, #432]	@ (34195b84 <HAL_RCCEx_PeriphCLKConfig+0x6888>)
341959d2:	4293      	cmp	r3, r2
341959d4:	d020      	beq.n	34195a18 <HAL_RCCEx_PeriphCLKConfig+0x671c>
341959d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341959da:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341959de:	4a6a      	ldr	r2, [pc, #424]	@ (34195b88 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
341959e0:	4293      	cmp	r3, r2
341959e2:	d019      	beq.n	34195a18 <HAL_RCCEx_PeriphCLKConfig+0x671c>
341959e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341959e8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341959ec:	4a67      	ldr	r2, [pc, #412]	@ (34195b8c <HAL_RCCEx_PeriphCLKConfig+0x6890>)
341959ee:	4293      	cmp	r3, r2
341959f0:	d012      	beq.n	34195a18 <HAL_RCCEx_PeriphCLKConfig+0x671c>
341959f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
341959f6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341959fa:	4a65      	ldr	r2, [pc, #404]	@ (34195b90 <HAL_RCCEx_PeriphCLKConfig+0x6894>)
341959fc:	4293      	cmp	r3, r2
341959fe:	d00b      	beq.n	34195a18 <HAL_RCCEx_PeriphCLKConfig+0x671c>
34195a00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a04:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34195a08:	4a62      	ldr	r2, [pc, #392]	@ (34195b94 <HAL_RCCEx_PeriphCLKConfig+0x6898>)
34195a0a:	4293      	cmp	r3, r2
34195a0c:	d004      	beq.n	34195a18 <HAL_RCCEx_PeriphCLKConfig+0x671c>
34195a0e:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34195a12:	485a      	ldr	r0, [pc, #360]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34195a14:	f7ec fc2a 	bl	3418226c <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34195a18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a1c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34195a20:	4a5a      	ldr	r2, [pc, #360]	@ (34195b8c <HAL_RCCEx_PeriphCLKConfig+0x6890>)
34195a22:	4293      	cmp	r3, r2
34195a24:	d142      	bne.n	34195aac <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34195a26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34195a2c:	2b00      	cmp	r3, #0
34195a2e:	d016      	beq.n	34195a5e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34195a30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34195a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34195a3a:	d010      	beq.n	34195a5e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34195a3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34195a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34195a46:	d00a      	beq.n	34195a5e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34195a48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34195a4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34195a52:	d004      	beq.n	34195a5e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34195a54:	f640 1115 	movw	r1, #2325	@ 0x915
34195a58:	4848      	ldr	r0, [pc, #288]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34195a5a:	f7ec fc07 	bl	3418226c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34195a5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34195a64:	2b00      	cmp	r3, #0
34195a66:	d005      	beq.n	34195a74 <HAL_RCCEx_PeriphCLKConfig+0x6778>
34195a68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195a6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34195a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34195a72:	d904      	bls.n	34195a7e <HAL_RCCEx_PeriphCLKConfig+0x6782>
34195a74:	f640 1116 	movw	r1, #2326	@ 0x916
34195a78:	4840      	ldr	r0, [pc, #256]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34195a7a:	f7ec fbf7 	bl	3418226c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34195a7e:	4b40      	ldr	r3, [pc, #256]	@ (34195b80 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34195a80:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34195a84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34195a88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34195a8c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195a90:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34195a92:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34195a96:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34195a98:	3a01      	subs	r2, #1
34195a9a:	0412      	lsls	r2, r2, #16
34195a9c:	430a      	orrs	r2, r1
34195a9e:	4938      	ldr	r1, [pc, #224]	@ (34195b80 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34195aa0:	4313      	orrs	r3, r2
34195aa2:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34195aa6:	f7f9 fa87 	bl	3418efb8 <LL_RCC_IC15_Enable>
34195aaa:	e008      	b.n	34195abe <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34195aac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195ab0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34195ab4:	4a34      	ldr	r2, [pc, #208]	@ (34195b88 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
34195ab6:	4293      	cmp	r3, r2
34195ab8:	d101      	bne.n	34195abe <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
34195aba:	f7f9 fbfd 	bl	3418f2b8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34195abe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195ac2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34195ac6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34195aca:	4618      	mov	r0, r3
34195acc:	f7f8 fb34 	bl	3418e138 <LL_RCC_SetOTGPHYClockSource>
34195ad0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195ad4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34195ad8:	0fdb      	lsrs	r3, r3, #31
34195ada:	2b01      	cmp	r3, #1
34195adc:	d102      	bne.n	34195ae4 <HAL_RCCEx_PeriphCLKConfig+0x67e8>
34195ade:	f7f8 f8e1 	bl	3418dca4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34195ae2:	e001      	b.n	34195ae8 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
34195ae4:	f7f8 f8ce 	bl	3418dc84 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34195ae8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195aec:	e9d3 2300 	ldrd	r2, r3, [r3]
34195af0:	2100      	movs	r1, #0
34195af2:	6039      	str	r1, [r7, #0]
34195af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34195af8:	607b      	str	r3, [r7, #4]
34195afa:	e9d7 0100 	ldrd	r0, r1, [r7]
34195afe:	4603      	mov	r3, r0
34195b00:	460a      	mov	r2, r1
34195b02:	4313      	orrs	r3, r2
34195b04:	d023      	beq.n	34195b4e <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34195b06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195b0a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34195b0e:	2b00      	cmp	r3, #0
34195b10:	d016      	beq.n	34195b40 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34195b12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195b16:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34195b1a:	2b01      	cmp	r3, #1
34195b1c:	d010      	beq.n	34195b40 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34195b1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195b22:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34195b26:	2b02      	cmp	r3, #2
34195b28:	d00a      	beq.n	34195b40 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34195b2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195b2e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34195b32:	2b03      	cmp	r3, #3
34195b34:	d004      	beq.n	34195b40 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34195b36:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34195b3a:	4810      	ldr	r0, [pc, #64]	@ (34195b7c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34195b3c:	f7ec fb96 	bl	3418226c <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34195b40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34195b44:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34195b48:	4618      	mov	r0, r3
34195b4a:	f7f8 fd31 	bl	3418e5b0 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34195b4e:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
34195b52:	2b00      	cmp	r3, #0
34195b54:	d101      	bne.n	34195b5a <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
34195b56:	2300      	movs	r3, #0
34195b58:	e000      	b.n	34195b5c <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
34195b5a:	2301      	movs	r3, #1
}
34195b5c:	4618      	mov	r0, r3
34195b5e:	f507 7764 	add.w	r7, r7, #912	@ 0x390
34195b62:	46bd      	mov	sp, r7
34195b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34195b68:	03000c14 	.word	0x03000c14
34195b6c:	03010c14 	.word	0x03010c14
34195b70:	03020c14 	.word	0x03020c14
34195b74:	03030c14 	.word	0x03030c14
34195b78:	83030c14 	.word	0x83030c14
34195b7c:	341a5394 	.word	0x341a5394
34195b80:	56028000 	.word	0x56028000
34195b84:	03001414 	.word	0x03001414
34195b88:	03011414 	.word	0x03011414
34195b8c:	03021414 	.word	0x03021414
34195b90:	03031414 	.word	0x03031414
34195b94:	83031414 	.word	0x83031414

34195b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34195b98:	b590      	push	{r4, r7, lr}
34195b9a:	b085      	sub	sp, #20
34195b9c:	af00      	add	r7, sp, #0
34195b9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34195ba2:	2100      	movs	r1, #0
34195ba4:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34195ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195baa:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34195bae:	ea50 0104 	orrs.w	r1, r0, r4
34195bb2:	f000 8436 	beq.w	34196422 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
34195bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195bba:	2801      	cmp	r0, #1
34195bbc:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34195bc0:	f080 8434 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195bc8:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34195bcc:	ea50 0104 	orrs.w	r1, r0, r4
34195bd0:	f000 8422 	beq.w	34196418 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
34195bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195bd8:	2801      	cmp	r0, #1
34195bda:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
34195bde:	f080 8425 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195be2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195be6:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
34195bea:	ea50 0104 	orrs.w	r1, r0, r4
34195bee:	f000 840e 	beq.w	3419640e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
34195bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195bf6:	2801      	cmp	r0, #1
34195bf8:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
34195bfc:	f080 8416 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c00:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c04:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34195c08:	ea50 0104 	orrs.w	r1, r0, r4
34195c0c:	f000 83fa 	beq.w	34196404 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34195c10:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c14:	2801      	cmp	r0, #1
34195c16:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34195c1a:	f080 8407 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c22:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34195c26:	ea50 0104 	orrs.w	r1, r0, r4
34195c2a:	f000 83e6 	beq.w	341963fa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34195c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c32:	2801      	cmp	r0, #1
34195c34:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34195c38:	f080 83f8 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c40:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34195c44:	ea50 0104 	orrs.w	r1, r0, r4
34195c48:	f000 83d2 	beq.w	341963f0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34195c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c50:	2801      	cmp	r0, #1
34195c52:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34195c56:	f080 83e9 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c5e:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34195c62:	ea50 0104 	orrs.w	r1, r0, r4
34195c66:	f000 83be 	beq.w	341963e6 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34195c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c6e:	2801      	cmp	r0, #1
34195c70:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34195c74:	f080 83da 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c78:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c7c:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34195c80:	ea50 0104 	orrs.w	r1, r0, r4
34195c84:	f000 83aa 	beq.w	341963dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34195c88:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c8c:	2801      	cmp	r0, #1
34195c8e:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34195c92:	f080 83cb 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195c96:	e9d7 0100 	ldrd	r0, r1, [r7]
34195c9a:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34195c9e:	ea50 0104 	orrs.w	r1, r0, r4
34195ca2:	f000 8396 	beq.w	341963d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
34195ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195caa:	2801      	cmp	r0, #1
34195cac:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34195cb0:	f080 83bc 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195cb8:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34195cbc:	ea50 0104 	orrs.w	r1, r0, r4
34195cc0:	f000 8382 	beq.w	341963c8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
34195cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195cc8:	2801      	cmp	r0, #1
34195cca:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
34195cce:	f080 83ad 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195cd6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
34195cda:	ea50 0104 	orrs.w	r1, r0, r4
34195cde:	f000 836e 	beq.w	341963be <HAL_RCCEx_GetPeriphCLKFreq+0x826>
34195ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195ce6:	2801      	cmp	r0, #1
34195ce8:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
34195cec:	f080 839e 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
34195cf4:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
34195cf8:	ea50 0104 	orrs.w	r1, r0, r4
34195cfc:	f000 835a 	beq.w	341963b4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
34195d00:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d04:	2801      	cmp	r0, #1
34195d06:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
34195d0a:	f080 838f 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d12:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
34195d16:	ea50 0104 	orrs.w	r1, r0, r4
34195d1a:	f000 8346 	beq.w	341963aa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
34195d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d22:	2801      	cmp	r0, #1
34195d24:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34195d28:	f080 8380 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d30:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34195d34:	ea50 0104 	orrs.w	r1, r0, r4
34195d38:	f000 8332 	beq.w	341963a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34195d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d40:	2801      	cmp	r0, #1
34195d42:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34195d46:	f080 8371 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d4e:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
34195d52:	ea50 0104 	orrs.w	r1, r0, r4
34195d56:	f000 831e 	beq.w	34196396 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34195d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d5e:	2801      	cmp	r0, #1
34195d60:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
34195d64:	f080 8362 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195d68:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d6c:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34195d70:	ea50 0104 	orrs.w	r1, r0, r4
34195d74:	f000 830a 	beq.w	3419638c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34195d78:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d7c:	2801      	cmp	r0, #1
34195d7e:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
34195d82:	f080 8353 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195d86:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d8a:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
34195d8e:	ea50 0104 	orrs.w	r1, r0, r4
34195d92:	f000 82f6 	beq.w	34196382 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
34195d96:	e9d7 0100 	ldrd	r0, r1, [r7]
34195d9a:	2801      	cmp	r0, #1
34195d9c:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34195da0:	f080 8344 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195da4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195da8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34195dac:	ea50 0104 	orrs.w	r1, r0, r4
34195db0:	f000 82e2 	beq.w	34196378 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
34195db4:	e9d7 0100 	ldrd	r0, r1, [r7]
34195db8:	2801      	cmp	r0, #1
34195dba:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34195dbe:	f080 8335 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195dc6:	f1a1 0420 	sub.w	r4, r1, #32
34195dca:	ea50 0104 	orrs.w	r1, r0, r4
34195dce:	f000 82ce 	beq.w	3419636e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
34195dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
34195dd6:	2801      	cmp	r0, #1
34195dd8:	f171 0120 	sbcs.w	r1, r1, #32
34195ddc:	f080 8326 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195de0:	e9d7 0100 	ldrd	r0, r1, [r7]
34195de4:	f1a1 0410 	sub.w	r4, r1, #16
34195de8:	ea50 0104 	orrs.w	r1, r0, r4
34195dec:	f000 82ba 	beq.w	34196364 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
34195df0:	e9d7 0100 	ldrd	r0, r1, [r7]
34195df4:	2801      	cmp	r0, #1
34195df6:	f171 0110 	sbcs.w	r1, r1, #16
34195dfa:	f080 8317 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e02:	f1a1 0408 	sub.w	r4, r1, #8
34195e06:	ea50 0104 	orrs.w	r1, r0, r4
34195e0a:	f000 82a6 	beq.w	3419635a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
34195e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e12:	2801      	cmp	r0, #1
34195e14:	f171 0108 	sbcs.w	r1, r1, #8
34195e18:	f080 8308 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e20:	1f0c      	subs	r4, r1, #4
34195e22:	ea50 0104 	orrs.w	r1, r0, r4
34195e26:	f000 8293 	beq.w	34196350 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34195e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e2e:	2801      	cmp	r0, #1
34195e30:	f171 0104 	sbcs.w	r1, r1, #4
34195e34:	f080 82fa 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195e38:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e3c:	1e8c      	subs	r4, r1, #2
34195e3e:	ea50 0104 	orrs.w	r1, r0, r4
34195e42:	f000 8280 	beq.w	34196346 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34195e46:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e4a:	2801      	cmp	r0, #1
34195e4c:	f171 0102 	sbcs.w	r1, r1, #2
34195e50:	f080 82ec 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195e54:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e58:	1e4c      	subs	r4, r1, #1
34195e5a:	ea50 0104 	orrs.w	r1, r0, r4
34195e5e:	f000 826d 	beq.w	3419633c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
34195e62:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e66:	2801      	cmp	r0, #1
34195e68:	f171 0101 	sbcs.w	r1, r1, #1
34195e6c:	f080 82de 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195e70:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e74:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34195e78:	4321      	orrs	r1, r4
34195e7a:	f000 825a 	beq.w	34196332 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
34195e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e82:	4cda      	ldr	r4, [pc, #872]	@ (341961ec <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
34195e84:	42a0      	cmp	r0, r4
34195e86:	f171 0100 	sbcs.w	r1, r1, #0
34195e8a:	f080 82cf 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195e92:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
34195e96:	4321      	orrs	r1, r4
34195e98:	f000 8246 	beq.w	34196328 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34195e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195ea0:	4cd3      	ldr	r4, [pc, #844]	@ (341961f0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
34195ea2:	42a0      	cmp	r0, r4
34195ea4:	f171 0100 	sbcs.w	r1, r1, #0
34195ea8:	f080 82c0 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195eac:	e9d7 0100 	ldrd	r0, r1, [r7]
34195eb0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
34195eb4:	4321      	orrs	r1, r4
34195eb6:	f000 8232 	beq.w	3419631e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
34195eba:	e9d7 0100 	ldrd	r0, r1, [r7]
34195ebe:	4ccd      	ldr	r4, [pc, #820]	@ (341961f4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34195ec0:	42a0      	cmp	r0, r4
34195ec2:	f171 0100 	sbcs.w	r1, r1, #0
34195ec6:	f080 82b1 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195eca:	e9d7 0100 	ldrd	r0, r1, [r7]
34195ece:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
34195ed2:	4321      	orrs	r1, r4
34195ed4:	f000 821e 	beq.w	34196314 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
34195ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
34195edc:	4cc6      	ldr	r4, [pc, #792]	@ (341961f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
34195ede:	42a0      	cmp	r0, r4
34195ee0:	f171 0100 	sbcs.w	r1, r1, #0
34195ee4:	f080 82a2 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
34195eec:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
34195ef0:	4321      	orrs	r1, r4
34195ef2:	f000 820b 	beq.w	3419630c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
34195ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195efa:	4cc0      	ldr	r4, [pc, #768]	@ (341961fc <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
34195efc:	42a0      	cmp	r0, r4
34195efe:	f171 0100 	sbcs.w	r1, r1, #0
34195f02:	f080 8293 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f06:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f0a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
34195f0e:	4321      	orrs	r1, r4
34195f10:	f000 81f7 	beq.w	34196302 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34195f14:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f18:	4cb9      	ldr	r4, [pc, #740]	@ (34196200 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
34195f1a:	42a0      	cmp	r0, r4
34195f1c:	f171 0100 	sbcs.w	r1, r1, #0
34195f20:	f080 8284 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f24:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f28:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34195f2c:	4321      	orrs	r1, r4
34195f2e:	f000 81e2 	beq.w	341962f6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34195f32:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f36:	4cb3      	ldr	r4, [pc, #716]	@ (34196204 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34195f38:	42a0      	cmp	r0, r4
34195f3a:	f171 0100 	sbcs.w	r1, r1, #0
34195f3e:	f080 8275 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f42:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f46:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34195f4a:	4321      	orrs	r1, r4
34195f4c:	f000 81cd 	beq.w	341962ea <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34195f50:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f54:	4cac      	ldr	r4, [pc, #688]	@ (34196208 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34195f56:	42a0      	cmp	r0, r4
34195f58:	f171 0100 	sbcs.w	r1, r1, #0
34195f5c:	f080 8266 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f60:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f64:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34195f68:	4321      	orrs	r1, r4
34195f6a:	f000 81b8 	beq.w	341962de <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34195f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f72:	4ca6      	ldr	r4, [pc, #664]	@ (3419620c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
34195f74:	42a0      	cmp	r0, r4
34195f76:	f171 0100 	sbcs.w	r1, r1, #0
34195f7a:	f080 8257 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f82:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
34195f86:	4321      	orrs	r1, r4
34195f88:	f000 81a4 	beq.w	341962d4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34195f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195f90:	4c9f      	ldr	r4, [pc, #636]	@ (34196210 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
34195f92:	42a0      	cmp	r0, r4
34195f94:	f171 0100 	sbcs.w	r1, r1, #0
34195f98:	f080 8248 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fa0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
34195fa4:	4321      	orrs	r1, r4
34195fa6:	f000 8190 	beq.w	341962ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34195faa:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fae:	4c99      	ldr	r4, [pc, #612]	@ (34196214 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34195fb0:	42a0      	cmp	r0, r4
34195fb2:	f171 0100 	sbcs.w	r1, r1, #0
34195fb6:	f080 8239 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195fba:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fbe:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
34195fc2:	4321      	orrs	r1, r4
34195fc4:	f000 817c 	beq.w	341962c0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34195fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fcc:	4c92      	ldr	r4, [pc, #584]	@ (34196218 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34195fce:	42a0      	cmp	r0, r4
34195fd0:	f171 0100 	sbcs.w	r1, r1, #0
34195fd4:	f080 822a 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fdc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34195fe0:	4321      	orrs	r1, r4
34195fe2:	f000 8168 	beq.w	341962b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
34195fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195fea:	4c8c      	ldr	r4, [pc, #560]	@ (3419621c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34195fec:	42a0      	cmp	r0, r4
34195fee:	f171 0100 	sbcs.w	r1, r1, #0
34195ff2:	f080 821b 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34195ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
34195ffa:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34195ffe:	4321      	orrs	r1, r4
34196000:	f000 8154 	beq.w	341962ac <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34196004:	e9d7 0100 	ldrd	r0, r1, [r7]
34196008:	4c85      	ldr	r4, [pc, #532]	@ (34196220 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
3419600a:	42a0      	cmp	r0, r4
3419600c:	f171 0100 	sbcs.w	r1, r1, #0
34196010:	f080 820c 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196014:	e9d7 0100 	ldrd	r0, r1, [r7]
34196018:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
3419601c:	4321      	orrs	r1, r4
3419601e:	f000 8140 	beq.w	341962a2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34196022:	e9d7 0100 	ldrd	r0, r1, [r7]
34196026:	4c7f      	ldr	r4, [pc, #508]	@ (34196224 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34196028:	42a0      	cmp	r0, r4
3419602a:	f171 0100 	sbcs.w	r1, r1, #0
3419602e:	f080 81fd 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196032:	e9d7 0100 	ldrd	r0, r1, [r7]
34196036:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3419603a:	4321      	orrs	r1, r4
3419603c:	f000 812c 	beq.w	34196298 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34196040:	e9d7 0100 	ldrd	r0, r1, [r7]
34196044:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34196048:	f171 0100 	sbcs.w	r1, r1, #0
3419604c:	f080 81ee 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196050:	e9d7 0100 	ldrd	r0, r1, [r7]
34196054:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34196058:	4321      	orrs	r1, r4
3419605a:	f000 8118 	beq.w	3419628e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3419605e:	e9d7 0100 	ldrd	r0, r1, [r7]
34196062:	f248 0401 	movw	r4, #32769	@ 0x8001
34196066:	42a0      	cmp	r0, r4
34196068:	f171 0100 	sbcs.w	r1, r1, #0
3419606c:	f080 81de 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196070:	e9d7 0100 	ldrd	r0, r1, [r7]
34196074:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34196078:	4321      	orrs	r1, r4
3419607a:	f000 8103 	beq.w	34196284 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3419607e:	e9d7 0100 	ldrd	r0, r1, [r7]
34196082:	f244 0401 	movw	r4, #16385	@ 0x4001
34196086:	42a0      	cmp	r0, r4
34196088:	f171 0100 	sbcs.w	r1, r1, #0
3419608c:	f080 81ce 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196090:	e9d7 0100 	ldrd	r0, r1, [r7]
34196094:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34196098:	4321      	orrs	r1, r4
3419609a:	f000 80ee 	beq.w	3419627a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3419609e:	e9d7 0100 	ldrd	r0, r1, [r7]
341960a2:	f242 0401 	movw	r4, #8193	@ 0x2001
341960a6:	42a0      	cmp	r0, r4
341960a8:	f171 0100 	sbcs.w	r1, r1, #0
341960ac:	f080 81be 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341960b0:	e9d7 0100 	ldrd	r0, r1, [r7]
341960b4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
341960b8:	4321      	orrs	r1, r4
341960ba:	f000 80d9 	beq.w	34196270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
341960be:	e9d7 0100 	ldrd	r0, r1, [r7]
341960c2:	f241 0401 	movw	r4, #4097	@ 0x1001
341960c6:	42a0      	cmp	r0, r4
341960c8:	f171 0100 	sbcs.w	r1, r1, #0
341960cc:	f080 81ae 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341960d0:	e9d7 0100 	ldrd	r0, r1, [r7]
341960d4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
341960d8:	4321      	orrs	r1, r4
341960da:	f000 80c4 	beq.w	34196266 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
341960de:	e9d7 0100 	ldrd	r0, r1, [r7]
341960e2:	f640 0401 	movw	r4, #2049	@ 0x801
341960e6:	42a0      	cmp	r0, r4
341960e8:	f171 0100 	sbcs.w	r1, r1, #0
341960ec:	f080 819e 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341960f0:	e9d7 0100 	ldrd	r0, r1, [r7]
341960f4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
341960f8:	4321      	orrs	r1, r4
341960fa:	f000 80af 	beq.w	3419625c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
341960fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34196102:	f240 4401 	movw	r4, #1025	@ 0x401
34196106:	42a0      	cmp	r0, r4
34196108:	f171 0100 	sbcs.w	r1, r1, #0
3419610c:	f080 818e 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196110:	e9d7 0100 	ldrd	r0, r1, [r7]
34196114:	2821      	cmp	r0, #33	@ 0x21
34196116:	f171 0100 	sbcs.w	r1, r1, #0
3419611a:	d255      	bcs.n	341961c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
3419611c:	e9d7 0100 	ldrd	r0, r1, [r7]
34196120:	4301      	orrs	r1, r0
34196122:	f000 8183 	beq.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196126:	e9d7 0100 	ldrd	r0, r1, [r7]
3419612a:	1e42      	subs	r2, r0, #1
3419612c:	f141 33ff 	adc.w	r3, r1, #4294967295
34196130:	2a20      	cmp	r2, #32
34196132:	f173 0100 	sbcs.w	r1, r3, #0
34196136:	f080 8179 	bcs.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3419613a:	2a1f      	cmp	r2, #31
3419613c:	f200 8176 	bhi.w	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34196140:	a101      	add	r1, pc, #4	@ (adr r1, 34196148 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34196142:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34196146:	bf00      	nop
34196148:	341961d7 	.word	0x341961d7
3419614c:	341961e1 	.word	0x341961e1
34196150:	3419642d 	.word	0x3419642d
34196154:	34196231 	.word	0x34196231
34196158:	3419642d 	.word	0x3419642d
3419615c:	3419642d 	.word	0x3419642d
34196160:	3419642d 	.word	0x3419642d
34196164:	34196229 	.word	0x34196229
34196168:	3419642d 	.word	0x3419642d
3419616c:	3419642d 	.word	0x3419642d
34196170:	3419642d 	.word	0x3419642d
34196174:	3419642d 	.word	0x3419642d
34196178:	3419642d 	.word	0x3419642d
3419617c:	3419642d 	.word	0x3419642d
34196180:	3419642d 	.word	0x3419642d
34196184:	3419623b 	.word	0x3419623b
34196188:	3419642d 	.word	0x3419642d
3419618c:	3419642d 	.word	0x3419642d
34196190:	3419642d 	.word	0x3419642d
34196194:	3419642d 	.word	0x3419642d
34196198:	3419642d 	.word	0x3419642d
3419619c:	3419642d 	.word	0x3419642d
341961a0:	3419642d 	.word	0x3419642d
341961a4:	3419642d 	.word	0x3419642d
341961a8:	3419642d 	.word	0x3419642d
341961ac:	3419642d 	.word	0x3419642d
341961b0:	3419642d 	.word	0x3419642d
341961b4:	3419642d 	.word	0x3419642d
341961b8:	3419642d 	.word	0x3419642d
341961bc:	3419642d 	.word	0x3419642d
341961c0:	3419642d 	.word	0x3419642d
341961c4:	34196247 	.word	0x34196247
341961c8:	e9d7 2300 	ldrd	r2, r3, [r7]
341961cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
341961d0:	430b      	orrs	r3, r1
341961d2:	d03e      	beq.n	34196252 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
341961d4:	e12a      	b.n	3419642c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
341961d6:	2070      	movs	r0, #112	@ 0x70
341961d8:	f000 fb90 	bl	341968fc <RCCEx_GetADCCLKFreq>
341961dc:	60f8      	str	r0, [r7, #12]
      break;
341961de:	e126      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
341961e0:	2007      	movs	r0, #7
341961e2:	f000 fc8d 	bl	34196b00 <RCCEx_GetADFCLKFreq>
341961e6:	60f8      	str	r0, [r7, #12]
      break;
341961e8:	e121      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
341961ea:	bf00      	nop
341961ec:	80000001 	.word	0x80000001
341961f0:	40000001 	.word	0x40000001
341961f4:	20000001 	.word	0x20000001
341961f8:	10000001 	.word	0x10000001
341961fc:	08000001 	.word	0x08000001
34196200:	04000001 	.word	0x04000001
34196204:	02000001 	.word	0x02000001
34196208:	01000001 	.word	0x01000001
3419620c:	00800001 	.word	0x00800001
34196210:	00400001 	.word	0x00400001
34196214:	00200001 	.word	0x00200001
34196218:	00100001 	.word	0x00100001
3419621c:	00080001 	.word	0x00080001
34196220:	00040001 	.word	0x00040001
34196224:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34196228:	f000 ff0c 	bl	34197044 <RCCEx_GetCSICLKFreq>
3419622c:	60f8      	str	r0, [r7, #12]
      break;
3419622e:	e0fe      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34196230:	2007      	movs	r0, #7
34196232:	f000 fd51 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34196236:	60f8      	str	r0, [r7, #12]
      break;
34196238:	e0f9      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
3419623a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3419623e:	f000 ff4d 	bl	341970dc <RCCEx_GetDCMIPPCLKFreq>
34196242:	60f8      	str	r0, [r7, #12]
      break;
34196244:	e0f3      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34196246:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
3419624a:	f000 ffd1 	bl	341971f0 <RCCEx_GetETH1CLKFreq>
3419624e:	60f8      	str	r0, [r7, #12]
      break;
34196250:	e0ed      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34196252:	2003      	movs	r0, #3
34196254:	f001 f84c 	bl	341972f0 <RCCEx_GetETH1PTPCLKFreq>
34196258:	60f8      	str	r0, [r7, #12]
      break;
3419625a:	e0e8      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
3419625c:	2003      	movs	r0, #3
3419625e:	f001 f8cb 	bl	341973f8 <RCCEx_GetFDCANCLKFreq>
34196262:	60f8      	str	r0, [r7, #12]
      break;
34196264:	e0e3      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34196266:	2030      	movs	r0, #48	@ 0x30
34196268:	f001 f946 	bl	341974f8 <RCCEx_GetFMCCLKFreq>
3419626c:	60f8      	str	r0, [r7, #12]
      break;
3419626e:	e0de      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34196270:	4871      	ldr	r0, [pc, #452]	@ (34196438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34196272:	f001 f9f9 	bl	34197668 <RCCEx_GetI2CCLKFreq>
34196276:	60f8      	str	r0, [r7, #12]
      break;
34196278:	e0d9      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3419627a:	4870      	ldr	r0, [pc, #448]	@ (3419643c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
3419627c:	f001 f9f4 	bl	34197668 <RCCEx_GetI2CCLKFreq>
34196280:	60f8      	str	r0, [r7, #12]
      break;
34196282:	e0d4      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34196284:	486e      	ldr	r0, [pc, #440]	@ (34196440 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34196286:	f001 f9ef 	bl	34197668 <RCCEx_GetI2CCLKFreq>
3419628a:	60f8      	str	r0, [r7, #12]
      break;
3419628c:	e0cf      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3419628e:	486d      	ldr	r0, [pc, #436]	@ (34196444 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34196290:	f001 f9ea 	bl	34197668 <RCCEx_GetI2CCLKFreq>
34196294:	60f8      	str	r0, [r7, #12]
      break;
34196296:	e0ca      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34196298:	486b      	ldr	r0, [pc, #428]	@ (34196448 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
3419629a:	f001 fb8d 	bl	341979b8 <RCCEx_GetI3CCLKFreq>
3419629e:	60f8      	str	r0, [r7, #12]
      break;
341962a0:	e0c5      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
341962a2:	486a      	ldr	r0, [pc, #424]	@ (3419644c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
341962a4:	f001 fb88 	bl	341979b8 <RCCEx_GetI3CCLKFreq>
341962a8:	60f8      	str	r0, [r7, #12]
      break;
341962aa:	e0c0      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
341962ac:	4868      	ldr	r0, [pc, #416]	@ (34196450 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
341962ae:	f001 fcb7 	bl	34197c20 <RCCEx_GetLPTIMCLKFreq>
341962b2:	60f8      	str	r0, [r7, #12]
      break;
341962b4:	e0bb      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
341962b6:	4867      	ldr	r0, [pc, #412]	@ (34196454 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
341962b8:	f001 fcb2 	bl	34197c20 <RCCEx_GetLPTIMCLKFreq>
341962bc:	60f8      	str	r0, [r7, #12]
      break;
341962be:	e0b6      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
341962c0:	4865      	ldr	r0, [pc, #404]	@ (34196458 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
341962c2:	f001 fcad 	bl	34197c20 <RCCEx_GetLPTIMCLKFreq>
341962c6:	60f8      	str	r0, [r7, #12]
      break;
341962c8:	e0b1      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
341962ca:	4864      	ldr	r0, [pc, #400]	@ (3419645c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
341962cc:	f001 fca8 	bl	34197c20 <RCCEx_GetLPTIMCLKFreq>
341962d0:	60f8      	str	r0, [r7, #12]
      break;
341962d2:	e0ac      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
341962d4:	4862      	ldr	r0, [pc, #392]	@ (34196460 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
341962d6:	f001 fca3 	bl	34197c20 <RCCEx_GetLPTIMCLKFreq>
341962da:	60f8      	str	r0, [r7, #12]
      break;
341962dc:	e0a7      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
341962de:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
341962e2:	f001 fe47 	bl	34197f74 <RCCEx_GetLPUARTCLKFreq>
341962e6:	60f8      	str	r0, [r7, #12]
      break;
341962e8:	e0a1      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
341962ea:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
341962ee:	f001 ff43 	bl	34198178 <RCCEx_GetLTDCCLKFreq>
341962f2:	60f8      	str	r0, [r7, #12]
      break;
341962f4:	e09b      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
341962f6:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
341962fa:	f001 ffc7 	bl	3419828c <RCCEx_GetMDFCLKFreq>
341962fe:	60f8      	str	r0, [r7, #12]
      break;
34196300:	e095      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34196302:	2030      	movs	r0, #48	@ 0x30
34196304:	f002 f8cc 	bl	341984a0 <RCCEx_GetPSSICLKFreq>
34196308:	60f8      	str	r0, [r7, #12]
      break;
3419630a:	e090      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
3419630c:	f002 f94a 	bl	341985a4 <RCCEx_GetRTCCLKFreq>
34196310:	60f8      	str	r0, [r7, #12]
      break;
34196312:	e08c      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34196314:	4853      	ldr	r0, [pc, #332]	@ (34196464 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34196316:	f002 f997 	bl	34198648 <RCCEx_GetSAICLKFreq>
3419631a:	60f8      	str	r0, [r7, #12]
      break;
3419631c:	e087      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3419631e:	4852      	ldr	r0, [pc, #328]	@ (34196468 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34196320:	f002 f992 	bl	34198648 <RCCEx_GetSAICLKFreq>
34196324:	60f8      	str	r0, [r7, #12]
      break;
34196326:	e082      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34196328:	4850      	ldr	r0, [pc, #320]	@ (3419646c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
3419632a:	f002 faf3 	bl	34198914 <RCCEx_GetSDMMCCLKFreq>
3419632e:	60f8      	str	r0, [r7, #12]
      break;
34196330:	e07d      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34196332:	484f      	ldr	r0, [pc, #316]	@ (34196470 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34196334:	f002 faee 	bl	34198914 <RCCEx_GetSDMMCCLKFreq>
34196338:	60f8      	str	r0, [r7, #12]
      break;
3419633a:	e078      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3419633c:	2007      	movs	r0, #7
3419633e:	f002 fbd3 	bl	34198ae8 <RCCEx_GetSPDIFRXCLKFreq>
34196342:	60f8      	str	r0, [r7, #12]
      break;
34196344:	e073      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34196346:	484b      	ldr	r0, [pc, #300]	@ (34196474 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34196348:	f002 fcb2 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
3419634c:	60f8      	str	r0, [r7, #12]
      break;
3419634e:	e06e      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34196350:	4849      	ldr	r0, [pc, #292]	@ (34196478 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34196352:	f002 fcad 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
34196356:	60f8      	str	r0, [r7, #12]
      break;
34196358:	e069      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
3419635a:	4848      	ldr	r0, [pc, #288]	@ (3419647c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
3419635c:	f002 fca8 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
34196360:	60f8      	str	r0, [r7, #12]
      break;
34196362:	e064      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34196364:	4846      	ldr	r0, [pc, #280]	@ (34196480 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34196366:	f002 fca3 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
3419636a:	60f8      	str	r0, [r7, #12]
      break;
3419636c:	e05f      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3419636e:	4845      	ldr	r0, [pc, #276]	@ (34196484 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34196370:	f002 fc9e 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
34196374:	60f8      	str	r0, [r7, #12]
      break;
34196376:	e05a      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34196378:	4843      	ldr	r0, [pc, #268]	@ (34196488 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
3419637a:	f002 fc99 	bl	34198cb0 <RCCEx_GetSPICLKFreq>
3419637e:	60f8      	str	r0, [r7, #12]
      break;
34196380:	e055      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34196382:	4842      	ldr	r0, [pc, #264]	@ (3419648c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34196384:	f003 f990 	bl	341996a8 <RCCEx_GetUSARTCLKFreq>
34196388:	60f8      	str	r0, [r7, #12]
      break;
3419638a:	e050      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3419638c:	4840      	ldr	r0, [pc, #256]	@ (34196490 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
3419638e:	f003 f98b 	bl	341996a8 <RCCEx_GetUSARTCLKFreq>
34196392:	60f8      	str	r0, [r7, #12]
      break;
34196394:	e04b      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34196396:	483f      	ldr	r0, [pc, #252]	@ (34196494 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34196398:	f003 f986 	bl	341996a8 <RCCEx_GetUSARTCLKFreq>
3419639c:	60f8      	str	r0, [r7, #12]
      break;
3419639e:	e046      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
341963a0:	483d      	ldr	r0, [pc, #244]	@ (34196498 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
341963a2:	f002 ff57 	bl	34199254 <RCCEx_GetUARTCLKFreq>
341963a6:	60f8      	str	r0, [r7, #12]
      break;
341963a8:	e041      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
341963aa:	483c      	ldr	r0, [pc, #240]	@ (3419649c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
341963ac:	f002 ff52 	bl	34199254 <RCCEx_GetUARTCLKFreq>
341963b0:	60f8      	str	r0, [r7, #12]
      break;
341963b2:	e03c      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
341963b4:	483a      	ldr	r0, [pc, #232]	@ (341964a0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
341963b6:	f003 f977 	bl	341996a8 <RCCEx_GetUSARTCLKFreq>
341963ba:	60f8      	str	r0, [r7, #12]
      break;
341963bc:	e037      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
341963be:	4839      	ldr	r0, [pc, #228]	@ (341964a4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
341963c0:	f002 ff48 	bl	34199254 <RCCEx_GetUARTCLKFreq>
341963c4:	60f8      	str	r0, [r7, #12]
      break;
341963c6:	e032      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
341963c8:	4837      	ldr	r0, [pc, #220]	@ (341964a8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
341963ca:	f002 ff43 	bl	34199254 <RCCEx_GetUARTCLKFreq>
341963ce:	60f8      	str	r0, [r7, #12]
      break;
341963d0:	e02d      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
341963d2:	4836      	ldr	r0, [pc, #216]	@ (341964ac <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
341963d4:	f002 ff3e 	bl	34199254 <RCCEx_GetUARTCLKFreq>
341963d8:	60f8      	str	r0, [r7, #12]
      break;
341963da:	e028      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
341963dc:	4834      	ldr	r0, [pc, #208]	@ (341964b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
341963de:	f003 f963 	bl	341996a8 <RCCEx_GetUSARTCLKFreq>
341963e2:	60f8      	str	r0, [r7, #12]
      break;
341963e4:	e023      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
341963e6:	4833      	ldr	r0, [pc, #204]	@ (341964b4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
341963e8:	f003 fc3e 	bl	34199c68 <RCCEx_GetOTGPHYCKREFCLKFreq>
341963ec:	60f8      	str	r0, [r7, #12]
      break;
341963ee:	e01e      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
341963f0:	4831      	ldr	r0, [pc, #196]	@ (341964b8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
341963f2:	f003 fb83 	bl	34199afc <RCCEx_GetOTGPHYCLKFreq>
341963f6:	60f8      	str	r0, [r7, #12]
      break;
341963f8:	e019      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
341963fa:	4830      	ldr	r0, [pc, #192]	@ (341964bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
341963fc:	f003 fc34 	bl	34199c68 <RCCEx_GetOTGPHYCKREFCLKFreq>
34196400:	60f8      	str	r0, [r7, #12]
      break;
34196402:	e014      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34196404:	482e      	ldr	r0, [pc, #184]	@ (341964c0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34196406:	f003 fb79 	bl	34199afc <RCCEx_GetOTGPHYCLKFreq>
3419640a:	60f8      	str	r0, [r7, #12]
      break;
3419640c:	e00f      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3419640e:	482d      	ldr	r0, [pc, #180]	@ (341964c4 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34196410:	f003 fc7a 	bl	34199d08 <RCCEx_GetXSPICLKFreq>
34196414:	60f8      	str	r0, [r7, #12]
      break;
34196416:	e00a      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34196418:	482b      	ldr	r0, [pc, #172]	@ (341964c8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
3419641a:	f003 fc75 	bl	34199d08 <RCCEx_GetXSPICLKFreq>
3419641e:	60f8      	str	r0, [r7, #12]
      break;
34196420:	e005      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34196422:	482a      	ldr	r0, [pc, #168]	@ (341964cc <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34196424:	f003 fc70 	bl	34199d08 <RCCEx_GetXSPICLKFreq>
34196428:	60f8      	str	r0, [r7, #12]
      break;
3419642a:	e000      	b.n	3419642e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
3419642c:	bf00      	nop
  }

  return frequency;
3419642e:	68fb      	ldr	r3, [r7, #12]
}
34196430:	4618      	mov	r0, r3
34196432:	3714      	adds	r7, #20
34196434:	46bd      	mov	sp, r7
34196436:	bd90      	pop	{r4, r7, pc}
34196438:	0700000c 	.word	0x0700000c
3419643c:	0700040c 	.word	0x0700040c
34196440:	0700080c 	.word	0x0700080c
34196444:	07000c0c 	.word	0x07000c0c
34196448:	0700100c 	.word	0x0700100c
3419644c:	0700140c 	.word	0x0700140c
34196450:	0700082c 	.word	0x0700082c
34196454:	07000c2c 	.word	0x07000c2c
34196458:	0700102c 	.word	0x0700102c
3419645c:	0700142c 	.word	0x0700142c
34196460:	0700182c 	.word	0x0700182c
34196464:	07001418 	.word	0x07001418
34196468:	07001818 	.word	0x07001818
3419646c:	0300001c 	.word	0x0300001c
34196470:	0300041c 	.word	0x0300041c
34196474:	07000420 	.word	0x07000420
34196478:	07000820 	.word	0x07000820
3419647c:	07000c20 	.word	0x07000c20
34196480:	07001020 	.word	0x07001020
34196484:	07001420 	.word	0x07001420
34196488:	07001820 	.word	0x07001820
3419648c:	07000030 	.word	0x07000030
34196490:	07000430 	.word	0x07000430
34196494:	07000830 	.word	0x07000830
34196498:	07000c30 	.word	0x07000c30
3419649c:	07001030 	.word	0x07001030
341964a0:	07001430 	.word	0x07001430
341964a4:	07001830 	.word	0x07001830
341964a8:	07001c30 	.word	0x07001c30
341964ac:	07000034 	.word	0x07000034
341964b0:	07000434 	.word	0x07000434
341964b4:	01001014 	.word	0x01001014
341964b8:	03000c14 	.word	0x03000c14
341964bc:	01001814 	.word	0x01001814
341964c0:	03001414 	.word	0x03001414
341964c4:	03000014 	.word	0x03000014
341964c8:	03000414 	.word	0x03000414
341964cc:	03000814 	.word	0x03000814

341964d0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
341964d0:	b5f0      	push	{r4, r5, r6, r7, lr}
341964d2:	b087      	sub	sp, #28
341964d4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341964d6:	2300      	movs	r3, #0
341964d8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
341964da:	f7f8 f89b 	bl	3418e614 <LL_RCC_PLL1_IsReady>
341964de:	4603      	mov	r3, r0
341964e0:	2b00      	cmp	r3, #0
341964e2:	d02a      	beq.n	3419653a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
341964e4:	f7f8 f8fe 	bl	3418e6e4 <LL_RCC_PLL1P_IsEnabled>
341964e8:	4603      	mov	r3, r0
341964ea:	2b00      	cmp	r3, #0
341964ec:	d031      	beq.n	34196552 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
341964ee:	f7f8 f883 	bl	3418e5f8 <LL_RCC_PLL1_GetSource>
341964f2:	4603      	mov	r3, r0
341964f4:	4618      	mov	r0, r3
341964f6:	f000 f957 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
341964fa:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341964fc:	68bb      	ldr	r3, [r7, #8]
341964fe:	2b00      	cmp	r3, #0
34196500:	d027      	beq.n	34196552 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
34196502:	f7f8 f8bf 	bl	3418e684 <LL_RCC_PLL1_GetM>
34196506:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34196508:	687b      	ldr	r3, [r7, #4]
3419650a:	2b00      	cmp	r3, #0
3419650c:	d021      	beq.n	34196552 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3419650e:	f7f8 f8a9 	bl	3418e664 <LL_RCC_PLL1_GetN>
34196512:	4605      	mov	r5, r0
34196514:	f7f8 f8fa 	bl	3418e70c <LL_RCC_PLL1_GetFRACN>
34196518:	4606      	mov	r6, r0
3419651a:	f7f8 f8c3 	bl	3418e6a4 <LL_RCC_PLL1_GetP1>
3419651e:	4604      	mov	r4, r0
34196520:	f7f8 f8d0 	bl	3418e6c4 <LL_RCC_PLL1_GetP2>
34196524:	4603      	mov	r3, r0
34196526:	9301      	str	r3, [sp, #4]
34196528:	9400      	str	r4, [sp, #0]
3419652a:	4633      	mov	r3, r6
3419652c:	462a      	mov	r2, r5
3419652e:	6879      	ldr	r1, [r7, #4]
34196530:	68b8      	ldr	r0, [r7, #8]
34196532:	f000 f997 	bl	34196864 <RCCEx_CalcPLLFreq>
34196536:	60f8      	str	r0, [r7, #12]
34196538:	e00b      	b.n	34196552 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3419653a:	f7f8 f87f 	bl	3418e63c <LL_RCC_PLL1_IsEnabledBypass>
3419653e:	4603      	mov	r3, r0
34196540:	2b00      	cmp	r3, #0
34196542:	d006      	beq.n	34196552 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34196544:	f7f8 f858 	bl	3418e5f8 <LL_RCC_PLL1_GetSource>
34196548:	4603      	mov	r3, r0
3419654a:	4618      	mov	r0, r3
3419654c:	f000 f92c 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
34196550:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34196552:	68fb      	ldr	r3, [r7, #12]
}
34196554:	4618      	mov	r0, r3
34196556:	3714      	adds	r7, #20
34196558:	46bd      	mov	sp, r7
3419655a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3419655c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3419655c:	b5f0      	push	{r4, r5, r6, r7, lr}
3419655e:	b087      	sub	sp, #28
34196560:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34196562:	2300      	movs	r3, #0
34196564:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34196566:	f7f8 f8ed 	bl	3418e744 <LL_RCC_PLL2_IsReady>
3419656a:	4603      	mov	r3, r0
3419656c:	2b00      	cmp	r3, #0
3419656e:	d02a      	beq.n	341965c6 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34196570:	f7f8 f950 	bl	3418e814 <LL_RCC_PLL2P_IsEnabled>
34196574:	4603      	mov	r3, r0
34196576:	2b00      	cmp	r3, #0
34196578:	d031      	beq.n	341965de <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3419657a:	f7f8 f8d5 	bl	3418e728 <LL_RCC_PLL2_GetSource>
3419657e:	4603      	mov	r3, r0
34196580:	4618      	mov	r0, r3
34196582:	f000 f911 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
34196586:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34196588:	68bb      	ldr	r3, [r7, #8]
3419658a:	2b00      	cmp	r3, #0
3419658c:	d027      	beq.n	341965de <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3419658e:	f7f8 f911 	bl	3418e7b4 <LL_RCC_PLL2_GetM>
34196592:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34196594:	687b      	ldr	r3, [r7, #4]
34196596:	2b00      	cmp	r3, #0
34196598:	d021      	beq.n	341965de <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3419659a:	f7f8 f8fb 	bl	3418e794 <LL_RCC_PLL2_GetN>
3419659e:	4605      	mov	r5, r0
341965a0:	f7f8 f94c 	bl	3418e83c <LL_RCC_PLL2_GetFRACN>
341965a4:	4606      	mov	r6, r0
341965a6:	f7f8 f915 	bl	3418e7d4 <LL_RCC_PLL2_GetP1>
341965aa:	4604      	mov	r4, r0
341965ac:	f7f8 f922 	bl	3418e7f4 <LL_RCC_PLL2_GetP2>
341965b0:	4603      	mov	r3, r0
341965b2:	9301      	str	r3, [sp, #4]
341965b4:	9400      	str	r4, [sp, #0]
341965b6:	4633      	mov	r3, r6
341965b8:	462a      	mov	r2, r5
341965ba:	6879      	ldr	r1, [r7, #4]
341965bc:	68b8      	ldr	r0, [r7, #8]
341965be:	f000 f951 	bl	34196864 <RCCEx_CalcPLLFreq>
341965c2:	60f8      	str	r0, [r7, #12]
341965c4:	e00b      	b.n	341965de <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
341965c6:	f7f8 f8d1 	bl	3418e76c <LL_RCC_PLL2_IsEnabledBypass>
341965ca:	4603      	mov	r3, r0
341965cc:	2b00      	cmp	r3, #0
341965ce:	d006      	beq.n	341965de <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341965d0:	f7f8 f8aa 	bl	3418e728 <LL_RCC_PLL2_GetSource>
341965d4:	4603      	mov	r3, r0
341965d6:	4618      	mov	r0, r3
341965d8:	f000 f8e6 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
341965dc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341965de:	68fb      	ldr	r3, [r7, #12]
}
341965e0:	4618      	mov	r0, r3
341965e2:	3714      	adds	r7, #20
341965e4:	46bd      	mov	sp, r7
341965e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

341965e8 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
341965e8:	b5f0      	push	{r4, r5, r6, r7, lr}
341965ea:	b087      	sub	sp, #28
341965ec:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341965ee:	2300      	movs	r3, #0
341965f0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
341965f2:	f7f8 f93f 	bl	3418e874 <LL_RCC_PLL3_IsReady>
341965f6:	4603      	mov	r3, r0
341965f8:	2b00      	cmp	r3, #0
341965fa:	d02a      	beq.n	34196652 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
341965fc:	f7f8 f9a2 	bl	3418e944 <LL_RCC_PLL3P_IsEnabled>
34196600:	4603      	mov	r3, r0
34196602:	2b00      	cmp	r3, #0
34196604:	d031      	beq.n	3419666a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34196606:	f7f8 f927 	bl	3418e858 <LL_RCC_PLL3_GetSource>
3419660a:	4603      	mov	r3, r0
3419660c:	4618      	mov	r0, r3
3419660e:	f000 f8cb 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
34196612:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34196614:	68bb      	ldr	r3, [r7, #8]
34196616:	2b00      	cmp	r3, #0
34196618:	d027      	beq.n	3419666a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
3419661a:	f7f8 f963 	bl	3418e8e4 <LL_RCC_PLL3_GetM>
3419661e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34196620:	687b      	ldr	r3, [r7, #4]
34196622:	2b00      	cmp	r3, #0
34196624:	d021      	beq.n	3419666a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34196626:	f7f8 f94d 	bl	3418e8c4 <LL_RCC_PLL3_GetN>
3419662a:	4605      	mov	r5, r0
3419662c:	f7f8 f99e 	bl	3418e96c <LL_RCC_PLL3_GetFRACN>
34196630:	4606      	mov	r6, r0
34196632:	f7f8 f967 	bl	3418e904 <LL_RCC_PLL3_GetP1>
34196636:	4604      	mov	r4, r0
34196638:	f7f8 f974 	bl	3418e924 <LL_RCC_PLL3_GetP2>
3419663c:	4603      	mov	r3, r0
3419663e:	9301      	str	r3, [sp, #4]
34196640:	9400      	str	r4, [sp, #0]
34196642:	4633      	mov	r3, r6
34196644:	462a      	mov	r2, r5
34196646:	6879      	ldr	r1, [r7, #4]
34196648:	68b8      	ldr	r0, [r7, #8]
3419664a:	f000 f90b 	bl	34196864 <RCCEx_CalcPLLFreq>
3419664e:	60f8      	str	r0, [r7, #12]
34196650:	e00b      	b.n	3419666a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34196652:	f7f8 f923 	bl	3418e89c <LL_RCC_PLL3_IsEnabledBypass>
34196656:	4603      	mov	r3, r0
34196658:	2b00      	cmp	r3, #0
3419665a:	d006      	beq.n	3419666a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3419665c:	f7f8 f8fc 	bl	3418e858 <LL_RCC_PLL3_GetSource>
34196660:	4603      	mov	r3, r0
34196662:	4618      	mov	r0, r3
34196664:	f000 f8a0 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
34196668:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3419666a:	68fb      	ldr	r3, [r7, #12]
}
3419666c:	4618      	mov	r0, r3
3419666e:	3714      	adds	r7, #20
34196670:	46bd      	mov	sp, r7
34196672:	bdf0      	pop	{r4, r5, r6, r7, pc}

34196674 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34196674:	b5f0      	push	{r4, r5, r6, r7, lr}
34196676:	b087      	sub	sp, #28
34196678:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3419667a:	2300      	movs	r3, #0
3419667c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3419667e:	f7f8 f991 	bl	3418e9a4 <LL_RCC_PLL4_IsReady>
34196682:	4603      	mov	r3, r0
34196684:	2b00      	cmp	r3, #0
34196686:	d02a      	beq.n	341966de <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34196688:	f7f8 f9f4 	bl	3418ea74 <LL_RCC_PLL4P_IsEnabled>
3419668c:	4603      	mov	r3, r0
3419668e:	2b00      	cmp	r3, #0
34196690:	d031      	beq.n	341966f6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34196692:	f7f8 f979 	bl	3418e988 <LL_RCC_PLL4_GetSource>
34196696:	4603      	mov	r3, r0
34196698:	4618      	mov	r0, r3
3419669a:	f000 f885 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
3419669e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341966a0:	68bb      	ldr	r3, [r7, #8]
341966a2:	2b00      	cmp	r3, #0
341966a4:	d027      	beq.n	341966f6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
341966a6:	f7f8 f9b5 	bl	3418ea14 <LL_RCC_PLL4_GetM>
341966aa:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
341966ac:	687b      	ldr	r3, [r7, #4]
341966ae:	2b00      	cmp	r3, #0
341966b0:	d021      	beq.n	341966f6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
341966b2:	f7f8 f99f 	bl	3418e9f4 <LL_RCC_PLL4_GetN>
341966b6:	4605      	mov	r5, r0
341966b8:	f7f8 f9f0 	bl	3418ea9c <LL_RCC_PLL4_GetFRACN>
341966bc:	4606      	mov	r6, r0
341966be:	f7f8 f9b9 	bl	3418ea34 <LL_RCC_PLL4_GetP1>
341966c2:	4604      	mov	r4, r0
341966c4:	f7f8 f9c6 	bl	3418ea54 <LL_RCC_PLL4_GetP2>
341966c8:	4603      	mov	r3, r0
341966ca:	9301      	str	r3, [sp, #4]
341966cc:	9400      	str	r4, [sp, #0]
341966ce:	4633      	mov	r3, r6
341966d0:	462a      	mov	r2, r5
341966d2:	6879      	ldr	r1, [r7, #4]
341966d4:	68b8      	ldr	r0, [r7, #8]
341966d6:	f000 f8c5 	bl	34196864 <RCCEx_CalcPLLFreq>
341966da:	60f8      	str	r0, [r7, #12]
341966dc:	e00b      	b.n	341966f6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
341966de:	f7f8 f975 	bl	3418e9cc <LL_RCC_PLL4_IsEnabledBypass>
341966e2:	4603      	mov	r3, r0
341966e4:	2b00      	cmp	r3, #0
341966e6:	d006      	beq.n	341966f6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341966e8:	f7f8 f94e 	bl	3418e988 <LL_RCC_PLL4_GetSource>
341966ec:	4603      	mov	r3, r0
341966ee:	4618      	mov	r0, r3
341966f0:	f000 f85a 	bl	341967a8 <RCCEx_GetPLLSourceFreq>
341966f4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341966f6:	68fb      	ldr	r3, [r7, #12]
}
341966f8:	4618      	mov	r0, r3
341966fa:	3714      	adds	r7, #20
341966fc:	46bd      	mov	sp, r7
341966fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

34196700 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34196700:	b580      	push	{r7, lr}
34196702:	b082      	sub	sp, #8
34196704:	af00      	add	r7, sp, #0
34196706:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34196708:	f7f7 fb60 	bl	3418ddcc <LL_RCC_GetAHBPrescaler>
3419670c:	4603      	mov	r3, r0
3419670e:	0d1b      	lsrs	r3, r3, #20
34196710:	f003 0307 	and.w	r3, r3, #7
34196714:	687a      	ldr	r2, [r7, #4]
34196716:	fa22 f303 	lsr.w	r3, r2, r3
}
3419671a:	4618      	mov	r0, r3
3419671c:	3708      	adds	r7, #8
3419671e:	46bd      	mov	sp, r7
34196720:	bd80      	pop	{r7, pc}

34196722 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34196722:	b580      	push	{r7, lr}
34196724:	b082      	sub	sp, #8
34196726:	af00      	add	r7, sp, #0
34196728:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
3419672a:	f7f7 fb5d 	bl	3418dde8 <LL_RCC_GetAPB1Prescaler>
3419672e:	4603      	mov	r3, r0
34196730:	f003 0307 	and.w	r3, r3, #7
34196734:	687a      	ldr	r2, [r7, #4]
34196736:	fa22 f303 	lsr.w	r3, r2, r3
}
3419673a:	4618      	mov	r0, r3
3419673c:	3708      	adds	r7, #8
3419673e:	46bd      	mov	sp, r7
34196740:	bd80      	pop	{r7, pc}

34196742 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34196742:	b580      	push	{r7, lr}
34196744:	b082      	sub	sp, #8
34196746:	af00      	add	r7, sp, #0
34196748:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3419674a:	f7f7 fb5b 	bl	3418de04 <LL_RCC_GetAPB2Prescaler>
3419674e:	4603      	mov	r3, r0
34196750:	091b      	lsrs	r3, r3, #4
34196752:	f003 0307 	and.w	r3, r3, #7
34196756:	687a      	ldr	r2, [r7, #4]
34196758:	fa22 f303 	lsr.w	r3, r2, r3
}
3419675c:	4618      	mov	r0, r3
3419675e:	3708      	adds	r7, #8
34196760:	46bd      	mov	sp, r7
34196762:	bd80      	pop	{r7, pc}

34196764 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34196764:	b580      	push	{r7, lr}
34196766:	b082      	sub	sp, #8
34196768:	af00      	add	r7, sp, #0
3419676a:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3419676c:	f7f7 fb58 	bl	3418de20 <LL_RCC_GetAPB4Prescaler>
34196770:	4603      	mov	r3, r0
34196772:	0b1b      	lsrs	r3, r3, #12
34196774:	f003 0307 	and.w	r3, r3, #7
34196778:	687a      	ldr	r2, [r7, #4]
3419677a:	fa22 f303 	lsr.w	r3, r2, r3
}
3419677e:	4618      	mov	r0, r3
34196780:	3708      	adds	r7, #8
34196782:	46bd      	mov	sp, r7
34196784:	bd80      	pop	{r7, pc}

34196786 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34196786:	b580      	push	{r7, lr}
34196788:	b082      	sub	sp, #8
3419678a:	af00      	add	r7, sp, #0
3419678c:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3419678e:	f7f7 fb55 	bl	3418de3c <LL_RCC_GetAPB5Prescaler>
34196792:	4603      	mov	r3, r0
34196794:	0c1b      	lsrs	r3, r3, #16
34196796:	f003 0307 	and.w	r3, r3, #7
3419679a:	687a      	ldr	r2, [r7, #4]
3419679c:	fa22 f303 	lsr.w	r3, r2, r3
}
341967a0:	4618      	mov	r0, r3
341967a2:	3708      	adds	r7, #8
341967a4:	46bd      	mov	sp, r7
341967a6:	bd80      	pop	{r7, pc}

341967a8 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
341967a8:	b580      	push	{r7, lr}
341967aa:	b084      	sub	sp, #16
341967ac:	af00      	add	r7, sp, #0
341967ae:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
341967b0:	2300      	movs	r3, #0
341967b2:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
341967b4:	687b      	ldr	r3, [r7, #4]
341967b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341967ba:	d039      	beq.n	34196830 <RCCEx_GetPLLSourceFreq+0x88>
341967bc:	687b      	ldr	r3, [r7, #4]
341967be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341967c2:	d838      	bhi.n	34196836 <RCCEx_GetPLLSourceFreq+0x8e>
341967c4:	687b      	ldr	r3, [r7, #4]
341967c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341967ca:	d029      	beq.n	34196820 <RCCEx_GetPLLSourceFreq+0x78>
341967cc:	687b      	ldr	r3, [r7, #4]
341967ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341967d2:	d830      	bhi.n	34196836 <RCCEx_GetPLLSourceFreq+0x8e>
341967d4:	687b      	ldr	r3, [r7, #4]
341967d6:	2b00      	cmp	r3, #0
341967d8:	d004      	beq.n	341967e4 <RCCEx_GetPLLSourceFreq+0x3c>
341967da:	687b      	ldr	r3, [r7, #4]
341967dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341967e0:	d00e      	beq.n	34196800 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
341967e2:	e028      	b.n	34196836 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
341967e4:	f7f7 fa92 	bl	3418dd0c <LL_RCC_HSI_IsReady>
341967e8:	4603      	mov	r3, r0
341967ea:	2b00      	cmp	r3, #0
341967ec:	d025      	beq.n	3419683a <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341967ee:	f7f7 fa9f 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
341967f2:	4603      	mov	r3, r0
341967f4:	09db      	lsrs	r3, r3, #7
341967f6:	4a16      	ldr	r2, [pc, #88]	@ (34196850 <RCCEx_GetPLLSourceFreq+0xa8>)
341967f8:	fa22 f303 	lsr.w	r3, r2, r3
341967fc:	60fb      	str	r3, [r7, #12]
      break;
341967fe:	e01c      	b.n	3419683a <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34196800:	f7f7 faa4 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34196804:	4603      	mov	r3, r0
34196806:	2b00      	cmp	r3, #0
34196808:	d019      	beq.n	3419683e <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3419680a:	f7f7 fab1 	bl	3418dd70 <LL_RCC_MSI_GetFrequency>
3419680e:	4603      	mov	r3, r0
34196810:	2b00      	cmp	r3, #0
34196812:	d102      	bne.n	3419681a <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34196814:	4b0f      	ldr	r3, [pc, #60]	@ (34196854 <RCCEx_GetPLLSourceFreq+0xac>)
34196816:	60fb      	str	r3, [r7, #12]
      break;
34196818:	e011      	b.n	3419683e <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3419681a:	4b0f      	ldr	r3, [pc, #60]	@ (34196858 <RCCEx_GetPLLSourceFreq+0xb0>)
3419681c:	60fb      	str	r3, [r7, #12]
      break;
3419681e:	e00e      	b.n	3419683e <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34196820:	f7f7 fa62 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34196824:	4603      	mov	r3, r0
34196826:	2b00      	cmp	r3, #0
34196828:	d00b      	beq.n	34196842 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3419682a:	4b0c      	ldr	r3, [pc, #48]	@ (3419685c <RCCEx_GetPLLSourceFreq+0xb4>)
3419682c:	60fb      	str	r3, [r7, #12]
      break;
3419682e:	e008      	b.n	34196842 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34196830:	4b0b      	ldr	r3, [pc, #44]	@ (34196860 <RCCEx_GetPLLSourceFreq+0xb8>)
34196832:	60fb      	str	r3, [r7, #12]
      break;
34196834:	e006      	b.n	34196844 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34196836:	bf00      	nop
34196838:	e004      	b.n	34196844 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3419683a:	bf00      	nop
3419683c:	e002      	b.n	34196844 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3419683e:	bf00      	nop
34196840:	e000      	b.n	34196844 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34196842:	bf00      	nop
  }

  return pllinputfreq;
34196844:	68fb      	ldr	r3, [r7, #12]
}
34196846:	4618      	mov	r0, r3
34196848:	3710      	adds	r7, #16
3419684a:	46bd      	mov	sp, r7
3419684c:	bd80      	pop	{r7, pc}
3419684e:	bf00      	nop
34196850:	03d09000 	.word	0x03d09000
34196854:	003d0900 	.word	0x003d0900
34196858:	00f42400 	.word	0x00f42400
3419685c:	02dc6c00 	.word	0x02dc6c00
34196860:	00bb8000 	.word	0x00bb8000

34196864 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34196864:	b480      	push	{r7}
34196866:	b087      	sub	sp, #28
34196868:	af00      	add	r7, sp, #0
3419686a:	60f8      	str	r0, [r7, #12]
3419686c:	60b9      	str	r1, [r7, #8]
3419686e:	607a      	str	r2, [r7, #4]
34196870:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34196872:	68fb      	ldr	r3, [r7, #12]
34196874:	ee07 3a90 	vmov	s15, r3
34196878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419687c:	687b      	ldr	r3, [r7, #4]
3419687e:	ee07 3a90 	vmov	s15, r3
34196882:	eef8 6a67 	vcvt.f32.u32	s13, s15
34196886:	683b      	ldr	r3, [r7, #0]
34196888:	ee07 3a90 	vmov	s15, r3
3419688c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34196890:	eddf 5a19 	vldr	s11, [pc, #100]	@ 341968f8 <RCCEx_CalcPLLFreq+0x94>
34196894:	eec6 7a25 	vdiv.f32	s15, s12, s11
34196898:	ee76 7aa7 	vadd.f32	s15, s13, s15
3419689c:	ee67 6a27 	vmul.f32	s13, s14, s15
341968a0:	68bb      	ldr	r3, [r7, #8]
341968a2:	ee07 3a90 	vmov	s15, r3
341968a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341968aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
341968ae:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
341968b2:	6a3b      	ldr	r3, [r7, #32]
341968b4:	ee07 3a90 	vmov	s15, r3
341968b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341968bc:	edd7 6a05 	vldr	s13, [r7, #20]
341968c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
341968c4:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
341968c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341968ca:	ee07 3a90 	vmov	s15, r3
341968ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341968d2:	edd7 6a05 	vldr	s13, [r7, #20]
341968d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
341968da:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
341968de:	edd7 7a05 	vldr	s15, [r7, #20]
341968e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341968e6:	ee17 3a90 	vmov	r3, s15
}
341968ea:	4618      	mov	r0, r3
341968ec:	371c      	adds	r7, #28
341968ee:	46bd      	mov	sp, r7
341968f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341968f4:	4770      	bx	lr
341968f6:	bf00      	nop
341968f8:	4b800000 	.word	0x4b800000

341968fc <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
341968fc:	b590      	push	{r4, r7, lr}
341968fe:	b085      	sub	sp, #20
34196900:	af00      	add	r7, sp, #0
34196902:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34196904:	2300      	movs	r3, #0
34196906:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34196908:	6878      	ldr	r0, [r7, #4]
3419690a:	f7f7 fcb5 	bl	3418e278 <LL_RCC_GetADCClockSource>
3419690e:	4603      	mov	r3, r0
34196910:	2b70      	cmp	r3, #112	@ 0x70
34196912:	f000 80d1 	beq.w	34196ab8 <RCCEx_GetADCCLKFreq+0x1bc>
34196916:	2b70      	cmp	r3, #112	@ 0x70
34196918:	f200 80d8 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
3419691c:	2b60      	cmp	r3, #96	@ 0x60
3419691e:	f000 80c8 	beq.w	34196ab2 <RCCEx_GetADCCLKFreq+0x1b6>
34196922:	2b60      	cmp	r3, #96	@ 0x60
34196924:	f200 80d2 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
34196928:	2b50      	cmp	r3, #80	@ 0x50
3419692a:	f000 80ac 	beq.w	34196a86 <RCCEx_GetADCCLKFreq+0x18a>
3419692e:	2b50      	cmp	r3, #80	@ 0x50
34196930:	f200 80cc 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
34196934:	2b40      	cmp	r3, #64	@ 0x40
34196936:	f000 80b4 	beq.w	34196aa2 <RCCEx_GetADCCLKFreq+0x1a6>
3419693a:	2b40      	cmp	r3, #64	@ 0x40
3419693c:	f200 80c6 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
34196940:	2b30      	cmp	r3, #48	@ 0x30
34196942:	d05d      	beq.n	34196a00 <RCCEx_GetADCCLKFreq+0x104>
34196944:	2b30      	cmp	r3, #48	@ 0x30
34196946:	f200 80c1 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
3419694a:	2b20      	cmp	r3, #32
3419694c:	d014      	beq.n	34196978 <RCCEx_GetADCCLKFreq+0x7c>
3419694e:	2b20      	cmp	r3, #32
34196950:	f200 80bc 	bhi.w	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
34196954:	2b00      	cmp	r3, #0
34196956:	d002      	beq.n	3419695e <RCCEx_GetADCCLKFreq+0x62>
34196958:	2b10      	cmp	r3, #16
3419695a:	d008      	beq.n	3419696e <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3419695c:	e0b6      	b.n	34196acc <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3419695e:	f7f6 fd4b 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34196962:	4603      	mov	r3, r0
34196964:	4618      	mov	r0, r3
34196966:	f7ff fecb 	bl	34196700 <RCCEx_GetHCLKFreq>
3419696a:	60f8      	str	r0, [r7, #12]
      break;
3419696c:	e0b7      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419696e:	2007      	movs	r0, #7
34196970:	f000 f9b2 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34196974:	60f8      	str	r0, [r7, #12]
      break;
34196976:	e0b2      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34196978:	f7f8 f96c 	bl	3418ec54 <LL_RCC_IC7_IsEnabled>
3419697c:	4603      	mov	r3, r0
3419697e:	2b00      	cmp	r3, #0
34196980:	f000 80a6 	beq.w	34196ad0 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34196984:	f7f8 f988 	bl	3418ec98 <LL_RCC_IC7_GetDivider>
34196988:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3419698a:	f7f8 f977 	bl	3418ec7c <LL_RCC_IC7_GetSource>
3419698e:	4603      	mov	r3, r0
34196990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196994:	d029      	beq.n	341969ea <RCCEx_GetADCCLKFreq+0xee>
34196996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419699a:	d82f      	bhi.n	341969fc <RCCEx_GetADCCLKFreq+0x100>
3419699c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341969a0:	d01a      	beq.n	341969d8 <RCCEx_GetADCCLKFreq+0xdc>
341969a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341969a6:	d829      	bhi.n	341969fc <RCCEx_GetADCCLKFreq+0x100>
341969a8:	2b00      	cmp	r3, #0
341969aa:	d003      	beq.n	341969b4 <RCCEx_GetADCCLKFreq+0xb8>
341969ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341969b0:	d009      	beq.n	341969c6 <RCCEx_GetADCCLKFreq+0xca>
            break;
341969b2:	e023      	b.n	341969fc <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341969b4:	f7ff fd8c 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341969b8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341969ba:	68fa      	ldr	r2, [r7, #12]
341969bc:	68bb      	ldr	r3, [r7, #8]
341969be:	fbb2 f3f3 	udiv	r3, r2, r3
341969c2:	60fb      	str	r3, [r7, #12]
            break;
341969c4:	e01b      	b.n	341969fe <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341969c6:	f7ff fdc9 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341969ca:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341969cc:	68fa      	ldr	r2, [r7, #12]
341969ce:	68bb      	ldr	r3, [r7, #8]
341969d0:	fbb2 f3f3 	udiv	r3, r2, r3
341969d4:	60fb      	str	r3, [r7, #12]
            break;
341969d6:	e012      	b.n	341969fe <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341969d8:	f7ff fe06 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341969dc:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341969de:	68fa      	ldr	r2, [r7, #12]
341969e0:	68bb      	ldr	r3, [r7, #8]
341969e2:	fbb2 f3f3 	udiv	r3, r2, r3
341969e6:	60fb      	str	r3, [r7, #12]
            break;
341969e8:	e009      	b.n	341969fe <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341969ea:	f7ff fe43 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341969ee:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341969f0:	68fa      	ldr	r2, [r7, #12]
341969f2:	68bb      	ldr	r3, [r7, #8]
341969f4:	fbb2 f3f3 	udiv	r3, r2, r3
341969f8:	60fb      	str	r3, [r7, #12]
            break;
341969fa:	e000      	b.n	341969fe <RCCEx_GetADCCLKFreq+0x102>
            break;
341969fc:	bf00      	nop
      break;
341969fe:	e067      	b.n	34196ad0 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34196a00:	f7f8 f968 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
34196a04:	4603      	mov	r3, r0
34196a06:	2b00      	cmp	r3, #0
34196a08:	d064      	beq.n	34196ad4 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34196a0a:	f7f8 f985 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
34196a0e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34196a10:	f7f8 f974 	bl	3418ecfc <LL_RCC_IC8_GetSource>
34196a14:	4603      	mov	r3, r0
34196a16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196a1a:	d029      	beq.n	34196a70 <RCCEx_GetADCCLKFreq+0x174>
34196a1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196a20:	d82f      	bhi.n	34196a82 <RCCEx_GetADCCLKFreq+0x186>
34196a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196a26:	d01a      	beq.n	34196a5e <RCCEx_GetADCCLKFreq+0x162>
34196a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196a2c:	d829      	bhi.n	34196a82 <RCCEx_GetADCCLKFreq+0x186>
34196a2e:	2b00      	cmp	r3, #0
34196a30:	d003      	beq.n	34196a3a <RCCEx_GetADCCLKFreq+0x13e>
34196a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196a36:	d009      	beq.n	34196a4c <RCCEx_GetADCCLKFreq+0x150>
            break;
34196a38:	e023      	b.n	34196a82 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196a3a:	f7ff fd49 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196a3e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34196a40:	68fa      	ldr	r2, [r7, #12]
34196a42:	68bb      	ldr	r3, [r7, #8]
34196a44:	fbb2 f3f3 	udiv	r3, r2, r3
34196a48:	60fb      	str	r3, [r7, #12]
            break;
34196a4a:	e01b      	b.n	34196a84 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196a4c:	f7ff fd86 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196a50:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34196a52:	68fa      	ldr	r2, [r7, #12]
34196a54:	68bb      	ldr	r3, [r7, #8]
34196a56:	fbb2 f3f3 	udiv	r3, r2, r3
34196a5a:	60fb      	str	r3, [r7, #12]
            break;
34196a5c:	e012      	b.n	34196a84 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196a5e:	f7ff fdc3 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196a62:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34196a64:	68fa      	ldr	r2, [r7, #12]
34196a66:	68bb      	ldr	r3, [r7, #8]
34196a68:	fbb2 f3f3 	udiv	r3, r2, r3
34196a6c:	60fb      	str	r3, [r7, #12]
            break;
34196a6e:	e009      	b.n	34196a84 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196a70:	f7ff fe00 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196a74:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34196a76:	68fa      	ldr	r2, [r7, #12]
34196a78:	68bb      	ldr	r3, [r7, #8]
34196a7a:	fbb2 f3f3 	udiv	r3, r2, r3
34196a7e:	60fb      	str	r3, [r7, #12]
            break;
34196a80:	e000      	b.n	34196a84 <RCCEx_GetADCCLKFreq+0x188>
            break;
34196a82:	bf00      	nop
      break;
34196a84:	e026      	b.n	34196ad4 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34196a86:	f7f7 f941 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34196a8a:	4603      	mov	r3, r0
34196a8c:	2b00      	cmp	r3, #0
34196a8e:	d023      	beq.n	34196ad8 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34196a90:	f7f7 f94e 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34196a94:	4603      	mov	r3, r0
34196a96:	09db      	lsrs	r3, r3, #7
34196a98:	4a16      	ldr	r2, [pc, #88]	@ (34196af4 <RCCEx_GetADCCLKFreq+0x1f8>)
34196a9a:	fa22 f303 	lsr.w	r3, r2, r3
34196a9e:	60fb      	str	r3, [r7, #12]
      break;
34196aa0:	e01a      	b.n	34196ad8 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34196aa2:	f7f7 f953 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34196aa6:	4603      	mov	r3, r0
34196aa8:	2b00      	cmp	r3, #0
34196aaa:	d017      	beq.n	34196adc <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34196aac:	4b12      	ldr	r3, [pc, #72]	@ (34196af8 <RCCEx_GetADCCLKFreq+0x1fc>)
34196aae:	60fb      	str	r3, [r7, #12]
      break;
34196ab0:	e014      	b.n	34196adc <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34196ab2:	4b12      	ldr	r3, [pc, #72]	@ (34196afc <RCCEx_GetADCCLKFreq+0x200>)
34196ab4:	60fb      	str	r3, [r7, #12]
      break;
34196ab6:	e012      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34196ab8:	f7f6 fc9e 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34196abc:	4604      	mov	r4, r0
34196abe:	f7f7 fd8d 	bl	3418e5dc <LL_RCC_GetTIMPrescaler>
34196ac2:	4603      	mov	r3, r0
34196ac4:	fa24 f303 	lsr.w	r3, r4, r3
34196ac8:	60fb      	str	r3, [r7, #12]
      break;
34196aca:	e008      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34196acc:	bf00      	nop
34196ace:	e006      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34196ad0:	bf00      	nop
34196ad2:	e004      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34196ad4:	bf00      	nop
34196ad6:	e002      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34196ad8:	bf00      	nop
34196ada:	e000      	b.n	34196ade <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34196adc:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34196ade:	f7f7 f9e5 	bl	3418deac <LL_RCC_GetADCPrescaler>
34196ae2:	4603      	mov	r3, r0
34196ae4:	3301      	adds	r3, #1
34196ae6:	68fa      	ldr	r2, [r7, #12]
34196ae8:	fbb2 f3f3 	udiv	r3, r2, r3
}
34196aec:	4618      	mov	r0, r3
34196aee:	3714      	adds	r7, #20
34196af0:	46bd      	mov	sp, r7
34196af2:	bd90      	pop	{r4, r7, pc}
34196af4:	03d09000 	.word	0x03d09000
34196af8:	003d0900 	.word	0x003d0900
34196afc:	00bb8000 	.word	0x00bb8000

34196b00 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34196b00:	b590      	push	{r4, r7, lr}
34196b02:	b085      	sub	sp, #20
34196b04:	af00      	add	r7, sp, #0
34196b06:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34196b08:	2300      	movs	r3, #0
34196b0a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34196b0c:	6878      	ldr	r0, [r7, #4]
34196b0e:	f7f7 fbc5 	bl	3418e29c <LL_RCC_GetADFClockSource>
34196b12:	4603      	mov	r3, r0
34196b14:	2b07      	cmp	r3, #7
34196b16:	f200 80ca 	bhi.w	34196cae <RCCEx_GetADFCLKFreq+0x1ae>
34196b1a:	a201      	add	r2, pc, #4	@ (adr r2, 34196b20 <RCCEx_GetADFCLKFreq+0x20>)
34196b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34196b20:	34196b41 	.word	0x34196b41
34196b24:	34196b51 	.word	0x34196b51
34196b28:	34196b5b 	.word	0x34196b5b
34196b2c:	34196be3 	.word	0x34196be3
34196b30:	34196c85 	.word	0x34196c85
34196b34:	34196c69 	.word	0x34196c69
34196b38:	34196c95 	.word	0x34196c95
34196b3c:	34196c9b 	.word	0x34196c9b
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34196b40:	f7f6 fc5a 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34196b44:	4603      	mov	r3, r0
34196b46:	4618      	mov	r0, r3
34196b48:	f7ff fdda 	bl	34196700 <RCCEx_GetHCLKFreq>
34196b4c:	60f8      	str	r0, [r7, #12]
      break;
34196b4e:	e0b7      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34196b50:	2007      	movs	r0, #7
34196b52:	f000 f8c1 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34196b56:	60f8      	str	r0, [r7, #12]
      break;
34196b58:	e0b2      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34196b5a:	f7f8 f87b 	bl	3418ec54 <LL_RCC_IC7_IsEnabled>
34196b5e:	4603      	mov	r3, r0
34196b60:	2b00      	cmp	r3, #0
34196b62:	f000 80a6 	beq.w	34196cb2 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34196b66:	f7f8 f897 	bl	3418ec98 <LL_RCC_IC7_GetDivider>
34196b6a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34196b6c:	f7f8 f886 	bl	3418ec7c <LL_RCC_IC7_GetSource>
34196b70:	4603      	mov	r3, r0
34196b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196b76:	d029      	beq.n	34196bcc <RCCEx_GetADFCLKFreq+0xcc>
34196b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196b7c:	d82f      	bhi.n	34196bde <RCCEx_GetADFCLKFreq+0xde>
34196b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196b82:	d01a      	beq.n	34196bba <RCCEx_GetADFCLKFreq+0xba>
34196b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196b88:	d829      	bhi.n	34196bde <RCCEx_GetADFCLKFreq+0xde>
34196b8a:	2b00      	cmp	r3, #0
34196b8c:	d003      	beq.n	34196b96 <RCCEx_GetADFCLKFreq+0x96>
34196b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196b92:	d009      	beq.n	34196ba8 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34196b94:	e023      	b.n	34196bde <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196b96:	f7ff fc9b 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196b9a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196b9c:	68fa      	ldr	r2, [r7, #12]
34196b9e:	68bb      	ldr	r3, [r7, #8]
34196ba0:	fbb2 f3f3 	udiv	r3, r2, r3
34196ba4:	60fb      	str	r3, [r7, #12]
            break;
34196ba6:	e01b      	b.n	34196be0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196ba8:	f7ff fcd8 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196bac:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196bae:	68fa      	ldr	r2, [r7, #12]
34196bb0:	68bb      	ldr	r3, [r7, #8]
34196bb2:	fbb2 f3f3 	udiv	r3, r2, r3
34196bb6:	60fb      	str	r3, [r7, #12]
            break;
34196bb8:	e012      	b.n	34196be0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196bba:	f7ff fd15 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196bbe:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196bc0:	68fa      	ldr	r2, [r7, #12]
34196bc2:	68bb      	ldr	r3, [r7, #8]
34196bc4:	fbb2 f3f3 	udiv	r3, r2, r3
34196bc8:	60fb      	str	r3, [r7, #12]
            break;
34196bca:	e009      	b.n	34196be0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196bcc:	f7ff fd52 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196bd0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196bd2:	68fa      	ldr	r2, [r7, #12]
34196bd4:	68bb      	ldr	r3, [r7, #8]
34196bd6:	fbb2 f3f3 	udiv	r3, r2, r3
34196bda:	60fb      	str	r3, [r7, #12]
            break;
34196bdc:	e000      	b.n	34196be0 <RCCEx_GetADFCLKFreq+0xe0>
            break;
34196bde:	bf00      	nop
        }
      }
      break;
34196be0:	e067      	b.n	34196cb2 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34196be2:	f7f8 f877 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
34196be6:	4603      	mov	r3, r0
34196be8:	2b00      	cmp	r3, #0
34196bea:	d064      	beq.n	34196cb6 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34196bec:	f7f8 f894 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
34196bf0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34196bf2:	f7f8 f883 	bl	3418ecfc <LL_RCC_IC8_GetSource>
34196bf6:	4603      	mov	r3, r0
34196bf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196bfc:	d029      	beq.n	34196c52 <RCCEx_GetADFCLKFreq+0x152>
34196bfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196c02:	d82f      	bhi.n	34196c64 <RCCEx_GetADFCLKFreq+0x164>
34196c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196c08:	d01a      	beq.n	34196c40 <RCCEx_GetADFCLKFreq+0x140>
34196c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196c0e:	d829      	bhi.n	34196c64 <RCCEx_GetADFCLKFreq+0x164>
34196c10:	2b00      	cmp	r3, #0
34196c12:	d003      	beq.n	34196c1c <RCCEx_GetADFCLKFreq+0x11c>
34196c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196c18:	d009      	beq.n	34196c2e <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34196c1a:	e023      	b.n	34196c64 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196c1c:	f7ff fc58 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196c20:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196c22:	68fa      	ldr	r2, [r7, #12]
34196c24:	68bb      	ldr	r3, [r7, #8]
34196c26:	fbb2 f3f3 	udiv	r3, r2, r3
34196c2a:	60fb      	str	r3, [r7, #12]
            break;
34196c2c:	e01b      	b.n	34196c66 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196c2e:	f7ff fc95 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196c32:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196c34:	68fa      	ldr	r2, [r7, #12]
34196c36:	68bb      	ldr	r3, [r7, #8]
34196c38:	fbb2 f3f3 	udiv	r3, r2, r3
34196c3c:	60fb      	str	r3, [r7, #12]
            break;
34196c3e:	e012      	b.n	34196c66 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196c40:	f7ff fcd2 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196c44:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196c46:	68fa      	ldr	r2, [r7, #12]
34196c48:	68bb      	ldr	r3, [r7, #8]
34196c4a:	fbb2 f3f3 	udiv	r3, r2, r3
34196c4e:	60fb      	str	r3, [r7, #12]
            break;
34196c50:	e009      	b.n	34196c66 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196c52:	f7ff fd0f 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196c56:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34196c58:	68fa      	ldr	r2, [r7, #12]
34196c5a:	68bb      	ldr	r3, [r7, #8]
34196c5c:	fbb2 f3f3 	udiv	r3, r2, r3
34196c60:	60fb      	str	r3, [r7, #12]
            break;
34196c62:	e000      	b.n	34196c66 <RCCEx_GetADFCLKFreq+0x166>
            break;
34196c64:	bf00      	nop
        }
      }
      break;
34196c66:	e026      	b.n	34196cb6 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34196c68:	f7f7 f850 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34196c6c:	4603      	mov	r3, r0
34196c6e:	2b00      	cmp	r3, #0
34196c70:	d023      	beq.n	34196cba <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34196c72:	f7f7 f85d 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34196c76:	4603      	mov	r3, r0
34196c78:	09db      	lsrs	r3, r3, #7
34196c7a:	4a14      	ldr	r2, [pc, #80]	@ (34196ccc <RCCEx_GetADFCLKFreq+0x1cc>)
34196c7c:	fa22 f303 	lsr.w	r3, r2, r3
34196c80:	60fb      	str	r3, [r7, #12]
      }
      break;
34196c82:	e01a      	b.n	34196cba <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34196c84:	f7f7 f862 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34196c88:	4603      	mov	r3, r0
34196c8a:	2b00      	cmp	r3, #0
34196c8c:	d017      	beq.n	34196cbe <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34196c8e:	4b10      	ldr	r3, [pc, #64]	@ (34196cd0 <RCCEx_GetADFCLKFreq+0x1d0>)
34196c90:	60fb      	str	r3, [r7, #12]
      }
      break;
34196c92:	e014      	b.n	34196cbe <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34196c94:	4b0f      	ldr	r3, [pc, #60]	@ (34196cd4 <RCCEx_GetADFCLKFreq+0x1d4>)
34196c96:	60fb      	str	r3, [r7, #12]
      break;
34196c98:	e012      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34196c9a:	f7f6 fbad 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34196c9e:	4604      	mov	r4, r0
34196ca0:	f7f7 fc9c 	bl	3418e5dc <LL_RCC_GetTIMPrescaler>
34196ca4:	4603      	mov	r3, r0
34196ca6:	fa24 f303 	lsr.w	r3, r4, r3
34196caa:	60fb      	str	r3, [r7, #12]
      break;
34196cac:	e008      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34196cae:	bf00      	nop
34196cb0:	e006      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34196cb2:	bf00      	nop
34196cb4:	e004      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34196cb6:	bf00      	nop
34196cb8:	e002      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34196cba:	bf00      	nop
34196cbc:	e000      	b.n	34196cc0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34196cbe:	bf00      	nop
  }

  return adf_frequency;
34196cc0:	68fb      	ldr	r3, [r7, #12]
}
34196cc2:	4618      	mov	r0, r3
34196cc4:	3714      	adds	r7, #20
34196cc6:	46bd      	mov	sp, r7
34196cc8:	bd90      	pop	{r4, r7, pc}
34196cca:	bf00      	nop
34196ccc:	03d09000 	.word	0x03d09000
34196cd0:	003d0900 	.word	0x003d0900
34196cd4:	00bb8000 	.word	0x00bb8000

34196cd8 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
34196cd8:	b580      	push	{r7, lr}
34196cda:	b084      	sub	sp, #16
34196cdc:	af00      	add	r7, sp, #0
34196cde:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34196ce0:	2300      	movs	r3, #0
34196ce2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34196ce4:	f7f8 faf6 	bl	3418f2d4 <LL_RCC_CLKP_IsEnabled>
34196ce8:	4603      	mov	r3, r0
34196cea:	2b01      	cmp	r3, #1
34196cec:	f040 81a5 	bne.w	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34196cf0:	6878      	ldr	r0, [r7, #4]
34196cf2:	f7f7 fae5 	bl	3418e2c0 <LL_RCC_GetCLKPClockSource>
34196cf6:	4603      	mov	r3, r0
34196cf8:	2b07      	cmp	r3, #7
34196cfa:	f200 818d 	bhi.w	34197018 <RCCEx_GetCLKPCLKFreq+0x340>
34196cfe:	a201      	add	r2, pc, #4	@ (adr r2, 34196d04 <RCCEx_GetCLKPCLKFreq+0x2c>)
34196d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34196d04:	34196d25 	.word	0x34196d25
34196d08:	34196d43 	.word	0x34196d43
34196d0c:	34196d55 	.word	0x34196d55
34196d10:	34196eff 	.word	0x34196eff
34196d14:	34196d67 	.word	0x34196d67
34196d18:	34196def 	.word	0x34196def
34196d1c:	34196e77 	.word	0x34196e77
34196d20:	34196f87 	.word	0x34196f87
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34196d24:	f7f6 fff2 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34196d28:	4603      	mov	r3, r0
34196d2a:	2b00      	cmp	r3, #0
34196d2c:	f000 8176 	beq.w	3419701c <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34196d30:	f7f6 fffe 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34196d34:	4603      	mov	r3, r0
34196d36:	09db      	lsrs	r3, r3, #7
34196d38:	4aa1      	ldr	r2, [pc, #644]	@ (34196fc0 <RCCEx_GetCLKPCLKFreq+0x2e8>)
34196d3a:	fa22 f303 	lsr.w	r3, r2, r3
34196d3e:	60fb      	str	r3, [r7, #12]
        }
        break;
34196d40:	e16c      	b.n	3419701c <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34196d42:	f7f7 f803 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34196d46:	4603      	mov	r3, r0
34196d48:	2b00      	cmp	r3, #0
34196d4a:	f000 8169 	beq.w	34197020 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34196d4e:	4b9d      	ldr	r3, [pc, #628]	@ (34196fc4 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34196d50:	60fb      	str	r3, [r7, #12]
        }
        break;
34196d52:	e165      	b.n	34197020 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34196d54:	f7f6 ffc8 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34196d58:	4603      	mov	r3, r0
34196d5a:	2b00      	cmp	r3, #0
34196d5c:	f000 8162 	beq.w	34197024 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34196d60:	4b99      	ldr	r3, [pc, #612]	@ (34196fc8 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34196d62:	60fb      	str	r3, [r7, #12]
        }
        break;
34196d64:	e15e      	b.n	34197024 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34196d66:	f7f7 ff35 	bl	3418ebd4 <LL_RCC_IC5_IsEnabled>
34196d6a:	4603      	mov	r3, r0
34196d6c:	2b00      	cmp	r3, #0
34196d6e:	f000 815b 	beq.w	34197028 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34196d72:	f7f7 ff51 	bl	3418ec18 <LL_RCC_IC5_GetDivider>
34196d76:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34196d78:	f7f7 ff40 	bl	3418ebfc <LL_RCC_IC5_GetSource>
34196d7c:	4603      	mov	r3, r0
34196d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196d82:	d029      	beq.n	34196dd8 <RCCEx_GetCLKPCLKFreq+0x100>
34196d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196d88:	d82f      	bhi.n	34196dea <RCCEx_GetCLKPCLKFreq+0x112>
34196d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196d8e:	d01a      	beq.n	34196dc6 <RCCEx_GetCLKPCLKFreq+0xee>
34196d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196d94:	d829      	bhi.n	34196dea <RCCEx_GetCLKPCLKFreq+0x112>
34196d96:	2b00      	cmp	r3, #0
34196d98:	d003      	beq.n	34196da2 <RCCEx_GetCLKPCLKFreq+0xca>
34196d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196d9e:	d009      	beq.n	34196db4 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34196da0:	e023      	b.n	34196dea <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196da2:	f7ff fb95 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196da6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196da8:	68fa      	ldr	r2, [r7, #12]
34196daa:	68bb      	ldr	r3, [r7, #8]
34196dac:	fbb2 f3f3 	udiv	r3, r2, r3
34196db0:	60fb      	str	r3, [r7, #12]
              break;
34196db2:	e01b      	b.n	34196dec <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196db4:	f7ff fbd2 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196db8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196dba:	68fa      	ldr	r2, [r7, #12]
34196dbc:	68bb      	ldr	r3, [r7, #8]
34196dbe:	fbb2 f3f3 	udiv	r3, r2, r3
34196dc2:	60fb      	str	r3, [r7, #12]
              break;
34196dc4:	e012      	b.n	34196dec <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196dc6:	f7ff fc0f 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196dca:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196dcc:	68fa      	ldr	r2, [r7, #12]
34196dce:	68bb      	ldr	r3, [r7, #8]
34196dd0:	fbb2 f3f3 	udiv	r3, r2, r3
34196dd4:	60fb      	str	r3, [r7, #12]
              break;
34196dd6:	e009      	b.n	34196dec <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196dd8:	f7ff fc4c 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196ddc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196dde:	68fa      	ldr	r2, [r7, #12]
34196de0:	68bb      	ldr	r3, [r7, #8]
34196de2:	fbb2 f3f3 	udiv	r3, r2, r3
34196de6:	60fb      	str	r3, [r7, #12]
              break;
34196de8:	e000      	b.n	34196dec <RCCEx_GetCLKPCLKFreq+0x114>
              break;
34196dea:	bf00      	nop
          }
        }
        break;
34196dec:	e11c      	b.n	34197028 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
34196dee:	f7f7 fff1 	bl	3418edd4 <LL_RCC_IC10_IsEnabled>
34196df2:	4603      	mov	r3, r0
34196df4:	2b00      	cmp	r3, #0
34196df6:	f000 8119 	beq.w	3419702c <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
34196dfa:	f7f8 f80d 	bl	3418ee18 <LL_RCC_IC10_GetDivider>
34196dfe:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34196e00:	f7f7 fffc 	bl	3418edfc <LL_RCC_IC10_GetSource>
34196e04:	4603      	mov	r3, r0
34196e06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196e0a:	d029      	beq.n	34196e60 <RCCEx_GetCLKPCLKFreq+0x188>
34196e0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196e10:	d82f      	bhi.n	34196e72 <RCCEx_GetCLKPCLKFreq+0x19a>
34196e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196e16:	d01a      	beq.n	34196e4e <RCCEx_GetCLKPCLKFreq+0x176>
34196e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196e1c:	d829      	bhi.n	34196e72 <RCCEx_GetCLKPCLKFreq+0x19a>
34196e1e:	2b00      	cmp	r3, #0
34196e20:	d003      	beq.n	34196e2a <RCCEx_GetCLKPCLKFreq+0x152>
34196e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196e26:	d009      	beq.n	34196e3c <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34196e28:	e023      	b.n	34196e72 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196e2a:	f7ff fb51 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196e2e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196e30:	68fa      	ldr	r2, [r7, #12]
34196e32:	68bb      	ldr	r3, [r7, #8]
34196e34:	fbb2 f3f3 	udiv	r3, r2, r3
34196e38:	60fb      	str	r3, [r7, #12]
              break;
34196e3a:	e01b      	b.n	34196e74 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196e3c:	f7ff fb8e 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196e40:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196e42:	68fa      	ldr	r2, [r7, #12]
34196e44:	68bb      	ldr	r3, [r7, #8]
34196e46:	fbb2 f3f3 	udiv	r3, r2, r3
34196e4a:	60fb      	str	r3, [r7, #12]
              break;
34196e4c:	e012      	b.n	34196e74 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196e4e:	f7ff fbcb 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196e52:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196e54:	68fa      	ldr	r2, [r7, #12]
34196e56:	68bb      	ldr	r3, [r7, #8]
34196e58:	fbb2 f3f3 	udiv	r3, r2, r3
34196e5c:	60fb      	str	r3, [r7, #12]
              break;
34196e5e:	e009      	b.n	34196e74 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196e60:	f7ff fc08 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196e64:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196e66:	68fa      	ldr	r2, [r7, #12]
34196e68:	68bb      	ldr	r3, [r7, #8]
34196e6a:	fbb2 f3f3 	udiv	r3, r2, r3
34196e6e:	60fb      	str	r3, [r7, #12]
              break;
34196e70:	e000      	b.n	34196e74 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34196e72:	bf00      	nop
          }
        }
        break;
34196e74:	e0da      	b.n	3419702c <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34196e76:	f7f8 f8ad 	bl	3418efd4 <LL_RCC_IC15_IsEnabled>
34196e7a:	4603      	mov	r3, r0
34196e7c:	2b00      	cmp	r3, #0
34196e7e:	f000 80d7 	beq.w	34197030 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
34196e82:	f7f8 f8c9 	bl	3418f018 <LL_RCC_IC15_GetDivider>
34196e86:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34196e88:	f7f8 f8b8 	bl	3418effc <LL_RCC_IC15_GetSource>
34196e8c:	4603      	mov	r3, r0
34196e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196e92:	d029      	beq.n	34196ee8 <RCCEx_GetCLKPCLKFreq+0x210>
34196e94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196e98:	d82f      	bhi.n	34196efa <RCCEx_GetCLKPCLKFreq+0x222>
34196e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196e9e:	d01a      	beq.n	34196ed6 <RCCEx_GetCLKPCLKFreq+0x1fe>
34196ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196ea4:	d829      	bhi.n	34196efa <RCCEx_GetCLKPCLKFreq+0x222>
34196ea6:	2b00      	cmp	r3, #0
34196ea8:	d003      	beq.n	34196eb2 <RCCEx_GetCLKPCLKFreq+0x1da>
34196eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196eae:	d009      	beq.n	34196ec4 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34196eb0:	e023      	b.n	34196efa <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196eb2:	f7ff fb0d 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196eb6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196eb8:	68fa      	ldr	r2, [r7, #12]
34196eba:	68bb      	ldr	r3, [r7, #8]
34196ebc:	fbb2 f3f3 	udiv	r3, r2, r3
34196ec0:	60fb      	str	r3, [r7, #12]
              break;
34196ec2:	e01b      	b.n	34196efc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196ec4:	f7ff fb4a 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196ec8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196eca:	68fa      	ldr	r2, [r7, #12]
34196ecc:	68bb      	ldr	r3, [r7, #8]
34196ece:	fbb2 f3f3 	udiv	r3, r2, r3
34196ed2:	60fb      	str	r3, [r7, #12]
              break;
34196ed4:	e012      	b.n	34196efc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196ed6:	f7ff fb87 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196eda:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196edc:	68fa      	ldr	r2, [r7, #12]
34196ede:	68bb      	ldr	r3, [r7, #8]
34196ee0:	fbb2 f3f3 	udiv	r3, r2, r3
34196ee4:	60fb      	str	r3, [r7, #12]
              break;
34196ee6:	e009      	b.n	34196efc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196ee8:	f7ff fbc4 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196eec:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196eee:	68fa      	ldr	r2, [r7, #12]
34196ef0:	68bb      	ldr	r3, [r7, #8]
34196ef2:	fbb2 f3f3 	udiv	r3, r2, r3
34196ef6:	60fb      	str	r3, [r7, #12]
              break;
34196ef8:	e000      	b.n	34196efc <RCCEx_GetCLKPCLKFreq+0x224>
              break;
34196efa:	bf00      	nop
          }
        }
        break;
34196efc:	e098      	b.n	34197030 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
34196efe:	f7f8 f969 	bl	3418f1d4 <LL_RCC_IC19_IsEnabled>
34196f02:	4603      	mov	r3, r0
34196f04:	2b00      	cmp	r3, #0
34196f06:	f000 8095 	beq.w	34197034 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34196f0a:	f7f8 f985 	bl	3418f218 <LL_RCC_IC19_GetDivider>
34196f0e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34196f10:	f7f8 f974 	bl	3418f1fc <LL_RCC_IC19_GetSource>
34196f14:	4603      	mov	r3, r0
34196f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196f1a:	d029      	beq.n	34196f70 <RCCEx_GetCLKPCLKFreq+0x298>
34196f1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196f20:	d82f      	bhi.n	34196f82 <RCCEx_GetCLKPCLKFreq+0x2aa>
34196f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196f26:	d01a      	beq.n	34196f5e <RCCEx_GetCLKPCLKFreq+0x286>
34196f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196f2c:	d829      	bhi.n	34196f82 <RCCEx_GetCLKPCLKFreq+0x2aa>
34196f2e:	2b00      	cmp	r3, #0
34196f30:	d003      	beq.n	34196f3a <RCCEx_GetCLKPCLKFreq+0x262>
34196f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196f36:	d009      	beq.n	34196f4c <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34196f38:	e023      	b.n	34196f82 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196f3a:	f7ff fac9 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196f3e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196f40:	68fa      	ldr	r2, [r7, #12]
34196f42:	68bb      	ldr	r3, [r7, #8]
34196f44:	fbb2 f3f3 	udiv	r3, r2, r3
34196f48:	60fb      	str	r3, [r7, #12]
              break;
34196f4a:	e01b      	b.n	34196f84 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196f4c:	f7ff fb06 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196f50:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196f52:	68fa      	ldr	r2, [r7, #12]
34196f54:	68bb      	ldr	r3, [r7, #8]
34196f56:	fbb2 f3f3 	udiv	r3, r2, r3
34196f5a:	60fb      	str	r3, [r7, #12]
              break;
34196f5c:	e012      	b.n	34196f84 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196f5e:	f7ff fb43 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196f62:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196f64:	68fa      	ldr	r2, [r7, #12]
34196f66:	68bb      	ldr	r3, [r7, #8]
34196f68:	fbb2 f3f3 	udiv	r3, r2, r3
34196f6c:	60fb      	str	r3, [r7, #12]
              break;
34196f6e:	e009      	b.n	34196f84 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34196f70:	f7ff fb80 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34196f74:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196f76:	68fa      	ldr	r2, [r7, #12]
34196f78:	68bb      	ldr	r3, [r7, #8]
34196f7a:	fbb2 f3f3 	udiv	r3, r2, r3
34196f7e:	60fb      	str	r3, [r7, #12]
              break;
34196f80:	e000      	b.n	34196f84 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
34196f82:	bf00      	nop
          }
        }
        break;
34196f84:	e056      	b.n	34197034 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
34196f86:	f7f8 f965 	bl	3418f254 <LL_RCC_IC20_IsEnabled>
34196f8a:	4603      	mov	r3, r0
34196f8c:	2b00      	cmp	r3, #0
34196f8e:	d053      	beq.n	34197038 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34196f90:	f7f8 f982 	bl	3418f298 <LL_RCC_IC20_GetDivider>
34196f94:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
34196f96:	f7f8 f971 	bl	3418f27c <LL_RCC_IC20_GetSource>
34196f9a:	4603      	mov	r3, r0
34196f9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196fa0:	d02f      	beq.n	34197002 <RCCEx_GetCLKPCLKFreq+0x32a>
34196fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34196fa6:	d835      	bhi.n	34197014 <RCCEx_GetCLKPCLKFreq+0x33c>
34196fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196fac:	d020      	beq.n	34196ff0 <RCCEx_GetCLKPCLKFreq+0x318>
34196fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34196fb2:	d82f      	bhi.n	34197014 <RCCEx_GetCLKPCLKFreq+0x33c>
34196fb4:	2b00      	cmp	r3, #0
34196fb6:	d009      	beq.n	34196fcc <RCCEx_GetCLKPCLKFreq+0x2f4>
34196fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34196fbc:	d00f      	beq.n	34196fde <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34196fbe:	e029      	b.n	34197014 <RCCEx_GetCLKPCLKFreq+0x33c>
34196fc0:	03d09000 	.word	0x03d09000
34196fc4:	003d0900 	.word	0x003d0900
34196fc8:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34196fcc:	f7ff fa80 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34196fd0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196fd2:	68fa      	ldr	r2, [r7, #12]
34196fd4:	68bb      	ldr	r3, [r7, #8]
34196fd6:	fbb2 f3f3 	udiv	r3, r2, r3
34196fda:	60fb      	str	r3, [r7, #12]
              break;
34196fdc:	e01b      	b.n	34197016 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34196fde:	f7ff fabd 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34196fe2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196fe4:	68fa      	ldr	r2, [r7, #12]
34196fe6:	68bb      	ldr	r3, [r7, #8]
34196fe8:	fbb2 f3f3 	udiv	r3, r2, r3
34196fec:	60fb      	str	r3, [r7, #12]
              break;
34196fee:	e012      	b.n	34197016 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34196ff0:	f7ff fafa 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34196ff4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34196ff6:	68fa      	ldr	r2, [r7, #12]
34196ff8:	68bb      	ldr	r3, [r7, #8]
34196ffa:	fbb2 f3f3 	udiv	r3, r2, r3
34196ffe:	60fb      	str	r3, [r7, #12]
              break;
34197000:	e009      	b.n	34197016 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34197002:	f7ff fb37 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34197006:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34197008:	68fa      	ldr	r2, [r7, #12]
3419700a:	68bb      	ldr	r3, [r7, #8]
3419700c:	fbb2 f3f3 	udiv	r3, r2, r3
34197010:	60fb      	str	r3, [r7, #12]
              break;
34197012:	e000      	b.n	34197016 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34197014:	bf00      	nop
          }
        }
        break;
34197016:	e00f      	b.n	34197038 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34197018:	bf00      	nop
3419701a:	e00e      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3419701c:	bf00      	nop
3419701e:	e00c      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197020:	bf00      	nop
34197022:	e00a      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197024:	bf00      	nop
34197026:	e008      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197028:	bf00      	nop
3419702a:	e006      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3419702c:	bf00      	nop
3419702e:	e004      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197030:	bf00      	nop
34197032:	e002      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197034:	bf00      	nop
34197036:	e000      	b.n	3419703a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34197038:	bf00      	nop
    }
  }

  return clkp_frequency;
3419703a:	68fb      	ldr	r3, [r7, #12]
}
3419703c:	4618      	mov	r0, r3
3419703e:	3710      	adds	r7, #16
34197040:	46bd      	mov	sp, r7
34197042:	bd80      	pop	{r7, pc}

34197044 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34197044:	b580      	push	{r7, lr}
34197046:	b082      	sub	sp, #8
34197048:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3419704a:	2300      	movs	r3, #0
3419704c:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3419704e:	f7f8 f881 	bl	3418f154 <LL_RCC_IC18_IsEnabled>
34197052:	4603      	mov	r3, r0
34197054:	2b00      	cmp	r3, #0
34197056:	d03c      	beq.n	341970d2 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34197058:	f7f8 f89e 	bl	3418f198 <LL_RCC_IC18_GetDivider>
3419705c:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3419705e:	f7f8 f88d 	bl	3418f17c <LL_RCC_IC18_GetSource>
34197062:	4603      	mov	r3, r0
34197064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197068:	d029      	beq.n	341970be <RCCEx_GetCSICLKFreq+0x7a>
3419706a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419706e:	d82f      	bhi.n	341970d0 <RCCEx_GetCSICLKFreq+0x8c>
34197070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197074:	d01a      	beq.n	341970ac <RCCEx_GetCSICLKFreq+0x68>
34197076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419707a:	d829      	bhi.n	341970d0 <RCCEx_GetCSICLKFreq+0x8c>
3419707c:	2b00      	cmp	r3, #0
3419707e:	d003      	beq.n	34197088 <RCCEx_GetCSICLKFreq+0x44>
34197080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197084:	d009      	beq.n	3419709a <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34197086:	e023      	b.n	341970d0 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197088:	f7ff fa22 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3419708c:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3419708e:	687a      	ldr	r2, [r7, #4]
34197090:	683b      	ldr	r3, [r7, #0]
34197092:	fbb2 f3f3 	udiv	r3, r2, r3
34197096:	607b      	str	r3, [r7, #4]
        break;
34197098:	e01b      	b.n	341970d2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3419709a:	f7ff fa5f 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419709e:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341970a0:	687a      	ldr	r2, [r7, #4]
341970a2:	683b      	ldr	r3, [r7, #0]
341970a4:	fbb2 f3f3 	udiv	r3, r2, r3
341970a8:	607b      	str	r3, [r7, #4]
        break;
341970aa:	e012      	b.n	341970d2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341970ac:	f7ff fa9c 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341970b0:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341970b2:	687a      	ldr	r2, [r7, #4]
341970b4:	683b      	ldr	r3, [r7, #0]
341970b6:	fbb2 f3f3 	udiv	r3, r2, r3
341970ba:	607b      	str	r3, [r7, #4]
        break;
341970bc:	e009      	b.n	341970d2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341970be:	f7ff fad9 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341970c2:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341970c4:	687a      	ldr	r2, [r7, #4]
341970c6:	683b      	ldr	r3, [r7, #0]
341970c8:	fbb2 f3f3 	udiv	r3, r2, r3
341970cc:	607b      	str	r3, [r7, #4]
        break;
341970ce:	e000      	b.n	341970d2 <RCCEx_GetCSICLKFreq+0x8e>
        break;
341970d0:	bf00      	nop
    }
  }

  return clkp_frequency;
341970d2:	687b      	ldr	r3, [r7, #4]
}
341970d4:	4618      	mov	r0, r3
341970d6:	3708      	adds	r7, #8
341970d8:	46bd      	mov	sp, r7
341970da:	bd80      	pop	{r7, pc}

341970dc <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
341970dc:	b580      	push	{r7, lr}
341970de:	b084      	sub	sp, #16
341970e0:	af00      	add	r7, sp, #0
341970e2:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
341970e4:	2300      	movs	r3, #0
341970e6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
341970e8:	6878      	ldr	r0, [r7, #4]
341970ea:	f7f7 f8fb 	bl	3418e2e4 <LL_RCC_GetDCMIPPClockSource>
341970ee:	4603      	mov	r3, r0
341970f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341970f4:	d062      	beq.n	341971bc <RCCEx_GetDCMIPPCLKFreq+0xe0>
341970f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341970fa:	d86d      	bhi.n	341971d8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
341970fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34197100:	d019      	beq.n	34197136 <RCCEx_GetDCMIPPCLKFreq+0x5a>
34197102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34197106:	d867      	bhi.n	341971d8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34197108:	2b00      	cmp	r3, #0
3419710a:	d003      	beq.n	34197114 <RCCEx_GetDCMIPPCLKFreq+0x38>
3419710c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34197110:	d00c      	beq.n	3419712c <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34197112:	e061      	b.n	341971d8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197114:	f7f6 f970 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197118:	4603      	mov	r3, r0
3419711a:	4618      	mov	r0, r3
3419711c:	f7ff faf0 	bl	34196700 <RCCEx_GetHCLKFreq>
34197120:	4603      	mov	r3, r0
34197122:	4618      	mov	r0, r3
34197124:	f7ff fb2f 	bl	34196786 <RCCEx_GetPCLK5Freq>
34197128:	60f8      	str	r0, [r7, #12]
      break;
3419712a:	e05a      	b.n	341971e2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419712c:	2007      	movs	r0, #7
3419712e:	f7ff fdd3 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197132:	60f8      	str	r0, [r7, #12]
      break;
34197134:	e055      	b.n	341971e2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34197136:	f7f7 ffcd 	bl	3418f0d4 <LL_RCC_IC17_IsEnabled>
3419713a:	4603      	mov	r3, r0
3419713c:	2b00      	cmp	r3, #0
3419713e:	d04d      	beq.n	341971dc <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34197140:	f7f7 ffea 	bl	3418f118 <LL_RCC_IC17_GetDivider>
34197144:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34197146:	f7f7 ffd9 	bl	3418f0fc <LL_RCC_IC17_GetSource>
3419714a:	4603      	mov	r3, r0
3419714c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197150:	d029      	beq.n	341971a6 <RCCEx_GetDCMIPPCLKFreq+0xca>
34197152:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197156:	d82f      	bhi.n	341971b8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34197158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419715c:	d01a      	beq.n	34197194 <RCCEx_GetDCMIPPCLKFreq+0xb8>
3419715e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197162:	d829      	bhi.n	341971b8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34197164:	2b00      	cmp	r3, #0
34197166:	d003      	beq.n	34197170 <RCCEx_GetDCMIPPCLKFreq+0x94>
34197168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419716c:	d009      	beq.n	34197182 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3419716e:	e023      	b.n	341971b8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197170:	f7ff f9ae 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197174:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34197176:	68fa      	ldr	r2, [r7, #12]
34197178:	68bb      	ldr	r3, [r7, #8]
3419717a:	fbb2 f3f3 	udiv	r3, r2, r3
3419717e:	60fb      	str	r3, [r7, #12]
            break;
34197180:	e01b      	b.n	341971ba <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197182:	f7ff f9eb 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197186:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34197188:	68fa      	ldr	r2, [r7, #12]
3419718a:	68bb      	ldr	r3, [r7, #8]
3419718c:	fbb2 f3f3 	udiv	r3, r2, r3
34197190:	60fb      	str	r3, [r7, #12]
            break;
34197192:	e012      	b.n	341971ba <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197194:	f7ff fa28 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34197198:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3419719a:	68fa      	ldr	r2, [r7, #12]
3419719c:	68bb      	ldr	r3, [r7, #8]
3419719e:	fbb2 f3f3 	udiv	r3, r2, r3
341971a2:	60fb      	str	r3, [r7, #12]
            break;
341971a4:	e009      	b.n	341971ba <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341971a6:	f7ff fa65 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341971aa:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341971ac:	68fa      	ldr	r2, [r7, #12]
341971ae:	68bb      	ldr	r3, [r7, #8]
341971b0:	fbb2 f3f3 	udiv	r3, r2, r3
341971b4:	60fb      	str	r3, [r7, #12]
            break;
341971b6:	e000      	b.n	341971ba <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
341971b8:	bf00      	nop
      break;
341971ba:	e00f      	b.n	341971dc <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
341971bc:	f7f6 fda6 	bl	3418dd0c <LL_RCC_HSI_IsReady>
341971c0:	4603      	mov	r3, r0
341971c2:	2b00      	cmp	r3, #0
341971c4:	d00c      	beq.n	341971e0 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341971c6:	f7f6 fdb3 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
341971ca:	4603      	mov	r3, r0
341971cc:	09db      	lsrs	r3, r3, #7
341971ce:	4a07      	ldr	r2, [pc, #28]	@ (341971ec <RCCEx_GetDCMIPPCLKFreq+0x110>)
341971d0:	fa22 f303 	lsr.w	r3, r2, r3
341971d4:	60fb      	str	r3, [r7, #12]
      break;
341971d6:	e003      	b.n	341971e0 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
341971d8:	bf00      	nop
341971da:	e002      	b.n	341971e2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
341971dc:	bf00      	nop
341971de:	e000      	b.n	341971e2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
341971e0:	bf00      	nop
  }

  return dcmipp_frequency;
341971e2:	68fb      	ldr	r3, [r7, #12]
}
341971e4:	4618      	mov	r0, r3
341971e6:	3710      	adds	r7, #16
341971e8:	46bd      	mov	sp, r7
341971ea:	bd80      	pop	{r7, pc}
341971ec:	03d09000 	.word	0x03d09000

341971f0 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
341971f0:	b580      	push	{r7, lr}
341971f2:	b084      	sub	sp, #16
341971f4:	af00      	add	r7, sp, #0
341971f6:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
341971f8:	2300      	movs	r3, #0
341971fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
341971fc:	6878      	ldr	r0, [r7, #4]
341971fe:	f7f7 f883 	bl	3418e308 <LL_RCC_GetETHClockSource>
34197202:	4603      	mov	r3, r0
34197204:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34197208:	d05e      	beq.n	341972c8 <RCCEx_GetETH1CLKFreq+0xd8>
3419720a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3419720e:	d863      	bhi.n	341972d8 <RCCEx_GetETH1CLKFreq+0xe8>
34197210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34197214:	d015      	beq.n	34197242 <RCCEx_GetETH1CLKFreq+0x52>
34197216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3419721a:	d85d      	bhi.n	341972d8 <RCCEx_GetETH1CLKFreq+0xe8>
3419721c:	2b00      	cmp	r3, #0
3419721e:	d003      	beq.n	34197228 <RCCEx_GetETH1CLKFreq+0x38>
34197220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34197224:	d008      	beq.n	34197238 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34197226:	e057      	b.n	341972d8 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34197228:	f7f6 f8e6 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3419722c:	4603      	mov	r3, r0
3419722e:	4618      	mov	r0, r3
34197230:	f7ff fa66 	bl	34196700 <RCCEx_GetHCLKFreq>
34197234:	60f8      	str	r0, [r7, #12]
      break;
34197236:	e054      	b.n	341972e2 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197238:	2007      	movs	r0, #7
3419723a:	f7ff fd4d 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
3419723e:	60f8      	str	r0, [r7, #12]
      break;
34197240:	e04f      	b.n	341972e2 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34197242:	f7f7 fe07 	bl	3418ee54 <LL_RCC_IC12_IsEnabled>
34197246:	4603      	mov	r3, r0
34197248:	2b00      	cmp	r3, #0
3419724a:	d047      	beq.n	341972dc <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
3419724c:	f7f7 fe24 	bl	3418ee98 <LL_RCC_IC12_GetDivider>
34197250:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34197252:	f7f7 fe13 	bl	3418ee7c <LL_RCC_IC12_GetSource>
34197256:	4603      	mov	r3, r0
34197258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419725c:	d029      	beq.n	341972b2 <RCCEx_GetETH1CLKFreq+0xc2>
3419725e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197262:	d82f      	bhi.n	341972c4 <RCCEx_GetETH1CLKFreq+0xd4>
34197264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197268:	d01a      	beq.n	341972a0 <RCCEx_GetETH1CLKFreq+0xb0>
3419726a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419726e:	d829      	bhi.n	341972c4 <RCCEx_GetETH1CLKFreq+0xd4>
34197270:	2b00      	cmp	r3, #0
34197272:	d003      	beq.n	3419727c <RCCEx_GetETH1CLKFreq+0x8c>
34197274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197278:	d009      	beq.n	3419728e <RCCEx_GetETH1CLKFreq+0x9e>
            break;
3419727a:	e023      	b.n	341972c4 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419727c:	f7ff f928 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197280:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34197282:	68fa      	ldr	r2, [r7, #12]
34197284:	68bb      	ldr	r3, [r7, #8]
34197286:	fbb2 f3f3 	udiv	r3, r2, r3
3419728a:	60fb      	str	r3, [r7, #12]
            break;
3419728c:	e01b      	b.n	341972c6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3419728e:	f7ff f965 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197292:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34197294:	68fa      	ldr	r2, [r7, #12]
34197296:	68bb      	ldr	r3, [r7, #8]
34197298:	fbb2 f3f3 	udiv	r3, r2, r3
3419729c:	60fb      	str	r3, [r7, #12]
            break;
3419729e:	e012      	b.n	341972c6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341972a0:	f7ff f9a2 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341972a4:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341972a6:	68fa      	ldr	r2, [r7, #12]
341972a8:	68bb      	ldr	r3, [r7, #8]
341972aa:	fbb2 f3f3 	udiv	r3, r2, r3
341972ae:	60fb      	str	r3, [r7, #12]
            break;
341972b0:	e009      	b.n	341972c6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341972b2:	f7ff f9df 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341972b6:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341972b8:	68fa      	ldr	r2, [r7, #12]
341972ba:	68bb      	ldr	r3, [r7, #8]
341972bc:	fbb2 f3f3 	udiv	r3, r2, r3
341972c0:	60fb      	str	r3, [r7, #12]
            break;
341972c2:	e000      	b.n	341972c6 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
341972c4:	bf00      	nop
      break;
341972c6:	e009      	b.n	341972dc <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
341972c8:	f7f6 fd0e 	bl	3418dce8 <LL_RCC_HSE_IsReady>
341972cc:	4603      	mov	r3, r0
341972ce:	2b00      	cmp	r3, #0
341972d0:	d006      	beq.n	341972e0 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
341972d2:	4b06      	ldr	r3, [pc, #24]	@ (341972ec <RCCEx_GetETH1CLKFreq+0xfc>)
341972d4:	60fb      	str	r3, [r7, #12]
      break;
341972d6:	e003      	b.n	341972e0 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
341972d8:	bf00      	nop
341972da:	e002      	b.n	341972e2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
341972dc:	bf00      	nop
341972de:	e000      	b.n	341972e2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
341972e0:	bf00      	nop
  }

  return eth1_frequency;
341972e2:	68fb      	ldr	r3, [r7, #12]
}
341972e4:	4618      	mov	r0, r3
341972e6:	3710      	adds	r7, #16
341972e8:	46bd      	mov	sp, r7
341972ea:	bd80      	pop	{r7, pc}
341972ec:	02dc6c00 	.word	0x02dc6c00

341972f0 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
341972f0:	b580      	push	{r7, lr}
341972f2:	b084      	sub	sp, #16
341972f4:	af00      	add	r7, sp, #0
341972f6:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
341972f8:	2300      	movs	r3, #0
341972fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
341972fc:	6878      	ldr	r0, [r7, #4]
341972fe:	f7f7 f815 	bl	3418e32c <LL_RCC_GetETHPTPClockSource>
34197302:	4603      	mov	r3, r0
34197304:	2b03      	cmp	r3, #3
34197306:	d863      	bhi.n	341973d0 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34197308:	a201      	add	r2, pc, #4	@ (adr r2, 34197310 <RCCEx_GetETH1PTPCLKFreq+0x20>)
3419730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419730e:	bf00      	nop
34197310:	34197321 	.word	0x34197321
34197314:	34197331 	.word	0x34197331
34197318:	3419733b 	.word	0x3419733b
3419731c:	341973c1 	.word	0x341973c1
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34197320:	f7f6 f86a 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197324:	4603      	mov	r3, r0
34197326:	4618      	mov	r0, r3
34197328:	f7ff f9ea 	bl	34196700 <RCCEx_GetHCLKFreq>
3419732c:	60f8      	str	r0, [r7, #12]
      break;
3419732e:	e054      	b.n	341973da <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197330:	2007      	movs	r0, #7
34197332:	f7ff fcd1 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197336:	60f8      	str	r0, [r7, #12]
      break;
34197338:	e04f      	b.n	341973da <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
3419733a:	f7f7 fdcb 	bl	3418eed4 <LL_RCC_IC13_IsEnabled>
3419733e:	4603      	mov	r3, r0
34197340:	2b00      	cmp	r3, #0
34197342:	d047      	beq.n	341973d4 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34197344:	f7f7 fde8 	bl	3418ef18 <LL_RCC_IC13_GetDivider>
34197348:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
3419734a:	f7f7 fdd7 	bl	3418eefc <LL_RCC_IC13_GetSource>
3419734e:	4603      	mov	r3, r0
34197350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197354:	d029      	beq.n	341973aa <RCCEx_GetETH1PTPCLKFreq+0xba>
34197356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419735a:	d82f      	bhi.n	341973bc <RCCEx_GetETH1PTPCLKFreq+0xcc>
3419735c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197360:	d01a      	beq.n	34197398 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34197362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197366:	d829      	bhi.n	341973bc <RCCEx_GetETH1PTPCLKFreq+0xcc>
34197368:	2b00      	cmp	r3, #0
3419736a:	d003      	beq.n	34197374 <RCCEx_GetETH1PTPCLKFreq+0x84>
3419736c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197370:	d009      	beq.n	34197386 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34197372:	e023      	b.n	341973bc <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197374:	f7ff f8ac 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197378:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3419737a:	68fa      	ldr	r2, [r7, #12]
3419737c:	68bb      	ldr	r3, [r7, #8]
3419737e:	fbb2 f3f3 	udiv	r3, r2, r3
34197382:	60fb      	str	r3, [r7, #12]
            break;
34197384:	e01b      	b.n	341973be <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197386:	f7ff f8e9 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419738a:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3419738c:	68fa      	ldr	r2, [r7, #12]
3419738e:	68bb      	ldr	r3, [r7, #8]
34197390:	fbb2 f3f3 	udiv	r3, r2, r3
34197394:	60fb      	str	r3, [r7, #12]
            break;
34197396:	e012      	b.n	341973be <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197398:	f7ff f926 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419739c:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3419739e:	68fa      	ldr	r2, [r7, #12]
341973a0:	68bb      	ldr	r3, [r7, #8]
341973a2:	fbb2 f3f3 	udiv	r3, r2, r3
341973a6:	60fb      	str	r3, [r7, #12]
            break;
341973a8:	e009      	b.n	341973be <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341973aa:	f7ff f963 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341973ae:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341973b0:	68fa      	ldr	r2, [r7, #12]
341973b2:	68bb      	ldr	r3, [r7, #8]
341973b4:	fbb2 f3f3 	udiv	r3, r2, r3
341973b8:	60fb      	str	r3, [r7, #12]
            break;
341973ba:	e000      	b.n	341973be <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
341973bc:	bf00      	nop
        }
      }
      break;
341973be:	e009      	b.n	341973d4 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
341973c0:	f7f6 fc92 	bl	3418dce8 <LL_RCC_HSE_IsReady>
341973c4:	4603      	mov	r3, r0
341973c6:	2b00      	cmp	r3, #0
341973c8:	d006      	beq.n	341973d8 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
341973ca:	4b0a      	ldr	r3, [pc, #40]	@ (341973f4 <RCCEx_GetETH1PTPCLKFreq+0x104>)
341973cc:	60fb      	str	r3, [r7, #12]
      }
      break;
341973ce:	e003      	b.n	341973d8 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
341973d0:	bf00      	nop
341973d2:	e002      	b.n	341973da <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
341973d4:	bf00      	nop
341973d6:	e000      	b.n	341973da <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
341973d8:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
341973da:	f7f6 fde3 	bl	3418dfa4 <LL_RCC_GetETH1PTPDivider>
341973de:	4603      	mov	r3, r0
341973e0:	091b      	lsrs	r3, r3, #4
341973e2:	3301      	adds	r3, #1
341973e4:	68fa      	ldr	r2, [r7, #12]
341973e6:	fbb2 f3f3 	udiv	r3, r2, r3
}
341973ea:	4618      	mov	r0, r3
341973ec:	3710      	adds	r7, #16
341973ee:	46bd      	mov	sp, r7
341973f0:	bd80      	pop	{r7, pc}
341973f2:	bf00      	nop
341973f4:	02dc6c00 	.word	0x02dc6c00

341973f8 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
341973f8:	b580      	push	{r7, lr}
341973fa:	b084      	sub	sp, #16
341973fc:	af00      	add	r7, sp, #0
341973fe:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34197400:	2300      	movs	r3, #0
34197402:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34197404:	6878      	ldr	r0, [r7, #4]
34197406:	f7f6 ffa3 	bl	3418e350 <LL_RCC_GetFDCANClockSource>
3419740a:	4603      	mov	r3, r0
3419740c:	2b03      	cmp	r3, #3
3419740e:	d867      	bhi.n	341974e0 <RCCEx_GetFDCANCLKFreq+0xe8>
34197410:	a201      	add	r2, pc, #4	@ (adr r2, 34197418 <RCCEx_GetFDCANCLKFreq+0x20>)
34197412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34197416:	bf00      	nop
34197418:	34197429 	.word	0x34197429
3419741c:	34197441 	.word	0x34197441
34197420:	3419744b 	.word	0x3419744b
34197424:	341974d1 	.word	0x341974d1
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197428:	f7f5 ffe6 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3419742c:	4603      	mov	r3, r0
3419742e:	4618      	mov	r0, r3
34197430:	f7ff f966 	bl	34196700 <RCCEx_GetHCLKFreq>
34197434:	4603      	mov	r3, r0
34197436:	4618      	mov	r0, r3
34197438:	f7ff f973 	bl	34196722 <RCCEx_GetPCLK1Freq>
3419743c:	60f8      	str	r0, [r7, #12]
      break;
3419743e:	e054      	b.n	341974ea <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197440:	2007      	movs	r0, #7
34197442:	f7ff fc49 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197446:	60f8      	str	r0, [r7, #12]
      break;
34197448:	e04f      	b.n	341974ea <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
3419744a:	f7f7 fec3 	bl	3418f1d4 <LL_RCC_IC19_IsEnabled>
3419744e:	4603      	mov	r3, r0
34197450:	2b00      	cmp	r3, #0
34197452:	d047      	beq.n	341974e4 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34197454:	f7f7 fee0 	bl	3418f218 <LL_RCC_IC19_GetDivider>
34197458:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
3419745a:	f7f7 fecf 	bl	3418f1fc <LL_RCC_IC19_GetSource>
3419745e:	4603      	mov	r3, r0
34197460:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197464:	d029      	beq.n	341974ba <RCCEx_GetFDCANCLKFreq+0xc2>
34197466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419746a:	d82f      	bhi.n	341974cc <RCCEx_GetFDCANCLKFreq+0xd4>
3419746c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197470:	d01a      	beq.n	341974a8 <RCCEx_GetFDCANCLKFreq+0xb0>
34197472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197476:	d829      	bhi.n	341974cc <RCCEx_GetFDCANCLKFreq+0xd4>
34197478:	2b00      	cmp	r3, #0
3419747a:	d003      	beq.n	34197484 <RCCEx_GetFDCANCLKFreq+0x8c>
3419747c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197480:	d009      	beq.n	34197496 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34197482:	e023      	b.n	341974cc <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197484:	f7ff f824 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197488:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3419748a:	68fa      	ldr	r2, [r7, #12]
3419748c:	68bb      	ldr	r3, [r7, #8]
3419748e:	fbb2 f3f3 	udiv	r3, r2, r3
34197492:	60fb      	str	r3, [r7, #12]
            break;
34197494:	e01b      	b.n	341974ce <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197496:	f7ff f861 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419749a:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3419749c:	68fa      	ldr	r2, [r7, #12]
3419749e:	68bb      	ldr	r3, [r7, #8]
341974a0:	fbb2 f3f3 	udiv	r3, r2, r3
341974a4:	60fb      	str	r3, [r7, #12]
            break;
341974a6:	e012      	b.n	341974ce <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341974a8:	f7ff f89e 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341974ac:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
341974ae:	68fa      	ldr	r2, [r7, #12]
341974b0:	68bb      	ldr	r3, [r7, #8]
341974b2:	fbb2 f3f3 	udiv	r3, r2, r3
341974b6:	60fb      	str	r3, [r7, #12]
            break;
341974b8:	e009      	b.n	341974ce <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341974ba:	f7ff f8db 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341974be:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
341974c0:	68fa      	ldr	r2, [r7, #12]
341974c2:	68bb      	ldr	r3, [r7, #8]
341974c4:	fbb2 f3f3 	udiv	r3, r2, r3
341974c8:	60fb      	str	r3, [r7, #12]
            break;
341974ca:	e000      	b.n	341974ce <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
341974cc:	bf00      	nop
        }
      }
      break;
341974ce:	e009      	b.n	341974e4 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
341974d0:	f7f6 fc0a 	bl	3418dce8 <LL_RCC_HSE_IsReady>
341974d4:	4603      	mov	r3, r0
341974d6:	2b00      	cmp	r3, #0
341974d8:	d006      	beq.n	341974e8 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
341974da:	4b06      	ldr	r3, [pc, #24]	@ (341974f4 <RCCEx_GetFDCANCLKFreq+0xfc>)
341974dc:	60fb      	str	r3, [r7, #12]
      }
      break;
341974de:	e003      	b.n	341974e8 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
341974e0:	bf00      	nop
341974e2:	e002      	b.n	341974ea <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
341974e4:	bf00      	nop
341974e6:	e000      	b.n	341974ea <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
341974e8:	bf00      	nop
  }

  return fdcan_frequency;
341974ea:	68fb      	ldr	r3, [r7, #12]
}
341974ec:	4618      	mov	r0, r3
341974ee:	3710      	adds	r7, #16
341974f0:	46bd      	mov	sp, r7
341974f2:	bd80      	pop	{r7, pc}
341974f4:	02dc6c00 	.word	0x02dc6c00

341974f8 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
341974f8:	b580      	push	{r7, lr}
341974fa:	b084      	sub	sp, #16
341974fc:	af00      	add	r7, sp, #0
341974fe:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34197500:	2300      	movs	r3, #0
34197502:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34197504:	6878      	ldr	r0, [r7, #4]
34197506:	f7f6 ff35 	bl	3418e374 <LL_RCC_GetFMCClockSource>
3419750a:	4603      	mov	r3, r0
3419750c:	2b30      	cmp	r3, #48	@ 0x30
3419750e:	d05d      	beq.n	341975cc <RCCEx_GetFMCCLKFreq+0xd4>
34197510:	2b30      	cmp	r3, #48	@ 0x30
34197512:	f200 809e 	bhi.w	34197652 <RCCEx_GetFMCCLKFreq+0x15a>
34197516:	2b20      	cmp	r3, #32
34197518:	d014      	beq.n	34197544 <RCCEx_GetFMCCLKFreq+0x4c>
3419751a:	2b20      	cmp	r3, #32
3419751c:	f200 8099 	bhi.w	34197652 <RCCEx_GetFMCCLKFreq+0x15a>
34197520:	2b00      	cmp	r3, #0
34197522:	d002      	beq.n	3419752a <RCCEx_GetFMCCLKFreq+0x32>
34197524:	2b10      	cmp	r3, #16
34197526:	d008      	beq.n	3419753a <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34197528:	e093      	b.n	34197652 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3419752a:	f7f5 ff65 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3419752e:	4603      	mov	r3, r0
34197530:	4618      	mov	r0, r3
34197532:	f7ff f8e5 	bl	34196700 <RCCEx_GetHCLKFreq>
34197536:	60f8      	str	r0, [r7, #12]
      break;
34197538:	e090      	b.n	3419765c <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419753a:	2007      	movs	r0, #7
3419753c:	f7ff fbcc 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197540:	60f8      	str	r0, [r7, #12]
      break;
34197542:	e08b      	b.n	3419765c <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34197544:	f7f7 fac6 	bl	3418ead4 <LL_RCC_IC3_IsEnabled>
34197548:	4603      	mov	r3, r0
3419754a:	2b00      	cmp	r3, #0
3419754c:	f000 8083 	beq.w	34197656 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34197550:	f7f7 fae2 	bl	3418eb18 <LL_RCC_IC3_GetDivider>
34197554:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34197556:	f7f7 fad1 	bl	3418eafc <LL_RCC_IC3_GetSource>
3419755a:	4603      	mov	r3, r0
3419755c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197560:	d029      	beq.n	341975b6 <RCCEx_GetFMCCLKFreq+0xbe>
34197562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197566:	d82f      	bhi.n	341975c8 <RCCEx_GetFMCCLKFreq+0xd0>
34197568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419756c:	d01a      	beq.n	341975a4 <RCCEx_GetFMCCLKFreq+0xac>
3419756e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197572:	d829      	bhi.n	341975c8 <RCCEx_GetFMCCLKFreq+0xd0>
34197574:	2b00      	cmp	r3, #0
34197576:	d003      	beq.n	34197580 <RCCEx_GetFMCCLKFreq+0x88>
34197578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419757c:	d009      	beq.n	34197592 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3419757e:	e023      	b.n	341975c8 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197580:	f7fe ffa6 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197584:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34197586:	68fa      	ldr	r2, [r7, #12]
34197588:	68bb      	ldr	r3, [r7, #8]
3419758a:	fbb2 f3f3 	udiv	r3, r2, r3
3419758e:	60fb      	str	r3, [r7, #12]
            break;
34197590:	e01b      	b.n	341975ca <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197592:	f7fe ffe3 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197596:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34197598:	68fa      	ldr	r2, [r7, #12]
3419759a:	68bb      	ldr	r3, [r7, #8]
3419759c:	fbb2 f3f3 	udiv	r3, r2, r3
341975a0:	60fb      	str	r3, [r7, #12]
            break;
341975a2:	e012      	b.n	341975ca <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341975a4:	f7ff f820 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341975a8:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341975aa:	68fa      	ldr	r2, [r7, #12]
341975ac:	68bb      	ldr	r3, [r7, #8]
341975ae:	fbb2 f3f3 	udiv	r3, r2, r3
341975b2:	60fb      	str	r3, [r7, #12]
            break;
341975b4:	e009      	b.n	341975ca <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341975b6:	f7ff f85d 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341975ba:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341975bc:	68fa      	ldr	r2, [r7, #12]
341975be:	68bb      	ldr	r3, [r7, #8]
341975c0:	fbb2 f3f3 	udiv	r3, r2, r3
341975c4:	60fb      	str	r3, [r7, #12]
            break;
341975c6:	e000      	b.n	341975ca <RCCEx_GetFMCCLKFreq+0xd2>
            break;
341975c8:	bf00      	nop
      break;
341975ca:	e044      	b.n	34197656 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
341975cc:	f7f7 fac2 	bl	3418eb54 <LL_RCC_IC4_IsEnabled>
341975d0:	4603      	mov	r3, r0
341975d2:	2b00      	cmp	r3, #0
341975d4:	d041      	beq.n	3419765a <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
341975d6:	f7f7 fadf 	bl	3418eb98 <LL_RCC_IC4_GetDivider>
341975da:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
341975dc:	f7f7 face 	bl	3418eb7c <LL_RCC_IC4_GetSource>
341975e0:	4603      	mov	r3, r0
341975e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341975e6:	d029      	beq.n	3419763c <RCCEx_GetFMCCLKFreq+0x144>
341975e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341975ec:	d82f      	bhi.n	3419764e <RCCEx_GetFMCCLKFreq+0x156>
341975ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341975f2:	d01a      	beq.n	3419762a <RCCEx_GetFMCCLKFreq+0x132>
341975f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341975f8:	d829      	bhi.n	3419764e <RCCEx_GetFMCCLKFreq+0x156>
341975fa:	2b00      	cmp	r3, #0
341975fc:	d003      	beq.n	34197606 <RCCEx_GetFMCCLKFreq+0x10e>
341975fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197602:	d009      	beq.n	34197618 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34197604:	e023      	b.n	3419764e <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197606:	f7fe ff63 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3419760a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3419760c:	68fa      	ldr	r2, [r7, #12]
3419760e:	68bb      	ldr	r3, [r7, #8]
34197610:	fbb2 f3f3 	udiv	r3, r2, r3
34197614:	60fb      	str	r3, [r7, #12]
            break;
34197616:	e01b      	b.n	34197650 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197618:	f7fe ffa0 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419761c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3419761e:	68fa      	ldr	r2, [r7, #12]
34197620:	68bb      	ldr	r3, [r7, #8]
34197622:	fbb2 f3f3 	udiv	r3, r2, r3
34197626:	60fb      	str	r3, [r7, #12]
            break;
34197628:	e012      	b.n	34197650 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3419762a:	f7fe ffdd 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419762e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34197630:	68fa      	ldr	r2, [r7, #12]
34197632:	68bb      	ldr	r3, [r7, #8]
34197634:	fbb2 f3f3 	udiv	r3, r2, r3
34197638:	60fb      	str	r3, [r7, #12]
            break;
3419763a:	e009      	b.n	34197650 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3419763c:	f7ff f81a 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34197640:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34197642:	68fa      	ldr	r2, [r7, #12]
34197644:	68bb      	ldr	r3, [r7, #8]
34197646:	fbb2 f3f3 	udiv	r3, r2, r3
3419764a:	60fb      	str	r3, [r7, #12]
            break;
3419764c:	e000      	b.n	34197650 <RCCEx_GetFMCCLKFreq+0x158>
            break;
3419764e:	bf00      	nop
      break;
34197650:	e003      	b.n	3419765a <RCCEx_GetFMCCLKFreq+0x162>
      break;
34197652:	bf00      	nop
34197654:	e002      	b.n	3419765c <RCCEx_GetFMCCLKFreq+0x164>
      break;
34197656:	bf00      	nop
34197658:	e000      	b.n	3419765c <RCCEx_GetFMCCLKFreq+0x164>
      break;
3419765a:	bf00      	nop
  }

  return fmc_frequency;
3419765c:	68fb      	ldr	r3, [r7, #12]
}
3419765e:	4618      	mov	r0, r3
34197660:	3710      	adds	r7, #16
34197662:	46bd      	mov	sp, r7
34197664:	bd80      	pop	{r7, pc}
	...

34197668 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34197668:	b580      	push	{r7, lr}
3419766a:	b084      	sub	sp, #16
3419766c:	af00      	add	r7, sp, #0
3419766e:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34197670:	2300      	movs	r3, #0
34197672:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34197674:	6878      	ldr	r0, [r7, #4]
34197676:	f7f6 fe8f 	bl	3418e398 <LL_RCC_GetI2CClockSource>
3419767a:	4603      	mov	r3, r0
3419767c:	4aa2      	ldr	r2, [pc, #648]	@ (34197908 <RCCEx_GetI2CCLKFreq+0x2a0>)
3419767e:	4293      	cmp	r3, r2
34197680:	f000 8172 	beq.w	34197968 <RCCEx_GetI2CCLKFreq+0x300>
34197684:	4aa0      	ldr	r2, [pc, #640]	@ (34197908 <RCCEx_GetI2CCLKFreq+0x2a0>)
34197686:	4293      	cmp	r3, r2
34197688:	f200 8184 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419768c:	4a9f      	ldr	r2, [pc, #636]	@ (3419790c <RCCEx_GetI2CCLKFreq+0x2a4>)
3419768e:	4293      	cmp	r3, r2
34197690:	f000 816a 	beq.w	34197968 <RCCEx_GetI2CCLKFreq+0x300>
34197694:	4a9d      	ldr	r2, [pc, #628]	@ (3419790c <RCCEx_GetI2CCLKFreq+0x2a4>)
34197696:	4293      	cmp	r3, r2
34197698:	f200 817c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419769c:	4a9c      	ldr	r2, [pc, #624]	@ (34197910 <RCCEx_GetI2CCLKFreq+0x2a8>)
3419769e:	4293      	cmp	r3, r2
341976a0:	f000 8162 	beq.w	34197968 <RCCEx_GetI2CCLKFreq+0x300>
341976a4:	4a9a      	ldr	r2, [pc, #616]	@ (34197910 <RCCEx_GetI2CCLKFreq+0x2a8>)
341976a6:	4293      	cmp	r3, r2
341976a8:	f200 8174 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976ac:	4a99      	ldr	r2, [pc, #612]	@ (34197914 <RCCEx_GetI2CCLKFreq+0x2ac>)
341976ae:	4293      	cmp	r3, r2
341976b0:	f000 815a 	beq.w	34197968 <RCCEx_GetI2CCLKFreq+0x300>
341976b4:	4a97      	ldr	r2, [pc, #604]	@ (34197914 <RCCEx_GetI2CCLKFreq+0x2ac>)
341976b6:	4293      	cmp	r3, r2
341976b8:	f200 816c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976bc:	4a96      	ldr	r2, [pc, #600]	@ (34197918 <RCCEx_GetI2CCLKFreq+0x2b0>)
341976be:	4293      	cmp	r3, r2
341976c0:	f000 8160 	beq.w	34197984 <RCCEx_GetI2CCLKFreq+0x31c>
341976c4:	4a94      	ldr	r2, [pc, #592]	@ (34197918 <RCCEx_GetI2CCLKFreq+0x2b0>)
341976c6:	4293      	cmp	r3, r2
341976c8:	f200 8164 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976cc:	4a93      	ldr	r2, [pc, #588]	@ (3419791c <RCCEx_GetI2CCLKFreq+0x2b4>)
341976ce:	4293      	cmp	r3, r2
341976d0:	f000 8158 	beq.w	34197984 <RCCEx_GetI2CCLKFreq+0x31c>
341976d4:	4a91      	ldr	r2, [pc, #580]	@ (3419791c <RCCEx_GetI2CCLKFreq+0x2b4>)
341976d6:	4293      	cmp	r3, r2
341976d8:	f200 815c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976dc:	4a90      	ldr	r2, [pc, #576]	@ (34197920 <RCCEx_GetI2CCLKFreq+0x2b8>)
341976de:	4293      	cmp	r3, r2
341976e0:	f000 8150 	beq.w	34197984 <RCCEx_GetI2CCLKFreq+0x31c>
341976e4:	4a8e      	ldr	r2, [pc, #568]	@ (34197920 <RCCEx_GetI2CCLKFreq+0x2b8>)
341976e6:	4293      	cmp	r3, r2
341976e8:	f200 8154 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976ec:	4a8d      	ldr	r2, [pc, #564]	@ (34197924 <RCCEx_GetI2CCLKFreq+0x2bc>)
341976ee:	4293      	cmp	r3, r2
341976f0:	f000 8148 	beq.w	34197984 <RCCEx_GetI2CCLKFreq+0x31c>
341976f4:	4a8b      	ldr	r2, [pc, #556]	@ (34197924 <RCCEx_GetI2CCLKFreq+0x2bc>)
341976f6:	4293      	cmp	r3, r2
341976f8:	f200 814c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341976fc:	4a8a      	ldr	r2, [pc, #552]	@ (34197928 <RCCEx_GetI2CCLKFreq+0x2c0>)
341976fe:	4293      	cmp	r3, r2
34197700:	f000 80be 	beq.w	34197880 <RCCEx_GetI2CCLKFreq+0x218>
34197704:	4a88      	ldr	r2, [pc, #544]	@ (34197928 <RCCEx_GetI2CCLKFreq+0x2c0>)
34197706:	4293      	cmp	r3, r2
34197708:	f200 8144 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419770c:	4a87      	ldr	r2, [pc, #540]	@ (3419792c <RCCEx_GetI2CCLKFreq+0x2c4>)
3419770e:	4293      	cmp	r3, r2
34197710:	f000 80b6 	beq.w	34197880 <RCCEx_GetI2CCLKFreq+0x218>
34197714:	4a85      	ldr	r2, [pc, #532]	@ (3419792c <RCCEx_GetI2CCLKFreq+0x2c4>)
34197716:	4293      	cmp	r3, r2
34197718:	f200 813c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419771c:	4a84      	ldr	r2, [pc, #528]	@ (34197930 <RCCEx_GetI2CCLKFreq+0x2c8>)
3419771e:	4293      	cmp	r3, r2
34197720:	f000 80ae 	beq.w	34197880 <RCCEx_GetI2CCLKFreq+0x218>
34197724:	4a82      	ldr	r2, [pc, #520]	@ (34197930 <RCCEx_GetI2CCLKFreq+0x2c8>)
34197726:	4293      	cmp	r3, r2
34197728:	f200 8134 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419772c:	4a81      	ldr	r2, [pc, #516]	@ (34197934 <RCCEx_GetI2CCLKFreq+0x2cc>)
3419772e:	4293      	cmp	r3, r2
34197730:	f000 80a6 	beq.w	34197880 <RCCEx_GetI2CCLKFreq+0x218>
34197734:	4a7f      	ldr	r2, [pc, #508]	@ (34197934 <RCCEx_GetI2CCLKFreq+0x2cc>)
34197736:	4293      	cmp	r3, r2
34197738:	f200 812c 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419773c:	4a7e      	ldr	r2, [pc, #504]	@ (34197938 <RCCEx_GetI2CCLKFreq+0x2d0>)
3419773e:	4293      	cmp	r3, r2
34197740:	d05a      	beq.n	341977f8 <RCCEx_GetI2CCLKFreq+0x190>
34197742:	4a7d      	ldr	r2, [pc, #500]	@ (34197938 <RCCEx_GetI2CCLKFreq+0x2d0>)
34197744:	4293      	cmp	r3, r2
34197746:	f200 8125 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419774a:	4a7c      	ldr	r2, [pc, #496]	@ (3419793c <RCCEx_GetI2CCLKFreq+0x2d4>)
3419774c:	4293      	cmp	r3, r2
3419774e:	d053      	beq.n	341977f8 <RCCEx_GetI2CCLKFreq+0x190>
34197750:	4a7a      	ldr	r2, [pc, #488]	@ (3419793c <RCCEx_GetI2CCLKFreq+0x2d4>)
34197752:	4293      	cmp	r3, r2
34197754:	f200 811e 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
34197758:	4a79      	ldr	r2, [pc, #484]	@ (34197940 <RCCEx_GetI2CCLKFreq+0x2d8>)
3419775a:	4293      	cmp	r3, r2
3419775c:	d04c      	beq.n	341977f8 <RCCEx_GetI2CCLKFreq+0x190>
3419775e:	4a78      	ldr	r2, [pc, #480]	@ (34197940 <RCCEx_GetI2CCLKFreq+0x2d8>)
34197760:	4293      	cmp	r3, r2
34197762:	f200 8117 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
34197766:	4a77      	ldr	r2, [pc, #476]	@ (34197944 <RCCEx_GetI2CCLKFreq+0x2dc>)
34197768:	4293      	cmp	r3, r2
3419776a:	d045      	beq.n	341977f8 <RCCEx_GetI2CCLKFreq+0x190>
3419776c:	4a75      	ldr	r2, [pc, #468]	@ (34197944 <RCCEx_GetI2CCLKFreq+0x2dc>)
3419776e:	4293      	cmp	r3, r2
34197770:	f200 8110 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
34197774:	4a74      	ldr	r2, [pc, #464]	@ (34197948 <RCCEx_GetI2CCLKFreq+0x2e0>)
34197776:	4293      	cmp	r3, r2
34197778:	d039      	beq.n	341977ee <RCCEx_GetI2CCLKFreq+0x186>
3419777a:	4a73      	ldr	r2, [pc, #460]	@ (34197948 <RCCEx_GetI2CCLKFreq+0x2e0>)
3419777c:	4293      	cmp	r3, r2
3419777e:	f200 8109 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
34197782:	4a72      	ldr	r2, [pc, #456]	@ (3419794c <RCCEx_GetI2CCLKFreq+0x2e4>)
34197784:	4293      	cmp	r3, r2
34197786:	d032      	beq.n	341977ee <RCCEx_GetI2CCLKFreq+0x186>
34197788:	4a70      	ldr	r2, [pc, #448]	@ (3419794c <RCCEx_GetI2CCLKFreq+0x2e4>)
3419778a:	4293      	cmp	r3, r2
3419778c:	f200 8102 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
34197790:	4a6f      	ldr	r2, [pc, #444]	@ (34197950 <RCCEx_GetI2CCLKFreq+0x2e8>)
34197792:	4293      	cmp	r3, r2
34197794:	d02b      	beq.n	341977ee <RCCEx_GetI2CCLKFreq+0x186>
34197796:	4a6e      	ldr	r2, [pc, #440]	@ (34197950 <RCCEx_GetI2CCLKFreq+0x2e8>)
34197798:	4293      	cmp	r3, r2
3419779a:	f200 80fb 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
3419779e:	4a6d      	ldr	r2, [pc, #436]	@ (34197954 <RCCEx_GetI2CCLKFreq+0x2ec>)
341977a0:	4293      	cmp	r3, r2
341977a2:	d024      	beq.n	341977ee <RCCEx_GetI2CCLKFreq+0x186>
341977a4:	4a6b      	ldr	r2, [pc, #428]	@ (34197954 <RCCEx_GetI2CCLKFreq+0x2ec>)
341977a6:	4293      	cmp	r3, r2
341977a8:	f200 80f4 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341977ac:	4a6a      	ldr	r2, [pc, #424]	@ (34197958 <RCCEx_GetI2CCLKFreq+0x2f0>)
341977ae:	4293      	cmp	r3, r2
341977b0:	d011      	beq.n	341977d6 <RCCEx_GetI2CCLKFreq+0x16e>
341977b2:	4a69      	ldr	r2, [pc, #420]	@ (34197958 <RCCEx_GetI2CCLKFreq+0x2f0>)
341977b4:	4293      	cmp	r3, r2
341977b6:	f200 80ed 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341977ba:	4a68      	ldr	r2, [pc, #416]	@ (3419795c <RCCEx_GetI2CCLKFreq+0x2f4>)
341977bc:	4293      	cmp	r3, r2
341977be:	d00a      	beq.n	341977d6 <RCCEx_GetI2CCLKFreq+0x16e>
341977c0:	4a66      	ldr	r2, [pc, #408]	@ (3419795c <RCCEx_GetI2CCLKFreq+0x2f4>)
341977c2:	4293      	cmp	r3, r2
341977c4:	f200 80e6 	bhi.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
341977c8:	4a65      	ldr	r2, [pc, #404]	@ (34197960 <RCCEx_GetI2CCLKFreq+0x2f8>)
341977ca:	4293      	cmp	r3, r2
341977cc:	d003      	beq.n	341977d6 <RCCEx_GetI2CCLKFreq+0x16e>
341977ce:	4a65      	ldr	r2, [pc, #404]	@ (34197964 <RCCEx_GetI2CCLKFreq+0x2fc>)
341977d0:	4293      	cmp	r3, r2
341977d2:	f040 80df 	bne.w	34197994 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341977d6:	f7f5 fe0f 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
341977da:	4603      	mov	r3, r0
341977dc:	4618      	mov	r0, r3
341977de:	f7fe ff8f 	bl	34196700 <RCCEx_GetHCLKFreq>
341977e2:	4603      	mov	r3, r0
341977e4:	4618      	mov	r0, r3
341977e6:	f7fe ff9c 	bl	34196722 <RCCEx_GetPCLK1Freq>
341977ea:	60f8      	str	r0, [r7, #12]
      break;
341977ec:	e0db      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341977ee:	2007      	movs	r0, #7
341977f0:	f7ff fa72 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341977f4:	60f8      	str	r0, [r7, #12]
      break;
341977f6:	e0d6      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
341977f8:	f7f7 faec 	bl	3418edd4 <LL_RCC_IC10_IsEnabled>
341977fc:	4603      	mov	r3, r0
341977fe:	2b00      	cmp	r3, #0
34197800:	f000 80ca 	beq.w	34197998 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34197804:	f7f7 fb08 	bl	3418ee18 <LL_RCC_IC10_GetDivider>
34197808:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3419780a:	f7f7 faf7 	bl	3418edfc <LL_RCC_IC10_GetSource>
3419780e:	4603      	mov	r3, r0
34197810:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197814:	d029      	beq.n	3419786a <RCCEx_GetI2CCLKFreq+0x202>
34197816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419781a:	d82f      	bhi.n	3419787c <RCCEx_GetI2CCLKFreq+0x214>
3419781c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197820:	d01a      	beq.n	34197858 <RCCEx_GetI2CCLKFreq+0x1f0>
34197822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197826:	d829      	bhi.n	3419787c <RCCEx_GetI2CCLKFreq+0x214>
34197828:	2b00      	cmp	r3, #0
3419782a:	d003      	beq.n	34197834 <RCCEx_GetI2CCLKFreq+0x1cc>
3419782c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197830:	d009      	beq.n	34197846 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34197832:	e023      	b.n	3419787c <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197834:	f7fe fe4c 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197838:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3419783a:	68fa      	ldr	r2, [r7, #12]
3419783c:	68bb      	ldr	r3, [r7, #8]
3419783e:	fbb2 f3f3 	udiv	r3, r2, r3
34197842:	60fb      	str	r3, [r7, #12]
            break;
34197844:	e01b      	b.n	3419787e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197846:	f7fe fe89 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419784a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3419784c:	68fa      	ldr	r2, [r7, #12]
3419784e:	68bb      	ldr	r3, [r7, #8]
34197850:	fbb2 f3f3 	udiv	r3, r2, r3
34197854:	60fb      	str	r3, [r7, #12]
            break;
34197856:	e012      	b.n	3419787e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197858:	f7fe fec6 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419785c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3419785e:	68fa      	ldr	r2, [r7, #12]
34197860:	68bb      	ldr	r3, [r7, #8]
34197862:	fbb2 f3f3 	udiv	r3, r2, r3
34197866:	60fb      	str	r3, [r7, #12]
            break;
34197868:	e009      	b.n	3419787e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3419786a:	f7fe ff03 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3419786e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34197870:	68fa      	ldr	r2, [r7, #12]
34197872:	68bb      	ldr	r3, [r7, #8]
34197874:	fbb2 f3f3 	udiv	r3, r2, r3
34197878:	60fb      	str	r3, [r7, #12]
            break;
3419787a:	e000      	b.n	3419787e <RCCEx_GetI2CCLKFreq+0x216>
            break;
3419787c:	bf00      	nop
        }
      }
      break;
3419787e:	e08b      	b.n	34197998 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34197880:	f7f7 fba8 	bl	3418efd4 <LL_RCC_IC15_IsEnabled>
34197884:	4603      	mov	r3, r0
34197886:	2b00      	cmp	r3, #0
34197888:	f000 8088 	beq.w	3419799c <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3419788c:	f7f7 fbc4 	bl	3418f018 <LL_RCC_IC15_GetDivider>
34197890:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34197892:	f7f7 fbb3 	bl	3418effc <LL_RCC_IC15_GetSource>
34197896:	4603      	mov	r3, r0
34197898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419789c:	d029      	beq.n	341978f2 <RCCEx_GetI2CCLKFreq+0x28a>
3419789e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341978a2:	d82f      	bhi.n	34197904 <RCCEx_GetI2CCLKFreq+0x29c>
341978a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341978a8:	d01a      	beq.n	341978e0 <RCCEx_GetI2CCLKFreq+0x278>
341978aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341978ae:	d829      	bhi.n	34197904 <RCCEx_GetI2CCLKFreq+0x29c>
341978b0:	2b00      	cmp	r3, #0
341978b2:	d003      	beq.n	341978bc <RCCEx_GetI2CCLKFreq+0x254>
341978b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341978b8:	d009      	beq.n	341978ce <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341978ba:	e023      	b.n	34197904 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341978bc:	f7fe fe08 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341978c0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341978c2:	68fa      	ldr	r2, [r7, #12]
341978c4:	68bb      	ldr	r3, [r7, #8]
341978c6:	fbb2 f3f3 	udiv	r3, r2, r3
341978ca:	60fb      	str	r3, [r7, #12]
            break;
341978cc:	e01b      	b.n	34197906 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341978ce:	f7fe fe45 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341978d2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341978d4:	68fa      	ldr	r2, [r7, #12]
341978d6:	68bb      	ldr	r3, [r7, #8]
341978d8:	fbb2 f3f3 	udiv	r3, r2, r3
341978dc:	60fb      	str	r3, [r7, #12]
            break;
341978de:	e012      	b.n	34197906 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341978e0:	f7fe fe82 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341978e4:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341978e6:	68fa      	ldr	r2, [r7, #12]
341978e8:	68bb      	ldr	r3, [r7, #8]
341978ea:	fbb2 f3f3 	udiv	r3, r2, r3
341978ee:	60fb      	str	r3, [r7, #12]
            break;
341978f0:	e009      	b.n	34197906 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341978f2:	f7fe febf 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341978f6:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341978f8:	68fa      	ldr	r2, [r7, #12]
341978fa:	68bb      	ldr	r3, [r7, #8]
341978fc:	fbb2 f3f3 	udiv	r3, r2, r3
34197900:	60fb      	str	r3, [r7, #12]
            break;
34197902:	e000      	b.n	34197906 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34197904:	bf00      	nop
        }
      }
      break;
34197906:	e049      	b.n	3419799c <RCCEx_GetI2CCLKFreq+0x334>
34197908:	07050c0c 	.word	0x07050c0c
3419790c:	0705080c 	.word	0x0705080c
34197910:	0705040c 	.word	0x0705040c
34197914:	0705000c 	.word	0x0705000c
34197918:	07040c0c 	.word	0x07040c0c
3419791c:	0704080c 	.word	0x0704080c
34197920:	0704040c 	.word	0x0704040c
34197924:	0704000c 	.word	0x0704000c
34197928:	07030c0c 	.word	0x07030c0c
3419792c:	0703080c 	.word	0x0703080c
34197930:	0703040c 	.word	0x0703040c
34197934:	0703000c 	.word	0x0703000c
34197938:	07020c0c 	.word	0x07020c0c
3419793c:	0702080c 	.word	0x0702080c
34197940:	0702040c 	.word	0x0702040c
34197944:	0702000c 	.word	0x0702000c
34197948:	07010c0c 	.word	0x07010c0c
3419794c:	0701080c 	.word	0x0701080c
34197950:	0701040c 	.word	0x0701040c
34197954:	0701000c 	.word	0x0701000c
34197958:	07000c0c 	.word	0x07000c0c
3419795c:	0700080c 	.word	0x0700080c
34197960:	0700000c 	.word	0x0700000c
34197964:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34197968:	f7f6 f9d0 	bl	3418dd0c <LL_RCC_HSI_IsReady>
3419796c:	4603      	mov	r3, r0
3419796e:	2b00      	cmp	r3, #0
34197970:	d016      	beq.n	341979a0 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34197972:	f7f6 f9dd 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34197976:	4603      	mov	r3, r0
34197978:	09db      	lsrs	r3, r3, #7
3419797a:	4a0d      	ldr	r2, [pc, #52]	@ (341979b0 <RCCEx_GetI2CCLKFreq+0x348>)
3419797c:	fa22 f303 	lsr.w	r3, r2, r3
34197980:	60fb      	str	r3, [r7, #12]
      }
      break;
34197982:	e00d      	b.n	341979a0 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34197984:	f7f6 f9e2 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34197988:	4603      	mov	r3, r0
3419798a:	2b00      	cmp	r3, #0
3419798c:	d00a      	beq.n	341979a4 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3419798e:	4b09      	ldr	r3, [pc, #36]	@ (341979b4 <RCCEx_GetI2CCLKFreq+0x34c>)
34197990:	60fb      	str	r3, [r7, #12]
      }
      break;
34197992:	e007      	b.n	341979a4 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34197994:	bf00      	nop
34197996:	e006      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34197998:	bf00      	nop
3419799a:	e004      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3419799c:	bf00      	nop
3419799e:	e002      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341979a0:	bf00      	nop
341979a2:	e000      	b.n	341979a6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341979a4:	bf00      	nop
  }

  return i2c_frequency;
341979a6:	68fb      	ldr	r3, [r7, #12]
}
341979a8:	4618      	mov	r0, r3
341979aa:	3710      	adds	r7, #16
341979ac:	46bd      	mov	sp, r7
341979ae:	bd80      	pop	{r7, pc}
341979b0:	03d09000 	.word	0x03d09000
341979b4:	003d0900 	.word	0x003d0900

341979b8 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
341979b8:	b580      	push	{r7, lr}
341979ba:	b084      	sub	sp, #16
341979bc:	af00      	add	r7, sp, #0
341979be:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
341979c0:	2300      	movs	r3, #0
341979c2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
341979c4:	6878      	ldr	r0, [r7, #4]
341979c6:	f7f6 fcf3 	bl	3418e3b0 <LL_RCC_GetI3CClockSource>
341979ca:	4603      	mov	r3, r0
341979cc:	4a86      	ldr	r2, [pc, #536]	@ (34197be8 <RCCEx_GetI3CCLKFreq+0x230>)
341979ce:	4293      	cmp	r3, r2
341979d0:	f000 80e6 	beq.w	34197ba0 <RCCEx_GetI3CCLKFreq+0x1e8>
341979d4:	4a84      	ldr	r2, [pc, #528]	@ (34197be8 <RCCEx_GetI3CCLKFreq+0x230>)
341979d6:	4293      	cmp	r3, r2
341979d8:	f200 80f8 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
341979dc:	4a83      	ldr	r2, [pc, #524]	@ (34197bec <RCCEx_GetI3CCLKFreq+0x234>)
341979de:	4293      	cmp	r3, r2
341979e0:	f000 80de 	beq.w	34197ba0 <RCCEx_GetI3CCLKFreq+0x1e8>
341979e4:	4a81      	ldr	r2, [pc, #516]	@ (34197bec <RCCEx_GetI3CCLKFreq+0x234>)
341979e6:	4293      	cmp	r3, r2
341979e8:	f200 80f0 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
341979ec:	4a80      	ldr	r2, [pc, #512]	@ (34197bf0 <RCCEx_GetI3CCLKFreq+0x238>)
341979ee:	4293      	cmp	r3, r2
341979f0:	f000 80e4 	beq.w	34197bbc <RCCEx_GetI3CCLKFreq+0x204>
341979f4:	4a7e      	ldr	r2, [pc, #504]	@ (34197bf0 <RCCEx_GetI3CCLKFreq+0x238>)
341979f6:	4293      	cmp	r3, r2
341979f8:	f200 80e8 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
341979fc:	4a7d      	ldr	r2, [pc, #500]	@ (34197bf4 <RCCEx_GetI3CCLKFreq+0x23c>)
341979fe:	4293      	cmp	r3, r2
34197a00:	f000 80dc 	beq.w	34197bbc <RCCEx_GetI3CCLKFreq+0x204>
34197a04:	4a7b      	ldr	r2, [pc, #492]	@ (34197bf4 <RCCEx_GetI3CCLKFreq+0x23c>)
34197a06:	4293      	cmp	r3, r2
34197a08:	f200 80e0 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a0c:	4a7a      	ldr	r2, [pc, #488]	@ (34197bf8 <RCCEx_GetI3CCLKFreq+0x240>)
34197a0e:	4293      	cmp	r3, r2
34197a10:	f000 8083 	beq.w	34197b1a <RCCEx_GetI3CCLKFreq+0x162>
34197a14:	4a78      	ldr	r2, [pc, #480]	@ (34197bf8 <RCCEx_GetI3CCLKFreq+0x240>)
34197a16:	4293      	cmp	r3, r2
34197a18:	f200 80d8 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a1c:	4a77      	ldr	r2, [pc, #476]	@ (34197bfc <RCCEx_GetI3CCLKFreq+0x244>)
34197a1e:	4293      	cmp	r3, r2
34197a20:	d07b      	beq.n	34197b1a <RCCEx_GetI3CCLKFreq+0x162>
34197a22:	4a76      	ldr	r2, [pc, #472]	@ (34197bfc <RCCEx_GetI3CCLKFreq+0x244>)
34197a24:	4293      	cmp	r3, r2
34197a26:	f200 80d1 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a2a:	4a75      	ldr	r2, [pc, #468]	@ (34197c00 <RCCEx_GetI3CCLKFreq+0x248>)
34197a2c:	4293      	cmp	r3, r2
34197a2e:	d030      	beq.n	34197a92 <RCCEx_GetI3CCLKFreq+0xda>
34197a30:	4a73      	ldr	r2, [pc, #460]	@ (34197c00 <RCCEx_GetI3CCLKFreq+0x248>)
34197a32:	4293      	cmp	r3, r2
34197a34:	f200 80ca 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a38:	4a72      	ldr	r2, [pc, #456]	@ (34197c04 <RCCEx_GetI3CCLKFreq+0x24c>)
34197a3a:	4293      	cmp	r3, r2
34197a3c:	d029      	beq.n	34197a92 <RCCEx_GetI3CCLKFreq+0xda>
34197a3e:	4a71      	ldr	r2, [pc, #452]	@ (34197c04 <RCCEx_GetI3CCLKFreq+0x24c>)
34197a40:	4293      	cmp	r3, r2
34197a42:	f200 80c3 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a46:	4a70      	ldr	r2, [pc, #448]	@ (34197c08 <RCCEx_GetI3CCLKFreq+0x250>)
34197a48:	4293      	cmp	r3, r2
34197a4a:	d01d      	beq.n	34197a88 <RCCEx_GetI3CCLKFreq+0xd0>
34197a4c:	4a6e      	ldr	r2, [pc, #440]	@ (34197c08 <RCCEx_GetI3CCLKFreq+0x250>)
34197a4e:	4293      	cmp	r3, r2
34197a50:	f200 80bc 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a54:	4a6d      	ldr	r2, [pc, #436]	@ (34197c0c <RCCEx_GetI3CCLKFreq+0x254>)
34197a56:	4293      	cmp	r3, r2
34197a58:	d016      	beq.n	34197a88 <RCCEx_GetI3CCLKFreq+0xd0>
34197a5a:	4a6c      	ldr	r2, [pc, #432]	@ (34197c0c <RCCEx_GetI3CCLKFreq+0x254>)
34197a5c:	4293      	cmp	r3, r2
34197a5e:	f200 80b5 	bhi.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
34197a62:	4a6b      	ldr	r2, [pc, #428]	@ (34197c10 <RCCEx_GetI3CCLKFreq+0x258>)
34197a64:	4293      	cmp	r3, r2
34197a66:	d003      	beq.n	34197a70 <RCCEx_GetI3CCLKFreq+0xb8>
34197a68:	4a6a      	ldr	r2, [pc, #424]	@ (34197c14 <RCCEx_GetI3CCLKFreq+0x25c>)
34197a6a:	4293      	cmp	r3, r2
34197a6c:	f040 80ae 	bne.w	34197bcc <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197a70:	f7f5 fcc2 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197a74:	4603      	mov	r3, r0
34197a76:	4618      	mov	r0, r3
34197a78:	f7fe fe42 	bl	34196700 <RCCEx_GetHCLKFreq>
34197a7c:	4603      	mov	r3, r0
34197a7e:	4618      	mov	r0, r3
34197a80:	f7fe fe4f 	bl	34196722 <RCCEx_GetPCLK1Freq>
34197a84:	60f8      	str	r0, [r7, #12]
      break;
34197a86:	e0aa      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197a88:	2007      	movs	r0, #7
34197a8a:	f7ff f925 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197a8e:	60f8      	str	r0, [r7, #12]
      break;
34197a90:	e0a5      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34197a92:	f7f7 f99f 	bl	3418edd4 <LL_RCC_IC10_IsEnabled>
34197a96:	4603      	mov	r3, r0
34197a98:	2b00      	cmp	r3, #0
34197a9a:	f000 8099 	beq.w	34197bd0 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34197a9e:	f7f7 f9bb 	bl	3418ee18 <LL_RCC_IC10_GetDivider>
34197aa2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34197aa4:	f7f7 f9aa 	bl	3418edfc <LL_RCC_IC10_GetSource>
34197aa8:	4603      	mov	r3, r0
34197aaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197aae:	d029      	beq.n	34197b04 <RCCEx_GetI3CCLKFreq+0x14c>
34197ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197ab4:	d82f      	bhi.n	34197b16 <RCCEx_GetI3CCLKFreq+0x15e>
34197ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197aba:	d01a      	beq.n	34197af2 <RCCEx_GetI3CCLKFreq+0x13a>
34197abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197ac0:	d829      	bhi.n	34197b16 <RCCEx_GetI3CCLKFreq+0x15e>
34197ac2:	2b00      	cmp	r3, #0
34197ac4:	d003      	beq.n	34197ace <RCCEx_GetI3CCLKFreq+0x116>
34197ac6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197aca:	d009      	beq.n	34197ae0 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34197acc:	e023      	b.n	34197b16 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197ace:	f7fe fcff 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197ad2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197ad4:	68fa      	ldr	r2, [r7, #12]
34197ad6:	68bb      	ldr	r3, [r7, #8]
34197ad8:	fbb2 f3f3 	udiv	r3, r2, r3
34197adc:	60fb      	str	r3, [r7, #12]
            break;
34197ade:	e01b      	b.n	34197b18 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197ae0:	f7fe fd3c 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197ae4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197ae6:	68fa      	ldr	r2, [r7, #12]
34197ae8:	68bb      	ldr	r3, [r7, #8]
34197aea:	fbb2 f3f3 	udiv	r3, r2, r3
34197aee:	60fb      	str	r3, [r7, #12]
            break;
34197af0:	e012      	b.n	34197b18 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197af2:	f7fe fd79 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34197af6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197af8:	68fa      	ldr	r2, [r7, #12]
34197afa:	68bb      	ldr	r3, [r7, #8]
34197afc:	fbb2 f3f3 	udiv	r3, r2, r3
34197b00:	60fb      	str	r3, [r7, #12]
            break;
34197b02:	e009      	b.n	34197b18 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34197b04:	f7fe fdb6 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34197b08:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197b0a:	68fa      	ldr	r2, [r7, #12]
34197b0c:	68bb      	ldr	r3, [r7, #8]
34197b0e:	fbb2 f3f3 	udiv	r3, r2, r3
34197b12:	60fb      	str	r3, [r7, #12]
            break;
34197b14:	e000      	b.n	34197b18 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34197b16:	bf00      	nop
        }
      }
      break;
34197b18:	e05a      	b.n	34197bd0 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34197b1a:	f7f7 fa5b 	bl	3418efd4 <LL_RCC_IC15_IsEnabled>
34197b1e:	4603      	mov	r3, r0
34197b20:	2b00      	cmp	r3, #0
34197b22:	d057      	beq.n	34197bd4 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34197b24:	f7f7 fa78 	bl	3418f018 <LL_RCC_IC15_GetDivider>
34197b28:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34197b2a:	f7f7 fa67 	bl	3418effc <LL_RCC_IC15_GetSource>
34197b2e:	4603      	mov	r3, r0
34197b30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197b34:	d029      	beq.n	34197b8a <RCCEx_GetI3CCLKFreq+0x1d2>
34197b36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197b3a:	d82f      	bhi.n	34197b9c <RCCEx_GetI3CCLKFreq+0x1e4>
34197b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197b40:	d01a      	beq.n	34197b78 <RCCEx_GetI3CCLKFreq+0x1c0>
34197b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197b46:	d829      	bhi.n	34197b9c <RCCEx_GetI3CCLKFreq+0x1e4>
34197b48:	2b00      	cmp	r3, #0
34197b4a:	d003      	beq.n	34197b54 <RCCEx_GetI3CCLKFreq+0x19c>
34197b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197b50:	d009      	beq.n	34197b66 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34197b52:	e023      	b.n	34197b9c <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197b54:	f7fe fcbc 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197b58:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197b5a:	68fa      	ldr	r2, [r7, #12]
34197b5c:	68bb      	ldr	r3, [r7, #8]
34197b5e:	fbb2 f3f3 	udiv	r3, r2, r3
34197b62:	60fb      	str	r3, [r7, #12]
            break;
34197b64:	e01b      	b.n	34197b9e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197b66:	f7fe fcf9 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197b6a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197b6c:	68fa      	ldr	r2, [r7, #12]
34197b6e:	68bb      	ldr	r3, [r7, #8]
34197b70:	fbb2 f3f3 	udiv	r3, r2, r3
34197b74:	60fb      	str	r3, [r7, #12]
            break;
34197b76:	e012      	b.n	34197b9e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197b78:	f7fe fd36 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34197b7c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197b7e:	68fa      	ldr	r2, [r7, #12]
34197b80:	68bb      	ldr	r3, [r7, #8]
34197b82:	fbb2 f3f3 	udiv	r3, r2, r3
34197b86:	60fb      	str	r3, [r7, #12]
            break;
34197b88:	e009      	b.n	34197b9e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34197b8a:	f7fe fd73 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34197b8e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34197b90:	68fa      	ldr	r2, [r7, #12]
34197b92:	68bb      	ldr	r3, [r7, #8]
34197b94:	fbb2 f3f3 	udiv	r3, r2, r3
34197b98:	60fb      	str	r3, [r7, #12]
            break;
34197b9a:	e000      	b.n	34197b9e <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34197b9c:	bf00      	nop
        }
      }
      break;
34197b9e:	e019      	b.n	34197bd4 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34197ba0:	f7f6 f8b4 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34197ba4:	4603      	mov	r3, r0
34197ba6:	2b00      	cmp	r3, #0
34197ba8:	d016      	beq.n	34197bd8 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34197baa:	f7f6 f8c1 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34197bae:	4603      	mov	r3, r0
34197bb0:	09db      	lsrs	r3, r3, #7
34197bb2:	4a19      	ldr	r2, [pc, #100]	@ (34197c18 <RCCEx_GetI3CCLKFreq+0x260>)
34197bb4:	fa22 f303 	lsr.w	r3, r2, r3
34197bb8:	60fb      	str	r3, [r7, #12]
      }
      break;
34197bba:	e00d      	b.n	34197bd8 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34197bbc:	f7f6 f8c6 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34197bc0:	4603      	mov	r3, r0
34197bc2:	2b00      	cmp	r3, #0
34197bc4:	d00a      	beq.n	34197bdc <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34197bc6:	4b15      	ldr	r3, [pc, #84]	@ (34197c1c <RCCEx_GetI3CCLKFreq+0x264>)
34197bc8:	60fb      	str	r3, [r7, #12]
      }
      break;
34197bca:	e007      	b.n	34197bdc <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34197bcc:	bf00      	nop
34197bce:	e006      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>
      break;
34197bd0:	bf00      	nop
34197bd2:	e004      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>
      break;
34197bd4:	bf00      	nop
34197bd6:	e002      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>
      break;
34197bd8:	bf00      	nop
34197bda:	e000      	b.n	34197bde <RCCEx_GetI3CCLKFreq+0x226>
      break;
34197bdc:	bf00      	nop
  }

  return i3c_frequency;
34197bde:	68fb      	ldr	r3, [r7, #12]
}
34197be0:	4618      	mov	r0, r3
34197be2:	3710      	adds	r7, #16
34197be4:	46bd      	mov	sp, r7
34197be6:	bd80      	pop	{r7, pc}
34197be8:	0705140c 	.word	0x0705140c
34197bec:	0705100c 	.word	0x0705100c
34197bf0:	0704140c 	.word	0x0704140c
34197bf4:	0704100c 	.word	0x0704100c
34197bf8:	0703140c 	.word	0x0703140c
34197bfc:	0703100c 	.word	0x0703100c
34197c00:	0702140c 	.word	0x0702140c
34197c04:	0702100c 	.word	0x0702100c
34197c08:	0701140c 	.word	0x0701140c
34197c0c:	0701100c 	.word	0x0701100c
34197c10:	0700100c 	.word	0x0700100c
34197c14:	0700140c 	.word	0x0700140c
34197c18:	03d09000 	.word	0x03d09000
34197c1c:	003d0900 	.word	0x003d0900

34197c20 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34197c20:	b590      	push	{r4, r7, lr}
34197c22:	b085      	sub	sp, #20
34197c24:	af00      	add	r7, sp, #0
34197c26:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34197c28:	2300      	movs	r3, #0
34197c2a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34197c2c:	6878      	ldr	r0, [r7, #4]
34197c2e:	f7f6 fbcb 	bl	3418e3c8 <LL_RCC_GetLPTIMClockSource>
34197c32:	4603      	mov	r3, r0
34197c34:	4aa1      	ldr	r2, [pc, #644]	@ (34197ebc <RCCEx_GetLPTIMCLKFreq+0x29c>)
34197c36:	4293      	cmp	r3, r2
34197c38:	f000 8185 	beq.w	34197f46 <RCCEx_GetLPTIMCLKFreq+0x326>
34197c3c:	4a9f      	ldr	r2, [pc, #636]	@ (34197ebc <RCCEx_GetLPTIMCLKFreq+0x29c>)
34197c3e:	4293      	cmp	r3, r2
34197c40:	f200 818b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c44:	4a9e      	ldr	r2, [pc, #632]	@ (34197ec0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34197c46:	4293      	cmp	r3, r2
34197c48:	f000 817d 	beq.w	34197f46 <RCCEx_GetLPTIMCLKFreq+0x326>
34197c4c:	4a9c      	ldr	r2, [pc, #624]	@ (34197ec0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34197c4e:	4293      	cmp	r3, r2
34197c50:	f200 8183 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c54:	4a9b      	ldr	r2, [pc, #620]	@ (34197ec4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34197c56:	4293      	cmp	r3, r2
34197c58:	f000 8175 	beq.w	34197f46 <RCCEx_GetLPTIMCLKFreq+0x326>
34197c5c:	4a99      	ldr	r2, [pc, #612]	@ (34197ec4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34197c5e:	4293      	cmp	r3, r2
34197c60:	f200 817b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c64:	4a98      	ldr	r2, [pc, #608]	@ (34197ec8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34197c66:	4293      	cmp	r3, r2
34197c68:	f000 816d 	beq.w	34197f46 <RCCEx_GetLPTIMCLKFreq+0x326>
34197c6c:	4a96      	ldr	r2, [pc, #600]	@ (34197ec8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34197c6e:	4293      	cmp	r3, r2
34197c70:	f200 8173 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c74:	4a95      	ldr	r2, [pc, #596]	@ (34197ecc <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34197c76:	4293      	cmp	r3, r2
34197c78:	f000 8165 	beq.w	34197f46 <RCCEx_GetLPTIMCLKFreq+0x326>
34197c7c:	4a93      	ldr	r2, [pc, #588]	@ (34197ecc <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34197c7e:	4293      	cmp	r3, r2
34197c80:	f200 816b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c84:	4a92      	ldr	r2, [pc, #584]	@ (34197ed0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34197c86:	4293      	cmp	r3, r2
34197c88:	f000 8154 	beq.w	34197f34 <RCCEx_GetLPTIMCLKFreq+0x314>
34197c8c:	4a90      	ldr	r2, [pc, #576]	@ (34197ed0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34197c8e:	4293      	cmp	r3, r2
34197c90:	f200 8163 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197c94:	4a8f      	ldr	r2, [pc, #572]	@ (34197ed4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34197c96:	4293      	cmp	r3, r2
34197c98:	f000 814c 	beq.w	34197f34 <RCCEx_GetLPTIMCLKFreq+0x314>
34197c9c:	4a8d      	ldr	r2, [pc, #564]	@ (34197ed4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34197c9e:	4293      	cmp	r3, r2
34197ca0:	f200 815b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197ca4:	4a8c      	ldr	r2, [pc, #560]	@ (34197ed8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34197ca6:	4293      	cmp	r3, r2
34197ca8:	f000 8144 	beq.w	34197f34 <RCCEx_GetLPTIMCLKFreq+0x314>
34197cac:	4a8a      	ldr	r2, [pc, #552]	@ (34197ed8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34197cae:	4293      	cmp	r3, r2
34197cb0:	f200 8153 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197cb4:	4a89      	ldr	r2, [pc, #548]	@ (34197edc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34197cb6:	4293      	cmp	r3, r2
34197cb8:	f000 813c 	beq.w	34197f34 <RCCEx_GetLPTIMCLKFreq+0x314>
34197cbc:	4a87      	ldr	r2, [pc, #540]	@ (34197edc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34197cbe:	4293      	cmp	r3, r2
34197cc0:	f200 814b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197cc4:	4a86      	ldr	r2, [pc, #536]	@ (34197ee0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34197cc6:	4293      	cmp	r3, r2
34197cc8:	f000 8134 	beq.w	34197f34 <RCCEx_GetLPTIMCLKFreq+0x314>
34197ccc:	4a84      	ldr	r2, [pc, #528]	@ (34197ee0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34197cce:	4293      	cmp	r3, r2
34197cd0:	f200 8143 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197cd4:	4a83      	ldr	r2, [pc, #524]	@ (34197ee4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34197cd6:	4293      	cmp	r3, r2
34197cd8:	f000 80e7 	beq.w	34197eaa <RCCEx_GetLPTIMCLKFreq+0x28a>
34197cdc:	4a81      	ldr	r2, [pc, #516]	@ (34197ee4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34197cde:	4293      	cmp	r3, r2
34197ce0:	f200 813b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197ce4:	4a80      	ldr	r2, [pc, #512]	@ (34197ee8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34197ce6:	4293      	cmp	r3, r2
34197ce8:	f000 80df 	beq.w	34197eaa <RCCEx_GetLPTIMCLKFreq+0x28a>
34197cec:	4a7e      	ldr	r2, [pc, #504]	@ (34197ee8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34197cee:	4293      	cmp	r3, r2
34197cf0:	f200 8133 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197cf4:	4a7d      	ldr	r2, [pc, #500]	@ (34197eec <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34197cf6:	4293      	cmp	r3, r2
34197cf8:	f000 80d7 	beq.w	34197eaa <RCCEx_GetLPTIMCLKFreq+0x28a>
34197cfc:	4a7b      	ldr	r2, [pc, #492]	@ (34197eec <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34197cfe:	4293      	cmp	r3, r2
34197d00:	f200 812b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d04:	4a7a      	ldr	r2, [pc, #488]	@ (34197ef0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34197d06:	4293      	cmp	r3, r2
34197d08:	f000 80cf 	beq.w	34197eaa <RCCEx_GetLPTIMCLKFreq+0x28a>
34197d0c:	4a78      	ldr	r2, [pc, #480]	@ (34197ef0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34197d0e:	4293      	cmp	r3, r2
34197d10:	f200 8123 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d14:	4a77      	ldr	r2, [pc, #476]	@ (34197ef4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34197d16:	4293      	cmp	r3, r2
34197d18:	f000 80c7 	beq.w	34197eaa <RCCEx_GetLPTIMCLKFreq+0x28a>
34197d1c:	4a75      	ldr	r2, [pc, #468]	@ (34197ef4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34197d1e:	4293      	cmp	r3, r2
34197d20:	f200 811b 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d24:	4a74      	ldr	r2, [pc, #464]	@ (34197ef8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34197d26:	4293      	cmp	r3, r2
34197d28:	d07b      	beq.n	34197e22 <RCCEx_GetLPTIMCLKFreq+0x202>
34197d2a:	4a73      	ldr	r2, [pc, #460]	@ (34197ef8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34197d2c:	4293      	cmp	r3, r2
34197d2e:	f200 8114 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d32:	4a72      	ldr	r2, [pc, #456]	@ (34197efc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34197d34:	4293      	cmp	r3, r2
34197d36:	d074      	beq.n	34197e22 <RCCEx_GetLPTIMCLKFreq+0x202>
34197d38:	4a70      	ldr	r2, [pc, #448]	@ (34197efc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34197d3a:	4293      	cmp	r3, r2
34197d3c:	f200 810d 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d40:	4a6f      	ldr	r2, [pc, #444]	@ (34197f00 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34197d42:	4293      	cmp	r3, r2
34197d44:	d06d      	beq.n	34197e22 <RCCEx_GetLPTIMCLKFreq+0x202>
34197d46:	4a6e      	ldr	r2, [pc, #440]	@ (34197f00 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34197d48:	4293      	cmp	r3, r2
34197d4a:	f200 8106 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d4e:	4a6d      	ldr	r2, [pc, #436]	@ (34197f04 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34197d50:	4293      	cmp	r3, r2
34197d52:	d066      	beq.n	34197e22 <RCCEx_GetLPTIMCLKFreq+0x202>
34197d54:	4a6b      	ldr	r2, [pc, #428]	@ (34197f04 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34197d56:	4293      	cmp	r3, r2
34197d58:	f200 80ff 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d5c:	4a6a      	ldr	r2, [pc, #424]	@ (34197f08 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34197d5e:	4293      	cmp	r3, r2
34197d60:	d05f      	beq.n	34197e22 <RCCEx_GetLPTIMCLKFreq+0x202>
34197d62:	4a69      	ldr	r2, [pc, #420]	@ (34197f08 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34197d64:	4293      	cmp	r3, r2
34197d66:	f200 80f8 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d6a:	4a68      	ldr	r2, [pc, #416]	@ (34197f0c <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34197d6c:	4293      	cmp	r3, r2
34197d6e:	d053      	beq.n	34197e18 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34197d70:	4a66      	ldr	r2, [pc, #408]	@ (34197f0c <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34197d72:	4293      	cmp	r3, r2
34197d74:	f200 80f1 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d78:	4a65      	ldr	r2, [pc, #404]	@ (34197f10 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34197d7a:	4293      	cmp	r3, r2
34197d7c:	d04c      	beq.n	34197e18 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34197d7e:	4a64      	ldr	r2, [pc, #400]	@ (34197f10 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34197d80:	4293      	cmp	r3, r2
34197d82:	f200 80ea 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d86:	4a63      	ldr	r2, [pc, #396]	@ (34197f14 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34197d88:	4293      	cmp	r3, r2
34197d8a:	d045      	beq.n	34197e18 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34197d8c:	4a61      	ldr	r2, [pc, #388]	@ (34197f14 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34197d8e:	4293      	cmp	r3, r2
34197d90:	f200 80e3 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197d94:	4a60      	ldr	r2, [pc, #384]	@ (34197f18 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34197d96:	4293      	cmp	r3, r2
34197d98:	d03e      	beq.n	34197e18 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34197d9a:	4a5f      	ldr	r2, [pc, #380]	@ (34197f18 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34197d9c:	4293      	cmp	r3, r2
34197d9e:	f200 80dc 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197da2:	4a5e      	ldr	r2, [pc, #376]	@ (34197f1c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34197da4:	4293      	cmp	r3, r2
34197da6:	d037      	beq.n	34197e18 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34197da8:	4a5c      	ldr	r2, [pc, #368]	@ (34197f1c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34197daa:	4293      	cmp	r3, r2
34197dac:	f200 80d5 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197db0:	4a5b      	ldr	r2, [pc, #364]	@ (34197f20 <RCCEx_GetLPTIMCLKFreq+0x300>)
34197db2:	4293      	cmp	r3, r2
34197db4:	d024      	beq.n	34197e00 <RCCEx_GetLPTIMCLKFreq+0x1e0>
34197db6:	4a5a      	ldr	r2, [pc, #360]	@ (34197f20 <RCCEx_GetLPTIMCLKFreq+0x300>)
34197db8:	4293      	cmp	r3, r2
34197dba:	f200 80ce 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197dbe:	4a59      	ldr	r2, [pc, #356]	@ (34197f24 <RCCEx_GetLPTIMCLKFreq+0x304>)
34197dc0:	4293      	cmp	r3, r2
34197dc2:	d01d      	beq.n	34197e00 <RCCEx_GetLPTIMCLKFreq+0x1e0>
34197dc4:	4a57      	ldr	r2, [pc, #348]	@ (34197f24 <RCCEx_GetLPTIMCLKFreq+0x304>)
34197dc6:	4293      	cmp	r3, r2
34197dc8:	f200 80c7 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197dcc:	4a56      	ldr	r2, [pc, #344]	@ (34197f28 <RCCEx_GetLPTIMCLKFreq+0x308>)
34197dce:	4293      	cmp	r3, r2
34197dd0:	d016      	beq.n	34197e00 <RCCEx_GetLPTIMCLKFreq+0x1e0>
34197dd2:	4a55      	ldr	r2, [pc, #340]	@ (34197f28 <RCCEx_GetLPTIMCLKFreq+0x308>)
34197dd4:	4293      	cmp	r3, r2
34197dd6:	f200 80c0 	bhi.w	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
34197dda:	4a54      	ldr	r2, [pc, #336]	@ (34197f2c <RCCEx_GetLPTIMCLKFreq+0x30c>)
34197ddc:	4293      	cmp	r3, r2
34197dde:	d003      	beq.n	34197de8 <RCCEx_GetLPTIMCLKFreq+0x1c8>
34197de0:	4a53      	ldr	r2, [pc, #332]	@ (34197f30 <RCCEx_GetLPTIMCLKFreq+0x310>)
34197de2:	4293      	cmp	r3, r2
34197de4:	d00c      	beq.n	34197e00 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34197de6:	e0b8      	b.n	34197f5a <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197de8:	f7f5 fb06 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197dec:	4603      	mov	r3, r0
34197dee:	4618      	mov	r0, r3
34197df0:	f7fe fc86 	bl	34196700 <RCCEx_GetHCLKFreq>
34197df4:	4603      	mov	r3, r0
34197df6:	4618      	mov	r0, r3
34197df8:	f7fe fc93 	bl	34196722 <RCCEx_GetPCLK1Freq>
34197dfc:	60f8      	str	r0, [r7, #12]
      break;
34197dfe:	e0b3      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197e00:	f7f5 fafa 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197e04:	4603      	mov	r3, r0
34197e06:	4618      	mov	r0, r3
34197e08:	f7fe fc7a 	bl	34196700 <RCCEx_GetHCLKFreq>
34197e0c:	4603      	mov	r3, r0
34197e0e:	4618      	mov	r0, r3
34197e10:	f7fe fca8 	bl	34196764 <RCCEx_GetPCLK4Freq>
34197e14:	60f8      	str	r0, [r7, #12]
      break;
34197e16:	e0a7      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197e18:	2007      	movs	r0, #7
34197e1a:	f7fe ff5d 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197e1e:	60f8      	str	r0, [r7, #12]
      break;
34197e20:	e0a2      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34197e22:	f7f7 f8d7 	bl	3418efd4 <LL_RCC_IC15_IsEnabled>
34197e26:	4603      	mov	r3, r0
34197e28:	2b00      	cmp	r3, #0
34197e2a:	f000 8098 	beq.w	34197f5e <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34197e2e:	f7f7 f8f3 	bl	3418f018 <LL_RCC_IC15_GetDivider>
34197e32:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34197e34:	f7f7 f8e2 	bl	3418effc <LL_RCC_IC15_GetSource>
34197e38:	4603      	mov	r3, r0
34197e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197e3e:	d029      	beq.n	34197e94 <RCCEx_GetLPTIMCLKFreq+0x274>
34197e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34197e44:	d82f      	bhi.n	34197ea6 <RCCEx_GetLPTIMCLKFreq+0x286>
34197e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197e4a:	d01a      	beq.n	34197e82 <RCCEx_GetLPTIMCLKFreq+0x262>
34197e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34197e50:	d829      	bhi.n	34197ea6 <RCCEx_GetLPTIMCLKFreq+0x286>
34197e52:	2b00      	cmp	r3, #0
34197e54:	d003      	beq.n	34197e5e <RCCEx_GetLPTIMCLKFreq+0x23e>
34197e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34197e5a:	d009      	beq.n	34197e70 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34197e5c:	e023      	b.n	34197ea6 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34197e5e:	f7fe fb37 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34197e62:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34197e64:	68fa      	ldr	r2, [r7, #12]
34197e66:	68bb      	ldr	r3, [r7, #8]
34197e68:	fbb2 f3f3 	udiv	r3, r2, r3
34197e6c:	60fb      	str	r3, [r7, #12]
            break;
34197e6e:	e01b      	b.n	34197ea8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34197e70:	f7fe fb74 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34197e74:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34197e76:	68fa      	ldr	r2, [r7, #12]
34197e78:	68bb      	ldr	r3, [r7, #8]
34197e7a:	fbb2 f3f3 	udiv	r3, r2, r3
34197e7e:	60fb      	str	r3, [r7, #12]
            break;
34197e80:	e012      	b.n	34197ea8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34197e82:	f7fe fbb1 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34197e86:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34197e88:	68fa      	ldr	r2, [r7, #12]
34197e8a:	68bb      	ldr	r3, [r7, #8]
34197e8c:	fbb2 f3f3 	udiv	r3, r2, r3
34197e90:	60fb      	str	r3, [r7, #12]
            break;
34197e92:	e009      	b.n	34197ea8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34197e94:	f7fe fbee 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34197e98:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34197e9a:	68fa      	ldr	r2, [r7, #12]
34197e9c:	68bb      	ldr	r3, [r7, #8]
34197e9e:	fbb2 f3f3 	udiv	r3, r2, r3
34197ea2:	60fb      	str	r3, [r7, #12]
            break;
34197ea4:	e000      	b.n	34197ea8 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
34197ea6:	bf00      	nop
      break;
34197ea8:	e059      	b.n	34197f5e <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
34197eaa:	f7f5 ff6f 	bl	3418dd8c <LL_RCC_LSE_IsReady>
34197eae:	4603      	mov	r3, r0
34197eb0:	2b00      	cmp	r3, #0
34197eb2:	d056      	beq.n	34197f62 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
34197eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34197eb8:	60fb      	str	r3, [r7, #12]
      break;
34197eba:	e052      	b.n	34197f62 <RCCEx_GetLPTIMCLKFreq+0x342>
34197ebc:	0705182c 	.word	0x0705182c
34197ec0:	0705142c 	.word	0x0705142c
34197ec4:	0705102c 	.word	0x0705102c
34197ec8:	07050c2c 	.word	0x07050c2c
34197ecc:	0705082c 	.word	0x0705082c
34197ed0:	0704182c 	.word	0x0704182c
34197ed4:	0704142c 	.word	0x0704142c
34197ed8:	0704102c 	.word	0x0704102c
34197edc:	07040c2c 	.word	0x07040c2c
34197ee0:	0704082c 	.word	0x0704082c
34197ee4:	0703182c 	.word	0x0703182c
34197ee8:	0703142c 	.word	0x0703142c
34197eec:	0703102c 	.word	0x0703102c
34197ef0:	07030c2c 	.word	0x07030c2c
34197ef4:	0703082c 	.word	0x0703082c
34197ef8:	0702182c 	.word	0x0702182c
34197efc:	0702142c 	.word	0x0702142c
34197f00:	0702102c 	.word	0x0702102c
34197f04:	07020c2c 	.word	0x07020c2c
34197f08:	0702082c 	.word	0x0702082c
34197f0c:	0701182c 	.word	0x0701182c
34197f10:	0701142c 	.word	0x0701142c
34197f14:	0701102c 	.word	0x0701102c
34197f18:	07010c2c 	.word	0x07010c2c
34197f1c:	0701082c 	.word	0x0701082c
34197f20:	0700182c 	.word	0x0700182c
34197f24:	0700142c 	.word	0x0700142c
34197f28:	0700102c 	.word	0x0700102c
34197f2c:	0700082c 	.word	0x0700082c
34197f30:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34197f34:	f7f5 ff3c 	bl	3418ddb0 <LL_RCC_LSI_IsReady>
34197f38:	4603      	mov	r3, r0
34197f3a:	2b00      	cmp	r3, #0
34197f3c:	d013      	beq.n	34197f66 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34197f3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34197f42:	60fb      	str	r3, [r7, #12]
      break;
34197f44:	e00f      	b.n	34197f66 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34197f46:	f7f5 fa57 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197f4a:	4604      	mov	r4, r0
34197f4c:	f7f6 fb46 	bl	3418e5dc <LL_RCC_GetTIMPrescaler>
34197f50:	4603      	mov	r3, r0
34197f52:	fa24 f303 	lsr.w	r3, r4, r3
34197f56:	60fb      	str	r3, [r7, #12]
      break;
34197f58:	e006      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34197f5a:	bf00      	nop
34197f5c:	e004      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34197f5e:	bf00      	nop
34197f60:	e002      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34197f62:	bf00      	nop
34197f64:	e000      	b.n	34197f68 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34197f66:	bf00      	nop
  }

  return lptim_frequency;
34197f68:	68fb      	ldr	r3, [r7, #12]
}
34197f6a:	4618      	mov	r0, r3
34197f6c:	3714      	adds	r7, #20
34197f6e:	46bd      	mov	sp, r7
34197f70:	bd90      	pop	{r4, r7, pc}
34197f72:	bf00      	nop

34197f74 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
34197f74:	b580      	push	{r7, lr}
34197f76:	b084      	sub	sp, #16
34197f78:	af00      	add	r7, sp, #0
34197f7a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34197f7c:	2300      	movs	r3, #0
34197f7e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34197f80:	6878      	ldr	r0, [r7, #4]
34197f82:	f7f6 fa2d 	bl	3418e3e0 <LL_RCC_GetLPUARTClockSource>
34197f86:	4603      	mov	r3, r0
34197f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34197f8c:	f000 80c0 	beq.w	34198110 <RCCEx_GetLPUARTCLKFreq+0x19c>
34197f90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34197f94:	f200 80db 	bhi.w	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
34197f98:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34197f9c:	f000 80c6 	beq.w	3419812c <RCCEx_GetLPUARTCLKFreq+0x1b8>
34197fa0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34197fa4:	f200 80d3 	bhi.w	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
34197fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34197fac:	f000 80c6 	beq.w	3419813c <RCCEx_GetLPUARTCLKFreq+0x1c8>
34197fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34197fb4:	f200 80cb 	bhi.w	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
34197fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34197fbc:	d065      	beq.n	3419808a <RCCEx_GetLPUARTCLKFreq+0x116>
34197fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34197fc2:	f200 80c4 	bhi.w	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
34197fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34197fca:	d01a      	beq.n	34198002 <RCCEx_GetLPUARTCLKFreq+0x8e>
34197fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34197fd0:	f200 80bd 	bhi.w	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
34197fd4:	2b00      	cmp	r3, #0
34197fd6:	d003      	beq.n	34197fe0 <RCCEx_GetLPUARTCLKFreq+0x6c>
34197fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34197fdc:	d00c      	beq.n	34197ff8 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
34197fde:	e0b6      	b.n	3419814e <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34197fe0:	f7f5 fa0a 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34197fe4:	4603      	mov	r3, r0
34197fe6:	4618      	mov	r0, r3
34197fe8:	f7fe fb8a 	bl	34196700 <RCCEx_GetHCLKFreq>
34197fec:	4603      	mov	r3, r0
34197fee:	4618      	mov	r0, r3
34197ff0:	f7fe fbb8 	bl	34196764 <RCCEx_GetPCLK4Freq>
34197ff4:	60f8      	str	r0, [r7, #12]
      break;
34197ff6:	e0b5      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34197ff8:	2007      	movs	r0, #7
34197ffa:	f7fe fe6d 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34197ffe:	60f8      	str	r0, [r7, #12]
      break;
34198000:	e0b0      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34198002:	f7f6 fea7 	bl	3418ed54 <LL_RCC_IC9_IsEnabled>
34198006:	4603      	mov	r3, r0
34198008:	2b00      	cmp	r3, #0
3419800a:	f000 80a2 	beq.w	34198152 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3419800e:	f7f6 fec3 	bl	3418ed98 <LL_RCC_IC9_GetDivider>
34198012:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34198014:	f7f6 feb2 	bl	3418ed7c <LL_RCC_IC9_GetSource>
34198018:	4603      	mov	r3, r0
3419801a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419801e:	d029      	beq.n	34198074 <RCCEx_GetLPUARTCLKFreq+0x100>
34198020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198024:	d82f      	bhi.n	34198086 <RCCEx_GetLPUARTCLKFreq+0x112>
34198026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419802a:	d01a      	beq.n	34198062 <RCCEx_GetLPUARTCLKFreq+0xee>
3419802c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198030:	d829      	bhi.n	34198086 <RCCEx_GetLPUARTCLKFreq+0x112>
34198032:	2b00      	cmp	r3, #0
34198034:	d003      	beq.n	3419803e <RCCEx_GetLPUARTCLKFreq+0xca>
34198036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419803a:	d009      	beq.n	34198050 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3419803c:	e023      	b.n	34198086 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419803e:	f7fe fa47 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198042:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34198044:	68fa      	ldr	r2, [r7, #12]
34198046:	68bb      	ldr	r3, [r7, #8]
34198048:	fbb2 f3f3 	udiv	r3, r2, r3
3419804c:	60fb      	str	r3, [r7, #12]
            break;
3419804e:	e01b      	b.n	34198088 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198050:	f7fe fa84 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198054:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34198056:	68fa      	ldr	r2, [r7, #12]
34198058:	68bb      	ldr	r3, [r7, #8]
3419805a:	fbb2 f3f3 	udiv	r3, r2, r3
3419805e:	60fb      	str	r3, [r7, #12]
            break;
34198060:	e012      	b.n	34198088 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198062:	f7fe fac1 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198066:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34198068:	68fa      	ldr	r2, [r7, #12]
3419806a:	68bb      	ldr	r3, [r7, #8]
3419806c:	fbb2 f3f3 	udiv	r3, r2, r3
34198070:	60fb      	str	r3, [r7, #12]
            break;
34198072:	e009      	b.n	34198088 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198074:	f7fe fafe 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198078:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3419807a:	68fa      	ldr	r2, [r7, #12]
3419807c:	68bb      	ldr	r3, [r7, #8]
3419807e:	fbb2 f3f3 	udiv	r3, r2, r3
34198082:	60fb      	str	r3, [r7, #12]
            break;
34198084:	e000      	b.n	34198088 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
34198086:	bf00      	nop
      break;
34198088:	e063      	b.n	34198152 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3419808a:	f7f6 ff63 	bl	3418ef54 <LL_RCC_IC14_IsEnabled>
3419808e:	4603      	mov	r3, r0
34198090:	2b00      	cmp	r3, #0
34198092:	d060      	beq.n	34198156 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
34198094:	f7f6 ff80 	bl	3418ef98 <LL_RCC_IC14_GetDivider>
34198098:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3419809a:	f7f6 ff6f 	bl	3418ef7c <LL_RCC_IC14_GetSource>
3419809e:	4603      	mov	r3, r0
341980a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341980a4:	d029      	beq.n	341980fa <RCCEx_GetLPUARTCLKFreq+0x186>
341980a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341980aa:	d82f      	bhi.n	3419810c <RCCEx_GetLPUARTCLKFreq+0x198>
341980ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341980b0:	d01a      	beq.n	341980e8 <RCCEx_GetLPUARTCLKFreq+0x174>
341980b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341980b6:	d829      	bhi.n	3419810c <RCCEx_GetLPUARTCLKFreq+0x198>
341980b8:	2b00      	cmp	r3, #0
341980ba:	d003      	beq.n	341980c4 <RCCEx_GetLPUARTCLKFreq+0x150>
341980bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341980c0:	d009      	beq.n	341980d6 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
341980c2:	e023      	b.n	3419810c <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341980c4:	f7fe fa04 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341980c8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341980ca:	68fa      	ldr	r2, [r7, #12]
341980cc:	68bb      	ldr	r3, [r7, #8]
341980ce:	fbb2 f3f3 	udiv	r3, r2, r3
341980d2:	60fb      	str	r3, [r7, #12]
            break;
341980d4:	e01b      	b.n	3419810e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341980d6:	f7fe fa41 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341980da:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341980dc:	68fa      	ldr	r2, [r7, #12]
341980de:	68bb      	ldr	r3, [r7, #8]
341980e0:	fbb2 f3f3 	udiv	r3, r2, r3
341980e4:	60fb      	str	r3, [r7, #12]
            break;
341980e6:	e012      	b.n	3419810e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341980e8:	f7fe fa7e 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341980ec:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341980ee:	68fa      	ldr	r2, [r7, #12]
341980f0:	68bb      	ldr	r3, [r7, #8]
341980f2:	fbb2 f3f3 	udiv	r3, r2, r3
341980f6:	60fb      	str	r3, [r7, #12]
            break;
341980f8:	e009      	b.n	3419810e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341980fa:	f7fe fabb 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341980fe:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34198100:	68fa      	ldr	r2, [r7, #12]
34198102:	68bb      	ldr	r3, [r7, #8]
34198104:	fbb2 f3f3 	udiv	r3, r2, r3
34198108:	60fb      	str	r3, [r7, #12]
            break;
3419810a:	e000      	b.n	3419810e <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
3419810c:	bf00      	nop
      break;
3419810e:	e022      	b.n	34198156 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34198110:	f7f5 fdfc 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34198114:	4603      	mov	r3, r0
34198116:	2b00      	cmp	r3, #0
34198118:	d01f      	beq.n	3419815a <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3419811a:	f7f5 fe09 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
3419811e:	4603      	mov	r3, r0
34198120:	09db      	lsrs	r3, r3, #7
34198122:	4a13      	ldr	r2, [pc, #76]	@ (34198170 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34198124:	fa22 f303 	lsr.w	r3, r2, r3
34198128:	60fb      	str	r3, [r7, #12]
      break;
3419812a:	e016      	b.n	3419815a <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3419812c:	f7f5 fe0e 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34198130:	4603      	mov	r3, r0
34198132:	2b00      	cmp	r3, #0
34198134:	d013      	beq.n	3419815e <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34198136:	4b0f      	ldr	r3, [pc, #60]	@ (34198174 <RCCEx_GetLPUARTCLKFreq+0x200>)
34198138:	60fb      	str	r3, [r7, #12]
      break;
3419813a:	e010      	b.n	3419815e <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3419813c:	f7f5 fe26 	bl	3418dd8c <LL_RCC_LSE_IsReady>
34198140:	4603      	mov	r3, r0
34198142:	2b00      	cmp	r3, #0
34198144:	d00d      	beq.n	34198162 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34198146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3419814a:	60fb      	str	r3, [r7, #12]
      break;
3419814c:	e009      	b.n	34198162 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3419814e:	bf00      	nop
34198150:	e008      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34198152:	bf00      	nop
34198154:	e006      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34198156:	bf00      	nop
34198158:	e004      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3419815a:	bf00      	nop
3419815c:	e002      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3419815e:	bf00      	nop
34198160:	e000      	b.n	34198164 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34198162:	bf00      	nop
  }

  return lpuart_frequency;
34198164:	68fb      	ldr	r3, [r7, #12]
}
34198166:	4618      	mov	r0, r3
34198168:	3710      	adds	r7, #16
3419816a:	46bd      	mov	sp, r7
3419816c:	bd80      	pop	{r7, pc}
3419816e:	bf00      	nop
34198170:	03d09000 	.word	0x03d09000
34198174:	003d0900 	.word	0x003d0900

34198178 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34198178:	b580      	push	{r7, lr}
3419817a:	b084      	sub	sp, #16
3419817c:	af00      	add	r7, sp, #0
3419817e:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34198180:	2300      	movs	r3, #0
34198182:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34198184:	6878      	ldr	r0, [r7, #4]
34198186:	f7f6 f93d 	bl	3418e404 <LL_RCC_GetLTDCClockSource>
3419818a:	4603      	mov	r3, r0
3419818c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34198190:	d062      	beq.n	34198258 <RCCEx_GetLTDCCLKFreq+0xe0>
34198192:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34198196:	d86d      	bhi.n	34198274 <RCCEx_GetLTDCCLKFreq+0xfc>
34198198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3419819c:	d019      	beq.n	341981d2 <RCCEx_GetLTDCCLKFreq+0x5a>
3419819e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341981a2:	d867      	bhi.n	34198274 <RCCEx_GetLTDCCLKFreq+0xfc>
341981a4:	2b00      	cmp	r3, #0
341981a6:	d003      	beq.n	341981b0 <RCCEx_GetLTDCCLKFreq+0x38>
341981a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341981ac:	d00c      	beq.n	341981c8 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
341981ae:	e061      	b.n	34198274 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341981b0:	f7f5 f922 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
341981b4:	4603      	mov	r3, r0
341981b6:	4618      	mov	r0, r3
341981b8:	f7fe faa2 	bl	34196700 <RCCEx_GetHCLKFreq>
341981bc:	4603      	mov	r3, r0
341981be:	4618      	mov	r0, r3
341981c0:	f7fe fae1 	bl	34196786 <RCCEx_GetPCLK5Freq>
341981c4:	60f8      	str	r0, [r7, #12]
      break;
341981c6:	e05a      	b.n	3419827e <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341981c8:	2007      	movs	r0, #7
341981ca:	f7fe fd85 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341981ce:	60f8      	str	r0, [r7, #12]
      break;
341981d0:	e055      	b.n	3419827e <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
341981d2:	f7f6 ff3f 	bl	3418f054 <LL_RCC_IC16_IsEnabled>
341981d6:	4603      	mov	r3, r0
341981d8:	2b00      	cmp	r3, #0
341981da:	d04d      	beq.n	34198278 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
341981dc:	f7f6 ff5c 	bl	3418f098 <LL_RCC_IC16_GetDivider>
341981e0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
341981e2:	f7f6 ff4b 	bl	3418f07c <LL_RCC_IC16_GetSource>
341981e6:	4603      	mov	r3, r0
341981e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341981ec:	d029      	beq.n	34198242 <RCCEx_GetLTDCCLKFreq+0xca>
341981ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341981f2:	d82f      	bhi.n	34198254 <RCCEx_GetLTDCCLKFreq+0xdc>
341981f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341981f8:	d01a      	beq.n	34198230 <RCCEx_GetLTDCCLKFreq+0xb8>
341981fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341981fe:	d829      	bhi.n	34198254 <RCCEx_GetLTDCCLKFreq+0xdc>
34198200:	2b00      	cmp	r3, #0
34198202:	d003      	beq.n	3419820c <RCCEx_GetLTDCCLKFreq+0x94>
34198204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34198208:	d009      	beq.n	3419821e <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3419820a:	e023      	b.n	34198254 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419820c:	f7fe f960 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198210:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34198212:	68fa      	ldr	r2, [r7, #12]
34198214:	68bb      	ldr	r3, [r7, #8]
34198216:	fbb2 f3f3 	udiv	r3, r2, r3
3419821a:	60fb      	str	r3, [r7, #12]
            break;
3419821c:	e01b      	b.n	34198256 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3419821e:	f7fe f99d 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198222:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34198224:	68fa      	ldr	r2, [r7, #12]
34198226:	68bb      	ldr	r3, [r7, #8]
34198228:	fbb2 f3f3 	udiv	r3, r2, r3
3419822c:	60fb      	str	r3, [r7, #12]
            break;
3419822e:	e012      	b.n	34198256 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198230:	f7fe f9da 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198234:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34198236:	68fa      	ldr	r2, [r7, #12]
34198238:	68bb      	ldr	r3, [r7, #8]
3419823a:	fbb2 f3f3 	udiv	r3, r2, r3
3419823e:	60fb      	str	r3, [r7, #12]
            break;
34198240:	e009      	b.n	34198256 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198242:	f7fe fa17 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198246:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34198248:	68fa      	ldr	r2, [r7, #12]
3419824a:	68bb      	ldr	r3, [r7, #8]
3419824c:	fbb2 f3f3 	udiv	r3, r2, r3
34198250:	60fb      	str	r3, [r7, #12]
            break;
34198252:	e000      	b.n	34198256 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34198254:	bf00      	nop
      break;
34198256:	e00f      	b.n	34198278 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34198258:	f7f5 fd58 	bl	3418dd0c <LL_RCC_HSI_IsReady>
3419825c:	4603      	mov	r3, r0
3419825e:	2b00      	cmp	r3, #0
34198260:	d00c      	beq.n	3419827c <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34198262:	f7f5 fd65 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34198266:	4603      	mov	r3, r0
34198268:	09db      	lsrs	r3, r3, #7
3419826a:	4a07      	ldr	r2, [pc, #28]	@ (34198288 <RCCEx_GetLTDCCLKFreq+0x110>)
3419826c:	fa22 f303 	lsr.w	r3, r2, r3
34198270:	60fb      	str	r3, [r7, #12]
      break;
34198272:	e003      	b.n	3419827c <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34198274:	bf00      	nop
34198276:	e002      	b.n	3419827e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34198278:	bf00      	nop
3419827a:	e000      	b.n	3419827e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3419827c:	bf00      	nop
  }

  return ltdc_frequency;
3419827e:	68fb      	ldr	r3, [r7, #12]
}
34198280:	4618      	mov	r0, r3
34198282:	3710      	adds	r7, #16
34198284:	46bd      	mov	sp, r7
34198286:	bd80      	pop	{r7, pc}
34198288:	03d09000 	.word	0x03d09000

3419828c <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3419828c:	b590      	push	{r4, r7, lr}
3419828e:	b085      	sub	sp, #20
34198290:	af00      	add	r7, sp, #0
34198292:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34198294:	2300      	movs	r3, #0
34198296:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34198298:	6878      	ldr	r0, [r7, #4]
3419829a:	f7f6 f8c5 	bl	3418e428 <LL_RCC_GetMDFClockSource>
3419829e:	4603      	mov	r3, r0
341982a0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
341982a4:	f000 80dd 	beq.w	34198462 <RCCEx_GetMDFCLKFreq+0x1d6>
341982a8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
341982ac:	f200 80e3 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
341982b4:	f000 80d2 	beq.w	3419845c <RCCEx_GetMDFCLKFreq+0x1d0>
341982b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
341982bc:	f200 80db 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
341982c4:	f000 80b4 	beq.w	34198430 <RCCEx_GetMDFCLKFreq+0x1a4>
341982c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
341982cc:	f200 80d3 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341982d4:	f000 80ba 	beq.w	3419844c <RCCEx_GetMDFCLKFreq+0x1c0>
341982d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341982dc:	f200 80cb 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341982e4:	d061      	beq.n	341983aa <RCCEx_GetMDFCLKFreq+0x11e>
341982e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341982ea:	f200 80c4 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341982f2:	d016      	beq.n	34198322 <RCCEx_GetMDFCLKFreq+0x96>
341982f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341982f8:	f200 80bd 	bhi.w	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
341982fc:	2b00      	cmp	r3, #0
341982fe:	d003      	beq.n	34198308 <RCCEx_GetMDFCLKFreq+0x7c>
34198300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34198304:	d008      	beq.n	34198318 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34198306:	e0b6      	b.n	34198476 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34198308:	f7f5 f876 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3419830c:	4603      	mov	r3, r0
3419830e:	4618      	mov	r0, r3
34198310:	f7fe f9f6 	bl	34196700 <RCCEx_GetHCLKFreq>
34198314:	60f8      	str	r0, [r7, #12]
      break;
34198316:	e0b7      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34198318:	2007      	movs	r0, #7
3419831a:	f7fe fcdd 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
3419831e:	60f8      	str	r0, [r7, #12]
      break;
34198320:	e0b2      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34198322:	f7f6 fc97 	bl	3418ec54 <LL_RCC_IC7_IsEnabled>
34198326:	4603      	mov	r3, r0
34198328:	2b00      	cmp	r3, #0
3419832a:	f000 80a6 	beq.w	3419847a <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3419832e:	f7f6 fcb3 	bl	3418ec98 <LL_RCC_IC7_GetDivider>
34198332:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34198334:	f7f6 fca2 	bl	3418ec7c <LL_RCC_IC7_GetSource>
34198338:	4603      	mov	r3, r0
3419833a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419833e:	d029      	beq.n	34198394 <RCCEx_GetMDFCLKFreq+0x108>
34198340:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198344:	d82f      	bhi.n	341983a6 <RCCEx_GetMDFCLKFreq+0x11a>
34198346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419834a:	d01a      	beq.n	34198382 <RCCEx_GetMDFCLKFreq+0xf6>
3419834c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198350:	d829      	bhi.n	341983a6 <RCCEx_GetMDFCLKFreq+0x11a>
34198352:	2b00      	cmp	r3, #0
34198354:	d003      	beq.n	3419835e <RCCEx_GetMDFCLKFreq+0xd2>
34198356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419835a:	d009      	beq.n	34198370 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
3419835c:	e023      	b.n	341983a6 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419835e:	f7fe f8b7 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198362:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34198364:	68fa      	ldr	r2, [r7, #12]
34198366:	68bb      	ldr	r3, [r7, #8]
34198368:	fbb2 f3f3 	udiv	r3, r2, r3
3419836c:	60fb      	str	r3, [r7, #12]
            break;
3419836e:	e01b      	b.n	341983a8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198370:	f7fe f8f4 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198374:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34198376:	68fa      	ldr	r2, [r7, #12]
34198378:	68bb      	ldr	r3, [r7, #8]
3419837a:	fbb2 f3f3 	udiv	r3, r2, r3
3419837e:	60fb      	str	r3, [r7, #12]
            break;
34198380:	e012      	b.n	341983a8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198382:	f7fe f931 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198386:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34198388:	68fa      	ldr	r2, [r7, #12]
3419838a:	68bb      	ldr	r3, [r7, #8]
3419838c:	fbb2 f3f3 	udiv	r3, r2, r3
34198390:	60fb      	str	r3, [r7, #12]
            break;
34198392:	e009      	b.n	341983a8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198394:	f7fe f96e 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198398:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3419839a:	68fa      	ldr	r2, [r7, #12]
3419839c:	68bb      	ldr	r3, [r7, #8]
3419839e:	fbb2 f3f3 	udiv	r3, r2, r3
341983a2:	60fb      	str	r3, [r7, #12]
            break;
341983a4:	e000      	b.n	341983a8 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
341983a6:	bf00      	nop
      break;
341983a8:	e067      	b.n	3419847a <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341983aa:	f7f6 fc93 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
341983ae:	4603      	mov	r3, r0
341983b0:	2b00      	cmp	r3, #0
341983b2:	d064      	beq.n	3419847e <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
341983b4:	f7f6 fcb0 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
341983b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341983ba:	f7f6 fc9f 	bl	3418ecfc <LL_RCC_IC8_GetSource>
341983be:	4603      	mov	r3, r0
341983c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341983c4:	d029      	beq.n	3419841a <RCCEx_GetMDFCLKFreq+0x18e>
341983c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341983ca:	d82f      	bhi.n	3419842c <RCCEx_GetMDFCLKFreq+0x1a0>
341983cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341983d0:	d01a      	beq.n	34198408 <RCCEx_GetMDFCLKFreq+0x17c>
341983d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341983d6:	d829      	bhi.n	3419842c <RCCEx_GetMDFCLKFreq+0x1a0>
341983d8:	2b00      	cmp	r3, #0
341983da:	d003      	beq.n	341983e4 <RCCEx_GetMDFCLKFreq+0x158>
341983dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341983e0:	d009      	beq.n	341983f6 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
341983e2:	e023      	b.n	3419842c <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341983e4:	f7fe f874 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341983e8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341983ea:	68fa      	ldr	r2, [r7, #12]
341983ec:	68bb      	ldr	r3, [r7, #8]
341983ee:	fbb2 f3f3 	udiv	r3, r2, r3
341983f2:	60fb      	str	r3, [r7, #12]
            break;
341983f4:	e01b      	b.n	3419842e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341983f6:	f7fe f8b1 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341983fa:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341983fc:	68fa      	ldr	r2, [r7, #12]
341983fe:	68bb      	ldr	r3, [r7, #8]
34198400:	fbb2 f3f3 	udiv	r3, r2, r3
34198404:	60fb      	str	r3, [r7, #12]
            break;
34198406:	e012      	b.n	3419842e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198408:	f7fe f8ee 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419840c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3419840e:	68fa      	ldr	r2, [r7, #12]
34198410:	68bb      	ldr	r3, [r7, #8]
34198412:	fbb2 f3f3 	udiv	r3, r2, r3
34198416:	60fb      	str	r3, [r7, #12]
            break;
34198418:	e009      	b.n	3419842e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3419841a:	f7fe f92b 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3419841e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34198420:	68fa      	ldr	r2, [r7, #12]
34198422:	68bb      	ldr	r3, [r7, #8]
34198424:	fbb2 f3f3 	udiv	r3, r2, r3
34198428:	60fb      	str	r3, [r7, #12]
            break;
3419842a:	e000      	b.n	3419842e <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
3419842c:	bf00      	nop
      break;
3419842e:	e026      	b.n	3419847e <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34198430:	f7f5 fc6c 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34198434:	4603      	mov	r3, r0
34198436:	2b00      	cmp	r3, #0
34198438:	d023      	beq.n	34198482 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3419843a:	f7f5 fc79 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
3419843e:	4603      	mov	r3, r0
34198440:	09db      	lsrs	r3, r3, #7
34198442:	4a14      	ldr	r2, [pc, #80]	@ (34198494 <RCCEx_GetMDFCLKFreq+0x208>)
34198444:	fa22 f303 	lsr.w	r3, r2, r3
34198448:	60fb      	str	r3, [r7, #12]
      break;
3419844a:	e01a      	b.n	34198482 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
3419844c:	f7f5 fc7e 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34198450:	4603      	mov	r3, r0
34198452:	2b00      	cmp	r3, #0
34198454:	d017      	beq.n	34198486 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34198456:	4b10      	ldr	r3, [pc, #64]	@ (34198498 <RCCEx_GetMDFCLKFreq+0x20c>)
34198458:	60fb      	str	r3, [r7, #12]
      break;
3419845a:	e014      	b.n	34198486 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3419845c:	4b0f      	ldr	r3, [pc, #60]	@ (3419849c <RCCEx_GetMDFCLKFreq+0x210>)
3419845e:	60fb      	str	r3, [r7, #12]
      break;
34198460:	e012      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34198462:	f7f4 ffc9 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34198466:	4604      	mov	r4, r0
34198468:	f7f6 f8b8 	bl	3418e5dc <LL_RCC_GetTIMPrescaler>
3419846c:	4603      	mov	r3, r0
3419846e:	fa24 f303 	lsr.w	r3, r4, r3
34198472:	60fb      	str	r3, [r7, #12]
      break;
34198474:	e008      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34198476:	bf00      	nop
34198478:	e006      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3419847a:	bf00      	nop
3419847c:	e004      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3419847e:	bf00      	nop
34198480:	e002      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34198482:	bf00      	nop
34198484:	e000      	b.n	34198488 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34198486:	bf00      	nop
  }

  return adf_frequency;
34198488:	68fb      	ldr	r3, [r7, #12]
}
3419848a:	4618      	mov	r0, r3
3419848c:	3714      	adds	r7, #20
3419848e:	46bd      	mov	sp, r7
34198490:	bd90      	pop	{r4, r7, pc}
34198492:	bf00      	nop
34198494:	03d09000 	.word	0x03d09000
34198498:	003d0900 	.word	0x003d0900
3419849c:	00bb8000 	.word	0x00bb8000

341984a0 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
341984a0:	b580      	push	{r7, lr}
341984a2:	b084      	sub	sp, #16
341984a4:	af00      	add	r7, sp, #0
341984a6:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
341984a8:	2300      	movs	r3, #0
341984aa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
341984ac:	6878      	ldr	r0, [r7, #4]
341984ae:	f7f5 ffcd 	bl	3418e44c <LL_RCC_GetPSSIClockSource>
341984b2:	4603      	mov	r3, r0
341984b4:	2b30      	cmp	r3, #48	@ 0x30
341984b6:	d05a      	beq.n	3419856e <RCCEx_GetPSSICLKFreq+0xce>
341984b8:	2b30      	cmp	r3, #48	@ 0x30
341984ba:	d866      	bhi.n	3419858a <RCCEx_GetPSSICLKFreq+0xea>
341984bc:	2b20      	cmp	r3, #32
341984be:	d013      	beq.n	341984e8 <RCCEx_GetPSSICLKFreq+0x48>
341984c0:	2b20      	cmp	r3, #32
341984c2:	d862      	bhi.n	3419858a <RCCEx_GetPSSICLKFreq+0xea>
341984c4:	2b00      	cmp	r3, #0
341984c6:	d002      	beq.n	341984ce <RCCEx_GetPSSICLKFreq+0x2e>
341984c8:	2b10      	cmp	r3, #16
341984ca:	d008      	beq.n	341984de <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
341984cc:	e05d      	b.n	3419858a <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
341984ce:	f7f4 ff93 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
341984d2:	4603      	mov	r3, r0
341984d4:	4618      	mov	r0, r3
341984d6:	f7fe f913 	bl	34196700 <RCCEx_GetHCLKFreq>
341984da:	60f8      	str	r0, [r7, #12]
      break;
341984dc:	e05a      	b.n	34198594 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341984de:	2007      	movs	r0, #7
341984e0:	f7fe fbfa 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341984e4:	60f8      	str	r0, [r7, #12]
      break;
341984e6:	e055      	b.n	34198594 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
341984e8:	f7f6 feb4 	bl	3418f254 <LL_RCC_IC20_IsEnabled>
341984ec:	4603      	mov	r3, r0
341984ee:	2b00      	cmp	r3, #0
341984f0:	d04d      	beq.n	3419858e <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
341984f2:	f7f6 fed1 	bl	3418f298 <LL_RCC_IC20_GetDivider>
341984f6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
341984f8:	f7f6 fec0 	bl	3418f27c <LL_RCC_IC20_GetSource>
341984fc:	4603      	mov	r3, r0
341984fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198502:	d029      	beq.n	34198558 <RCCEx_GetPSSICLKFreq+0xb8>
34198504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198508:	d82f      	bhi.n	3419856a <RCCEx_GetPSSICLKFreq+0xca>
3419850a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419850e:	d01a      	beq.n	34198546 <RCCEx_GetPSSICLKFreq+0xa6>
34198510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198514:	d829      	bhi.n	3419856a <RCCEx_GetPSSICLKFreq+0xca>
34198516:	2b00      	cmp	r3, #0
34198518:	d003      	beq.n	34198522 <RCCEx_GetPSSICLKFreq+0x82>
3419851a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419851e:	d009      	beq.n	34198534 <RCCEx_GetPSSICLKFreq+0x94>
            break;
34198520:	e023      	b.n	3419856a <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34198522:	f7fd ffd5 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198526:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34198528:	68fa      	ldr	r2, [r7, #12]
3419852a:	68bb      	ldr	r3, [r7, #8]
3419852c:	fbb2 f3f3 	udiv	r3, r2, r3
34198530:	60fb      	str	r3, [r7, #12]
            break;
34198532:	e01b      	b.n	3419856c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198534:	f7fe f812 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198538:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3419853a:	68fa      	ldr	r2, [r7, #12]
3419853c:	68bb      	ldr	r3, [r7, #8]
3419853e:	fbb2 f3f3 	udiv	r3, r2, r3
34198542:	60fb      	str	r3, [r7, #12]
            break;
34198544:	e012      	b.n	3419856c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198546:	f7fe f84f 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419854a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3419854c:	68fa      	ldr	r2, [r7, #12]
3419854e:	68bb      	ldr	r3, [r7, #8]
34198550:	fbb2 f3f3 	udiv	r3, r2, r3
34198554:	60fb      	str	r3, [r7, #12]
            break;
34198556:	e009      	b.n	3419856c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198558:	f7fe f88c 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3419855c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3419855e:	68fa      	ldr	r2, [r7, #12]
34198560:	68bb      	ldr	r3, [r7, #8]
34198562:	fbb2 f3f3 	udiv	r3, r2, r3
34198566:	60fb      	str	r3, [r7, #12]
            break;
34198568:	e000      	b.n	3419856c <RCCEx_GetPSSICLKFreq+0xcc>
            break;
3419856a:	bf00      	nop
      break;
3419856c:	e00f      	b.n	3419858e <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3419856e:	f7f5 fbcd 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34198572:	4603      	mov	r3, r0
34198574:	2b00      	cmp	r3, #0
34198576:	d00c      	beq.n	34198592 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34198578:	f7f5 fbda 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
3419857c:	4603      	mov	r3, r0
3419857e:	09db      	lsrs	r3, r3, #7
34198580:	4a07      	ldr	r2, [pc, #28]	@ (341985a0 <RCCEx_GetPSSICLKFreq+0x100>)
34198582:	fa22 f303 	lsr.w	r3, r2, r3
34198586:	60fb      	str	r3, [r7, #12]
      break;
34198588:	e003      	b.n	34198592 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
3419858a:	bf00      	nop
3419858c:	e002      	b.n	34198594 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3419858e:	bf00      	nop
34198590:	e000      	b.n	34198594 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34198592:	bf00      	nop
  }

  return pssi_frequency;
34198594:	68fb      	ldr	r3, [r7, #12]
}
34198596:	4618      	mov	r0, r3
34198598:	3710      	adds	r7, #16
3419859a:	46bd      	mov	sp, r7
3419859c:	bd80      	pop	{r7, pc}
3419859e:	bf00      	nop
341985a0:	03d09000 	.word	0x03d09000

341985a4 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
341985a4:	b580      	push	{r7, lr}
341985a6:	b082      	sub	sp, #8
341985a8:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
341985aa:	2300      	movs	r3, #0
341985ac:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
341985ae:	f7f5 ffdb 	bl	3418e568 <LL_RCC_GetRTCClockSource>
341985b2:	4603      	mov	r3, r0
341985b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341985b8:	d020      	beq.n	341985fc <RCCEx_GetRTCCLKFreq+0x58>
341985ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341985be:	d830      	bhi.n	34198622 <RCCEx_GetRTCCLKFreq+0x7e>
341985c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341985c4:	d011      	beq.n	341985ea <RCCEx_GetRTCCLKFreq+0x46>
341985c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341985ca:	d82a      	bhi.n	34198622 <RCCEx_GetRTCCLKFreq+0x7e>
341985cc:	2b00      	cmp	r3, #0
341985ce:	d02a      	beq.n	34198626 <RCCEx_GetRTCCLKFreq+0x82>
341985d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341985d4:	d000      	beq.n	341985d8 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
341985d6:	e024      	b.n	34198622 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
341985d8:	f7f5 fbd8 	bl	3418dd8c <LL_RCC_LSE_IsReady>
341985dc:	4603      	mov	r3, r0
341985de:	2b00      	cmp	r3, #0
341985e0:	d023      	beq.n	3419862a <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
341985e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
341985e6:	607b      	str	r3, [r7, #4]
      break;
341985e8:	e01f      	b.n	3419862a <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
341985ea:	f7f5 fbe1 	bl	3418ddb0 <LL_RCC_LSI_IsReady>
341985ee:	4603      	mov	r3, r0
341985f0:	2b00      	cmp	r3, #0
341985f2:	d01c      	beq.n	3419862e <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
341985f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
341985f8:	607b      	str	r3, [r7, #4]
      break;
341985fa:	e018      	b.n	3419862e <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
341985fc:	f7f5 fb74 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34198600:	4603      	mov	r3, r0
34198602:	2b00      	cmp	r3, #0
34198604:	d015      	beq.n	34198632 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34198606:	4b0e      	ldr	r3, [pc, #56]	@ (34198640 <RCCEx_GetRTCCLKFreq+0x9c>)
34198608:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3419860c:	0b1b      	lsrs	r3, r3, #12
3419860e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34198612:	3301      	adds	r3, #1
34198614:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34198616:	4a0b      	ldr	r2, [pc, #44]	@ (34198644 <RCCEx_GetRTCCLKFreq+0xa0>)
34198618:	683b      	ldr	r3, [r7, #0]
3419861a:	fbb2 f3f3 	udiv	r3, r2, r3
3419861e:	607b      	str	r3, [r7, #4]
      break;
34198620:	e007      	b.n	34198632 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34198622:	bf00      	nop
34198624:	e006      	b.n	34198634 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34198626:	bf00      	nop
34198628:	e004      	b.n	34198634 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3419862a:	bf00      	nop
3419862c:	e002      	b.n	34198634 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3419862e:	bf00      	nop
34198630:	e000      	b.n	34198634 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34198632:	bf00      	nop
  }

  return rtc_frequency;
34198634:	687b      	ldr	r3, [r7, #4]
}
34198636:	4618      	mov	r0, r3
34198638:	3708      	adds	r7, #8
3419863a:	46bd      	mov	sp, r7
3419863c:	bd80      	pop	{r7, pc}
3419863e:	bf00      	nop
34198640:	56028000 	.word	0x56028000
34198644:	02dc6c00 	.word	0x02dc6c00

34198648 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34198648:	b580      	push	{r7, lr}
3419864a:	b084      	sub	sp, #16
3419864c:	af00      	add	r7, sp, #0
3419864e:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34198650:	2300      	movs	r3, #0
34198652:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34198654:	6878      	ldr	r0, [r7, #4]
34198656:	f7f5 ff0b 	bl	3418e470 <LL_RCC_GetSAIClockSource>
3419865a:	4603      	mov	r3, r0
3419865c:	4a9a      	ldr	r2, [pc, #616]	@ (341988c8 <RCCEx_GetSAICLKFreq+0x280>)
3419865e:	4293      	cmp	r3, r2
34198660:	f000 811f 	beq.w	341988a2 <RCCEx_GetSAICLKFreq+0x25a>
34198664:	4a98      	ldr	r2, [pc, #608]	@ (341988c8 <RCCEx_GetSAICLKFreq+0x280>)
34198666:	4293      	cmp	r3, r2
34198668:	f200 8120 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
3419866c:	4a97      	ldr	r2, [pc, #604]	@ (341988cc <RCCEx_GetSAICLKFreq+0x284>)
3419866e:	4293      	cmp	r3, r2
34198670:	f000 8117 	beq.w	341988a2 <RCCEx_GetSAICLKFreq+0x25a>
34198674:	4a95      	ldr	r2, [pc, #596]	@ (341988cc <RCCEx_GetSAICLKFreq+0x284>)
34198676:	4293      	cmp	r3, r2
34198678:	f200 8118 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
3419867c:	4a94      	ldr	r2, [pc, #592]	@ (341988d0 <RCCEx_GetSAICLKFreq+0x288>)
3419867e:	4293      	cmp	r3, r2
34198680:	f000 810c 	beq.w	3419889c <RCCEx_GetSAICLKFreq+0x254>
34198684:	4a92      	ldr	r2, [pc, #584]	@ (341988d0 <RCCEx_GetSAICLKFreq+0x288>)
34198686:	4293      	cmp	r3, r2
34198688:	f200 8110 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
3419868c:	4a91      	ldr	r2, [pc, #580]	@ (341988d4 <RCCEx_GetSAICLKFreq+0x28c>)
3419868e:	4293      	cmp	r3, r2
34198690:	f000 8104 	beq.w	3419889c <RCCEx_GetSAICLKFreq+0x254>
34198694:	4a8f      	ldr	r2, [pc, #572]	@ (341988d4 <RCCEx_GetSAICLKFreq+0x28c>)
34198696:	4293      	cmp	r3, r2
34198698:	f200 8108 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
3419869c:	4a8e      	ldr	r2, [pc, #568]	@ (341988d8 <RCCEx_GetSAICLKFreq+0x290>)
3419869e:	4293      	cmp	r3, r2
341986a0:	f000 80e6 	beq.w	34198870 <RCCEx_GetSAICLKFreq+0x228>
341986a4:	4a8c      	ldr	r2, [pc, #560]	@ (341988d8 <RCCEx_GetSAICLKFreq+0x290>)
341986a6:	4293      	cmp	r3, r2
341986a8:	f200 8100 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986ac:	4a8b      	ldr	r2, [pc, #556]	@ (341988dc <RCCEx_GetSAICLKFreq+0x294>)
341986ae:	4293      	cmp	r3, r2
341986b0:	f000 80de 	beq.w	34198870 <RCCEx_GetSAICLKFreq+0x228>
341986b4:	4a89      	ldr	r2, [pc, #548]	@ (341988dc <RCCEx_GetSAICLKFreq+0x294>)
341986b6:	4293      	cmp	r3, r2
341986b8:	f200 80f8 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986bc:	4a88      	ldr	r2, [pc, #544]	@ (341988e0 <RCCEx_GetSAICLKFreq+0x298>)
341986be:	4293      	cmp	r3, r2
341986c0:	f000 80e4 	beq.w	3419888c <RCCEx_GetSAICLKFreq+0x244>
341986c4:	4a86      	ldr	r2, [pc, #536]	@ (341988e0 <RCCEx_GetSAICLKFreq+0x298>)
341986c6:	4293      	cmp	r3, r2
341986c8:	f200 80f0 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986cc:	4a85      	ldr	r2, [pc, #532]	@ (341988e4 <RCCEx_GetSAICLKFreq+0x29c>)
341986ce:	4293      	cmp	r3, r2
341986d0:	f000 80dc 	beq.w	3419888c <RCCEx_GetSAICLKFreq+0x244>
341986d4:	4a83      	ldr	r2, [pc, #524]	@ (341988e4 <RCCEx_GetSAICLKFreq+0x29c>)
341986d6:	4293      	cmp	r3, r2
341986d8:	f200 80e8 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986dc:	4a82      	ldr	r2, [pc, #520]	@ (341988e8 <RCCEx_GetSAICLKFreq+0x2a0>)
341986de:	4293      	cmp	r3, r2
341986e0:	f000 8083 	beq.w	341987ea <RCCEx_GetSAICLKFreq+0x1a2>
341986e4:	4a80      	ldr	r2, [pc, #512]	@ (341988e8 <RCCEx_GetSAICLKFreq+0x2a0>)
341986e6:	4293      	cmp	r3, r2
341986e8:	f200 80e0 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986ec:	4a7f      	ldr	r2, [pc, #508]	@ (341988ec <RCCEx_GetSAICLKFreq+0x2a4>)
341986ee:	4293      	cmp	r3, r2
341986f0:	d07b      	beq.n	341987ea <RCCEx_GetSAICLKFreq+0x1a2>
341986f2:	4a7e      	ldr	r2, [pc, #504]	@ (341988ec <RCCEx_GetSAICLKFreq+0x2a4>)
341986f4:	4293      	cmp	r3, r2
341986f6:	f200 80d9 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
341986fa:	4a7d      	ldr	r2, [pc, #500]	@ (341988f0 <RCCEx_GetSAICLKFreq+0x2a8>)
341986fc:	4293      	cmp	r3, r2
341986fe:	d030      	beq.n	34198762 <RCCEx_GetSAICLKFreq+0x11a>
34198700:	4a7b      	ldr	r2, [pc, #492]	@ (341988f0 <RCCEx_GetSAICLKFreq+0x2a8>)
34198702:	4293      	cmp	r3, r2
34198704:	f200 80d2 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
34198708:	4a7a      	ldr	r2, [pc, #488]	@ (341988f4 <RCCEx_GetSAICLKFreq+0x2ac>)
3419870a:	4293      	cmp	r3, r2
3419870c:	d029      	beq.n	34198762 <RCCEx_GetSAICLKFreq+0x11a>
3419870e:	4a79      	ldr	r2, [pc, #484]	@ (341988f4 <RCCEx_GetSAICLKFreq+0x2ac>)
34198710:	4293      	cmp	r3, r2
34198712:	f200 80cb 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
34198716:	4a78      	ldr	r2, [pc, #480]	@ (341988f8 <RCCEx_GetSAICLKFreq+0x2b0>)
34198718:	4293      	cmp	r3, r2
3419871a:	d01d      	beq.n	34198758 <RCCEx_GetSAICLKFreq+0x110>
3419871c:	4a76      	ldr	r2, [pc, #472]	@ (341988f8 <RCCEx_GetSAICLKFreq+0x2b0>)
3419871e:	4293      	cmp	r3, r2
34198720:	f200 80c4 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
34198724:	4a75      	ldr	r2, [pc, #468]	@ (341988fc <RCCEx_GetSAICLKFreq+0x2b4>)
34198726:	4293      	cmp	r3, r2
34198728:	d016      	beq.n	34198758 <RCCEx_GetSAICLKFreq+0x110>
3419872a:	4a74      	ldr	r2, [pc, #464]	@ (341988fc <RCCEx_GetSAICLKFreq+0x2b4>)
3419872c:	4293      	cmp	r3, r2
3419872e:	f200 80bd 	bhi.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
34198732:	4a73      	ldr	r2, [pc, #460]	@ (34198900 <RCCEx_GetSAICLKFreq+0x2b8>)
34198734:	4293      	cmp	r3, r2
34198736:	d003      	beq.n	34198740 <RCCEx_GetSAICLKFreq+0xf8>
34198738:	4a72      	ldr	r2, [pc, #456]	@ (34198904 <RCCEx_GetSAICLKFreq+0x2bc>)
3419873a:	4293      	cmp	r3, r2
3419873c:	f040 80b6 	bne.w	341988ac <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34198740:	f7f4 fe5a 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34198744:	4603      	mov	r3, r0
34198746:	4618      	mov	r0, r3
34198748:	f7fd ffda 	bl	34196700 <RCCEx_GetHCLKFreq>
3419874c:	4603      	mov	r3, r0
3419874e:	4618      	mov	r0, r3
34198750:	f7fd fff7 	bl	34196742 <RCCEx_GetPCLK2Freq>
34198754:	60f8      	str	r0, [r7, #12]
      break;
34198756:	e0b2      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34198758:	2007      	movs	r0, #7
3419875a:	f7fe fabd 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
3419875e:	60f8      	str	r0, [r7, #12]
      break;
34198760:	e0ad      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34198762:	f7f6 fa77 	bl	3418ec54 <LL_RCC_IC7_IsEnabled>
34198766:	4603      	mov	r3, r0
34198768:	2b00      	cmp	r3, #0
3419876a:	f000 80a1 	beq.w	341988b0 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3419876e:	f7f6 fa93 	bl	3418ec98 <LL_RCC_IC7_GetDivider>
34198772:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34198774:	f7f6 fa82 	bl	3418ec7c <LL_RCC_IC7_GetSource>
34198778:	4603      	mov	r3, r0
3419877a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419877e:	d029      	beq.n	341987d4 <RCCEx_GetSAICLKFreq+0x18c>
34198780:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198784:	d82f      	bhi.n	341987e6 <RCCEx_GetSAICLKFreq+0x19e>
34198786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419878a:	d01a      	beq.n	341987c2 <RCCEx_GetSAICLKFreq+0x17a>
3419878c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198790:	d829      	bhi.n	341987e6 <RCCEx_GetSAICLKFreq+0x19e>
34198792:	2b00      	cmp	r3, #0
34198794:	d003      	beq.n	3419879e <RCCEx_GetSAICLKFreq+0x156>
34198796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419879a:	d009      	beq.n	341987b0 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3419879c:	e023      	b.n	341987e6 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419879e:	f7fd fe97 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341987a2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
341987a4:	68fa      	ldr	r2, [r7, #12]
341987a6:	68bb      	ldr	r3, [r7, #8]
341987a8:	fbb2 f3f3 	udiv	r3, r2, r3
341987ac:	60fb      	str	r3, [r7, #12]
            break;
341987ae:	e01b      	b.n	341987e8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341987b0:	f7fd fed4 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341987b4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
341987b6:	68fa      	ldr	r2, [r7, #12]
341987b8:	68bb      	ldr	r3, [r7, #8]
341987ba:	fbb2 f3f3 	udiv	r3, r2, r3
341987be:	60fb      	str	r3, [r7, #12]
            break;
341987c0:	e012      	b.n	341987e8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341987c2:	f7fd ff11 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341987c6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
341987c8:	68fa      	ldr	r2, [r7, #12]
341987ca:	68bb      	ldr	r3, [r7, #8]
341987cc:	fbb2 f3f3 	udiv	r3, r2, r3
341987d0:	60fb      	str	r3, [r7, #12]
            break;
341987d2:	e009      	b.n	341987e8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341987d4:	f7fd ff4e 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341987d8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
341987da:	68fa      	ldr	r2, [r7, #12]
341987dc:	68bb      	ldr	r3, [r7, #8]
341987de:	fbb2 f3f3 	udiv	r3, r2, r3
341987e2:	60fb      	str	r3, [r7, #12]
            break;
341987e4:	e000      	b.n	341987e8 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
341987e6:	bf00      	nop
        }
      }
      break;
341987e8:	e062      	b.n	341988b0 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
341987ea:	f7f6 fa73 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
341987ee:	4603      	mov	r3, r0
341987f0:	2b00      	cmp	r3, #0
341987f2:	d05f      	beq.n	341988b4 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
341987f4:	f7f6 fa90 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
341987f8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341987fa:	f7f6 fa7f 	bl	3418ecfc <LL_RCC_IC8_GetSource>
341987fe:	4603      	mov	r3, r0
34198800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198804:	d029      	beq.n	3419885a <RCCEx_GetSAICLKFreq+0x212>
34198806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419880a:	d82f      	bhi.n	3419886c <RCCEx_GetSAICLKFreq+0x224>
3419880c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198810:	d01a      	beq.n	34198848 <RCCEx_GetSAICLKFreq+0x200>
34198812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198816:	d829      	bhi.n	3419886c <RCCEx_GetSAICLKFreq+0x224>
34198818:	2b00      	cmp	r3, #0
3419881a:	d003      	beq.n	34198824 <RCCEx_GetSAICLKFreq+0x1dc>
3419881c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34198820:	d009      	beq.n	34198836 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34198822:	e023      	b.n	3419886c <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34198824:	f7fd fe54 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198828:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3419882a:	68fa      	ldr	r2, [r7, #12]
3419882c:	68bb      	ldr	r3, [r7, #8]
3419882e:	fbb2 f3f3 	udiv	r3, r2, r3
34198832:	60fb      	str	r3, [r7, #12]
            break;
34198834:	e01b      	b.n	3419886e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198836:	f7fd fe91 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419883a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3419883c:	68fa      	ldr	r2, [r7, #12]
3419883e:	68bb      	ldr	r3, [r7, #8]
34198840:	fbb2 f3f3 	udiv	r3, r2, r3
34198844:	60fb      	str	r3, [r7, #12]
            break;
34198846:	e012      	b.n	3419886e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198848:	f7fd fece 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419884c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3419884e:	68fa      	ldr	r2, [r7, #12]
34198850:	68bb      	ldr	r3, [r7, #8]
34198852:	fbb2 f3f3 	udiv	r3, r2, r3
34198856:	60fb      	str	r3, [r7, #12]
            break;
34198858:	e009      	b.n	3419886e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3419885a:	f7fd ff0b 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3419885e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34198860:	68fa      	ldr	r2, [r7, #12]
34198862:	68bb      	ldr	r3, [r7, #8]
34198864:	fbb2 f3f3 	udiv	r3, r2, r3
34198868:	60fb      	str	r3, [r7, #12]
            break;
3419886a:	e000      	b.n	3419886e <RCCEx_GetSAICLKFreq+0x226>
            break;
3419886c:	bf00      	nop
        }
      }
      break;
3419886e:	e021      	b.n	341988b4 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34198870:	f7f5 fa4c 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34198874:	4603      	mov	r3, r0
34198876:	2b00      	cmp	r3, #0
34198878:	d01e      	beq.n	341988b8 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3419887a:	f7f5 fa59 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
3419887e:	4603      	mov	r3, r0
34198880:	09db      	lsrs	r3, r3, #7
34198882:	4a21      	ldr	r2, [pc, #132]	@ (34198908 <RCCEx_GetSAICLKFreq+0x2c0>)
34198884:	fa22 f303 	lsr.w	r3, r2, r3
34198888:	60fb      	str	r3, [r7, #12]
      }
      break;
3419888a:	e015      	b.n	341988b8 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3419888c:	f7f5 fa5e 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34198890:	4603      	mov	r3, r0
34198892:	2b00      	cmp	r3, #0
34198894:	d012      	beq.n	341988bc <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34198896:	4b1d      	ldr	r3, [pc, #116]	@ (3419890c <RCCEx_GetSAICLKFreq+0x2c4>)
34198898:	60fb      	str	r3, [r7, #12]
      }
      break;
3419889a:	e00f      	b.n	341988bc <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3419889c:	4b1c      	ldr	r3, [pc, #112]	@ (34198910 <RCCEx_GetSAICLKFreq+0x2c8>)
3419889e:	60fb      	str	r3, [r7, #12]
      break;
341988a0:	e00d      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
341988a2:	2007      	movs	r0, #7
341988a4:	f000 f920 	bl	34198ae8 <RCCEx_GetSPDIFRXCLKFreq>
341988a8:	60f8      	str	r0, [r7, #12]
      break;
341988aa:	e008      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
341988ac:	bf00      	nop
341988ae:	e006      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>
      break;
341988b0:	bf00      	nop
341988b2:	e004      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>
      break;
341988b4:	bf00      	nop
341988b6:	e002      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>
      break;
341988b8:	bf00      	nop
341988ba:	e000      	b.n	341988be <RCCEx_GetSAICLKFreq+0x276>
      break;
341988bc:	bf00      	nop
  }

  return sai_frequency;
341988be:	68fb      	ldr	r3, [r7, #12]
}
341988c0:	4618      	mov	r0, r3
341988c2:	3710      	adds	r7, #16
341988c4:	46bd      	mov	sp, r7
341988c6:	bd80      	pop	{r7, pc}
341988c8:	07071818 	.word	0x07071818
341988cc:	07071418 	.word	0x07071418
341988d0:	07061818 	.word	0x07061818
341988d4:	07061418 	.word	0x07061418
341988d8:	07051818 	.word	0x07051818
341988dc:	07051418 	.word	0x07051418
341988e0:	07041818 	.word	0x07041818
341988e4:	07041418 	.word	0x07041418
341988e8:	07031818 	.word	0x07031818
341988ec:	07031418 	.word	0x07031418
341988f0:	07021818 	.word	0x07021818
341988f4:	07021418 	.word	0x07021418
341988f8:	07011818 	.word	0x07011818
341988fc:	07011418 	.word	0x07011418
34198900:	07001418 	.word	0x07001418
34198904:	07001818 	.word	0x07001818
34198908:	03d09000 	.word	0x03d09000
3419890c:	003d0900 	.word	0x003d0900
34198910:	00bb8000 	.word	0x00bb8000

34198914 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34198914:	b580      	push	{r7, lr}
34198916:	b084      	sub	sp, #16
34198918:	af00      	add	r7, sp, #0
3419891a:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3419891c:	2300      	movs	r3, #0
3419891e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34198920:	6878      	ldr	r0, [r7, #4]
34198922:	f7f5 fdb1 	bl	3418e488 <LL_RCC_GetSDMMCClockSource>
34198926:	4603      	mov	r3, r0
34198928:	4a67      	ldr	r2, [pc, #412]	@ (34198ac8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3419892a:	4293      	cmp	r3, r2
3419892c:	d07e      	beq.n	34198a2c <RCCEx_GetSDMMCCLKFreq+0x118>
3419892e:	4a66      	ldr	r2, [pc, #408]	@ (34198ac8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34198930:	4293      	cmp	r3, r2
34198932:	f200 80be 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34198936:	4a65      	ldr	r2, [pc, #404]	@ (34198acc <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34198938:	4293      	cmp	r3, r2
3419893a:	d077      	beq.n	34198a2c <RCCEx_GetSDMMCCLKFreq+0x118>
3419893c:	4a63      	ldr	r2, [pc, #396]	@ (34198acc <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3419893e:	4293      	cmp	r3, r2
34198940:	f200 80b7 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34198944:	4a62      	ldr	r2, [pc, #392]	@ (34198ad0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34198946:	4293      	cmp	r3, r2
34198948:	d02c      	beq.n	341989a4 <RCCEx_GetSDMMCCLKFreq+0x90>
3419894a:	4a61      	ldr	r2, [pc, #388]	@ (34198ad0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3419894c:	4293      	cmp	r3, r2
3419894e:	f200 80b0 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34198952:	4a60      	ldr	r2, [pc, #384]	@ (34198ad4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34198954:	4293      	cmp	r3, r2
34198956:	d025      	beq.n	341989a4 <RCCEx_GetSDMMCCLKFreq+0x90>
34198958:	4a5e      	ldr	r2, [pc, #376]	@ (34198ad4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3419895a:	4293      	cmp	r3, r2
3419895c:	f200 80a9 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34198960:	4a5d      	ldr	r2, [pc, #372]	@ (34198ad8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34198962:	4293      	cmp	r3, r2
34198964:	d019      	beq.n	3419899a <RCCEx_GetSDMMCCLKFreq+0x86>
34198966:	4a5c      	ldr	r2, [pc, #368]	@ (34198ad8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34198968:	4293      	cmp	r3, r2
3419896a:	f200 80a2 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3419896e:	4a5b      	ldr	r2, [pc, #364]	@ (34198adc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34198970:	4293      	cmp	r3, r2
34198972:	d012      	beq.n	3419899a <RCCEx_GetSDMMCCLKFreq+0x86>
34198974:	4a59      	ldr	r2, [pc, #356]	@ (34198adc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34198976:	4293      	cmp	r3, r2
34198978:	f200 809b 	bhi.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3419897c:	4a58      	ldr	r2, [pc, #352]	@ (34198ae0 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3419897e:	4293      	cmp	r3, r2
34198980:	d003      	beq.n	3419898a <RCCEx_GetSDMMCCLKFreq+0x76>
34198982:	4a58      	ldr	r2, [pc, #352]	@ (34198ae4 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34198984:	4293      	cmp	r3, r2
34198986:	f040 8094 	bne.w	34198ab2 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3419898a:	f7f4 fd35 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
3419898e:	4603      	mov	r3, r0
34198990:	4618      	mov	r0, r3
34198992:	f7fd feb5 	bl	34196700 <RCCEx_GetHCLKFreq>
34198996:	60f8      	str	r0, [r7, #12]
      break;
34198998:	e090      	b.n	34198abc <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419899a:	2007      	movs	r0, #7
3419899c:	f7fe f99c 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341989a0:	60f8      	str	r0, [r7, #12]
      break;
341989a2:	e08b      	b.n	34198abc <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
341989a4:	f7f6 f8d6 	bl	3418eb54 <LL_RCC_IC4_IsEnabled>
341989a8:	4603      	mov	r3, r0
341989aa:	2b00      	cmp	r3, #0
341989ac:	f000 8083 	beq.w	34198ab6 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
341989b0:	f7f6 f8f2 	bl	3418eb98 <LL_RCC_IC4_GetDivider>
341989b4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
341989b6:	f7f6 f8e1 	bl	3418eb7c <LL_RCC_IC4_GetSource>
341989ba:	4603      	mov	r3, r0
341989bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341989c0:	d029      	beq.n	34198a16 <RCCEx_GetSDMMCCLKFreq+0x102>
341989c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341989c6:	d82f      	bhi.n	34198a28 <RCCEx_GetSDMMCCLKFreq+0x114>
341989c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341989cc:	d01a      	beq.n	34198a04 <RCCEx_GetSDMMCCLKFreq+0xf0>
341989ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341989d2:	d829      	bhi.n	34198a28 <RCCEx_GetSDMMCCLKFreq+0x114>
341989d4:	2b00      	cmp	r3, #0
341989d6:	d003      	beq.n	341989e0 <RCCEx_GetSDMMCCLKFreq+0xcc>
341989d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341989dc:	d009      	beq.n	341989f2 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341989de:	e023      	b.n	34198a28 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341989e0:	f7fd fd76 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341989e4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
341989e6:	68fa      	ldr	r2, [r7, #12]
341989e8:	68bb      	ldr	r3, [r7, #8]
341989ea:	fbb2 f3f3 	udiv	r3, r2, r3
341989ee:	60fb      	str	r3, [r7, #12]
            break;
341989f0:	e01b      	b.n	34198a2a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341989f2:	f7fd fdb3 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341989f6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
341989f8:	68fa      	ldr	r2, [r7, #12]
341989fa:	68bb      	ldr	r3, [r7, #8]
341989fc:	fbb2 f3f3 	udiv	r3, r2, r3
34198a00:	60fb      	str	r3, [r7, #12]
            break;
34198a02:	e012      	b.n	34198a2a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198a04:	f7fd fdf0 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198a08:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198a0a:	68fa      	ldr	r2, [r7, #12]
34198a0c:	68bb      	ldr	r3, [r7, #8]
34198a0e:	fbb2 f3f3 	udiv	r3, r2, r3
34198a12:	60fb      	str	r3, [r7, #12]
            break;
34198a14:	e009      	b.n	34198a2a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198a16:	f7fd fe2d 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198a1a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198a1c:	68fa      	ldr	r2, [r7, #12]
34198a1e:	68bb      	ldr	r3, [r7, #8]
34198a20:	fbb2 f3f3 	udiv	r3, r2, r3
34198a24:	60fb      	str	r3, [r7, #12]
            break;
34198a26:	e000      	b.n	34198a2a <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34198a28:	bf00      	nop
        }
      }
      break;
34198a2a:	e044      	b.n	34198ab6 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34198a2c:	f7f6 f8d2 	bl	3418ebd4 <LL_RCC_IC5_IsEnabled>
34198a30:	4603      	mov	r3, r0
34198a32:	2b00      	cmp	r3, #0
34198a34:	d041      	beq.n	34198aba <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34198a36:	f7f6 f8ef 	bl	3418ec18 <LL_RCC_IC5_GetDivider>
34198a3a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34198a3c:	f7f6 f8de 	bl	3418ebfc <LL_RCC_IC5_GetSource>
34198a40:	4603      	mov	r3, r0
34198a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198a46:	d029      	beq.n	34198a9c <RCCEx_GetSDMMCCLKFreq+0x188>
34198a48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198a4c:	d82f      	bhi.n	34198aae <RCCEx_GetSDMMCCLKFreq+0x19a>
34198a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198a52:	d01a      	beq.n	34198a8a <RCCEx_GetSDMMCCLKFreq+0x176>
34198a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198a58:	d829      	bhi.n	34198aae <RCCEx_GetSDMMCCLKFreq+0x19a>
34198a5a:	2b00      	cmp	r3, #0
34198a5c:	d003      	beq.n	34198a66 <RCCEx_GetSDMMCCLKFreq+0x152>
34198a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34198a62:	d009      	beq.n	34198a78 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34198a64:	e023      	b.n	34198aae <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34198a66:	f7fd fd33 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198a6a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198a6c:	68fa      	ldr	r2, [r7, #12]
34198a6e:	68bb      	ldr	r3, [r7, #8]
34198a70:	fbb2 f3f3 	udiv	r3, r2, r3
34198a74:	60fb      	str	r3, [r7, #12]
            break;
34198a76:	e01b      	b.n	34198ab0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198a78:	f7fd fd70 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198a7c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198a7e:	68fa      	ldr	r2, [r7, #12]
34198a80:	68bb      	ldr	r3, [r7, #8]
34198a82:	fbb2 f3f3 	udiv	r3, r2, r3
34198a86:	60fb      	str	r3, [r7, #12]
            break;
34198a88:	e012      	b.n	34198ab0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198a8a:	f7fd fdad 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198a8e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198a90:	68fa      	ldr	r2, [r7, #12]
34198a92:	68bb      	ldr	r3, [r7, #8]
34198a94:	fbb2 f3f3 	udiv	r3, r2, r3
34198a98:	60fb      	str	r3, [r7, #12]
            break;
34198a9a:	e009      	b.n	34198ab0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198a9c:	f7fd fdea 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198aa0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34198aa2:	68fa      	ldr	r2, [r7, #12]
34198aa4:	68bb      	ldr	r3, [r7, #8]
34198aa6:	fbb2 f3f3 	udiv	r3, r2, r3
34198aaa:	60fb      	str	r3, [r7, #12]
            break;
34198aac:	e000      	b.n	34198ab0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
34198aae:	bf00      	nop
        }
      }
      break;
34198ab0:	e003      	b.n	34198aba <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
34198ab2:	bf00      	nop
34198ab4:	e002      	b.n	34198abc <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34198ab6:	bf00      	nop
34198ab8:	e000      	b.n	34198abc <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34198aba:	bf00      	nop
  }

  return sdmmc_frequency;
34198abc:	68fb      	ldr	r3, [r7, #12]
}
34198abe:	4618      	mov	r0, r3
34198ac0:	3710      	adds	r7, #16
34198ac2:	46bd      	mov	sp, r7
34198ac4:	bd80      	pop	{r7, pc}
34198ac6:	bf00      	nop
34198ac8:	0303041c 	.word	0x0303041c
34198acc:	0303001c 	.word	0x0303001c
34198ad0:	0302041c 	.word	0x0302041c
34198ad4:	0302001c 	.word	0x0302001c
34198ad8:	0301041c 	.word	0x0301041c
34198adc:	0301001c 	.word	0x0301001c
34198ae0:	0300001c 	.word	0x0300001c
34198ae4:	0300041c 	.word	0x0300041c

34198ae8 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34198ae8:	b580      	push	{r7, lr}
34198aea:	b084      	sub	sp, #16
34198aec:	af00      	add	r7, sp, #0
34198aee:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34198af0:	2300      	movs	r3, #0
34198af2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34198af4:	6878      	ldr	r0, [r7, #4]
34198af6:	f7f5 fcd3 	bl	3418e4a0 <LL_RCC_GetSPDIFRXClockSource>
34198afa:	4603      	mov	r3, r0
34198afc:	2b06      	cmp	r3, #6
34198afe:	f200 80c2 	bhi.w	34198c86 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
34198b02:	a201      	add	r2, pc, #4	@ (adr r2, 34198b08 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34198b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34198b08:	34198b25 	.word	0x34198b25
34198b0c:	34198b3d 	.word	0x34198b3d
34198b10:	34198b47 	.word	0x34198b47
34198b14:	34198bcf 	.word	0x34198bcf
34198b18:	34198c71 	.word	0x34198c71
34198b1c:	34198c55 	.word	0x34198c55
34198b20:	34198c81 	.word	0x34198c81
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34198b24:	f7f4 fc68 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34198b28:	4603      	mov	r3, r0
34198b2a:	4618      	mov	r0, r3
34198b2c:	f7fd fde8 	bl	34196700 <RCCEx_GetHCLKFreq>
34198b30:	4603      	mov	r3, r0
34198b32:	4618      	mov	r0, r3
34198b34:	f7fd fdf5 	bl	34196722 <RCCEx_GetPCLK1Freq>
34198b38:	60f8      	str	r0, [r7, #12]
      break;
34198b3a:	e0ad      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34198b3c:	2007      	movs	r0, #7
34198b3e:	f7fe f8cb 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34198b42:	60f8      	str	r0, [r7, #12]
      break;
34198b44:	e0a8      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34198b46:	f7f6 f885 	bl	3418ec54 <LL_RCC_IC7_IsEnabled>
34198b4a:	4603      	mov	r3, r0
34198b4c:	2b00      	cmp	r3, #0
34198b4e:	f000 809c 	beq.w	34198c8a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34198b52:	f7f6 f8a1 	bl	3418ec98 <LL_RCC_IC7_GetDivider>
34198b56:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34198b58:	f7f6 f890 	bl	3418ec7c <LL_RCC_IC7_GetSource>
34198b5c:	4603      	mov	r3, r0
34198b5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198b62:	d029      	beq.n	34198bb8 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
34198b64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198b68:	d82f      	bhi.n	34198bca <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34198b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198b6e:	d01a      	beq.n	34198ba6 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34198b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198b74:	d829      	bhi.n	34198bca <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34198b76:	2b00      	cmp	r3, #0
34198b78:	d003      	beq.n	34198b82 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34198b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34198b7e:	d009      	beq.n	34198b94 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34198b80:	e023      	b.n	34198bca <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34198b82:	f7fd fca5 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198b86:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198b88:	68fa      	ldr	r2, [r7, #12]
34198b8a:	68bb      	ldr	r3, [r7, #8]
34198b8c:	fbb2 f3f3 	udiv	r3, r2, r3
34198b90:	60fb      	str	r3, [r7, #12]
            break;
34198b92:	e01b      	b.n	34198bcc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198b94:	f7fd fce2 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198b98:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198b9a:	68fa      	ldr	r2, [r7, #12]
34198b9c:	68bb      	ldr	r3, [r7, #8]
34198b9e:	fbb2 f3f3 	udiv	r3, r2, r3
34198ba2:	60fb      	str	r3, [r7, #12]
            break;
34198ba4:	e012      	b.n	34198bcc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198ba6:	f7fd fd1f 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198baa:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198bac:	68fa      	ldr	r2, [r7, #12]
34198bae:	68bb      	ldr	r3, [r7, #8]
34198bb0:	fbb2 f3f3 	udiv	r3, r2, r3
34198bb4:	60fb      	str	r3, [r7, #12]
            break;
34198bb6:	e009      	b.n	34198bcc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198bb8:	f7fd fd5c 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198bbc:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198bbe:	68fa      	ldr	r2, [r7, #12]
34198bc0:	68bb      	ldr	r3, [r7, #8]
34198bc2:	fbb2 f3f3 	udiv	r3, r2, r3
34198bc6:	60fb      	str	r3, [r7, #12]
            break;
34198bc8:	e000      	b.n	34198bcc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
34198bca:	bf00      	nop
        }
      }
      break;
34198bcc:	e05d      	b.n	34198c8a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34198bce:	f7f6 f881 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
34198bd2:	4603      	mov	r3, r0
34198bd4:	2b00      	cmp	r3, #0
34198bd6:	d05a      	beq.n	34198c8e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34198bd8:	f7f6 f89e 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
34198bdc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34198bde:	f7f6 f88d 	bl	3418ecfc <LL_RCC_IC8_GetSource>
34198be2:	4603      	mov	r3, r0
34198be4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198be8:	d029      	beq.n	34198c3e <RCCEx_GetSPDIFRXCLKFreq+0x156>
34198bea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34198bee:	d82f      	bhi.n	34198c50 <RCCEx_GetSPDIFRXCLKFreq+0x168>
34198bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198bf4:	d01a      	beq.n	34198c2c <RCCEx_GetSPDIFRXCLKFreq+0x144>
34198bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34198bfa:	d829      	bhi.n	34198c50 <RCCEx_GetSPDIFRXCLKFreq+0x168>
34198bfc:	2b00      	cmp	r3, #0
34198bfe:	d003      	beq.n	34198c08 <RCCEx_GetSPDIFRXCLKFreq+0x120>
34198c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34198c04:	d009      	beq.n	34198c1a <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34198c06:	e023      	b.n	34198c50 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34198c08:	f7fd fc62 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34198c0c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198c0e:	68fa      	ldr	r2, [r7, #12]
34198c10:	68bb      	ldr	r3, [r7, #8]
34198c12:	fbb2 f3f3 	udiv	r3, r2, r3
34198c16:	60fb      	str	r3, [r7, #12]
            break;
34198c18:	e01b      	b.n	34198c52 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34198c1a:	f7fd fc9f 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34198c1e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198c20:	68fa      	ldr	r2, [r7, #12]
34198c22:	68bb      	ldr	r3, [r7, #8]
34198c24:	fbb2 f3f3 	udiv	r3, r2, r3
34198c28:	60fb      	str	r3, [r7, #12]
            break;
34198c2a:	e012      	b.n	34198c52 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34198c2c:	f7fd fcdc 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34198c30:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198c32:	68fa      	ldr	r2, [r7, #12]
34198c34:	68bb      	ldr	r3, [r7, #8]
34198c36:	fbb2 f3f3 	udiv	r3, r2, r3
34198c3a:	60fb      	str	r3, [r7, #12]
            break;
34198c3c:	e009      	b.n	34198c52 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34198c3e:	f7fd fd19 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34198c42:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34198c44:	68fa      	ldr	r2, [r7, #12]
34198c46:	68bb      	ldr	r3, [r7, #8]
34198c48:	fbb2 f3f3 	udiv	r3, r2, r3
34198c4c:	60fb      	str	r3, [r7, #12]
            break;
34198c4e:	e000      	b.n	34198c52 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34198c50:	bf00      	nop
        }
      }
      break;
34198c52:	e01c      	b.n	34198c8e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34198c54:	f7f5 f85a 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34198c58:	4603      	mov	r3, r0
34198c5a:	2b00      	cmp	r3, #0
34198c5c:	d019      	beq.n	34198c92 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34198c5e:	f7f5 f867 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34198c62:	4603      	mov	r3, r0
34198c64:	09db      	lsrs	r3, r3, #7
34198c66:	4a0f      	ldr	r2, [pc, #60]	@ (34198ca4 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34198c68:	fa22 f303 	lsr.w	r3, r2, r3
34198c6c:	60fb      	str	r3, [r7, #12]
      }
      break;
34198c6e:	e010      	b.n	34198c92 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34198c70:	f7f5 f86c 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34198c74:	4603      	mov	r3, r0
34198c76:	2b00      	cmp	r3, #0
34198c78:	d00d      	beq.n	34198c96 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34198c7a:	4b0b      	ldr	r3, [pc, #44]	@ (34198ca8 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34198c7c:	60fb      	str	r3, [r7, #12]
      }
      break;
34198c7e:	e00a      	b.n	34198c96 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34198c80:	4b0a      	ldr	r3, [pc, #40]	@ (34198cac <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
34198c82:	60fb      	str	r3, [r7, #12]
      break;
34198c84:	e008      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
34198c86:	bf00      	nop
34198c88:	e006      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34198c8a:	bf00      	nop
34198c8c:	e004      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34198c8e:	bf00      	nop
34198c90:	e002      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34198c92:	bf00      	nop
34198c94:	e000      	b.n	34198c98 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34198c96:	bf00      	nop
  }

  return spdifrx_frequency;
34198c98:	68fb      	ldr	r3, [r7, #12]
}
34198c9a:	4618      	mov	r0, r3
34198c9c:	3710      	adds	r7, #16
34198c9e:	46bd      	mov	sp, r7
34198ca0:	bd80      	pop	{r7, pc}
34198ca2:	bf00      	nop
34198ca4:	03d09000 	.word	0x03d09000
34198ca8:	003d0900 	.word	0x003d0900
34198cac:	00bb8000 	.word	0x00bb8000

34198cb0 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
34198cb0:	b580      	push	{r7, lr}
34198cb2:	b084      	sub	sp, #16
34198cb4:	af00      	add	r7, sp, #0
34198cb6:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34198cb8:	2300      	movs	r3, #0
34198cba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34198cbc:	6878      	ldr	r0, [r7, #4]
34198cbe:	f7f5 fc01 	bl	3418e4c4 <LL_RCC_GetSPIClockSource>
34198cc2:	4603      	mov	r3, r0
34198cc4:	4aa7      	ldr	r2, [pc, #668]	@ (34198f64 <RCCEx_GetSPICLKFreq+0x2b4>)
34198cc6:	4293      	cmp	r3, r2
34198cc8:	f000 829e 	beq.w	34199208 <RCCEx_GetSPICLKFreq+0x558>
34198ccc:	4aa5      	ldr	r2, [pc, #660]	@ (34198f64 <RCCEx_GetSPICLKFreq+0x2b4>)
34198cce:	4293      	cmp	r3, r2
34198cd0:	f200 82a5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198cd4:	4aa4      	ldr	r2, [pc, #656]	@ (34198f68 <RCCEx_GetSPICLKFreq+0x2b8>)
34198cd6:	4293      	cmp	r3, r2
34198cd8:	f000 8299 	beq.w	3419920e <RCCEx_GetSPICLKFreq+0x55e>
34198cdc:	4aa2      	ldr	r2, [pc, #648]	@ (34198f68 <RCCEx_GetSPICLKFreq+0x2b8>)
34198cde:	4293      	cmp	r3, r2
34198ce0:	f200 829d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ce4:	4aa1      	ldr	r2, [pc, #644]	@ (34198f6c <RCCEx_GetSPICLKFreq+0x2bc>)
34198ce6:	4293      	cmp	r3, r2
34198ce8:	f000 8291 	beq.w	3419920e <RCCEx_GetSPICLKFreq+0x55e>
34198cec:	4a9f      	ldr	r2, [pc, #636]	@ (34198f6c <RCCEx_GetSPICLKFreq+0x2bc>)
34198cee:	4293      	cmp	r3, r2
34198cf0:	f200 8295 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198cf4:	4a9e      	ldr	r2, [pc, #632]	@ (34198f70 <RCCEx_GetSPICLKFreq+0x2c0>)
34198cf6:	4293      	cmp	r3, r2
34198cf8:	f000 8286 	beq.w	34199208 <RCCEx_GetSPICLKFreq+0x558>
34198cfc:	4a9c      	ldr	r2, [pc, #624]	@ (34198f70 <RCCEx_GetSPICLKFreq+0x2c0>)
34198cfe:	4293      	cmp	r3, r2
34198d00:	f200 828d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d04:	4a9b      	ldr	r2, [pc, #620]	@ (34198f74 <RCCEx_GetSPICLKFreq+0x2c4>)
34198d06:	4293      	cmp	r3, r2
34198d08:	f000 827e 	beq.w	34199208 <RCCEx_GetSPICLKFreq+0x558>
34198d0c:	4a99      	ldr	r2, [pc, #612]	@ (34198f74 <RCCEx_GetSPICLKFreq+0x2c4>)
34198d0e:	4293      	cmp	r3, r2
34198d10:	f200 8285 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d14:	4a98      	ldr	r2, [pc, #608]	@ (34198f78 <RCCEx_GetSPICLKFreq+0x2c8>)
34198d16:	4293      	cmp	r3, r2
34198d18:	f000 8276 	beq.w	34199208 <RCCEx_GetSPICLKFreq+0x558>
34198d1c:	4a96      	ldr	r2, [pc, #600]	@ (34198f78 <RCCEx_GetSPICLKFreq+0x2c8>)
34198d1e:	4293      	cmp	r3, r2
34198d20:	f200 827d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d24:	4a95      	ldr	r2, [pc, #596]	@ (34198f7c <RCCEx_GetSPICLKFreq+0x2cc>)
34198d26:	4293      	cmp	r3, r2
34198d28:	f000 8258 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d2c:	4a93      	ldr	r2, [pc, #588]	@ (34198f7c <RCCEx_GetSPICLKFreq+0x2cc>)
34198d2e:	4293      	cmp	r3, r2
34198d30:	f200 8275 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d34:	4a92      	ldr	r2, [pc, #584]	@ (34198f80 <RCCEx_GetSPICLKFreq+0x2d0>)
34198d36:	4293      	cmp	r3, r2
34198d38:	f000 8250 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d3c:	4a90      	ldr	r2, [pc, #576]	@ (34198f80 <RCCEx_GetSPICLKFreq+0x2d0>)
34198d3e:	4293      	cmp	r3, r2
34198d40:	f200 826d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d44:	4a8f      	ldr	r2, [pc, #572]	@ (34198f84 <RCCEx_GetSPICLKFreq+0x2d4>)
34198d46:	4293      	cmp	r3, r2
34198d48:	f000 8248 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d4c:	4a8d      	ldr	r2, [pc, #564]	@ (34198f84 <RCCEx_GetSPICLKFreq+0x2d4>)
34198d4e:	4293      	cmp	r3, r2
34198d50:	f200 8265 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d54:	4a8c      	ldr	r2, [pc, #560]	@ (34198f88 <RCCEx_GetSPICLKFreq+0x2d8>)
34198d56:	4293      	cmp	r3, r2
34198d58:	f000 8240 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d5c:	4a8a      	ldr	r2, [pc, #552]	@ (34198f88 <RCCEx_GetSPICLKFreq+0x2d8>)
34198d5e:	4293      	cmp	r3, r2
34198d60:	f200 825d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d64:	4a89      	ldr	r2, [pc, #548]	@ (34198f8c <RCCEx_GetSPICLKFreq+0x2dc>)
34198d66:	4293      	cmp	r3, r2
34198d68:	f000 8238 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d6c:	4a87      	ldr	r2, [pc, #540]	@ (34198f8c <RCCEx_GetSPICLKFreq+0x2dc>)
34198d6e:	4293      	cmp	r3, r2
34198d70:	f200 8255 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d74:	4a86      	ldr	r2, [pc, #536]	@ (34198f90 <RCCEx_GetSPICLKFreq+0x2e0>)
34198d76:	4293      	cmp	r3, r2
34198d78:	f000 8230 	beq.w	341991dc <RCCEx_GetSPICLKFreq+0x52c>
34198d7c:	4a84      	ldr	r2, [pc, #528]	@ (34198f90 <RCCEx_GetSPICLKFreq+0x2e0>)
34198d7e:	4293      	cmp	r3, r2
34198d80:	f200 824d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d84:	4a83      	ldr	r2, [pc, #524]	@ (34198f94 <RCCEx_GetSPICLKFreq+0x2e4>)
34198d86:	4293      	cmp	r3, r2
34198d88:	f000 8236 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198d8c:	4a81      	ldr	r2, [pc, #516]	@ (34198f94 <RCCEx_GetSPICLKFreq+0x2e4>)
34198d8e:	4293      	cmp	r3, r2
34198d90:	f200 8245 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198d94:	4a80      	ldr	r2, [pc, #512]	@ (34198f98 <RCCEx_GetSPICLKFreq+0x2e8>)
34198d96:	4293      	cmp	r3, r2
34198d98:	f000 822e 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198d9c:	4a7e      	ldr	r2, [pc, #504]	@ (34198f98 <RCCEx_GetSPICLKFreq+0x2e8>)
34198d9e:	4293      	cmp	r3, r2
34198da0:	f200 823d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198da4:	4a7d      	ldr	r2, [pc, #500]	@ (34198f9c <RCCEx_GetSPICLKFreq+0x2ec>)
34198da6:	4293      	cmp	r3, r2
34198da8:	f000 8226 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198dac:	4a7b      	ldr	r2, [pc, #492]	@ (34198f9c <RCCEx_GetSPICLKFreq+0x2ec>)
34198dae:	4293      	cmp	r3, r2
34198db0:	f200 8235 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198db4:	4a7a      	ldr	r2, [pc, #488]	@ (34198fa0 <RCCEx_GetSPICLKFreq+0x2f0>)
34198db6:	4293      	cmp	r3, r2
34198db8:	f000 821e 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198dbc:	4a78      	ldr	r2, [pc, #480]	@ (34198fa0 <RCCEx_GetSPICLKFreq+0x2f0>)
34198dbe:	4293      	cmp	r3, r2
34198dc0:	f200 822d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198dc4:	4a77      	ldr	r2, [pc, #476]	@ (34198fa4 <RCCEx_GetSPICLKFreq+0x2f4>)
34198dc6:	4293      	cmp	r3, r2
34198dc8:	f000 8216 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198dcc:	4a75      	ldr	r2, [pc, #468]	@ (34198fa4 <RCCEx_GetSPICLKFreq+0x2f4>)
34198dce:	4293      	cmp	r3, r2
34198dd0:	f200 8225 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198dd4:	4a74      	ldr	r2, [pc, #464]	@ (34198fa8 <RCCEx_GetSPICLKFreq+0x2f8>)
34198dd6:	4293      	cmp	r3, r2
34198dd8:	f000 820e 	beq.w	341991f8 <RCCEx_GetSPICLKFreq+0x548>
34198ddc:	4a72      	ldr	r2, [pc, #456]	@ (34198fa8 <RCCEx_GetSPICLKFreq+0x2f8>)
34198dde:	4293      	cmp	r3, r2
34198de0:	f200 821d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198de4:	4a71      	ldr	r2, [pc, #452]	@ (34198fac <RCCEx_GetSPICLKFreq+0x2fc>)
34198de6:	4293      	cmp	r3, r2
34198de8:	f000 8171 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198dec:	4a6f      	ldr	r2, [pc, #444]	@ (34198fac <RCCEx_GetSPICLKFreq+0x2fc>)
34198dee:	4293      	cmp	r3, r2
34198df0:	f200 8215 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198df4:	4a6e      	ldr	r2, [pc, #440]	@ (34198fb0 <RCCEx_GetSPICLKFreq+0x300>)
34198df6:	4293      	cmp	r3, r2
34198df8:	f000 81ad 	beq.w	34199156 <RCCEx_GetSPICLKFreq+0x4a6>
34198dfc:	4a6c      	ldr	r2, [pc, #432]	@ (34198fb0 <RCCEx_GetSPICLKFreq+0x300>)
34198dfe:	4293      	cmp	r3, r2
34198e00:	f200 820d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e04:	4a6b      	ldr	r2, [pc, #428]	@ (34198fb4 <RCCEx_GetSPICLKFreq+0x304>)
34198e06:	4293      	cmp	r3, r2
34198e08:	f000 81a5 	beq.w	34199156 <RCCEx_GetSPICLKFreq+0x4a6>
34198e0c:	4a69      	ldr	r2, [pc, #420]	@ (34198fb4 <RCCEx_GetSPICLKFreq+0x304>)
34198e0e:	4293      	cmp	r3, r2
34198e10:	f200 8205 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e14:	4a68      	ldr	r2, [pc, #416]	@ (34198fb8 <RCCEx_GetSPICLKFreq+0x308>)
34198e16:	4293      	cmp	r3, r2
34198e18:	f000 8159 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198e1c:	4a66      	ldr	r2, [pc, #408]	@ (34198fb8 <RCCEx_GetSPICLKFreq+0x308>)
34198e1e:	4293      	cmp	r3, r2
34198e20:	f200 81fd 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e24:	4a65      	ldr	r2, [pc, #404]	@ (34198fbc <RCCEx_GetSPICLKFreq+0x30c>)
34198e26:	4293      	cmp	r3, r2
34198e28:	f000 8151 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198e2c:	4a63      	ldr	r2, [pc, #396]	@ (34198fbc <RCCEx_GetSPICLKFreq+0x30c>)
34198e2e:	4293      	cmp	r3, r2
34198e30:	f200 81f5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e34:	4a62      	ldr	r2, [pc, #392]	@ (34198fc0 <RCCEx_GetSPICLKFreq+0x310>)
34198e36:	4293      	cmp	r3, r2
34198e38:	f000 8149 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198e3c:	4a60      	ldr	r2, [pc, #384]	@ (34198fc0 <RCCEx_GetSPICLKFreq+0x310>)
34198e3e:	4293      	cmp	r3, r2
34198e40:	f200 81ed 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e44:	4a5f      	ldr	r2, [pc, #380]	@ (34198fc4 <RCCEx_GetSPICLKFreq+0x314>)
34198e46:	4293      	cmp	r3, r2
34198e48:	f000 80fd 	beq.w	34199046 <RCCEx_GetSPICLKFreq+0x396>
34198e4c:	4a5d      	ldr	r2, [pc, #372]	@ (34198fc4 <RCCEx_GetSPICLKFreq+0x314>)
34198e4e:	4293      	cmp	r3, r2
34198e50:	f200 81e5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e54:	4a5c      	ldr	r2, [pc, #368]	@ (34198fc8 <RCCEx_GetSPICLKFreq+0x318>)
34198e56:	4293      	cmp	r3, r2
34198e58:	f000 8139 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198e5c:	4a5a      	ldr	r2, [pc, #360]	@ (34198fc8 <RCCEx_GetSPICLKFreq+0x318>)
34198e5e:	4293      	cmp	r3, r2
34198e60:	f200 81dd 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e64:	4a59      	ldr	r2, [pc, #356]	@ (34198fcc <RCCEx_GetSPICLKFreq+0x31c>)
34198e66:	4293      	cmp	r3, r2
34198e68:	f000 8131 	beq.w	341990ce <RCCEx_GetSPICLKFreq+0x41e>
34198e6c:	4a57      	ldr	r2, [pc, #348]	@ (34198fcc <RCCEx_GetSPICLKFreq+0x31c>)
34198e6e:	4293      	cmp	r3, r2
34198e70:	f200 81d5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e74:	4a56      	ldr	r2, [pc, #344]	@ (34198fd0 <RCCEx_GetSPICLKFreq+0x320>)
34198e76:	4293      	cmp	r3, r2
34198e78:	f000 80e5 	beq.w	34199046 <RCCEx_GetSPICLKFreq+0x396>
34198e7c:	4a54      	ldr	r2, [pc, #336]	@ (34198fd0 <RCCEx_GetSPICLKFreq+0x320>)
34198e7e:	4293      	cmp	r3, r2
34198e80:	f200 81cd 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e84:	4a53      	ldr	r2, [pc, #332]	@ (34198fd4 <RCCEx_GetSPICLKFreq+0x324>)
34198e86:	4293      	cmp	r3, r2
34198e88:	f000 80dd 	beq.w	34199046 <RCCEx_GetSPICLKFreq+0x396>
34198e8c:	4a51      	ldr	r2, [pc, #324]	@ (34198fd4 <RCCEx_GetSPICLKFreq+0x324>)
34198e8e:	4293      	cmp	r3, r2
34198e90:	f200 81c5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198e94:	4a50      	ldr	r2, [pc, #320]	@ (34198fd8 <RCCEx_GetSPICLKFreq+0x328>)
34198e96:	4293      	cmp	r3, r2
34198e98:	f000 80d5 	beq.w	34199046 <RCCEx_GetSPICLKFreq+0x396>
34198e9c:	4a4e      	ldr	r2, [pc, #312]	@ (34198fd8 <RCCEx_GetSPICLKFreq+0x328>)
34198e9e:	4293      	cmp	r3, r2
34198ea0:	f200 81bd 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ea4:	4a4d      	ldr	r2, [pc, #308]	@ (34198fdc <RCCEx_GetSPICLKFreq+0x32c>)
34198ea6:	4293      	cmp	r3, r2
34198ea8:	f000 80c8 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198eac:	4a4b      	ldr	r2, [pc, #300]	@ (34198fdc <RCCEx_GetSPICLKFreq+0x32c>)
34198eae:	4293      	cmp	r3, r2
34198eb0:	f200 81b5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198eb4:	4a4a      	ldr	r2, [pc, #296]	@ (34198fe0 <RCCEx_GetSPICLKFreq+0x330>)
34198eb6:	4293      	cmp	r3, r2
34198eb8:	f000 80c0 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198ebc:	4a48      	ldr	r2, [pc, #288]	@ (34198fe0 <RCCEx_GetSPICLKFreq+0x330>)
34198ebe:	4293      	cmp	r3, r2
34198ec0:	f200 81ad 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ec4:	4a47      	ldr	r2, [pc, #284]	@ (34198fe4 <RCCEx_GetSPICLKFreq+0x334>)
34198ec6:	4293      	cmp	r3, r2
34198ec8:	f000 80b8 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198ecc:	4a45      	ldr	r2, [pc, #276]	@ (34198fe4 <RCCEx_GetSPICLKFreq+0x334>)
34198ece:	4293      	cmp	r3, r2
34198ed0:	f200 81a5 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ed4:	4a44      	ldr	r2, [pc, #272]	@ (34198fe8 <RCCEx_GetSPICLKFreq+0x338>)
34198ed6:	4293      	cmp	r3, r2
34198ed8:	f000 80b0 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198edc:	4a42      	ldr	r2, [pc, #264]	@ (34198fe8 <RCCEx_GetSPICLKFreq+0x338>)
34198ede:	4293      	cmp	r3, r2
34198ee0:	f200 819d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ee4:	4a41      	ldr	r2, [pc, #260]	@ (34198fec <RCCEx_GetSPICLKFreq+0x33c>)
34198ee6:	4293      	cmp	r3, r2
34198ee8:	f000 80a8 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198eec:	4a3f      	ldr	r2, [pc, #252]	@ (34198fec <RCCEx_GetSPICLKFreq+0x33c>)
34198eee:	4293      	cmp	r3, r2
34198ef0:	f200 8195 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198ef4:	4a3e      	ldr	r2, [pc, #248]	@ (34198ff0 <RCCEx_GetSPICLKFreq+0x340>)
34198ef6:	4293      	cmp	r3, r2
34198ef8:	f000 80a0 	beq.w	3419903c <RCCEx_GetSPICLKFreq+0x38c>
34198efc:	4a3c      	ldr	r2, [pc, #240]	@ (34198ff0 <RCCEx_GetSPICLKFreq+0x340>)
34198efe:	4293      	cmp	r3, r2
34198f00:	f200 818d 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198f04:	4a3b      	ldr	r2, [pc, #236]	@ (34198ff4 <RCCEx_GetSPICLKFreq+0x344>)
34198f06:	4293      	cmp	r3, r2
34198f08:	f000 808c 	beq.w	34199024 <RCCEx_GetSPICLKFreq+0x374>
34198f0c:	4a39      	ldr	r2, [pc, #228]	@ (34198ff4 <RCCEx_GetSPICLKFreq+0x344>)
34198f0e:	4293      	cmp	r3, r2
34198f10:	f200 8185 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198f14:	4a38      	ldr	r2, [pc, #224]	@ (34198ff8 <RCCEx_GetSPICLKFreq+0x348>)
34198f16:	4293      	cmp	r3, r2
34198f18:	d078      	beq.n	3419900c <RCCEx_GetSPICLKFreq+0x35c>
34198f1a:	4a37      	ldr	r2, [pc, #220]	@ (34198ff8 <RCCEx_GetSPICLKFreq+0x348>)
34198f1c:	4293      	cmp	r3, r2
34198f1e:	f200 817e 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198f22:	4a36      	ldr	r2, [pc, #216]	@ (34198ffc <RCCEx_GetSPICLKFreq+0x34c>)
34198f24:	4293      	cmp	r3, r2
34198f26:	d071      	beq.n	3419900c <RCCEx_GetSPICLKFreq+0x35c>
34198f28:	4a34      	ldr	r2, [pc, #208]	@ (34198ffc <RCCEx_GetSPICLKFreq+0x34c>)
34198f2a:	4293      	cmp	r3, r2
34198f2c:	f200 8177 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198f30:	4a33      	ldr	r2, [pc, #204]	@ (34199000 <RCCEx_GetSPICLKFreq+0x350>)
34198f32:	4293      	cmp	r3, r2
34198f34:	d00a      	beq.n	34198f4c <RCCEx_GetSPICLKFreq+0x29c>
34198f36:	4a32      	ldr	r2, [pc, #200]	@ (34199000 <RCCEx_GetSPICLKFreq+0x350>)
34198f38:	4293      	cmp	r3, r2
34198f3a:	f200 8170 	bhi.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
34198f3e:	4a31      	ldr	r2, [pc, #196]	@ (34199004 <RCCEx_GetSPICLKFreq+0x354>)
34198f40:	4293      	cmp	r3, r2
34198f42:	d063      	beq.n	3419900c <RCCEx_GetSPICLKFreq+0x35c>
34198f44:	4a30      	ldr	r2, [pc, #192]	@ (34199008 <RCCEx_GetSPICLKFreq+0x358>)
34198f46:	4293      	cmp	r3, r2
34198f48:	f040 8169 	bne.w	3419921e <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34198f4c:	f7f4 fa54 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34198f50:	4603      	mov	r3, r0
34198f52:	4618      	mov	r0, r3
34198f54:	f7fd fbd4 	bl	34196700 <RCCEx_GetHCLKFreq>
34198f58:	4603      	mov	r3, r0
34198f5a:	4618      	mov	r0, r3
34198f5c:	f7fd fbe1 	bl	34196722 <RCCEx_GetPCLK1Freq>
34198f60:	60f8      	str	r0, [r7, #12]
      break;
34198f62:	e169      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
34198f64:	07061820 	.word	0x07061820
34198f68:	07061420 	.word	0x07061420
34198f6c:	07061020 	.word	0x07061020
34198f70:	07060c20 	.word	0x07060c20
34198f74:	07060820 	.word	0x07060820
34198f78:	07060420 	.word	0x07060420
34198f7c:	07051820 	.word	0x07051820
34198f80:	07051420 	.word	0x07051420
34198f84:	07051020 	.word	0x07051020
34198f88:	07050c20 	.word	0x07050c20
34198f8c:	07050820 	.word	0x07050820
34198f90:	07050420 	.word	0x07050420
34198f94:	07041820 	.word	0x07041820
34198f98:	07041420 	.word	0x07041420
34198f9c:	07041020 	.word	0x07041020
34198fa0:	07040c20 	.word	0x07040c20
34198fa4:	07040820 	.word	0x07040820
34198fa8:	07040420 	.word	0x07040420
34198fac:	07031820 	.word	0x07031820
34198fb0:	07031420 	.word	0x07031420
34198fb4:	07031020 	.word	0x07031020
34198fb8:	07030c20 	.word	0x07030c20
34198fbc:	07030820 	.word	0x07030820
34198fc0:	07030420 	.word	0x07030420
34198fc4:	07021820 	.word	0x07021820
34198fc8:	07021420 	.word	0x07021420
34198fcc:	07021020 	.word	0x07021020
34198fd0:	07020c20 	.word	0x07020c20
34198fd4:	07020820 	.word	0x07020820
34198fd8:	07020420 	.word	0x07020420
34198fdc:	07011820 	.word	0x07011820
34198fe0:	07011420 	.word	0x07011420
34198fe4:	07011020 	.word	0x07011020
34198fe8:	07010c20 	.word	0x07010c20
34198fec:	07010820 	.word	0x07010820
34198ff0:	07010420 	.word	0x07010420
34198ff4:	07001820 	.word	0x07001820
34198ff8:	07001420 	.word	0x07001420
34198ffc:	07001020 	.word	0x07001020
34199000:	07000c20 	.word	0x07000c20
34199004:	07000420 	.word	0x07000420
34199008:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3419900c:	f7f4 f9f4 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34199010:	4603      	mov	r3, r0
34199012:	4618      	mov	r0, r3
34199014:	f7fd fb74 	bl	34196700 <RCCEx_GetHCLKFreq>
34199018:	4603      	mov	r3, r0
3419901a:	4618      	mov	r0, r3
3419901c:	f7fd fb91 	bl	34196742 <RCCEx_GetPCLK2Freq>
34199020:	60f8      	str	r0, [r7, #12]
      break;
34199022:	e109      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34199024:	f7f4 f9e8 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34199028:	4603      	mov	r3, r0
3419902a:	4618      	mov	r0, r3
3419902c:	f7fd fb68 	bl	34196700 <RCCEx_GetHCLKFreq>
34199030:	4603      	mov	r3, r0
34199032:	4618      	mov	r0, r3
34199034:	f7fd fb96 	bl	34196764 <RCCEx_GetPCLK4Freq>
34199038:	60f8      	str	r0, [r7, #12]
      break;
3419903a:	e0fd      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419903c:	2007      	movs	r0, #7
3419903e:	f7fd fe4b 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34199042:	60f8      	str	r0, [r7, #12]
      break;
34199044:	e0f8      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34199046:	f7f5 fe45 	bl	3418ecd4 <LL_RCC_IC8_IsEnabled>
3419904a:	4603      	mov	r3, r0
3419904c:	2b00      	cmp	r3, #0
3419904e:	f000 80e8 	beq.w	34199222 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34199052:	f7f5 fe61 	bl	3418ed18 <LL_RCC_IC8_GetDivider>
34199056:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34199058:	f7f5 fe50 	bl	3418ecfc <LL_RCC_IC8_GetSource>
3419905c:	4603      	mov	r3, r0
3419905e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199062:	d029      	beq.n	341990b8 <RCCEx_GetSPICLKFreq+0x408>
34199064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199068:	d82f      	bhi.n	341990ca <RCCEx_GetSPICLKFreq+0x41a>
3419906a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419906e:	d01a      	beq.n	341990a6 <RCCEx_GetSPICLKFreq+0x3f6>
34199070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199074:	d829      	bhi.n	341990ca <RCCEx_GetSPICLKFreq+0x41a>
34199076:	2b00      	cmp	r3, #0
34199078:	d003      	beq.n	34199082 <RCCEx_GetSPICLKFreq+0x3d2>
3419907a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419907e:	d009      	beq.n	34199094 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34199080:	e023      	b.n	341990ca <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199082:	f7fd fa25 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199086:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199088:	68fa      	ldr	r2, [r7, #12]
3419908a:	68bb      	ldr	r3, [r7, #8]
3419908c:	fbb2 f3f3 	udiv	r3, r2, r3
34199090:	60fb      	str	r3, [r7, #12]
            break;
34199092:	e01b      	b.n	341990cc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199094:	f7fd fa62 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199098:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3419909a:	68fa      	ldr	r2, [r7, #12]
3419909c:	68bb      	ldr	r3, [r7, #8]
3419909e:	fbb2 f3f3 	udiv	r3, r2, r3
341990a2:	60fb      	str	r3, [r7, #12]
            break;
341990a4:	e012      	b.n	341990cc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341990a6:	f7fd fa9f 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341990aa:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
341990ac:	68fa      	ldr	r2, [r7, #12]
341990ae:	68bb      	ldr	r3, [r7, #8]
341990b0:	fbb2 f3f3 	udiv	r3, r2, r3
341990b4:	60fb      	str	r3, [r7, #12]
            break;
341990b6:	e009      	b.n	341990cc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341990b8:	f7fd fadc 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341990bc:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
341990be:	68fa      	ldr	r2, [r7, #12]
341990c0:	68bb      	ldr	r3, [r7, #8]
341990c2:	fbb2 f3f3 	udiv	r3, r2, r3
341990c6:	60fb      	str	r3, [r7, #12]
            break;
341990c8:	e000      	b.n	341990cc <RCCEx_GetSPICLKFreq+0x41c>
            break;
341990ca:	bf00      	nop
        }
      }
      break;
341990cc:	e0a9      	b.n	34199222 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
341990ce:	f7f5 fe41 	bl	3418ed54 <LL_RCC_IC9_IsEnabled>
341990d2:	4603      	mov	r3, r0
341990d4:	2b00      	cmp	r3, #0
341990d6:	f000 80a6 	beq.w	34199226 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
341990da:	f7f5 fe5d 	bl	3418ed98 <LL_RCC_IC9_GetDivider>
341990de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
341990e0:	f7f5 fe4c 	bl	3418ed7c <LL_RCC_IC9_GetSource>
341990e4:	4603      	mov	r3, r0
341990e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341990ea:	d029      	beq.n	34199140 <RCCEx_GetSPICLKFreq+0x490>
341990ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341990f0:	d82f      	bhi.n	34199152 <RCCEx_GetSPICLKFreq+0x4a2>
341990f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341990f6:	d01a      	beq.n	3419912e <RCCEx_GetSPICLKFreq+0x47e>
341990f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341990fc:	d829      	bhi.n	34199152 <RCCEx_GetSPICLKFreq+0x4a2>
341990fe:	2b00      	cmp	r3, #0
34199100:	d003      	beq.n	3419910a <RCCEx_GetSPICLKFreq+0x45a>
34199102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199106:	d009      	beq.n	3419911c <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34199108:	e023      	b.n	34199152 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3419910a:	f7fd f9e1 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3419910e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199110:	68fa      	ldr	r2, [r7, #12]
34199112:	68bb      	ldr	r3, [r7, #8]
34199114:	fbb2 f3f3 	udiv	r3, r2, r3
34199118:	60fb      	str	r3, [r7, #12]
            break;
3419911a:	e01b      	b.n	34199154 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3419911c:	f7fd fa1e 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199120:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199122:	68fa      	ldr	r2, [r7, #12]
34199124:	68bb      	ldr	r3, [r7, #8]
34199126:	fbb2 f3f3 	udiv	r3, r2, r3
3419912a:	60fb      	str	r3, [r7, #12]
            break;
3419912c:	e012      	b.n	34199154 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3419912e:	f7fd fa5b 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199132:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199134:	68fa      	ldr	r2, [r7, #12]
34199136:	68bb      	ldr	r3, [r7, #8]
34199138:	fbb2 f3f3 	udiv	r3, r2, r3
3419913c:	60fb      	str	r3, [r7, #12]
            break;
3419913e:	e009      	b.n	34199154 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34199140:	f7fd fa98 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34199144:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199146:	68fa      	ldr	r2, [r7, #12]
34199148:	68bb      	ldr	r3, [r7, #8]
3419914a:	fbb2 f3f3 	udiv	r3, r2, r3
3419914e:	60fb      	str	r3, [r7, #12]
            break;
34199150:	e000      	b.n	34199154 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
34199152:	bf00      	nop
        }
      }
      break;
34199154:	e067      	b.n	34199226 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34199156:	f7f5 fefd 	bl	3418ef54 <LL_RCC_IC14_IsEnabled>
3419915a:	4603      	mov	r3, r0
3419915c:	2b00      	cmp	r3, #0
3419915e:	d064      	beq.n	3419922a <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34199160:	f7f5 ff1a 	bl	3418ef98 <LL_RCC_IC14_GetDivider>
34199164:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34199166:	f7f5 ff09 	bl	3418ef7c <LL_RCC_IC14_GetSource>
3419916a:	4603      	mov	r3, r0
3419916c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199170:	d029      	beq.n	341991c6 <RCCEx_GetSPICLKFreq+0x516>
34199172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199176:	d82f      	bhi.n	341991d8 <RCCEx_GetSPICLKFreq+0x528>
34199178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419917c:	d01a      	beq.n	341991b4 <RCCEx_GetSPICLKFreq+0x504>
3419917e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199182:	d829      	bhi.n	341991d8 <RCCEx_GetSPICLKFreq+0x528>
34199184:	2b00      	cmp	r3, #0
34199186:	d003      	beq.n	34199190 <RCCEx_GetSPICLKFreq+0x4e0>
34199188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419918c:	d009      	beq.n	341991a2 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3419918e:	e023      	b.n	341991d8 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199190:	f7fd f99e 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199194:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34199196:	68fa      	ldr	r2, [r7, #12]
34199198:	68bb      	ldr	r3, [r7, #8]
3419919a:	fbb2 f3f3 	udiv	r3, r2, r3
3419919e:	60fb      	str	r3, [r7, #12]
            break;
341991a0:	e01b      	b.n	341991da <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341991a2:	f7fd f9db 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341991a6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
341991a8:	68fa      	ldr	r2, [r7, #12]
341991aa:	68bb      	ldr	r3, [r7, #8]
341991ac:	fbb2 f3f3 	udiv	r3, r2, r3
341991b0:	60fb      	str	r3, [r7, #12]
            break;
341991b2:	e012      	b.n	341991da <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341991b4:	f7fd fa18 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341991b8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
341991ba:	68fa      	ldr	r2, [r7, #12]
341991bc:	68bb      	ldr	r3, [r7, #8]
341991be:	fbb2 f3f3 	udiv	r3, r2, r3
341991c2:	60fb      	str	r3, [r7, #12]
            break;
341991c4:	e009      	b.n	341991da <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341991c6:	f7fd fa55 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341991ca:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
341991cc:	68fa      	ldr	r2, [r7, #12]
341991ce:	68bb      	ldr	r3, [r7, #8]
341991d0:	fbb2 f3f3 	udiv	r3, r2, r3
341991d4:	60fb      	str	r3, [r7, #12]
            break;
341991d6:	e000      	b.n	341991da <RCCEx_GetSPICLKFreq+0x52a>
            break;
341991d8:	bf00      	nop
        }
      }
      break;
341991da:	e026      	b.n	3419922a <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
341991dc:	f7f4 fd96 	bl	3418dd0c <LL_RCC_HSI_IsReady>
341991e0:	4603      	mov	r3, r0
341991e2:	2b00      	cmp	r3, #0
341991e4:	d023      	beq.n	3419922e <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341991e6:	f7f4 fda3 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
341991ea:	4603      	mov	r3, r0
341991ec:	09db      	lsrs	r3, r3, #7
341991ee:	4a15      	ldr	r2, [pc, #84]	@ (34199244 <RCCEx_GetSPICLKFreq+0x594>)
341991f0:	fa22 f303 	lsr.w	r3, r2, r3
341991f4:	60fb      	str	r3, [r7, #12]
      }
      break;
341991f6:	e01a      	b.n	3419922e <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
341991f8:	f7f4 fda8 	bl	3418dd4c <LL_RCC_MSI_IsReady>
341991fc:	4603      	mov	r3, r0
341991fe:	2b00      	cmp	r3, #0
34199200:	d017      	beq.n	34199232 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
34199202:	4b11      	ldr	r3, [pc, #68]	@ (34199248 <RCCEx_GetSPICLKFreq+0x598>)
34199204:	60fb      	str	r3, [r7, #12]
      }
      break;
34199206:	e014      	b.n	34199232 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
34199208:	4b10      	ldr	r3, [pc, #64]	@ (3419924c <RCCEx_GetSPICLKFreq+0x59c>)
3419920a:	60fb      	str	r3, [r7, #12]
      break;
3419920c:	e014      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3419920e:	f7f4 fd6b 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34199212:	4603      	mov	r3, r0
34199214:	2b00      	cmp	r3, #0
34199216:	d00e      	beq.n	34199236 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
34199218:	4b0d      	ldr	r3, [pc, #52]	@ (34199250 <RCCEx_GetSPICLKFreq+0x5a0>)
3419921a:	60fb      	str	r3, [r7, #12]
      }
      break;
3419921c:	e00b      	b.n	34199236 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3419921e:	bf00      	nop
34199220:	e00a      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
34199222:	bf00      	nop
34199224:	e008      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
34199226:	bf00      	nop
34199228:	e006      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
3419922a:	bf00      	nop
3419922c:	e004      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
3419922e:	bf00      	nop
34199230:	e002      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
34199232:	bf00      	nop
34199234:	e000      	b.n	34199238 <RCCEx_GetSPICLKFreq+0x588>
      break;
34199236:	bf00      	nop
  }

  return spi_frequency;
34199238:	68fb      	ldr	r3, [r7, #12]
}
3419923a:	4618      	mov	r0, r3
3419923c:	3710      	adds	r7, #16
3419923e:	46bd      	mov	sp, r7
34199240:	bd80      	pop	{r7, pc}
34199242:	bf00      	nop
34199244:	03d09000 	.word	0x03d09000
34199248:	003d0900 	.word	0x003d0900
3419924c:	00bb8000 	.word	0x00bb8000
34199250:	02dc6c00 	.word	0x02dc6c00

34199254 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
34199254:	b580      	push	{r7, lr}
34199256:	b084      	sub	sp, #16
34199258:	af00      	add	r7, sp, #0
3419925a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3419925c:	2300      	movs	r3, #0
3419925e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34199260:	6878      	ldr	r0, [r7, #4]
34199262:	f7f5 f947 	bl	3418e4f4 <LL_RCC_GetUARTClockSource>
34199266:	4603      	mov	r3, r0
34199268:	4aa2      	ldr	r2, [pc, #648]	@ (341994f4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3419926a:	4293      	cmp	r3, r2
3419926c:	f000 81e8 	beq.w	34199640 <RCCEx_GetUARTCLKFreq+0x3ec>
34199270:	4aa0      	ldr	r2, [pc, #640]	@ (341994f4 <RCCEx_GetUARTCLKFreq+0x2a0>)
34199272:	4293      	cmp	r3, r2
34199274:	f200 8203 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199278:	4a9f      	ldr	r2, [pc, #636]	@ (341994f8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3419927a:	4293      	cmp	r3, r2
3419927c:	f000 81e0 	beq.w	34199640 <RCCEx_GetUARTCLKFreq+0x3ec>
34199280:	4a9d      	ldr	r2, [pc, #628]	@ (341994f8 <RCCEx_GetUARTCLKFreq+0x2a4>)
34199282:	4293      	cmp	r3, r2
34199284:	f200 81fb 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199288:	4a9c      	ldr	r2, [pc, #624]	@ (341994fc <RCCEx_GetUARTCLKFreq+0x2a8>)
3419928a:	4293      	cmp	r3, r2
3419928c:	f000 81d8 	beq.w	34199640 <RCCEx_GetUARTCLKFreq+0x3ec>
34199290:	4a9a      	ldr	r2, [pc, #616]	@ (341994fc <RCCEx_GetUARTCLKFreq+0x2a8>)
34199292:	4293      	cmp	r3, r2
34199294:	f200 81f3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199298:	4a99      	ldr	r2, [pc, #612]	@ (34199500 <RCCEx_GetUARTCLKFreq+0x2ac>)
3419929a:	4293      	cmp	r3, r2
3419929c:	f000 81d0 	beq.w	34199640 <RCCEx_GetUARTCLKFreq+0x3ec>
341992a0:	4a97      	ldr	r2, [pc, #604]	@ (34199500 <RCCEx_GetUARTCLKFreq+0x2ac>)
341992a2:	4293      	cmp	r3, r2
341992a4:	f200 81eb 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992a8:	4a96      	ldr	r2, [pc, #600]	@ (34199504 <RCCEx_GetUARTCLKFreq+0x2b0>)
341992aa:	4293      	cmp	r3, r2
341992ac:	f000 81c8 	beq.w	34199640 <RCCEx_GetUARTCLKFreq+0x3ec>
341992b0:	4a94      	ldr	r2, [pc, #592]	@ (34199504 <RCCEx_GetUARTCLKFreq+0x2b0>)
341992b2:	4293      	cmp	r3, r2
341992b4:	f200 81e3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992b8:	4a93      	ldr	r2, [pc, #588]	@ (34199508 <RCCEx_GetUARTCLKFreq+0x2b4>)
341992ba:	4293      	cmp	r3, r2
341992bc:	f000 81ce 	beq.w	3419965c <RCCEx_GetUARTCLKFreq+0x408>
341992c0:	4a91      	ldr	r2, [pc, #580]	@ (34199508 <RCCEx_GetUARTCLKFreq+0x2b4>)
341992c2:	4293      	cmp	r3, r2
341992c4:	f200 81db 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992c8:	4a90      	ldr	r2, [pc, #576]	@ (3419950c <RCCEx_GetUARTCLKFreq+0x2b8>)
341992ca:	4293      	cmp	r3, r2
341992cc:	f000 81c6 	beq.w	3419965c <RCCEx_GetUARTCLKFreq+0x408>
341992d0:	4a8e      	ldr	r2, [pc, #568]	@ (3419950c <RCCEx_GetUARTCLKFreq+0x2b8>)
341992d2:	4293      	cmp	r3, r2
341992d4:	f200 81d3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992d8:	4a8d      	ldr	r2, [pc, #564]	@ (34199510 <RCCEx_GetUARTCLKFreq+0x2bc>)
341992da:	4293      	cmp	r3, r2
341992dc:	f000 81be 	beq.w	3419965c <RCCEx_GetUARTCLKFreq+0x408>
341992e0:	4a8b      	ldr	r2, [pc, #556]	@ (34199510 <RCCEx_GetUARTCLKFreq+0x2bc>)
341992e2:	4293      	cmp	r3, r2
341992e4:	f200 81cb 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992e8:	4a8a      	ldr	r2, [pc, #552]	@ (34199514 <RCCEx_GetUARTCLKFreq+0x2c0>)
341992ea:	4293      	cmp	r3, r2
341992ec:	f000 81b6 	beq.w	3419965c <RCCEx_GetUARTCLKFreq+0x408>
341992f0:	4a88      	ldr	r2, [pc, #544]	@ (34199514 <RCCEx_GetUARTCLKFreq+0x2c0>)
341992f2:	4293      	cmp	r3, r2
341992f4:	f200 81c3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341992f8:	4a87      	ldr	r2, [pc, #540]	@ (34199518 <RCCEx_GetUARTCLKFreq+0x2c4>)
341992fa:	4293      	cmp	r3, r2
341992fc:	f000 81ae 	beq.w	3419965c <RCCEx_GetUARTCLKFreq+0x408>
34199300:	4a85      	ldr	r2, [pc, #532]	@ (34199518 <RCCEx_GetUARTCLKFreq+0x2c4>)
34199302:	4293      	cmp	r3, r2
34199304:	f200 81bb 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199308:	4a84      	ldr	r2, [pc, #528]	@ (3419951c <RCCEx_GetUARTCLKFreq+0x2c8>)
3419930a:	4293      	cmp	r3, r2
3419930c:	f000 81ae 	beq.w	3419966c <RCCEx_GetUARTCLKFreq+0x418>
34199310:	4a82      	ldr	r2, [pc, #520]	@ (3419951c <RCCEx_GetUARTCLKFreq+0x2c8>)
34199312:	4293      	cmp	r3, r2
34199314:	f200 81b3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199318:	4a81      	ldr	r2, [pc, #516]	@ (34199520 <RCCEx_GetUARTCLKFreq+0x2cc>)
3419931a:	4293      	cmp	r3, r2
3419931c:	f000 81a6 	beq.w	3419966c <RCCEx_GetUARTCLKFreq+0x418>
34199320:	4a7f      	ldr	r2, [pc, #508]	@ (34199520 <RCCEx_GetUARTCLKFreq+0x2cc>)
34199322:	4293      	cmp	r3, r2
34199324:	f200 81ab 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199328:	4a7e      	ldr	r2, [pc, #504]	@ (34199524 <RCCEx_GetUARTCLKFreq+0x2d0>)
3419932a:	4293      	cmp	r3, r2
3419932c:	f000 819e 	beq.w	3419966c <RCCEx_GetUARTCLKFreq+0x418>
34199330:	4a7c      	ldr	r2, [pc, #496]	@ (34199524 <RCCEx_GetUARTCLKFreq+0x2d0>)
34199332:	4293      	cmp	r3, r2
34199334:	f200 81a3 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199338:	4a7b      	ldr	r2, [pc, #492]	@ (34199528 <RCCEx_GetUARTCLKFreq+0x2d4>)
3419933a:	4293      	cmp	r3, r2
3419933c:	f000 8196 	beq.w	3419966c <RCCEx_GetUARTCLKFreq+0x418>
34199340:	4a79      	ldr	r2, [pc, #484]	@ (34199528 <RCCEx_GetUARTCLKFreq+0x2d4>)
34199342:	4293      	cmp	r3, r2
34199344:	f200 819b 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199348:	4a78      	ldr	r2, [pc, #480]	@ (3419952c <RCCEx_GetUARTCLKFreq+0x2d8>)
3419934a:	4293      	cmp	r3, r2
3419934c:	f000 818e 	beq.w	3419966c <RCCEx_GetUARTCLKFreq+0x418>
34199350:	4a76      	ldr	r2, [pc, #472]	@ (3419952c <RCCEx_GetUARTCLKFreq+0x2d8>)
34199352:	4293      	cmp	r3, r2
34199354:	f200 8193 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199358:	4a75      	ldr	r2, [pc, #468]	@ (34199530 <RCCEx_GetUARTCLKFreq+0x2dc>)
3419935a:	4293      	cmp	r3, r2
3419935c:	f000 812d 	beq.w	341995ba <RCCEx_GetUARTCLKFreq+0x366>
34199360:	4a73      	ldr	r2, [pc, #460]	@ (34199530 <RCCEx_GetUARTCLKFreq+0x2dc>)
34199362:	4293      	cmp	r3, r2
34199364:	f200 818b 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199368:	4a72      	ldr	r2, [pc, #456]	@ (34199534 <RCCEx_GetUARTCLKFreq+0x2e0>)
3419936a:	4293      	cmp	r3, r2
3419936c:	f000 8125 	beq.w	341995ba <RCCEx_GetUARTCLKFreq+0x366>
34199370:	4a70      	ldr	r2, [pc, #448]	@ (34199534 <RCCEx_GetUARTCLKFreq+0x2e0>)
34199372:	4293      	cmp	r3, r2
34199374:	f200 8183 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199378:	4a6f      	ldr	r2, [pc, #444]	@ (34199538 <RCCEx_GetUARTCLKFreq+0x2e4>)
3419937a:	4293      	cmp	r3, r2
3419937c:	f000 811d 	beq.w	341995ba <RCCEx_GetUARTCLKFreq+0x366>
34199380:	4a6d      	ldr	r2, [pc, #436]	@ (34199538 <RCCEx_GetUARTCLKFreq+0x2e4>)
34199382:	4293      	cmp	r3, r2
34199384:	f200 817b 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199388:	4a6c      	ldr	r2, [pc, #432]	@ (3419953c <RCCEx_GetUARTCLKFreq+0x2e8>)
3419938a:	4293      	cmp	r3, r2
3419938c:	f000 8115 	beq.w	341995ba <RCCEx_GetUARTCLKFreq+0x366>
34199390:	4a6a      	ldr	r2, [pc, #424]	@ (3419953c <RCCEx_GetUARTCLKFreq+0x2e8>)
34199392:	4293      	cmp	r3, r2
34199394:	f200 8173 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199398:	4a69      	ldr	r2, [pc, #420]	@ (34199540 <RCCEx_GetUARTCLKFreq+0x2ec>)
3419939a:	4293      	cmp	r3, r2
3419939c:	f000 810d 	beq.w	341995ba <RCCEx_GetUARTCLKFreq+0x366>
341993a0:	4a67      	ldr	r2, [pc, #412]	@ (34199540 <RCCEx_GetUARTCLKFreq+0x2ec>)
341993a2:	4293      	cmp	r3, r2
341993a4:	f200 816b 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993a8:	4a66      	ldr	r2, [pc, #408]	@ (34199544 <RCCEx_GetUARTCLKFreq+0x2f0>)
341993aa:	4293      	cmp	r3, r2
341993ac:	d07b      	beq.n	341994a6 <RCCEx_GetUARTCLKFreq+0x252>
341993ae:	4a65      	ldr	r2, [pc, #404]	@ (34199544 <RCCEx_GetUARTCLKFreq+0x2f0>)
341993b0:	4293      	cmp	r3, r2
341993b2:	f200 8164 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993b6:	4a64      	ldr	r2, [pc, #400]	@ (34199548 <RCCEx_GetUARTCLKFreq+0x2f4>)
341993b8:	4293      	cmp	r3, r2
341993ba:	d074      	beq.n	341994a6 <RCCEx_GetUARTCLKFreq+0x252>
341993bc:	4a62      	ldr	r2, [pc, #392]	@ (34199548 <RCCEx_GetUARTCLKFreq+0x2f4>)
341993be:	4293      	cmp	r3, r2
341993c0:	f200 815d 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993c4:	4a61      	ldr	r2, [pc, #388]	@ (3419954c <RCCEx_GetUARTCLKFreq+0x2f8>)
341993c6:	4293      	cmp	r3, r2
341993c8:	d06d      	beq.n	341994a6 <RCCEx_GetUARTCLKFreq+0x252>
341993ca:	4a60      	ldr	r2, [pc, #384]	@ (3419954c <RCCEx_GetUARTCLKFreq+0x2f8>)
341993cc:	4293      	cmp	r3, r2
341993ce:	f200 8156 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993d2:	4a5f      	ldr	r2, [pc, #380]	@ (34199550 <RCCEx_GetUARTCLKFreq+0x2fc>)
341993d4:	4293      	cmp	r3, r2
341993d6:	d066      	beq.n	341994a6 <RCCEx_GetUARTCLKFreq+0x252>
341993d8:	4a5d      	ldr	r2, [pc, #372]	@ (34199550 <RCCEx_GetUARTCLKFreq+0x2fc>)
341993da:	4293      	cmp	r3, r2
341993dc:	f200 814f 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993e0:	4a5c      	ldr	r2, [pc, #368]	@ (34199554 <RCCEx_GetUARTCLKFreq+0x300>)
341993e2:	4293      	cmp	r3, r2
341993e4:	d05f      	beq.n	341994a6 <RCCEx_GetUARTCLKFreq+0x252>
341993e6:	4a5b      	ldr	r2, [pc, #364]	@ (34199554 <RCCEx_GetUARTCLKFreq+0x300>)
341993e8:	4293      	cmp	r3, r2
341993ea:	f200 8148 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993ee:	4a5a      	ldr	r2, [pc, #360]	@ (34199558 <RCCEx_GetUARTCLKFreq+0x304>)
341993f0:	4293      	cmp	r3, r2
341993f2:	d053      	beq.n	3419949c <RCCEx_GetUARTCLKFreq+0x248>
341993f4:	4a58      	ldr	r2, [pc, #352]	@ (34199558 <RCCEx_GetUARTCLKFreq+0x304>)
341993f6:	4293      	cmp	r3, r2
341993f8:	f200 8141 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
341993fc:	4a57      	ldr	r2, [pc, #348]	@ (3419955c <RCCEx_GetUARTCLKFreq+0x308>)
341993fe:	4293      	cmp	r3, r2
34199400:	d04c      	beq.n	3419949c <RCCEx_GetUARTCLKFreq+0x248>
34199402:	4a56      	ldr	r2, [pc, #344]	@ (3419955c <RCCEx_GetUARTCLKFreq+0x308>)
34199404:	4293      	cmp	r3, r2
34199406:	f200 813a 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
3419940a:	4a55      	ldr	r2, [pc, #340]	@ (34199560 <RCCEx_GetUARTCLKFreq+0x30c>)
3419940c:	4293      	cmp	r3, r2
3419940e:	d045      	beq.n	3419949c <RCCEx_GetUARTCLKFreq+0x248>
34199410:	4a53      	ldr	r2, [pc, #332]	@ (34199560 <RCCEx_GetUARTCLKFreq+0x30c>)
34199412:	4293      	cmp	r3, r2
34199414:	f200 8133 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199418:	4a52      	ldr	r2, [pc, #328]	@ (34199564 <RCCEx_GetUARTCLKFreq+0x310>)
3419941a:	4293      	cmp	r3, r2
3419941c:	d03e      	beq.n	3419949c <RCCEx_GetUARTCLKFreq+0x248>
3419941e:	4a51      	ldr	r2, [pc, #324]	@ (34199564 <RCCEx_GetUARTCLKFreq+0x310>)
34199420:	4293      	cmp	r3, r2
34199422:	f200 812c 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199426:	4a50      	ldr	r2, [pc, #320]	@ (34199568 <RCCEx_GetUARTCLKFreq+0x314>)
34199428:	4293      	cmp	r3, r2
3419942a:	d037      	beq.n	3419949c <RCCEx_GetUARTCLKFreq+0x248>
3419942c:	4a4e      	ldr	r2, [pc, #312]	@ (34199568 <RCCEx_GetUARTCLKFreq+0x314>)
3419942e:	4293      	cmp	r3, r2
34199430:	f200 8125 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199434:	4a4d      	ldr	r2, [pc, #308]	@ (3419956c <RCCEx_GetUARTCLKFreq+0x318>)
34199436:	4293      	cmp	r3, r2
34199438:	d018      	beq.n	3419946c <RCCEx_GetUARTCLKFreq+0x218>
3419943a:	4a4c      	ldr	r2, [pc, #304]	@ (3419956c <RCCEx_GetUARTCLKFreq+0x318>)
3419943c:	4293      	cmp	r3, r2
3419943e:	f200 811e 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199442:	4a4b      	ldr	r2, [pc, #300]	@ (34199570 <RCCEx_GetUARTCLKFreq+0x31c>)
34199444:	4293      	cmp	r3, r2
34199446:	d011      	beq.n	3419946c <RCCEx_GetUARTCLKFreq+0x218>
34199448:	4a49      	ldr	r2, [pc, #292]	@ (34199570 <RCCEx_GetUARTCLKFreq+0x31c>)
3419944a:	4293      	cmp	r3, r2
3419944c:	f200 8117 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
34199450:	4a48      	ldr	r2, [pc, #288]	@ (34199574 <RCCEx_GetUARTCLKFreq+0x320>)
34199452:	4293      	cmp	r3, r2
34199454:	d00a      	beq.n	3419946c <RCCEx_GetUARTCLKFreq+0x218>
34199456:	4a47      	ldr	r2, [pc, #284]	@ (34199574 <RCCEx_GetUARTCLKFreq+0x320>)
34199458:	4293      	cmp	r3, r2
3419945a:	f200 8110 	bhi.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
3419945e:	4a46      	ldr	r2, [pc, #280]	@ (34199578 <RCCEx_GetUARTCLKFreq+0x324>)
34199460:	4293      	cmp	r3, r2
34199462:	d00f      	beq.n	34199484 <RCCEx_GetUARTCLKFreq+0x230>
34199464:	4a45      	ldr	r2, [pc, #276]	@ (3419957c <RCCEx_GetUARTCLKFreq+0x328>)
34199466:	4293      	cmp	r3, r2
34199468:	f040 8109 	bne.w	3419967e <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3419946c:	f7f3 ffc4 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34199470:	4603      	mov	r3, r0
34199472:	4618      	mov	r0, r3
34199474:	f7fd f944 	bl	34196700 <RCCEx_GetHCLKFreq>
34199478:	4603      	mov	r3, r0
3419947a:	4618      	mov	r0, r3
3419947c:	f7fd f951 	bl	34196722 <RCCEx_GetPCLK1Freq>
34199480:	60f8      	str	r0, [r7, #12]
      break;
34199482:	e107      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34199484:	f7f3 ffb8 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34199488:	4603      	mov	r3, r0
3419948a:	4618      	mov	r0, r3
3419948c:	f7fd f938 	bl	34196700 <RCCEx_GetHCLKFreq>
34199490:	4603      	mov	r3, r0
34199492:	4618      	mov	r0, r3
34199494:	f7fd f955 	bl	34196742 <RCCEx_GetPCLK2Freq>
34199498:	60f8      	str	r0, [r7, #12]
      break;
3419949a:	e0fb      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3419949c:	2007      	movs	r0, #7
3419949e:	f7fd fc1b 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341994a2:	60f8      	str	r0, [r7, #12]
      break;
341994a4:	e0f6      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
341994a6:	f7f5 fc55 	bl	3418ed54 <LL_RCC_IC9_IsEnabled>
341994aa:	4603      	mov	r3, r0
341994ac:	2b00      	cmp	r3, #0
341994ae:	f000 80e8 	beq.w	34199682 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
341994b2:	f7f5 fc71 	bl	3418ed98 <LL_RCC_IC9_GetDivider>
341994b6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
341994b8:	f7f5 fc60 	bl	3418ed7c <LL_RCC_IC9_GetSource>
341994bc:	4603      	mov	r3, r0
341994be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341994c2:	d06f      	beq.n	341995a4 <RCCEx_GetUARTCLKFreq+0x350>
341994c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341994c8:	d875      	bhi.n	341995b6 <RCCEx_GetUARTCLKFreq+0x362>
341994ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341994ce:	d060      	beq.n	34199592 <RCCEx_GetUARTCLKFreq+0x33e>
341994d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341994d4:	d86f      	bhi.n	341995b6 <RCCEx_GetUARTCLKFreq+0x362>
341994d6:	2b00      	cmp	r3, #0
341994d8:	d003      	beq.n	341994e2 <RCCEx_GetUARTCLKFreq+0x28e>
341994da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341994de:	d04f      	beq.n	34199580 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341994e0:	e069      	b.n	341995b6 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341994e2:	f7fc fff5 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341994e6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
341994e8:	68fa      	ldr	r2, [r7, #12]
341994ea:	68bb      	ldr	r3, [r7, #8]
341994ec:	fbb2 f3f3 	udiv	r3, r2, r3
341994f0:	60fb      	str	r3, [r7, #12]
            break;
341994f2:	e061      	b.n	341995b8 <RCCEx_GetUARTCLKFreq+0x364>
341994f4:	07061c30 	.word	0x07061c30
341994f8:	07061830 	.word	0x07061830
341994fc:	07061030 	.word	0x07061030
34199500:	07060c30 	.word	0x07060c30
34199504:	07060034 	.word	0x07060034
34199508:	07051c30 	.word	0x07051c30
3419950c:	07051830 	.word	0x07051830
34199510:	07051030 	.word	0x07051030
34199514:	07050c30 	.word	0x07050c30
34199518:	07050034 	.word	0x07050034
3419951c:	07041c30 	.word	0x07041c30
34199520:	07041830 	.word	0x07041830
34199524:	07041030 	.word	0x07041030
34199528:	07040c30 	.word	0x07040c30
3419952c:	07040034 	.word	0x07040034
34199530:	07031c30 	.word	0x07031c30
34199534:	07031830 	.word	0x07031830
34199538:	07031030 	.word	0x07031030
3419953c:	07030c30 	.word	0x07030c30
34199540:	07030034 	.word	0x07030034
34199544:	07021c30 	.word	0x07021c30
34199548:	07021830 	.word	0x07021830
3419954c:	07021030 	.word	0x07021030
34199550:	07020c30 	.word	0x07020c30
34199554:	07020034 	.word	0x07020034
34199558:	07011c30 	.word	0x07011c30
3419955c:	07011830 	.word	0x07011830
34199560:	07011030 	.word	0x07011030
34199564:	07010c30 	.word	0x07010c30
34199568:	07010034 	.word	0x07010034
3419956c:	07001c30 	.word	0x07001c30
34199570:	07001830 	.word	0x07001830
34199574:	07001030 	.word	0x07001030
34199578:	07000034 	.word	0x07000034
3419957c:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199580:	f7fc ffec 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199584:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34199586:	68fa      	ldr	r2, [r7, #12]
34199588:	68bb      	ldr	r3, [r7, #8]
3419958a:	fbb2 f3f3 	udiv	r3, r2, r3
3419958e:	60fb      	str	r3, [r7, #12]
            break;
34199590:	e012      	b.n	341995b8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199592:	f7fd f829 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199596:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34199598:	68fa      	ldr	r2, [r7, #12]
3419959a:	68bb      	ldr	r3, [r7, #8]
3419959c:	fbb2 f3f3 	udiv	r3, r2, r3
341995a0:	60fb      	str	r3, [r7, #12]
            break;
341995a2:	e009      	b.n	341995b8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341995a4:	f7fd f866 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341995a8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
341995aa:	68fa      	ldr	r2, [r7, #12]
341995ac:	68bb      	ldr	r3, [r7, #8]
341995ae:	fbb2 f3f3 	udiv	r3, r2, r3
341995b2:	60fb      	str	r3, [r7, #12]
            break;
341995b4:	e000      	b.n	341995b8 <RCCEx_GetUARTCLKFreq+0x364>
            break;
341995b6:	bf00      	nop
        }
      }
      break;
341995b8:	e063      	b.n	34199682 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
341995ba:	f7f5 fccb 	bl	3418ef54 <LL_RCC_IC14_IsEnabled>
341995be:	4603      	mov	r3, r0
341995c0:	2b00      	cmp	r3, #0
341995c2:	d060      	beq.n	34199686 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
341995c4:	f7f5 fce8 	bl	3418ef98 <LL_RCC_IC14_GetDivider>
341995c8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
341995ca:	f7f5 fcd7 	bl	3418ef7c <LL_RCC_IC14_GetSource>
341995ce:	4603      	mov	r3, r0
341995d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341995d4:	d029      	beq.n	3419962a <RCCEx_GetUARTCLKFreq+0x3d6>
341995d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341995da:	d82f      	bhi.n	3419963c <RCCEx_GetUARTCLKFreq+0x3e8>
341995dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341995e0:	d01a      	beq.n	34199618 <RCCEx_GetUARTCLKFreq+0x3c4>
341995e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341995e6:	d829      	bhi.n	3419963c <RCCEx_GetUARTCLKFreq+0x3e8>
341995e8:	2b00      	cmp	r3, #0
341995ea:	d003      	beq.n	341995f4 <RCCEx_GetUARTCLKFreq+0x3a0>
341995ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341995f0:	d009      	beq.n	34199606 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341995f2:	e023      	b.n	3419963c <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341995f4:	f7fc ff6c 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
341995f8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
341995fa:	68fa      	ldr	r2, [r7, #12]
341995fc:	68bb      	ldr	r3, [r7, #8]
341995fe:	fbb2 f3f3 	udiv	r3, r2, r3
34199602:	60fb      	str	r3, [r7, #12]
            break;
34199604:	e01b      	b.n	3419963e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199606:	f7fc ffa9 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
3419960a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3419960c:	68fa      	ldr	r2, [r7, #12]
3419960e:	68bb      	ldr	r3, [r7, #8]
34199610:	fbb2 f3f3 	udiv	r3, r2, r3
34199614:	60fb      	str	r3, [r7, #12]
            break;
34199616:	e012      	b.n	3419963e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199618:	f7fc ffe6 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
3419961c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3419961e:	68fa      	ldr	r2, [r7, #12]
34199620:	68bb      	ldr	r3, [r7, #8]
34199622:	fbb2 f3f3 	udiv	r3, r2, r3
34199626:	60fb      	str	r3, [r7, #12]
            break;
34199628:	e009      	b.n	3419963e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3419962a:	f7fd f823 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
3419962e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34199630:	68fa      	ldr	r2, [r7, #12]
34199632:	68bb      	ldr	r3, [r7, #8]
34199634:	fbb2 f3f3 	udiv	r3, r2, r3
34199638:	60fb      	str	r3, [r7, #12]
            break;
3419963a:	e000      	b.n	3419963e <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3419963c:	bf00      	nop
        }
      }
      break;
3419963e:	e022      	b.n	34199686 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34199640:	f7f4 fb64 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34199644:	4603      	mov	r3, r0
34199646:	2b00      	cmp	r3, #0
34199648:	d01f      	beq.n	3419968a <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3419964a:	f7f4 fb71 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
3419964e:	4603      	mov	r3, r0
34199650:	09db      	lsrs	r3, r3, #7
34199652:	4a13      	ldr	r2, [pc, #76]	@ (341996a0 <RCCEx_GetUARTCLKFreq+0x44c>)
34199654:	fa22 f303 	lsr.w	r3, r2, r3
34199658:	60fb      	str	r3, [r7, #12]
      }
      break;
3419965a:	e016      	b.n	3419968a <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3419965c:	f7f4 fb76 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34199660:	4603      	mov	r3, r0
34199662:	2b00      	cmp	r3, #0
34199664:	d013      	beq.n	3419968e <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34199666:	4b0f      	ldr	r3, [pc, #60]	@ (341996a4 <RCCEx_GetUARTCLKFreq+0x450>)
34199668:	60fb      	str	r3, [r7, #12]
      }
      break;
3419966a:	e010      	b.n	3419968e <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3419966c:	f7f4 fb8e 	bl	3418dd8c <LL_RCC_LSE_IsReady>
34199670:	4603      	mov	r3, r0
34199672:	2b00      	cmp	r3, #0
34199674:	d00d      	beq.n	34199692 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34199676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3419967a:	60fb      	str	r3, [r7, #12]
      }
      break;
3419967c:	e009      	b.n	34199692 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3419967e:	bf00      	nop
34199680:	e008      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34199682:	bf00      	nop
34199684:	e006      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34199686:	bf00      	nop
34199688:	e004      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3419968a:	bf00      	nop
3419968c:	e002      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3419968e:	bf00      	nop
34199690:	e000      	b.n	34199694 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34199692:	bf00      	nop
  }

  return uart_frequency;
34199694:	68fb      	ldr	r3, [r7, #12]
}
34199696:	4618      	mov	r0, r3
34199698:	3710      	adds	r7, #16
3419969a:	46bd      	mov	sp, r7
3419969c:	bd80      	pop	{r7, pc}
3419969e:	bf00      	nop
341996a0:	03d09000 	.word	0x03d09000
341996a4:	003d0900 	.word	0x003d0900

341996a8 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
341996a8:	b580      	push	{r7, lr}
341996aa:	b084      	sub	sp, #16
341996ac:	af00      	add	r7, sp, #0
341996ae:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
341996b0:	2300      	movs	r3, #0
341996b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
341996b4:	6878      	ldr	r0, [r7, #4]
341996b6:	f7f4 ff11 	bl	3418e4dc <LL_RCC_GetUSARTClockSource>
341996ba:	4603      	mov	r3, r0
341996bc:	4aa2      	ldr	r2, [pc, #648]	@ (34199948 <RCCEx_GetUSARTCLKFreq+0x2a0>)
341996be:	4293      	cmp	r3, r2
341996c0:	f000 81e8 	beq.w	34199a94 <RCCEx_GetUSARTCLKFreq+0x3ec>
341996c4:	4aa0      	ldr	r2, [pc, #640]	@ (34199948 <RCCEx_GetUSARTCLKFreq+0x2a0>)
341996c6:	4293      	cmp	r3, r2
341996c8:	f200 8203 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341996cc:	4a9f      	ldr	r2, [pc, #636]	@ (3419994c <RCCEx_GetUSARTCLKFreq+0x2a4>)
341996ce:	4293      	cmp	r3, r2
341996d0:	f000 81e0 	beq.w	34199a94 <RCCEx_GetUSARTCLKFreq+0x3ec>
341996d4:	4a9d      	ldr	r2, [pc, #628]	@ (3419994c <RCCEx_GetUSARTCLKFreq+0x2a4>)
341996d6:	4293      	cmp	r3, r2
341996d8:	f200 81fb 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341996dc:	4a9c      	ldr	r2, [pc, #624]	@ (34199950 <RCCEx_GetUSARTCLKFreq+0x2a8>)
341996de:	4293      	cmp	r3, r2
341996e0:	f000 81d8 	beq.w	34199a94 <RCCEx_GetUSARTCLKFreq+0x3ec>
341996e4:	4a9a      	ldr	r2, [pc, #616]	@ (34199950 <RCCEx_GetUSARTCLKFreq+0x2a8>)
341996e6:	4293      	cmp	r3, r2
341996e8:	f200 81f3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341996ec:	4a99      	ldr	r2, [pc, #612]	@ (34199954 <RCCEx_GetUSARTCLKFreq+0x2ac>)
341996ee:	4293      	cmp	r3, r2
341996f0:	f000 81d0 	beq.w	34199a94 <RCCEx_GetUSARTCLKFreq+0x3ec>
341996f4:	4a97      	ldr	r2, [pc, #604]	@ (34199954 <RCCEx_GetUSARTCLKFreq+0x2ac>)
341996f6:	4293      	cmp	r3, r2
341996f8:	f200 81eb 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341996fc:	4a96      	ldr	r2, [pc, #600]	@ (34199958 <RCCEx_GetUSARTCLKFreq+0x2b0>)
341996fe:	4293      	cmp	r3, r2
34199700:	f000 81c8 	beq.w	34199a94 <RCCEx_GetUSARTCLKFreq+0x3ec>
34199704:	4a94      	ldr	r2, [pc, #592]	@ (34199958 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34199706:	4293      	cmp	r3, r2
34199708:	f200 81e3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419970c:	4a93      	ldr	r2, [pc, #588]	@ (3419995c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3419970e:	4293      	cmp	r3, r2
34199710:	f000 81ce 	beq.w	34199ab0 <RCCEx_GetUSARTCLKFreq+0x408>
34199714:	4a91      	ldr	r2, [pc, #580]	@ (3419995c <RCCEx_GetUSARTCLKFreq+0x2b4>)
34199716:	4293      	cmp	r3, r2
34199718:	f200 81db 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419971c:	4a90      	ldr	r2, [pc, #576]	@ (34199960 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3419971e:	4293      	cmp	r3, r2
34199720:	f000 81c6 	beq.w	34199ab0 <RCCEx_GetUSARTCLKFreq+0x408>
34199724:	4a8e      	ldr	r2, [pc, #568]	@ (34199960 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34199726:	4293      	cmp	r3, r2
34199728:	f200 81d3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419972c:	4a8d      	ldr	r2, [pc, #564]	@ (34199964 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3419972e:	4293      	cmp	r3, r2
34199730:	f000 81be 	beq.w	34199ab0 <RCCEx_GetUSARTCLKFreq+0x408>
34199734:	4a8b      	ldr	r2, [pc, #556]	@ (34199964 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34199736:	4293      	cmp	r3, r2
34199738:	f200 81cb 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419973c:	4a8a      	ldr	r2, [pc, #552]	@ (34199968 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3419973e:	4293      	cmp	r3, r2
34199740:	f000 81b6 	beq.w	34199ab0 <RCCEx_GetUSARTCLKFreq+0x408>
34199744:	4a88      	ldr	r2, [pc, #544]	@ (34199968 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34199746:	4293      	cmp	r3, r2
34199748:	f200 81c3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419974c:	4a87      	ldr	r2, [pc, #540]	@ (3419996c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3419974e:	4293      	cmp	r3, r2
34199750:	f000 81ae 	beq.w	34199ab0 <RCCEx_GetUSARTCLKFreq+0x408>
34199754:	4a85      	ldr	r2, [pc, #532]	@ (3419996c <RCCEx_GetUSARTCLKFreq+0x2c4>)
34199756:	4293      	cmp	r3, r2
34199758:	f200 81bb 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419975c:	4a84      	ldr	r2, [pc, #528]	@ (34199970 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3419975e:	4293      	cmp	r3, r2
34199760:	f000 81ae 	beq.w	34199ac0 <RCCEx_GetUSARTCLKFreq+0x418>
34199764:	4a82      	ldr	r2, [pc, #520]	@ (34199970 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34199766:	4293      	cmp	r3, r2
34199768:	f200 81b3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419976c:	4a81      	ldr	r2, [pc, #516]	@ (34199974 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3419976e:	4293      	cmp	r3, r2
34199770:	f000 81a6 	beq.w	34199ac0 <RCCEx_GetUSARTCLKFreq+0x418>
34199774:	4a7f      	ldr	r2, [pc, #508]	@ (34199974 <RCCEx_GetUSARTCLKFreq+0x2cc>)
34199776:	4293      	cmp	r3, r2
34199778:	f200 81ab 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419977c:	4a7e      	ldr	r2, [pc, #504]	@ (34199978 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3419977e:	4293      	cmp	r3, r2
34199780:	f000 819e 	beq.w	34199ac0 <RCCEx_GetUSARTCLKFreq+0x418>
34199784:	4a7c      	ldr	r2, [pc, #496]	@ (34199978 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34199786:	4293      	cmp	r3, r2
34199788:	f200 81a3 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419978c:	4a7b      	ldr	r2, [pc, #492]	@ (3419997c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3419978e:	4293      	cmp	r3, r2
34199790:	f000 8196 	beq.w	34199ac0 <RCCEx_GetUSARTCLKFreq+0x418>
34199794:	4a79      	ldr	r2, [pc, #484]	@ (3419997c <RCCEx_GetUSARTCLKFreq+0x2d4>)
34199796:	4293      	cmp	r3, r2
34199798:	f200 819b 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419979c:	4a78      	ldr	r2, [pc, #480]	@ (34199980 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3419979e:	4293      	cmp	r3, r2
341997a0:	f000 818e 	beq.w	34199ac0 <RCCEx_GetUSARTCLKFreq+0x418>
341997a4:	4a76      	ldr	r2, [pc, #472]	@ (34199980 <RCCEx_GetUSARTCLKFreq+0x2d8>)
341997a6:	4293      	cmp	r3, r2
341997a8:	f200 8193 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997ac:	4a75      	ldr	r2, [pc, #468]	@ (34199984 <RCCEx_GetUSARTCLKFreq+0x2dc>)
341997ae:	4293      	cmp	r3, r2
341997b0:	f000 812d 	beq.w	34199a0e <RCCEx_GetUSARTCLKFreq+0x366>
341997b4:	4a73      	ldr	r2, [pc, #460]	@ (34199984 <RCCEx_GetUSARTCLKFreq+0x2dc>)
341997b6:	4293      	cmp	r3, r2
341997b8:	f200 818b 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997bc:	4a72      	ldr	r2, [pc, #456]	@ (34199988 <RCCEx_GetUSARTCLKFreq+0x2e0>)
341997be:	4293      	cmp	r3, r2
341997c0:	f000 8125 	beq.w	34199a0e <RCCEx_GetUSARTCLKFreq+0x366>
341997c4:	4a70      	ldr	r2, [pc, #448]	@ (34199988 <RCCEx_GetUSARTCLKFreq+0x2e0>)
341997c6:	4293      	cmp	r3, r2
341997c8:	f200 8183 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997cc:	4a6f      	ldr	r2, [pc, #444]	@ (3419998c <RCCEx_GetUSARTCLKFreq+0x2e4>)
341997ce:	4293      	cmp	r3, r2
341997d0:	f000 811d 	beq.w	34199a0e <RCCEx_GetUSARTCLKFreq+0x366>
341997d4:	4a6d      	ldr	r2, [pc, #436]	@ (3419998c <RCCEx_GetUSARTCLKFreq+0x2e4>)
341997d6:	4293      	cmp	r3, r2
341997d8:	f200 817b 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997dc:	4a6c      	ldr	r2, [pc, #432]	@ (34199990 <RCCEx_GetUSARTCLKFreq+0x2e8>)
341997de:	4293      	cmp	r3, r2
341997e0:	f000 8115 	beq.w	34199a0e <RCCEx_GetUSARTCLKFreq+0x366>
341997e4:	4a6a      	ldr	r2, [pc, #424]	@ (34199990 <RCCEx_GetUSARTCLKFreq+0x2e8>)
341997e6:	4293      	cmp	r3, r2
341997e8:	f200 8173 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997ec:	4a69      	ldr	r2, [pc, #420]	@ (34199994 <RCCEx_GetUSARTCLKFreq+0x2ec>)
341997ee:	4293      	cmp	r3, r2
341997f0:	f000 810d 	beq.w	34199a0e <RCCEx_GetUSARTCLKFreq+0x366>
341997f4:	4a67      	ldr	r2, [pc, #412]	@ (34199994 <RCCEx_GetUSARTCLKFreq+0x2ec>)
341997f6:	4293      	cmp	r3, r2
341997f8:	f200 816b 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341997fc:	4a66      	ldr	r2, [pc, #408]	@ (34199998 <RCCEx_GetUSARTCLKFreq+0x2f0>)
341997fe:	4293      	cmp	r3, r2
34199800:	d07b      	beq.n	341998fa <RCCEx_GetUSARTCLKFreq+0x252>
34199802:	4a65      	ldr	r2, [pc, #404]	@ (34199998 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34199804:	4293      	cmp	r3, r2
34199806:	f200 8164 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419980a:	4a64      	ldr	r2, [pc, #400]	@ (3419999c <RCCEx_GetUSARTCLKFreq+0x2f4>)
3419980c:	4293      	cmp	r3, r2
3419980e:	d074      	beq.n	341998fa <RCCEx_GetUSARTCLKFreq+0x252>
34199810:	4a62      	ldr	r2, [pc, #392]	@ (3419999c <RCCEx_GetUSARTCLKFreq+0x2f4>)
34199812:	4293      	cmp	r3, r2
34199814:	f200 815d 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199818:	4a61      	ldr	r2, [pc, #388]	@ (341999a0 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3419981a:	4293      	cmp	r3, r2
3419981c:	d06d      	beq.n	341998fa <RCCEx_GetUSARTCLKFreq+0x252>
3419981e:	4a60      	ldr	r2, [pc, #384]	@ (341999a0 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34199820:	4293      	cmp	r3, r2
34199822:	f200 8156 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199826:	4a5f      	ldr	r2, [pc, #380]	@ (341999a4 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34199828:	4293      	cmp	r3, r2
3419982a:	d066      	beq.n	341998fa <RCCEx_GetUSARTCLKFreq+0x252>
3419982c:	4a5d      	ldr	r2, [pc, #372]	@ (341999a4 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3419982e:	4293      	cmp	r3, r2
34199830:	f200 814f 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199834:	4a5c      	ldr	r2, [pc, #368]	@ (341999a8 <RCCEx_GetUSARTCLKFreq+0x300>)
34199836:	4293      	cmp	r3, r2
34199838:	d05f      	beq.n	341998fa <RCCEx_GetUSARTCLKFreq+0x252>
3419983a:	4a5b      	ldr	r2, [pc, #364]	@ (341999a8 <RCCEx_GetUSARTCLKFreq+0x300>)
3419983c:	4293      	cmp	r3, r2
3419983e:	f200 8148 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199842:	4a5a      	ldr	r2, [pc, #360]	@ (341999ac <RCCEx_GetUSARTCLKFreq+0x304>)
34199844:	4293      	cmp	r3, r2
34199846:	d053      	beq.n	341998f0 <RCCEx_GetUSARTCLKFreq+0x248>
34199848:	4a58      	ldr	r2, [pc, #352]	@ (341999ac <RCCEx_GetUSARTCLKFreq+0x304>)
3419984a:	4293      	cmp	r3, r2
3419984c:	f200 8141 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199850:	4a57      	ldr	r2, [pc, #348]	@ (341999b0 <RCCEx_GetUSARTCLKFreq+0x308>)
34199852:	4293      	cmp	r3, r2
34199854:	d04c      	beq.n	341998f0 <RCCEx_GetUSARTCLKFreq+0x248>
34199856:	4a56      	ldr	r2, [pc, #344]	@ (341999b0 <RCCEx_GetUSARTCLKFreq+0x308>)
34199858:	4293      	cmp	r3, r2
3419985a:	f200 813a 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419985e:	4a55      	ldr	r2, [pc, #340]	@ (341999b4 <RCCEx_GetUSARTCLKFreq+0x30c>)
34199860:	4293      	cmp	r3, r2
34199862:	d045      	beq.n	341998f0 <RCCEx_GetUSARTCLKFreq+0x248>
34199864:	4a53      	ldr	r2, [pc, #332]	@ (341999b4 <RCCEx_GetUSARTCLKFreq+0x30c>)
34199866:	4293      	cmp	r3, r2
34199868:	f200 8133 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419986c:	4a52      	ldr	r2, [pc, #328]	@ (341999b8 <RCCEx_GetUSARTCLKFreq+0x310>)
3419986e:	4293      	cmp	r3, r2
34199870:	d03e      	beq.n	341998f0 <RCCEx_GetUSARTCLKFreq+0x248>
34199872:	4a51      	ldr	r2, [pc, #324]	@ (341999b8 <RCCEx_GetUSARTCLKFreq+0x310>)
34199874:	4293      	cmp	r3, r2
34199876:	f200 812c 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
3419987a:	4a50      	ldr	r2, [pc, #320]	@ (341999bc <RCCEx_GetUSARTCLKFreq+0x314>)
3419987c:	4293      	cmp	r3, r2
3419987e:	d037      	beq.n	341998f0 <RCCEx_GetUSARTCLKFreq+0x248>
34199880:	4a4e      	ldr	r2, [pc, #312]	@ (341999bc <RCCEx_GetUSARTCLKFreq+0x314>)
34199882:	4293      	cmp	r3, r2
34199884:	f200 8125 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199888:	4a4d      	ldr	r2, [pc, #308]	@ (341999c0 <RCCEx_GetUSARTCLKFreq+0x318>)
3419988a:	4293      	cmp	r3, r2
3419988c:	d018      	beq.n	341998c0 <RCCEx_GetUSARTCLKFreq+0x218>
3419988e:	4a4c      	ldr	r2, [pc, #304]	@ (341999c0 <RCCEx_GetUSARTCLKFreq+0x318>)
34199890:	4293      	cmp	r3, r2
34199892:	f200 811e 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
34199896:	4a4b      	ldr	r2, [pc, #300]	@ (341999c4 <RCCEx_GetUSARTCLKFreq+0x31c>)
34199898:	4293      	cmp	r3, r2
3419989a:	d01d      	beq.n	341998d8 <RCCEx_GetUSARTCLKFreq+0x230>
3419989c:	4a49      	ldr	r2, [pc, #292]	@ (341999c4 <RCCEx_GetUSARTCLKFreq+0x31c>)
3419989e:	4293      	cmp	r3, r2
341998a0:	f200 8117 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341998a4:	4a48      	ldr	r2, [pc, #288]	@ (341999c8 <RCCEx_GetUSARTCLKFreq+0x320>)
341998a6:	4293      	cmp	r3, r2
341998a8:	d00a      	beq.n	341998c0 <RCCEx_GetUSARTCLKFreq+0x218>
341998aa:	4a47      	ldr	r2, [pc, #284]	@ (341999c8 <RCCEx_GetUSARTCLKFreq+0x320>)
341998ac:	4293      	cmp	r3, r2
341998ae:	f200 8110 	bhi.w	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
341998b2:	4a46      	ldr	r2, [pc, #280]	@ (341999cc <RCCEx_GetUSARTCLKFreq+0x324>)
341998b4:	4293      	cmp	r3, r2
341998b6:	d003      	beq.n	341998c0 <RCCEx_GetUSARTCLKFreq+0x218>
341998b8:	4a45      	ldr	r2, [pc, #276]	@ (341999d0 <RCCEx_GetUSARTCLKFreq+0x328>)
341998ba:	4293      	cmp	r3, r2
341998bc:	d00c      	beq.n	341998d8 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
341998be:	e108      	b.n	34199ad2 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341998c0:	f7f3 fd9a 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
341998c4:	4603      	mov	r3, r0
341998c6:	4618      	mov	r0, r3
341998c8:	f7fc ff1a 	bl	34196700 <RCCEx_GetHCLKFreq>
341998cc:	4603      	mov	r3, r0
341998ce:	4618      	mov	r0, r3
341998d0:	f7fc ff37 	bl	34196742 <RCCEx_GetPCLK2Freq>
341998d4:	60f8      	str	r0, [r7, #12]
      break;
341998d6:	e107      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341998d8:	f7f3 fd8e 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
341998dc:	4603      	mov	r3, r0
341998de:	4618      	mov	r0, r3
341998e0:	f7fc ff0e 	bl	34196700 <RCCEx_GetHCLKFreq>
341998e4:	4603      	mov	r3, r0
341998e6:	4618      	mov	r0, r3
341998e8:	f7fc ff1b 	bl	34196722 <RCCEx_GetPCLK1Freq>
341998ec:	60f8      	str	r0, [r7, #12]
      break;
341998ee:	e0fb      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341998f0:	2007      	movs	r0, #7
341998f2:	f7fd f9f1 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
341998f6:	60f8      	str	r0, [r7, #12]
      break;
341998f8:	e0f6      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
341998fa:	f7f5 fa2b 	bl	3418ed54 <LL_RCC_IC9_IsEnabled>
341998fe:	4603      	mov	r3, r0
34199900:	2b00      	cmp	r3, #0
34199902:	f000 80e8 	beq.w	34199ad6 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34199906:	f7f5 fa47 	bl	3418ed98 <LL_RCC_IC9_GetDivider>
3419990a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3419990c:	f7f5 fa36 	bl	3418ed7c <LL_RCC_IC9_GetSource>
34199910:	4603      	mov	r3, r0
34199912:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199916:	d06f      	beq.n	341999f8 <RCCEx_GetUSARTCLKFreq+0x350>
34199918:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419991c:	d875      	bhi.n	34199a0a <RCCEx_GetUSARTCLKFreq+0x362>
3419991e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199922:	d060      	beq.n	341999e6 <RCCEx_GetUSARTCLKFreq+0x33e>
34199924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199928:	d86f      	bhi.n	34199a0a <RCCEx_GetUSARTCLKFreq+0x362>
3419992a:	2b00      	cmp	r3, #0
3419992c:	d003      	beq.n	34199936 <RCCEx_GetUSARTCLKFreq+0x28e>
3419992e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199932:	d04f      	beq.n	341999d4 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34199934:	e069      	b.n	34199a0a <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199936:	f7fc fdcb 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
3419993a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3419993c:	68fa      	ldr	r2, [r7, #12]
3419993e:	68bb      	ldr	r3, [r7, #8]
34199940:	fbb2 f3f3 	udiv	r3, r2, r3
34199944:	60fb      	str	r3, [r7, #12]
            break;
34199946:	e061      	b.n	34199a0c <RCCEx_GetUSARTCLKFreq+0x364>
34199948:	07061430 	.word	0x07061430
3419994c:	07060830 	.word	0x07060830
34199950:	07060434 	.word	0x07060434
34199954:	07060430 	.word	0x07060430
34199958:	07060030 	.word	0x07060030
3419995c:	07051430 	.word	0x07051430
34199960:	07050830 	.word	0x07050830
34199964:	07050434 	.word	0x07050434
34199968:	07050430 	.word	0x07050430
3419996c:	07050030 	.word	0x07050030
34199970:	07041430 	.word	0x07041430
34199974:	07040830 	.word	0x07040830
34199978:	07040434 	.word	0x07040434
3419997c:	07040430 	.word	0x07040430
34199980:	07040030 	.word	0x07040030
34199984:	07031430 	.word	0x07031430
34199988:	07030830 	.word	0x07030830
3419998c:	07030434 	.word	0x07030434
34199990:	07030430 	.word	0x07030430
34199994:	07030030 	.word	0x07030030
34199998:	07021430 	.word	0x07021430
3419999c:	07020830 	.word	0x07020830
341999a0:	07020434 	.word	0x07020434
341999a4:	07020430 	.word	0x07020430
341999a8:	07020030 	.word	0x07020030
341999ac:	07011430 	.word	0x07011430
341999b0:	07010830 	.word	0x07010830
341999b4:	07010434 	.word	0x07010434
341999b8:	07010430 	.word	0x07010430
341999bc:	07010030 	.word	0x07010030
341999c0:	07001430 	.word	0x07001430
341999c4:	07000830 	.word	0x07000830
341999c8:	07000434 	.word	0x07000434
341999cc:	07000030 	.word	0x07000030
341999d0:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341999d4:	f7fc fdc2 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
341999d8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
341999da:	68fa      	ldr	r2, [r7, #12]
341999dc:	68bb      	ldr	r3, [r7, #8]
341999de:	fbb2 f3f3 	udiv	r3, r2, r3
341999e2:	60fb      	str	r3, [r7, #12]
            break;
341999e4:	e012      	b.n	34199a0c <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341999e6:	f7fc fdff 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
341999ea:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
341999ec:	68fa      	ldr	r2, [r7, #12]
341999ee:	68bb      	ldr	r3, [r7, #8]
341999f0:	fbb2 f3f3 	udiv	r3, r2, r3
341999f4:	60fb      	str	r3, [r7, #12]
            break;
341999f6:	e009      	b.n	34199a0c <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341999f8:	f7fc fe3c 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
341999fc:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
341999fe:	68fa      	ldr	r2, [r7, #12]
34199a00:	68bb      	ldr	r3, [r7, #8]
34199a02:	fbb2 f3f3 	udiv	r3, r2, r3
34199a06:	60fb      	str	r3, [r7, #12]
            break;
34199a08:	e000      	b.n	34199a0c <RCCEx_GetUSARTCLKFreq+0x364>
            break;
34199a0a:	bf00      	nop
      break;
34199a0c:	e063      	b.n	34199ad6 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34199a0e:	f7f5 faa1 	bl	3418ef54 <LL_RCC_IC14_IsEnabled>
34199a12:	4603      	mov	r3, r0
34199a14:	2b00      	cmp	r3, #0
34199a16:	d060      	beq.n	34199ada <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34199a18:	f7f5 fabe 	bl	3418ef98 <LL_RCC_IC14_GetDivider>
34199a1c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34199a1e:	f7f5 faad 	bl	3418ef7c <LL_RCC_IC14_GetSource>
34199a22:	4603      	mov	r3, r0
34199a24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199a28:	d029      	beq.n	34199a7e <RCCEx_GetUSARTCLKFreq+0x3d6>
34199a2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199a2e:	d82f      	bhi.n	34199a90 <RCCEx_GetUSARTCLKFreq+0x3e8>
34199a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199a34:	d01a      	beq.n	34199a6c <RCCEx_GetUSARTCLKFreq+0x3c4>
34199a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199a3a:	d829      	bhi.n	34199a90 <RCCEx_GetUSARTCLKFreq+0x3e8>
34199a3c:	2b00      	cmp	r3, #0
34199a3e:	d003      	beq.n	34199a48 <RCCEx_GetUSARTCLKFreq+0x3a0>
34199a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199a44:	d009      	beq.n	34199a5a <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34199a46:	e023      	b.n	34199a90 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199a48:	f7fc fd42 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199a4c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34199a4e:	68fa      	ldr	r2, [r7, #12]
34199a50:	68bb      	ldr	r3, [r7, #8]
34199a52:	fbb2 f3f3 	udiv	r3, r2, r3
34199a56:	60fb      	str	r3, [r7, #12]
            break;
34199a58:	e01b      	b.n	34199a92 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199a5a:	f7fc fd7f 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199a5e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34199a60:	68fa      	ldr	r2, [r7, #12]
34199a62:	68bb      	ldr	r3, [r7, #8]
34199a64:	fbb2 f3f3 	udiv	r3, r2, r3
34199a68:	60fb      	str	r3, [r7, #12]
            break;
34199a6a:	e012      	b.n	34199a92 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199a6c:	f7fc fdbc 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199a70:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34199a72:	68fa      	ldr	r2, [r7, #12]
34199a74:	68bb      	ldr	r3, [r7, #8]
34199a76:	fbb2 f3f3 	udiv	r3, r2, r3
34199a7a:	60fb      	str	r3, [r7, #12]
            break;
34199a7c:	e009      	b.n	34199a92 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34199a7e:	f7fc fdf9 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34199a82:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34199a84:	68fa      	ldr	r2, [r7, #12]
34199a86:	68bb      	ldr	r3, [r7, #8]
34199a88:	fbb2 f3f3 	udiv	r3, r2, r3
34199a8c:	60fb      	str	r3, [r7, #12]
            break;
34199a8e:	e000      	b.n	34199a92 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34199a90:	bf00      	nop
      break;
34199a92:	e022      	b.n	34199ada <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
34199a94:	f7f4 f93a 	bl	3418dd0c <LL_RCC_HSI_IsReady>
34199a98:	4603      	mov	r3, r0
34199a9a:	2b00      	cmp	r3, #0
34199a9c:	d01f      	beq.n	34199ade <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34199a9e:	f7f4 f947 	bl	3418dd30 <LL_RCC_HSI_GetDivider>
34199aa2:	4603      	mov	r3, r0
34199aa4:	09db      	lsrs	r3, r3, #7
34199aa6:	4a13      	ldr	r2, [pc, #76]	@ (34199af4 <RCCEx_GetUSARTCLKFreq+0x44c>)
34199aa8:	fa22 f303 	lsr.w	r3, r2, r3
34199aac:	60fb      	str	r3, [r7, #12]
      break;
34199aae:	e016      	b.n	34199ade <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
34199ab0:	f7f4 f94c 	bl	3418dd4c <LL_RCC_MSI_IsReady>
34199ab4:	4603      	mov	r3, r0
34199ab6:	2b00      	cmp	r3, #0
34199ab8:	d013      	beq.n	34199ae2 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
34199aba:	4b0f      	ldr	r3, [pc, #60]	@ (34199af8 <RCCEx_GetUSARTCLKFreq+0x450>)
34199abc:	60fb      	str	r3, [r7, #12]
      break;
34199abe:	e010      	b.n	34199ae2 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
34199ac0:	f7f4 f964 	bl	3418dd8c <LL_RCC_LSE_IsReady>
34199ac4:	4603      	mov	r3, r0
34199ac6:	2b00      	cmp	r3, #0
34199ac8:	d00d      	beq.n	34199ae6 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
34199aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34199ace:	60fb      	str	r3, [r7, #12]
      break;
34199ad0:	e009      	b.n	34199ae6 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
34199ad2:	bf00      	nop
34199ad4:	e008      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34199ad6:	bf00      	nop
34199ad8:	e006      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34199ada:	bf00      	nop
34199adc:	e004      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34199ade:	bf00      	nop
34199ae0:	e002      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34199ae2:	bf00      	nop
34199ae4:	e000      	b.n	34199ae8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34199ae6:	bf00      	nop
  }

  return usart_frequency;
34199ae8:	68fb      	ldr	r3, [r7, #12]
}
34199aea:	4618      	mov	r0, r3
34199aec:	3710      	adds	r7, #16
34199aee:	46bd      	mov	sp, r7
34199af0:	bd80      	pop	{r7, pc}
34199af2:	bf00      	nop
34199af4:	03d09000 	.word	0x03d09000
34199af8:	003d0900 	.word	0x003d0900

34199afc <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
34199afc:	b580      	push	{r7, lr}
34199afe:	b084      	sub	sp, #16
34199b00:	af00      	add	r7, sp, #0
34199b02:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34199b04:	2300      	movs	r3, #0
34199b06:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34199b08:	6878      	ldr	r0, [r7, #4]
34199b0a:	f7f4 fcff 	bl	3418e50c <LL_RCC_GetUSBClockSource>
34199b0e:	4603      	mov	r3, r0
34199b10:	4a4b      	ldr	r2, [pc, #300]	@ (34199c40 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34199b12:	4293      	cmp	r3, r2
34199b14:	d035      	beq.n	34199b82 <RCCEx_GetOTGPHYCLKFreq+0x86>
34199b16:	4a4a      	ldr	r2, [pc, #296]	@ (34199c40 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34199b18:	4293      	cmp	r3, r2
34199b1a:	f200 8085 	bhi.w	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b1e:	4a49      	ldr	r2, [pc, #292]	@ (34199c44 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34199b20:	4293      	cmp	r3, r2
34199b22:	d02e      	beq.n	34199b82 <RCCEx_GetOTGPHYCLKFreq+0x86>
34199b24:	4a47      	ldr	r2, [pc, #284]	@ (34199c44 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34199b26:	4293      	cmp	r3, r2
34199b28:	d87e      	bhi.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b2a:	4a47      	ldr	r2, [pc, #284]	@ (34199c48 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34199b2c:	4293      	cmp	r3, r2
34199b2e:	d038      	beq.n	34199ba2 <RCCEx_GetOTGPHYCLKFreq+0xa6>
34199b30:	4a45      	ldr	r2, [pc, #276]	@ (34199c48 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34199b32:	4293      	cmp	r3, r2
34199b34:	d878      	bhi.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b36:	4a45      	ldr	r2, [pc, #276]	@ (34199c4c <RCCEx_GetOTGPHYCLKFreq+0x150>)
34199b38:	4293      	cmp	r3, r2
34199b3a:	d032      	beq.n	34199ba2 <RCCEx_GetOTGPHYCLKFreq+0xa6>
34199b3c:	4a43      	ldr	r2, [pc, #268]	@ (34199c4c <RCCEx_GetOTGPHYCLKFreq+0x150>)
34199b3e:	4293      	cmp	r3, r2
34199b40:	d872      	bhi.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b42:	4a43      	ldr	r2, [pc, #268]	@ (34199c50 <RCCEx_GetOTGPHYCLKFreq+0x154>)
34199b44:	4293      	cmp	r3, r2
34199b46:	d00f      	beq.n	34199b68 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34199b48:	4a41      	ldr	r2, [pc, #260]	@ (34199c50 <RCCEx_GetOTGPHYCLKFreq+0x154>)
34199b4a:	4293      	cmp	r3, r2
34199b4c:	d86c      	bhi.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b4e:	4a41      	ldr	r2, [pc, #260]	@ (34199c54 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34199b50:	4293      	cmp	r3, r2
34199b52:	d009      	beq.n	34199b68 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34199b54:	4a3f      	ldr	r2, [pc, #252]	@ (34199c54 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34199b56:	4293      	cmp	r3, r2
34199b58:	d866      	bhi.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34199b5a:	4a3f      	ldr	r2, [pc, #252]	@ (34199c58 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34199b5c:	4293      	cmp	r3, r2
34199b5e:	d008      	beq.n	34199b72 <RCCEx_GetOTGPHYCLKFreq+0x76>
34199b60:	4a3e      	ldr	r2, [pc, #248]	@ (34199c5c <RCCEx_GetOTGPHYCLKFreq+0x160>)
34199b62:	4293      	cmp	r3, r2
34199b64:	d005      	beq.n	34199b72 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
34199b66:	e05f      	b.n	34199c28 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34199b68:	2007      	movs	r0, #7
34199b6a:	f7fd f8b5 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34199b6e:	60f8      	str	r0, [r7, #12]
      break;
34199b70:	e061      	b.n	34199c36 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
34199b72:	f7f4 f8b9 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34199b76:	4603      	mov	r3, r0
34199b78:	2b00      	cmp	r3, #0
34199b7a:	d057      	beq.n	34199c2c <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
34199b7c:	4b38      	ldr	r3, [pc, #224]	@ (34199c60 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34199b7e:	60fb      	str	r3, [r7, #12]
      break;
34199b80:	e054      	b.n	34199c2c <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
34199b82:	f7f4 f8b1 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34199b86:	4603      	mov	r3, r0
34199b88:	2b00      	cmp	r3, #0
34199b8a:	d051      	beq.n	34199c30 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34199b8c:	f7f4 f89a 	bl	3418dcc4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34199b90:	4603      	mov	r3, r0
34199b92:	2b00      	cmp	r3, #0
34199b94:	d102      	bne.n	34199b9c <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
34199b96:	4b33      	ldr	r3, [pc, #204]	@ (34199c64 <RCCEx_GetOTGPHYCLKFreq+0x168>)
34199b98:	60fb      	str	r3, [r7, #12]
      break;
34199b9a:	e049      	b.n	34199c30 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
34199b9c:	4b30      	ldr	r3, [pc, #192]	@ (34199c60 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34199b9e:	60fb      	str	r3, [r7, #12]
      break;
34199ba0:	e046      	b.n	34199c30 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34199ba2:	f7f5 fa17 	bl	3418efd4 <LL_RCC_IC15_IsEnabled>
34199ba6:	4603      	mov	r3, r0
34199ba8:	2b00      	cmp	r3, #0
34199baa:	d043      	beq.n	34199c34 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34199bac:	f7f5 fa34 	bl	3418f018 <LL_RCC_IC15_GetDivider>
34199bb0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34199bb2:	f7f5 fa23 	bl	3418effc <LL_RCC_IC15_GetSource>
34199bb6:	4603      	mov	r3, r0
34199bb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199bbc:	d029      	beq.n	34199c12 <RCCEx_GetOTGPHYCLKFreq+0x116>
34199bbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199bc2:	d82f      	bhi.n	34199c24 <RCCEx_GetOTGPHYCLKFreq+0x128>
34199bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199bc8:	d01a      	beq.n	34199c00 <RCCEx_GetOTGPHYCLKFreq+0x104>
34199bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199bce:	d829      	bhi.n	34199c24 <RCCEx_GetOTGPHYCLKFreq+0x128>
34199bd0:	2b00      	cmp	r3, #0
34199bd2:	d003      	beq.n	34199bdc <RCCEx_GetOTGPHYCLKFreq+0xe0>
34199bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199bd8:	d009      	beq.n	34199bee <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
34199bda:	e023      	b.n	34199c24 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199bdc:	f7fc fc78 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199be0:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34199be2:	68fa      	ldr	r2, [r7, #12]
34199be4:	68bb      	ldr	r3, [r7, #8]
34199be6:	fbb2 f3f3 	udiv	r3, r2, r3
34199bea:	60fb      	str	r3, [r7, #12]
            break;
34199bec:	e01b      	b.n	34199c26 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199bee:	f7fc fcb5 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199bf2:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34199bf4:	68fa      	ldr	r2, [r7, #12]
34199bf6:	68bb      	ldr	r3, [r7, #8]
34199bf8:	fbb2 f3f3 	udiv	r3, r2, r3
34199bfc:	60fb      	str	r3, [r7, #12]
            break;
34199bfe:	e012      	b.n	34199c26 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199c00:	f7fc fcf2 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199c04:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34199c06:	68fa      	ldr	r2, [r7, #12]
34199c08:	68bb      	ldr	r3, [r7, #8]
34199c0a:	fbb2 f3f3 	udiv	r3, r2, r3
34199c0e:	60fb      	str	r3, [r7, #12]
            break;
34199c10:	e009      	b.n	34199c26 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34199c12:	f7fc fd2f 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34199c16:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34199c18:	68fa      	ldr	r2, [r7, #12]
34199c1a:	68bb      	ldr	r3, [r7, #8]
34199c1c:	fbb2 f3f3 	udiv	r3, r2, r3
34199c20:	60fb      	str	r3, [r7, #12]
            break;
34199c22:	e000      	b.n	34199c26 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
34199c24:	bf00      	nop
      break;
34199c26:	e005      	b.n	34199c34 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34199c28:	bf00      	nop
34199c2a:	e004      	b.n	34199c36 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34199c2c:	bf00      	nop
34199c2e:	e002      	b.n	34199c36 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34199c30:	bf00      	nop
34199c32:	e000      	b.n	34199c36 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34199c34:	bf00      	nop
  }

  return usb_frequency;
34199c36:	68fb      	ldr	r3, [r7, #12]
}
34199c38:	4618      	mov	r0, r3
34199c3a:	3710      	adds	r7, #16
34199c3c:	46bd      	mov	sp, r7
34199c3e:	bd80      	pop	{r7, pc}
34199c40:	03031414 	.word	0x03031414
34199c44:	03030c14 	.word	0x03030c14
34199c48:	03021414 	.word	0x03021414
34199c4c:	03020c14 	.word	0x03020c14
34199c50:	03011414 	.word	0x03011414
34199c54:	03010c14 	.word	0x03010c14
34199c58:	03000c14 	.word	0x03000c14
34199c5c:	03001414 	.word	0x03001414
34199c60:	016e3600 	.word	0x016e3600
34199c64:	02dc6c00 	.word	0x02dc6c00

34199c68 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34199c68:	b580      	push	{r7, lr}
34199c6a:	b084      	sub	sp, #16
34199c6c:	af00      	add	r7, sp, #0
34199c6e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34199c70:	2300      	movs	r3, #0
34199c72:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34199c74:	6878      	ldr	r0, [r7, #4]
34199c76:	f7f4 fc49 	bl	3418e50c <LL_RCC_GetUSBClockSource>
34199c7a:	4603      	mov	r3, r0
34199c7c:	4a1a      	ldr	r2, [pc, #104]	@ (34199ce8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34199c7e:	4293      	cmp	r3, r2
34199c80:	d00f      	beq.n	34199ca2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34199c82:	4a19      	ldr	r2, [pc, #100]	@ (34199ce8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34199c84:	4293      	cmp	r3, r2
34199c86:	d826      	bhi.n	34199cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34199c88:	4a18      	ldr	r2, [pc, #96]	@ (34199cec <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34199c8a:	4293      	cmp	r3, r2
34199c8c:	d009      	beq.n	34199ca2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34199c8e:	4a17      	ldr	r2, [pc, #92]	@ (34199cec <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34199c90:	4293      	cmp	r3, r2
34199c92:	d820      	bhi.n	34199cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34199c94:	4a16      	ldr	r2, [pc, #88]	@ (34199cf0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
34199c96:	4293      	cmp	r3, r2
34199c98:	d013      	beq.n	34199cc2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
34199c9a:	4a16      	ldr	r2, [pc, #88]	@ (34199cf4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
34199c9c:	4293      	cmp	r3, r2
34199c9e:	d015      	beq.n	34199ccc <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34199ca0:	e019      	b.n	34199cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
34199ca2:	f7f4 f821 	bl	3418dce8 <LL_RCC_HSE_IsReady>
34199ca6:	4603      	mov	r3, r0
34199ca8:	2b00      	cmp	r3, #0
34199caa:	d016      	beq.n	34199cda <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34199cac:	f7f4 f80a 	bl	3418dcc4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34199cb0:	4603      	mov	r3, r0
34199cb2:	2b00      	cmp	r3, #0
34199cb4:	d102      	bne.n	34199cbc <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
34199cb6:	4b10      	ldr	r3, [pc, #64]	@ (34199cf8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
34199cb8:	60fb      	str	r3, [r7, #12]
      break;
34199cba:	e00e      	b.n	34199cda <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
34199cbc:	4b0f      	ldr	r3, [pc, #60]	@ (34199cfc <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
34199cbe:	60fb      	str	r3, [r7, #12]
      break;
34199cc0:	e00b      	b.n	34199cda <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34199cc2:	480f      	ldr	r0, [pc, #60]	@ (34199d00 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
34199cc4:	f7ff ff1a 	bl	34199afc <RCCEx_GetOTGPHYCLKFreq>
34199cc8:	60f8      	str	r0, [r7, #12]
      break;
34199cca:	e007      	b.n	34199cdc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34199ccc:	480d      	ldr	r0, [pc, #52]	@ (34199d04 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
34199cce:	f7ff ff15 	bl	34199afc <RCCEx_GetOTGPHYCLKFreq>
34199cd2:	60f8      	str	r0, [r7, #12]
      break;
34199cd4:	e002      	b.n	34199cdc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34199cd6:	bf00      	nop
34199cd8:	e000      	b.n	34199cdc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34199cda:	bf00      	nop
  }

  return usb_frequency;
34199cdc:	68fb      	ldr	r3, [r7, #12]
}
34199cde:	4618      	mov	r0, r3
34199ce0:	3710      	adds	r7, #16
34199ce2:	46bd      	mov	sp, r7
34199ce4:	bd80      	pop	{r7, pc}
34199ce6:	bf00      	nop
34199ce8:	01011814 	.word	0x01011814
34199cec:	01011014 	.word	0x01011014
34199cf0:	01001014 	.word	0x01001014
34199cf4:	01001814 	.word	0x01001814
34199cf8:	02dc6c00 	.word	0x02dc6c00
34199cfc:	016e3600 	.word	0x016e3600
34199d00:	03000c14 	.word	0x03000c14
34199d04:	03001414 	.word	0x03001414

34199d08 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34199d08:	b580      	push	{r7, lr}
34199d0a:	b084      	sub	sp, #16
34199d0c:	af00      	add	r7, sp, #0
34199d0e:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34199d10:	2300      	movs	r3, #0
34199d12:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34199d14:	6878      	ldr	r0, [r7, #4]
34199d16:	f7f4 fc05 	bl	3418e524 <LL_RCC_GetXSPIClockSource>
34199d1a:	4603      	mov	r3, r0
34199d1c:	4a76      	ldr	r2, [pc, #472]	@ (34199ef8 <RCCEx_GetXSPICLKFreq+0x1f0>)
34199d1e:	4293      	cmp	r3, r2
34199d20:	f000 809d 	beq.w	34199e5e <RCCEx_GetXSPICLKFreq+0x156>
34199d24:	4a74      	ldr	r2, [pc, #464]	@ (34199ef8 <RCCEx_GetXSPICLKFreq+0x1f0>)
34199d26:	4293      	cmp	r3, r2
34199d28:	f200 80dc 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d2c:	4a73      	ldr	r2, [pc, #460]	@ (34199efc <RCCEx_GetXSPICLKFreq+0x1f4>)
34199d2e:	4293      	cmp	r3, r2
34199d30:	f000 8095 	beq.w	34199e5e <RCCEx_GetXSPICLKFreq+0x156>
34199d34:	4a71      	ldr	r2, [pc, #452]	@ (34199efc <RCCEx_GetXSPICLKFreq+0x1f4>)
34199d36:	4293      	cmp	r3, r2
34199d38:	f200 80d4 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d3c:	4a70      	ldr	r2, [pc, #448]	@ (34199f00 <RCCEx_GetXSPICLKFreq+0x1f8>)
34199d3e:	4293      	cmp	r3, r2
34199d40:	f000 808d 	beq.w	34199e5e <RCCEx_GetXSPICLKFreq+0x156>
34199d44:	4a6e      	ldr	r2, [pc, #440]	@ (34199f00 <RCCEx_GetXSPICLKFreq+0x1f8>)
34199d46:	4293      	cmp	r3, r2
34199d48:	f200 80cc 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d4c:	4a6d      	ldr	r2, [pc, #436]	@ (34199f04 <RCCEx_GetXSPICLKFreq+0x1fc>)
34199d4e:	4293      	cmp	r3, r2
34199d50:	d041      	beq.n	34199dd6 <RCCEx_GetXSPICLKFreq+0xce>
34199d52:	4a6c      	ldr	r2, [pc, #432]	@ (34199f04 <RCCEx_GetXSPICLKFreq+0x1fc>)
34199d54:	4293      	cmp	r3, r2
34199d56:	f200 80c5 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d5a:	4a6b      	ldr	r2, [pc, #428]	@ (34199f08 <RCCEx_GetXSPICLKFreq+0x200>)
34199d5c:	4293      	cmp	r3, r2
34199d5e:	d03a      	beq.n	34199dd6 <RCCEx_GetXSPICLKFreq+0xce>
34199d60:	4a69      	ldr	r2, [pc, #420]	@ (34199f08 <RCCEx_GetXSPICLKFreq+0x200>)
34199d62:	4293      	cmp	r3, r2
34199d64:	f200 80be 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d68:	4a68      	ldr	r2, [pc, #416]	@ (34199f0c <RCCEx_GetXSPICLKFreq+0x204>)
34199d6a:	4293      	cmp	r3, r2
34199d6c:	d033      	beq.n	34199dd6 <RCCEx_GetXSPICLKFreq+0xce>
34199d6e:	4a67      	ldr	r2, [pc, #412]	@ (34199f0c <RCCEx_GetXSPICLKFreq+0x204>)
34199d70:	4293      	cmp	r3, r2
34199d72:	f200 80b7 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d76:	4a66      	ldr	r2, [pc, #408]	@ (34199f10 <RCCEx_GetXSPICLKFreq+0x208>)
34199d78:	4293      	cmp	r3, r2
34199d7a:	d027      	beq.n	34199dcc <RCCEx_GetXSPICLKFreq+0xc4>
34199d7c:	4a64      	ldr	r2, [pc, #400]	@ (34199f10 <RCCEx_GetXSPICLKFreq+0x208>)
34199d7e:	4293      	cmp	r3, r2
34199d80:	f200 80b0 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d84:	4a63      	ldr	r2, [pc, #396]	@ (34199f14 <RCCEx_GetXSPICLKFreq+0x20c>)
34199d86:	4293      	cmp	r3, r2
34199d88:	d020      	beq.n	34199dcc <RCCEx_GetXSPICLKFreq+0xc4>
34199d8a:	4a62      	ldr	r2, [pc, #392]	@ (34199f14 <RCCEx_GetXSPICLKFreq+0x20c>)
34199d8c:	4293      	cmp	r3, r2
34199d8e:	f200 80a9 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199d92:	4a61      	ldr	r2, [pc, #388]	@ (34199f18 <RCCEx_GetXSPICLKFreq+0x210>)
34199d94:	4293      	cmp	r3, r2
34199d96:	d019      	beq.n	34199dcc <RCCEx_GetXSPICLKFreq+0xc4>
34199d98:	4a5f      	ldr	r2, [pc, #380]	@ (34199f18 <RCCEx_GetXSPICLKFreq+0x210>)
34199d9a:	4293      	cmp	r3, r2
34199d9c:	f200 80a2 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199da0:	4a5e      	ldr	r2, [pc, #376]	@ (34199f1c <RCCEx_GetXSPICLKFreq+0x214>)
34199da2:	4293      	cmp	r3, r2
34199da4:	d00a      	beq.n	34199dbc <RCCEx_GetXSPICLKFreq+0xb4>
34199da6:	4a5d      	ldr	r2, [pc, #372]	@ (34199f1c <RCCEx_GetXSPICLKFreq+0x214>)
34199da8:	4293      	cmp	r3, r2
34199daa:	f200 809b 	bhi.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
34199dae:	4a5c      	ldr	r2, [pc, #368]	@ (34199f20 <RCCEx_GetXSPICLKFreq+0x218>)
34199db0:	4293      	cmp	r3, r2
34199db2:	d003      	beq.n	34199dbc <RCCEx_GetXSPICLKFreq+0xb4>
34199db4:	4a5b      	ldr	r2, [pc, #364]	@ (34199f24 <RCCEx_GetXSPICLKFreq+0x21c>)
34199db6:	4293      	cmp	r3, r2
34199db8:	f040 8094 	bne.w	34199ee4 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34199dbc:	f7f3 fb1c 	bl	3418d3f8 <HAL_RCC_GetSysClockFreq>
34199dc0:	4603      	mov	r3, r0
34199dc2:	4618      	mov	r0, r3
34199dc4:	f7fc fc9c 	bl	34196700 <RCCEx_GetHCLKFreq>
34199dc8:	60f8      	str	r0, [r7, #12]
      break;
34199dca:	e090      	b.n	34199eee <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34199dcc:	2007      	movs	r0, #7
34199dce:	f7fc ff83 	bl	34196cd8 <RCCEx_GetCLKPCLKFreq>
34199dd2:	60f8      	str	r0, [r7, #12]
      break;
34199dd4:	e08b      	b.n	34199eee <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
34199dd6:	f7f4 fe7d 	bl	3418ead4 <LL_RCC_IC3_IsEnabled>
34199dda:	4603      	mov	r3, r0
34199ddc:	2b00      	cmp	r3, #0
34199dde:	f000 8083 	beq.w	34199ee8 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
34199de2:	f7f4 fe99 	bl	3418eb18 <LL_RCC_IC3_GetDivider>
34199de6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34199de8:	f7f4 fe88 	bl	3418eafc <LL_RCC_IC3_GetSource>
34199dec:	4603      	mov	r3, r0
34199dee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199df2:	d029      	beq.n	34199e48 <RCCEx_GetXSPICLKFreq+0x140>
34199df4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199df8:	d82f      	bhi.n	34199e5a <RCCEx_GetXSPICLKFreq+0x152>
34199dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199dfe:	d01a      	beq.n	34199e36 <RCCEx_GetXSPICLKFreq+0x12e>
34199e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199e04:	d829      	bhi.n	34199e5a <RCCEx_GetXSPICLKFreq+0x152>
34199e06:	2b00      	cmp	r3, #0
34199e08:	d003      	beq.n	34199e12 <RCCEx_GetXSPICLKFreq+0x10a>
34199e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199e0e:	d009      	beq.n	34199e24 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34199e10:	e023      	b.n	34199e5a <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199e12:	f7fc fb5d 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199e16:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199e18:	68fa      	ldr	r2, [r7, #12]
34199e1a:	68bb      	ldr	r3, [r7, #8]
34199e1c:	fbb2 f3f3 	udiv	r3, r2, r3
34199e20:	60fb      	str	r3, [r7, #12]
            break;
34199e22:	e01b      	b.n	34199e5c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199e24:	f7fc fb9a 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199e28:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199e2a:	68fa      	ldr	r2, [r7, #12]
34199e2c:	68bb      	ldr	r3, [r7, #8]
34199e2e:	fbb2 f3f3 	udiv	r3, r2, r3
34199e32:	60fb      	str	r3, [r7, #12]
            break;
34199e34:	e012      	b.n	34199e5c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199e36:	f7fc fbd7 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199e3a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199e3c:	68fa      	ldr	r2, [r7, #12]
34199e3e:	68bb      	ldr	r3, [r7, #8]
34199e40:	fbb2 f3f3 	udiv	r3, r2, r3
34199e44:	60fb      	str	r3, [r7, #12]
            break;
34199e46:	e009      	b.n	34199e5c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34199e48:	f7fc fc14 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34199e4c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199e4e:	68fa      	ldr	r2, [r7, #12]
34199e50:	68bb      	ldr	r3, [r7, #8]
34199e52:	fbb2 f3f3 	udiv	r3, r2, r3
34199e56:	60fb      	str	r3, [r7, #12]
            break;
34199e58:	e000      	b.n	34199e5c <RCCEx_GetXSPICLKFreq+0x154>
            break;
34199e5a:	bf00      	nop
        }
      }
      break;
34199e5c:	e044      	b.n	34199ee8 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34199e5e:	f7f4 fe79 	bl	3418eb54 <LL_RCC_IC4_IsEnabled>
34199e62:	4603      	mov	r3, r0
34199e64:	2b00      	cmp	r3, #0
34199e66:	d041      	beq.n	34199eec <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34199e68:	f7f4 fe96 	bl	3418eb98 <LL_RCC_IC4_GetDivider>
34199e6c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34199e6e:	f7f4 fe85 	bl	3418eb7c <LL_RCC_IC4_GetSource>
34199e72:	4603      	mov	r3, r0
34199e74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199e78:	d029      	beq.n	34199ece <RCCEx_GetXSPICLKFreq+0x1c6>
34199e7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34199e7e:	d82f      	bhi.n	34199ee0 <RCCEx_GetXSPICLKFreq+0x1d8>
34199e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199e84:	d01a      	beq.n	34199ebc <RCCEx_GetXSPICLKFreq+0x1b4>
34199e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34199e8a:	d829      	bhi.n	34199ee0 <RCCEx_GetXSPICLKFreq+0x1d8>
34199e8c:	2b00      	cmp	r3, #0
34199e8e:	d003      	beq.n	34199e98 <RCCEx_GetXSPICLKFreq+0x190>
34199e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34199e94:	d009      	beq.n	34199eaa <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34199e96:	e023      	b.n	34199ee0 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34199e98:	f7fc fb1a 	bl	341964d0 <HAL_RCCEx_GetPLL1CLKFreq>
34199e9c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199e9e:	68fa      	ldr	r2, [r7, #12]
34199ea0:	68bb      	ldr	r3, [r7, #8]
34199ea2:	fbb2 f3f3 	udiv	r3, r2, r3
34199ea6:	60fb      	str	r3, [r7, #12]
            break;
34199ea8:	e01b      	b.n	34199ee2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34199eaa:	f7fc fb57 	bl	3419655c <HAL_RCCEx_GetPLL2CLKFreq>
34199eae:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199eb0:	68fa      	ldr	r2, [r7, #12]
34199eb2:	68bb      	ldr	r3, [r7, #8]
34199eb4:	fbb2 f3f3 	udiv	r3, r2, r3
34199eb8:	60fb      	str	r3, [r7, #12]
            break;
34199eba:	e012      	b.n	34199ee2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34199ebc:	f7fc fb94 	bl	341965e8 <HAL_RCCEx_GetPLL3CLKFreq>
34199ec0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199ec2:	68fa      	ldr	r2, [r7, #12]
34199ec4:	68bb      	ldr	r3, [r7, #8]
34199ec6:	fbb2 f3f3 	udiv	r3, r2, r3
34199eca:	60fb      	str	r3, [r7, #12]
            break;
34199ecc:	e009      	b.n	34199ee2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34199ece:	f7fc fbd1 	bl	34196674 <HAL_RCCEx_GetPLL4CLKFreq>
34199ed2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34199ed4:	68fa      	ldr	r2, [r7, #12]
34199ed6:	68bb      	ldr	r3, [r7, #8]
34199ed8:	fbb2 f3f3 	udiv	r3, r2, r3
34199edc:	60fb      	str	r3, [r7, #12]
            break;
34199ede:	e000      	b.n	34199ee2 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
34199ee0:	bf00      	nop
        }
      }
      break;
34199ee2:	e003      	b.n	34199eec <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
34199ee4:	bf00      	nop
34199ee6:	e002      	b.n	34199eee <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34199ee8:	bf00      	nop
34199eea:	e000      	b.n	34199eee <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34199eec:	bf00      	nop
  }

  return xspi_frequency;
34199eee:	68fb      	ldr	r3, [r7, #12]
}
34199ef0:	4618      	mov	r0, r3
34199ef2:	3710      	adds	r7, #16
34199ef4:	46bd      	mov	sp, r7
34199ef6:	bd80      	pop	{r7, pc}
34199ef8:	03030814 	.word	0x03030814
34199efc:	03030414 	.word	0x03030414
34199f00:	03030014 	.word	0x03030014
34199f04:	03020814 	.word	0x03020814
34199f08:	03020414 	.word	0x03020414
34199f0c:	03020014 	.word	0x03020014
34199f10:	03010814 	.word	0x03010814
34199f14:	03010414 	.word	0x03010414
34199f18:	03010014 	.word	0x03010014
34199f1c:	03000814 	.word	0x03000814
34199f20:	03000014 	.word	0x03000014
34199f24:	03000414 	.word	0x03000414

34199f28 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34199f28:	b580      	push	{r7, lr}
34199f2a:	b088      	sub	sp, #32
34199f2c:	af00      	add	r7, sp, #0
34199f2e:	6078      	str	r0, [r7, #4]
34199f30:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34199f32:	683b      	ldr	r3, [r7, #0]
34199f34:	2b00      	cmp	r3, #0
34199f36:	d104      	bne.n	34199f42 <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34199f38:	f240 1111 	movw	r1, #273	@ 0x111
34199f3c:	484d      	ldr	r0, [pc, #308]	@ (3419a074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34199f3e:	f7e8 f995 	bl	3418226c <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34199f42:	687b      	ldr	r3, [r7, #4]
34199f44:	2b00      	cmp	r3, #0
34199f46:	d028      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f48:	687b      	ldr	r3, [r7, #4]
34199f4a:	2b01      	cmp	r3, #1
34199f4c:	d025      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f4e:	687b      	ldr	r3, [r7, #4]
34199f50:	2b02      	cmp	r3, #2
34199f52:	d022      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f54:	687b      	ldr	r3, [r7, #4]
34199f56:	2b03      	cmp	r3, #3
34199f58:	d01f      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f5a:	687b      	ldr	r3, [r7, #4]
34199f5c:	2b04      	cmp	r3, #4
34199f5e:	d01c      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f60:	687b      	ldr	r3, [r7, #4]
34199f62:	2b05      	cmp	r3, #5
34199f64:	d019      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f66:	687b      	ldr	r3, [r7, #4]
34199f68:	2b06      	cmp	r3, #6
34199f6a:	d016      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f6c:	687b      	ldr	r3, [r7, #4]
34199f6e:	2b07      	cmp	r3, #7
34199f70:	d013      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f72:	687b      	ldr	r3, [r7, #4]
34199f74:	2b08      	cmp	r3, #8
34199f76:	d010      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f78:	687b      	ldr	r3, [r7, #4]
34199f7a:	2b09      	cmp	r3, #9
34199f7c:	d00d      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f7e:	687b      	ldr	r3, [r7, #4]
34199f80:	2b0a      	cmp	r3, #10
34199f82:	d00a      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f84:	687b      	ldr	r3, [r7, #4]
34199f86:	2b0b      	cmp	r3, #11
34199f88:	d007      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f8a:	687b      	ldr	r3, [r7, #4]
34199f8c:	2b0c      	cmp	r3, #12
34199f8e:	d004      	beq.n	34199f9a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34199f90:	f44f 7189 	mov.w	r1, #274	@ 0x112
34199f94:	4837      	ldr	r0, [pc, #220]	@ (3419a074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34199f96:	f7e8 f969 	bl	3418226c <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34199f9a:	683b      	ldr	r3, [r7, #0]
34199f9c:	681b      	ldr	r3, [r3, #0]
34199f9e:	2b01      	cmp	r3, #1
34199fa0:	d020      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fa2:	683b      	ldr	r3, [r7, #0]
34199fa4:	681b      	ldr	r3, [r3, #0]
34199fa6:	2b02      	cmp	r3, #2
34199fa8:	d01c      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199faa:	683b      	ldr	r3, [r7, #0]
34199fac:	681b      	ldr	r3, [r3, #0]
34199fae:	2b04      	cmp	r3, #4
34199fb0:	d018      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fb2:	683b      	ldr	r3, [r7, #0]
34199fb4:	681b      	ldr	r3, [r3, #0]
34199fb6:	2b08      	cmp	r3, #8
34199fb8:	d014      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fba:	683b      	ldr	r3, [r7, #0]
34199fbc:	681b      	ldr	r3, [r3, #0]
34199fbe:	2b10      	cmp	r3, #16
34199fc0:	d010      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fc2:	683b      	ldr	r3, [r7, #0]
34199fc4:	681b      	ldr	r3, [r3, #0]
34199fc6:	2b20      	cmp	r3, #32
34199fc8:	d00c      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fca:	683b      	ldr	r3, [r7, #0]
34199fcc:	681b      	ldr	r3, [r3, #0]
34199fce:	2b40      	cmp	r3, #64	@ 0x40
34199fd0:	d008      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fd2:	683b      	ldr	r3, [r7, #0]
34199fd4:	681b      	ldr	r3, [r3, #0]
34199fd6:	2b80      	cmp	r3, #128	@ 0x80
34199fd8:	d004      	beq.n	34199fe4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34199fda:	f240 1113 	movw	r1, #275	@ 0x113
34199fde:	4825      	ldr	r0, [pc, #148]	@ (3419a074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34199fe0:	f7e8 f944 	bl	3418226c <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34199fe4:	683b      	ldr	r3, [r7, #0]
34199fe6:	681b      	ldr	r3, [r3, #0]
34199fe8:	2b80      	cmp	r3, #128	@ 0x80
34199fea:	d003      	beq.n	34199ff4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
34199fec:	683b      	ldr	r3, [r7, #0]
34199fee:	681b      	ldr	r3, [r3, #0]
34199ff0:	2bff      	cmp	r3, #255	@ 0xff
34199ff2:	d904      	bls.n	34199ffe <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
34199ff4:	f44f 718a 	mov.w	r1, #276	@ 0x114
34199ff8:	481e      	ldr	r0, [pc, #120]	@ (3419a074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34199ffa:	f7e8 f937 	bl	3418226c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34199ffe:	683b      	ldr	r3, [r7, #0]
3419a000:	685b      	ldr	r3, [r3, #4]
3419a002:	2b03      	cmp	r3, #3
3419a004:	d904      	bls.n	3419a010 <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
3419a006:	f240 1115 	movw	r1, #277	@ 0x115
3419a00a:	481a      	ldr	r0, [pc, #104]	@ (3419a074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
3419a00c:	f7e8 f92e 	bl	3418226c <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
3419a010:	683b      	ldr	r3, [r7, #0]
3419a012:	681b      	ldr	r3, [r3, #0]
3419a014:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3419a016:	693b      	ldr	r3, [r7, #16]
3419a018:	fa93 f3a3 	rbit	r3, r3
3419a01c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
3419a01e:	68fb      	ldr	r3, [r7, #12]
3419a020:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
3419a022:	697b      	ldr	r3, [r7, #20]
3419a024:	2b00      	cmp	r3, #0
3419a026:	d101      	bne.n	3419a02c <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
  {
    return 32U;
3419a028:	2320      	movs	r3, #32
3419a02a:	e003      	b.n	3419a034 <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  }
  return __builtin_clz(value);
3419a02c:	697b      	ldr	r3, [r7, #20]
3419a02e:	fab3 f383 	clz	r3, r3
3419a032:	b2db      	uxtb	r3, r3
3419a034:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3419a036:	4a10      	ldr	r2, [pc, #64]	@ (3419a078 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
3419a038:	687b      	ldr	r3, [r7, #4]
3419a03a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3419a03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3419a042:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3419a044:	69bb      	ldr	r3, [r7, #24]
3419a046:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3419a04a:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3419a04c:	69fb      	ldr	r3, [r7, #28]
3419a04e:	011a      	lsls	r2, r3, #4
3419a050:	683b      	ldr	r3, [r7, #0]
3419a052:	685b      	ldr	r3, [r3, #4]
3419a054:	021b      	lsls	r3, r3, #8
3419a056:	4313      	orrs	r3, r2
3419a058:	69ba      	ldr	r2, [r7, #24]
3419a05a:	4313      	orrs	r3, r2
3419a05c:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3419a05e:	4906      	ldr	r1, [pc, #24]	@ (3419a078 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
3419a060:	687b      	ldr	r3, [r7, #4]
3419a062:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3419a066:	69ba      	ldr	r2, [r7, #24]
3419a068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3419a06c:	bf00      	nop
3419a06e:	3720      	adds	r7, #32
3419a070:	46bd      	mov	sp, r7
3419a072:	bd80      	pop	{r7, pc}
3419a074:	341a53cc 	.word	0x341a53cc
3419a078:	54024000 	.word	0x54024000

3419a07c <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
3419a07c:	b580      	push	{r7, lr}
3419a07e:	b084      	sub	sp, #16
3419a080:	af00      	add	r7, sp, #0
3419a082:	6078      	str	r0, [r7, #4]
3419a084:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3419a086:	687b      	ldr	r3, [r7, #4]
3419a088:	2b00      	cmp	r3, #0
3419a08a:	f000 82c6 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a08e:	687b      	ldr	r3, [r7, #4]
3419a090:	2b01      	cmp	r3, #1
3419a092:	f000 82c2 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a096:	687b      	ldr	r3, [r7, #4]
3419a098:	2b02      	cmp	r3, #2
3419a09a:	f000 82be 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a09e:	687b      	ldr	r3, [r7, #4]
3419a0a0:	2b03      	cmp	r3, #3
3419a0a2:	f000 82ba 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0a6:	687b      	ldr	r3, [r7, #4]
3419a0a8:	2b04      	cmp	r3, #4
3419a0aa:	f000 82b6 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0ae:	687b      	ldr	r3, [r7, #4]
3419a0b0:	2b05      	cmp	r3, #5
3419a0b2:	f000 82b2 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0b6:	687b      	ldr	r3, [r7, #4]
3419a0b8:	2b06      	cmp	r3, #6
3419a0ba:	f000 82ae 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0be:	687b      	ldr	r3, [r7, #4]
3419a0c0:	2b08      	cmp	r3, #8
3419a0c2:	f000 82aa 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0c6:	687b      	ldr	r3, [r7, #4]
3419a0c8:	2b09      	cmp	r3, #9
3419a0ca:	f000 82a6 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0ce:	687b      	ldr	r3, [r7, #4]
3419a0d0:	2b0a      	cmp	r3, #10
3419a0d2:	f000 82a2 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0d6:	687b      	ldr	r3, [r7, #4]
3419a0d8:	2b0b      	cmp	r3, #11
3419a0da:	f000 829e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0de:	687b      	ldr	r3, [r7, #4]
3419a0e0:	2b0c      	cmp	r3, #12
3419a0e2:	f000 829a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0e6:	687b      	ldr	r3, [r7, #4]
3419a0e8:	2b0d      	cmp	r3, #13
3419a0ea:	f000 8296 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0ee:	687b      	ldr	r3, [r7, #4]
3419a0f0:	2b0e      	cmp	r3, #14
3419a0f2:	f000 8292 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0f6:	687b      	ldr	r3, [r7, #4]
3419a0f8:	2b0f      	cmp	r3, #15
3419a0fa:	f000 828e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a0fe:	687b      	ldr	r3, [r7, #4]
3419a100:	2b10      	cmp	r3, #16
3419a102:	f000 828a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a106:	687b      	ldr	r3, [r7, #4]
3419a108:	2b11      	cmp	r3, #17
3419a10a:	f000 8286 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a10e:	687b      	ldr	r3, [r7, #4]
3419a110:	2b12      	cmp	r3, #18
3419a112:	f000 8282 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a116:	687b      	ldr	r3, [r7, #4]
3419a118:	2b13      	cmp	r3, #19
3419a11a:	f000 827e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a11e:	687b      	ldr	r3, [r7, #4]
3419a120:	2b14      	cmp	r3, #20
3419a122:	f000 827a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a126:	687b      	ldr	r3, [r7, #4]
3419a128:	2b15      	cmp	r3, #21
3419a12a:	f000 8276 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a12e:	687b      	ldr	r3, [r7, #4]
3419a130:	2b16      	cmp	r3, #22
3419a132:	f000 8272 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a136:	687b      	ldr	r3, [r7, #4]
3419a138:	2b17      	cmp	r3, #23
3419a13a:	f000 826e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a13e:	687b      	ldr	r3, [r7, #4]
3419a140:	2b18      	cmp	r3, #24
3419a142:	f000 826a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a146:	687b      	ldr	r3, [r7, #4]
3419a148:	2b19      	cmp	r3, #25
3419a14a:	f000 8266 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a14e:	687b      	ldr	r3, [r7, #4]
3419a150:	2b1a      	cmp	r3, #26
3419a152:	f000 8262 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a156:	687b      	ldr	r3, [r7, #4]
3419a158:	2b1b      	cmp	r3, #27
3419a15a:	f000 825e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a15e:	687b      	ldr	r3, [r7, #4]
3419a160:	2b1c      	cmp	r3, #28
3419a162:	f000 825a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a166:	687b      	ldr	r3, [r7, #4]
3419a168:	2b1d      	cmp	r3, #29
3419a16a:	f000 8256 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a16e:	687b      	ldr	r3, [r7, #4]
3419a170:	2b1e      	cmp	r3, #30
3419a172:	f000 8252 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a176:	687b      	ldr	r3, [r7, #4]
3419a178:	2b1f      	cmp	r3, #31
3419a17a:	f000 824e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a17e:	687b      	ldr	r3, [r7, #4]
3419a180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419a184:	f000 8249 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a188:	687b      	ldr	r3, [r7, #4]
3419a18a:	4aa0      	ldr	r2, [pc, #640]	@ (3419a40c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
3419a18c:	4293      	cmp	r3, r2
3419a18e:	f000 8244 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a192:	687b      	ldr	r3, [r7, #4]
3419a194:	4a9e      	ldr	r2, [pc, #632]	@ (3419a410 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
3419a196:	4293      	cmp	r3, r2
3419a198:	f000 823f 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a19c:	687b      	ldr	r3, [r7, #4]
3419a19e:	4a9d      	ldr	r2, [pc, #628]	@ (3419a414 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
3419a1a0:	4293      	cmp	r3, r2
3419a1a2:	f000 823a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1a6:	687b      	ldr	r3, [r7, #4]
3419a1a8:	4a9b      	ldr	r2, [pc, #620]	@ (3419a418 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
3419a1aa:	4293      	cmp	r3, r2
3419a1ac:	f000 8235 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1b0:	687b      	ldr	r3, [r7, #4]
3419a1b2:	4a9a      	ldr	r2, [pc, #616]	@ (3419a41c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
3419a1b4:	4293      	cmp	r3, r2
3419a1b6:	f000 8230 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1ba:	687b      	ldr	r3, [r7, #4]
3419a1bc:	4a98      	ldr	r2, [pc, #608]	@ (3419a420 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
3419a1be:	4293      	cmp	r3, r2
3419a1c0:	f000 822b 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1c4:	687b      	ldr	r3, [r7, #4]
3419a1c6:	4a97      	ldr	r2, [pc, #604]	@ (3419a424 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
3419a1c8:	4293      	cmp	r3, r2
3419a1ca:	f000 8226 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1ce:	687b      	ldr	r3, [r7, #4]
3419a1d0:	4a95      	ldr	r2, [pc, #596]	@ (3419a428 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
3419a1d2:	4293      	cmp	r3, r2
3419a1d4:	f000 8221 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1d8:	687b      	ldr	r3, [r7, #4]
3419a1da:	4a94      	ldr	r2, [pc, #592]	@ (3419a42c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
3419a1dc:	4293      	cmp	r3, r2
3419a1de:	f000 821c 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1e2:	687b      	ldr	r3, [r7, #4]
3419a1e4:	4a92      	ldr	r2, [pc, #584]	@ (3419a430 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
3419a1e6:	4293      	cmp	r3, r2
3419a1e8:	f000 8217 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1ec:	687b      	ldr	r3, [r7, #4]
3419a1ee:	4a91      	ldr	r2, [pc, #580]	@ (3419a434 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
3419a1f0:	4293      	cmp	r3, r2
3419a1f2:	f000 8212 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a1f6:	687b      	ldr	r3, [r7, #4]
3419a1f8:	4a8f      	ldr	r2, [pc, #572]	@ (3419a438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
3419a1fa:	4293      	cmp	r3, r2
3419a1fc:	f000 820d 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a200:	687b      	ldr	r3, [r7, #4]
3419a202:	4a8e      	ldr	r2, [pc, #568]	@ (3419a43c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
3419a204:	4293      	cmp	r3, r2
3419a206:	f000 8208 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a20a:	687b      	ldr	r3, [r7, #4]
3419a20c:	4a8c      	ldr	r2, [pc, #560]	@ (3419a440 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
3419a20e:	4293      	cmp	r3, r2
3419a210:	f000 8203 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a214:	687b      	ldr	r3, [r7, #4]
3419a216:	4a8b      	ldr	r2, [pc, #556]	@ (3419a444 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
3419a218:	4293      	cmp	r3, r2
3419a21a:	f000 81fe 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a21e:	687b      	ldr	r3, [r7, #4]
3419a220:	4a89      	ldr	r2, [pc, #548]	@ (3419a448 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
3419a222:	4293      	cmp	r3, r2
3419a224:	f000 81f9 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a228:	687b      	ldr	r3, [r7, #4]
3419a22a:	4a88      	ldr	r2, [pc, #544]	@ (3419a44c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
3419a22c:	4293      	cmp	r3, r2
3419a22e:	f000 81f4 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a232:	687b      	ldr	r3, [r7, #4]
3419a234:	4a86      	ldr	r2, [pc, #536]	@ (3419a450 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
3419a236:	4293      	cmp	r3, r2
3419a238:	f000 81ef 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a23c:	687b      	ldr	r3, [r7, #4]
3419a23e:	4a85      	ldr	r2, [pc, #532]	@ (3419a454 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
3419a240:	4293      	cmp	r3, r2
3419a242:	f000 81ea 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a246:	687b      	ldr	r3, [r7, #4]
3419a248:	4a83      	ldr	r2, [pc, #524]	@ (3419a458 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
3419a24a:	4293      	cmp	r3, r2
3419a24c:	f000 81e5 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a250:	687b      	ldr	r3, [r7, #4]
3419a252:	4a82      	ldr	r2, [pc, #520]	@ (3419a45c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
3419a254:	4293      	cmp	r3, r2
3419a256:	f000 81e0 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a25a:	687b      	ldr	r3, [r7, #4]
3419a25c:	4a80      	ldr	r2, [pc, #512]	@ (3419a460 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
3419a25e:	4293      	cmp	r3, r2
3419a260:	f000 81db 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a264:	687b      	ldr	r3, [r7, #4]
3419a266:	4a7f      	ldr	r2, [pc, #508]	@ (3419a464 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
3419a268:	4293      	cmp	r3, r2
3419a26a:	f000 81d6 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a26e:	687b      	ldr	r3, [r7, #4]
3419a270:	4a7d      	ldr	r2, [pc, #500]	@ (3419a468 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
3419a272:	4293      	cmp	r3, r2
3419a274:	f000 81d1 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a278:	687b      	ldr	r3, [r7, #4]
3419a27a:	4a7c      	ldr	r2, [pc, #496]	@ (3419a46c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
3419a27c:	4293      	cmp	r3, r2
3419a27e:	f000 81cc 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a282:	687b      	ldr	r3, [r7, #4]
3419a284:	4a7a      	ldr	r2, [pc, #488]	@ (3419a470 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
3419a286:	4293      	cmp	r3, r2
3419a288:	f000 81c7 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a28c:	687b      	ldr	r3, [r7, #4]
3419a28e:	4a79      	ldr	r2, [pc, #484]	@ (3419a474 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
3419a290:	4293      	cmp	r3, r2
3419a292:	f000 81c2 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a296:	687b      	ldr	r3, [r7, #4]
3419a298:	4a77      	ldr	r2, [pc, #476]	@ (3419a478 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
3419a29a:	4293      	cmp	r3, r2
3419a29c:	f000 81bd 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2a0:	687b      	ldr	r3, [r7, #4]
3419a2a2:	4a76      	ldr	r2, [pc, #472]	@ (3419a47c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
3419a2a4:	4293      	cmp	r3, r2
3419a2a6:	f000 81b8 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2aa:	687b      	ldr	r3, [r7, #4]
3419a2ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3419a2b0:	f000 81b3 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2b4:	687b      	ldr	r3, [r7, #4]
3419a2b6:	4a72      	ldr	r2, [pc, #456]	@ (3419a480 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
3419a2b8:	4293      	cmp	r3, r2
3419a2ba:	f000 81ae 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2be:	687b      	ldr	r3, [r7, #4]
3419a2c0:	4a70      	ldr	r2, [pc, #448]	@ (3419a484 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
3419a2c2:	4293      	cmp	r3, r2
3419a2c4:	f000 81a9 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2c8:	687b      	ldr	r3, [r7, #4]
3419a2ca:	4a6f      	ldr	r2, [pc, #444]	@ (3419a488 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
3419a2cc:	4293      	cmp	r3, r2
3419a2ce:	f000 81a4 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2d2:	687b      	ldr	r3, [r7, #4]
3419a2d4:	4a6d      	ldr	r2, [pc, #436]	@ (3419a48c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
3419a2d6:	4293      	cmp	r3, r2
3419a2d8:	f000 819f 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2dc:	687b      	ldr	r3, [r7, #4]
3419a2de:	4a6c      	ldr	r2, [pc, #432]	@ (3419a490 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
3419a2e0:	4293      	cmp	r3, r2
3419a2e2:	f000 819a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2e6:	687b      	ldr	r3, [r7, #4]
3419a2e8:	4a6a      	ldr	r2, [pc, #424]	@ (3419a494 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
3419a2ea:	4293      	cmp	r3, r2
3419a2ec:	f000 8195 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2f0:	687b      	ldr	r3, [r7, #4]
3419a2f2:	4a69      	ldr	r2, [pc, #420]	@ (3419a498 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
3419a2f4:	4293      	cmp	r3, r2
3419a2f6:	f000 8190 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a2fa:	687b      	ldr	r3, [r7, #4]
3419a2fc:	4a67      	ldr	r2, [pc, #412]	@ (3419a49c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
3419a2fe:	4293      	cmp	r3, r2
3419a300:	f000 818b 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a304:	687b      	ldr	r3, [r7, #4]
3419a306:	4a66      	ldr	r2, [pc, #408]	@ (3419a4a0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
3419a308:	4293      	cmp	r3, r2
3419a30a:	f000 8186 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a30e:	687b      	ldr	r3, [r7, #4]
3419a310:	4a64      	ldr	r2, [pc, #400]	@ (3419a4a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
3419a312:	4293      	cmp	r3, r2
3419a314:	f000 8181 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a318:	687b      	ldr	r3, [r7, #4]
3419a31a:	4a63      	ldr	r2, [pc, #396]	@ (3419a4a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
3419a31c:	4293      	cmp	r3, r2
3419a31e:	f000 817c 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a322:	687b      	ldr	r3, [r7, #4]
3419a324:	4a61      	ldr	r2, [pc, #388]	@ (3419a4ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
3419a326:	4293      	cmp	r3, r2
3419a328:	f000 8177 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a32c:	687b      	ldr	r3, [r7, #4]
3419a32e:	4a60      	ldr	r2, [pc, #384]	@ (3419a4b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
3419a330:	4293      	cmp	r3, r2
3419a332:	f000 8172 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a336:	687b      	ldr	r3, [r7, #4]
3419a338:	4a5e      	ldr	r2, [pc, #376]	@ (3419a4b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
3419a33a:	4293      	cmp	r3, r2
3419a33c:	f000 816d 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a340:	687b      	ldr	r3, [r7, #4]
3419a342:	4a5d      	ldr	r2, [pc, #372]	@ (3419a4b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
3419a344:	4293      	cmp	r3, r2
3419a346:	f000 8168 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a34a:	687b      	ldr	r3, [r7, #4]
3419a34c:	4a5b      	ldr	r2, [pc, #364]	@ (3419a4bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
3419a34e:	4293      	cmp	r3, r2
3419a350:	f000 8163 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a354:	687b      	ldr	r3, [r7, #4]
3419a356:	4a5a      	ldr	r2, [pc, #360]	@ (3419a4c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
3419a358:	4293      	cmp	r3, r2
3419a35a:	f000 815e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a35e:	687b      	ldr	r3, [r7, #4]
3419a360:	4a58      	ldr	r2, [pc, #352]	@ (3419a4c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
3419a362:	4293      	cmp	r3, r2
3419a364:	f000 8159 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a368:	687b      	ldr	r3, [r7, #4]
3419a36a:	4a57      	ldr	r2, [pc, #348]	@ (3419a4c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
3419a36c:	4293      	cmp	r3, r2
3419a36e:	f000 8154 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a372:	687b      	ldr	r3, [r7, #4]
3419a374:	4a55      	ldr	r2, [pc, #340]	@ (3419a4cc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
3419a376:	4293      	cmp	r3, r2
3419a378:	f000 814f 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a37c:	687b      	ldr	r3, [r7, #4]
3419a37e:	4a54      	ldr	r2, [pc, #336]	@ (3419a4d0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
3419a380:	4293      	cmp	r3, r2
3419a382:	f000 814a 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a386:	687b      	ldr	r3, [r7, #4]
3419a388:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3419a38c:	f000 8145 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a390:	687b      	ldr	r3, [r7, #4]
3419a392:	4a50      	ldr	r2, [pc, #320]	@ (3419a4d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
3419a394:	4293      	cmp	r3, r2
3419a396:	f000 8140 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a39a:	687b      	ldr	r3, [r7, #4]
3419a39c:	4a4e      	ldr	r2, [pc, #312]	@ (3419a4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
3419a39e:	4293      	cmp	r3, r2
3419a3a0:	f000 813b 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3a4:	687b      	ldr	r3, [r7, #4]
3419a3a6:	4a4d      	ldr	r2, [pc, #308]	@ (3419a4dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
3419a3a8:	4293      	cmp	r3, r2
3419a3aa:	f000 8136 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3ae:	687b      	ldr	r3, [r7, #4]
3419a3b0:	4a4b      	ldr	r2, [pc, #300]	@ (3419a4e0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
3419a3b2:	4293      	cmp	r3, r2
3419a3b4:	f000 8131 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3b8:	687b      	ldr	r3, [r7, #4]
3419a3ba:	4a4a      	ldr	r2, [pc, #296]	@ (3419a4e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
3419a3bc:	4293      	cmp	r3, r2
3419a3be:	f000 812c 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3c2:	687b      	ldr	r3, [r7, #4]
3419a3c4:	4a48      	ldr	r2, [pc, #288]	@ (3419a4e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
3419a3c6:	4293      	cmp	r3, r2
3419a3c8:	f000 8127 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3cc:	687b      	ldr	r3, [r7, #4]
3419a3ce:	4a47      	ldr	r2, [pc, #284]	@ (3419a4ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
3419a3d0:	4293      	cmp	r3, r2
3419a3d2:	f000 8122 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3d6:	687b      	ldr	r3, [r7, #4]
3419a3d8:	4a45      	ldr	r2, [pc, #276]	@ (3419a4f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
3419a3da:	4293      	cmp	r3, r2
3419a3dc:	f000 811d 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3e0:	687b      	ldr	r3, [r7, #4]
3419a3e2:	4a44      	ldr	r2, [pc, #272]	@ (3419a4f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
3419a3e4:	4293      	cmp	r3, r2
3419a3e6:	f000 8118 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3ea:	687b      	ldr	r3, [r7, #4]
3419a3ec:	4a42      	ldr	r2, [pc, #264]	@ (3419a4f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
3419a3ee:	4293      	cmp	r3, r2
3419a3f0:	f000 8113 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3f4:	687b      	ldr	r3, [r7, #4]
3419a3f6:	4a41      	ldr	r2, [pc, #260]	@ (3419a4fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
3419a3f8:	4293      	cmp	r3, r2
3419a3fa:	f000 810e 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a3fe:	687b      	ldr	r3, [r7, #4]
3419a400:	4a3f      	ldr	r2, [pc, #252]	@ (3419a500 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
3419a402:	4293      	cmp	r3, r2
3419a404:	f000 8109 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a408:	e07c      	b.n	3419a504 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
3419a40a:	bf00      	nop
3419a40c:	10000001 	.word	0x10000001
3419a410:	10000002 	.word	0x10000002
3419a414:	10000003 	.word	0x10000003
3419a418:	10000004 	.word	0x10000004
3419a41c:	10000005 	.word	0x10000005
3419a420:	10000006 	.word	0x10000006
3419a424:	10000007 	.word	0x10000007
3419a428:	10000008 	.word	0x10000008
3419a42c:	10000009 	.word	0x10000009
3419a430:	1000000a 	.word	0x1000000a
3419a434:	1000000b 	.word	0x1000000b
3419a438:	1000000c 	.word	0x1000000c
3419a43c:	1000000d 	.word	0x1000000d
3419a440:	1000000e 	.word	0x1000000e
3419a444:	1000000f 	.word	0x1000000f
3419a448:	10000010 	.word	0x10000010
3419a44c:	10000011 	.word	0x10000011
3419a450:	10000012 	.word	0x10000012
3419a454:	10000013 	.word	0x10000013
3419a458:	10000014 	.word	0x10000014
3419a45c:	10000015 	.word	0x10000015
3419a460:	10000016 	.word	0x10000016
3419a464:	10000017 	.word	0x10000017
3419a468:	10000018 	.word	0x10000018
3419a46c:	10000019 	.word	0x10000019
3419a470:	1000001a 	.word	0x1000001a
3419a474:	1000001c 	.word	0x1000001c
3419a478:	1000001d 	.word	0x1000001d
3419a47c:	1000001e 	.word	0x1000001e
3419a480:	20000001 	.word	0x20000001
3419a484:	20000003 	.word	0x20000003
3419a488:	20000004 	.word	0x20000004
3419a48c:	20000005 	.word	0x20000005
3419a490:	2000000c 	.word	0x2000000c
3419a494:	2000000d 	.word	0x2000000d
3419a498:	2000000e 	.word	0x2000000e
3419a49c:	2000000f 	.word	0x2000000f
3419a4a0:	20000010 	.word	0x20000010
3419a4a4:	20000011 	.word	0x20000011
3419a4a8:	20000012 	.word	0x20000012
3419a4ac:	20000013 	.word	0x20000013
3419a4b0:	20000014 	.word	0x20000014
3419a4b4:	20000016 	.word	0x20000016
3419a4b8:	20000017 	.word	0x20000017
3419a4bc:	20000018 	.word	0x20000018
3419a4c0:	20000019 	.word	0x20000019
3419a4c4:	2000001a 	.word	0x2000001a
3419a4c8:	2000001c 	.word	0x2000001c
3419a4cc:	2000001d 	.word	0x2000001d
3419a4d0:	2000001e 	.word	0x2000001e
3419a4d4:	30000001 	.word	0x30000001
3419a4d8:	30000002 	.word	0x30000002
3419a4dc:	30000003 	.word	0x30000003
3419a4e0:	30000004 	.word	0x30000004
3419a4e4:	30000005 	.word	0x30000005
3419a4e8:	30000006 	.word	0x30000006
3419a4ec:	30000007 	.word	0x30000007
3419a4f0:	30000008 	.word	0x30000008
3419a4f4:	3000000a 	.word	0x3000000a
3419a4f8:	40000002 	.word	0x40000002
3419a4fc:	40000003 	.word	0x40000003
3419a500:	40000005 	.word	0x40000005
3419a504:	687b      	ldr	r3, [r7, #4]
3419a506:	4a6d      	ldr	r2, [pc, #436]	@ (3419a6bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
3419a508:	4293      	cmp	r3, r2
3419a50a:	f000 8086 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a50e:	687b      	ldr	r3, [r7, #4]
3419a510:	4a6b      	ldr	r2, [pc, #428]	@ (3419a6c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
3419a512:	4293      	cmp	r3, r2
3419a514:	f000 8081 	beq.w	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a518:	687b      	ldr	r3, [r7, #4]
3419a51a:	4a6a      	ldr	r2, [pc, #424]	@ (3419a6c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
3419a51c:	4293      	cmp	r3, r2
3419a51e:	d07c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a520:	687b      	ldr	r3, [r7, #4]
3419a522:	4a69      	ldr	r2, [pc, #420]	@ (3419a6c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
3419a524:	4293      	cmp	r3, r2
3419a526:	d078      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a528:	687b      	ldr	r3, [r7, #4]
3419a52a:	4a68      	ldr	r2, [pc, #416]	@ (3419a6cc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
3419a52c:	4293      	cmp	r3, r2
3419a52e:	d074      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a530:	687b      	ldr	r3, [r7, #4]
3419a532:	4a67      	ldr	r2, [pc, #412]	@ (3419a6d0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
3419a534:	4293      	cmp	r3, r2
3419a536:	d070      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a538:	687b      	ldr	r3, [r7, #4]
3419a53a:	4a66      	ldr	r2, [pc, #408]	@ (3419a6d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
3419a53c:	4293      	cmp	r3, r2
3419a53e:	d06c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a540:	687b      	ldr	r3, [r7, #4]
3419a542:	4a65      	ldr	r2, [pc, #404]	@ (3419a6d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
3419a544:	4293      	cmp	r3, r2
3419a546:	d068      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a548:	687b      	ldr	r3, [r7, #4]
3419a54a:	4a64      	ldr	r2, [pc, #400]	@ (3419a6dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
3419a54c:	4293      	cmp	r3, r2
3419a54e:	d064      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a550:	687b      	ldr	r3, [r7, #4]
3419a552:	4a63      	ldr	r2, [pc, #396]	@ (3419a6e0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
3419a554:	4293      	cmp	r3, r2
3419a556:	d060      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a558:	687b      	ldr	r3, [r7, #4]
3419a55a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3419a55e:	d05c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a560:	687b      	ldr	r3, [r7, #4]
3419a562:	4a60      	ldr	r2, [pc, #384]	@ (3419a6e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
3419a564:	4293      	cmp	r3, r2
3419a566:	d058      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a568:	687b      	ldr	r3, [r7, #4]
3419a56a:	4a5f      	ldr	r2, [pc, #380]	@ (3419a6e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
3419a56c:	4293      	cmp	r3, r2
3419a56e:	d054      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a570:	687b      	ldr	r3, [r7, #4]
3419a572:	4a5e      	ldr	r2, [pc, #376]	@ (3419a6ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
3419a574:	4293      	cmp	r3, r2
3419a576:	d050      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a578:	687b      	ldr	r3, [r7, #4]
3419a57a:	4a5d      	ldr	r2, [pc, #372]	@ (3419a6f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
3419a57c:	4293      	cmp	r3, r2
3419a57e:	d04c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a580:	687b      	ldr	r3, [r7, #4]
3419a582:	4a5c      	ldr	r2, [pc, #368]	@ (3419a6f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
3419a584:	4293      	cmp	r3, r2
3419a586:	d048      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a588:	687b      	ldr	r3, [r7, #4]
3419a58a:	4a5b      	ldr	r2, [pc, #364]	@ (3419a6f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
3419a58c:	4293      	cmp	r3, r2
3419a58e:	d044      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a590:	687b      	ldr	r3, [r7, #4]
3419a592:	4a5a      	ldr	r2, [pc, #360]	@ (3419a6fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
3419a594:	4293      	cmp	r3, r2
3419a596:	d040      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a598:	687b      	ldr	r3, [r7, #4]
3419a59a:	4a59      	ldr	r2, [pc, #356]	@ (3419a700 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
3419a59c:	4293      	cmp	r3, r2
3419a59e:	d03c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5a0:	687b      	ldr	r3, [r7, #4]
3419a5a2:	4a58      	ldr	r2, [pc, #352]	@ (3419a704 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
3419a5a4:	4293      	cmp	r3, r2
3419a5a6:	d038      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5a8:	687b      	ldr	r3, [r7, #4]
3419a5aa:	4a57      	ldr	r2, [pc, #348]	@ (3419a708 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
3419a5ac:	4293      	cmp	r3, r2
3419a5ae:	d034      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5b0:	687b      	ldr	r3, [r7, #4]
3419a5b2:	4a56      	ldr	r2, [pc, #344]	@ (3419a70c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
3419a5b4:	4293      	cmp	r3, r2
3419a5b6:	d030      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5b8:	687b      	ldr	r3, [r7, #4]
3419a5ba:	4a55      	ldr	r2, [pc, #340]	@ (3419a710 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
3419a5bc:	4293      	cmp	r3, r2
3419a5be:	d02c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5c0:	687b      	ldr	r3, [r7, #4]
3419a5c2:	4a54      	ldr	r2, [pc, #336]	@ (3419a714 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
3419a5c4:	4293      	cmp	r3, r2
3419a5c6:	d028      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5c8:	687b      	ldr	r3, [r7, #4]
3419a5ca:	4a53      	ldr	r2, [pc, #332]	@ (3419a718 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
3419a5cc:	4293      	cmp	r3, r2
3419a5ce:	d024      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5d0:	687b      	ldr	r3, [r7, #4]
3419a5d2:	4a52      	ldr	r2, [pc, #328]	@ (3419a71c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
3419a5d4:	4293      	cmp	r3, r2
3419a5d6:	d020      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5d8:	687b      	ldr	r3, [r7, #4]
3419a5da:	4a51      	ldr	r2, [pc, #324]	@ (3419a720 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
3419a5dc:	4293      	cmp	r3, r2
3419a5de:	d01c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5e0:	687b      	ldr	r3, [r7, #4]
3419a5e2:	4a50      	ldr	r2, [pc, #320]	@ (3419a724 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
3419a5e4:	4293      	cmp	r3, r2
3419a5e6:	d018      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5e8:	687b      	ldr	r3, [r7, #4]
3419a5ea:	4a4f      	ldr	r2, [pc, #316]	@ (3419a728 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
3419a5ec:	4293      	cmp	r3, r2
3419a5ee:	d014      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5f0:	687b      	ldr	r3, [r7, #4]
3419a5f2:	4a4e      	ldr	r2, [pc, #312]	@ (3419a72c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
3419a5f4:	4293      	cmp	r3, r2
3419a5f6:	d010      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a5f8:	687b      	ldr	r3, [r7, #4]
3419a5fa:	4a4d      	ldr	r2, [pc, #308]	@ (3419a730 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
3419a5fc:	4293      	cmp	r3, r2
3419a5fe:	d00c      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a600:	687b      	ldr	r3, [r7, #4]
3419a602:	4a4c      	ldr	r2, [pc, #304]	@ (3419a734 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
3419a604:	4293      	cmp	r3, r2
3419a606:	d008      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a608:	687b      	ldr	r3, [r7, #4]
3419a60a:	4a4b      	ldr	r2, [pc, #300]	@ (3419a738 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
3419a60c:	4293      	cmp	r3, r2
3419a60e:	d004      	beq.n	3419a61a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3419a610:	f240 1173 	movw	r1, #371	@ 0x173
3419a614:	4849      	ldr	r0, [pc, #292]	@ (3419a73c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
3419a616:	f7e7 fe29 	bl	3418226c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3419a61a:	683b      	ldr	r3, [r7, #0]
3419a61c:	2b03      	cmp	r3, #3
3419a61e:	d904      	bls.n	3419a62a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
3419a620:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3419a624:	4845      	ldr	r0, [pc, #276]	@ (3419a73c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
3419a626:	f7e7 fe21 	bl	3418226c <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3419a62a:	4a45      	ldr	r2, [pc, #276]	@ (3419a740 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3419a62c:	687b      	ldr	r3, [r7, #4]
3419a62e:	0f1b      	lsrs	r3, r3, #28
3419a630:	3304      	adds	r3, #4
3419a632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3419a636:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3419a638:	687b      	ldr	r3, [r7, #4]
3419a63a:	f003 031f 	and.w	r3, r3, #31
3419a63e:	2201      	movs	r2, #1
3419a640:	fa02 f303 	lsl.w	r3, r2, r3
3419a644:	43da      	mvns	r2, r3
3419a646:	68fb      	ldr	r3, [r7, #12]
3419a648:	4013      	ands	r3, r2
3419a64a:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3419a64c:	683b      	ldr	r3, [r7, #0]
3419a64e:	f003 0201 	and.w	r2, r3, #1
3419a652:	687b      	ldr	r3, [r7, #4]
3419a654:	f003 031f 	and.w	r3, r3, #31
3419a658:	409a      	lsls	r2, r3
3419a65a:	68fb      	ldr	r3, [r7, #12]
3419a65c:	4313      	orrs	r3, r2
3419a65e:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3419a660:	4937      	ldr	r1, [pc, #220]	@ (3419a740 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3419a662:	687b      	ldr	r3, [r7, #4]
3419a664:	0f1b      	lsrs	r3, r3, #28
3419a666:	68fa      	ldr	r2, [r7, #12]
3419a668:	3304      	adds	r3, #4
3419a66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3419a66e:	4a34      	ldr	r2, [pc, #208]	@ (3419a740 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3419a670:	687b      	ldr	r3, [r7, #4]
3419a672:	0f1b      	lsrs	r3, r3, #28
3419a674:	330c      	adds	r3, #12
3419a676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3419a67a:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3419a67c:	687b      	ldr	r3, [r7, #4]
3419a67e:	f003 031f 	and.w	r3, r3, #31
3419a682:	2201      	movs	r2, #1
3419a684:	fa02 f303 	lsl.w	r3, r2, r3
3419a688:	43da      	mvns	r2, r3
3419a68a:	68fb      	ldr	r3, [r7, #12]
3419a68c:	4013      	ands	r3, r2
3419a68e:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3419a690:	683b      	ldr	r3, [r7, #0]
3419a692:	085b      	lsrs	r3, r3, #1
3419a694:	f003 0201 	and.w	r2, r3, #1
3419a698:	687b      	ldr	r3, [r7, #4]
3419a69a:	f003 031f 	and.w	r3, r3, #31
3419a69e:	409a      	lsls	r2, r3
3419a6a0:	68fb      	ldr	r3, [r7, #12]
3419a6a2:	4313      	orrs	r3, r2
3419a6a4:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3419a6a6:	4926      	ldr	r1, [pc, #152]	@ (3419a740 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3419a6a8:	687b      	ldr	r3, [r7, #4]
3419a6aa:	0f1b      	lsrs	r3, r3, #28
3419a6ac:	68fa      	ldr	r2, [r7, #12]
3419a6ae:	330c      	adds	r3, #12
3419a6b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3419a6b4:	bf00      	nop
3419a6b6:	3710      	adds	r7, #16
3419a6b8:	46bd      	mov	sp, r7
3419a6ba:	bd80      	pop	{r7, pc}
3419a6bc:	4000000c 	.word	0x4000000c
3419a6c0:	4000000d 	.word	0x4000000d
3419a6c4:	40000011 	.word	0x40000011
3419a6c8:	40000012 	.word	0x40000012
3419a6cc:	40000013 	.word	0x40000013
3419a6d0:	40000019 	.word	0x40000019
3419a6d4:	4000001b 	.word	0x4000001b
3419a6d8:	4000001c 	.word	0x4000001c
3419a6dc:	4000001d 	.word	0x4000001d
3419a6e0:	4000001f 	.word	0x4000001f
3419a6e4:	50000001 	.word	0x50000001
3419a6e8:	50000002 	.word	0x50000002
3419a6ec:	50000003 	.word	0x50000003
3419a6f0:	50000004 	.word	0x50000004
3419a6f4:	50000005 	.word	0x50000005
3419a6f8:	50000006 	.word	0x50000006
3419a6fc:	50000008 	.word	0x50000008
3419a700:	50000009 	.word	0x50000009
3419a704:	5000000a 	.word	0x5000000a
3419a708:	5000000b 	.word	0x5000000b
3419a70c:	5000000d 	.word	0x5000000d
3419a710:	5000000e 	.word	0x5000000e
3419a714:	5000000f 	.word	0x5000000f
3419a718:	50000011 	.word	0x50000011
3419a71c:	50000012 	.word	0x50000012
3419a720:	50000013 	.word	0x50000013
3419a724:	50000014 	.word	0x50000014
3419a728:	50000016 	.word	0x50000016
3419a72c:	50000017 	.word	0x50000017
3419a730:	50000018 	.word	0x50000018
3419a734:	5000001b 	.word	0x5000001b
3419a738:	5000001e 	.word	0x5000001e
3419a73c:	341a53cc 	.word	0x341a53cc
3419a740:	54024000 	.word	0x54024000

3419a744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3419a744:	b580      	push	{r7, lr}
3419a746:	b082      	sub	sp, #8
3419a748:	af00      	add	r7, sp, #0
3419a74a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3419a74c:	687b      	ldr	r3, [r7, #4]
3419a74e:	2b00      	cmp	r3, #0
3419a750:	d101      	bne.n	3419a756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3419a752:	2301      	movs	r3, #1
3419a754:	e16e      	b.n	3419aa34 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3419a756:	687b      	ldr	r3, [r7, #4]
3419a758:	699b      	ldr	r3, [r3, #24]
3419a75a:	2b00      	cmp	r3, #0
3419a75c:	f000 8088 	beq.w	3419a870 <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3419a760:	687b      	ldr	r3, [r7, #4]
3419a762:	681b      	ldr	r3, [r3, #0]
3419a764:	4a8f      	ldr	r2, [pc, #572]	@ (3419a9a4 <HAL_UART_Init+0x260>)
3419a766:	4293      	cmp	r3, r2
3419a768:	f000 80f5 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a76c:	687b      	ldr	r3, [r7, #4]
3419a76e:	681b      	ldr	r3, [r3, #0]
3419a770:	4a8d      	ldr	r2, [pc, #564]	@ (3419a9a8 <HAL_UART_Init+0x264>)
3419a772:	4293      	cmp	r3, r2
3419a774:	f000 80ef 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a778:	687b      	ldr	r3, [r7, #4]
3419a77a:	681b      	ldr	r3, [r3, #0]
3419a77c:	4a8b      	ldr	r2, [pc, #556]	@ (3419a9ac <HAL_UART_Init+0x268>)
3419a77e:	4293      	cmp	r3, r2
3419a780:	f000 80e9 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a784:	687b      	ldr	r3, [r7, #4]
3419a786:	681b      	ldr	r3, [r3, #0]
3419a788:	4a89      	ldr	r2, [pc, #548]	@ (3419a9b0 <HAL_UART_Init+0x26c>)
3419a78a:	4293      	cmp	r3, r2
3419a78c:	f000 80e3 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a790:	687b      	ldr	r3, [r7, #4]
3419a792:	681b      	ldr	r3, [r3, #0]
3419a794:	4a87      	ldr	r2, [pc, #540]	@ (3419a9b4 <HAL_UART_Init+0x270>)
3419a796:	4293      	cmp	r3, r2
3419a798:	f000 80dd 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a79c:	687b      	ldr	r3, [r7, #4]
3419a79e:	681b      	ldr	r3, [r3, #0]
3419a7a0:	4a85      	ldr	r2, [pc, #532]	@ (3419a9b8 <HAL_UART_Init+0x274>)
3419a7a2:	4293      	cmp	r3, r2
3419a7a4:	f000 80d7 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7a8:	687b      	ldr	r3, [r7, #4]
3419a7aa:	681b      	ldr	r3, [r3, #0]
3419a7ac:	4a83      	ldr	r2, [pc, #524]	@ (3419a9bc <HAL_UART_Init+0x278>)
3419a7ae:	4293      	cmp	r3, r2
3419a7b0:	f000 80d1 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7b4:	687b      	ldr	r3, [r7, #4]
3419a7b6:	681b      	ldr	r3, [r3, #0]
3419a7b8:	4a81      	ldr	r2, [pc, #516]	@ (3419a9c0 <HAL_UART_Init+0x27c>)
3419a7ba:	4293      	cmp	r3, r2
3419a7bc:	f000 80cb 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7c0:	687b      	ldr	r3, [r7, #4]
3419a7c2:	681b      	ldr	r3, [r3, #0]
3419a7c4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3419a7c8:	f000 80c5 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7cc:	687b      	ldr	r3, [r7, #4]
3419a7ce:	681b      	ldr	r3, [r3, #0]
3419a7d0:	4a7c      	ldr	r2, [pc, #496]	@ (3419a9c4 <HAL_UART_Init+0x280>)
3419a7d2:	4293      	cmp	r3, r2
3419a7d4:	f000 80bf 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7d8:	687b      	ldr	r3, [r7, #4]
3419a7da:	681b      	ldr	r3, [r3, #0]
3419a7dc:	4a7a      	ldr	r2, [pc, #488]	@ (3419a9c8 <HAL_UART_Init+0x284>)
3419a7de:	4293      	cmp	r3, r2
3419a7e0:	f000 80b9 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7e4:	687b      	ldr	r3, [r7, #4]
3419a7e6:	681b      	ldr	r3, [r3, #0]
3419a7e8:	4a78      	ldr	r2, [pc, #480]	@ (3419a9cc <HAL_UART_Init+0x288>)
3419a7ea:	4293      	cmp	r3, r2
3419a7ec:	f000 80b3 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7f0:	687b      	ldr	r3, [r7, #4]
3419a7f2:	681b      	ldr	r3, [r3, #0]
3419a7f4:	4a76      	ldr	r2, [pc, #472]	@ (3419a9d0 <HAL_UART_Init+0x28c>)
3419a7f6:	4293      	cmp	r3, r2
3419a7f8:	f000 80ad 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a7fc:	687b      	ldr	r3, [r7, #4]
3419a7fe:	681b      	ldr	r3, [r3, #0]
3419a800:	4a74      	ldr	r2, [pc, #464]	@ (3419a9d4 <HAL_UART_Init+0x290>)
3419a802:	4293      	cmp	r3, r2
3419a804:	f000 80a7 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a808:	687b      	ldr	r3, [r7, #4]
3419a80a:	681b      	ldr	r3, [r3, #0]
3419a80c:	4a72      	ldr	r2, [pc, #456]	@ (3419a9d8 <HAL_UART_Init+0x294>)
3419a80e:	4293      	cmp	r3, r2
3419a810:	f000 80a1 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a814:	687b      	ldr	r3, [r7, #4]
3419a816:	681b      	ldr	r3, [r3, #0]
3419a818:	4a70      	ldr	r2, [pc, #448]	@ (3419a9dc <HAL_UART_Init+0x298>)
3419a81a:	4293      	cmp	r3, r2
3419a81c:	f000 809b 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a820:	687b      	ldr	r3, [r7, #4]
3419a822:	681b      	ldr	r3, [r3, #0]
3419a824:	4a6e      	ldr	r2, [pc, #440]	@ (3419a9e0 <HAL_UART_Init+0x29c>)
3419a826:	4293      	cmp	r3, r2
3419a828:	f000 8095 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a82c:	687b      	ldr	r3, [r7, #4]
3419a82e:	681b      	ldr	r3, [r3, #0]
3419a830:	4a6c      	ldr	r2, [pc, #432]	@ (3419a9e4 <HAL_UART_Init+0x2a0>)
3419a832:	4293      	cmp	r3, r2
3419a834:	f000 808f 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a838:	687b      	ldr	r3, [r7, #4]
3419a83a:	681b      	ldr	r3, [r3, #0]
3419a83c:	4a6a      	ldr	r2, [pc, #424]	@ (3419a9e8 <HAL_UART_Init+0x2a4>)
3419a83e:	4293      	cmp	r3, r2
3419a840:	f000 8089 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a844:	687b      	ldr	r3, [r7, #4]
3419a846:	681b      	ldr	r3, [r3, #0]
3419a848:	4a68      	ldr	r2, [pc, #416]	@ (3419a9ec <HAL_UART_Init+0x2a8>)
3419a84a:	4293      	cmp	r3, r2
3419a84c:	f000 8083 	beq.w	3419a956 <HAL_UART_Init+0x212>
3419a850:	687b      	ldr	r3, [r7, #4]
3419a852:	681b      	ldr	r3, [r3, #0]
3419a854:	4a66      	ldr	r2, [pc, #408]	@ (3419a9f0 <HAL_UART_Init+0x2ac>)
3419a856:	4293      	cmp	r3, r2
3419a858:	d07d      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a85a:	687b      	ldr	r3, [r7, #4]
3419a85c:	681b      	ldr	r3, [r3, #0]
3419a85e:	4a65      	ldr	r2, [pc, #404]	@ (3419a9f4 <HAL_UART_Init+0x2b0>)
3419a860:	4293      	cmp	r3, r2
3419a862:	d078      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a864:	f44f 71a0 	mov.w	r1, #320	@ 0x140
3419a868:	4863      	ldr	r0, [pc, #396]	@ (3419a9f8 <HAL_UART_Init+0x2b4>)
3419a86a:	f7e7 fcff 	bl	3418226c <assert_failed>
3419a86e:	e072      	b.n	3419a956 <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3419a870:	687b      	ldr	r3, [r7, #4]
3419a872:	681b      	ldr	r3, [r3, #0]
3419a874:	4a4b      	ldr	r2, [pc, #300]	@ (3419a9a4 <HAL_UART_Init+0x260>)
3419a876:	4293      	cmp	r3, r2
3419a878:	d06d      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a87a:	687b      	ldr	r3, [r7, #4]
3419a87c:	681b      	ldr	r3, [r3, #0]
3419a87e:	4a4a      	ldr	r2, [pc, #296]	@ (3419a9a8 <HAL_UART_Init+0x264>)
3419a880:	4293      	cmp	r3, r2
3419a882:	d068      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a884:	687b      	ldr	r3, [r7, #4]
3419a886:	681b      	ldr	r3, [r3, #0]
3419a888:	4a48      	ldr	r2, [pc, #288]	@ (3419a9ac <HAL_UART_Init+0x268>)
3419a88a:	4293      	cmp	r3, r2
3419a88c:	d063      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a88e:	687b      	ldr	r3, [r7, #4]
3419a890:	681b      	ldr	r3, [r3, #0]
3419a892:	4a47      	ldr	r2, [pc, #284]	@ (3419a9b0 <HAL_UART_Init+0x26c>)
3419a894:	4293      	cmp	r3, r2
3419a896:	d05e      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a898:	687b      	ldr	r3, [r7, #4]
3419a89a:	681b      	ldr	r3, [r3, #0]
3419a89c:	4a45      	ldr	r2, [pc, #276]	@ (3419a9b4 <HAL_UART_Init+0x270>)
3419a89e:	4293      	cmp	r3, r2
3419a8a0:	d059      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8a2:	687b      	ldr	r3, [r7, #4]
3419a8a4:	681b      	ldr	r3, [r3, #0]
3419a8a6:	4a44      	ldr	r2, [pc, #272]	@ (3419a9b8 <HAL_UART_Init+0x274>)
3419a8a8:	4293      	cmp	r3, r2
3419a8aa:	d054      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8ac:	687b      	ldr	r3, [r7, #4]
3419a8ae:	681b      	ldr	r3, [r3, #0]
3419a8b0:	4a42      	ldr	r2, [pc, #264]	@ (3419a9bc <HAL_UART_Init+0x278>)
3419a8b2:	4293      	cmp	r3, r2
3419a8b4:	d04f      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8b6:	687b      	ldr	r3, [r7, #4]
3419a8b8:	681b      	ldr	r3, [r3, #0]
3419a8ba:	4a41      	ldr	r2, [pc, #260]	@ (3419a9c0 <HAL_UART_Init+0x27c>)
3419a8bc:	4293      	cmp	r3, r2
3419a8be:	d04a      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8c0:	687b      	ldr	r3, [r7, #4]
3419a8c2:	681b      	ldr	r3, [r3, #0]
3419a8c4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3419a8c8:	d045      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8ca:	687b      	ldr	r3, [r7, #4]
3419a8cc:	681b      	ldr	r3, [r3, #0]
3419a8ce:	4a3d      	ldr	r2, [pc, #244]	@ (3419a9c4 <HAL_UART_Init+0x280>)
3419a8d0:	4293      	cmp	r3, r2
3419a8d2:	d040      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8d4:	687b      	ldr	r3, [r7, #4]
3419a8d6:	681b      	ldr	r3, [r3, #0]
3419a8d8:	4a3b      	ldr	r2, [pc, #236]	@ (3419a9c8 <HAL_UART_Init+0x284>)
3419a8da:	4293      	cmp	r3, r2
3419a8dc:	d03b      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8de:	687b      	ldr	r3, [r7, #4]
3419a8e0:	681b      	ldr	r3, [r3, #0]
3419a8e2:	4a3a      	ldr	r2, [pc, #232]	@ (3419a9cc <HAL_UART_Init+0x288>)
3419a8e4:	4293      	cmp	r3, r2
3419a8e6:	d036      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8e8:	687b      	ldr	r3, [r7, #4]
3419a8ea:	681b      	ldr	r3, [r3, #0]
3419a8ec:	4a38      	ldr	r2, [pc, #224]	@ (3419a9d0 <HAL_UART_Init+0x28c>)
3419a8ee:	4293      	cmp	r3, r2
3419a8f0:	d031      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8f2:	687b      	ldr	r3, [r7, #4]
3419a8f4:	681b      	ldr	r3, [r3, #0]
3419a8f6:	4a37      	ldr	r2, [pc, #220]	@ (3419a9d4 <HAL_UART_Init+0x290>)
3419a8f8:	4293      	cmp	r3, r2
3419a8fa:	d02c      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a8fc:	687b      	ldr	r3, [r7, #4]
3419a8fe:	681b      	ldr	r3, [r3, #0]
3419a900:	4a35      	ldr	r2, [pc, #212]	@ (3419a9d8 <HAL_UART_Init+0x294>)
3419a902:	4293      	cmp	r3, r2
3419a904:	d027      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a906:	687b      	ldr	r3, [r7, #4]
3419a908:	681b      	ldr	r3, [r3, #0]
3419a90a:	4a34      	ldr	r2, [pc, #208]	@ (3419a9dc <HAL_UART_Init+0x298>)
3419a90c:	4293      	cmp	r3, r2
3419a90e:	d022      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a910:	687b      	ldr	r3, [r7, #4]
3419a912:	681b      	ldr	r3, [r3, #0]
3419a914:	4a32      	ldr	r2, [pc, #200]	@ (3419a9e0 <HAL_UART_Init+0x29c>)
3419a916:	4293      	cmp	r3, r2
3419a918:	d01d      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a91a:	687b      	ldr	r3, [r7, #4]
3419a91c:	681b      	ldr	r3, [r3, #0]
3419a91e:	4a31      	ldr	r2, [pc, #196]	@ (3419a9e4 <HAL_UART_Init+0x2a0>)
3419a920:	4293      	cmp	r3, r2
3419a922:	d018      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a924:	687b      	ldr	r3, [r7, #4]
3419a926:	681b      	ldr	r3, [r3, #0]
3419a928:	4a2f      	ldr	r2, [pc, #188]	@ (3419a9e8 <HAL_UART_Init+0x2a4>)
3419a92a:	4293      	cmp	r3, r2
3419a92c:	d013      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a92e:	687b      	ldr	r3, [r7, #4]
3419a930:	681b      	ldr	r3, [r3, #0]
3419a932:	4a2e      	ldr	r2, [pc, #184]	@ (3419a9ec <HAL_UART_Init+0x2a8>)
3419a934:	4293      	cmp	r3, r2
3419a936:	d00e      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a938:	687b      	ldr	r3, [r7, #4]
3419a93a:	681b      	ldr	r3, [r3, #0]
3419a93c:	4a2c      	ldr	r2, [pc, #176]	@ (3419a9f0 <HAL_UART_Init+0x2ac>)
3419a93e:	4293      	cmp	r3, r2
3419a940:	d009      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a942:	687b      	ldr	r3, [r7, #4]
3419a944:	681b      	ldr	r3, [r3, #0]
3419a946:	4a2b      	ldr	r2, [pc, #172]	@ (3419a9f4 <HAL_UART_Init+0x2b0>)
3419a948:	4293      	cmp	r3, r2
3419a94a:	d004      	beq.n	3419a956 <HAL_UART_Init+0x212>
3419a94c:	f240 1145 	movw	r1, #325	@ 0x145
3419a950:	4829      	ldr	r0, [pc, #164]	@ (3419a9f8 <HAL_UART_Init+0x2b4>)
3419a952:	f7e7 fc8b 	bl	3418226c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3419a956:	687b      	ldr	r3, [r7, #4]
3419a958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419a95c:	2b00      	cmp	r3, #0
3419a95e:	d106      	bne.n	3419a96e <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3419a960:	687b      	ldr	r3, [r7, #4]
3419a962:	2200      	movs	r2, #0
3419a964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
3419a968:	6878      	ldr	r0, [r7, #4]
3419a96a:	f000 f867 	bl	3419aa3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3419a96e:	687b      	ldr	r3, [r7, #4]
3419a970:	2224      	movs	r2, #36	@ 0x24
3419a972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
3419a976:	687b      	ldr	r3, [r7, #4]
3419a978:	681b      	ldr	r3, [r3, #0]
3419a97a:	681a      	ldr	r2, [r3, #0]
3419a97c:	687b      	ldr	r3, [r7, #4]
3419a97e:	681b      	ldr	r3, [r3, #0]
3419a980:	f022 0201 	bic.w	r2, r2, #1
3419a984:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3419a986:	687b      	ldr	r3, [r7, #4]
3419a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419a98a:	2b00      	cmp	r3, #0
3419a98c:	d002      	beq.n	3419a994 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
3419a98e:	6878      	ldr	r0, [r7, #4]
3419a990:	f000 fbb8 	bl	3419b104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
3419a994:	6878      	ldr	r0, [r7, #4]
3419a996:	f000 f8e9 	bl	3419ab6c <UART_SetConfig>
3419a99a:	4603      	mov	r3, r0
3419a99c:	2b01      	cmp	r3, #1
3419a99e:	d12d      	bne.n	3419a9fc <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
3419a9a0:	2301      	movs	r3, #1
3419a9a2:	e047      	b.n	3419aa34 <HAL_UART_Init+0x2f0>
3419a9a4:	52001000 	.word	0x52001000
3419a9a8:	42001000 	.word	0x42001000
3419a9ac:	50004400 	.word	0x50004400
3419a9b0:	40004400 	.word	0x40004400
3419a9b4:	50004800 	.word	0x50004800
3419a9b8:	40004800 	.word	0x40004800
3419a9bc:	50004c00 	.word	0x50004c00
3419a9c0:	40004c00 	.word	0x40004c00
3419a9c4:	40005000 	.word	0x40005000
3419a9c8:	52001400 	.word	0x52001400
3419a9cc:	42001400 	.word	0x42001400
3419a9d0:	50007800 	.word	0x50007800
3419a9d4:	40007800 	.word	0x40007800
3419a9d8:	50007c00 	.word	0x50007c00
3419a9dc:	40007c00 	.word	0x40007c00
3419a9e0:	52001800 	.word	0x52001800
3419a9e4:	42001800 	.word	0x42001800
3419a9e8:	52001c00 	.word	0x52001c00
3419a9ec:	42001c00 	.word	0x42001c00
3419a9f0:	56000c00 	.word	0x56000c00
3419a9f4:	46000c00 	.word	0x46000c00
3419a9f8:	341a5400 	.word	0x341a5400
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3419a9fc:	687b      	ldr	r3, [r7, #4]
3419a9fe:	681b      	ldr	r3, [r3, #0]
3419aa00:	685a      	ldr	r2, [r3, #4]
3419aa02:	687b      	ldr	r3, [r7, #4]
3419aa04:	681b      	ldr	r3, [r3, #0]
3419aa06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3419aa0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3419aa0c:	687b      	ldr	r3, [r7, #4]
3419aa0e:	681b      	ldr	r3, [r3, #0]
3419aa10:	689a      	ldr	r2, [r3, #8]
3419aa12:	687b      	ldr	r3, [r7, #4]
3419aa14:	681b      	ldr	r3, [r3, #0]
3419aa16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3419aa1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3419aa1c:	687b      	ldr	r3, [r7, #4]
3419aa1e:	681b      	ldr	r3, [r3, #0]
3419aa20:	681a      	ldr	r2, [r3, #0]
3419aa22:	687b      	ldr	r3, [r7, #4]
3419aa24:	681b      	ldr	r3, [r3, #0]
3419aa26:	f042 0201 	orr.w	r2, r2, #1
3419aa2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3419aa2c:	6878      	ldr	r0, [r7, #4]
3419aa2e:	f000 fd33 	bl	3419b498 <UART_CheckIdleState>
3419aa32:	4603      	mov	r3, r0
}
3419aa34:	4618      	mov	r0, r3
3419aa36:	3708      	adds	r7, #8
3419aa38:	46bd      	mov	sp, r7
3419aa3a:	bd80      	pop	{r7, pc}

3419aa3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
3419aa3c:	b480      	push	{r7}
3419aa3e:	b083      	sub	sp, #12
3419aa40:	af00      	add	r7, sp, #0
3419aa42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
3419aa44:	bf00      	nop
3419aa46:	370c      	adds	r7, #12
3419aa48:	46bd      	mov	sp, r7
3419aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419aa4e:	4770      	bx	lr

3419aa50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3419aa50:	b580      	push	{r7, lr}
3419aa52:	b08a      	sub	sp, #40	@ 0x28
3419aa54:	af02      	add	r7, sp, #8
3419aa56:	60f8      	str	r0, [r7, #12]
3419aa58:	60b9      	str	r1, [r7, #8]
3419aa5a:	603b      	str	r3, [r7, #0]
3419aa5c:	4613      	mov	r3, r2
3419aa5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3419aa60:	68fb      	ldr	r3, [r7, #12]
3419aa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3419aa66:	2b20      	cmp	r3, #32
3419aa68:	d17b      	bne.n	3419ab62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3419aa6a:	68bb      	ldr	r3, [r7, #8]
3419aa6c:	2b00      	cmp	r3, #0
3419aa6e:	d002      	beq.n	3419aa76 <HAL_UART_Transmit+0x26>
3419aa70:	88fb      	ldrh	r3, [r7, #6]
3419aa72:	2b00      	cmp	r3, #0
3419aa74:	d101      	bne.n	3419aa7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
3419aa76:	2301      	movs	r3, #1
3419aa78:	e074      	b.n	3419ab64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3419aa7a:	68fb      	ldr	r3, [r7, #12]
3419aa7c:	2200      	movs	r2, #0
3419aa7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3419aa82:	68fb      	ldr	r3, [r7, #12]
3419aa84:	2221      	movs	r2, #33	@ 0x21
3419aa86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3419aa8a:	f7e9 fd59 	bl	34184540 <HAL_GetTick>
3419aa8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3419aa90:	68fb      	ldr	r3, [r7, #12]
3419aa92:	88fa      	ldrh	r2, [r7, #6]
3419aa94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
3419aa98:	68fb      	ldr	r3, [r7, #12]
3419aa9a:	88fa      	ldrh	r2, [r7, #6]
3419aa9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3419aaa0:	68fb      	ldr	r3, [r7, #12]
3419aaa2:	689b      	ldr	r3, [r3, #8]
3419aaa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3419aaa8:	d108      	bne.n	3419aabc <HAL_UART_Transmit+0x6c>
3419aaaa:	68fb      	ldr	r3, [r7, #12]
3419aaac:	691b      	ldr	r3, [r3, #16]
3419aaae:	2b00      	cmp	r3, #0
3419aab0:	d104      	bne.n	3419aabc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3419aab2:	2300      	movs	r3, #0
3419aab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3419aab6:	68bb      	ldr	r3, [r7, #8]
3419aab8:	61bb      	str	r3, [r7, #24]
3419aaba:	e003      	b.n	3419aac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3419aabc:	68bb      	ldr	r3, [r7, #8]
3419aabe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3419aac0:	2300      	movs	r3, #0
3419aac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3419aac4:	e030      	b.n	3419ab28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3419aac6:	683b      	ldr	r3, [r7, #0]
3419aac8:	9300      	str	r3, [sp, #0]
3419aaca:	697b      	ldr	r3, [r7, #20]
3419aacc:	2200      	movs	r2, #0
3419aace:	2180      	movs	r1, #128	@ 0x80
3419aad0:	68f8      	ldr	r0, [r7, #12]
3419aad2:	f000 fd8b 	bl	3419b5ec <UART_WaitOnFlagUntilTimeout>
3419aad6:	4603      	mov	r3, r0
3419aad8:	2b00      	cmp	r3, #0
3419aada:	d005      	beq.n	3419aae8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3419aadc:	68fb      	ldr	r3, [r7, #12]
3419aade:	2220      	movs	r2, #32
3419aae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3419aae4:	2303      	movs	r3, #3
3419aae6:	e03d      	b.n	3419ab64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3419aae8:	69fb      	ldr	r3, [r7, #28]
3419aaea:	2b00      	cmp	r3, #0
3419aaec:	d10b      	bne.n	3419ab06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3419aaee:	69bb      	ldr	r3, [r7, #24]
3419aaf0:	881b      	ldrh	r3, [r3, #0]
3419aaf2:	461a      	mov	r2, r3
3419aaf4:	68fb      	ldr	r3, [r7, #12]
3419aaf6:	681b      	ldr	r3, [r3, #0]
3419aaf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
3419aafc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3419aafe:	69bb      	ldr	r3, [r7, #24]
3419ab00:	3302      	adds	r3, #2
3419ab02:	61bb      	str	r3, [r7, #24]
3419ab04:	e007      	b.n	3419ab16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3419ab06:	69fb      	ldr	r3, [r7, #28]
3419ab08:	781a      	ldrb	r2, [r3, #0]
3419ab0a:	68fb      	ldr	r3, [r7, #12]
3419ab0c:	681b      	ldr	r3, [r3, #0]
3419ab0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3419ab10:	69fb      	ldr	r3, [r7, #28]
3419ab12:	3301      	adds	r3, #1
3419ab14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3419ab16:	68fb      	ldr	r3, [r7, #12]
3419ab18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3419ab1c:	b29b      	uxth	r3, r3
3419ab1e:	3b01      	subs	r3, #1
3419ab20:	b29a      	uxth	r2, r3
3419ab22:	68fb      	ldr	r3, [r7, #12]
3419ab24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3419ab28:	68fb      	ldr	r3, [r7, #12]
3419ab2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3419ab2e:	b29b      	uxth	r3, r3
3419ab30:	2b00      	cmp	r3, #0
3419ab32:	d1c8      	bne.n	3419aac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3419ab34:	683b      	ldr	r3, [r7, #0]
3419ab36:	9300      	str	r3, [sp, #0]
3419ab38:	697b      	ldr	r3, [r7, #20]
3419ab3a:	2200      	movs	r2, #0
3419ab3c:	2140      	movs	r1, #64	@ 0x40
3419ab3e:	68f8      	ldr	r0, [r7, #12]
3419ab40:	f000 fd54 	bl	3419b5ec <UART_WaitOnFlagUntilTimeout>
3419ab44:	4603      	mov	r3, r0
3419ab46:	2b00      	cmp	r3, #0
3419ab48:	d005      	beq.n	3419ab56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3419ab4a:	68fb      	ldr	r3, [r7, #12]
3419ab4c:	2220      	movs	r2, #32
3419ab4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3419ab52:	2303      	movs	r3, #3
3419ab54:	e006      	b.n	3419ab64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3419ab56:	68fb      	ldr	r3, [r7, #12]
3419ab58:	2220      	movs	r2, #32
3419ab5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3419ab5e:	2300      	movs	r3, #0
3419ab60:	e000      	b.n	3419ab64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3419ab62:	2302      	movs	r3, #2
  }
}
3419ab64:	4618      	mov	r0, r3
3419ab66:	3720      	adds	r7, #32
3419ab68:	46bd      	mov	sp, r7
3419ab6a:	bd80      	pop	{r7, pc}

3419ab6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3419ab6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3419ab70:	b090      	sub	sp, #64	@ 0x40
3419ab72:	af00      	add	r7, sp, #0
3419ab74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3419ab76:	2300      	movs	r3, #0
3419ab78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3419ab7c:	697b      	ldr	r3, [r7, #20]
3419ab7e:	685b      	ldr	r3, [r3, #4]
3419ab80:	4a19      	ldr	r2, [pc, #100]	@ (3419abe8 <UART_SetConfig+0x7c>)
3419ab82:	4293      	cmp	r3, r2
3419ab84:	d904      	bls.n	3419ab90 <UART_SetConfig+0x24>
3419ab86:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3419ab8a:	4818      	ldr	r0, [pc, #96]	@ (3419abec <UART_SetConfig+0x80>)
3419ab8c:	f7e7 fb6e 	bl	3418226c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3419ab90:	697b      	ldr	r3, [r7, #20]
3419ab92:	689b      	ldr	r3, [r3, #8]
3419ab94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419ab98:	d00d      	beq.n	3419abb6 <UART_SetConfig+0x4a>
3419ab9a:	697b      	ldr	r3, [r7, #20]
3419ab9c:	689b      	ldr	r3, [r3, #8]
3419ab9e:	2b00      	cmp	r3, #0
3419aba0:	d009      	beq.n	3419abb6 <UART_SetConfig+0x4a>
3419aba2:	697b      	ldr	r3, [r7, #20]
3419aba4:	689b      	ldr	r3, [r3, #8]
3419aba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3419abaa:	d004      	beq.n	3419abb6 <UART_SetConfig+0x4a>
3419abac:	f640 4151 	movw	r1, #3153	@ 0xc51
3419abb0:	480e      	ldr	r0, [pc, #56]	@ (3419abec <UART_SetConfig+0x80>)
3419abb2:	f7e7 fb5b 	bl	3418226c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3419abb6:	697b      	ldr	r3, [r7, #20]
3419abb8:	681b      	ldr	r3, [r3, #0]
3419abba:	4a0d      	ldr	r2, [pc, #52]	@ (3419abf0 <UART_SetConfig+0x84>)
3419abbc:	4293      	cmp	r3, r2
3419abbe:	d004      	beq.n	3419abca <UART_SetConfig+0x5e>
3419abc0:	697b      	ldr	r3, [r7, #20]
3419abc2:	681b      	ldr	r3, [r3, #0]
3419abc4:	4a0b      	ldr	r2, [pc, #44]	@ (3419abf4 <UART_SetConfig+0x88>)
3419abc6:	4293      	cmp	r3, r2
3419abc8:	d116      	bne.n	3419abf8 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3419abca:	697b      	ldr	r3, [r7, #20]
3419abcc:	68db      	ldr	r3, [r3, #12]
3419abce:	2b00      	cmp	r3, #0
3419abd0:	d038      	beq.n	3419ac44 <UART_SetConfig+0xd8>
3419abd2:	697b      	ldr	r3, [r7, #20]
3419abd4:	68db      	ldr	r3, [r3, #12]
3419abd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3419abda:	d033      	beq.n	3419ac44 <UART_SetConfig+0xd8>
3419abdc:	f640 4154 	movw	r1, #3156	@ 0xc54
3419abe0:	4802      	ldr	r0, [pc, #8]	@ (3419abec <UART_SetConfig+0x80>)
3419abe2:	f7e7 fb43 	bl	3418226c <assert_failed>
3419abe6:	e02d      	b.n	3419ac44 <UART_SetConfig+0xd8>
3419abe8:	00bebc1f 	.word	0x00bebc1f
3419abec:	341a5400 	.word	0x341a5400
3419abf0:	56000c00 	.word	0x56000c00
3419abf4:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3419abf8:	697b      	ldr	r3, [r7, #20]
3419abfa:	68db      	ldr	r3, [r3, #12]
3419abfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3419ac00:	d012      	beq.n	3419ac28 <UART_SetConfig+0xbc>
3419ac02:	697b      	ldr	r3, [r7, #20]
3419ac04:	68db      	ldr	r3, [r3, #12]
3419ac06:	2b00      	cmp	r3, #0
3419ac08:	d00e      	beq.n	3419ac28 <UART_SetConfig+0xbc>
3419ac0a:	697b      	ldr	r3, [r7, #20]
3419ac0c:	68db      	ldr	r3, [r3, #12]
3419ac0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3419ac12:	d009      	beq.n	3419ac28 <UART_SetConfig+0xbc>
3419ac14:	697b      	ldr	r3, [r7, #20]
3419ac16:	68db      	ldr	r3, [r3, #12]
3419ac18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3419ac1c:	d004      	beq.n	3419ac28 <UART_SetConfig+0xbc>
3419ac1e:	f640 4158 	movw	r1, #3160	@ 0xc58
3419ac22:	4896      	ldr	r0, [pc, #600]	@ (3419ae7c <UART_SetConfig+0x310>)
3419ac24:	f7e7 fb22 	bl	3418226c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3419ac28:	697b      	ldr	r3, [r7, #20]
3419ac2a:	6a1b      	ldr	r3, [r3, #32]
3419ac2c:	2b00      	cmp	r3, #0
3419ac2e:	d009      	beq.n	3419ac44 <UART_SetConfig+0xd8>
3419ac30:	697b      	ldr	r3, [r7, #20]
3419ac32:	6a1b      	ldr	r3, [r3, #32]
3419ac34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3419ac38:	d004      	beq.n	3419ac44 <UART_SetConfig+0xd8>
3419ac3a:	f640 4159 	movw	r1, #3161	@ 0xc59
3419ac3e:	488f      	ldr	r0, [pc, #572]	@ (3419ae7c <UART_SetConfig+0x310>)
3419ac40:	f7e7 fb14 	bl	3418226c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
3419ac44:	697b      	ldr	r3, [r7, #20]
3419ac46:	691b      	ldr	r3, [r3, #16]
3419ac48:	2b00      	cmp	r3, #0
3419ac4a:	d00e      	beq.n	3419ac6a <UART_SetConfig+0xfe>
3419ac4c:	697b      	ldr	r3, [r7, #20]
3419ac4e:	691b      	ldr	r3, [r3, #16]
3419ac50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3419ac54:	d009      	beq.n	3419ac6a <UART_SetConfig+0xfe>
3419ac56:	697b      	ldr	r3, [r7, #20]
3419ac58:	691b      	ldr	r3, [r3, #16]
3419ac5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3419ac5e:	d004      	beq.n	3419ac6a <UART_SetConfig+0xfe>
3419ac60:	f640 415c 	movw	r1, #3164	@ 0xc5c
3419ac64:	4885      	ldr	r0, [pc, #532]	@ (3419ae7c <UART_SetConfig+0x310>)
3419ac66:	f7e7 fb01 	bl	3418226c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3419ac6a:	697b      	ldr	r3, [r7, #20]
3419ac6c:	695b      	ldr	r3, [r3, #20]
3419ac6e:	f023 030c 	bic.w	r3, r3, #12
3419ac72:	2b00      	cmp	r3, #0
3419ac74:	d103      	bne.n	3419ac7e <UART_SetConfig+0x112>
3419ac76:	697b      	ldr	r3, [r7, #20]
3419ac78:	695b      	ldr	r3, [r3, #20]
3419ac7a:	2b00      	cmp	r3, #0
3419ac7c:	d104      	bne.n	3419ac88 <UART_SetConfig+0x11c>
3419ac7e:	f640 415d 	movw	r1, #3165	@ 0xc5d
3419ac82:	487e      	ldr	r0, [pc, #504]	@ (3419ae7c <UART_SetConfig+0x310>)
3419ac84:	f7e7 faf2 	bl	3418226c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3419ac88:	697b      	ldr	r3, [r7, #20]
3419ac8a:	699b      	ldr	r3, [r3, #24]
3419ac8c:	2b00      	cmp	r3, #0
3419ac8e:	d013      	beq.n	3419acb8 <UART_SetConfig+0x14c>
3419ac90:	697b      	ldr	r3, [r7, #20]
3419ac92:	699b      	ldr	r3, [r3, #24]
3419ac94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3419ac98:	d00e      	beq.n	3419acb8 <UART_SetConfig+0x14c>
3419ac9a:	697b      	ldr	r3, [r7, #20]
3419ac9c:	699b      	ldr	r3, [r3, #24]
3419ac9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3419aca2:	d009      	beq.n	3419acb8 <UART_SetConfig+0x14c>
3419aca4:	697b      	ldr	r3, [r7, #20]
3419aca6:	699b      	ldr	r3, [r3, #24]
3419aca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3419acac:	d004      	beq.n	3419acb8 <UART_SetConfig+0x14c>
3419acae:	f640 415e 	movw	r1, #3166	@ 0xc5e
3419acb2:	4872      	ldr	r0, [pc, #456]	@ (3419ae7c <UART_SetConfig+0x310>)
3419acb4:	f7e7 fada 	bl	3418226c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3419acb8:	697b      	ldr	r3, [r7, #20]
3419acba:	69db      	ldr	r3, [r3, #28]
3419acbc:	2b00      	cmp	r3, #0
3419acbe:	d009      	beq.n	3419acd4 <UART_SetConfig+0x168>
3419acc0:	697b      	ldr	r3, [r7, #20]
3419acc2:	69db      	ldr	r3, [r3, #28]
3419acc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3419acc8:	d004      	beq.n	3419acd4 <UART_SetConfig+0x168>
3419acca:	f640 415f 	movw	r1, #3167	@ 0xc5f
3419acce:	486b      	ldr	r0, [pc, #428]	@ (3419ae7c <UART_SetConfig+0x310>)
3419acd0:	f7e7 facc 	bl	3418226c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3419acd4:	697b      	ldr	r3, [r7, #20]
3419acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419acd8:	2b00      	cmp	r3, #0
3419acda:	d030      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419acdc:	697b      	ldr	r3, [r7, #20]
3419acde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ace0:	2b01      	cmp	r3, #1
3419ace2:	d02c      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ace4:	697b      	ldr	r3, [r7, #20]
3419ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ace8:	2b02      	cmp	r3, #2
3419acea:	d028      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419acec:	697b      	ldr	r3, [r7, #20]
3419acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419acf0:	2b03      	cmp	r3, #3
3419acf2:	d024      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419acf4:	697b      	ldr	r3, [r7, #20]
3419acf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419acf8:	2b04      	cmp	r3, #4
3419acfa:	d020      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419acfc:	697b      	ldr	r3, [r7, #20]
3419acfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad00:	2b05      	cmp	r3, #5
3419ad02:	d01c      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad04:	697b      	ldr	r3, [r7, #20]
3419ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad08:	2b06      	cmp	r3, #6
3419ad0a:	d018      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad0c:	697b      	ldr	r3, [r7, #20]
3419ad0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad10:	2b07      	cmp	r3, #7
3419ad12:	d014      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad14:	697b      	ldr	r3, [r7, #20]
3419ad16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad18:	2b08      	cmp	r3, #8
3419ad1a:	d010      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad1c:	697b      	ldr	r3, [r7, #20]
3419ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad20:	2b09      	cmp	r3, #9
3419ad22:	d00c      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad24:	697b      	ldr	r3, [r7, #20]
3419ad26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad28:	2b0a      	cmp	r3, #10
3419ad2a:	d008      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad2c:	697b      	ldr	r3, [r7, #20]
3419ad2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419ad30:	2b0b      	cmp	r3, #11
3419ad32:	d004      	beq.n	3419ad3e <UART_SetConfig+0x1d2>
3419ad34:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
3419ad38:	4850      	ldr	r0, [pc, #320]	@ (3419ae7c <UART_SetConfig+0x310>)
3419ad3a:	f7e7 fa97 	bl	3418226c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3419ad3e:	697b      	ldr	r3, [r7, #20]
3419ad40:	689a      	ldr	r2, [r3, #8]
3419ad42:	697b      	ldr	r3, [r7, #20]
3419ad44:	691b      	ldr	r3, [r3, #16]
3419ad46:	431a      	orrs	r2, r3
3419ad48:	697b      	ldr	r3, [r7, #20]
3419ad4a:	695b      	ldr	r3, [r3, #20]
3419ad4c:	431a      	orrs	r2, r3
3419ad4e:	697b      	ldr	r3, [r7, #20]
3419ad50:	69db      	ldr	r3, [r3, #28]
3419ad52:	4313      	orrs	r3, r2
3419ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3419ad56:	697b      	ldr	r3, [r7, #20]
3419ad58:	681b      	ldr	r3, [r3, #0]
3419ad5a:	681a      	ldr	r2, [r3, #0]
3419ad5c:	4b48      	ldr	r3, [pc, #288]	@ (3419ae80 <UART_SetConfig+0x314>)
3419ad5e:	4013      	ands	r3, r2
3419ad60:	697a      	ldr	r2, [r7, #20]
3419ad62:	6812      	ldr	r2, [r2, #0]
3419ad64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3419ad66:	430b      	orrs	r3, r1
3419ad68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3419ad6a:	697b      	ldr	r3, [r7, #20]
3419ad6c:	681b      	ldr	r3, [r3, #0]
3419ad6e:	685b      	ldr	r3, [r3, #4]
3419ad70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3419ad74:	697b      	ldr	r3, [r7, #20]
3419ad76:	68da      	ldr	r2, [r3, #12]
3419ad78:	697b      	ldr	r3, [r7, #20]
3419ad7a:	681b      	ldr	r3, [r3, #0]
3419ad7c:	430a      	orrs	r2, r1
3419ad7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3419ad80:	697b      	ldr	r3, [r7, #20]
3419ad82:	699b      	ldr	r3, [r3, #24]
3419ad84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3419ad86:	697b      	ldr	r3, [r7, #20]
3419ad88:	681b      	ldr	r3, [r3, #0]
3419ad8a:	4a3e      	ldr	r2, [pc, #248]	@ (3419ae84 <UART_SetConfig+0x318>)
3419ad8c:	4293      	cmp	r3, r2
3419ad8e:	d009      	beq.n	3419ada4 <UART_SetConfig+0x238>
3419ad90:	697b      	ldr	r3, [r7, #20]
3419ad92:	681b      	ldr	r3, [r3, #0]
3419ad94:	4a3c      	ldr	r2, [pc, #240]	@ (3419ae88 <UART_SetConfig+0x31c>)
3419ad96:	4293      	cmp	r3, r2
3419ad98:	d004      	beq.n	3419ada4 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
3419ad9a:	697b      	ldr	r3, [r7, #20]
3419ad9c:	6a1b      	ldr	r3, [r3, #32]
3419ad9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3419ada0:	4313      	orrs	r3, r2
3419ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3419ada4:	697b      	ldr	r3, [r7, #20]
3419ada6:	681b      	ldr	r3, [r3, #0]
3419ada8:	689b      	ldr	r3, [r3, #8]
3419adaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3419adae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3419adb2:	697a      	ldr	r2, [r7, #20]
3419adb4:	6812      	ldr	r2, [r2, #0]
3419adb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3419adb8:	430b      	orrs	r3, r1
3419adba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3419adbc:	697b      	ldr	r3, [r7, #20]
3419adbe:	681b      	ldr	r3, [r3, #0]
3419adc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419adc2:	f023 010f 	bic.w	r1, r3, #15
3419adc6:	697b      	ldr	r3, [r7, #20]
3419adc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3419adca:	697b      	ldr	r3, [r7, #20]
3419adcc:	681b      	ldr	r3, [r3, #0]
3419adce:	430a      	orrs	r2, r1
3419add0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3419add2:	697b      	ldr	r3, [r7, #20]
3419add4:	681b      	ldr	r3, [r3, #0]
3419add6:	4a2d      	ldr	r2, [pc, #180]	@ (3419ae8c <UART_SetConfig+0x320>)
3419add8:	4293      	cmp	r3, r2
3419adda:	d106      	bne.n	3419adea <UART_SetConfig+0x27e>
3419addc:	f04f 0200 	mov.w	r2, #0
3419ade0:	f44f 7380 	mov.w	r3, #256	@ 0x100
3419ade4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ade8:	e092      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419adea:	697b      	ldr	r3, [r7, #20]
3419adec:	681b      	ldr	r3, [r3, #0]
3419adee:	4a28      	ldr	r2, [pc, #160]	@ (3419ae90 <UART_SetConfig+0x324>)
3419adf0:	4293      	cmp	r3, r2
3419adf2:	d106      	bne.n	3419ae02 <UART_SetConfig+0x296>
3419adf4:	f04f 0200 	mov.w	r2, #0
3419adf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
3419adfc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae00:	e086      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae02:	697b      	ldr	r3, [r7, #20]
3419ae04:	681b      	ldr	r3, [r3, #0]
3419ae06:	4a23      	ldr	r2, [pc, #140]	@ (3419ae94 <UART_SetConfig+0x328>)
3419ae08:	4293      	cmp	r3, r2
3419ae0a:	d106      	bne.n	3419ae1a <UART_SetConfig+0x2ae>
3419ae0c:	f04f 0200 	mov.w	r2, #0
3419ae10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3419ae14:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae18:	e07a      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae1a:	697b      	ldr	r3, [r7, #20]
3419ae1c:	681b      	ldr	r3, [r3, #0]
3419ae1e:	4a1e      	ldr	r2, [pc, #120]	@ (3419ae98 <UART_SetConfig+0x32c>)
3419ae20:	4293      	cmp	r3, r2
3419ae22:	d106      	bne.n	3419ae32 <UART_SetConfig+0x2c6>
3419ae24:	f04f 0200 	mov.w	r2, #0
3419ae28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3419ae2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae30:	e06e      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae32:	697b      	ldr	r3, [r7, #20]
3419ae34:	681b      	ldr	r3, [r3, #0]
3419ae36:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3419ae3a:	d106      	bne.n	3419ae4a <UART_SetConfig+0x2de>
3419ae3c:	f04f 0200 	mov.w	r2, #0
3419ae40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3419ae44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae48:	e062      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae4a:	697b      	ldr	r3, [r7, #20]
3419ae4c:	681b      	ldr	r3, [r3, #0]
3419ae4e:	4a13      	ldr	r2, [pc, #76]	@ (3419ae9c <UART_SetConfig+0x330>)
3419ae50:	4293      	cmp	r3, r2
3419ae52:	d106      	bne.n	3419ae62 <UART_SetConfig+0x2f6>
3419ae54:	f04f 0200 	mov.w	r2, #0
3419ae58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3419ae5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae60:	e056      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae62:	697b      	ldr	r3, [r7, #20]
3419ae64:	681b      	ldr	r3, [r3, #0]
3419ae66:	4a0e      	ldr	r2, [pc, #56]	@ (3419aea0 <UART_SetConfig+0x334>)
3419ae68:	4293      	cmp	r3, r2
3419ae6a:	d11b      	bne.n	3419aea4 <UART_SetConfig+0x338>
3419ae6c:	f04f 0200 	mov.w	r2, #0
3419ae70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3419ae74:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419ae78:	e04a      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419ae7a:	bf00      	nop
3419ae7c:	341a5400 	.word	0x341a5400
3419ae80:	cfff69f3 	.word	0xcfff69f3
3419ae84:	56000c00 	.word	0x56000c00
3419ae88:	46000c00 	.word	0x46000c00
3419ae8c:	52001000 	.word	0x52001000
3419ae90:	50004400 	.word	0x50004400
3419ae94:	50004800 	.word	0x50004800
3419ae98:	50004c00 	.word	0x50004c00
3419ae9c:	52001400 	.word	0x52001400
3419aea0:	50007800 	.word	0x50007800
3419aea4:	697b      	ldr	r3, [r7, #20]
3419aea6:	681b      	ldr	r3, [r3, #0]
3419aea8:	4a90      	ldr	r2, [pc, #576]	@ (3419b0ec <UART_SetConfig+0x580>)
3419aeaa:	4293      	cmp	r3, r2
3419aeac:	d106      	bne.n	3419aebc <UART_SetConfig+0x350>
3419aeae:	f04f 0200 	mov.w	r2, #0
3419aeb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3419aeb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419aeba:	e029      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419aebc:	697b      	ldr	r3, [r7, #20]
3419aebe:	681b      	ldr	r3, [r3, #0]
3419aec0:	4a8b      	ldr	r2, [pc, #556]	@ (3419b0f0 <UART_SetConfig+0x584>)
3419aec2:	4293      	cmp	r3, r2
3419aec4:	d106      	bne.n	3419aed4 <UART_SetConfig+0x368>
3419aec6:	f04f 0200 	mov.w	r2, #0
3419aeca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3419aece:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419aed2:	e01d      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419aed4:	697b      	ldr	r3, [r7, #20]
3419aed6:	681b      	ldr	r3, [r3, #0]
3419aed8:	4a86      	ldr	r2, [pc, #536]	@ (3419b0f4 <UART_SetConfig+0x588>)
3419aeda:	4293      	cmp	r3, r2
3419aedc:	d106      	bne.n	3419aeec <UART_SetConfig+0x380>
3419aede:	f04f 0200 	mov.w	r2, #0
3419aee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3419aee6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419aeea:	e011      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419aeec:	697b      	ldr	r3, [r7, #20]
3419aeee:	681b      	ldr	r3, [r3, #0]
3419aef0:	4a81      	ldr	r2, [pc, #516]	@ (3419b0f8 <UART_SetConfig+0x58c>)
3419aef2:	4293      	cmp	r3, r2
3419aef4:	d106      	bne.n	3419af04 <UART_SetConfig+0x398>
3419aef6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3419aefa:	f04f 0300 	mov.w	r3, #0
3419aefe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3419af02:	e005      	b.n	3419af10 <UART_SetConfig+0x3a4>
3419af04:	f04f 0200 	mov.w	r2, #0
3419af08:	f04f 0300 	mov.w	r3, #0
3419af0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3419af10:	697b      	ldr	r3, [r7, #20]
3419af12:	681b      	ldr	r3, [r3, #0]
3419af14:	4a78      	ldr	r2, [pc, #480]	@ (3419b0f8 <UART_SetConfig+0x58c>)
3419af16:	4293      	cmp	r3, r2
3419af18:	d004      	beq.n	3419af24 <UART_SetConfig+0x3b8>
3419af1a:	697b      	ldr	r3, [r7, #20]
3419af1c:	681b      	ldr	r3, [r3, #0]
3419af1e:	4a77      	ldr	r2, [pc, #476]	@ (3419b0fc <UART_SetConfig+0x590>)
3419af20:	4293      	cmp	r3, r2
3419af22:	d166      	bne.n	3419aff2 <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3419af24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3419af28:	f7fa fe36 	bl	34195b98 <HAL_RCCEx_GetPeriphCLKFreq>
3419af2c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3419af2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419af30:	2b00      	cmp	r3, #0
3419af32:	f000 80c6 	beq.w	3419b0c2 <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3419af36:	697b      	ldr	r3, [r7, #20]
3419af38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419af3a:	4a71      	ldr	r2, [pc, #452]	@ (3419b100 <UART_SetConfig+0x594>)
3419af3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419af40:	461a      	mov	r2, r3
3419af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419af44:	fbb3 f3f2 	udiv	r3, r3, r2
3419af48:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3419af4a:	697b      	ldr	r3, [r7, #20]
3419af4c:	685a      	ldr	r2, [r3, #4]
3419af4e:	4613      	mov	r3, r2
3419af50:	005b      	lsls	r3, r3, #1
3419af52:	4413      	add	r3, r2
3419af54:	69fa      	ldr	r2, [r7, #28]
3419af56:	429a      	cmp	r2, r3
3419af58:	d305      	bcc.n	3419af66 <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3419af5a:	697b      	ldr	r3, [r7, #20]
3419af5c:	685b      	ldr	r3, [r3, #4]
3419af5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3419af60:	69fa      	ldr	r2, [r7, #28]
3419af62:	429a      	cmp	r2, r3
3419af64:	d903      	bls.n	3419af6e <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
3419af66:	2301      	movs	r3, #1
3419af68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3419af6c:	e040      	b.n	3419aff0 <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3419af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419af70:	2200      	movs	r2, #0
3419af72:	60bb      	str	r3, [r7, #8]
3419af74:	60fa      	str	r2, [r7, #12]
3419af76:	697b      	ldr	r3, [r7, #20]
3419af78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419af7a:	4a61      	ldr	r2, [pc, #388]	@ (3419b100 <UART_SetConfig+0x594>)
3419af7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419af80:	b29b      	uxth	r3, r3
3419af82:	2200      	movs	r2, #0
3419af84:	603b      	str	r3, [r7, #0]
3419af86:	607a      	str	r2, [r7, #4]
3419af88:	e9d7 2300 	ldrd	r2, r3, [r7]
3419af8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3419af90:	f7e6 fbc2 	bl	34181718 <__aeabi_uldivmod>
3419af94:	4602      	mov	r2, r0
3419af96:	460b      	mov	r3, r1
3419af98:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3419af9c:	6979      	ldr	r1, [r7, #20]
3419af9e:	6849      	ldr	r1, [r1, #4]
3419afa0:	0849      	lsrs	r1, r1, #1
3419afa2:	2000      	movs	r0, #0
3419afa4:	460c      	mov	r4, r1
3419afa6:	4605      	mov	r5, r0
3419afa8:	eb12 0804 	adds.w	r8, r2, r4
3419afac:	eb43 0905 	adc.w	r9, r3, r5
3419afb0:	697b      	ldr	r3, [r7, #20]
3419afb2:	685b      	ldr	r3, [r3, #4]
3419afb4:	2200      	movs	r2, #0
3419afb6:	469a      	mov	sl, r3
3419afb8:	4693      	mov	fp, r2
3419afba:	4652      	mov	r2, sl
3419afbc:	465b      	mov	r3, fp
3419afbe:	4640      	mov	r0, r8
3419afc0:	4649      	mov	r1, r9
3419afc2:	f7e6 fba9 	bl	34181718 <__aeabi_uldivmod>
3419afc6:	4602      	mov	r2, r0
3419afc8:	460b      	mov	r3, r1
3419afca:	4613      	mov	r3, r2
3419afcc:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3419afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419afd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3419afd4:	d308      	bcc.n	3419afe8 <UART_SetConfig+0x47c>
3419afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419afd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3419afdc:	d204      	bcs.n	3419afe8 <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
3419afde:	697b      	ldr	r3, [r7, #20]
3419afe0:	681b      	ldr	r3, [r3, #0]
3419afe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3419afe4:	60da      	str	r2, [r3, #12]
3419afe6:	e003      	b.n	3419aff0 <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
3419afe8:	2301      	movs	r3, #1
3419afea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3419afee:	e068      	b.n	3419b0c2 <UART_SetConfig+0x556>
3419aff0:	e067      	b.n	3419b0c2 <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3419aff2:	697b      	ldr	r3, [r7, #20]
3419aff4:	69db      	ldr	r3, [r3, #28]
3419aff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3419affa:	d138      	bne.n	3419b06e <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3419affc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3419b000:	f7fa fdca 	bl	34195b98 <HAL_RCCEx_GetPeriphCLKFreq>
3419b004:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3419b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419b008:	2b00      	cmp	r3, #0
3419b00a:	d05a      	beq.n	3419b0c2 <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3419b00c:	697b      	ldr	r3, [r7, #20]
3419b00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419b010:	4a3b      	ldr	r2, [pc, #236]	@ (3419b100 <UART_SetConfig+0x594>)
3419b012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419b016:	461a      	mov	r2, r3
3419b018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419b01a:	fbb3 f3f2 	udiv	r3, r3, r2
3419b01e:	005a      	lsls	r2, r3, #1
3419b020:	697b      	ldr	r3, [r7, #20]
3419b022:	685b      	ldr	r3, [r3, #4]
3419b024:	085b      	lsrs	r3, r3, #1
3419b026:	441a      	add	r2, r3
3419b028:	697b      	ldr	r3, [r7, #20]
3419b02a:	685b      	ldr	r3, [r3, #4]
3419b02c:	fbb2 f3f3 	udiv	r3, r2, r3
3419b030:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3419b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b034:	2b0f      	cmp	r3, #15
3419b036:	d916      	bls.n	3419b066 <UART_SetConfig+0x4fa>
3419b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3419b03e:	d212      	bcs.n	3419b066 <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3419b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b042:	b29b      	uxth	r3, r3
3419b044:	f023 030f 	bic.w	r3, r3, #15
3419b048:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3419b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b04c:	085b      	lsrs	r3, r3, #1
3419b04e:	b29b      	uxth	r3, r3
3419b050:	f003 0307 	and.w	r3, r3, #7
3419b054:	b29a      	uxth	r2, r3
3419b056:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3419b058:	4313      	orrs	r3, r2
3419b05a:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3419b05c:	697b      	ldr	r3, [r7, #20]
3419b05e:	681b      	ldr	r3, [r3, #0]
3419b060:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3419b062:	60da      	str	r2, [r3, #12]
3419b064:	e02d      	b.n	3419b0c2 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
3419b066:	2301      	movs	r3, #1
3419b068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3419b06c:	e029      	b.n	3419b0c2 <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3419b06e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3419b072:	f7fa fd91 	bl	34195b98 <HAL_RCCEx_GetPeriphCLKFreq>
3419b076:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3419b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419b07a:	2b00      	cmp	r3, #0
3419b07c:	d021      	beq.n	3419b0c2 <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3419b07e:	697b      	ldr	r3, [r7, #20]
3419b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419b082:	4a1f      	ldr	r2, [pc, #124]	@ (3419b100 <UART_SetConfig+0x594>)
3419b084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3419b088:	461a      	mov	r2, r3
3419b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419b08c:	fbb3 f2f2 	udiv	r2, r3, r2
3419b090:	697b      	ldr	r3, [r7, #20]
3419b092:	685b      	ldr	r3, [r3, #4]
3419b094:	085b      	lsrs	r3, r3, #1
3419b096:	441a      	add	r2, r3
3419b098:	697b      	ldr	r3, [r7, #20]
3419b09a:	685b      	ldr	r3, [r3, #4]
3419b09c:	fbb2 f3f3 	udiv	r3, r2, r3
3419b0a0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3419b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b0a4:	2b0f      	cmp	r3, #15
3419b0a6:	d909      	bls.n	3419b0bc <UART_SetConfig+0x550>
3419b0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b0aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3419b0ae:	d205      	bcs.n	3419b0bc <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3419b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b0b2:	b29a      	uxth	r2, r3
3419b0b4:	697b      	ldr	r3, [r7, #20]
3419b0b6:	681b      	ldr	r3, [r3, #0]
3419b0b8:	60da      	str	r2, [r3, #12]
3419b0ba:	e002      	b.n	3419b0c2 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
3419b0bc:	2301      	movs	r3, #1
3419b0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3419b0c2:	697b      	ldr	r3, [r7, #20]
3419b0c4:	2201      	movs	r2, #1
3419b0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3419b0ca:	697b      	ldr	r3, [r7, #20]
3419b0cc:	2201      	movs	r2, #1
3419b0ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3419b0d2:	697b      	ldr	r3, [r7, #20]
3419b0d4:	2200      	movs	r2, #0
3419b0d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3419b0d8:	697b      	ldr	r3, [r7, #20]
3419b0da:	2200      	movs	r2, #0
3419b0dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3419b0de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3419b0e2:	4618      	mov	r0, r3
3419b0e4:	3740      	adds	r7, #64	@ 0x40
3419b0e6:	46bd      	mov	sp, r7
3419b0e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3419b0ec:	50007c00 	.word	0x50007c00
3419b0f0:	52001800 	.word	0x52001800
3419b0f4:	52001c00 	.word	0x52001c00
3419b0f8:	56000c00 	.word	0x56000c00
3419b0fc:	46000c00 	.word	0x46000c00
3419b100:	341a650c 	.word	0x341a650c

3419b104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3419b104:	b580      	push	{r7, lr}
3419b106:	b082      	sub	sp, #8
3419b108:	af00      	add	r7, sp, #0
3419b10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3419b10c:	687b      	ldr	r3, [r7, #4]
3419b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b110:	2bff      	cmp	r3, #255	@ 0xff
3419b112:	d904      	bls.n	3419b11e <UART_AdvFeatureConfig+0x1a>
3419b114:	f640 41e5 	movw	r1, #3301	@ 0xce5
3419b118:	4890      	ldr	r0, [pc, #576]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b11a:	f7e7 f8a7 	bl	3418226c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3419b11e:	687b      	ldr	r3, [r7, #4]
3419b120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b122:	f003 0308 	and.w	r3, r3, #8
3419b126:	2b00      	cmp	r3, #0
3419b128:	d018      	beq.n	3419b15c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3419b12a:	687b      	ldr	r3, [r7, #4]
3419b12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419b12e:	2b00      	cmp	r3, #0
3419b130:	d009      	beq.n	3419b146 <UART_AdvFeatureConfig+0x42>
3419b132:	687b      	ldr	r3, [r7, #4]
3419b134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419b136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3419b13a:	d004      	beq.n	3419b146 <UART_AdvFeatureConfig+0x42>
3419b13c:	f640 41ea 	movw	r1, #3306	@ 0xcea
3419b140:	4886      	ldr	r0, [pc, #536]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b142:	f7e7 f893 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3419b146:	687b      	ldr	r3, [r7, #4]
3419b148:	681b      	ldr	r3, [r3, #0]
3419b14a:	685b      	ldr	r3, [r3, #4]
3419b14c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3419b150:	687b      	ldr	r3, [r7, #4]
3419b152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3419b154:	687b      	ldr	r3, [r7, #4]
3419b156:	681b      	ldr	r3, [r3, #0]
3419b158:	430a      	orrs	r2, r1
3419b15a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3419b15c:	687b      	ldr	r3, [r7, #4]
3419b15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b160:	f003 0301 	and.w	r3, r3, #1
3419b164:	2b00      	cmp	r3, #0
3419b166:	d018      	beq.n	3419b19a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3419b168:	687b      	ldr	r3, [r7, #4]
3419b16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419b16c:	2b00      	cmp	r3, #0
3419b16e:	d009      	beq.n	3419b184 <UART_AdvFeatureConfig+0x80>
3419b170:	687b      	ldr	r3, [r7, #4]
3419b172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419b174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3419b178:	d004      	beq.n	3419b184 <UART_AdvFeatureConfig+0x80>
3419b17a:	f640 41f1 	movw	r1, #3313	@ 0xcf1
3419b17e:	4877      	ldr	r0, [pc, #476]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b180:	f7e7 f874 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3419b184:	687b      	ldr	r3, [r7, #4]
3419b186:	681b      	ldr	r3, [r3, #0]
3419b188:	685b      	ldr	r3, [r3, #4]
3419b18a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3419b18e:	687b      	ldr	r3, [r7, #4]
3419b190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3419b192:	687b      	ldr	r3, [r7, #4]
3419b194:	681b      	ldr	r3, [r3, #0]
3419b196:	430a      	orrs	r2, r1
3419b198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3419b19a:	687b      	ldr	r3, [r7, #4]
3419b19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b19e:	f003 0302 	and.w	r3, r3, #2
3419b1a2:	2b00      	cmp	r3, #0
3419b1a4:	d018      	beq.n	3419b1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3419b1a6:	687b      	ldr	r3, [r7, #4]
3419b1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419b1aa:	2b00      	cmp	r3, #0
3419b1ac:	d009      	beq.n	3419b1c2 <UART_AdvFeatureConfig+0xbe>
3419b1ae:	687b      	ldr	r3, [r7, #4]
3419b1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419b1b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3419b1b6:	d004      	beq.n	3419b1c2 <UART_AdvFeatureConfig+0xbe>
3419b1b8:	f640 41f8 	movw	r1, #3320	@ 0xcf8
3419b1bc:	4867      	ldr	r0, [pc, #412]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b1be:	f7e7 f855 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3419b1c2:	687b      	ldr	r3, [r7, #4]
3419b1c4:	681b      	ldr	r3, [r3, #0]
3419b1c6:	685b      	ldr	r3, [r3, #4]
3419b1c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3419b1cc:	687b      	ldr	r3, [r7, #4]
3419b1ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3419b1d0:	687b      	ldr	r3, [r7, #4]
3419b1d2:	681b      	ldr	r3, [r3, #0]
3419b1d4:	430a      	orrs	r2, r1
3419b1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3419b1d8:	687b      	ldr	r3, [r7, #4]
3419b1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b1dc:	f003 0304 	and.w	r3, r3, #4
3419b1e0:	2b00      	cmp	r3, #0
3419b1e2:	d018      	beq.n	3419b216 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3419b1e4:	687b      	ldr	r3, [r7, #4]
3419b1e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419b1e8:	2b00      	cmp	r3, #0
3419b1ea:	d009      	beq.n	3419b200 <UART_AdvFeatureConfig+0xfc>
3419b1ec:	687b      	ldr	r3, [r7, #4]
3419b1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419b1f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3419b1f4:	d004      	beq.n	3419b200 <UART_AdvFeatureConfig+0xfc>
3419b1f6:	f640 41ff 	movw	r1, #3327	@ 0xcff
3419b1fa:	4858      	ldr	r0, [pc, #352]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b1fc:	f7e7 f836 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3419b200:	687b      	ldr	r3, [r7, #4]
3419b202:	681b      	ldr	r3, [r3, #0]
3419b204:	685b      	ldr	r3, [r3, #4]
3419b206:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3419b20a:	687b      	ldr	r3, [r7, #4]
3419b20c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3419b20e:	687b      	ldr	r3, [r7, #4]
3419b210:	681b      	ldr	r3, [r3, #0]
3419b212:	430a      	orrs	r2, r1
3419b214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3419b216:	687b      	ldr	r3, [r7, #4]
3419b218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b21a:	f003 0310 	and.w	r3, r3, #16
3419b21e:	2b00      	cmp	r3, #0
3419b220:	d018      	beq.n	3419b254 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3419b222:	687b      	ldr	r3, [r7, #4]
3419b224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419b226:	2b00      	cmp	r3, #0
3419b228:	d009      	beq.n	3419b23e <UART_AdvFeatureConfig+0x13a>
3419b22a:	687b      	ldr	r3, [r7, #4]
3419b22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419b22e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3419b232:	d004      	beq.n	3419b23e <UART_AdvFeatureConfig+0x13a>
3419b234:	f640 5106 	movw	r1, #3334	@ 0xd06
3419b238:	4848      	ldr	r0, [pc, #288]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b23a:	f7e7 f817 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3419b23e:	687b      	ldr	r3, [r7, #4]
3419b240:	681b      	ldr	r3, [r3, #0]
3419b242:	689b      	ldr	r3, [r3, #8]
3419b244:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3419b248:	687b      	ldr	r3, [r7, #4]
3419b24a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3419b24c:	687b      	ldr	r3, [r7, #4]
3419b24e:	681b      	ldr	r3, [r3, #0]
3419b250:	430a      	orrs	r2, r1
3419b252:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3419b254:	687b      	ldr	r3, [r7, #4]
3419b256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b258:	f003 0320 	and.w	r3, r3, #32
3419b25c:	2b00      	cmp	r3, #0
3419b25e:	d018      	beq.n	3419b292 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3419b260:	687b      	ldr	r3, [r7, #4]
3419b262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419b264:	2b00      	cmp	r3, #0
3419b266:	d009      	beq.n	3419b27c <UART_AdvFeatureConfig+0x178>
3419b268:	687b      	ldr	r3, [r7, #4]
3419b26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419b26c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3419b270:	d004      	beq.n	3419b27c <UART_AdvFeatureConfig+0x178>
3419b272:	f640 510e 	movw	r1, #3342	@ 0xd0e
3419b276:	4839      	ldr	r0, [pc, #228]	@ (3419b35c <UART_AdvFeatureConfig+0x258>)
3419b278:	f7e6 fff8 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3419b27c:	687b      	ldr	r3, [r7, #4]
3419b27e:	681b      	ldr	r3, [r3, #0]
3419b280:	689b      	ldr	r3, [r3, #8]
3419b282:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3419b286:	687b      	ldr	r3, [r7, #4]
3419b288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3419b28a:	687b      	ldr	r3, [r7, #4]
3419b28c:	681b      	ldr	r3, [r3, #0]
3419b28e:	430a      	orrs	r2, r1
3419b290:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3419b292:	687b      	ldr	r3, [r7, #4]
3419b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3419b29a:	2b00      	cmp	r3, #0
3419b29c:	f000 80d2 	beq.w	3419b444 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3419b2a0:	687b      	ldr	r3, [r7, #4]
3419b2a2:	681b      	ldr	r3, [r3, #0]
3419b2a4:	4a2e      	ldr	r2, [pc, #184]	@ (3419b360 <UART_AdvFeatureConfig+0x25c>)
3419b2a6:	4293      	cmp	r3, r2
3419b2a8:	f000 808b 	beq.w	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2ac:	687b      	ldr	r3, [r7, #4]
3419b2ae:	681b      	ldr	r3, [r3, #0]
3419b2b0:	4a2c      	ldr	r2, [pc, #176]	@ (3419b364 <UART_AdvFeatureConfig+0x260>)
3419b2b2:	4293      	cmp	r3, r2
3419b2b4:	f000 8085 	beq.w	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2b8:	687b      	ldr	r3, [r7, #4]
3419b2ba:	681b      	ldr	r3, [r3, #0]
3419b2bc:	4a2a      	ldr	r2, [pc, #168]	@ (3419b368 <UART_AdvFeatureConfig+0x264>)
3419b2be:	4293      	cmp	r3, r2
3419b2c0:	d07f      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2c2:	687b      	ldr	r3, [r7, #4]
3419b2c4:	681b      	ldr	r3, [r3, #0]
3419b2c6:	4a29      	ldr	r2, [pc, #164]	@ (3419b36c <UART_AdvFeatureConfig+0x268>)
3419b2c8:	4293      	cmp	r3, r2
3419b2ca:	d07a      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2cc:	687b      	ldr	r3, [r7, #4]
3419b2ce:	681b      	ldr	r3, [r3, #0]
3419b2d0:	4a27      	ldr	r2, [pc, #156]	@ (3419b370 <UART_AdvFeatureConfig+0x26c>)
3419b2d2:	4293      	cmp	r3, r2
3419b2d4:	d075      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2d6:	687b      	ldr	r3, [r7, #4]
3419b2d8:	681b      	ldr	r3, [r3, #0]
3419b2da:	4a26      	ldr	r2, [pc, #152]	@ (3419b374 <UART_AdvFeatureConfig+0x270>)
3419b2dc:	4293      	cmp	r3, r2
3419b2de:	d070      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2e0:	687b      	ldr	r3, [r7, #4]
3419b2e2:	681b      	ldr	r3, [r3, #0]
3419b2e4:	4a24      	ldr	r2, [pc, #144]	@ (3419b378 <UART_AdvFeatureConfig+0x274>)
3419b2e6:	4293      	cmp	r3, r2
3419b2e8:	d06b      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2ea:	687b      	ldr	r3, [r7, #4]
3419b2ec:	681b      	ldr	r3, [r3, #0]
3419b2ee:	4a23      	ldr	r2, [pc, #140]	@ (3419b37c <UART_AdvFeatureConfig+0x278>)
3419b2f0:	4293      	cmp	r3, r2
3419b2f2:	d066      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2f4:	687b      	ldr	r3, [r7, #4]
3419b2f6:	681b      	ldr	r3, [r3, #0]
3419b2f8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3419b2fc:	d061      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b2fe:	687b      	ldr	r3, [r7, #4]
3419b300:	681b      	ldr	r3, [r3, #0]
3419b302:	4a1f      	ldr	r2, [pc, #124]	@ (3419b380 <UART_AdvFeatureConfig+0x27c>)
3419b304:	4293      	cmp	r3, r2
3419b306:	d05c      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b308:	687b      	ldr	r3, [r7, #4]
3419b30a:	681b      	ldr	r3, [r3, #0]
3419b30c:	4a1d      	ldr	r2, [pc, #116]	@ (3419b384 <UART_AdvFeatureConfig+0x280>)
3419b30e:	4293      	cmp	r3, r2
3419b310:	d057      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b312:	687b      	ldr	r3, [r7, #4]
3419b314:	681b      	ldr	r3, [r3, #0]
3419b316:	4a1c      	ldr	r2, [pc, #112]	@ (3419b388 <UART_AdvFeatureConfig+0x284>)
3419b318:	4293      	cmp	r3, r2
3419b31a:	d052      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b31c:	687b      	ldr	r3, [r7, #4]
3419b31e:	681b      	ldr	r3, [r3, #0]
3419b320:	4a1a      	ldr	r2, [pc, #104]	@ (3419b38c <UART_AdvFeatureConfig+0x288>)
3419b322:	4293      	cmp	r3, r2
3419b324:	d04d      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b326:	687b      	ldr	r3, [r7, #4]
3419b328:	681b      	ldr	r3, [r3, #0]
3419b32a:	4a19      	ldr	r2, [pc, #100]	@ (3419b390 <UART_AdvFeatureConfig+0x28c>)
3419b32c:	4293      	cmp	r3, r2
3419b32e:	d048      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b330:	687b      	ldr	r3, [r7, #4]
3419b332:	681b      	ldr	r3, [r3, #0]
3419b334:	4a17      	ldr	r2, [pc, #92]	@ (3419b394 <UART_AdvFeatureConfig+0x290>)
3419b336:	4293      	cmp	r3, r2
3419b338:	d043      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b33a:	687b      	ldr	r3, [r7, #4]
3419b33c:	681b      	ldr	r3, [r3, #0]
3419b33e:	4a16      	ldr	r2, [pc, #88]	@ (3419b398 <UART_AdvFeatureConfig+0x294>)
3419b340:	4293      	cmp	r3, r2
3419b342:	d03e      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b344:	687b      	ldr	r3, [r7, #4]
3419b346:	681b      	ldr	r3, [r3, #0]
3419b348:	4a14      	ldr	r2, [pc, #80]	@ (3419b39c <UART_AdvFeatureConfig+0x298>)
3419b34a:	4293      	cmp	r3, r2
3419b34c:	d039      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b34e:	687b      	ldr	r3, [r7, #4]
3419b350:	681b      	ldr	r3, [r3, #0]
3419b352:	4a13      	ldr	r2, [pc, #76]	@ (3419b3a0 <UART_AdvFeatureConfig+0x29c>)
3419b354:	4293      	cmp	r3, r2
3419b356:	d034      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b358:	e024      	b.n	3419b3a4 <UART_AdvFeatureConfig+0x2a0>
3419b35a:	bf00      	nop
3419b35c:	341a5400 	.word	0x341a5400
3419b360:	52001000 	.word	0x52001000
3419b364:	42001000 	.word	0x42001000
3419b368:	50004400 	.word	0x50004400
3419b36c:	40004400 	.word	0x40004400
3419b370:	50004800 	.word	0x50004800
3419b374:	40004800 	.word	0x40004800
3419b378:	50004c00 	.word	0x50004c00
3419b37c:	40004c00 	.word	0x40004c00
3419b380:	40005000 	.word	0x40005000
3419b384:	52001400 	.word	0x52001400
3419b388:	42001400 	.word	0x42001400
3419b38c:	50007800 	.word	0x50007800
3419b390:	40007800 	.word	0x40007800
3419b394:	50007c00 	.word	0x50007c00
3419b398:	40007c00 	.word	0x40007c00
3419b39c:	52001800 	.word	0x52001800
3419b3a0:	42001800 	.word	0x42001800
3419b3a4:	687b      	ldr	r3, [r7, #4]
3419b3a6:	681b      	ldr	r3, [r3, #0]
3419b3a8:	4a38      	ldr	r2, [pc, #224]	@ (3419b48c <UART_AdvFeatureConfig+0x388>)
3419b3aa:	4293      	cmp	r3, r2
3419b3ac:	d009      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b3ae:	687b      	ldr	r3, [r7, #4]
3419b3b0:	681b      	ldr	r3, [r3, #0]
3419b3b2:	4a37      	ldr	r2, [pc, #220]	@ (3419b490 <UART_AdvFeatureConfig+0x38c>)
3419b3b4:	4293      	cmp	r3, r2
3419b3b6:	d004      	beq.n	3419b3c2 <UART_AdvFeatureConfig+0x2be>
3419b3b8:	f640 5116 	movw	r1, #3350	@ 0xd16
3419b3bc:	4835      	ldr	r0, [pc, #212]	@ (3419b494 <UART_AdvFeatureConfig+0x390>)
3419b3be:	f7e6 ff55 	bl	3418226c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3419b3c2:	687b      	ldr	r3, [r7, #4]
3419b3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419b3c6:	2b00      	cmp	r3, #0
3419b3c8:	d009      	beq.n	3419b3de <UART_AdvFeatureConfig+0x2da>
3419b3ca:	687b      	ldr	r3, [r7, #4]
3419b3cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419b3ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3419b3d2:	d004      	beq.n	3419b3de <UART_AdvFeatureConfig+0x2da>
3419b3d4:	f640 5117 	movw	r1, #3351	@ 0xd17
3419b3d8:	482e      	ldr	r0, [pc, #184]	@ (3419b494 <UART_AdvFeatureConfig+0x390>)
3419b3da:	f7e6 ff47 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3419b3de:	687b      	ldr	r3, [r7, #4]
3419b3e0:	681b      	ldr	r3, [r3, #0]
3419b3e2:	685b      	ldr	r3, [r3, #4]
3419b3e4:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3419b3e8:	687b      	ldr	r3, [r7, #4]
3419b3ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3419b3ec:	687b      	ldr	r3, [r7, #4]
3419b3ee:	681b      	ldr	r3, [r3, #0]
3419b3f0:	430a      	orrs	r2, r1
3419b3f2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3419b3f4:	687b      	ldr	r3, [r7, #4]
3419b3f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419b3f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3419b3fc:	d122      	bne.n	3419b444 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3419b3fe:	687b      	ldr	r3, [r7, #4]
3419b400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419b402:	2b00      	cmp	r3, #0
3419b404:	d013      	beq.n	3419b42e <UART_AdvFeatureConfig+0x32a>
3419b406:	687b      	ldr	r3, [r7, #4]
3419b408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419b40a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3419b40e:	d00e      	beq.n	3419b42e <UART_AdvFeatureConfig+0x32a>
3419b410:	687b      	ldr	r3, [r7, #4]
3419b412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419b414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3419b418:	d009      	beq.n	3419b42e <UART_AdvFeatureConfig+0x32a>
3419b41a:	687b      	ldr	r3, [r7, #4]
3419b41c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419b41e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
3419b422:	d004      	beq.n	3419b42e <UART_AdvFeatureConfig+0x32a>
3419b424:	f640 511c 	movw	r1, #3356	@ 0xd1c
3419b428:	481a      	ldr	r0, [pc, #104]	@ (3419b494 <UART_AdvFeatureConfig+0x390>)
3419b42a:	f7e6 ff1f 	bl	3418226c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3419b42e:	687b      	ldr	r3, [r7, #4]
3419b430:	681b      	ldr	r3, [r3, #0]
3419b432:	685b      	ldr	r3, [r3, #4]
3419b434:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3419b438:	687b      	ldr	r3, [r7, #4]
3419b43a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3419b43c:	687b      	ldr	r3, [r7, #4]
3419b43e:	681b      	ldr	r3, [r3, #0]
3419b440:	430a      	orrs	r2, r1
3419b442:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3419b444:	687b      	ldr	r3, [r7, #4]
3419b446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419b448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3419b44c:	2b00      	cmp	r3, #0
3419b44e:	d018      	beq.n	3419b482 <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3419b450:	687b      	ldr	r3, [r7, #4]
3419b452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419b454:	2b00      	cmp	r3, #0
3419b456:	d009      	beq.n	3419b46c <UART_AdvFeatureConfig+0x368>
3419b458:	687b      	ldr	r3, [r7, #4]
3419b45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419b45c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3419b460:	d004      	beq.n	3419b46c <UART_AdvFeatureConfig+0x368>
3419b462:	f640 5124 	movw	r1, #3364	@ 0xd24
3419b466:	480b      	ldr	r0, [pc, #44]	@ (3419b494 <UART_AdvFeatureConfig+0x390>)
3419b468:	f7e6 ff00 	bl	3418226c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3419b46c:	687b      	ldr	r3, [r7, #4]
3419b46e:	681b      	ldr	r3, [r3, #0]
3419b470:	685b      	ldr	r3, [r3, #4]
3419b472:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3419b476:	687b      	ldr	r3, [r7, #4]
3419b478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3419b47a:	687b      	ldr	r3, [r7, #4]
3419b47c:	681b      	ldr	r3, [r3, #0]
3419b47e:	430a      	orrs	r2, r1
3419b480:	605a      	str	r2, [r3, #4]
  }
}
3419b482:	bf00      	nop
3419b484:	3708      	adds	r7, #8
3419b486:	46bd      	mov	sp, r7
3419b488:	bd80      	pop	{r7, pc}
3419b48a:	bf00      	nop
3419b48c:	52001c00 	.word	0x52001c00
3419b490:	42001c00 	.word	0x42001c00
3419b494:	341a5400 	.word	0x341a5400

3419b498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3419b498:	b580      	push	{r7, lr}
3419b49a:	b098      	sub	sp, #96	@ 0x60
3419b49c:	af02      	add	r7, sp, #8
3419b49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3419b4a0:	687b      	ldr	r3, [r7, #4]
3419b4a2:	2200      	movs	r2, #0
3419b4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3419b4a8:	f7e9 f84a 	bl	34184540 <HAL_GetTick>
3419b4ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3419b4ae:	687b      	ldr	r3, [r7, #4]
3419b4b0:	681b      	ldr	r3, [r3, #0]
3419b4b2:	681b      	ldr	r3, [r3, #0]
3419b4b4:	f003 0308 	and.w	r3, r3, #8
3419b4b8:	2b08      	cmp	r3, #8
3419b4ba:	d12f      	bne.n	3419b51c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3419b4bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3419b4c0:	9300      	str	r3, [sp, #0]
3419b4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3419b4c4:	2200      	movs	r2, #0
3419b4c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3419b4ca:	6878      	ldr	r0, [r7, #4]
3419b4cc:	f000 f88e 	bl	3419b5ec <UART_WaitOnFlagUntilTimeout>
3419b4d0:	4603      	mov	r3, r0
3419b4d2:	2b00      	cmp	r3, #0
3419b4d4:	d022      	beq.n	3419b51c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3419b4d6:	687b      	ldr	r3, [r7, #4]
3419b4d8:	681b      	ldr	r3, [r3, #0]
3419b4da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3419b4de:	e853 3f00 	ldrex	r3, [r3]
3419b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3419b4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3419b4e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3419b4ea:	653b      	str	r3, [r7, #80]	@ 0x50
3419b4ec:	687b      	ldr	r3, [r7, #4]
3419b4ee:	681b      	ldr	r3, [r3, #0]
3419b4f0:	461a      	mov	r2, r3
3419b4f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3419b4f4:	647b      	str	r3, [r7, #68]	@ 0x44
3419b4f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b4f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3419b4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419b4fc:	e841 2300 	strex	r3, r2, [r1]
3419b500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3419b502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3419b504:	2b00      	cmp	r3, #0
3419b506:	d1e6      	bne.n	3419b4d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3419b508:	687b      	ldr	r3, [r7, #4]
3419b50a:	2220      	movs	r2, #32
3419b50c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3419b510:	687b      	ldr	r3, [r7, #4]
3419b512:	2200      	movs	r2, #0
3419b514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3419b518:	2303      	movs	r3, #3
3419b51a:	e063      	b.n	3419b5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3419b51c:	687b      	ldr	r3, [r7, #4]
3419b51e:	681b      	ldr	r3, [r3, #0]
3419b520:	681b      	ldr	r3, [r3, #0]
3419b522:	f003 0304 	and.w	r3, r3, #4
3419b526:	2b04      	cmp	r3, #4
3419b528:	d149      	bne.n	3419b5be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3419b52a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3419b52e:	9300      	str	r3, [sp, #0]
3419b530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3419b532:	2200      	movs	r2, #0
3419b534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3419b538:	6878      	ldr	r0, [r7, #4]
3419b53a:	f000 f857 	bl	3419b5ec <UART_WaitOnFlagUntilTimeout>
3419b53e:	4603      	mov	r3, r0
3419b540:	2b00      	cmp	r3, #0
3419b542:	d03c      	beq.n	3419b5be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3419b544:	687b      	ldr	r3, [r7, #4]
3419b546:	681b      	ldr	r3, [r3, #0]
3419b548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b54c:	e853 3f00 	ldrex	r3, [r3]
3419b550:	623b      	str	r3, [r7, #32]
   return(result);
3419b552:	6a3b      	ldr	r3, [r7, #32]
3419b554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3419b558:	64fb      	str	r3, [r7, #76]	@ 0x4c
3419b55a:	687b      	ldr	r3, [r7, #4]
3419b55c:	681b      	ldr	r3, [r3, #0]
3419b55e:	461a      	mov	r2, r3
3419b560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3419b562:	633b      	str	r3, [r7, #48]	@ 0x30
3419b564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3419b568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3419b56a:	e841 2300 	strex	r3, r2, [r1]
3419b56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3419b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419b572:	2b00      	cmp	r3, #0
3419b574:	d1e6      	bne.n	3419b544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3419b576:	687b      	ldr	r3, [r7, #4]
3419b578:	681b      	ldr	r3, [r3, #0]
3419b57a:	3308      	adds	r3, #8
3419b57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b57e:	693b      	ldr	r3, [r7, #16]
3419b580:	e853 3f00 	ldrex	r3, [r3]
3419b584:	60fb      	str	r3, [r7, #12]
   return(result);
3419b586:	68fb      	ldr	r3, [r7, #12]
3419b588:	f023 0301 	bic.w	r3, r3, #1
3419b58c:	64bb      	str	r3, [r7, #72]	@ 0x48
3419b58e:	687b      	ldr	r3, [r7, #4]
3419b590:	681b      	ldr	r3, [r3, #0]
3419b592:	3308      	adds	r3, #8
3419b594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3419b596:	61fa      	str	r2, [r7, #28]
3419b598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b59a:	69b9      	ldr	r1, [r7, #24]
3419b59c:	69fa      	ldr	r2, [r7, #28]
3419b59e:	e841 2300 	strex	r3, r2, [r1]
3419b5a2:	617b      	str	r3, [r7, #20]
   return(result);
3419b5a4:	697b      	ldr	r3, [r7, #20]
3419b5a6:	2b00      	cmp	r3, #0
3419b5a8:	d1e5      	bne.n	3419b576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3419b5aa:	687b      	ldr	r3, [r7, #4]
3419b5ac:	2220      	movs	r2, #32
3419b5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3419b5b2:	687b      	ldr	r3, [r7, #4]
3419b5b4:	2200      	movs	r2, #0
3419b5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3419b5ba:	2303      	movs	r3, #3
3419b5bc:	e012      	b.n	3419b5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3419b5be:	687b      	ldr	r3, [r7, #4]
3419b5c0:	2220      	movs	r2, #32
3419b5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3419b5c6:	687b      	ldr	r3, [r7, #4]
3419b5c8:	2220      	movs	r2, #32
3419b5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3419b5ce:	687b      	ldr	r3, [r7, #4]
3419b5d0:	2200      	movs	r2, #0
3419b5d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3419b5d4:	687b      	ldr	r3, [r7, #4]
3419b5d6:	2200      	movs	r2, #0
3419b5d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3419b5da:	687b      	ldr	r3, [r7, #4]
3419b5dc:	2200      	movs	r2, #0
3419b5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3419b5e2:	2300      	movs	r3, #0
}
3419b5e4:	4618      	mov	r0, r3
3419b5e6:	3758      	adds	r7, #88	@ 0x58
3419b5e8:	46bd      	mov	sp, r7
3419b5ea:	bd80      	pop	{r7, pc}

3419b5ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3419b5ec:	b580      	push	{r7, lr}
3419b5ee:	b084      	sub	sp, #16
3419b5f0:	af00      	add	r7, sp, #0
3419b5f2:	60f8      	str	r0, [r7, #12]
3419b5f4:	60b9      	str	r1, [r7, #8]
3419b5f6:	603b      	str	r3, [r7, #0]
3419b5f8:	4613      	mov	r3, r2
3419b5fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3419b5fc:	e04f      	b.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3419b5fe:	69bb      	ldr	r3, [r7, #24]
3419b600:	f1b3 3fff 	cmp.w	r3, #4294967295
3419b604:	d04b      	beq.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3419b606:	f7e8 ff9b 	bl	34184540 <HAL_GetTick>
3419b60a:	4602      	mov	r2, r0
3419b60c:	683b      	ldr	r3, [r7, #0]
3419b60e:	1ad3      	subs	r3, r2, r3
3419b610:	69ba      	ldr	r2, [r7, #24]
3419b612:	429a      	cmp	r2, r3
3419b614:	d302      	bcc.n	3419b61c <UART_WaitOnFlagUntilTimeout+0x30>
3419b616:	69bb      	ldr	r3, [r7, #24]
3419b618:	2b00      	cmp	r3, #0
3419b61a:	d101      	bne.n	3419b620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3419b61c:	2303      	movs	r3, #3
3419b61e:	e04e      	b.n	3419b6be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3419b620:	68fb      	ldr	r3, [r7, #12]
3419b622:	681b      	ldr	r3, [r3, #0]
3419b624:	681b      	ldr	r3, [r3, #0]
3419b626:	f003 0304 	and.w	r3, r3, #4
3419b62a:	2b00      	cmp	r3, #0
3419b62c:	d037      	beq.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
3419b62e:	68bb      	ldr	r3, [r7, #8]
3419b630:	2b80      	cmp	r3, #128	@ 0x80
3419b632:	d034      	beq.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
3419b634:	68bb      	ldr	r3, [r7, #8]
3419b636:	2b40      	cmp	r3, #64	@ 0x40
3419b638:	d031      	beq.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3419b63a:	68fb      	ldr	r3, [r7, #12]
3419b63c:	681b      	ldr	r3, [r3, #0]
3419b63e:	69db      	ldr	r3, [r3, #28]
3419b640:	f003 0308 	and.w	r3, r3, #8
3419b644:	2b08      	cmp	r3, #8
3419b646:	d110      	bne.n	3419b66a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3419b648:	68fb      	ldr	r3, [r7, #12]
3419b64a:	681b      	ldr	r3, [r3, #0]
3419b64c:	2208      	movs	r2, #8
3419b64e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3419b650:	68f8      	ldr	r0, [r7, #12]
3419b652:	f000 f838 	bl	3419b6c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3419b656:	68fb      	ldr	r3, [r7, #12]
3419b658:	2208      	movs	r2, #8
3419b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3419b65e:	68fb      	ldr	r3, [r7, #12]
3419b660:	2200      	movs	r2, #0
3419b662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3419b666:	2301      	movs	r3, #1
3419b668:	e029      	b.n	3419b6be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3419b66a:	68fb      	ldr	r3, [r7, #12]
3419b66c:	681b      	ldr	r3, [r3, #0]
3419b66e:	69db      	ldr	r3, [r3, #28]
3419b670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3419b674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3419b678:	d111      	bne.n	3419b69e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3419b67a:	68fb      	ldr	r3, [r7, #12]
3419b67c:	681b      	ldr	r3, [r3, #0]
3419b67e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3419b682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3419b684:	68f8      	ldr	r0, [r7, #12]
3419b686:	f000 f81e 	bl	3419b6c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3419b68a:	68fb      	ldr	r3, [r7, #12]
3419b68c:	2220      	movs	r2, #32
3419b68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3419b692:	68fb      	ldr	r3, [r7, #12]
3419b694:	2200      	movs	r2, #0
3419b696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3419b69a:	2303      	movs	r3, #3
3419b69c:	e00f      	b.n	3419b6be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3419b69e:	68fb      	ldr	r3, [r7, #12]
3419b6a0:	681b      	ldr	r3, [r3, #0]
3419b6a2:	69da      	ldr	r2, [r3, #28]
3419b6a4:	68bb      	ldr	r3, [r7, #8]
3419b6a6:	4013      	ands	r3, r2
3419b6a8:	68ba      	ldr	r2, [r7, #8]
3419b6aa:	429a      	cmp	r2, r3
3419b6ac:	bf0c      	ite	eq
3419b6ae:	2301      	moveq	r3, #1
3419b6b0:	2300      	movne	r3, #0
3419b6b2:	b2db      	uxtb	r3, r3
3419b6b4:	461a      	mov	r2, r3
3419b6b6:	79fb      	ldrb	r3, [r7, #7]
3419b6b8:	429a      	cmp	r2, r3
3419b6ba:	d0a0      	beq.n	3419b5fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3419b6bc:	2300      	movs	r3, #0
}
3419b6be:	4618      	mov	r0, r3
3419b6c0:	3710      	adds	r7, #16
3419b6c2:	46bd      	mov	sp, r7
3419b6c4:	bd80      	pop	{r7, pc}

3419b6c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3419b6c6:	b480      	push	{r7}
3419b6c8:	b095      	sub	sp, #84	@ 0x54
3419b6ca:	af00      	add	r7, sp, #0
3419b6cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3419b6ce:	687b      	ldr	r3, [r7, #4]
3419b6d0:	681b      	ldr	r3, [r3, #0]
3419b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3419b6d6:	e853 3f00 	ldrex	r3, [r3]
3419b6da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3419b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419b6de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3419b6e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
3419b6e4:	687b      	ldr	r3, [r7, #4]
3419b6e6:	681b      	ldr	r3, [r3, #0]
3419b6e8:	461a      	mov	r2, r3
3419b6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3419b6ec:	643b      	str	r3, [r7, #64]	@ 0x40
3419b6ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b6f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3419b6f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3419b6f4:	e841 2300 	strex	r3, r2, [r1]
3419b6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3419b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3419b6fc:	2b00      	cmp	r3, #0
3419b6fe:	d1e6      	bne.n	3419b6ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3419b700:	687b      	ldr	r3, [r7, #4]
3419b702:	681b      	ldr	r3, [r3, #0]
3419b704:	3308      	adds	r3, #8
3419b706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b708:	6a3b      	ldr	r3, [r7, #32]
3419b70a:	e853 3f00 	ldrex	r3, [r3]
3419b70e:	61fb      	str	r3, [r7, #28]
   return(result);
3419b710:	69fb      	ldr	r3, [r7, #28]
3419b712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3419b716:	f023 0301 	bic.w	r3, r3, #1
3419b71a:	64bb      	str	r3, [r7, #72]	@ 0x48
3419b71c:	687b      	ldr	r3, [r7, #4]
3419b71e:	681b      	ldr	r3, [r3, #0]
3419b720:	3308      	adds	r3, #8
3419b722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3419b724:	62fa      	str	r2, [r7, #44]	@ 0x2c
3419b726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3419b72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3419b72c:	e841 2300 	strex	r3, r2, [r1]
3419b730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3419b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419b734:	2b00      	cmp	r3, #0
3419b736:	d1e3      	bne.n	3419b700 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3419b738:	687b      	ldr	r3, [r7, #4]
3419b73a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3419b73c:	2b01      	cmp	r3, #1
3419b73e:	d118      	bne.n	3419b772 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3419b740:	687b      	ldr	r3, [r7, #4]
3419b742:	681b      	ldr	r3, [r3, #0]
3419b744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3419b746:	68fb      	ldr	r3, [r7, #12]
3419b748:	e853 3f00 	ldrex	r3, [r3]
3419b74c:	60bb      	str	r3, [r7, #8]
   return(result);
3419b74e:	68bb      	ldr	r3, [r7, #8]
3419b750:	f023 0310 	bic.w	r3, r3, #16
3419b754:	647b      	str	r3, [r7, #68]	@ 0x44
3419b756:	687b      	ldr	r3, [r7, #4]
3419b758:	681b      	ldr	r3, [r3, #0]
3419b75a:	461a      	mov	r2, r3
3419b75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419b75e:	61bb      	str	r3, [r7, #24]
3419b760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3419b762:	6979      	ldr	r1, [r7, #20]
3419b764:	69ba      	ldr	r2, [r7, #24]
3419b766:	e841 2300 	strex	r3, r2, [r1]
3419b76a:	613b      	str	r3, [r7, #16]
   return(result);
3419b76c:	693b      	ldr	r3, [r7, #16]
3419b76e:	2b00      	cmp	r3, #0
3419b770:	d1e6      	bne.n	3419b740 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3419b772:	687b      	ldr	r3, [r7, #4]
3419b774:	2220      	movs	r2, #32
3419b776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3419b77a:	687b      	ldr	r3, [r7, #4]
3419b77c:	2200      	movs	r2, #0
3419b77e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3419b780:	687b      	ldr	r3, [r7, #4]
3419b782:	2200      	movs	r2, #0
3419b784:	675a      	str	r2, [r3, #116]	@ 0x74
}
3419b786:	bf00      	nop
3419b788:	3754      	adds	r7, #84	@ 0x54
3419b78a:	46bd      	mov	sp, r7
3419b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
3419b790:	4770      	bx	lr

3419b792 <ISP_Algo_BadPixel_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
3419b792:	b480      	push	{r7}
3419b794:	b083      	sub	sp, #12
3419b796:	af00      	add	r7, sp, #0
3419b798:	6078      	str	r0, [r7, #4]
3419b79a:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
3419b79c:	683b      	ldr	r3, [r7, #0]
3419b79e:	2200      	movs	r2, #0
3419b7a0:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3419b7a2:	2300      	movs	r3, #0
}
3419b7a4:	4618      	mov	r0, r3
3419b7a6:	370c      	adds	r7, #12
3419b7a8:	46bd      	mov	sp, r7
3419b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
3419b7ae:	4770      	bx	lr

3419b7b0 <ISP_Algo_BadPixel_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_DeInit(void *hIsp, void *pAlgo)
{
3419b7b0:	b480      	push	{r7}
3419b7b2:	b083      	sub	sp, #12
3419b7b4:	af00      	add	r7, sp, #0
3419b7b6:	6078      	str	r0, [r7, #4]
3419b7b8:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
3419b7ba:	2300      	movs	r3, #0
}
3419b7bc:	4618      	mov	r0, r3
3419b7be:	370c      	adds	r7, #12
3419b7c0:	46bd      	mov	sp, r7
3419b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
3419b7c6:	4770      	bx	lr

3419b7c8 <ISP_Algo_BadPixel_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Process(void *hIsp, void *pAlgo)
{
3419b7c8:	b580      	push	{r7, lr}
3419b7ca:	b088      	sub	sp, #32
3419b7cc:	af00      	add	r7, sp, #0
3419b7ce:	6078      	str	r0, [r7, #4]
3419b7d0:	6039      	str	r1, [r7, #0]
  uint32_t CurrentFrameId;
  ISP_BadPixelTypeDef BadPixelConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419b7d2:	6878      	ldr	r0, [r7, #4]
3419b7d4:	f002 fd8e 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419b7d8:	61f8      	str	r0, [r7, #28]

  if (IQParamConfig->badPixelAlgo.enable == false)
3419b7da:	69fb      	ldr	r3, [r7, #28]
3419b7dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3419b7e0:	2b00      	cmp	r3, #0
3419b7e2:	d101      	bne.n	3419b7e8 <ISP_Algo_BadPixel_Process+0x20>
  {
    return ISP_OK;
3419b7e4:	2300      	movs	r3, #0
3419b7e6:	e069      	b.n	3419b8bc <ISP_Algo_BadPixel_Process+0xf4>
  }

  /* Wait for a new frame */
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
3419b7e8:	6878      	ldr	r0, [r7, #4]
3419b7ea:	f002 fcce 	bl	3419e18a <ISP_SVC_Misc_GetMainFrameId>
3419b7ee:	61b8      	str	r0, [r7, #24]
  if (CurrentFrameId == LastFrameId)
3419b7f0:	4b34      	ldr	r3, [pc, #208]	@ (3419b8c4 <ISP_Algo_BadPixel_Process+0xfc>)
3419b7f2:	681b      	ldr	r3, [r3, #0]
3419b7f4:	69ba      	ldr	r2, [r7, #24]
3419b7f6:	429a      	cmp	r2, r3
3419b7f8:	d101      	bne.n	3419b7fe <ISP_Algo_BadPixel_Process+0x36>
  {
    return ISP_OK;
3419b7fa:	2300      	movs	r3, #0
3419b7fc:	e05e      	b.n	3419b8bc <ISP_Algo_BadPixel_Process+0xf4>
  }
  LastFrameId = CurrentFrameId;
3419b7fe:	4a31      	ldr	r2, [pc, #196]	@ (3419b8c4 <ISP_Algo_BadPixel_Process+0xfc>)
3419b800:	69bb      	ldr	r3, [r7, #24]
3419b802:	6013      	str	r3, [r2, #0]

  if (Step++ >= 0)
3419b804:	4b30      	ldr	r3, [pc, #192]	@ (3419b8c8 <ISP_Algo_BadPixel_Process+0x100>)
3419b806:	f993 3000 	ldrsb.w	r3, [r3]
3419b80a:	b2da      	uxtb	r2, r3
3419b80c:	3201      	adds	r2, #1
3419b80e:	b2d2      	uxtb	r2, r2
3419b810:	b251      	sxtb	r1, r2
3419b812:	4a2d      	ldr	r2, [pc, #180]	@ (3419b8c8 <ISP_Algo_BadPixel_Process+0x100>)
3419b814:	7011      	strb	r1, [r2, #0]
3419b816:	2b00      	cmp	r3, #0
3419b818:	db12      	blt.n	3419b840 <ISP_Algo_BadPixel_Process+0x78>
  {
    /* Measure the number of bad pixels */
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
3419b81a:	f107 030c 	add.w	r3, r7, #12
3419b81e:	4619      	mov	r1, r3
3419b820:	6878      	ldr	r0, [r7, #4]
3419b822:	f002 f960 	bl	3419dae6 <ISP_SVC_ISP_GetBadPixel>
3419b826:	4603      	mov	r3, r0
3419b828:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3419b82a:	7dfb      	ldrb	r3, [r7, #23]
3419b82c:	2b00      	cmp	r3, #0
3419b82e:	d001      	beq.n	3419b834 <ISP_Algo_BadPixel_Process+0x6c>
    {
      return ret;
3419b830:	7dfb      	ldrb	r3, [r7, #23]
3419b832:	e043      	b.n	3419b8bc <ISP_Algo_BadPixel_Process+0xf4>
    }
    BadPixelCount += BadPixelConfig.count;
3419b834:	693a      	ldr	r2, [r7, #16]
3419b836:	4b25      	ldr	r3, [pc, #148]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b838:	681b      	ldr	r3, [r3, #0]
3419b83a:	4413      	add	r3, r2
3419b83c:	4a23      	ldr	r2, [pc, #140]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b83e:	6013      	str	r3, [r2, #0]
  }

  if (Step == 10)
3419b840:	4b21      	ldr	r3, [pc, #132]	@ (3419b8c8 <ISP_Algo_BadPixel_Process+0x100>)
3419b842:	f993 3000 	ldrsb.w	r3, [r3]
3419b846:	2b0a      	cmp	r3, #10
3419b848:	d137      	bne.n	3419b8ba <ISP_Algo_BadPixel_Process+0xf2>
  {
    /* All measures done : make an average and compare with threshold */
    BadPixelCount /= 10;
3419b84a:	4b20      	ldr	r3, [pc, #128]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b84c:	681b      	ldr	r3, [r3, #0]
3419b84e:	4a20      	ldr	r2, [pc, #128]	@ (3419b8d0 <ISP_Algo_BadPixel_Process+0x108>)
3419b850:	fba2 2303 	umull	r2, r3, r2, r3
3419b854:	08db      	lsrs	r3, r3, #3
3419b856:	4a1d      	ldr	r2, [pc, #116]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b858:	6013      	str	r3, [r2, #0]

    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3419b85a:	69fb      	ldr	r3, [r7, #28]
3419b85c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3419b85e:	4b1b      	ldr	r3, [pc, #108]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b860:	681b      	ldr	r3, [r3, #0]
3419b862:	429a      	cmp	r2, r3
3419b864:	d207      	bcs.n	3419b876 <ISP_Algo_BadPixel_Process+0xae>
3419b866:	7b7b      	ldrb	r3, [r7, #13]
3419b868:	2b00      	cmp	r3, #0
3419b86a:	d004      	beq.n	3419b876 <ISP_Algo_BadPixel_Process+0xae>
    {
      /* Bad pixel is above target : decrease strength */
      BadPixelConfig.strength--;
3419b86c:	7b7b      	ldrb	r3, [r7, #13]
3419b86e:	3b01      	subs	r3, #1
3419b870:	b2db      	uxtb	r3, r3
3419b872:	737b      	strb	r3, [r7, #13]
3419b874:	e00c      	b.n	3419b890 <ISP_Algo_BadPixel_Process+0xc8>
    }
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
3419b876:	69fb      	ldr	r3, [r7, #28]
3419b878:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
3419b87a:	4b14      	ldr	r3, [pc, #80]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b87c:	681b      	ldr	r3, [r3, #0]
3419b87e:	429a      	cmp	r2, r3
3419b880:	d906      	bls.n	3419b890 <ISP_Algo_BadPixel_Process+0xc8>
3419b882:	7b7b      	ldrb	r3, [r7, #13]
3419b884:	2b05      	cmp	r3, #5
3419b886:	d803      	bhi.n	3419b890 <ISP_Algo_BadPixel_Process+0xc8>
    {
      /* Bad pixel is below target : increase strength. (exclude ISP_BADPIXEL_STRENGTH_MAX which gives weird results) */
      BadPixelConfig.strength++;
3419b888:	7b7b      	ldrb	r3, [r7, #13]
3419b88a:	3301      	adds	r3, #1
3419b88c:	b2db      	uxtb	r3, r3
3419b88e:	737b      	strb	r3, [r7, #13]
    }

    /* Set updated Strength */
    BadPixelConfig.enable = 1;
3419b890:	2301      	movs	r3, #1
3419b892:	733b      	strb	r3, [r7, #12]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
3419b894:	f107 030c 	add.w	r3, r7, #12
3419b898:	4619      	mov	r1, r3
3419b89a:	6878      	ldr	r0, [r7, #4]
3419b89c:	f002 f8e4 	bl	3419da68 <ISP_SVC_ISP_SetBadPixel>
3419b8a0:	4603      	mov	r3, r0
3419b8a2:	75fb      	strb	r3, [r7, #23]
    if (ret != ISP_OK)
3419b8a4:	7dfb      	ldrb	r3, [r7, #23]
3419b8a6:	2b00      	cmp	r3, #0
3419b8a8:	d001      	beq.n	3419b8ae <ISP_Algo_BadPixel_Process+0xe6>
    {
      return ret;
3419b8aa:	7dfb      	ldrb	r3, [r7, #23]
3419b8ac:	e006      	b.n	3419b8bc <ISP_Algo_BadPixel_Process+0xf4>
    }

    /* Set Step to -1 to wait for an extra frame before a new measurement (the ISP HW needs one frame to update after reconfig) */
    Step = -1;
3419b8ae:	4b06      	ldr	r3, [pc, #24]	@ (3419b8c8 <ISP_Algo_BadPixel_Process+0x100>)
3419b8b0:	22ff      	movs	r2, #255	@ 0xff
3419b8b2:	701a      	strb	r2, [r3, #0]
    BadPixelCount = 0;
3419b8b4:	4b05      	ldr	r3, [pc, #20]	@ (3419b8cc <ISP_Algo_BadPixel_Process+0x104>)
3419b8b6:	2200      	movs	r2, #0
3419b8b8:	601a      	str	r2, [r3, #0]
  }

  return ISP_OK;
3419b8ba:	2300      	movs	r3, #0
}
3419b8bc:	4618      	mov	r0, r3
3419b8be:	3720      	adds	r7, #32
3419b8c0:	46bd      	mov	sp, r7
3419b8c2:	bd80      	pop	{r7, pc}
3419b8c4:	341c21d0 	.word	0x341c21d0
3419b8c8:	341c21d4 	.word	0x341c21d4
3419b8cc:	341c21d8 	.word	0x341c21d8
3419b8d0:	cccccccd 	.word	0xcccccccd

3419b8d4 <log_cb>:

#if defined(ISP_MW_SW_AEC_ALGO_SUPPORT) || defined(ISP_MW_SW_AWB_ALGO_SUPPORT)
static void log_cb(const char *const msg)
{
3419b8d4:	b580      	push	{r7, lr}
3419b8d6:	b082      	sub	sp, #8
3419b8d8:	af00      	add	r7, sp, #0
3419b8da:	6078      	str	r0, [r7, #4]
  printf("%s", msg);
3419b8dc:	6879      	ldr	r1, [r7, #4]
3419b8de:	4805      	ldr	r0, [pc, #20]	@ (3419b8f4 <log_cb+0x20>)
3419b8e0:	f007 fb62 	bl	341a2fa8 <iprintf>
  printf("\r\n");
3419b8e4:	4804      	ldr	r0, [pc, #16]	@ (3419b8f8 <log_cb+0x24>)
3419b8e6:	f007 fbc7 	bl	341a3078 <puts>
}
3419b8ea:	bf00      	nop
3419b8ec:	3708      	adds	r7, #8
3419b8ee:	46bd      	mov	sp, r7
3419b8f0:	bd80      	pop	{r7, pc}
3419b8f2:	bf00      	nop
3419b8f4:	341a5438 	.word	0x341a5438
3419b8f8:	341a543c 	.word	0x341a543c

3419b8fc <ISP_Algo_AEC_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Init(void *hIsp, void *pAlgo)
{
3419b8fc:	b580      	push	{r7, lr}
3419b8fe:	b088      	sub	sp, #32
3419b900:	af00      	add	r7, sp, #0
3419b902:	6078      	str	r0, [r7, #4]
3419b904:	6039      	str	r1, [r7, #0]
  ISP_HandleTypeDef *pIsp_handle = (ISP_HandleTypeDef*) hIsp;
3419b906:	687b      	ldr	r3, [r7, #4]
3419b908:	61fb      	str	r3, [r7, #28]
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3419b90a:	683b      	ldr	r3, [r7, #0]
3419b90c:	61bb      	str	r3, [r7, #24]
  ISP_SensorExposureTypeDef exposureConfig;
  ISP_SensorGainTypeDef gainConfig;
  ISP_IQParamTypeDef *IQParamConfig;
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419b90e:	6878      	ldr	r0, [r7, #4]
3419b910:	f002 fcf0 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419b914:	6178      	str	r0, [r7, #20]

  if (IQParamConfig->sensorDelay.delay == 0)
3419b916:	697b      	ldr	r3, [r7, #20]
3419b918:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
3419b91c:	2b00      	cmp	r3, #0
3419b91e:	d103      	bne.n	3419b928 <ISP_Algo_AEC_Init+0x2c>
  {
    /* A value of 0 is invalid, it would break the AEC algo */
    IQParamConfig->sensorDelay.delay = 1;
3419b920:	697b      	ldr	r3, [r7, #20]
3419b922:	2201      	movs	r2, #1
3419b924:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
  }

  /* Create st_ae_process instance */
  pIspAEprocess = evision_api_st_ae_new(log_cb);
3419b928:	4830      	ldr	r0, [pc, #192]	@ (3419b9ec <ISP_Algo_AEC_Init+0xf0>)
3419b92a:	f7e5 fd43 	bl	341813b4 <evision_api_st_ae_new>
3419b92e:	4603      	mov	r3, r0
3419b930:	4a2f      	ldr	r2, [pc, #188]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b932:	6013      	str	r3, [r2, #0]
  if (pIspAEprocess == NULL)
3419b934:	4b2e      	ldr	r3, [pc, #184]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b936:	681b      	ldr	r3, [r3, #0]
3419b938:	2b00      	cmp	r3, #0
3419b93a:	d101      	bne.n	3419b940 <ISP_Algo_AEC_Init+0x44>
  {
    return ISP_ERR_ALGO;
3419b93c:	23be      	movs	r3, #190	@ 0xbe
3419b93e:	e050      	b.n	3419b9e2 <ISP_Algo_AEC_Init+0xe6>
  }

  /* Initialize st_ae_process instance */
  e_ret = evision_api_st_ae_init(pIspAEprocess);
3419b940:	4b2b      	ldr	r3, [pc, #172]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b942:	681b      	ldr	r3, [r3, #0]
3419b944:	4618      	mov	r0, r3
3419b946:	f7e5 fd7c 	bl	34181442 <evision_api_st_ae_init>
3419b94a:	4603      	mov	r3, r0
3419b94c:	74fb      	strb	r3, [r7, #19]
  if (e_ret != EVISION_RET_SUCCESS)
3419b94e:	f997 3013 	ldrsb.w	r3, [r7, #19]
3419b952:	2b01      	cmp	r3, #1
3419b954:	d006      	beq.n	3419b964 <ISP_Algo_AEC_Init+0x68>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3419b956:	4b26      	ldr	r3, [pc, #152]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b958:	681b      	ldr	r3, [r3, #0]
3419b95a:	4618      	mov	r0, r3
3419b95c:	f7e5 fd41 	bl	341813e2 <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
3419b960:	23be      	movs	r3, #190	@ 0xbe
3419b962:	e03e      	b.n	3419b9e2 <ISP_Algo_AEC_Init+0xe6>
  }

  /* Configure algo (AEC target) */
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3419b964:	4b22      	ldr	r3, [pc, #136]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b966:	681b      	ldr	r3, [r3, #0]
3419b968:	697a      	ldr	r2, [r7, #20]
3419b96a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3419b96c:	611a      	str	r2, [r3, #16]

  /* Configure algo (sensor config) */
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
3419b96e:	4b20      	ldr	r3, [pc, #128]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b970:	681b      	ldr	r3, [r3, #0]
3419b972:	69fa      	ldr	r2, [r7, #28]
3419b974:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
3419b978:	641a      	str	r2, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
3419b97a:	4b1d      	ldr	r3, [pc, #116]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b97c:	681b      	ldr	r3, [r3, #0]
3419b97e:	69fa      	ldr	r2, [r7, #28]
3419b980:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
3419b984:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
3419b986:	4b1a      	ldr	r3, [pc, #104]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b988:	681b      	ldr	r3, [r3, #0]
3419b98a:	69fa      	ldr	r2, [r7, #28]
3419b98c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
3419b98e:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
3419b990:	4b17      	ldr	r3, [pc, #92]	@ (3419b9f0 <ISP_Algo_AEC_Init+0xf4>)
3419b992:	681b      	ldr	r3, [r3, #0]
3419b994:	69fa      	ldr	r2, [r7, #28]
3419b996:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3419b998:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize exposure and gain at min value */
  if (IQParamConfig->AECAlgo.enable == true)
3419b99a:	697b      	ldr	r3, [r7, #20]
3419b99c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3419b9a0:	2b01      	cmp	r3, #1
3419b9a2:	d11a      	bne.n	3419b9da <ISP_Algo_AEC_Init+0xde>
  {
    exposureConfig.exposure = pIsp_handle->sensorInfo.exposure_min;
3419b9a4:	69fb      	ldr	r3, [r7, #28]
3419b9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3419b9aa:	60fb      	str	r3, [r7, #12]
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
3419b9ac:	69fb      	ldr	r3, [r7, #28]
3419b9ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3419b9b0:	60bb      	str	r3, [r7, #8]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
3419b9b2:	f107 030c 	add.w	r3, r7, #12
3419b9b6:	4619      	mov	r1, r3
3419b9b8:	6878      	ldr	r0, [r7, #4]
3419b9ba:	f002 fb73 	bl	3419e0a4 <ISP_SVC_Sensor_SetExposure>
3419b9be:	4603      	mov	r3, r0
3419b9c0:	2b00      	cmp	r3, #0
3419b9c2:	d108      	bne.n	3419b9d6 <ISP_Algo_AEC_Init+0xda>
3419b9c4:	f107 0308 	add.w	r3, r7, #8
3419b9c8:	4619      	mov	r1, r3
3419b9ca:	6878      	ldr	r0, [r7, #4]
3419b9cc:	f002 fb1e 	bl	3419e00c <ISP_SVC_Sensor_SetGain>
3419b9d0:	4603      	mov	r3, r0
3419b9d2:	2b00      	cmp	r3, #0
3419b9d4:	d001      	beq.n	3419b9da <ISP_Algo_AEC_Init+0xde>
    {
      return ISP_ERR_ALGO;
3419b9d6:	23be      	movs	r3, #190	@ 0xbe
3419b9d8:	e003      	b.n	3419b9e2 <ISP_Algo_AEC_Init+0xe6>
    }
  }

  /* Update State */
  algo->state = ISP_ALGO_STATE_INIT;
3419b9da:	69bb      	ldr	r3, [r7, #24]
3419b9dc:	2200      	movs	r2, #0
3419b9de:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3419b9e0:	2300      	movs	r3, #0
}
3419b9e2:	4618      	mov	r0, r3
3419b9e4:	3720      	adds	r7, #32
3419b9e6:	46bd      	mov	sp, r7
3419b9e8:	bd80      	pop	{r7, pc}
3419b9ea:	bf00      	nop
3419b9ec:	3419b8d5 	.word	0x3419b8d5
3419b9f0:	341c21b0 	.word	0x341c21b0

3419b9f4 <ISP_Algo_AEC_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_DeInit(void *hIsp, void *pAlgo)
{
3419b9f4:	b580      	push	{r7, lr}
3419b9f6:	b082      	sub	sp, #8
3419b9f8:	af00      	add	r7, sp, #0
3419b9fa:	6078      	str	r0, [r7, #4]
3419b9fc:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAEprocess != NULL)
3419b9fe:	4b07      	ldr	r3, [pc, #28]	@ (3419ba1c <ISP_Algo_AEC_DeInit+0x28>)
3419ba00:	681b      	ldr	r3, [r3, #0]
3419ba02:	2b00      	cmp	r3, #0
3419ba04:	d004      	beq.n	3419ba10 <ISP_Algo_AEC_DeInit+0x1c>
  {
    evision_api_st_ae_delete(pIspAEprocess);
3419ba06:	4b05      	ldr	r3, [pc, #20]	@ (3419ba1c <ISP_Algo_AEC_DeInit+0x28>)
3419ba08:	681b      	ldr	r3, [r3, #0]
3419ba0a:	4618      	mov	r0, r3
3419ba0c:	f7e5 fce9 	bl	341813e2 <evision_api_st_ae_delete>
  }
  return ISP_OK;
3419ba10:	2300      	movs	r3, #0
}
3419ba12:	4618      	mov	r0, r3
3419ba14:	3708      	adds	r7, #8
3419ba16:	46bd      	mov	sp, r7
3419ba18:	bd80      	pop	{r7, pc}
3419ba1a:	bf00      	nop
3419ba1c:	341c21b0 	.word	0x341c21b0

3419ba20 <ISP_Algo_AEC_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3419ba20:	b480      	push	{r7}
3419ba22:	b083      	sub	sp, #12
3419ba24:	af00      	add	r7, sp, #0
3419ba26:	6078      	str	r0, [r7, #4]
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3419ba28:	687b      	ldr	r3, [r7, #4]
3419ba2a:	2203      	movs	r2, #3
3419ba2c:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3419ba2e:	2300      	movs	r3, #0
}
3419ba30:	4618      	mov	r0, r3
3419ba32:	370c      	adds	r7, #12
3419ba34:	46bd      	mov	sp, r7
3419ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ba3a:	4770      	bx	lr

3419ba3c <ISP_Algo_AEC_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_Process(void *hIsp, void *pAlgo)
{
3419ba3c:	b580      	push	{r7, lr}
3419ba3e:	b08e      	sub	sp, #56	@ 0x38
3419ba40:	af04      	add	r7, sp, #16
3419ba42:	6078      	str	r0, [r7, #4]
3419ba44:	6039      	str	r1, [r7, #0]
  static ISP_SVC_StatStateTypeDef stats;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3419ba46:	683b      	ldr	r3, [r7, #0]
3419ba48:	623b      	str	r3, [r7, #32]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret = ISP_OK;
3419ba4a:	2300      	movs	r3, #0
3419ba4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#ifdef ALGO_AEC_DBG_LOGS
  static uint32_t currentL;
#endif
  evision_return_t e_ret;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419ba50:	6878      	ldr	r0, [r7, #4]
3419ba52:	f002 fc4f 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419ba56:	61f8      	str	r0, [r7, #28]
  if (IQParamConfig->AECAlgo.enable == false)
3419ba58:	69fb      	ldr	r3, [r7, #28]
3419ba5a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3419ba5e:	2b00      	cmp	r3, #0
3419ba60:	d101      	bne.n	3419ba66 <ISP_Algo_AEC_Process+0x2a>
  {
    return ISP_OK;
3419ba62:	2300      	movs	r3, #0
3419ba64:	e0b3      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
  }

  switch(algo->state)
3419ba66:	6a3b      	ldr	r3, [r7, #32]
3419ba68:	785b      	ldrb	r3, [r3, #1]
3419ba6a:	2b03      	cmp	r3, #3
3419ba6c:	d025      	beq.n	3419baba <ISP_Algo_AEC_Process+0x7e>
3419ba6e:	2b03      	cmp	r3, #3
3419ba70:	f300 80ab 	bgt.w	3419bbca <ISP_Algo_AEC_Process+0x18e>
3419ba74:	2b01      	cmp	r3, #1
3419ba76:	dc02      	bgt.n	3419ba7e <ISP_Algo_AEC_Process+0x42>
3419ba78:	2b00      	cmp	r3, #0
3419ba7a:	da02      	bge.n	3419ba82 <ISP_Algo_AEC_Process+0x46>
3419ba7c:	e0a5      	b.n	3419bbca <ISP_Algo_AEC_Process+0x18e>
3419ba7e:	2b02      	cmp	r3, #2
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
    break;

  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;
3419ba80:	e0a3      	b.n	3419bbca <ISP_Algo_AEC_Process+0x18e>
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3419ba82:	69fb      	ldr	r3, [r7, #28]
3419ba84:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3419ba88:	9302      	str	r3, [sp, #8]
3419ba8a:	2301      	movs	r3, #1
3419ba8c:	9301      	str	r3, [sp, #4]
3419ba8e:	2302      	movs	r3, #2
3419ba90:	9300      	str	r3, [sp, #0]
3419ba92:	4b51      	ldr	r3, [pc, #324]	@ (3419bbd8 <ISP_Algo_AEC_Process+0x19c>)
3419ba94:	683a      	ldr	r2, [r7, #0]
3419ba96:	4951      	ldr	r1, [pc, #324]	@ (3419bbdc <ISP_Algo_AEC_Process+0x1a0>)
3419ba98:	6878      	ldr	r0, [r7, #4]
3419ba9a:	f002 ff7b 	bl	3419e994 <ISP_SVC_Stats_GetNext>
3419ba9e:	4603      	mov	r3, r0
3419baa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3419baa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419baa8:	2b00      	cmp	r3, #0
3419baaa:	d002      	beq.n	3419bab2 <ISP_Algo_AEC_Process+0x76>
      return ret;
3419baac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bab0:	e08d      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419bab2:	6a3b      	ldr	r3, [r7, #32]
3419bab4:	2202      	movs	r2, #2
3419bab6:	705a      	strb	r2, [r3, #1]
    break;
3419bab8:	e087      	b.n	3419bbca <ISP_Algo_AEC_Process+0x18e>

  case ISP_ALGO_STATE_STAT_READY:
    /* Align on the target update (may have been updated with ISP_SetExposureTarget()) */
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3419baba:	4b49      	ldr	r3, [pc, #292]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419babc:	681b      	ldr	r3, [r3, #0]
3419babe:	69fa      	ldr	r2, [r7, #28]
3419bac0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
3419bac2:	611a      	str	r2, [r3, #16]
    avgL = stats.down.averageL;
3419bac4:	4b44      	ldr	r3, [pc, #272]	@ (3419bbd8 <ISP_Algo_AEC_Process+0x19c>)
3419bac6:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
3419baca:	61bb      	str	r3, [r7, #24]
      printf("L = %ld\r\n", avgL);
      currentL = avgL;
    }
#endif
    /* Read the current sensor gain */
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3419bacc:	f107 0310 	add.w	r3, r7, #16
3419bad0:	4619      	mov	r1, r3
3419bad2:	6878      	ldr	r0, [r7, #4]
3419bad4:	f002 fac4 	bl	3419e060 <ISP_SVC_Sensor_GetGain>
3419bad8:	4603      	mov	r3, r0
3419bada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3419bade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bae2:	2b00      	cmp	r3, #0
3419bae4:	d002      	beq.n	3419baec <ISP_Algo_AEC_Process+0xb0>
    {
      return ret;
3419bae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419baea:	e070      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
    }

    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
3419baec:	f107 030c 	add.w	r3, r7, #12
3419baf0:	4619      	mov	r1, r3
3419baf2:	6878      	ldr	r0, [r7, #4]
3419baf4:	f002 fb00 	bl	3419e0f8 <ISP_SVC_Sensor_GetExposure>
3419baf8:	4603      	mov	r3, r0
3419bafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != ISP_OK)
3419bafe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb02:	2b00      	cmp	r3, #0
3419bb04:	d002      	beq.n	3419bb0c <ISP_Algo_AEC_Process+0xd0>
    {
      return ret;
3419bb06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb0a:	e060      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
    }

    /* Store meta data */
    Meta.averageL = avgL;
3419bb0c:	69bb      	ldr	r3, [r7, #24]
3419bb0e:	b2da      	uxtb	r2, r3
3419bb10:	4b34      	ldr	r3, [pc, #208]	@ (3419bbe4 <ISP_Algo_AEC_Process+0x1a8>)
3419bb12:	705a      	strb	r2, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
3419bb14:	69fb      	ldr	r3, [r7, #28]
3419bb16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3419bb18:	4a32      	ldr	r2, [pc, #200]	@ (3419bbe4 <ISP_Algo_AEC_Process+0x1a8>)
3419bb1a:	6053      	str	r3, [r2, #4]

    /* Run algo to calculate new gain and exposure */
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, avgL);
3419bb1c:	4b30      	ldr	r3, [pc, #192]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419bb1e:	6818      	ldr	r0, [r3, #0]
3419bb20:	6939      	ldr	r1, [r7, #16]
3419bb22:	68fa      	ldr	r2, [r7, #12]
3419bb24:	69bb      	ldr	r3, [r7, #24]
3419bb26:	b2db      	uxtb	r3, r3
3419bb28:	f7e5 fc96 	bl	34181458 <evision_api_st_ae_process>
3419bb2c:	4603      	mov	r3, r0
3419bb2e:	75fb      	strb	r3, [r7, #23]
    if (e_ret == EVISION_RET_SUCCESS)
3419bb30:	f997 3017 	ldrsb.w	r3, [r7, #23]
3419bb34:	2b01      	cmp	r3, #1
3419bb36:	d133      	bne.n	3419bba0 <ISP_Algo_AEC_Process+0x164>
    {
      if (gainConfig.gain != pIspAEprocess->new_gain)
3419bb38:	693a      	ldr	r2, [r7, #16]
3419bb3a:	4b29      	ldr	r3, [pc, #164]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419bb3c:	681b      	ldr	r3, [r3, #0]
3419bb3e:	689b      	ldr	r3, [r3, #8]
3419bb40:	429a      	cmp	r2, r3
3419bb42:	d013      	beq.n	3419bb6c <ISP_Algo_AEC_Process+0x130>
      {
        /* Set new gain */
        gainConfig.gain = pIspAEprocess->new_gain;
3419bb44:	4b26      	ldr	r3, [pc, #152]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419bb46:	681b      	ldr	r3, [r3, #0]
3419bb48:	689b      	ldr	r3, [r3, #8]
3419bb4a:	613b      	str	r3, [r7, #16]

        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
3419bb4c:	f107 0310 	add.w	r3, r7, #16
3419bb50:	4619      	mov	r1, r3
3419bb52:	6878      	ldr	r0, [r7, #4]
3419bb54:	f002 fa5a 	bl	3419e00c <ISP_SVC_Sensor_SetGain>
3419bb58:	4603      	mov	r3, r0
3419bb5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3419bb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb62:	2b00      	cmp	r3, #0
3419bb64:	d002      	beq.n	3419bb6c <ISP_Algo_AEC_Process+0x130>
        {
          return ret;
3419bb66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb6a:	e030      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
#ifdef ALGO_AEC_DBG_LOGS
        printf("New gain = %ld\r\n", gainConfig.gain);
#endif
      }

      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
3419bb6c:	68fa      	ldr	r2, [r7, #12]
3419bb6e:	4b1c      	ldr	r3, [pc, #112]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419bb70:	681b      	ldr	r3, [r3, #0]
3419bb72:	685b      	ldr	r3, [r3, #4]
3419bb74:	429a      	cmp	r2, r3
3419bb76:	d013      	beq.n	3419bba0 <ISP_Algo_AEC_Process+0x164>
      {
        /* Set new exposure */
        exposureConfig.exposure = pIspAEprocess->new_exposure;
3419bb78:	4b19      	ldr	r3, [pc, #100]	@ (3419bbe0 <ISP_Algo_AEC_Process+0x1a4>)
3419bb7a:	681b      	ldr	r3, [r3, #0]
3419bb7c:	685b      	ldr	r3, [r3, #4]
3419bb7e:	60fb      	str	r3, [r7, #12]

        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
3419bb80:	f107 030c 	add.w	r3, r7, #12
3419bb84:	4619      	mov	r1, r3
3419bb86:	6878      	ldr	r0, [r7, #4]
3419bb88:	f002 fa8c 	bl	3419e0a4 <ISP_SVC_Sensor_SetExposure>
3419bb8c:	4603      	mov	r3, r0
3419bb8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret != ISP_OK)
3419bb92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb96:	2b00      	cmp	r3, #0
3419bb98:	d002      	beq.n	3419bba0 <ISP_Algo_AEC_Process+0x164>
        {
          return ret;
3419bb9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419bb9e:	e016      	b.n	3419bbce <ISP_Algo_AEC_Process+0x192>
      }
    }

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
                                ISP_STAT_TYPE_AVG, IQParamConfig->sensorDelay.delay);
3419bba0:	69fb      	ldr	r3, [r7, #28]
3419bba2:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3419bba6:	9302      	str	r3, [sp, #8]
3419bba8:	2301      	movs	r3, #1
3419bbaa:	9301      	str	r3, [sp, #4]
3419bbac:	2302      	movs	r3, #2
3419bbae:	9300      	str	r3, [sp, #0]
3419bbb0:	4b09      	ldr	r3, [pc, #36]	@ (3419bbd8 <ISP_Algo_AEC_Process+0x19c>)
3419bbb2:	683a      	ldr	r2, [r7, #0]
3419bbb4:	4909      	ldr	r1, [pc, #36]	@ (3419bbdc <ISP_Algo_AEC_Process+0x1a0>)
3419bbb6:	6878      	ldr	r0, [r7, #4]
3419bbb8:	f002 feec 	bl	3419e994 <ISP_SVC_Stats_GetNext>
3419bbbc:	4603      	mov	r3, r0
3419bbbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419bbc2:	6a3b      	ldr	r3, [r7, #32]
3419bbc4:	2202      	movs	r2, #2
3419bbc6:	705a      	strb	r2, [r3, #1]
    break;
3419bbc8:	bf00      	nop
  }

  return ret;
3419bbca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3419bbce:	4618      	mov	r0, r3
3419bbd0:	3728      	adds	r7, #40	@ 0x28
3419bbd2:	46bd      	mov	sp, r7
3419bbd4:	bd80      	pop	{r7, pc}
3419bbd6:	bf00      	nop
3419bbd8:	341c21dc 	.word	0x341c21dc
3419bbdc:	3419ba21 	.word	0x3419ba21
3419bbe0:	341c21b0 	.word	0x341c21b0
3419bbe4:	341c21bc 	.word	0x341c21bc

3419bbe8 <ISP_Algo_ApplyGammaInverse>:
  * @param  hIsp:  ISP device handle.
  * @param  comp: component value
  * @retval gamma corrected value
  */
double ISP_Algo_ApplyGammaInverse(ISP_HandleTypeDef *hIsp, uint32_t comp)
{
3419bbe8:	b580      	push	{r7, lr}
3419bbea:	b084      	sub	sp, #16
3419bbec:	af00      	add	r7, sp, #0
3419bbee:	6078      	str	r0, [r7, #4]
3419bbf0:	6039      	str	r1, [r7, #0]
  double out;

  /* Check if gamma is enabled */
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
3419bbf2:	2101      	movs	r1, #1
3419bbf4:	6878      	ldr	r0, [r7, #4]
3419bbf6:	f002 faf2 	bl	3419e1de <ISP_SVC_Misc_IsGammaEnabled>
3419bbfa:	4603      	mov	r3, r0
3419bbfc:	2b00      	cmp	r3, #0
3419bbfe:	d019      	beq.n	3419bc34 <ISP_Algo_ApplyGammaInverse+0x4c>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
3419bc00:	683b      	ldr	r3, [r7, #0]
3419bc02:	ee07 3a90 	vmov	s15, r3
3419bc06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419bc0a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 3419bc68 <ISP_Algo_ApplyGammaInverse+0x80>
3419bc0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419bc12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3419bc16:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 3419bc58 <ISP_Algo_ApplyGammaInverse+0x70>
3419bc1a:	eeb0 0b47 	vmov.f64	d0, d7
3419bc1e:	f008 fb1b 	bl	341a4258 <pow>
3419bc22:	eeb0 7b40 	vmov.f64	d7, d0
3419bc26:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 3419bc60 <ISP_Algo_ApplyGammaInverse+0x78>
3419bc2a:	ee27 7b06 	vmul.f64	d7, d7, d6
3419bc2e:	ed87 7b02 	vstr	d7, [r7, #8]
3419bc32:	e006      	b.n	3419bc42 <ISP_Algo_ApplyGammaInverse+0x5a>
  }
  else
  {
    out = (double) comp;
3419bc34:	683b      	ldr	r3, [r7, #0]
3419bc36:	ee07 3a90 	vmov	s15, r3
3419bc3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3419bc3e:	ed87 7b02 	vstr	d7, [r7, #8]
  }
  return out;
3419bc42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3419bc46:	ec43 2b17 	vmov	d7, r2, r3
}
3419bc4a:	eeb0 0b47 	vmov.f64	d0, d7
3419bc4e:	3710      	adds	r7, #16
3419bc50:	46bd      	mov	sp, r7
3419bc52:	bd80      	pop	{r7, pc}
3419bc54:	f3af 8000 	nop.w
3419bc58:	d1745d17 	.word	0xd1745d17
3419bc5c:	3fdd1745 	.word	0x3fdd1745
3419bc60:	00000000 	.word	0x00000000
3419bc64:	406fe000 	.word	0x406fe000
3419bc68:	437f0000 	.word	0x437f0000

3419bc6c <ISP_Algo_GetUpStat>:
  *         Recalculate average up statistics from collected down statistics
  * @param  hIsp:  ISP device handle.
  * @param  pStats: pointer to the statistics
  */
void ISP_Algo_GetUpStat(ISP_HandleTypeDef *hIsp, ISP_SVC_StatStateTypeDef *pStats)
{
3419bc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3419bc70:	b09a      	sub	sp, #104	@ 0x68
3419bc72:	af00      	add	r7, sp, #0
3419bc74:	6378      	str	r0, [r7, #52]	@ 0x34
3419bc76:	6339      	str	r1, [r7, #48]	@ 0x30
  ISP_ISPGainTypeDef ISPGain;
  ISP_BlackLevelTypeDef BlackLevel;
  int64_t upR, upG, upB;

  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
3419bc78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
3419bc7c:	4619      	mov	r1, r3
3419bc7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3419bc80:	f002 f840 	bl	3419dd04 <ISP_SVC_ISP_GetGain>
3419bc84:	4603      	mov	r3, r0
3419bc86:	2b00      	cmp	r3, #0
3419bc88:	f040 80a8 	bne.w	3419bddc <ISP_Algo_GetUpStat+0x170>
3419bc8c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
3419bc90:	2b01      	cmp	r3, #1
3419bc92:	f040 80a3 	bne.w	3419bddc <ISP_Algo_GetUpStat+0x170>
  {

    /* reverse gain */
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
3419bc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bc98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3419bc9c:	b2db      	uxtb	r3, r3
3419bc9e:	2200      	movs	r2, #0
3419bca0:	461c      	mov	r4, r3
3419bca2:	4615      	mov	r5, r2
3419bca4:	4b58      	ldr	r3, [pc, #352]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bca6:	fb03 f205 	mul.w	r2, r3, r5
3419bcaa:	2300      	movs	r3, #0
3419bcac:	fb04 f303 	mul.w	r3, r4, r3
3419bcb0:	441a      	add	r2, r3
3419bcb2:	4b55      	ldr	r3, [pc, #340]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bcb4:	fba4 1303 	umull	r1, r3, r4, r3
3419bcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
3419bcba:	460b      	mov	r3, r1
3419bcbc:	62bb      	str	r3, [r7, #40]	@ 0x28
3419bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3419bcc0:	18d3      	adds	r3, r2, r3
3419bcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
3419bcc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419bcc6:	2200      	movs	r2, #0
3419bcc8:	623b      	str	r3, [r7, #32]
3419bcca:	627a      	str	r2, [r7, #36]	@ 0x24
3419bccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
3419bcd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3419bcd4:	f7e5 fcd0 	bl	34181678 <__aeabi_ldivmod>
3419bcd8:	4602      	mov	r2, r0
3419bcda:	460b      	mov	r3, r1
3419bcdc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
3419bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bce2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3419bce6:	b2db      	uxtb	r3, r3
3419bce8:	2200      	movs	r2, #0
3419bcea:	61bb      	str	r3, [r7, #24]
3419bcec:	61fa      	str	r2, [r7, #28]
3419bcee:	4b46      	ldr	r3, [pc, #280]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bcf0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
3419bcf4:	462a      	mov	r2, r5
3419bcf6:	fb03 f202 	mul.w	r2, r3, r2
3419bcfa:	2300      	movs	r3, #0
3419bcfc:	4621      	mov	r1, r4
3419bcfe:	fb01 f303 	mul.w	r3, r1, r3
3419bd02:	4413      	add	r3, r2
3419bd04:	4a40      	ldr	r2, [pc, #256]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bd06:	4621      	mov	r1, r4
3419bd08:	fba1 ab02 	umull	sl, fp, r1, r2
3419bd0c:	445b      	add	r3, fp
3419bd0e:	469b      	mov	fp, r3
3419bd10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3419bd12:	2200      	movs	r2, #0
3419bd14:	613b      	str	r3, [r7, #16]
3419bd16:	617a      	str	r2, [r7, #20]
3419bd18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419bd1c:	4650      	mov	r0, sl
3419bd1e:	4659      	mov	r1, fp
3419bd20:	f7e5 fcaa 	bl	34181678 <__aeabi_ldivmod>
3419bd24:	4602      	mov	r2, r0
3419bd26:	460b      	mov	r3, r1
3419bd28:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
3419bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bd2e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3419bd32:	b2db      	uxtb	r3, r3
3419bd34:	2200      	movs	r2, #0
3419bd36:	60bb      	str	r3, [r7, #8]
3419bd38:	60fa      	str	r2, [r7, #12]
3419bd3a:	4b33      	ldr	r3, [pc, #204]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bd3c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
3419bd40:	462a      	mov	r2, r5
3419bd42:	fb03 f202 	mul.w	r2, r3, r2
3419bd46:	2300      	movs	r3, #0
3419bd48:	4621      	mov	r1, r4
3419bd4a:	fb01 f303 	mul.w	r3, r1, r3
3419bd4e:	4413      	add	r3, r2
3419bd50:	4a2d      	ldr	r2, [pc, #180]	@ (3419be08 <ISP_Algo_GetUpStat+0x19c>)
3419bd52:	4621      	mov	r1, r4
3419bd54:	fba1 8902 	umull	r8, r9, r1, r2
3419bd58:	444b      	add	r3, r9
3419bd5a:	4699      	mov	r9, r3
3419bd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3419bd5e:	2200      	movs	r2, #0
3419bd60:	603b      	str	r3, [r7, #0]
3419bd62:	607a      	str	r2, [r7, #4]
3419bd64:	e9d7 2300 	ldrd	r2, r3, [r7]
3419bd68:	4640      	mov	r0, r8
3419bd6a:	4649      	mov	r1, r9
3419bd6c:	f7e5 fc84 	bl	34181678 <__aeabi_ldivmod>
3419bd70:	4602      	mov	r2, r0
3419bd72:	460b      	mov	r3, r1
3419bd74:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    pStats->up.averageR = (uint32_t) upR;
3419bd78:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
3419bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bd7e:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = (uint32_t) upG;
3419bd80:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
3419bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bd86:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = (uint32_t) upB;
3419bd88:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
3419bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bd8e:	709a      	strb	r2, [r3, #2]

    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3419bd90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
3419bd94:	4619      	mov	r1, r3
3419bd96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
3419bd98:	f001 ff1c 	bl	3419dbd4 <ISP_SVC_ISP_GetBlackLevel>
3419bd9c:	4603      	mov	r3, r0
3419bd9e:	2b00      	cmp	r3, #0
3419bda0:	d12c      	bne.n	3419bdfc <ISP_Algo_GetUpStat+0x190>
3419bda2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
3419bda6:	2b01      	cmp	r3, #1
3419bda8:	d128      	bne.n	3419bdfc <ISP_Algo_GetUpStat+0x190>
    {
        /* reverse black level */
    pStats->up.averageR += BlackLevel.BLCR;
3419bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdac:	781a      	ldrb	r2, [r3, #0]
3419bdae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
3419bdb2:	4413      	add	r3, r2
3419bdb4:	b2da      	uxtb	r2, r3
3419bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdb8:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG += BlackLevel.BLCG;
3419bdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdbc:	785a      	ldrb	r2, [r3, #1]
3419bdbe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
3419bdc2:	4413      	add	r3, r2
3419bdc4:	b2da      	uxtb	r2, r3
3419bdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdc8:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB += BlackLevel.BLCB;
3419bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdcc:	789a      	ldrb	r2, [r3, #2]
3419bdce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3419bdd2:	4413      	add	r3, r2
3419bdd4:	b2da      	uxtb	r2, r3
3419bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdd8:	709a      	strb	r2, [r3, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3419bdda:	e00f      	b.n	3419bdfc <ISP_Algo_GetUpStat+0x190>
    }
  }
  else
  {
    pStats->up.averageR = pStats->down.averageR;
3419bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdde:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
3419bde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bde4:	701a      	strb	r2, [r3, #0]
    pStats->up.averageG = pStats->down.averageG;
3419bde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bde8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
3419bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdee:	705a      	strb	r2, [r3, #1]
    pStats->up.averageB = pStats->down.averageB;
3419bdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdf2:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
3419bdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3419bdf8:	709a      	strb	r2, [r3, #2]
  }
}
3419bdfa:	e000      	b.n	3419bdfe <ISP_Algo_GetUpStat+0x192>
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
3419bdfc:	bf00      	nop
}
3419bdfe:	bf00      	nop
3419be00:	3768      	adds	r7, #104	@ 0x68
3419be02:	46bd      	mov	sp, r7
3419be04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3419be08:	05f5e100 	.word	0x05f5e100
3419be0c:	00000000 	.word	0x00000000

3419be10 <ISP_Algo_ApplyCConv>:
  * @param  outG: pointer to Green component value after color conversion
  * @param  outB: pointer to Blue component value after color conversion
  * @retval None
  */
void ISP_Algo_ApplyCConv(ISP_HandleTypeDef *hIsp, uint32_t inR, uint32_t inG, uint32_t inB, uint32_t *outR, uint32_t *outG, uint32_t *outB)
{
3419be10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3419be14:	b0d0      	sub	sp, #320	@ 0x140
3419be16:	af00      	add	r7, sp, #0
3419be18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
3419be1c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
3419be20:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
3419be24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  ISP_ColorConvTypeDef colorConv;
  int64_t ccR, ccG, ccB;

  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
3419be28:	f507 7380 	add.w	r3, r7, #256	@ 0x100
3419be2c:	4619      	mov	r1, r3
3419be2e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
3419be32:	f002 f85d 	bl	3419def0 <ISP_SVC_ISP_GetColorConv>
3419be36:	4603      	mov	r3, r0
3419be38:	2b00      	cmp	r3, #0
3419be3a:	f040 8216 	bne.w	3419c26a <ISP_Algo_ApplyCConv+0x45a>
3419be3e:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
3419be42:	2b01      	cmp	r3, #1
3419be44:	f040 8211 	bne.w	3419c26a <ISP_Algo_ApplyCConv+0x45a>
  {
    /* Apply ColorConversion matrix to the input components */
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
3419be48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3419be4c:	2200      	movs	r2, #0
3419be4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
3419be52:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
3419be56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
3419be5a:	17da      	asrs	r2, r3, #31
3419be5c:	461c      	mov	r4, r3
3419be5e:	4615      	mov	r5, r2
3419be60:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3419be64:	460b      	mov	r3, r1
3419be66:	fb04 f203 	mul.w	r2, r4, r3
3419be6a:	4603      	mov	r3, r0
3419be6c:	fb03 f305 	mul.w	r3, r3, r5
3419be70:	4413      	add	r3, r2
3419be72:	4602      	mov	r2, r0
3419be74:	fba2 ab04 	umull	sl, fp, r2, r4
3419be78:	445b      	add	r3, fp
3419be7a:	469b      	mov	fp, r3
3419be7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3419be80:	2200      	movs	r2, #0
3419be82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
3419be86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
3419be8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
3419be8e:	17da      	asrs	r2, r3, #31
3419be90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3419be94:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
3419be98:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3419be9c:	460b      	mov	r3, r1
3419be9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
3419bea2:	4622      	mov	r2, r4
3419bea4:	fb02 f203 	mul.w	r2, r2, r3
3419bea8:	e9c7 453a 	strd	r4, r5, [r7, #232]	@ 0xe8
3419beac:	462b      	mov	r3, r5
3419beae:	4604      	mov	r4, r0
3419beb0:	460d      	mov	r5, r1
3419beb2:	4621      	mov	r1, r4
3419beb4:	fb01 f303 	mul.w	r3, r1, r3
3419beb8:	4413      	add	r3, r2
3419beba:	4622      	mov	r2, r4
3419bebc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
3419bec0:	fba2 8901 	umull	r8, r9, r2, r1
3419bec4:	444b      	add	r3, r9
3419bec6:	4699      	mov	r9, r3
3419bec8:	eb1a 0308 	adds.w	r3, sl, r8
3419becc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
3419bed0:	eb4b 0309 	adc.w	r3, fp, r9
3419bed4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3419bed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3419bedc:	2200      	movs	r2, #0
3419bede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
3419bee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
3419bee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
3419beea:	17da      	asrs	r2, r3, #31
3419beec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
3419bef0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
3419bef4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
3419bef8:	462b      	mov	r3, r5
3419befa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
3419befe:	4642      	mov	r2, r8
3419bf00:	fb02 f203 	mul.w	r2, r2, r3
3419bf04:	464b      	mov	r3, r9
3419bf06:	4621      	mov	r1, r4
3419bf08:	fb01 f303 	mul.w	r3, r1, r3
3419bf0c:	4413      	add	r3, r2
3419bf0e:	4622      	mov	r2, r4
3419bf10:	4641      	mov	r1, r8
3419bf12:	fba2 1201 	umull	r1, r2, r2, r1
3419bf16:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
3419bf1a:	460a      	mov	r2, r1
3419bf1c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
3419bf20:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
3419bf24:	4413      	add	r3, r2
3419bf26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3419bf2a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
3419bf2e:	4623      	mov	r3, r4
3419bf30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3419bf34:	4602      	mov	r2, r0
3419bf36:	189b      	adds	r3, r3, r2
3419bf38:	613b      	str	r3, [r7, #16]
3419bf3a:	460b      	mov	r3, r1
3419bf3c:	462a      	mov	r2, r5
3419bf3e:	eb42 0303 	adc.w	r3, r2, r3
3419bf42:	617b      	str	r3, [r7, #20]
3419bf44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419bf48:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
3419bf4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3419bf50:	2200      	movs	r2, #0
3419bf52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
3419bf56:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
3419bf5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
3419bf5e:	17da      	asrs	r2, r3, #31
3419bf60:	67bb      	str	r3, [r7, #120]	@ 0x78
3419bf62:	67fa      	str	r2, [r7, #124]	@ 0x7c
3419bf64:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
3419bf68:	462b      	mov	r3, r5
3419bf6a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
3419bf6e:	4642      	mov	r2, r8
3419bf70:	fb02 f203 	mul.w	r2, r2, r3
3419bf74:	464b      	mov	r3, r9
3419bf76:	4621      	mov	r1, r4
3419bf78:	fb01 f303 	mul.w	r3, r1, r3
3419bf7c:	4413      	add	r3, r2
3419bf7e:	4622      	mov	r2, r4
3419bf80:	4641      	mov	r1, r8
3419bf82:	fba2 1201 	umull	r1, r2, r2, r1
3419bf86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
3419bf8a:	460a      	mov	r2, r1
3419bf8c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
3419bf90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
3419bf94:	4413      	add	r3, r2
3419bf96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3419bf9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3419bf9e:	2200      	movs	r2, #0
3419bfa0:	673b      	str	r3, [r7, #112]	@ 0x70
3419bfa2:	677a      	str	r2, [r7, #116]	@ 0x74
3419bfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
3419bfa8:	17da      	asrs	r2, r3, #31
3419bfaa:	66bb      	str	r3, [r7, #104]	@ 0x68
3419bfac:	66fa      	str	r2, [r7, #108]	@ 0x6c
3419bfae:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
3419bfb2:	462b      	mov	r3, r5
3419bfb4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
3419bfb8:	4642      	mov	r2, r8
3419bfba:	fb02 f203 	mul.w	r2, r2, r3
3419bfbe:	464b      	mov	r3, r9
3419bfc0:	4621      	mov	r1, r4
3419bfc2:	fb01 f303 	mul.w	r3, r1, r3
3419bfc6:	4413      	add	r3, r2
3419bfc8:	4622      	mov	r2, r4
3419bfca:	4641      	mov	r1, r8
3419bfcc:	fba2 1201 	umull	r1, r2, r2, r1
3419bfd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
3419bfd4:	460a      	mov	r2, r1
3419bfd6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
3419bfda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
3419bfde:	4413      	add	r3, r2
3419bfe0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3419bfe4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
3419bfe8:	4623      	mov	r3, r4
3419bfea:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3419bfee:	4602      	mov	r2, r0
3419bff0:	189b      	adds	r3, r3, r2
3419bff2:	663b      	str	r3, [r7, #96]	@ 0x60
3419bff4:	460b      	mov	r3, r1
3419bff6:	462a      	mov	r2, r5
3419bff8:	eb42 0303 	adc.w	r3, r2, r3
3419bffc:	667b      	str	r3, [r7, #100]	@ 0x64
3419bffe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3419c002:	2200      	movs	r2, #0
3419c004:	65bb      	str	r3, [r7, #88]	@ 0x58
3419c006:	65fa      	str	r2, [r7, #92]	@ 0x5c
3419c008:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
3419c00c:	17da      	asrs	r2, r3, #31
3419c00e:	653b      	str	r3, [r7, #80]	@ 0x50
3419c010:	657a      	str	r2, [r7, #84]	@ 0x54
3419c012:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
3419c016:	462b      	mov	r3, r5
3419c018:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
3419c01c:	4642      	mov	r2, r8
3419c01e:	fb02 f203 	mul.w	r2, r2, r3
3419c022:	464b      	mov	r3, r9
3419c024:	4621      	mov	r1, r4
3419c026:	fb01 f303 	mul.w	r3, r1, r3
3419c02a:	4413      	add	r3, r2
3419c02c:	4622      	mov	r2, r4
3419c02e:	4641      	mov	r1, r8
3419c030:	fba2 1201 	umull	r1, r2, r2, r1
3419c034:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
3419c038:	460a      	mov	r2, r1
3419c03a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
3419c03e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
3419c042:	4413      	add	r3, r2
3419c044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3419c048:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
3419c04c:	4623      	mov	r3, r4
3419c04e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3419c052:	4602      	mov	r2, r0
3419c054:	189b      	adds	r3, r3, r2
3419c056:	60bb      	str	r3, [r7, #8]
3419c058:	460b      	mov	r3, r1
3419c05a:	462a      	mov	r2, r5
3419c05c:	eb42 0303 	adc.w	r3, r2, r3
3419c060:	60fb      	str	r3, [r7, #12]
3419c062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
3419c066:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
3419c06a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
3419c06e:	2200      	movs	r2, #0
3419c070:	64bb      	str	r3, [r7, #72]	@ 0x48
3419c072:	64fa      	str	r2, [r7, #76]	@ 0x4c
3419c074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
3419c078:	17da      	asrs	r2, r3, #31
3419c07a:	643b      	str	r3, [r7, #64]	@ 0x40
3419c07c:	647a      	str	r2, [r7, #68]	@ 0x44
3419c07e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
3419c082:	462b      	mov	r3, r5
3419c084:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
3419c088:	4642      	mov	r2, r8
3419c08a:	fb02 f203 	mul.w	r2, r2, r3
3419c08e:	464b      	mov	r3, r9
3419c090:	4621      	mov	r1, r4
3419c092:	fb01 f303 	mul.w	r3, r1, r3
3419c096:	4413      	add	r3, r2
3419c098:	4622      	mov	r2, r4
3419c09a:	4641      	mov	r1, r8
3419c09c:	fba2 1201 	umull	r1, r2, r2, r1
3419c0a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
3419c0a4:	460a      	mov	r2, r1
3419c0a6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
3419c0aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
3419c0ae:	4413      	add	r3, r2
3419c0b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3419c0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
3419c0b8:	2200      	movs	r2, #0
3419c0ba:	63bb      	str	r3, [r7, #56]	@ 0x38
3419c0bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
3419c0be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
3419c0c2:	17da      	asrs	r2, r3, #31
3419c0c4:	633b      	str	r3, [r7, #48]	@ 0x30
3419c0c6:	637a      	str	r2, [r7, #52]	@ 0x34
3419c0c8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
3419c0cc:	462b      	mov	r3, r5
3419c0ce:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
3419c0d2:	4642      	mov	r2, r8
3419c0d4:	fb02 f203 	mul.w	r2, r2, r3
3419c0d8:	464b      	mov	r3, r9
3419c0da:	4621      	mov	r1, r4
3419c0dc:	fb01 f303 	mul.w	r3, r1, r3
3419c0e0:	4413      	add	r3, r2
3419c0e2:	4622      	mov	r2, r4
3419c0e4:	4641      	mov	r1, r8
3419c0e6:	fba2 1201 	umull	r1, r2, r2, r1
3419c0ea:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
3419c0ee:	460a      	mov	r2, r1
3419c0f0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
3419c0f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3419c0f8:	4413      	add	r3, r2
3419c0fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3419c0fe:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
3419c102:	4623      	mov	r3, r4
3419c104:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3419c108:	4602      	mov	r2, r0
3419c10a:	189b      	adds	r3, r3, r2
3419c10c:	62bb      	str	r3, [r7, #40]	@ 0x28
3419c10e:	460b      	mov	r3, r1
3419c110:	462a      	mov	r2, r5
3419c112:	eb42 0303 	adc.w	r3, r2, r3
3419c116:	62fb      	str	r3, [r7, #44]	@ 0x2c
3419c118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
3419c11c:	2200      	movs	r2, #0
3419c11e:	623b      	str	r3, [r7, #32]
3419c120:	627a      	str	r2, [r7, #36]	@ 0x24
3419c122:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
3419c126:	17da      	asrs	r2, r3, #31
3419c128:	61bb      	str	r3, [r7, #24]
3419c12a:	61fa      	str	r2, [r7, #28]
3419c12c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
3419c130:	462b      	mov	r3, r5
3419c132:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
3419c136:	4642      	mov	r2, r8
3419c138:	fb02 f203 	mul.w	r2, r2, r3
3419c13c:	464b      	mov	r3, r9
3419c13e:	4621      	mov	r1, r4
3419c140:	fb01 f303 	mul.w	r3, r1, r3
3419c144:	4413      	add	r3, r2
3419c146:	4622      	mov	r2, r4
3419c148:	4641      	mov	r1, r8
3419c14a:	fba2 1201 	umull	r1, r2, r2, r1
3419c14e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
3419c152:	460a      	mov	r2, r1
3419c154:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
3419c158:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
3419c15c:	4413      	add	r3, r2
3419c15e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3419c162:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
3419c166:	4623      	mov	r3, r4
3419c168:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3419c16c:	4602      	mov	r2, r0
3419c16e:	189b      	adds	r3, r3, r2
3419c170:	603b      	str	r3, [r7, #0]
3419c172:	460b      	mov	r3, r1
3419c174:	462a      	mov	r2, r5
3419c176:	eb42 0303 	adc.w	r3, r2, r3
3419c17a:	607b      	str	r3, [r7, #4]
3419c17c:	e9d7 2300 	ldrd	r2, r3, [r7]
3419c180:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    ccR /= ISP_CCM_PRECISION_FACTOR;
3419c184:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3419c188:	a343      	add	r3, pc, #268	@ (adr r3, 3419c298 <ISP_Algo_ApplyCConv+0x488>)
3419c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
3419c18e:	f7e5 fa73 	bl	34181678 <__aeabi_ldivmod>
3419c192:	4602      	mov	r2, r0
3419c194:	460b      	mov	r3, r1
3419c196:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG /= ISP_CCM_PRECISION_FACTOR;
3419c19a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3419c19e:	a33e      	add	r3, pc, #248	@ (adr r3, 3419c298 <ISP_Algo_ApplyCConv+0x488>)
3419c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
3419c1a4:	f7e5 fa68 	bl	34181678 <__aeabi_ldivmod>
3419c1a8:	4602      	mov	r2, r0
3419c1aa:	460b      	mov	r3, r1
3419c1ac:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB /= ISP_CCM_PRECISION_FACTOR;
3419c1b0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3419c1b4:	a338      	add	r3, pc, #224	@ (adr r3, 3419c298 <ISP_Algo_ApplyCConv+0x488>)
3419c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
3419c1ba:	f7e5 fa5d 	bl	34181678 <__aeabi_ldivmod>
3419c1be:	4602      	mov	r2, r0
3419c1c0:	460b      	mov	r3, r1
3419c1c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    /* Clamp values to 0-255 */
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
3419c1c6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3419c1ca:	2b00      	cmp	r3, #0
3419c1cc:	db0b      	blt.n	3419c1e6 <ISP_Algo_ApplyCConv+0x3d6>
3419c1ce:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
3419c1d2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3419c1d6:	f173 0100 	sbcs.w	r1, r3, #0
3419c1da:	db08      	blt.n	3419c1ee <ISP_Algo_ApplyCConv+0x3de>
3419c1dc:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3419c1e0:	f04f 0300 	mov.w	r3, #0
3419c1e4:	e003      	b.n	3419c1ee <ISP_Algo_ApplyCConv+0x3de>
3419c1e6:	f04f 0200 	mov.w	r2, #0
3419c1ea:	f04f 0300 	mov.w	r3, #0
3419c1ee:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3419c1f2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3419c1f6:	2b00      	cmp	r3, #0
3419c1f8:	db0b      	blt.n	3419c212 <ISP_Algo_ApplyCConv+0x402>
3419c1fa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
3419c1fe:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3419c202:	f173 0100 	sbcs.w	r1, r3, #0
3419c206:	db08      	blt.n	3419c21a <ISP_Algo_ApplyCConv+0x40a>
3419c208:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3419c20c:	f04f 0300 	mov.w	r3, #0
3419c210:	e003      	b.n	3419c21a <ISP_Algo_ApplyCConv+0x40a>
3419c212:	f04f 0200 	mov.w	r2, #0
3419c216:	f04f 0300 	mov.w	r3, #0
3419c21a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
3419c21e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3419c222:	2b00      	cmp	r3, #0
3419c224:	db0b      	blt.n	3419c23e <ISP_Algo_ApplyCConv+0x42e>
3419c226:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
3419c22a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3419c22e:	f173 0100 	sbcs.w	r1, r3, #0
3419c232:	db08      	blt.n	3419c246 <ISP_Algo_ApplyCConv+0x436>
3419c234:	f04f 02ff 	mov.w	r2, #255	@ 0xff
3419c238:	f04f 0300 	mov.w	r3, #0
3419c23c:	e003      	b.n	3419c246 <ISP_Algo_ApplyCConv+0x436>
3419c23e:	f04f 0200 	mov.w	r2, #0
3419c242:	f04f 0300 	mov.w	r3, #0
3419c246:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

    *outR = (uint32_t) ccR;
3419c24a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
3419c24e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3419c252:	601a      	str	r2, [r3, #0]
    *outG = (uint32_t) ccG;
3419c254:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
3419c258:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3419c25c:	601a      	str	r2, [r3, #0]
    *outB = (uint32_t) ccB;
3419c25e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
3419c262:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3419c266:	601a      	str	r2, [r3, #0]
3419c268:	e00f      	b.n	3419c28a <ISP_Algo_ApplyCConv+0x47a>
  }
  else
  {
    *outR = inR;
3419c26a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
3419c26e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
3419c272:	601a      	str	r2, [r3, #0]
    *outG = inG;
3419c274:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
3419c278:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
3419c27c:	601a      	str	r2, [r3, #0]
    *outB = inB;
3419c27e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
3419c282:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
3419c286:	601a      	str	r2, [r3, #0]
  }
}
3419c288:	bf00      	nop
3419c28a:	bf00      	nop
3419c28c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
3419c290:	46bd      	mov	sp, r7
3419c292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3419c296:	bf00      	nop
3419c298:	05f5e100 	.word	0x05f5e100
3419c29c:	00000000 	.word	0x00000000

3419c2a0 <ISP_Algo_AWB_Init>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Init(void *hIsp, void *pAlgo)
{
3419c2a0:	b580      	push	{r7, lr}
3419c2a2:	b084      	sub	sp, #16
3419c2a4:	af00      	add	r7, sp, #0
3419c2a6:	6078      	str	r0, [r7, #4]
3419c2a8:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3419c2aa:	683b      	ldr	r3, [r7, #0]
3419c2ac:	60fb      	str	r3, [r7, #12]

  /* Create estimator */
  pIspAWBestimator = evision_api_awb_new(log_cb);
3419c2ae:	480a      	ldr	r0, [pc, #40]	@ (3419c2d8 <ISP_Algo_AWB_Init+0x38>)
3419c2b0:	f7e4 fd62 	bl	34180d78 <evision_api_awb_new>
3419c2b4:	4603      	mov	r3, r0
3419c2b6:	4a09      	ldr	r2, [pc, #36]	@ (3419c2dc <ISP_Algo_AWB_Init+0x3c>)
3419c2b8:	6013      	str	r3, [r2, #0]
  if (pIspAWBestimator == NULL)
3419c2ba:	4b08      	ldr	r3, [pc, #32]	@ (3419c2dc <ISP_Algo_AWB_Init+0x3c>)
3419c2bc:	681b      	ldr	r3, [r3, #0]
3419c2be:	2b00      	cmp	r3, #0
3419c2c0:	d101      	bne.n	3419c2c6 <ISP_Algo_AWB_Init+0x26>
  {
    return ISP_ERR_ALGO;
3419c2c2:	23be      	movs	r3, #190	@ 0xbe
3419c2c4:	e003      	b.n	3419c2ce <ISP_Algo_AWB_Init+0x2e>
  }

  /* Continue the initialization in ISP_Algo_AWB_Process() function when state is ISP_ALGO_STATE_INIT.
   * This allows to read the IQ params after an algo stop/start cycle */
  algo->state = ISP_ALGO_STATE_INIT;
3419c2c6:	68fb      	ldr	r3, [r7, #12]
3419c2c8:	2200      	movs	r2, #0
3419c2ca:	705a      	strb	r2, [r3, #1]

  return ISP_OK;
3419c2cc:	2300      	movs	r3, #0
}
3419c2ce:	4618      	mov	r0, r3
3419c2d0:	3710      	adds	r7, #16
3419c2d2:	46bd      	mov	sp, r7
3419c2d4:	bd80      	pop	{r7, pc}
3419c2d6:	bf00      	nop
3419c2d8:	3419b8d5 	.word	0x3419b8d5
3419c2dc:	341c21b4 	.word	0x341c21b4

3419c2e0 <ISP_Algo_AWB_DeInit>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_DeInit(void *hIsp, void *pAlgo)
{
3419c2e0:	b580      	push	{r7, lr}
3419c2e2:	b082      	sub	sp, #8
3419c2e4:	af00      	add	r7, sp, #0
3419c2e6:	6078      	str	r0, [r7, #4]
3419c2e8:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  if (pIspAWBestimator != NULL)
3419c2ea:	4b07      	ldr	r3, [pc, #28]	@ (3419c308 <ISP_Algo_AWB_DeInit+0x28>)
3419c2ec:	681b      	ldr	r3, [r3, #0]
3419c2ee:	2b00      	cmp	r3, #0
3419c2f0:	d004      	beq.n	3419c2fc <ISP_Algo_AWB_DeInit+0x1c>
  {
    evision_api_awb_delete(pIspAWBestimator);
3419c2f2:	4b05      	ldr	r3, [pc, #20]	@ (3419c308 <ISP_Algo_AWB_DeInit+0x28>)
3419c2f4:	681b      	ldr	r3, [r3, #0]
3419c2f6:	4618      	mov	r0, r3
3419c2f8:	f7e4 fd59 	bl	34180dae <evision_api_awb_delete>
  }

  return ISP_OK;
3419c2fc:	2300      	movs	r3, #0
}
3419c2fe:	4618      	mov	r0, r3
3419c300:	3708      	adds	r7, #8
3419c302:	46bd      	mov	sp, r7
3419c304:	bd80      	pop	{r7, pc}
3419c306:	bf00      	nop
3419c308:	341c21b4 	.word	0x341c21b4

3419c30c <ISP_Algo_AWB_StatCb>:
  *         Callback informing that statistics are available
  * @param  pAlgo: ISP algorithm handle.
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
3419c30c:	b480      	push	{r7}
3419c30e:	b083      	sub	sp, #12
3419c310:	af00      	add	r7, sp, #0
3419c312:	6078      	str	r0, [r7, #4]
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
3419c314:	687b      	ldr	r3, [r7, #4]
3419c316:	785b      	ldrb	r3, [r3, #1]
3419c318:	2b00      	cmp	r3, #0
3419c31a:	d002      	beq.n	3419c322 <ISP_Algo_AWB_StatCb+0x16>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3419c31c:	687b      	ldr	r3, [r7, #4]
3419c31e:	2203      	movs	r2, #3
3419c320:	705a      	strb	r2, [r3, #1]
  }

  return ISP_OK;
3419c322:	2300      	movs	r3, #0
}
3419c324:	4618      	mov	r0, r3
3419c326:	370c      	adds	r7, #12
3419c328:	46bd      	mov	sp, r7
3419c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419c32e:	4770      	bx	lr

3419c330 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
3419c330:	b580      	push	{r7, lr}
3419c332:	b0b6      	sub	sp, #216	@ 0xd8
3419c334:	af04      	add	r7, sp, #16
3419c336:	6078      	str	r0, [r7, #4]
3419c338:	6039      	str	r1, [r7, #0]
  static evision_awb_profile_t awbProfiles[ISP_AWB_COLORTEMP_REF];
  static float colorTempThresholds[ISP_AWB_COLORTEMP_REF - 1];
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_ColorConvTypeDef ColorConvConfig;
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
3419c33a:	683b      	ldr	r3, [r7, #0]
3419c33c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
3419c340:	2300      	movs	r3, #0
3419c342:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
3419c346:	f107 0320 	add.w	r3, r7, #32
3419c34a:	2200      	movs	r2, #0
3419c34c:	601a      	str	r2, [r3, #0]
3419c34e:	605a      	str	r2, [r3, #4]
3419c350:	609a      	str	r2, [r3, #8]
  double meas[3];
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419c352:	6878      	ldr	r0, [r7, #4]
3419c354:	f001 ffce 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419c358:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

  if (IQParamConfig->AWBAlgo.enable == false)
3419c35c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c360:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3419c364:	2b00      	cmp	r3, #0
3419c366:	d104      	bne.n	3419c372 <ISP_Algo_AWB_Process+0x42>
  {
    enableCurrent = false;
3419c368:	4bcd      	ldr	r3, [pc, #820]	@ (3419c6a0 <ISP_Algo_AWB_Process+0x370>)
3419c36a:	2200      	movs	r2, #0
3419c36c:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
3419c36e:	2300      	movs	r3, #0
3419c370:	e38a      	b.n	3419ca88 <ISP_Algo_AWB_Process+0x758>
  }
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
3419c372:	4bcb      	ldr	r3, [pc, #812]	@ (3419c6a0 <ISP_Algo_AWB_Process+0x370>)
3419c374:	781b      	ldrb	r3, [r3, #0]
3419c376:	2b00      	cmp	r3, #0
3419c378:	d005      	beq.n	3419c386 <ISP_Algo_AWB_Process+0x56>
3419c37a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c37e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3419c382:	2bff      	cmp	r3, #255	@ 0xff
3419c384:	d10e      	bne.n	3419c3a4 <ISP_Algo_AWB_Process+0x74>
  {
    /* Start or resume algo : set state to INIT in order to read the IQ params */
    algo->state = ISP_ALGO_STATE_INIT;
3419c386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419c38a:	2200      	movs	r2, #0
3419c38c:	705a      	strb	r2, [r3, #1]
    IQParamConfig->AWBAlgo.enable = true;
3419c38e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c392:	2201      	movs	r2, #1
3419c394:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
    reconfigureRequest = true;
3419c398:	4bc2      	ldr	r3, [pc, #776]	@ (3419c6a4 <ISP_Algo_AWB_Process+0x374>)
3419c39a:	2201      	movs	r2, #1
3419c39c:	701a      	strb	r2, [r3, #0]
    enableCurrent = true;
3419c39e:	4bc0      	ldr	r3, [pc, #768]	@ (3419c6a0 <ISP_Algo_AWB_Process+0x370>)
3419c3a0:	2201      	movs	r2, #1
3419c3a2:	701a      	strb	r2, [r3, #0]
  }

  switch(algo->state)
3419c3a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419c3a8:	785b      	ldrb	r3, [r3, #1]
3419c3aa:	2b03      	cmp	r3, #3
3419c3ac:	f200 836a 	bhi.w	3419ca84 <ISP_Algo_AWB_Process+0x754>
3419c3b0:	a201      	add	r2, pc, #4	@ (adr r2, 3419c3b8 <ISP_Algo_AWB_Process+0x88>)
3419c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419c3b6:	bf00      	nop
3419c3b8:	3419c3c9 	.word	0x3419c3c9
3419c3bc:	3419c657 	.word	0x3419c657
3419c3c0:	3419ca85 	.word	0x3419ca85
3419c3c4:	3419c6c5 	.word	0x3419c6c5
  {
  case ISP_ALGO_STATE_INIT:
    /* Set profiles (color temperature, gains, color conv matrix) */
    profNb = 0;
3419c3c8:	2300      	movs	r3, #0
3419c3ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3419c3ce:	2300      	movs	r3, #0
3419c3d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3419c3d4:	e0ca      	b.n	3419c56c <ISP_Algo_AWB_Process+0x23c>
    {
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
3419c3d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c3da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c3de:	3344      	adds	r3, #68	@ 0x44
3419c3e0:	009b      	lsls	r3, r3, #2
3419c3e2:	4413      	add	r3, r2
3419c3e4:	685b      	ldr	r3, [r3, #4]
3419c3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if (colorTemp == 0)
3419c3ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3419c3ee:	2b00      	cmp	r3, #0
3419c3f0:	f000 80c2 	beq.w	3419c578 <ISP_Algo_AWB_Process+0x248>
        break;

      if (profNb > 0)
3419c3f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c3f8:	2b00      	cmp	r3, #0
3419c3fa:	d01b      	beq.n	3419c434 <ISP_Algo_AWB_Process+0x104>
      {
        /* Profile decision threshold = lowest ref. temperature + 1/4 of the distance between two reference temperatures */
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
3419c3fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c400:	3b01      	subs	r3, #1
3419c402:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c406:	3344      	adds	r3, #68	@ 0x44
3419c408:	009b      	lsls	r3, r3, #2
3419c40a:	4413      	add	r3, r2
3419c40c:	685a      	ldr	r2, [r3, #4]
3419c40e:	4613      	mov	r3, r2
3419c410:	005b      	lsls	r3, r3, #1
3419c412:	441a      	add	r2, r3
3419c414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3419c418:	4413      	add	r3, r2
3419c41a:	089a      	lsrs	r2, r3, #2
3419c41c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c420:	3b01      	subs	r3, #1
3419c422:	ee07 2a90 	vmov	s15, r2
3419c426:	eef8 7a67 	vcvt.f32.u32	s15, s15
3419c42a:	4a9f      	ldr	r2, [pc, #636]	@ (3419c6a8 <ISP_Algo_AWB_Process+0x378>)
3419c42c:	009b      	lsls	r3, r3, #2
3419c42e:	4413      	add	r3, r2
3419c430:	edc3 7a00 	vstr	s15, [r3]
      }

      /* Set cfa gains (RGGB) */
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
3419c434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c438:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c43c:	324a      	adds	r2, #74	@ 0x4a
3419c43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419c442:	ee07 3a90 	vmov	s15, r3
3419c446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419c44a:	eddf 6a98 	vldr	s13, [pc, #608]	@ 3419c6ac <ISP_Algo_AWB_Process+0x37c>
3419c44e:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419c452:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
3419c456:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c45a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c45e:	334e      	adds	r3, #78	@ 0x4e
3419c460:	009b      	lsls	r3, r3, #2
3419c462:	4413      	add	r3, r2
3419c464:	685b      	ldr	r3, [r3, #4]
3419c466:	ee07 3a90 	vmov	s15, r3
3419c46a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419c46e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 3419c6ac <ISP_Algo_AWB_Process+0x37c>
3419c472:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419c476:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      cfaGains[2] = cfaGains[1];
3419c47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3419c47c:	65bb      	str	r3, [r7, #88]	@ 0x58
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
3419c47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c486:	3254      	adds	r2, #84	@ 0x54
3419c488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419c48c:	ee07 3a90 	vmov	s15, r3
3419c490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3419c494:	eddf 6a85 	vldr	s13, [pc, #532]	@ 3419c6ac <ISP_Algo_AWB_Process+0x37c>
3419c498:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419c49c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

      /* Set CCM Coeff */
      for (i = 0; i < 3; i++)
3419c4a0:	2300      	movs	r3, #0
3419c4a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3419c4a6:	e03b      	b.n	3419c520 <ISP_Algo_AWB_Process+0x1f0>
      {
        for (j = 0; j < 3; j++)
3419c4a8:	2300      	movs	r3, #0
3419c4aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3419c4ae:	e02e      	b.n	3419c50e <ISP_Algo_AWB_Process+0x1de>
        {
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
3419c4b0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
3419c4b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3419c4b8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
3419c4bc:	461a      	mov	r2, r3
3419c4be:	0052      	lsls	r2, r2, #1
3419c4c0:	441a      	add	r2, r3
3419c4c2:	460b      	mov	r3, r1
3419c4c4:	00db      	lsls	r3, r3, #3
3419c4c6:	440b      	add	r3, r1
3419c4c8:	441a      	add	r2, r3
3419c4ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3419c4ce:	4413      	add	r3, r2
3419c4d0:	3358      	adds	r3, #88	@ 0x58
3419c4d2:	009b      	lsls	r3, r3, #2
3419c4d4:	4403      	add	r3, r0
3419c4d6:	685b      	ldr	r3, [r3, #4]
3419c4d8:	ee07 3a90 	vmov	s15, r3
3419c4dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3419c4e0:	eddf 6a72 	vldr	s13, [pc, #456]	@ 3419c6ac <ISP_Algo_AWB_Process+0x37c>
3419c4e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419c4e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
3419c4ec:	4613      	mov	r3, r2
3419c4ee:	005b      	lsls	r3, r3, #1
3419c4f0:	4413      	add	r3, r2
3419c4f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
3419c4f6:	4413      	add	r3, r2
3419c4f8:	009b      	lsls	r3, r3, #2
3419c4fa:	33c8      	adds	r3, #200	@ 0xc8
3419c4fc:	443b      	add	r3, r7
3419c4fe:	3b9c      	subs	r3, #156	@ 0x9c
3419c500:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0; j < 3; j++)
3419c504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3419c508:	3301      	adds	r3, #1
3419c50a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3419c50e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
3419c512:	2b02      	cmp	r3, #2
3419c514:	d9cc      	bls.n	3419c4b0 <ISP_Algo_AWB_Process+0x180>
      for (i = 0; i < 3; i++)
3419c516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3419c51a:	3301      	adds	r3, #1
3419c51c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3419c520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3419c524:	2b02      	cmp	r3, #2
3419c526:	d9bf      	bls.n	3419c4a8 <ISP_Algo_AWB_Process+0x178>
        }
      }

      /* Set profile */
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
3419c528:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c52c:	4613      	mov	r3, r2
3419c52e:	011b      	lsls	r3, r3, #4
3419c530:	4413      	add	r3, r2
3419c532:	009b      	lsls	r3, r3, #2
3419c534:	4a5e      	ldr	r2, [pc, #376]	@ (3419c6b0 <ISP_Algo_AWB_Process+0x380>)
3419c536:	1898      	adds	r0, r3, r2
3419c538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
3419c53c:	ee07 3a90 	vmov	s15, r3
3419c540:	eef8 7a67 	vcvt.f32.u32	s15, s15
3419c544:	f107 0320 	add.w	r3, r7, #32
3419c548:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
3419c54c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
3419c550:	eeb0 0a67 	vmov.f32	s0, s15
3419c554:	f7e4 fc31 	bl	34180dba <evision_api_awb_set_profile>
      profNb++;
3419c558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c55c:	3301      	adds	r3, #1
3419c55e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3419c562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c566:	3301      	adds	r3, #1
3419c568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3419c56c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c570:	2b04      	cmp	r3, #4
3419c572:	f67f af30 	bls.w	3419c3d6 <ISP_Algo_AWB_Process+0xa6>
3419c576:	e000      	b.n	3419c57a <ISP_Algo_AWB_Process+0x24a>
        break;
3419c578:	bf00      	nop
    }

    if (profNb == 0)
3419c57a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c57e:	2b00      	cmp	r3, #0
3419c580:	d101      	bne.n	3419c586 <ISP_Algo_AWB_Process+0x256>
    {
      return ISP_ERR_WB_COLORTEMP;
3419c582:	2396      	movs	r3, #150	@ 0x96
3419c584:	e280      	b.n	3419ca88 <ISP_Algo_AWB_Process+0x758>
    }

    /* Register profiles */
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3419c586:	4b4b      	ldr	r3, [pc, #300]	@ (3419c6b4 <ISP_Algo_AWB_Process+0x384>)
3419c588:	6818      	ldr	r0, [r3, #0]
3419c58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c58e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3419c592:	ee07 3a90 	vmov	s15, r3
3419c596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], profNb,
3419c59a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c59e:	3b01      	subs	r3, #1
3419c5a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c5a4:	3344      	adds	r3, #68	@ 0x44
3419c5a6:	009b      	lsls	r3, r3, #2
3419c5a8:	4413      	add	r3, r2
3419c5aa:	685b      	ldr	r3, [r3, #4]
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
3419c5ac:	ee06 3a90 	vmov	s13, r3
3419c5b0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
3419c5b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c5b8:	b299      	uxth	r1, r3
3419c5ba:	4b3d      	ldr	r3, [pc, #244]	@ (3419c6b0 <ISP_Algo_AWB_Process+0x380>)
3419c5bc:	4a3a      	ldr	r2, [pc, #232]	@ (3419c6a8 <ISP_Algo_AWB_Process+0x378>)
3419c5be:	eeb0 1b46 	vmov.f64	d1, d6
3419c5c2:	eeb0 0b47 	vmov.f64	d0, d7
3419c5c6:	f7e4 fc1c 	bl	34180e02 <evision_api_awb_init_profiles>
3419c5ca:	4603      	mov	r3, r0
3419c5cc:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
                                          colorTempThresholds, awbProfiles);
    if (e_ret != EVISION_RET_SUCCESS)
3419c5d0:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3419c5d4:	2b01      	cmp	r3, #1
3419c5d6:	d001      	beq.n	3419c5dc <ISP_Algo_AWB_Process+0x2ac>
    {
      return ISP_ERR_ALGO;
3419c5d8:	23be      	movs	r3, #190	@ 0xbe
3419c5da:	e255      	b.n	3419ca88 <ISP_Algo_AWB_Process+0x758>
    }

    /* Configure algo */
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
3419c5dc:	4b35      	ldr	r3, [pc, #212]	@ (3419c6b4 <ISP_Algo_AWB_Process+0x384>)
3419c5de:	6819      	ldr	r1, [r3, #0]
3419c5e0:	a32b      	add	r3, pc, #172	@ (adr r3, 3419c690 <ISP_Algo_AWB_Process+0x360>)
3419c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
3419c5e6:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
3419c5ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
3419c5ee:	2b03      	cmp	r3, #3
3419c5f0:	d803      	bhi.n	3419c5fa <ISP_Algo_AWB_Process+0x2ca>
3419c5f2:	a329      	add	r3, pc, #164	@ (adr r3, 3419c698 <ISP_Algo_AWB_Process+0x368>)
3419c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
3419c5f8:	e003      	b.n	3419c602 <ISP_Algo_AWB_Process+0x2d2>
3419c5fa:	f04f 0200 	mov.w	r2, #0
3419c5fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3419c602:	492c      	ldr	r1, [pc, #176]	@ (3419c6b4 <ISP_Algo_AWB_Process+0x384>)
3419c604:	6809      	ldr	r1, [r1, #0]
3419c606:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
3419c60a:	4b2a      	ldr	r3, [pc, #168]	@ (3419c6b4 <ISP_Algo_AWB_Process+0x384>)
3419c60c:	681b      	ldr	r3, [r3, #0]
3419c60e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
3419c612:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
3419c616:	4b27      	ldr	r3, [pc, #156]	@ (3419c6b4 <ISP_Algo_AWB_Process+0x384>)
3419c618:	681b      	ldr	r3, [r3, #0]
3419c61a:	4a27      	ldr	r2, [pc, #156]	@ (3419c6b8 <ISP_Algo_AWB_Process+0x388>)
3419c61c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4

    /* Ask for stats */
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3419c620:	2305      	movs	r3, #5
3419c622:	9302      	str	r3, [sp, #8]
3419c624:	2301      	movs	r3, #1
3419c626:	9301      	str	r3, [sp, #4]
3419c628:	2302      	movs	r3, #2
3419c62a:	9300      	str	r3, [sp, #0]
3419c62c:	4b23      	ldr	r3, [pc, #140]	@ (3419c6bc <ISP_Algo_AWB_Process+0x38c>)
3419c62e:	683a      	ldr	r2, [r7, #0]
3419c630:	4923      	ldr	r1, [pc, #140]	@ (3419c6c0 <ISP_Algo_AWB_Process+0x390>)
3419c632:	6878      	ldr	r0, [r7, #4]
3419c634:	f002 f9ae 	bl	3419e994 <ISP_SVC_Stats_GetNext>
3419c638:	4603      	mov	r3, r0
3419c63a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3419c63e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c642:	2b00      	cmp	r3, #0
3419c644:	d002      	beq.n	3419c64c <ISP_Algo_AWB_Process+0x31c>
    {
      return ret;
3419c646:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c64a:	e21d      	b.n	3419ca88 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419c64c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419c650:	2202      	movs	r2, #2
3419c652:	705a      	strb	r2, [r3, #1]
    break;
3419c654:	e216      	b.n	3419ca84 <ISP_Algo_AWB_Process+0x754>

  case ISP_ALGO_STATE_NEED_STAT:
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3419c656:	2305      	movs	r3, #5
3419c658:	9302      	str	r3, [sp, #8]
3419c65a:	2301      	movs	r3, #1
3419c65c:	9301      	str	r3, [sp, #4]
3419c65e:	2302      	movs	r3, #2
3419c660:	9300      	str	r3, [sp, #0]
3419c662:	4b16      	ldr	r3, [pc, #88]	@ (3419c6bc <ISP_Algo_AWB_Process+0x38c>)
3419c664:	683a      	ldr	r2, [r7, #0]
3419c666:	4916      	ldr	r1, [pc, #88]	@ (3419c6c0 <ISP_Algo_AWB_Process+0x390>)
3419c668:	6878      	ldr	r0, [r7, #4]
3419c66a:	f002 f993 	bl	3419e994 <ISP_SVC_Stats_GetNext>
3419c66e:	4603      	mov	r3, r0
3419c670:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                                ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    if (ret != ISP_OK)
3419c674:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c678:	2b00      	cmp	r3, #0
3419c67a:	d002      	beq.n	3419c682 <ISP_Algo_AWB_Process+0x352>
    {
      return ret;
3419c67c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c680:	e202      	b.n	3419ca88 <ISP_Algo_AWB_Process+0x758>
    }

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419c682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419c686:	2202      	movs	r2, #2
3419c688:	705a      	strb	r2, [r3, #1]
    break;
3419c68a:	e1fb      	b.n	3419ca84 <ISP_Algo_AWB_Process+0x754>
3419c68c:	f3af 8000 	nop.w
3419c690:	9999999a 	.word	0x9999999a
3419c694:	3ff59999 	.word	0x3ff59999
3419c698:	cccccccd 	.word	0xcccccccd
3419c69c:	3ffccccc 	.word	0x3ffccccc
3419c6a0:	341c2254 	.word	0x341c2254
3419c6a4:	341c2255 	.word	0x341c2255
3419c6a8:	341c2258 	.word	0x341c2258
3419c6ac:	4cbebc20 	.word	0x4cbebc20
3419c6b0:	341c2268 	.word	0x341c2268
3419c6b4:	341c21b4 	.word	0x341c21b4
3419c6b8:	40400000 	.word	0x40400000
3419c6bc:	341c23bc 	.word	0x341c23bc
3419c6c0:	3419c30d 	.word	0x3419c30d
  case ISP_ALGO_STATE_WAITING_STAT:
    /* Do nothing */
    break;

  case ISP_ALGO_STATE_STAT_READY:
    ISP_Algo_GetUpStat(hIsp, &stats);
3419c6c4:	4992      	ldr	r1, [pc, #584]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c6c6:	6878      	ldr	r0, [r7, #4]
3419c6c8:	f7ff fad0 	bl	3419bc6c <ISP_Algo_GetUpStat>

    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3419c6cc:	4b91      	ldr	r3, [pc, #580]	@ (3419c914 <ISP_Algo_AWB_Process+0x5e4>)
3419c6ce:	781b      	ldrb	r3, [r3, #0]
3419c6d0:	2b00      	cmp	r3, #0
3419c6d2:	d163      	bne.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c6d4:	4b8e      	ldr	r3, [pc, #568]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c6d6:	781b      	ldrb	r3, [r3, #0]
3419c6d8:	461a      	mov	r2, r3
3419c6da:	4b8f      	ldr	r3, [pc, #572]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c6dc:	681b      	ldr	r3, [r3, #0]
3419c6de:	1ad3      	subs	r3, r2, r3
3419c6e0:	2b00      	cmp	r3, #0
3419c6e2:	bfb8      	it	lt
3419c6e4:	425b      	neglt	r3, r3
3419c6e6:	2b02      	cmp	r3, #2
3419c6e8:	dc58      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c6ea:	4b89      	ldr	r3, [pc, #548]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c6ec:	785b      	ldrb	r3, [r3, #1]
3419c6ee:	461a      	mov	r2, r3
3419c6f0:	4b89      	ldr	r3, [pc, #548]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c6f2:	685b      	ldr	r3, [r3, #4]
3419c6f4:	1ad3      	subs	r3, r2, r3
3419c6f6:	2b00      	cmp	r3, #0
3419c6f8:	bfb8      	it	lt
3419c6fa:	425b      	neglt	r3, r3
3419c6fc:	2b02      	cmp	r3, #2
3419c6fe:	dc4d      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c700:	4b83      	ldr	r3, [pc, #524]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c702:	789b      	ldrb	r3, [r3, #2]
3419c704:	461a      	mov	r2, r3
3419c706:	4b84      	ldr	r3, [pc, #528]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c708:	689b      	ldr	r3, [r3, #8]
3419c70a:	1ad3      	subs	r3, r2, r3
3419c70c:	2b00      	cmp	r3, #0
3419c70e:	bfb8      	it	lt
3419c710:	425b      	neglt	r3, r3
3419c712:	2b02      	cmp	r3, #2
3419c714:	dc42      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[1][0]) <= 2) && (abs(stats.up.averageG - statsHistory[1][1]) <= 2) && (abs(stats.up.averageB - statsHistory[1][2]) <= 2)
3419c716:	4b7e      	ldr	r3, [pc, #504]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c718:	781b      	ldrb	r3, [r3, #0]
3419c71a:	461a      	mov	r2, r3
3419c71c:	4b7e      	ldr	r3, [pc, #504]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c71e:	68db      	ldr	r3, [r3, #12]
3419c720:	1ad3      	subs	r3, r2, r3
3419c722:	2b00      	cmp	r3, #0
3419c724:	bfb8      	it	lt
3419c726:	425b      	neglt	r3, r3
3419c728:	2b02      	cmp	r3, #2
3419c72a:	dc37      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c72c:	4b78      	ldr	r3, [pc, #480]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c72e:	785b      	ldrb	r3, [r3, #1]
3419c730:	461a      	mov	r2, r3
3419c732:	4b79      	ldr	r3, [pc, #484]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c734:	691b      	ldr	r3, [r3, #16]
3419c736:	1ad3      	subs	r3, r2, r3
3419c738:	2b00      	cmp	r3, #0
3419c73a:	bfb8      	it	lt
3419c73c:	425b      	neglt	r3, r3
3419c73e:	2b02      	cmp	r3, #2
3419c740:	dc2c      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c742:	4b73      	ldr	r3, [pc, #460]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c744:	789b      	ldrb	r3, [r3, #2]
3419c746:	461a      	mov	r2, r3
3419c748:	4b73      	ldr	r3, [pc, #460]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c74a:	695b      	ldr	r3, [r3, #20]
3419c74c:	1ad3      	subs	r3, r2, r3
3419c74e:	2b00      	cmp	r3, #0
3419c750:	bfb8      	it	lt
3419c752:	425b      	neglt	r3, r3
3419c754:	2b02      	cmp	r3, #2
3419c756:	dc21      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
        && (abs(stats.up.averageR - statsHistory[2][0]) <= 2) && (abs(stats.up.averageG - statsHistory[2][1]) <= 2) && (abs(stats.up.averageB - statsHistory[2][2]) <= 2)))
3419c758:	4b6d      	ldr	r3, [pc, #436]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c75a:	781b      	ldrb	r3, [r3, #0]
3419c75c:	461a      	mov	r2, r3
3419c75e:	4b6e      	ldr	r3, [pc, #440]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c760:	699b      	ldr	r3, [r3, #24]
3419c762:	1ad3      	subs	r3, r2, r3
3419c764:	2b00      	cmp	r3, #0
3419c766:	bfb8      	it	lt
3419c768:	425b      	neglt	r3, r3
3419c76a:	2b02      	cmp	r3, #2
3419c76c:	dc16      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c76e:	4b68      	ldr	r3, [pc, #416]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c770:	785b      	ldrb	r3, [r3, #1]
3419c772:	461a      	mov	r2, r3
3419c774:	4b68      	ldr	r3, [pc, #416]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c776:	69db      	ldr	r3, [r3, #28]
3419c778:	1ad3      	subs	r3, r2, r3
3419c77a:	2b00      	cmp	r3, #0
3419c77c:	bfb8      	it	lt
3419c77e:	425b      	neglt	r3, r3
3419c780:	2b02      	cmp	r3, #2
3419c782:	dc0b      	bgt.n	3419c79c <ISP_Algo_AWB_Process+0x46c>
3419c784:	4b62      	ldr	r3, [pc, #392]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c786:	789b      	ldrb	r3, [r3, #2]
3419c788:	461a      	mov	r2, r3
3419c78a:	4b63      	ldr	r3, [pc, #396]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c78c:	6a1b      	ldr	r3, [r3, #32]
3419c78e:	1ad3      	subs	r3, r2, r3
3419c790:	2b00      	cmp	r3, #0
3419c792:	bfb8      	it	lt
3419c794:	425b      	neglt	r3, r3
    if (!(!skip_stat_check_count && (abs(stats.up.averageR - statsHistory[0][0]) <= 2) && (abs(stats.up.averageG - statsHistory[0][1]) <= 2) && (abs(stats.up.averageB - statsHistory[0][2]) <= 2)
3419c796:	2b02      	cmp	r3, #2
3419c798:	f340 8128 	ble.w	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
    {
        statsHistory[2][0] = stats.up.averageR;
3419c79c:	4b5c      	ldr	r3, [pc, #368]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c79e:	781b      	ldrb	r3, [r3, #0]
3419c7a0:	461a      	mov	r2, r3
3419c7a2:	4b5d      	ldr	r3, [pc, #372]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c7a4:	619a      	str	r2, [r3, #24]
        statsHistory[2][1] = stats.up.averageG;
3419c7a6:	4b5a      	ldr	r3, [pc, #360]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c7a8:	785b      	ldrb	r3, [r3, #1]
3419c7aa:	461a      	mov	r2, r3
3419c7ac:	4b5a      	ldr	r3, [pc, #360]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c7ae:	61da      	str	r2, [r3, #28]
        statsHistory[2][2] = stats.up.averageB;
3419c7b0:	4b57      	ldr	r3, [pc, #348]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c7b2:	789b      	ldrb	r3, [r3, #2]
3419c7b4:	461a      	mov	r2, r3
3419c7b6:	4b58      	ldr	r3, [pc, #352]	@ (3419c918 <ISP_Algo_AWB_Process+0x5e8>)
3419c7b8:	621a      	str	r2, [r3, #32]

        /* Get stats after color conversion */
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
3419c7ba:	4b55      	ldr	r3, [pc, #340]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c7bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
3419c7c0:	4619      	mov	r1, r3
3419c7c2:	4b53      	ldr	r3, [pc, #332]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c7c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
3419c7c8:	461a      	mov	r2, r3
3419c7ca:	4b51      	ldr	r3, [pc, #324]	@ (3419c910 <ISP_Algo_AWB_Process+0x5e0>)
3419c7cc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3419c7d0:	4618      	mov	r0, r3
3419c7d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
3419c7d6:	9302      	str	r3, [sp, #8]
3419c7d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
3419c7dc:	9301      	str	r3, [sp, #4]
3419c7de:	f107 0368 	add.w	r3, r7, #104	@ 0x68
3419c7e2:	9300      	str	r3, [sp, #0]
3419c7e4:	4603      	mov	r3, r0
3419c7e6:	6878      	ldr	r0, [r7, #4]
3419c7e8:	f7ff fb12 	bl	3419be10 <ISP_Algo_ApplyCConv>

        /* Apply gamma */
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
3419c7ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3419c7ee:	4619      	mov	r1, r3
3419c7f0:	6878      	ldr	r0, [r7, #4]
3419c7f2:	f7ff f9f9 	bl	3419bbe8 <ISP_Algo_ApplyGammaInverse>
3419c7f6:	eeb0 7b40 	vmov.f64	d7, d0
3419c7fa:	ed87 7b02 	vstr	d7, [r7, #8]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3419c7fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
3419c800:	4619      	mov	r1, r3
3419c802:	6878      	ldr	r0, [r7, #4]
3419c804:	f7ff f9f0 	bl	3419bbe8 <ISP_Algo_ApplyGammaInverse>
3419c808:	eeb0 7b40 	vmov.f64	d7, d0
3419c80c:	ed87 7b04 	vstr	d7, [r7, #16]
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
3419c810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3419c812:	4619      	mov	r1, r3
3419c814:	6878      	ldr	r0, [r7, #4]
3419c816:	f7ff f9e7 	bl	3419bbe8 <ISP_Algo_ApplyGammaInverse>
3419c81a:	eeb0 7b40 	vmov.f64	d7, d0
3419c81e:	ed87 7b06 	vstr	d7, [r7, #24]

        /* Run algo to estimate gain and color conversion to apply */
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
3419c822:	4b3e      	ldr	r3, [pc, #248]	@ (3419c91c <ISP_Algo_AWB_Process+0x5ec>)
3419c824:	6818      	ldr	r0, [r3, #0]
3419c826:	f107 0308 	add.w	r3, r7, #8
3419c82a:	2201      	movs	r2, #1
3419c82c:	2100      	movs	r1, #0
3419c82e:	f7e4 fc92 	bl	34181156 <evision_api_awb_run_average>
3419c832:	4603      	mov	r3, r0
3419c834:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
        if (e_ret == EVISION_RET_SUCCESS)
3419c838:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
3419c83c:	2b01      	cmp	r3, #1
3419c83e:	f040 80d2 	bne.w	3419c9e6 <ISP_Algo_AWB_Process+0x6b6>
            for (int i = 0; i < ISP_AWB_COLORTEMP_REF; i++) {
              nb_colortemp_change[i] = 0;
            }
          }
#endif
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
3419c842:	4b36      	ldr	r3, [pc, #216]	@ (3419c91c <ISP_Algo_AWB_Process+0x5ec>)
3419c844:	681b      	ldr	r3, [r3, #0]
3419c846:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3419c84a:	4b35      	ldr	r3, [pc, #212]	@ (3419c920 <ISP_Algo_AWB_Process+0x5f0>)
3419c84c:	681b      	ldr	r3, [r3, #0]
3419c84e:	ee07 3a90 	vmov	s15, r3
3419c852:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3419c856:	eeb4 6b47 	vcmp.f64	d6, d7
3419c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419c85e:	d104      	bne.n	3419c86a <ISP_Algo_AWB_Process+0x53a>
3419c860:	4b30      	ldr	r3, [pc, #192]	@ (3419c924 <ISP_Algo_AWB_Process+0x5f4>)
3419c862:	781b      	ldrb	r3, [r3, #0]
3419c864:	2b01      	cmp	r3, #1
3419c866:	f040 80c1 	bne.w	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
          {
            /* Force to apply a WB profile when reconfigureRequest is true */
            reconfigureRequest = false;
3419c86a:	4b2e      	ldr	r3, [pc, #184]	@ (3419c924 <ISP_Algo_AWB_Process+0x5f4>)
3419c86c:	2200      	movs	r2, #0
3419c86e:	701a      	strb	r2, [r3, #0]
#ifdef ALGO_AWB_DBG_LOGS
            printf("Color temperature = %ld\r\n", (uint32_t) pIspAWBestimator->out_temp);
#endif
            if (pIspAWBestimator->out_temp == colorTempHistory[1])
3419c870:	4b2a      	ldr	r3, [pc, #168]	@ (3419c91c <ISP_Algo_AWB_Process+0x5ec>)
3419c872:	681b      	ldr	r3, [r3, #0]
3419c874:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3419c878:	4b2b      	ldr	r3, [pc, #172]	@ (3419c928 <ISP_Algo_AWB_Process+0x5f8>)
3419c87a:	685b      	ldr	r3, [r3, #4]
3419c87c:	ee07 3a90 	vmov	s15, r3
3419c880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3419c884:	eeb4 6b47 	vcmp.f64	d6, d7
3419c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419c88c:	d103      	bne.n	3419c896 <ISP_Algo_AWB_Process+0x566>
            {
              skip_stat_check_count = 0; //oscillation detected
3419c88e:	4b21      	ldr	r3, [pc, #132]	@ (3419c914 <ISP_Algo_AWB_Process+0x5e4>)
3419c890:	2200      	movs	r2, #0
3419c892:	701a      	strb	r2, [r3, #0]
3419c894:	e0aa      	b.n	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
            }
            else
            {
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3419c896:	4b1f      	ldr	r3, [pc, #124]	@ (3419c914 <ISP_Algo_AWB_Process+0x5e4>)
3419c898:	781b      	ldrb	r3, [r3, #0]
3419c89a:	2b04      	cmp	r3, #4
3419c89c:	d802      	bhi.n	3419c8a4 <ISP_Algo_AWB_Process+0x574>
3419c89e:	4b1d      	ldr	r3, [pc, #116]	@ (3419c914 <ISP_Algo_AWB_Process+0x5e4>)
3419c8a0:	2204      	movs	r2, #4
3419c8a2:	701a      	strb	r2, [r3, #0]

              /* Store meta data */
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3419c8a4:	4b1d      	ldr	r3, [pc, #116]	@ (3419c91c <ISP_Algo_AWB_Process+0x5ec>)
3419c8a6:	681b      	ldr	r3, [r3, #0]
3419c8a8:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3419c8ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3419c8b0:	ee17 2a90 	vmov	r2, s15
3419c8b4:	4b1d      	ldr	r3, [pc, #116]	@ (3419c92c <ISP_Algo_AWB_Process+0x5fc>)
3419c8b6:	611a      	str	r2, [r3, #16]

              /* Find the index profile for this referenceColorTemp */
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3419c8b8:	2300      	movs	r3, #0
3419c8ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3419c8be:	e019      	b.n	3419c8f4 <ISP_Algo_AWB_Process+0x5c4>
              {
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
3419c8c0:	4b16      	ldr	r3, [pc, #88]	@ (3419c91c <ISP_Algo_AWB_Process+0x5ec>)
3419c8c2:	681b      	ldr	r3, [r3, #0]
3419c8c4:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3419c8c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c8cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c8d0:	3344      	adds	r3, #68	@ 0x44
3419c8d2:	009b      	lsls	r3, r3, #2
3419c8d4:	4413      	add	r3, r2
3419c8d6:	685b      	ldr	r3, [r3, #4]
3419c8d8:	ee07 3a90 	vmov	s15, r3
3419c8dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3419c8e0:	eeb4 6b47 	vcmp.f64	d6, d7
3419c8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3419c8e8:	d009      	beq.n	3419c8fe <ISP_Algo_AWB_Process+0x5ce>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3419c8ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c8ee:	3301      	adds	r3, #1
3419c8f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3419c8f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c8f8:	2b04      	cmp	r3, #4
3419c8fa:	d9e1      	bls.n	3419c8c0 <ISP_Algo_AWB_Process+0x590>
3419c8fc:	e000      	b.n	3419c900 <ISP_Algo_AWB_Process+0x5d0>
                  break;
3419c8fe:	bf00      	nop
              }

              if (profId == ISP_AWB_COLORTEMP_REF)
3419c900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c904:	2b05      	cmp	r3, #5
3419c906:	d113      	bne.n	3419c930 <ISP_Algo_AWB_Process+0x600>
              {
                /* Unknown profile */
                ret  = ISP_ERR_WB_COLORTEMP;
3419c908:	2396      	movs	r3, #150	@ 0x96
3419c90a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
3419c90e:	e06d      	b.n	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
3419c910:	341c23bc 	.word	0x341c23bc
3419c914:	341c0130 	.word	0x341c0130
3419c918:	341c2434 	.word	0x341c2434
3419c91c:	341c21b4 	.word	0x341c21b4
3419c920:	341c2458 	.word	0x341c2458
3419c924:	341c2255 	.word	0x341c2255
3419c928:	341c245c 	.word	0x341c245c
3419c92c:	341c21bc 	.word	0x341c21bc
              }
              else
              {
                /* Apply Color Conversion */
                ColorConvConfig.enable = 1;
3419c930:	2301      	movs	r3, #1
3419c932:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
3419c936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c93a:	4613      	mov	r3, r2
3419c93c:	00db      	lsls	r3, r3, #3
3419c93e:	4413      	add	r3, r2
3419c940:	009b      	lsls	r3, r3, #2
3419c942:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3419c946:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c94a:	4413      	add	r3, r2
3419c94c:	1d19      	adds	r1, r3, #4
3419c94e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
3419c952:	3304      	adds	r3, #4
3419c954:	2224      	movs	r2, #36	@ 0x24
3419c956:	4618      	mov	r0, r3
3419c958:	f006 fd21 	bl	341a339e <memcpy>
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
3419c95c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
3419c960:	4619      	mov	r1, r3
3419c962:	6878      	ldr	r0, [r7, #4]
3419c964:	f001 fa0e 	bl	3419dd84 <ISP_SVC_ISP_SetColorConv>
3419c968:	4603      	mov	r3, r0
3419c96a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

                /* Apply gain */
                if (ret == ISP_OK)
3419c96e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c972:	2b00      	cmp	r3, #0
3419c974:	d13a      	bne.n	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
                {
                  ISPGainConfig.enable = 1;
3419c976:	2301      	movs	r3, #1
3419c978:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
3419c97c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c980:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c984:	324a      	adds	r2, #74	@ 0x4a
3419c986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419c98a:	673b      	str	r3, [r7, #112]	@ 0x70
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
3419c98c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
3419c990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c994:	334e      	adds	r3, #78	@ 0x4e
3419c996:	009b      	lsls	r3, r3, #2
3419c998:	4413      	add	r3, r2
3419c99a:	685b      	ldr	r3, [r3, #4]
3419c99c:	677b      	str	r3, [r7, #116]	@ 0x74
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
3419c99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
3419c9a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
3419c9a6:	3254      	adds	r2, #84	@ 0x54
3419c9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3419c9ac:	67bb      	str	r3, [r7, #120]	@ 0x78
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
3419c9ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
3419c9b2:	4619      	mov	r1, r3
3419c9b4:	6878      	ldr	r0, [r7, #4]
3419c9b6:	f001 f93b 	bl	3419dc30 <ISP_SVC_ISP_SetGain>
3419c9ba:	4603      	mov	r3, r0
3419c9bc:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
                  if (ret == ISP_OK)
3419c9c0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419c9c4:	2b00      	cmp	r3, #0
3419c9c6:	d111      	bne.n	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
                  {
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
3419c9c8:	4b31      	ldr	r3, [pc, #196]	@ (3419ca90 <ISP_Algo_AWB_Process+0x760>)
3419c9ca:	681b      	ldr	r3, [r3, #0]
3419c9cc:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3419c9d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3419c9d4:	ee17 2a90 	vmov	r2, s15
3419c9d8:	4b2e      	ldr	r3, [pc, #184]	@ (3419ca94 <ISP_Algo_AWB_Process+0x764>)
3419c9da:	601a      	str	r2, [r3, #0]
                    current_awb_profId = profId;
3419c9dc:	4a2e      	ldr	r2, [pc, #184]	@ (3419ca98 <ISP_Algo_AWB_Process+0x768>)
3419c9de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3419c9e2:	6013      	str	r3, [r2, #0]
3419c9e4:	e002      	b.n	3419c9ec <ISP_Algo_AWB_Process+0x6bc>
            }
          }
        }
        else
        {
          ret = ISP_ERR_ALGO;
3419c9e6:	23be      	movs	r3, #190	@ 0xbe
3419c9e8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
        }
    }

    /* Decrease counter to limit the number of estimations before reaching convergence */
    if (skip_stat_check_count > 0) skip_stat_check_count--;
3419c9ec:	4b2b      	ldr	r3, [pc, #172]	@ (3419ca9c <ISP_Algo_AWB_Process+0x76c>)
3419c9ee:	781b      	ldrb	r3, [r3, #0]
3419c9f0:	2b00      	cmp	r3, #0
3419c9f2:	d005      	beq.n	3419ca00 <ISP_Algo_AWB_Process+0x6d0>
3419c9f4:	4b29      	ldr	r3, [pc, #164]	@ (3419ca9c <ISP_Algo_AWB_Process+0x76c>)
3419c9f6:	781b      	ldrb	r3, [r3, #0]
3419c9f8:	3b01      	subs	r3, #1
3419c9fa:	b2da      	uxtb	r2, r3
3419c9fc:	4b27      	ldr	r3, [pc, #156]	@ (3419ca9c <ISP_Algo_AWB_Process+0x76c>)
3419c9fe:	701a      	strb	r2, [r3, #0]

    /* Store history to be able to detect variations*/
    statsHistory[1][0] = statsHistory[0][0];
3419ca00:	4b27      	ldr	r3, [pc, #156]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca02:	681b      	ldr	r3, [r3, #0]
3419ca04:	4a26      	ldr	r2, [pc, #152]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca06:	60d3      	str	r3, [r2, #12]
    statsHistory[1][1] = statsHistory[0][1];
3419ca08:	4b25      	ldr	r3, [pc, #148]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca0a:	685b      	ldr	r3, [r3, #4]
3419ca0c:	4a24      	ldr	r2, [pc, #144]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca0e:	6113      	str	r3, [r2, #16]
    statsHistory[1][2] = statsHistory[0][2];
3419ca10:	4b23      	ldr	r3, [pc, #140]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca12:	689b      	ldr	r3, [r3, #8]
3419ca14:	4a22      	ldr	r2, [pc, #136]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca16:	6153      	str	r3, [r2, #20]
    statsHistory[0][0] = stats.up.averageR;
3419ca18:	4b22      	ldr	r3, [pc, #136]	@ (3419caa4 <ISP_Algo_AWB_Process+0x774>)
3419ca1a:	781b      	ldrb	r3, [r3, #0]
3419ca1c:	461a      	mov	r2, r3
3419ca1e:	4b20      	ldr	r3, [pc, #128]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca20:	601a      	str	r2, [r3, #0]
    statsHistory[0][1] = stats.up.averageG;
3419ca22:	4b20      	ldr	r3, [pc, #128]	@ (3419caa4 <ISP_Algo_AWB_Process+0x774>)
3419ca24:	785b      	ldrb	r3, [r3, #1]
3419ca26:	461a      	mov	r2, r3
3419ca28:	4b1d      	ldr	r3, [pc, #116]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca2a:	605a      	str	r2, [r3, #4]
    statsHistory[0][2] = stats.up.averageB;
3419ca2c:	4b1d      	ldr	r3, [pc, #116]	@ (3419caa4 <ISP_Algo_AWB_Process+0x774>)
3419ca2e:	789b      	ldrb	r3, [r3, #2]
3419ca30:	461a      	mov	r2, r3
3419ca32:	4b1b      	ldr	r3, [pc, #108]	@ (3419caa0 <ISP_Algo_AWB_Process+0x770>)
3419ca34:	609a      	str	r2, [r3, #8]
    colorTempHistory[1] = colorTempHistory[0];
3419ca36:	4b1c      	ldr	r3, [pc, #112]	@ (3419caa8 <ISP_Algo_AWB_Process+0x778>)
3419ca38:	681b      	ldr	r3, [r3, #0]
3419ca3a:	4a1b      	ldr	r2, [pc, #108]	@ (3419caa8 <ISP_Algo_AWB_Process+0x778>)
3419ca3c:	6053      	str	r3, [r2, #4]
    colorTempHistory[0] = currentColorTemp;
3419ca3e:	4b15      	ldr	r3, [pc, #84]	@ (3419ca94 <ISP_Algo_AWB_Process+0x764>)
3419ca40:	681b      	ldr	r3, [r3, #0]
3419ca42:	4a19      	ldr	r2, [pc, #100]	@ (3419caa8 <ISP_Algo_AWB_Process+0x778>)
3419ca44:	6013      	str	r3, [r2, #0]

    /* Ask for stats */
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3419ca46:	2305      	movs	r3, #5
3419ca48:	9302      	str	r3, [sp, #8]
3419ca4a:	2301      	movs	r3, #1
3419ca4c:	9301      	str	r3, [sp, #4]
3419ca4e:	2302      	movs	r3, #2
3419ca50:	9300      	str	r3, [sp, #0]
3419ca52:	4b14      	ldr	r3, [pc, #80]	@ (3419caa4 <ISP_Algo_AWB_Process+0x774>)
3419ca54:	683a      	ldr	r2, [r7, #0]
3419ca56:	4915      	ldr	r1, [pc, #84]	@ (3419caac <ISP_Algo_AWB_Process+0x77c>)
3419ca58:	6878      	ldr	r0, [r7, #4]
3419ca5a:	f001 ff9b 	bl	3419e994 <ISP_SVC_Stats_GetNext>
3419ca5e:	4603      	mov	r3, r0
3419ca60:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
                                     ISP_STAT_TYPE_AVG, ALGO_ISP_LATENCY + ALGO_AWB_ADDITIONAL_LATENCY);
    ret = (ret != ISP_OK) ? ret : ret_stat;
3419ca64:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419ca68:	2b00      	cmp	r3, #0
3419ca6a:	d002      	beq.n	3419ca72 <ISP_Algo_AWB_Process+0x742>
3419ca6c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
3419ca70:	e001      	b.n	3419ca76 <ISP_Algo_AWB_Process+0x746>
3419ca72:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
3419ca76:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

    /* Wait for stats to be ready */
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3419ca7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
3419ca7e:	2202      	movs	r2, #2
3419ca80:	705a      	strb	r2, [r3, #1]
    break;
3419ca82:	bf00      	nop
  }

  return ret;
3419ca84:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
}
3419ca88:	4618      	mov	r0, r3
3419ca8a:	37c8      	adds	r7, #200	@ 0xc8
3419ca8c:	46bd      	mov	sp, r7
3419ca8e:	bd80      	pop	{r7, pc}
3419ca90:	341c21b4 	.word	0x341c21b4
3419ca94:	341c2458 	.word	0x341c2458
3419ca98:	341c21b8 	.word	0x341c21b8
3419ca9c:	341c0130 	.word	0x341c0130
3419caa0:	341c2434 	.word	0x341c2434
3419caa4:	341c23bc 	.word	0x341c23bc
3419caa8:	341c245c 	.word	0x341c245c
3419caac:	3419c30d 	.word	0x3419c30d

3419cab0 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
3419cab0:	b580      	push	{r7, lr}
3419cab2:	b086      	sub	sp, #24
3419cab4:	af00      	add	r7, sp, #0
3419cab6:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
3419cab8:	687b      	ldr	r3, [r7, #4]
3419caba:	4a15      	ldr	r2, [pc, #84]	@ (3419cb10 <ISP_Algo_Init+0x60>)
3419cabc:	619a      	str	r2, [r3, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3419cabe:	2300      	movs	r3, #0
3419cac0:	75fb      	strb	r3, [r7, #23]
3419cac2:	e01c      	b.n	3419cafe <ISP_Algo_Init+0x4e>
  {
    algo = hIsp->algorithm[i];
3419cac4:	687b      	ldr	r3, [r7, #4]
3419cac6:	699a      	ldr	r2, [r3, #24]
3419cac8:	7dfb      	ldrb	r3, [r7, #23]
3419caca:	009b      	lsls	r3, r3, #2
3419cacc:	4413      	add	r3, r2
3419cace:	681b      	ldr	r3, [r3, #0]
3419cad0:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Init != NULL))
3419cad2:	693b      	ldr	r3, [r7, #16]
3419cad4:	2b00      	cmp	r3, #0
3419cad6:	d00f      	beq.n	3419caf8 <ISP_Algo_Init+0x48>
3419cad8:	693b      	ldr	r3, [r7, #16]
3419cada:	685b      	ldr	r3, [r3, #4]
3419cadc:	2b00      	cmp	r3, #0
3419cade:	d00b      	beq.n	3419caf8 <ISP_Algo_Init+0x48>
    {
      ret = algo->Init((void*)hIsp, (void*)algo);
3419cae0:	693b      	ldr	r3, [r7, #16]
3419cae2:	685b      	ldr	r3, [r3, #4]
3419cae4:	6939      	ldr	r1, [r7, #16]
3419cae6:	6878      	ldr	r0, [r7, #4]
3419cae8:	4798      	blx	r3
3419caea:	4603      	mov	r3, r0
3419caec:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
3419caee:	7bfb      	ldrb	r3, [r7, #15]
3419caf0:	2b00      	cmp	r3, #0
3419caf2:	d001      	beq.n	3419caf8 <ISP_Algo_Init+0x48>
      {
        return ret;
3419caf4:	7bfb      	ldrb	r3, [r7, #15]
3419caf6:	e006      	b.n	3419cb06 <ISP_Algo_Init+0x56>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3419caf8:	7dfb      	ldrb	r3, [r7, #23]
3419cafa:	3301      	adds	r3, #1
3419cafc:	75fb      	strb	r3, [r7, #23]
3419cafe:	7dfb      	ldrb	r3, [r7, #23]
3419cb00:	2b02      	cmp	r3, #2
3419cb02:	d9df      	bls.n	3419cac4 <ISP_Algo_Init+0x14>
      }
    }
  }

  return ISP_OK;
3419cb04:	2300      	movs	r3, #0
}
3419cb06:	4618      	mov	r0, r3
3419cb08:	3718      	adds	r7, #24
3419cb0a:	46bd      	mov	sp, r7
3419cb0c:	bd80      	pop	{r7, pc}
3419cb0e:	bf00      	nop
3419cb10:	341c0124 	.word	0x341c0124

3419cb14 <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
3419cb14:	b580      	push	{r7, lr}
3419cb16:	b086      	sub	sp, #24
3419cb18:	af00      	add	r7, sp, #0
3419cb1a:	6078      	str	r0, [r7, #4]
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3419cb1c:	2300      	movs	r3, #0
3419cb1e:	75fb      	strb	r3, [r7, #23]
3419cb20:	e01c      	b.n	3419cb5c <ISP_Algo_Process+0x48>
  {
    algo = hIsp->algorithm[i];
3419cb22:	687b      	ldr	r3, [r7, #4]
3419cb24:	699a      	ldr	r2, [r3, #24]
3419cb26:	7dfb      	ldrb	r3, [r7, #23]
3419cb28:	009b      	lsls	r3, r3, #2
3419cb2a:	4413      	add	r3, r2
3419cb2c:	681b      	ldr	r3, [r3, #0]
3419cb2e:	613b      	str	r3, [r7, #16]
    if ((algo != NULL) && (algo->Process != NULL))
3419cb30:	693b      	ldr	r3, [r7, #16]
3419cb32:	2b00      	cmp	r3, #0
3419cb34:	d00f      	beq.n	3419cb56 <ISP_Algo_Process+0x42>
3419cb36:	693b      	ldr	r3, [r7, #16]
3419cb38:	68db      	ldr	r3, [r3, #12]
3419cb3a:	2b00      	cmp	r3, #0
3419cb3c:	d00b      	beq.n	3419cb56 <ISP_Algo_Process+0x42>
    {
#ifdef ALGO_PERF_DBG_LOGS
      uint32_t tickstart = HAL_GetTick();
#endif
      ret = algo->Process((void*)hIsp, (void*)algo);
3419cb3e:	693b      	ldr	r3, [r7, #16]
3419cb40:	68db      	ldr	r3, [r3, #12]
3419cb42:	6939      	ldr	r1, [r7, #16]
3419cb44:	6878      	ldr	r0, [r7, #4]
3419cb46:	4798      	blx	r3
3419cb48:	4603      	mov	r3, r0
3419cb4a:	73fb      	strb	r3, [r7, #15]
      if (ret != ISP_OK)
3419cb4c:	7bfb      	ldrb	r3, [r7, #15]
3419cb4e:	2b00      	cmp	r3, #0
3419cb50:	d001      	beq.n	3419cb56 <ISP_Algo_Process+0x42>
      {
        return ret;
3419cb52:	7bfb      	ldrb	r3, [r7, #15]
3419cb54:	e006      	b.n	3419cb64 <ISP_Algo_Process+0x50>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3419cb56:	7dfb      	ldrb	r3, [r7, #23]
3419cb58:	3301      	adds	r3, #1
3419cb5a:	75fb      	strb	r3, [r7, #23]
3419cb5c:	7dfb      	ldrb	r3, [r7, #23]
3419cb5e:	2b02      	cmp	r3, #2
3419cb60:	d9df      	bls.n	3419cb22 <ISP_Algo_Process+0xe>
      }
#endif
    }
  }

  return ISP_OK;
3419cb62:	2300      	movs	r3, #0
}
3419cb64:	4618      	mov	r0, r3
3419cb66:	3718      	adds	r7, #24
3419cb68:	46bd      	mov	sp, r7
3419cb6a:	bd80      	pop	{r7, pc}

3419cb6c <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3419cb6c:	b5b0      	push	{r4, r5, r7, lr}
3419cb6e:	b086      	sub	sp, #24
3419cb70:	af00      	add	r7, sp, #0
3419cb72:	60f8      	str	r0, [r7, #12]
3419cb74:	60b9      	str	r1, [r7, #8]
3419cb76:	607a      	str	r2, [r7, #4]
3419cb78:	603b      	str	r3, [r7, #0]
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
3419cb7a:	68fb      	ldr	r3, [r7, #12]
3419cb7c:	2b00      	cmp	r3, #0
3419cb7e:	d005      	beq.n	3419cb8c <ISP_Init+0x20>
3419cb80:	68bb      	ldr	r3, [r7, #8]
3419cb82:	2b00      	cmp	r3, #0
3419cb84:	d002      	beq.n	3419cb8c <ISP_Init+0x20>
3419cb86:	683b      	ldr	r3, [r7, #0]
3419cb88:	2b00      	cmp	r3, #0
3419cb8a:	d101      	bne.n	3419cb90 <ISP_Init+0x24>
  {
    return ISP_ERR_EINVAL;
3419cb8c:	2301      	movs	r3, #1
3419cb8e:	e0a3      	b.n	3419ccd8 <ISP_Init+0x16c>
  }

  memset(hIsp, 0, sizeof(*hIsp));
3419cb90:	2288      	movs	r2, #136	@ 0x88
3419cb92:	2100      	movs	r1, #0
3419cb94:	68f8      	ldr	r0, [r7, #12]
3419cb96:	f006 fb85 	bl	341a32a4 <memset>

#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_ToolCom_Init();
#endif

  hIsp->hDcmipp = hDcmipp;
3419cb9a:	68fb      	ldr	r3, [r7, #12]
3419cb9c:	68ba      	ldr	r2, [r7, #8]
3419cb9e:	601a      	str	r2, [r3, #0]
  hIsp->cameraInstance = CameraInstance;
3419cba0:	68fb      	ldr	r3, [r7, #12]
3419cba2:	687a      	ldr	r2, [r7, #4]
3419cba4:	605a      	str	r2, [r3, #4]
  hIsp->MainPipe_FrameCount = 0;
3419cba6:	68fb      	ldr	r3, [r7, #12]
3419cba8:	2200      	movs	r2, #0
3419cbaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hIsp->AncillaryPipe_FrameCount = 0;
3419cbac:	68fb      	ldr	r3, [r7, #12]
3419cbae:	2200      	movs	r2, #0
3419cbb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hIsp->DumpPipe_FrameCount = 0;
3419cbb2:	68fb      	ldr	r3, [r7, #12]
3419cbb4:	2200      	movs	r2, #0
3419cbb6:	649a      	str	r2, [r3, #72]	@ 0x48

  hIsp->appliHelpers = *pAppliHelpers;
3419cbb8:	68fb      	ldr	r3, [r7, #12]
3419cbba:	683a      	ldr	r2, [r7, #0]
3419cbbc:	f103 041c 	add.w	r4, r3, #28
3419cbc0:	4615      	mov	r5, r2
3419cbc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419cbc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419cbc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419cbc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419cbca:	682b      	ldr	r3, [r5, #0]
3419cbcc:	6023      	str	r3, [r4, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
3419cbce:	68fb      	ldr	r3, [r7, #12]
3419cbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419cbd2:	2b00      	cmp	r3, #0
3419cbd4:	d104      	bne.n	3419cbe0 <ISP_Init+0x74>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
3419cbd6:	4842      	ldr	r0, [pc, #264]	@ (3419cce0 <ISP_Init+0x174>)
3419cbd8:	f006 fa4e 	bl	341a3078 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3419cbdc:	23b4      	movs	r3, #180	@ 0xb4
3419cbde:	e07b      	b.n	3419ccd8 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorGain == NULL)
3419cbe0:	68fb      	ldr	r3, [r7, #12]
3419cbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419cbe4:	2b00      	cmp	r3, #0
3419cbe6:	d104      	bne.n	3419cbf2 <ISP_Init+0x86>
  {
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
3419cbe8:	483e      	ldr	r0, [pc, #248]	@ (3419cce4 <ISP_Init+0x178>)
3419cbea:	f006 fa45 	bl	341a3078 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
3419cbee:	23b4      	movs	r3, #180	@ 0xb4
3419cbf0:	e072      	b.n	3419ccd8 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
3419cbf2:	68fb      	ldr	r3, [r7, #12]
3419cbf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419cbf6:	2b00      	cmp	r3, #0
3419cbf8:	d104      	bne.n	3419cc04 <ISP_Init+0x98>
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
3419cbfa:	483b      	ldr	r0, [pc, #236]	@ (3419cce8 <ISP_Init+0x17c>)
3419cbfc:	f006 fa3c 	bl	341a3078 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3419cc00:	23b4      	movs	r3, #180	@ 0xb4
3419cc02:	e069      	b.n	3419ccd8 <ISP_Init+0x16c>
   }
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
3419cc04:	68fb      	ldr	r3, [r7, #12]
3419cc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419cc08:	2b00      	cmp	r3, #0
3419cc0a:	d104      	bne.n	3419cc16 <ISP_Init+0xaa>
  {
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
3419cc0c:	4837      	ldr	r0, [pc, #220]	@ (3419ccec <ISP_Init+0x180>)
3419cc0e:	f006 fa33 	bl	341a3078 <puts>
      return ISP_ERR_APP_HELPER_UNDEFINED;
3419cc12:	23b4      	movs	r3, #180	@ 0xb4
3419cc14:	e060      	b.n	3419ccd8 <ISP_Init+0x16c>
  }
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
3419cc16:	68fb      	ldr	r3, [r7, #12]
3419cc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419cc1a:	2b00      	cmp	r3, #0
3419cc1c:	d104      	bne.n	3419cc28 <ISP_Init+0xbc>
  {
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
3419cc1e:	4834      	ldr	r0, [pc, #208]	@ (3419ccf0 <ISP_Init+0x184>)
3419cc20:	f006 fa2a 	bl	341a3078 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3419cc24:	23b4      	movs	r3, #180	@ 0xb4
3419cc26:	e057      	b.n	3419ccd8 <ISP_Init+0x16c>
   }

  /* Initialize IQ param (read from non volatile memory) */
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
3419cc28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3419cc2a:	68f8      	ldr	r0, [r7, #12]
3419cc2c:	f001 fb4c 	bl	3419e2c8 <ISP_SVC_IQParam_Init>
3419cc30:	4603      	mov	r3, r0
3419cc32:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3419cc34:	7dfb      	ldrb	r3, [r7, #23]
3419cc36:	2b00      	cmp	r3, #0
3419cc38:	d001      	beq.n	3419cc3e <ISP_Init+0xd2>
  {
    return ret;
3419cc3a:	7dfb      	ldrb	r3, [r7, #23]
3419cc3c:	e04c      	b.n	3419ccd8 <ISP_Init+0x16c>
  }

  /* Set decimation configuration */
  /* Get Sensor Info */
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
3419cc3e:	68fb      	ldr	r3, [r7, #12]
3419cc40:	334c      	adds	r3, #76	@ 0x4c
3419cc42:	4619      	mov	r1, r3
3419cc44:	68f8      	ldr	r0, [r7, #12]
3419cc46:	f001 f9bf 	bl	3419dfc8 <ISP_SVC_Sensor_GetInfo>
3419cc4a:	4603      	mov	r3, r0
3419cc4c:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3419cc4e:	7dfb      	ldrb	r3, [r7, #23]
3419cc50:	2b00      	cmp	r3, #0
3419cc52:	d001      	beq.n	3419cc58 <ISP_Init+0xec>
  {
    return ret;
3419cc54:	7dfb      	ldrb	r3, [r7, #23]
3419cc56:	e03f      	b.n	3419ccd8 <ISP_Init+0x16c>
  }
  /* Compute the ISP decimation value according to the sensor resolution and the maximum ISP resolution */
  /* It is mandatory to ensure that RAW frame size does not exceed 2688 width prior to demosaicing */
  ISP_DecimationTypeDef decimation;
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
3419cc58:	68fb      	ldr	r3, [r7, #12]
3419cc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419cc5c:	f5b3 6f28 	cmp.w	r3, #2688	@ 0xa80
3419cc60:	d202      	bcs.n	3419cc68 <ISP_Init+0xfc>
  {
    decimation.factor = ISP_DECIM_FACTOR_1;
3419cc62:	2301      	movs	r3, #1
3419cc64:	753b      	strb	r3, [r7, #20]
3419cc66:	e01c      	b.n	3419cca2 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
3419cc68:	68fb      	ldr	r3, [r7, #12]
3419cc6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419cc6c:	f5b3 5fa8 	cmp.w	r3, #5376	@ 0x1500
3419cc70:	d202      	bcs.n	3419cc78 <ISP_Init+0x10c>
  {
    decimation.factor = ISP_DECIM_FACTOR_2;
3419cc72:	2302      	movs	r3, #2
3419cc74:	753b      	strb	r3, [r7, #20]
3419cc76:	e014      	b.n	3419cca2 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
3419cc78:	68fb      	ldr	r3, [r7, #12]
3419cc7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419cc7c:	f5b3 5f28 	cmp.w	r3, #10752	@ 0x2a00
3419cc80:	d202      	bcs.n	3419cc88 <ISP_Init+0x11c>
  {
    decimation.factor = ISP_DECIM_FACTOR_4;
3419cc82:	2304      	movs	r3, #4
3419cc84:	753b      	strb	r3, [r7, #20]
3419cc86:	e00c      	b.n	3419cca2 <ISP_Init+0x136>
  }
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
3419cc88:	68fb      	ldr	r3, [r7, #12]
3419cc8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419cc8c:	f5b3 4fa8 	cmp.w	r3, #21504	@ 0x5400
3419cc90:	d202      	bcs.n	3419cc98 <ISP_Init+0x12c>
  {
    decimation.factor = ISP_DECIM_FACTOR_8;
3419cc92:	2308      	movs	r3, #8
3419cc94:	753b      	strb	r3, [r7, #20]
3419cc96:	e004      	b.n	3419cca2 <ISP_Init+0x136>
  }
  else
  {
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
3419cc98:	4816      	ldr	r0, [pc, #88]	@ (3419ccf4 <ISP_Init+0x188>)
3419cc9a:	f006 f9ed 	bl	341a3078 <puts>
    return ISP_ERR_DECIMATION_EINVAL;
3419cc9e:	231e      	movs	r3, #30
3419cca0:	e01a      	b.n	3419ccd8 <ISP_Init+0x16c>
  }
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
3419cca2:	f107 0314 	add.w	r3, r7, #20
3419cca6:	4619      	mov	r1, r3
3419cca8:	68f8      	ldr	r0, [r7, #12]
3419ccaa:	f000 fd3b 	bl	3419d724 <ISP_SVC_ISP_SetDecimation>
3419ccae:	4603      	mov	r3, r0
3419ccb0:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3419ccb2:	7dfb      	ldrb	r3, [r7, #23]
3419ccb4:	2b00      	cmp	r3, #0
3419ccb6:	d001      	beq.n	3419ccbc <ISP_Init+0x150>
  {
    return ret;
3419ccb8:	7dfb      	ldrb	r3, [r7, #23]
3419ccba:	e00d      	b.n	3419ccd8 <ISP_Init+0x16c>
  }

  /* Initialize algorithms */
  ret = ISP_Algo_Init(hIsp);
3419ccbc:	68f8      	ldr	r0, [r7, #12]
3419ccbe:	f7ff fef7 	bl	3419cab0 <ISP_Algo_Init>
3419ccc2:	4603      	mov	r3, r0
3419ccc4:	75fb      	strb	r3, [r7, #23]
  if (ret != ISP_OK)
3419ccc6:	7dfb      	ldrb	r3, [r7, #23]
3419ccc8:	2b00      	cmp	r3, #0
3419ccca:	d001      	beq.n	3419ccd0 <ISP_Init+0x164>
  {
    return ret;
3419cccc:	7dfb      	ldrb	r3, [r7, #23]
3419ccce:	e003      	b.n	3419ccd8 <ISP_Init+0x16c>
  }

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);
3419ccd0:	68f8      	ldr	r0, [r7, #12]
3419ccd2:	f001 fb1d 	bl	3419e310 <ISP_SVC_Stats_Init>

  return ISP_OK;
3419ccd6:	2300      	movs	r3, #0
}
3419ccd8:	4618      	mov	r0, r3
3419ccda:	3718      	adds	r7, #24
3419ccdc:	46bd      	mov	sp, r7
3419ccde:	bdb0      	pop	{r4, r5, r7, pc}
3419cce0:	341a5440 	.word	0x341a5440
3419cce4:	341a5478 	.word	0x341a5478
3419cce8:	341a54b0 	.word	0x341a54b0
3419ccec:	341a54e8 	.word	0x341a54e8
3419ccf0:	341a5524 	.word	0x341a5524
3419ccf4:	341a5560 	.word	0x341a5560

3419ccf8 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
3419ccf8:	b580      	push	{r7, lr}
3419ccfa:	b084      	sub	sp, #16
3419ccfc:	af00      	add	r7, sp, #0
3419ccfe:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
3419cd00:	687b      	ldr	r3, [r7, #4]
3419cd02:	2b00      	cmp	r3, #0
3419cd04:	d101      	bne.n	3419cd0a <ISP_Start+0x12>
  {
    return ISP_ERR_EINVAL;
3419cd06:	2301      	movs	r3, #1
3419cd08:	e0f6      	b.n	3419cef8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
3419cd0a:	6878      	ldr	r0, [r7, #4]
3419cd0c:	f001 fa16 	bl	3419e13c <ISP_SVC_Misc_IsDCMIPPReady>
3419cd10:	4603      	mov	r3, r0
3419cd12:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419cd14:	7bfb      	ldrb	r3, [r7, #15]
3419cd16:	2b00      	cmp	r3, #0
3419cd18:	d001      	beq.n	3419cd1e <ISP_Start+0x26>
  {
    return ret;
3419cd1a:	7bfb      	ldrb	r3, [r7, #15]
3419cd1c:	e0ec      	b.n	3419cef8 <ISP_Start+0x200>
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419cd1e:	6878      	ldr	r0, [r7, #4]
3419cd20:	f001 fae8 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419cd24:	60b8      	str	r0, [r7, #8]

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
3419cd26:	68bb      	ldr	r3, [r7, #8]
3419cd28:	330c      	adds	r3, #12
3419cd2a:	4619      	mov	r1, r3
3419cd2c:	6878      	ldr	r0, [r7, #4]
3419cd2e:	f000 fc3d 	bl	3419d5ac <ISP_SVC_ISP_SetDemosaicing>
3419cd32:	4603      	mov	r3, r0
3419cd34:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419cd36:	7bfb      	ldrb	r3, [r7, #15]
3419cd38:	2b00      	cmp	r3, #0
3419cd3a:	d001      	beq.n	3419cd40 <ISP_Start+0x48>
  {
    return ret;
3419cd3c:	7bfb      	ldrb	r3, [r7, #15]
3419cd3e:	e0db      	b.n	3419cef8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
3419cd40:	68bb      	ldr	r3, [r7, #8]
3419cd42:	4619      	mov	r1, r3
3419cd44:	6878      	ldr	r0, [r7, #4]
3419cd46:	f000 fca9 	bl	3419d69c <ISP_SVC_ISP_SetStatRemoval>
3419cd4a:	4603      	mov	r3, r0
3419cd4c:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419cd4e:	7bfb      	ldrb	r3, [r7, #15]
3419cd50:	2b00      	cmp	r3, #0
3419cd52:	d001      	beq.n	3419cd58 <ISP_Start+0x60>
  {
    return ret;
3419cd54:	7bfb      	ldrb	r3, [r7, #15]
3419cd56:	e0cf      	b.n	3419cef8 <ISP_Start+0x200>
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
3419cd58:	68bb      	ldr	r3, [r7, #8]
3419cd5a:	3314      	adds	r3, #20
3419cd5c:	4619      	mov	r1, r3
3419cd5e:	6878      	ldr	r0, [r7, #4]
3419cd60:	f000 fd42 	bl	3419d7e8 <ISP_SVC_ISP_SetContrast>
3419cd64:	4603      	mov	r3, r0
3419cd66:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419cd68:	7bfb      	ldrb	r3, [r7, #15]
3419cd6a:	2b00      	cmp	r3, #0
3419cd6c:	d001      	beq.n	3419cd72 <ISP_Start+0x7a>
  {
    return ret;
3419cd6e:	7bfb      	ldrb	r3, [r7, #15]
3419cd70:	e0c2      	b.n	3419cef8 <ISP_Start+0x200>
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
3419cd72:	68bb      	ldr	r3, [r7, #8]
3419cd74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3419cd76:	2b00      	cmp	r3, #0
3419cd78:	d011      	beq.n	3419cd9e <ISP_Start+0xa6>
3419cd7a:	68bb      	ldr	r3, [r7, #8]
3419cd7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3419cd80:	2b00      	cmp	r3, #0
3419cd82:	d10c      	bne.n	3419cd9e <ISP_Start+0xa6>
  {
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
3419cd84:	68bb      	ldr	r3, [r7, #8]
3419cd86:	334c      	adds	r3, #76	@ 0x4c
3419cd88:	4619      	mov	r1, r3
3419cd8a:	6878      	ldr	r0, [r7, #4]
3419cd8c:	f001 f93e 	bl	3419e00c <ISP_SVC_Sensor_SetGain>
3419cd90:	4603      	mov	r3, r0
3419cd92:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419cd94:	7bfb      	ldrb	r3, [r7, #15]
3419cd96:	2b00      	cmp	r3, #0
3419cd98:	d001      	beq.n	3419cd9e <ISP_Start+0xa6>
    {
      return ret;
3419cd9a:	7bfb      	ldrb	r3, [r7, #15]
3419cd9c:	e0ac      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
3419cd9e:	68bb      	ldr	r3, [r7, #8]
3419cda0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3419cda2:	2b00      	cmp	r3, #0
3419cda4:	d011      	beq.n	3419cdca <ISP_Start+0xd2>
3419cda6:	68bb      	ldr	r3, [r7, #8]
3419cda8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
3419cdac:	2b00      	cmp	r3, #0
3419cdae:	d10c      	bne.n	3419cdca <ISP_Start+0xd2>
  {
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
3419cdb0:	68bb      	ldr	r3, [r7, #8]
3419cdb2:	3350      	adds	r3, #80	@ 0x50
3419cdb4:	4619      	mov	r1, r3
3419cdb6:	6878      	ldr	r0, [r7, #4]
3419cdb8:	f001 f974 	bl	3419e0a4 <ISP_SVC_Sensor_SetExposure>
3419cdbc:	4603      	mov	r3, r0
3419cdbe:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419cdc0:	7bfb      	ldrb	r3, [r7, #15]
3419cdc2:	2b00      	cmp	r3, #0
3419cdc4:	d001      	beq.n	3419cdca <ISP_Start+0xd2>
    {
      return ret;
3419cdc6:	7bfb      	ldrb	r3, [r7, #15]
3419cdc8:	e096      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
3419cdca:	68bb      	ldr	r3, [r7, #8]
3419cdcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3419cdd0:	2b00      	cmp	r3, #0
3419cdd2:	d00c      	beq.n	3419cdee <ISP_Start+0xf6>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
3419cdd4:	68bb      	ldr	r3, [r7, #8]
3419cdd6:	335c      	adds	r3, #92	@ 0x5c
3419cdd8:	4619      	mov	r1, r3
3419cdda:	6878      	ldr	r0, [r7, #4]
3419cddc:	f000 fe44 	bl	3419da68 <ISP_SVC_ISP_SetBadPixel>
3419cde0:	4603      	mov	r3, r0
3419cde2:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419cde4:	7bfb      	ldrb	r3, [r7, #15]
3419cde6:	2b00      	cmp	r3, #0
3419cde8:	d001      	beq.n	3419cdee <ISP_Start+0xf6>
    {
      return ret;
3419cdea:	7bfb      	ldrb	r3, [r7, #15]
3419cdec:	e084      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
3419cdee:	68bb      	ldr	r3, [r7, #8]
3419cdf0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3419cdf4:	2b00      	cmp	r3, #0
3419cdf6:	d00c      	beq.n	3419ce12 <ISP_Start+0x11a>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
3419cdf8:	68bb      	ldr	r3, [r7, #8]
3419cdfa:	3364      	adds	r3, #100	@ 0x64
3419cdfc:	4619      	mov	r1, r3
3419cdfe:	6878      	ldr	r0, [r7, #4]
3419ce00:	f000 fea6 	bl	3419db50 <ISP_SVC_ISP_SetBlackLevel>
3419ce04:	4603      	mov	r3, r0
3419ce06:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419ce08:	7bfb      	ldrb	r3, [r7, #15]
3419ce0a:	2b00      	cmp	r3, #0
3419ce0c:	d001      	beq.n	3419ce12 <ISP_Start+0x11a>
    {
      return ret;
3419ce0e:	7bfb      	ldrb	r3, [r7, #15]
3419ce10:	e072      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3419ce12:	68bb      	ldr	r3, [r7, #8]
3419ce14:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
3419ce18:	2b00      	cmp	r3, #0
3419ce1a:	d012      	beq.n	3419ce42 <ISP_Start+0x14a>
3419ce1c:	68bb      	ldr	r3, [r7, #8]
3419ce1e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3419ce22:	2b00      	cmp	r3, #0
3419ce24:	d10d      	bne.n	3419ce42 <ISP_Start+0x14a>
  {
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
3419ce26:	68bb      	ldr	r3, [r7, #8]
3419ce28:	f503 7306 	add.w	r3, r3, #536	@ 0x218
3419ce2c:	4619      	mov	r1, r3
3419ce2e:	6878      	ldr	r0, [r7, #4]
3419ce30:	f000 fefe 	bl	3419dc30 <ISP_SVC_ISP_SetGain>
3419ce34:	4603      	mov	r3, r0
3419ce36:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419ce38:	7bfb      	ldrb	r3, [r7, #15]
3419ce3a:	2b00      	cmp	r3, #0
3419ce3c:	d001      	beq.n	3419ce42 <ISP_Start+0x14a>
    {
      return ret;
3419ce3e:	7bfb      	ldrb	r3, [r7, #15]
3419ce40:	e05a      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3419ce42:	68bb      	ldr	r3, [r7, #8]
3419ce44:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
3419ce48:	2b00      	cmp	r3, #0
3419ce4a:	d012      	beq.n	3419ce72 <ISP_Start+0x17a>
3419ce4c:	68bb      	ldr	r3, [r7, #8]
3419ce4e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
3419ce52:	2b00      	cmp	r3, #0
3419ce54:	d10d      	bne.n	3419ce72 <ISP_Start+0x17a>
  {
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
3419ce56:	68bb      	ldr	r3, [r7, #8]
3419ce58:	f503 730a 	add.w	r3, r3, #552	@ 0x228
3419ce5c:	4619      	mov	r1, r3
3419ce5e:	6878      	ldr	r0, [r7, #4]
3419ce60:	f000 ff90 	bl	3419dd84 <ISP_SVC_ISP_SetColorConv>
3419ce64:	4603      	mov	r3, r0
3419ce66:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419ce68:	7bfb      	ldrb	r3, [r7, #15]
3419ce6a:	2b00      	cmp	r3, #0
3419ce6c:	d001      	beq.n	3419ce72 <ISP_Start+0x17a>
    {
      return ret;
3419ce6e:	7bfb      	ldrb	r3, [r7, #15]
3419ce70:	e042      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
3419ce72:	687b      	ldr	r3, [r7, #4]
3419ce74:	691b      	ldr	r3, [r3, #16]
3419ce76:	2b00      	cmp	r3, #0
3419ce78:	d003      	beq.n	3419ce82 <ISP_Start+0x18a>
3419ce7a:	687b      	ldr	r3, [r7, #4]
3419ce7c:	695b      	ldr	r3, [r3, #20]
3419ce7e:	2b00      	cmp	r3, #0
3419ce80:	d10c      	bne.n	3419ce9c <ISP_Start+0x1a4>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
3419ce82:	68bb      	ldr	r3, [r7, #8]
3419ce84:	333c      	adds	r3, #60	@ 0x3c
3419ce86:	4619      	mov	r1, r3
3419ce88:	6878      	ldr	r0, [r7, #4]
3419ce8a:	f000 fd67 	bl	3419d95c <ISP_SVC_ISP_SetStatArea>
3419ce8e:	4603      	mov	r3, r0
3419ce90:	73fb      	strb	r3, [r7, #15]
    if (ret != ISP_OK)
3419ce92:	7bfb      	ldrb	r3, [r7, #15]
3419ce94:	2b00      	cmp	r3, #0
3419ce96:	d001      	beq.n	3419ce9c <ISP_Start+0x1a4>
    {
      return ret;
3419ce98:	7bfb      	ldrb	r3, [r7, #15]
3419ce9a:	e02d      	b.n	3419cef8 <ISP_Start+0x200>
    }
  }

  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
3419ce9c:	68bb      	ldr	r3, [r7, #8]
3419ce9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
3419cea2:	4619      	mov	r1, r3
3419cea4:	6878      	ldr	r0, [r7, #4]
3419cea6:	f001 f9c9 	bl	3419e23c <ISP_SVC_ISP_SetGamma>
3419ceaa:	4603      	mov	r3, r0
3419ceac:	73fb      	strb	r3, [r7, #15]
  if (ret != ISP_OK)
3419ceae:	7bfb      	ldrb	r3, [r7, #15]
3419ceb0:	2b00      	cmp	r3, #0
3419ceb2:	d001      	beq.n	3419ceb8 <ISP_Start+0x1c0>
  {
    return ret;
3419ceb4:	7bfb      	ldrb	r3, [r7, #15]
3419ceb6:	e01f      	b.n	3419cef8 <ISP_Start+0x200>
  }

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
3419ceb8:	68bb      	ldr	r3, [r7, #8]
3419ceba:	f993 3069 	ldrsb.w	r3, [r3, #105]	@ 0x69
3419cebe:	ee07 3a90 	vmov	s15, r3
3419cec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3419cec6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
3419ceca:	eec7 7a26 	vdiv.f32	s15, s14, s13
3419cece:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3419ced2:	eeb0 1b47 	vmov.f64	d1, d7
3419ced6:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
3419ceda:	f007 f9bd 	bl	341a4258 <pow>
3419cede:	eeb0 7b40 	vmov.f64	d7, d0
3419cee2:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 3419cf00 <ISP_Start+0x208>
3419cee6:	ee27 7b06 	vmul.f64	d7, d7, d6
3419ceea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3419ceee:	ee17 2a90 	vmov	r2, s15
3419cef2:	68bb      	ldr	r3, [r7, #8]
3419cef4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ISP_OK;
3419cef6:	2300      	movs	r3, #0
}
3419cef8:	4618      	mov	r0, r3
3419cefa:	3710      	adds	r7, #16
3419cefc:	46bd      	mov	sp, r7
3419cefe:	bd80      	pop	{r7, pc}
3419cf00:	00000000 	.word	0x00000000
3419cf04:	404c0000 	.word	0x404c0000

3419cf08 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
3419cf08:	b580      	push	{r7, lr}
3419cf0a:	b084      	sub	sp, #16
3419cf0c:	af00      	add	r7, sp, #0
3419cf0e:	6078      	str	r0, [r7, #4]
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
3419cf10:	687b      	ldr	r3, [r7, #4]
3419cf12:	2b00      	cmp	r3, #0
3419cf14:	d101      	bne.n	3419cf1a <ISP_BackgroundProcess+0x12>
  {
    return ISP_ERR_EINVAL;
3419cf16:	2301      	movs	r3, #1
3419cf18:	e014      	b.n	3419cf44 <ISP_BackgroundProcess+0x3c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
3419cf1a:	6878      	ldr	r0, [r7, #4]
3419cf1c:	f001 fcd2 	bl	3419e8c4 <ISP_SVC_Stats_ProcessCallbacks>
3419cf20:	4603      	mov	r3, r0
3419cf22:	73fb      	strb	r3, [r7, #15]

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
3419cf24:	6878      	ldr	r0, [r7, #4]
3419cf26:	f7ff fdf5 	bl	3419cb14 <ISP_Algo_Process>
3419cf2a:	4603      	mov	r3, r0
3419cf2c:	73bb      	strb	r3, [r7, #14]
  if (retCmdParser != ISP_OK)
  {
    return retCmdParser;
  }
#endif
  if (retStats != ISP_OK)
3419cf2e:	7bfb      	ldrb	r3, [r7, #15]
3419cf30:	2b00      	cmp	r3, #0
3419cf32:	d001      	beq.n	3419cf38 <ISP_BackgroundProcess+0x30>
  {
    return retStats;
3419cf34:	7bfb      	ldrb	r3, [r7, #15]
3419cf36:	e005      	b.n	3419cf44 <ISP_BackgroundProcess+0x3c>
  }
  else if (retAlgo != ISP_OK)
3419cf38:	7bbb      	ldrb	r3, [r7, #14]
3419cf3a:	2b00      	cmp	r3, #0
3419cf3c:	d001      	beq.n	3419cf42 <ISP_BackgroundProcess+0x3a>
  {
    return retAlgo;
3419cf3e:	7bbb      	ldrb	r3, [r7, #14]
3419cf40:	e000      	b.n	3419cf44 <ISP_BackgroundProcess+0x3c>
  }

  return ISP_OK;
3419cf42:	2300      	movs	r3, #0
}
3419cf44:	4618      	mov	r0, r3
3419cf46:	3710      	adds	r7, #16
3419cf48:	46bd      	mov	sp, r7
3419cf4a:	bd80      	pop	{r7, pc}

3419cf4c <ISP_GatherStatistics>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
3419cf4c:	b580      	push	{r7, lr}
3419cf4e:	b082      	sub	sp, #8
3419cf50:	af00      	add	r7, sp, #0
3419cf52:	6078      	str	r0, [r7, #4]
  ISP_SVC_Stats_Gather(hIsp);
3419cf54:	6878      	ldr	r0, [r7, #4]
3419cf56:	f001 f9eb 	bl	3419e330 <ISP_SVC_Stats_Gather>
}
3419cf5a:	bf00      	nop
3419cf5c:	3708      	adds	r7, #8
3419cf5e:	46bd      	mov	sp, r7
3419cf60:	bd80      	pop	{r7, pc}

3419cf62 <ISP_IncMainFrameId>:
  *         Increment the frame ID of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
3419cf62:	b580      	push	{r7, lr}
3419cf64:	b082      	sub	sp, #8
3419cf66:	af00      	add	r7, sp, #0
3419cf68:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncMainFrameId(hIsp);
3419cf6a:	6878      	ldr	r0, [r7, #4]
3419cf6c:	f001 f8fe 	bl	3419e16c <ISP_SVC_Misc_IncMainFrameId>
}
3419cf70:	bf00      	nop
3419cf72:	3708      	adds	r7, #8
3419cf74:	46bd      	mov	sp, r7
3419cf76:	bd80      	pop	{r7, pc}

3419cf78 <ISP_IncAncillaryFrameId>:
  *         Increment the frame ID of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
3419cf78:	b580      	push	{r7, lr}
3419cf7a:	b082      	sub	sp, #8
3419cf7c:	af00      	add	r7, sp, #0
3419cf7e:	6078      	str	r0, [r7, #4]
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
3419cf80:	6878      	ldr	r0, [r7, #4]
3419cf82:	f001 f90e 	bl	3419e1a2 <ISP_SVC_Misc_IncAncillaryFrameId>
}
3419cf86:	bf00      	nop
3419cf88:	3708      	adds	r7, #8
3419cf8a:	46bd      	mov	sp, r7
3419cf8c:	bd80      	pop	{r7, pc}

3419cf8e <ISP_IncDumpFrameId>:
  *         Increment the frame ID of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
3419cf8e:	b580      	push	{r7, lr}
3419cf90:	b082      	sub	sp, #8
3419cf92:	af00      	add	r7, sp, #0
3419cf94:	6078      	str	r0, [r7, #4]
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
3419cf96:	6878      	ldr	r0, [r7, #4]
3419cf98:	f001 f912 	bl	3419e1c0 <ISP_SVC_Misc_IncDumpFrameId>
}
3419cf9c:	bf00      	nop
3419cf9e:	3708      	adds	r7, #8
3419cfa0:	46bd      	mov	sp, r7
3419cfa2:	bd80      	pop	{r7, pc}
3419cfa4:	0000      	movs	r0, r0
	...

3419cfa8 <To_Shift_Multiplier>:
/* Exported variables --------------------------------------------------------*/
extern ISP_MetaTypeDef Meta;

/* Private functions ---------------------------------------------------------*/
static void To_Shift_Multiplier(uint32_t Factor, uint8_t *pShift, uint8_t *pMultiplier)
{
3419cfa8:	b5b0      	push	{r4, r5, r7, lr}
3419cfaa:	b086      	sub	sp, #24
3419cfac:	af00      	add	r7, sp, #0
3419cfae:	60f8      	str	r0, [r7, #12]
3419cfb0:	60b9      	str	r1, [r7, #8]
3419cfb2:	607a      	str	r2, [r7, #4]
  /* Convert Factor (Unit = 100000000 for "x1.0") to Multiplier (where 128 means "x1.0") */
  uint64_t Val = Factor;
3419cfb4:	68fb      	ldr	r3, [r7, #12]
3419cfb6:	2200      	movs	r2, #0
3419cfb8:	461c      	mov	r4, r3
3419cfba:	4615      	mov	r5, r2
3419cfbc:	e9c7 4504 	strd	r4, r5, [r7, #16]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3419cfc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419cfc4:	4610      	mov	r0, r2
3419cfc6:	4619      	mov	r1, r3
3419cfc8:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
3419cfcc:	a314      	add	r3, pc, #80	@ (adr r3, 3419d020 <To_Shift_Multiplier+0x78>)
3419cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
3419cfd2:	f7e4 fba1 	bl	34181718 <__aeabi_uldivmod>
3419cfd6:	4602      	mov	r2, r0
3419cfd8:	460b      	mov	r3, r1
3419cfda:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Get Shift + Multiplier where Multiplier < 256 */
  *pShift = 0;
3419cfde:	68bb      	ldr	r3, [r7, #8]
3419cfe0:	2200      	movs	r2, #0
3419cfe2:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
3419cfe4:	e00b      	b.n	3419cffe <To_Shift_Multiplier+0x56>
  {
    Val /= 2;
3419cfe6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419cfea:	ea52 035f 	orrs.w	r3, r2, pc, lsr #1
3419cfee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    (*pShift)++;
3419cff2:	68bb      	ldr	r3, [r7, #8]
3419cff4:	781b      	ldrb	r3, [r3, #0]
3419cff6:	3301      	adds	r3, #1
3419cff8:	b2da      	uxtb	r2, r3
3419cffa:	68bb      	ldr	r3, [r7, #8]
3419cffc:	701a      	strb	r2, [r3, #0]
  while (Val >= 256)
3419cffe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
3419d002:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3419d006:	f173 0300 	sbcs.w	r3, r3, #0
3419d00a:	d2ec      	bcs.n	3419cfe6 <To_Shift_Multiplier+0x3e>
  }

  *pMultiplier = Val;
3419d00c:	7c3a      	ldrb	r2, [r7, #16]
3419d00e:	687b      	ldr	r3, [r7, #4]
3419d010:	701a      	strb	r2, [r3, #0]
}
3419d012:	bf00      	nop
3419d014:	3718      	adds	r7, #24
3419d016:	46bd      	mov	sp, r7
3419d018:	bdb0      	pop	{r4, r5, r7, pc}
3419d01a:	bf00      	nop
3419d01c:	f3af 8000 	nop.w
3419d020:	05f5e100 	.word	0x05f5e100
3419d024:	00000000 	.word	0x00000000

3419d028 <From_Shift_Multiplier>:

static uint32_t From_Shift_Multiplier(uint8_t Shift, uint8_t Multiplier)
{
3419d028:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
3419d02c:	b084      	sub	sp, #16
3419d02e:	af00      	add	r7, sp, #0
3419d030:	4606      	mov	r6, r0
3419d032:	4608      	mov	r0, r1
3419d034:	4631      	mov	r1, r6
3419d036:	71f9      	strb	r1, [r7, #7]
3419d038:	4601      	mov	r1, r0
3419d03a:	71b9      	strb	r1, [r7, #6]
  /* Convert Shift + Multiplier to Factor (Unit = 100000000 for "x1.0") */
  uint64_t Val = (1 << Shift);
3419d03c:	79f9      	ldrb	r1, [r7, #7]
3419d03e:	2001      	movs	r0, #1
3419d040:	fa00 f101 	lsl.w	r1, r0, r1
3419d044:	17c8      	asrs	r0, r1, #31
3419d046:	468a      	mov	sl, r1
3419d048:	4683      	mov	fp, r0
3419d04a:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3419d04e:	79b9      	ldrb	r1, [r7, #6]
3419d050:	2000      	movs	r0, #0
3419d052:	4688      	mov	r8, r1
3419d054:	4681      	mov	r9, r0
3419d056:	68b9      	ldr	r1, [r7, #8]
3419d058:	fb09 f001 	mul.w	r0, r9, r1
3419d05c:	68f9      	ldr	r1, [r7, #12]
3419d05e:	fb08 f101 	mul.w	r1, r8, r1
3419d062:	4401      	add	r1, r0
3419d064:	68b8      	ldr	r0, [r7, #8]
3419d066:	fba0 2308 	umull	r2, r3, r0, r8
3419d06a:	4419      	add	r1, r3
3419d06c:	460b      	mov	r3, r1
3419d06e:	490c      	ldr	r1, [pc, #48]	@ (3419d0a0 <From_Shift_Multiplier+0x78>)
3419d070:	fb01 f003 	mul.w	r0, r1, r3
3419d074:	2100      	movs	r1, #0
3419d076:	fb02 f101 	mul.w	r1, r2, r1
3419d07a:	4401      	add	r1, r0
3419d07c:	4808      	ldr	r0, [pc, #32]	@ (3419d0a0 <From_Shift_Multiplier+0x78>)
3419d07e:	fba2 4500 	umull	r4, r5, r2, r0
3419d082:	194b      	adds	r3, r1, r5
3419d084:	461d      	mov	r5, r3
3419d086:	4622      	mov	r2, r4
3419d088:	462b      	mov	r3, r5
3419d08a:	ea52 13df 	orrs.w	r3, r2, pc, lsr #7
3419d08e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return (uint32_t) Val;
3419d092:	68bb      	ldr	r3, [r7, #8]
}
3419d094:	4618      	mov	r0, r3
3419d096:	3710      	adds	r7, #16
3419d098:	46bd      	mov	sp, r7
3419d09a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
3419d09e:	4770      	bx	lr
3419d0a0:	05f5e100 	.word	0x05f5e100

3419d0a4 <To_CConv_Reg>:

static int16_t To_CConv_Reg(int32_t Coeff)
{
3419d0a4:	b580      	push	{r7, lr}
3419d0a6:	b084      	sub	sp, #16
3419d0a8:	af00      	add	r7, sp, #0
3419d0aa:	6078      	str	r0, [r7, #4]
  /* Convert Coefficient (Unit = 100000000 for "x1.0") to register format */
  int64_t Val = Coeff;
3419d0ac:	6879      	ldr	r1, [r7, #4]
3419d0ae:	17c8      	asrs	r0, r1, #31
3419d0b0:	460a      	mov	r2, r1
3419d0b2:	4603      	mov	r3, r0
3419d0b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3419d0b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3419d0bc:	4a07      	ldr	r2, [pc, #28]	@ (3419d0dc <To_CConv_Reg+0x38>)
3419d0be:	f04f 0300 	mov.w	r3, #0
3419d0c2:	f7e4 fad9 	bl	34181678 <__aeabi_ldivmod>
3419d0c6:	4602      	mov	r2, r0
3419d0c8:	460b      	mov	r3, r1
3419d0ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int16_t) Val;
3419d0ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
3419d0d2:	4618      	mov	r0, r3
3419d0d4:	3710      	adds	r7, #16
3419d0d6:	46bd      	mov	sp, r7
3419d0d8:	bd80      	pop	{r7, pc}
3419d0da:	bf00      	nop
3419d0dc:	0005f5e1 	.word	0x0005f5e1

3419d0e0 <From_CConv_Reg>:

static int32_t From_CConv_Reg(int16_t Reg)
{
3419d0e0:	b4b0      	push	{r4, r5, r7}
3419d0e2:	b085      	sub	sp, #20
3419d0e4:	af00      	add	r7, sp, #0
3419d0e6:	4601      	mov	r1, r0
3419d0e8:	80f9      	strh	r1, [r7, #6]
  /* Convert from register format to Coefficient (Unit = 100000000 for "x1.0") */
  int64_t Val = Reg;
3419d0ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
3419d0ee:	17c8      	asrs	r0, r1, #31
3419d0f0:	460c      	mov	r4, r1
3419d0f2:	4605      	mov	r5, r0
3419d0f4:	e9c7 4502 	strd	r4, r5, [r7, #8]

  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3419d0f8:	68f9      	ldr	r1, [r7, #12]
3419d0fa:	480c      	ldr	r0, [pc, #48]	@ (3419d12c <From_CConv_Reg+0x4c>)
3419d0fc:	fb01 f000 	mul.w	r0, r1, r0
3419d100:	68b9      	ldr	r1, [r7, #8]
3419d102:	2400      	movs	r4, #0
3419d104:	fb04 f101 	mul.w	r1, r4, r1
3419d108:	4401      	add	r1, r0
3419d10a:	68b8      	ldr	r0, [r7, #8]
3419d10c:	4c07      	ldr	r4, [pc, #28]	@ (3419d12c <From_CConv_Reg+0x4c>)
3419d10e:	fba0 2304 	umull	r2, r3, r0, r4
3419d112:	4419      	add	r1, r3
3419d114:	460b      	mov	r3, r1
3419d116:	e9c7 2302 	strd	r2, r3, [r7, #8]
3419d11a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return (int32_t) Val;
3419d11e:	68bb      	ldr	r3, [r7, #8]
}
3419d120:	4618      	mov	r0, r3
3419d122:	3714      	adds	r7, #20
3419d124:	46bd      	mov	sp, r7
3419d126:	bcb0      	pop	{r4, r5, r7}
3419d128:	4770      	bx	lr
3419d12a:	bf00      	nop
3419d12c:	0005f5e1 	.word	0x0005f5e1

3419d130 <GetAvgStats>:

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
3419d130:	b480      	push	{r7}
3419d132:	b087      	sub	sp, #28
3419d134:	af00      	add	r7, sp, #0
3419d136:	60f8      	str	r0, [r7, #12]
3419d138:	607b      	str	r3, [r7, #4]
3419d13a:	460b      	mov	r3, r1
3419d13c:	72fb      	strb	r3, [r7, #11]
3419d13e:	4613      	mov	r3, r2
3419d140:	72bb      	strb	r3, [r7, #10]
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
3419d142:	68fb      	ldr	r3, [r7, #12]
3419d144:	691b      	ldr	r3, [r3, #16]
3419d146:	68fa      	ldr	r2, [r7, #12]
3419d148:	6952      	ldr	r2, [r2, #20]
3419d14a:	fb02 f303 	mul.w	r3, r2, r3
3419d14e:	613b      	str	r3, [r7, #16]
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
3419d150:	4b18      	ldr	r3, [pc, #96]	@ (3419d1b4 <GetAvgStats+0x84>)
3419d152:	781b      	ldrb	r3, [r3, #0]
3419d154:	461a      	mov	r2, r3
3419d156:	4b17      	ldr	r3, [pc, #92]	@ (3419d1b4 <GetAvgStats+0x84>)
3419d158:	781b      	ldrb	r3, [r3, #0]
3419d15a:	fb02 f303 	mul.w	r3, r2, r3
3419d15e:	461a      	mov	r2, r3
3419d160:	693b      	ldr	r3, [r7, #16]
3419d162:	fbb3 f3f2 	udiv	r3, r3, r2
3419d166:	613b      	str	r3, [r7, #16]

  if (location == ISP_STAT_LOC_DOWN)
3419d168:	7afb      	ldrb	r3, [r7, #11]
3419d16a:	2b02      	cmp	r3, #2
3419d16c:	d102      	bne.n	3419d174 <GetAvgStats+0x44>
  {
    /* RGB format after demosaicing : 1 component per pixel */
    comp_divider = 1;
3419d16e:	2301      	movs	r3, #1
3419d170:	617b      	str	r3, [r7, #20]
3419d172:	e006      	b.n	3419d182 <GetAvgStats+0x52>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
3419d174:	7abb      	ldrb	r3, [r7, #10]
3419d176:	2b01      	cmp	r3, #1
3419d178:	d101      	bne.n	3419d17e <GetAvgStats+0x4e>
3419d17a:	2302      	movs	r3, #2
3419d17c:	e000      	b.n	3419d180 <GetAvgStats+0x50>
3419d17e:	2304      	movs	r3, #4
3419d180:	617b      	str	r3, [r7, #20]
  }

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;
3419d182:	693a      	ldr	r2, [r7, #16]
3419d184:	697b      	ldr	r3, [r7, #20]
3419d186:	fbb2 f3f3 	udiv	r3, r2, r3
3419d18a:	613b      	str	r3, [r7, #16]

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
3419d18c:	693b      	ldr	r3, [r7, #16]
3419d18e:	2b00      	cmp	r3, #0
3419d190:	d101      	bne.n	3419d196 <GetAvgStats+0x66>
  {
    return 0;
3419d192:	2300      	movs	r3, #0
3419d194:	e008      	b.n	3419d1a8 <GetAvgStats+0x78>
  }

  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
3419d196:	687b      	ldr	r3, [r7, #4]
3419d198:	021a      	lsls	r2, r3, #8
3419d19a:	693b      	ldr	r3, [r7, #16]
3419d19c:	085b      	lsrs	r3, r3, #1
3419d19e:	441a      	add	r2, r3
3419d1a0:	693b      	ldr	r3, [r7, #16]
3419d1a2:	fbb2 f3f3 	udiv	r3, r2, r3
3419d1a6:	b2db      	uxtb	r3, r3
}
3419d1a8:	4618      	mov	r0, r3
3419d1aa:	371c      	adds	r7, #28
3419d1ac:	46bd      	mov	sp, r7
3419d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d1b2:	4770      	bx	lr
3419d1b4:	341c0134 	.word	0x341c0134

3419d1b8 <ReadStatHistogram>:

static void ReadStatHistogram(ISP_HandleTypeDef *hIsp, uint32_t *histogram)
{
3419d1b8:	b580      	push	{r7, lr}
3419d1ba:	b084      	sub	sp, #16
3419d1bc:	af00      	add	r7, sp, #0
3419d1be:	6078      	str	r0, [r7, #4]
3419d1c0:	6039      	str	r1, [r7, #0]
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3419d1c2:	2301      	movs	r3, #1
3419d1c4:	60fb      	str	r3, [r7, #12]
3419d1c6:	e011      	b.n	3419d1ec <ReadStatHistogram+0x34>
  {
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
3419d1c8:	687b      	ldr	r3, [r7, #4]
3419d1ca:	6818      	ldr	r0, [r3, #0]
3419d1cc:	68fb      	ldr	r3, [r7, #12]
3419d1ce:	b2d9      	uxtb	r1, r3
3419d1d0:	68fb      	ldr	r3, [r7, #12]
3419d1d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
3419d1d6:	3b01      	subs	r3, #1
3419d1d8:	009b      	lsls	r3, r3, #2
3419d1da:	683a      	ldr	r2, [r7, #0]
3419d1dc:	4413      	add	r3, r2
3419d1de:	460a      	mov	r2, r1
3419d1e0:	2101      	movs	r1, #1
3419d1e2:	f7ea fc3b 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3419d1e6:	68fb      	ldr	r3, [r7, #12]
3419d1e8:	3301      	adds	r3, #1
3419d1ea:	60fb      	str	r3, [r7, #12]
3419d1ec:	68fb      	ldr	r3, [r7, #12]
3419d1ee:	2b03      	cmp	r3, #3
3419d1f0:	d9ea      	bls.n	3419d1c8 <ReadStatHistogram+0x10>
  }
}
3419d1f2:	bf00      	nop
3419d1f4:	bf00      	nop
3419d1f6:	3710      	adds	r7, #16
3419d1f8:	46bd      	mov	sp, r7
3419d1fa:	bd80      	pop	{r7, pc}

3419d1fc <SetStatConfig>:

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
3419d1fc:	b480      	push	{r7}
3419d1fe:	b085      	sub	sp, #20
3419d200:	af00      	add	r7, sp, #0
3419d202:	6078      	str	r0, [r7, #4]
3419d204:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 3; i++)
3419d206:	2300      	movs	r3, #0
3419d208:	60fb      	str	r3, [r7, #12]
3419d20a:	e00e      	b.n	3419d22a <SetStatConfig+0x2e>
  {
    statConf[i] = *refConfig;
3419d20c:	68fa      	ldr	r2, [r7, #12]
3419d20e:	4613      	mov	r3, r2
3419d210:	005b      	lsls	r3, r3, #1
3419d212:	4413      	add	r3, r2
3419d214:	009b      	lsls	r3, r3, #2
3419d216:	461a      	mov	r2, r3
3419d218:	687b      	ldr	r3, [r7, #4]
3419d21a:	4413      	add	r3, r2
3419d21c:	683a      	ldr	r2, [r7, #0]
3419d21e:	ca07      	ldmia	r2, {r0, r1, r2}
3419d220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
3419d224:	68fb      	ldr	r3, [r7, #12]
3419d226:	3301      	adds	r3, #1
3419d228:	60fb      	str	r3, [r7, #12]
3419d22a:	68fb      	ldr	r3, [r7, #12]
3419d22c:	2b02      	cmp	r3, #2
3419d22e:	dded      	ble.n	3419d20c <SetStatConfig+0x10>
  }
}
3419d230:	bf00      	nop
3419d232:	bf00      	nop
3419d234:	3714      	adds	r7, #20
3419d236:	46bd      	mov	sp, r7
3419d238:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d23c:	4770      	bx	lr
	...

3419d240 <GetNextStatStage>:

static ISP_SVC_StatEngineStage GetNextStatStage(ISP_SVC_StatEngineStage current)
{
3419d240:	b480      	push	{r7}
3419d242:	b085      	sub	sp, #20
3419d244:	af00      	add	r7, sp, #0
3419d246:	4603      	mov	r3, r0
3419d248:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
3419d24a:	2309      	movs	r3, #9
3419d24c:	73fb      	strb	r3, [r7, #15]

  /* Special mode for IQ tuning tool asking for all stats : go the the next step, no skip */
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3419d24e:	4b73      	ldr	r3, [pc, #460]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d250:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d254:	f003 0304 	and.w	r3, r3, #4
3419d258:	2b00      	cmp	r3, #0
3419d25a:	d106      	bne.n	3419d26a <GetNextStatStage+0x2a>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3419d25c:	4b6f      	ldr	r3, [pc, #444]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d25e:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d262:	f003 0304 	and.w	r3, r3, #4
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3419d266:	2b00      	cmp	r3, #0
3419d268:	d00a      	beq.n	3419d280 <GetNextStatStage+0x40>
  {
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
3419d26a:	79fb      	ldrb	r3, [r7, #7]
3419d26c:	2b08      	cmp	r3, #8
3419d26e:	d803      	bhi.n	3419d278 <GetNextStatStage+0x38>
3419d270:	79fb      	ldrb	r3, [r7, #7]
3419d272:	3301      	adds	r3, #1
3419d274:	b2db      	uxtb	r3, r3
3419d276:	e000      	b.n	3419d27a <GetNextStatStage+0x3a>
3419d278:	2300      	movs	r3, #0
3419d27a:	73fb      	strb	r3, [r7, #15]
    return next;
3419d27c:	7bfb      	ldrb	r3, [r7, #15]
3419d27e:	e0c7      	b.n	3419d410 <GetNextStatStage+0x1d0>
   * - ISP_STAT_CFG_UP_AVG
   * - ISP_STAT_CFG_UP_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
   * - ISP_STAT_CFG_DOWN_AVG
   * - ISP_STAT_CFG_DOWN_BINS_0_2 + BINS_3_5 + BINS_6_8 + BINS_9_11
  */
  switch (current)
3419d280:	79fb      	ldrb	r3, [r7, #7]
3419d282:	2b09      	cmp	r3, #9
3419d284:	f200 80b8 	bhi.w	3419d3f8 <GetNextStatStage+0x1b8>
3419d288:	a201      	add	r2, pc, #4	@ (adr r2, 3419d290 <GetNextStatStage+0x50>)
3419d28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419d28e:	bf00      	nop
3419d290:	3419d2b9 	.word	0x3419d2b9
3419d294:	3419d3f9 	.word	0x3419d3f9
3419d298:	3419d3f9 	.word	0x3419d3f9
3419d29c:	3419d3f9 	.word	0x3419d3f9
3419d2a0:	3419d309 	.word	0x3419d309
3419d2a4:	3419d359 	.word	0x3419d359
3419d2a8:	3419d3f9 	.word	0x3419d3f9
3419d2ac:	3419d3f9 	.word	0x3419d3f9
3419d2b0:	3419d3f9 	.word	0x3419d3f9
3419d2b4:	3419d3a9 	.word	0x3419d3a9
  {
  case ISP_STAT_CFG_UP_AVG:
    /* Try Up Bins */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3419d2b8:	4b58      	ldr	r3, [pc, #352]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d2ba:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d2be:	f003 0302 	and.w	r3, r3, #2
3419d2c2:	2b00      	cmp	r3, #0
3419d2c4:	d002      	beq.n	3419d2cc <GetNextStatStage+0x8c>
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
3419d2c6:	2301      	movs	r3, #1
3419d2c8:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Bins : try Up Avg */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_UP_AVG;
    }
    break;
3419d2ca:	e099      	b.n	3419d400 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
3419d2cc:	4b53      	ldr	r3, [pc, #332]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d2ce:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d2d2:	f003 0301 	and.w	r3, r3, #1
3419d2d6:	2b00      	cmp	r3, #0
3419d2d8:	d002      	beq.n	3419d2e0 <GetNextStatStage+0xa0>
      next = ISP_STAT_CFG_DOWN_AVG;
3419d2da:	2305      	movs	r3, #5
3419d2dc:	73fb      	strb	r3, [r7, #15]
    break;
3419d2de:	e08f      	b.n	3419d400 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3419d2e0:	4b4e      	ldr	r3, [pc, #312]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d2e2:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d2e6:	f003 0302 	and.w	r3, r3, #2
3419d2ea:	2b00      	cmp	r3, #0
3419d2ec:	d002      	beq.n	3419d2f4 <GetNextStatStage+0xb4>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3419d2ee:	2306      	movs	r3, #6
3419d2f0:	73fb      	strb	r3, [r7, #15]
    break;
3419d2f2:	e085      	b.n	3419d400 <GetNextStatStage+0x1c0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3419d2f4:	4b49      	ldr	r3, [pc, #292]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d2f6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d2fa:	f003 0301 	and.w	r3, r3, #1
3419d2fe:	2b00      	cmp	r3, #0
3419d300:	d07e      	beq.n	3419d400 <GetNextStatStage+0x1c0>
      next = ISP_STAT_CFG_UP_AVG;
3419d302:	2300      	movs	r3, #0
3419d304:	73fb      	strb	r3, [r7, #15]
    break;
3419d306:	e07b      	b.n	3419d400 <GetNextStatStage+0x1c0>

  case ISP_STAT_CFG_UP_BINS_9_11:
    /* Try Down Avg */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3419d308:	4b44      	ldr	r3, [pc, #272]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d30a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d30e:	f003 0301 	and.w	r3, r3, #1
3419d312:	2b00      	cmp	r3, #0
3419d314:	d002      	beq.n	3419d31c <GetNextStatStage+0xdc>
    {
      next = ISP_STAT_CFG_DOWN_AVG;
3419d316:	2305      	movs	r3, #5
3419d318:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Avg : try on Up Bins */
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_UP_BINS_0_2;
    }
    break;
3419d31a:	e073      	b.n	3419d404 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3419d31c:	4b3f      	ldr	r3, [pc, #252]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d31e:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d322:	f003 0302 	and.w	r3, r3, #2
3419d326:	2b00      	cmp	r3, #0
3419d328:	d002      	beq.n	3419d330 <GetNextStatStage+0xf0>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3419d32a:	2306      	movs	r3, #6
3419d32c:	73fb      	strb	r3, [r7, #15]
    break;
3419d32e:	e069      	b.n	3419d404 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3419d330:	4b3a      	ldr	r3, [pc, #232]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d332:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d336:	f003 0301 	and.w	r3, r3, #1
3419d33a:	2b00      	cmp	r3, #0
3419d33c:	d002      	beq.n	3419d344 <GetNextStatStage+0x104>
      next = ISP_STAT_CFG_UP_AVG;
3419d33e:	2300      	movs	r3, #0
3419d340:	73fb      	strb	r3, [r7, #15]
    break;
3419d342:	e05f      	b.n	3419d404 <GetNextStatStage+0x1c4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3419d344:	4b35      	ldr	r3, [pc, #212]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d346:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d34a:	f003 0302 	and.w	r3, r3, #2
3419d34e:	2b00      	cmp	r3, #0
3419d350:	d058      	beq.n	3419d404 <GetNextStatStage+0x1c4>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3419d352:	2301      	movs	r3, #1
3419d354:	73fb      	strb	r3, [r7, #15]
    break;
3419d356:	e055      	b.n	3419d404 <GetNextStatStage+0x1c4>

  case ISP_STAT_CFG_DOWN_AVG:
    /* Try Down Bins */
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3419d358:	4b30      	ldr	r3, [pc, #192]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d35a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d35e:	f003 0302 	and.w	r3, r3, #2
3419d362:	2b00      	cmp	r3, #0
3419d364:	d002      	beq.n	3419d36c <GetNextStatStage+0x12c>
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3419d366:	2306      	movs	r3, #6
3419d368:	73fb      	strb	r3, [r7, #15]
    /* Skip Up Bins : try Down Avg */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
    {
      next = ISP_STAT_CFG_DOWN_AVG;
    }
    break;
3419d36a:	e04d      	b.n	3419d408 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3419d36c:	4b2b      	ldr	r3, [pc, #172]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d36e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d372:	f003 0301 	and.w	r3, r3, #1
3419d376:	2b00      	cmp	r3, #0
3419d378:	d002      	beq.n	3419d380 <GetNextStatStage+0x140>
      next = ISP_STAT_CFG_UP_AVG;
3419d37a:	2300      	movs	r3, #0
3419d37c:	73fb      	strb	r3, [r7, #15]
    break;
3419d37e:	e043      	b.n	3419d408 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3419d380:	4b26      	ldr	r3, [pc, #152]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d382:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d386:	f003 0302 	and.w	r3, r3, #2
3419d38a:	2b00      	cmp	r3, #0
3419d38c:	d002      	beq.n	3419d394 <GetNextStatStage+0x154>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3419d38e:	2301      	movs	r3, #1
3419d390:	73fb      	strb	r3, [r7, #15]
    break;
3419d392:	e039      	b.n	3419d408 <GetNextStatStage+0x1c8>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3419d394:	4b21      	ldr	r3, [pc, #132]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d396:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d39a:	f003 0301 	and.w	r3, r3, #1
3419d39e:	2b00      	cmp	r3, #0
3419d3a0:	d032      	beq.n	3419d408 <GetNextStatStage+0x1c8>
      next = ISP_STAT_CFG_DOWN_AVG;
3419d3a2:	2305      	movs	r3, #5
3419d3a4:	73fb      	strb	r3, [r7, #15]
    break;
3419d3a6:	e02f      	b.n	3419d408 <GetNextStatStage+0x1c8>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    /* Try Up Avg */
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3419d3a8:	4b1c      	ldr	r3, [pc, #112]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d3aa:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d3ae:	f003 0301 	and.w	r3, r3, #1
3419d3b2:	2b00      	cmp	r3, #0
3419d3b4:	d002      	beq.n	3419d3bc <GetNextStatStage+0x17c>
    {
      next = ISP_STAT_CFG_UP_AVG;
3419d3b6:	2300      	movs	r3, #0
3419d3b8:	73fb      	strb	r3, [r7, #15]
    /* Skip Down Avg : try Down Bins */
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
    {
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
    }
    break;
3419d3ba:	e027      	b.n	3419d40c <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3419d3bc:	4b17      	ldr	r3, [pc, #92]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d3be:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d3c2:	f003 0302 	and.w	r3, r3, #2
3419d3c6:	2b00      	cmp	r3, #0
3419d3c8:	d002      	beq.n	3419d3d0 <GetNextStatStage+0x190>
      next = ISP_STAT_CFG_UP_BINS_0_2;
3419d3ca:	2301      	movs	r3, #1
3419d3cc:	73fb      	strb	r3, [r7, #15]
    break;
3419d3ce:	e01d      	b.n	3419d40c <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3419d3d0:	4b12      	ldr	r3, [pc, #72]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d3d2:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d3d6:	f003 0301 	and.w	r3, r3, #1
3419d3da:	2b00      	cmp	r3, #0
3419d3dc:	d002      	beq.n	3419d3e4 <GetNextStatStage+0x1a4>
      next = ISP_STAT_CFG_DOWN_AVG;
3419d3de:	2305      	movs	r3, #5
3419d3e0:	73fb      	strb	r3, [r7, #15]
    break;
3419d3e2:	e013      	b.n	3419d40c <GetNextStatStage+0x1cc>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3419d3e4:	4b0d      	ldr	r3, [pc, #52]	@ (3419d41c <GetNextStatStage+0x1dc>)
3419d3e6:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d3ea:	f003 0302 	and.w	r3, r3, #2
3419d3ee:	2b00      	cmp	r3, #0
3419d3f0:	d00c      	beq.n	3419d40c <GetNextStatStage+0x1cc>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
3419d3f2:	2306      	movs	r3, #6
3419d3f4:	73fb      	strb	r3, [r7, #15]
    break;
3419d3f6:	e009      	b.n	3419d40c <GetNextStatStage+0x1cc>

  default:
    /* In the middle of the bins measurement: continue with the next bins part */
    next = (ISP_SVC_StatEngineStage) (current + 1);
3419d3f8:	79fb      	ldrb	r3, [r7, #7]
3419d3fa:	3301      	adds	r3, #1
3419d3fc:	73fb      	strb	r3, [r7, #15]
    break;
3419d3fe:	e006      	b.n	3419d40e <GetNextStatStage+0x1ce>
    break;
3419d400:	bf00      	nop
3419d402:	e004      	b.n	3419d40e <GetNextStatStage+0x1ce>
    break;
3419d404:	bf00      	nop
3419d406:	e002      	b.n	3419d40e <GetNextStatStage+0x1ce>
    break;
3419d408:	bf00      	nop
3419d40a:	e000      	b.n	3419d40e <GetNextStatStage+0x1ce>
    break;
3419d40c:	bf00      	nop
  }

  return next;
3419d40e:	7bfb      	ldrb	r3, [r7, #15]
}
3419d410:	4618      	mov	r0, r3
3419d412:	3714      	adds	r7, #20
3419d414:	46bd      	mov	sp, r7
3419d416:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d41a:	4770      	bx	lr
3419d41c:	341c26b8 	.word	0x341c26b8

3419d420 <GetStatCycleStart>:

static ISP_SVC_StatEngineStage GetStatCycleStart(ISP_SVC_StatLocation location)
{
3419d420:	b480      	push	{r7}
3419d422:	b085      	sub	sp, #20
3419d424:	af00      	add	r7, sp, #0
3419d426:	4603      	mov	r3, r0
3419d428:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
3419d42a:	79fb      	ldrb	r3, [r7, #7]
3419d42c:	2b01      	cmp	r3, #1
3419d42e:	d113      	bne.n	3419d458 <GetStatCycleStart+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
3419d430:	4b16      	ldr	r3, [pc, #88]	@ (3419d48c <GetStatCycleStart+0x6c>)
3419d432:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d436:	f003 0301 	and.w	r3, r3, #1
3419d43a:	2b00      	cmp	r3, #0
3419d43c:	d106      	bne.n	3419d44c <GetStatCycleStart+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
3419d43e:	4b13      	ldr	r3, [pc, #76]	@ (3419d48c <GetStatCycleStart+0x6c>)
3419d440:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d444:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
3419d448:	2b00      	cmp	r3, #0
3419d44a:	d002      	beq.n	3419d452 <GetStatCycleStart+0x32>
    {
      /* Stat up cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
3419d44c:	2300      	movs	r3, #0
3419d44e:	73fb      	strb	r3, [r7, #15]
3419d450:	e015      	b.n	3419d47e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat up cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_UP_BINS_0_2;
3419d452:	2301      	movs	r3, #1
3419d454:	73fb      	strb	r3, [r7, #15]
3419d456:	e012      	b.n	3419d47e <GetStatCycleStart+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
3419d458:	4b0c      	ldr	r3, [pc, #48]	@ (3419d48c <GetStatCycleStart+0x6c>)
3419d45a:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d45e:	f003 0301 	and.w	r3, r3, #1
3419d462:	2b00      	cmp	r3, #0
3419d464:	d106      	bne.n	3419d474 <GetStatCycleStart+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3419d466:	4b09      	ldr	r3, [pc, #36]	@ (3419d48c <GetStatCycleStart+0x6c>)
3419d468:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d46c:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
3419d470:	2b00      	cmp	r3, #0
3419d472:	d002      	beq.n	3419d47a <GetStatCycleStart+0x5a>
    {
      /* Stat down cycle starts with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
3419d474:	2305      	movs	r3, #5
3419d476:	73fb      	strb	r3, [r7, #15]
3419d478:	e001      	b.n	3419d47e <GetStatCycleStart+0x5e>
    }
    else
    {
      /* Stat down cycle starts with 1st BIN measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_0_2;
3419d47a:	2306      	movs	r3, #6
3419d47c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
3419d47e:	7bfb      	ldrb	r3, [r7, #15]
}
3419d480:	4618      	mov	r0, r3
3419d482:	3714      	adds	r7, #20
3419d484:	46bd      	mov	sp, r7
3419d486:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d48a:	4770      	bx	lr
3419d48c:	341c26b8 	.word	0x341c26b8

3419d490 <GetStatCycleEnd>:

static ISP_SVC_StatEngineStage GetStatCycleEnd(ISP_SVC_StatLocation location)
{
3419d490:	b480      	push	{r7}
3419d492:	b085      	sub	sp, #20
3419d494:	af00      	add	r7, sp, #0
3419d496:	4603      	mov	r3, r0
3419d498:	71fb      	strb	r3, [r7, #7]
  ISP_SVC_StatEngineStage stage;

  if (location == ISP_STAT_LOC_UP)
3419d49a:	79fb      	ldrb	r3, [r7, #7]
3419d49c:	2b01      	cmp	r3, #1
3419d49e:	d113      	bne.n	3419d4c8 <GetStatCycleEnd+0x38>
  {
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
3419d4a0:	4b16      	ldr	r3, [pc, #88]	@ (3419d4fc <GetStatCycleEnd+0x6c>)
3419d4a2:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d4a6:	f003 0302 	and.w	r3, r3, #2
3419d4aa:	2b00      	cmp	r3, #0
3419d4ac:	d106      	bne.n	3419d4bc <GetStatCycleEnd+0x2c>
        (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP))
3419d4ae:	4b13      	ldr	r3, [pc, #76]	@ (3419d4fc <GetStatCycleEnd+0x6c>)
3419d4b0:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419d4b4:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
3419d4b8:	2b00      	cmp	r3, #0
3419d4ba:	d002      	beq.n	3419d4c2 <GetStatCycleEnd+0x32>
    {
      /* Stat up cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_UP_BINS_9_11;
3419d4bc:	2304      	movs	r3, #4
3419d4be:	73fb      	strb	r3, [r7, #15]
3419d4c0:	e015      	b.n	3419d4ee <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat up cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_UP_AVG;
3419d4c2:	2300      	movs	r3, #0
3419d4c4:	73fb      	strb	r3, [r7, #15]
3419d4c6:	e012      	b.n	3419d4ee <GetStatCycleEnd+0x5e>
    }
  }
  else
  {
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
3419d4c8:	4b0c      	ldr	r3, [pc, #48]	@ (3419d4fc <GetStatCycleEnd+0x6c>)
3419d4ca:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d4ce:	f003 0302 	and.w	r3, r3, #2
3419d4d2:	2b00      	cmp	r3, #0
3419d4d4:	d106      	bne.n	3419d4e4 <GetStatCycleEnd+0x54>
        (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3419d4d6:	4b09      	ldr	r3, [pc, #36]	@ (3419d4fc <GetStatCycleEnd+0x6c>)
3419d4d8:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419d4dc:	f003 0304 	and.w	r3, r3, #4
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS) ||
3419d4e0:	2b00      	cmp	r3, #0
3419d4e2:	d002      	beq.n	3419d4ea <GetStatCycleEnd+0x5a>
    {
      /* Stat down cycle ends with last BINS measurement */
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
3419d4e4:	2309      	movs	r3, #9
3419d4e6:	73fb      	strb	r3, [r7, #15]
3419d4e8:	e001      	b.n	3419d4ee <GetStatCycleEnd+0x5e>
    }
    else
    {
      /* Stat down cycle ends with AVG measurement */
      stage = ISP_STAT_CFG_DOWN_AVG;
3419d4ea:	2305      	movs	r3, #5
3419d4ec:	73fb      	strb	r3, [r7, #15]
    }
  }
  return stage;
3419d4ee:	7bfb      	ldrb	r3, [r7, #15]
}
3419d4f0:	4618      	mov	r0, r3
3419d4f2:	3714      	adds	r7, #20
3419d4f4:	46bd      	mov	sp, r7
3419d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d4fa:	4770      	bx	lr
3419d4fc:	341c26b8 	.word	0x341c26b8

3419d500 <LuminanceFromRGB>:

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
3419d500:	b480      	push	{r7}
3419d502:	b083      	sub	sp, #12
3419d504:	af00      	add	r7, sp, #0
3419d506:	4603      	mov	r3, r0
3419d508:	71fb      	strb	r3, [r7, #7]
3419d50a:	460b      	mov	r3, r1
3419d50c:	71bb      	strb	r3, [r7, #6]
3419d50e:	4613      	mov	r3, r2
3419d510:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
3419d512:	79fb      	ldrb	r3, [r7, #7]
3419d514:	ee07 3a90 	vmov	s15, r3
3419d518:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3419d51c:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 3419d568 <LuminanceFromRGB+0x68>
3419d520:	ee27 6b06 	vmul.f64	d6, d7, d6
3419d524:	79bb      	ldrb	r3, [r7, #6]
3419d526:	ee07 3a90 	vmov	s15, r3
3419d52a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3419d52e:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 3419d570 <LuminanceFromRGB+0x70>
3419d532:	ee27 7b05 	vmul.f64	d7, d7, d5
3419d536:	ee36 6b07 	vadd.f64	d6, d6, d7
3419d53a:	797b      	ldrb	r3, [r7, #5]
3419d53c:	ee07 3a90 	vmov	s15, r3
3419d540:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3419d544:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 3419d578 <LuminanceFromRGB+0x78>
3419d548:	ee27 7b05 	vmul.f64	d7, d7, d5
3419d54c:	ee36 7b07 	vadd.f64	d7, d6, d7
3419d550:	eefc 7bc7 	vcvt.u32.f64	s15, d7
3419d554:	edc7 7a00 	vstr	s15, [r7]
3419d558:	783b      	ldrb	r3, [r7, #0]
3419d55a:	b2db      	uxtb	r3, r3
}
3419d55c:	4618      	mov	r0, r3
3419d55e:	370c      	adds	r7, #12
3419d560:	46bd      	mov	sp, r7
3419d562:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d566:	4770      	bx	lr
3419d568:	e5604189 	.word	0xe5604189
3419d56c:	3fd322d0 	.word	0x3fd322d0
3419d570:	39581062 	.word	0x39581062
3419d574:	3fe2c8b4 	.word	0x3fe2c8b4
3419d578:	9fbe76c9 	.word	0x9fbe76c9
3419d57c:	3fbd2f1a 	.word	0x3fbd2f1a

3419d580 <LuminanceFromRGBMono>:

uint8_t LuminanceFromRGBMono(uint8_t r, uint8_t g, uint8_t b)
{
3419d580:	b480      	push	{r7}
3419d582:	b083      	sub	sp, #12
3419d584:	af00      	add	r7, sp, #0
3419d586:	4603      	mov	r3, r0
3419d588:	71fb      	strb	r3, [r7, #7]
3419d58a:	460b      	mov	r3, r1
3419d58c:	71bb      	strb	r3, [r7, #6]
3419d58e:	4613      	mov	r3, r2
3419d590:	717b      	strb	r3, [r7, #5]
  /* Compute luminance from RGB components
   * by adding together R, G, B components for monochrome sensor */
  return r + g + b;
3419d592:	79fa      	ldrb	r2, [r7, #7]
3419d594:	79bb      	ldrb	r3, [r7, #6]
3419d596:	4413      	add	r3, r2
3419d598:	b2da      	uxtb	r2, r3
3419d59a:	797b      	ldrb	r3, [r7, #5]
3419d59c:	4413      	add	r3, r2
3419d59e:	b2db      	uxtb	r3, r3
}
3419d5a0:	4618      	mov	r0, r3
3419d5a2:	370c      	adds	r7, #12
3419d5a4:	46bd      	mov	sp, r7
3419d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
3419d5aa:	4770      	bx	lr

3419d5ac <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
3419d5ac:	b580      	push	{r7, lr}
3419d5ae:	b088      	sub	sp, #32
3419d5b0:	af00      	add	r7, sp, #0
3419d5b2:	6078      	str	r0, [r7, #4]
3419d5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d5b6:	687b      	ldr	r3, [r7, #4]
3419d5b8:	2b00      	cmp	r3, #0
3419d5ba:	d012      	beq.n	3419d5e2 <ISP_SVC_ISP_SetDemosaicing+0x36>
3419d5bc:	683b      	ldr	r3, [r7, #0]
3419d5be:	2b00      	cmp	r3, #0
3419d5c0:	d00f      	beq.n	3419d5e2 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3419d5c2:	683b      	ldr	r3, [r7, #0]
3419d5c4:	789b      	ldrb	r3, [r3, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d5c6:	2b07      	cmp	r3, #7
3419d5c8:	d80b      	bhi.n	3419d5e2 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3419d5ca:	683b      	ldr	r3, [r7, #0]
3419d5cc:	78db      	ldrb	r3, [r3, #3]
3419d5ce:	2b07      	cmp	r3, #7
3419d5d0:	d807      	bhi.n	3419d5e2 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
3419d5d2:	683b      	ldr	r3, [r7, #0]
3419d5d4:	791b      	ldrb	r3, [r3, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
3419d5d6:	2b07      	cmp	r3, #7
3419d5d8:	d803      	bhi.n	3419d5e2 <ISP_SVC_ISP_SetDemosaicing+0x36>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
3419d5da:	683b      	ldr	r3, [r7, #0]
3419d5dc:	795b      	ldrb	r3, [r3, #5]
3419d5de:	2b07      	cmp	r3, #7
3419d5e0:	d901      	bls.n	3419d5e6 <ISP_SVC_ISP_SetDemosaicing+0x3a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
3419d5e2:	230a      	movs	r3, #10
3419d5e4:	e056      	b.n	3419d694 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
3419d5e6:	683b      	ldr	r3, [r7, #0]
3419d5e8:	781b      	ldrb	r3, [r3, #0]
3419d5ea:	2b00      	cmp	r3, #0
3419d5ec:	d003      	beq.n	3419d5f6 <ISP_SVC_ISP_SetDemosaicing+0x4a>
3419d5ee:	683b      	ldr	r3, [r7, #0]
3419d5f0:	785b      	ldrb	r3, [r3, #1]
3419d5f2:	2b04      	cmp	r3, #4
3419d5f4:	d108      	bne.n	3419d608 <ISP_SVC_ISP_SetDemosaicing+0x5c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d5f6:	687b      	ldr	r3, [r7, #4]
3419d5f8:	681b      	ldr	r3, [r3, #0]
3419d5fa:	2101      	movs	r1, #1
3419d5fc:	4618      	mov	r0, r3
3419d5fe:	f7e9 f931 	bl	34186864 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
3419d602:	4603      	mov	r3, r0
3419d604:	77fb      	strb	r3, [r7, #31]
3419d606:	e03f      	b.n	3419d688 <ISP_SVC_ISP_SetDemosaicing+0xdc>
  }
  else
  {
    switch(pConfig->type)
3419d608:	683b      	ldr	r3, [r7, #0]
3419d60a:	785b      	ldrb	r3, [r3, #1]
3419d60c:	2b03      	cmp	r3, #3
3419d60e:	d817      	bhi.n	3419d640 <ISP_SVC_ISP_SetDemosaicing+0x94>
3419d610:	a201      	add	r2, pc, #4	@ (adr r2, 3419d618 <ISP_SVC_ISP_SetDemosaicing+0x6c>)
3419d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419d616:	bf00      	nop
3419d618:	3419d629 	.word	0x3419d629
3419d61c:	3419d62f 	.word	0x3419d62f
3419d620:	3419d635 	.word	0x3419d635
3419d624:	3419d63b 	.word	0x3419d63b
    {
      case ISP_DEMOS_TYPE_RGGB:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
3419d628:	2300      	movs	r3, #0
3419d62a:	613b      	str	r3, [r7, #16]
        break;
3419d62c:	e00b      	b.n	3419d646 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GRBG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GRBG;
3419d62e:	2302      	movs	r3, #2
3419d630:	613b      	str	r3, [r7, #16]
        break;
3419d632:	e008      	b.n	3419d646 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_GBRG:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_GBRG;
3419d634:	2304      	movs	r3, #4
3419d636:	613b      	str	r3, [r7, #16]
        break;
3419d638:	e005      	b.n	3419d646 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      case ISP_DEMOS_TYPE_BGGR:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_BGGR;
3419d63a:	2306      	movs	r3, #6
3419d63c:	613b      	str	r3, [r7, #16]
        break;
3419d63e:	e002      	b.n	3419d646 <ISP_SVC_ISP_SetDemosaicing+0x9a>
      default:
        rawBayerCfg.RawBayerType = DCMIPP_RAWBAYER_RGGB;
3419d640:	2300      	movs	r3, #0
3419d642:	613b      	str	r3, [r7, #16]
        break;
3419d644:	bf00      	nop
    }

    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
3419d646:	683b      	ldr	r3, [r7, #0]
3419d648:	789b      	ldrb	r3, [r3, #2]
3419d64a:	617b      	str	r3, [r7, #20]
    rawBayerCfg.VLineStrength = (uint32_t) pConfig->lineV;
3419d64c:	683b      	ldr	r3, [r7, #0]
3419d64e:	78db      	ldrb	r3, [r3, #3]
3419d650:	60bb      	str	r3, [r7, #8]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
3419d652:	683b      	ldr	r3, [r7, #0]
3419d654:	791b      	ldrb	r3, [r3, #4]
3419d656:	60fb      	str	r3, [r7, #12]
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
3419d658:	683b      	ldr	r3, [r7, #0]
3419d65a:	795b      	ldrb	r3, [r3, #5]
3419d65c:	61bb      	str	r3, [r7, #24]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
3419d65e:	687b      	ldr	r3, [r7, #4]
3419d660:	681b      	ldr	r3, [r3, #0]
3419d662:	f107 0208 	add.w	r2, r7, #8
3419d666:	2101      	movs	r1, #1
3419d668:	4618      	mov	r0, r3
3419d66a:	f7e8 ffdb 	bl	34186624 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
3419d66e:	4603      	mov	r3, r0
3419d670:	77fb      	strb	r3, [r7, #31]

    if (halStatus == HAL_OK)
3419d672:	7ffb      	ldrb	r3, [r7, #31]
3419d674:	2b00      	cmp	r3, #0
3419d676:	d107      	bne.n	3419d688 <ISP_SVC_ISP_SetDemosaicing+0xdc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d678:	687b      	ldr	r3, [r7, #4]
3419d67a:	681b      	ldr	r3, [r3, #0]
3419d67c:	2101      	movs	r1, #1
3419d67e:	4618      	mov	r0, r3
3419d680:	f7e9 f8c2 	bl	34186808 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
3419d684:	4603      	mov	r3, r0
3419d686:	77fb      	strb	r3, [r7, #31]
    }
  }

  if (halStatus != HAL_OK)
3419d688:	7ffb      	ldrb	r3, [r7, #31]
3419d68a:	2b00      	cmp	r3, #0
3419d68c:	d001      	beq.n	3419d692 <ISP_SVC_ISP_SetDemosaicing+0xe6>
  {
    return ISP_ERR_DEMOSAICING_HAL;
3419d68e:	230b      	movs	r3, #11
3419d690:	e000      	b.n	3419d694 <ISP_SVC_ISP_SetDemosaicing+0xe8>
  }

  return ISP_OK;
3419d692:	2300      	movs	r3, #0
}
3419d694:	4618      	mov	r0, r3
3419d696:	3720      	adds	r7, #32
3419d698:	46bd      	mov	sp, r7
3419d69a:	bd80      	pop	{r7, pc}

3419d69c <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
3419d69c:	b580      	push	{r7, lr}
3419d69e:	b084      	sub	sp, #16
3419d6a0:	af00      	add	r7, sp, #0
3419d6a2:	6078      	str	r0, [r7, #4]
3419d6a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d6a6:	687b      	ldr	r3, [r7, #4]
3419d6a8:	2b00      	cmp	r3, #0
3419d6aa:	d00c      	beq.n	3419d6c6 <ISP_SVC_ISP_SetStatRemoval+0x2a>
3419d6ac:	683b      	ldr	r3, [r7, #0]
3419d6ae:	2b00      	cmp	r3, #0
3419d6b0:	d009      	beq.n	3419d6c6 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
3419d6b2:	683b      	ldr	r3, [r7, #0]
3419d6b4:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d6b6:	2b07      	cmp	r3, #7
3419d6b8:	d805      	bhi.n	3419d6c6 <ISP_SVC_ISP_SetStatRemoval+0x2a>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
3419d6ba:	683b      	ldr	r3, [r7, #0]
3419d6bc:	689b      	ldr	r3, [r3, #8]
3419d6be:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419d6c2:	4293      	cmp	r3, r2
3419d6c4:	d901      	bls.n	3419d6ca <ISP_SVC_ISP_SetStatRemoval+0x2e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
3419d6c6:	2314      	movs	r3, #20
3419d6c8:	e028      	b.n	3419d71c <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  if (pConfig->enable == 0)
3419d6ca:	683b      	ldr	r3, [r7, #0]
3419d6cc:	781b      	ldrb	r3, [r3, #0]
3419d6ce:	2b00      	cmp	r3, #0
3419d6d0:	d108      	bne.n	3419d6e4 <ISP_SVC_ISP_SetStatRemoval+0x48>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d6d2:	687b      	ldr	r3, [r7, #4]
3419d6d4:	681b      	ldr	r3, [r3, #0]
3419d6d6:	2101      	movs	r1, #1
3419d6d8:	4618      	mov	r0, r3
3419d6da:	f7e9 f95b 	bl	34186994 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
3419d6de:	4603      	mov	r3, r0
3419d6e0:	73fb      	strb	r3, [r7, #15]
3419d6e2:	e015      	b.n	3419d710 <ISP_SVC_ISP_SetStatRemoval+0x74>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
3419d6e4:	687b      	ldr	r3, [r7, #4]
3419d6e6:	6818      	ldr	r0, [r3, #0]
3419d6e8:	683b      	ldr	r3, [r7, #0]
3419d6ea:	685a      	ldr	r2, [r3, #4]
3419d6ec:	683b      	ldr	r3, [r7, #0]
3419d6ee:	689b      	ldr	r3, [r3, #8]
3419d6f0:	2101      	movs	r1, #1
3419d6f2:	f7e9 f8e5 	bl	341868c0 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
3419d6f6:	4603      	mov	r3, r0
3419d6f8:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3419d6fa:	7bfb      	ldrb	r3, [r7, #15]
3419d6fc:	2b00      	cmp	r3, #0
3419d6fe:	d107      	bne.n	3419d710 <ISP_SVC_ISP_SetStatRemoval+0x74>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d700:	687b      	ldr	r3, [r7, #4]
3419d702:	681b      	ldr	r3, [r3, #0]
3419d704:	2101      	movs	r1, #1
3419d706:	4618      	mov	r0, r3
3419d708:	f7e9 f924 	bl	34186954 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
3419d70c:	4603      	mov	r3, r0
3419d70e:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3419d710:	7bfb      	ldrb	r3, [r7, #15]
3419d712:	2b00      	cmp	r3, #0
3419d714:	d001      	beq.n	3419d71a <ISP_SVC_ISP_SetStatRemoval+0x7e>
  {
    return ISP_ERR_STATREMOVAL_HAL;
3419d716:	2315      	movs	r3, #21
3419d718:	e000      	b.n	3419d71c <ISP_SVC_ISP_SetStatRemoval+0x80>
  }

  return ISP_OK;
3419d71a:	2300      	movs	r3, #0
}
3419d71c:	4618      	mov	r0, r3
3419d71e:	3710      	adds	r7, #16
3419d720:	46bd      	mov	sp, r7
3419d722:	bd80      	pop	{r7, pc}

3419d724 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
3419d724:	b580      	push	{r7, lr}
3419d726:	b086      	sub	sp, #24
3419d728:	af00      	add	r7, sp, #0
3419d72a:	6078      	str	r0, [r7, #4]
3419d72c:	6039      	str	r1, [r7, #0]
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;
3419d72e:	2300      	movs	r3, #0
3419d730:	75fb      	strb	r3, [r7, #23]

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419d732:	687b      	ldr	r3, [r7, #4]
3419d734:	2b00      	cmp	r3, #0
3419d736:	d002      	beq.n	3419d73e <ISP_SVC_ISP_SetDecimation+0x1a>
3419d738:	683b      	ldr	r3, [r7, #0]
3419d73a:	2b00      	cmp	r3, #0
3419d73c:	d101      	bne.n	3419d742 <ISP_SVC_ISP_SetDecimation+0x1e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
3419d73e:	231e      	movs	r3, #30
3419d740:	e04b      	b.n	3419d7da <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  switch (pConfig->factor)
3419d742:	683b      	ldr	r3, [r7, #0]
3419d744:	781b      	ldrb	r3, [r3, #0]
3419d746:	3b01      	subs	r3, #1
3419d748:	2b07      	cmp	r3, #7
3419d74a:	d827      	bhi.n	3419d79c <ISP_SVC_ISP_SetDecimation+0x78>
3419d74c:	a201      	add	r2, pc, #4	@ (adr r2, 3419d754 <ISP_SVC_ISP_SetDecimation+0x30>)
3419d74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419d752:	bf00      	nop
3419d754:	3419d775 	.word	0x3419d775
3419d758:	3419d77f 	.word	0x3419d77f
3419d75c:	3419d79d 	.word	0x3419d79d
3419d760:	3419d789 	.word	0x3419d789
3419d764:	3419d79d 	.word	0x3419d79d
3419d768:	3419d79d 	.word	0x3419d79d
3419d76c:	3419d79d 	.word	0x3419d79d
3419d770:	3419d793 	.word	0x3419d793
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
3419d774:	2300      	movs	r3, #0
3419d776:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
3419d778:	2300      	movs	r3, #0
3419d77a:	613b      	str	r3, [r7, #16]
    break;
3419d77c:	e010      	b.n	3419d7a0 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_2:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_2;
3419d77e:	2308      	movs	r3, #8
3419d780:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_2;
3419d782:	2302      	movs	r3, #2
3419d784:	613b      	str	r3, [r7, #16]
    break;
3419d786:	e00b      	b.n	3419d7a0 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_4:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_4;
3419d788:	2310      	movs	r3, #16
3419d78a:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_4;
3419d78c:	2304      	movs	r3, #4
3419d78e:	613b      	str	r3, [r7, #16]
    break;
3419d790:	e006      	b.n	3419d7a0 <ISP_SVC_ISP_SetDecimation+0x7c>

  case ISP_DECIM_FACTOR_8:
    decimationCfg.VRatio = DCMIPP_VDEC_1_OUT_8;
3419d792:	2318      	movs	r3, #24
3419d794:	60fb      	str	r3, [r7, #12]
    decimationCfg.HRatio = DCMIPP_HDEC_1_OUT_8;
3419d796:	2306      	movs	r3, #6
3419d798:	613b      	str	r3, [r7, #16]
    break;
3419d79a:	e001      	b.n	3419d7a0 <ISP_SVC_ISP_SetDecimation+0x7c>

  default:
    return ISP_ERR_DECIMATION_EINVAL;
3419d79c:	231e      	movs	r3, #30
3419d79e:	e01c      	b.n	3419d7da <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
3419d7a0:	687b      	ldr	r3, [r7, #4]
3419d7a2:	681b      	ldr	r3, [r3, #0]
3419d7a4:	f107 020c 	add.w	r2, r7, #12
3419d7a8:	2101      	movs	r1, #1
3419d7aa:	4618      	mov	r0, r3
3419d7ac:	f7e8 fccc 	bl	34186148 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
3419d7b0:	4603      	mov	r3, r0
3419d7b2:	2b00      	cmp	r3, #0
3419d7b4:	d001      	beq.n	3419d7ba <ISP_SVC_ISP_SetDecimation+0x96>
  {
    return ISP_ERR_DECIMATION_HAL;
3419d7b6:	231f      	movs	r3, #31
3419d7b8:	e00f      	b.n	3419d7da <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3419d7ba:	687b      	ldr	r3, [r7, #4]
3419d7bc:	681b      	ldr	r3, [r3, #0]
3419d7be:	2101      	movs	r1, #1
3419d7c0:	4618      	mov	r0, r3
3419d7c2:	f7e8 fd2b 	bl	3418621c <HAL_DCMIPP_PIPE_EnableISPDecimation>
3419d7c6:	4603      	mov	r3, r0
3419d7c8:	2b00      	cmp	r3, #0
3419d7ca:	d001      	beq.n	3419d7d0 <ISP_SVC_ISP_SetDecimation+0xac>
  {
    return ISP_ERR_DECIMATION_HAL;
3419d7cc:	231f      	movs	r3, #31
3419d7ce:	e004      	b.n	3419d7da <ISP_SVC_ISP_SetDecimation+0xb6>
  }

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;
3419d7d0:	683b      	ldr	r3, [r7, #0]
3419d7d2:	781a      	ldrb	r2, [r3, #0]
3419d7d4:	4b03      	ldr	r3, [pc, #12]	@ (3419d7e4 <ISP_SVC_ISP_SetDecimation+0xc0>)
3419d7d6:	701a      	strb	r2, [r3, #0]

  return ret;
3419d7d8:	7dfb      	ldrb	r3, [r7, #23]
}
3419d7da:	4618      	mov	r0, r3
3419d7dc:	3718      	adds	r7, #24
3419d7de:	46bd      	mov	sp, r7
3419d7e0:	bd80      	pop	{r7, pc}
3419d7e2:	bf00      	nop
3419d7e4:	341c0134 	.word	0x341c0134

3419d7e8 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
3419d7e8:	b580      	push	{r7, lr}
3419d7ea:	b086      	sub	sp, #24
3419d7ec:	af00      	add	r7, sp, #0
3419d7ee:	6078      	str	r0, [r7, #4]
3419d7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d7f2:	687b      	ldr	r3, [r7, #4]
3419d7f4:	2b00      	cmp	r3, #0
3419d7f6:	d02f      	beq.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
3419d7f8:	683b      	ldr	r3, [r7, #0]
3419d7fa:	2b00      	cmp	r3, #0
3419d7fc:	d02c      	beq.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d7fe:	683b      	ldr	r3, [r7, #0]
3419d800:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d802:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d806:	d827      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d808:	683b      	ldr	r3, [r7, #0]
3419d80a:	689b      	ldr	r3, [r3, #8]
3419d80c:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d810:	d822      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d812:	683b      	ldr	r3, [r7, #0]
3419d814:	68db      	ldr	r3, [r3, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d816:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d81a:	d81d      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d81c:	683b      	ldr	r3, [r7, #0]
3419d81e:	691b      	ldr	r3, [r3, #16]
3419d820:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d824:	d818      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d826:	683b      	ldr	r3, [r7, #0]
3419d828:	695b      	ldr	r3, [r3, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d82a:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d82e:	d813      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d830:	683b      	ldr	r3, [r7, #0]
3419d832:	699b      	ldr	r3, [r3, #24]
3419d834:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d838:	d80e      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d83a:	683b      	ldr	r3, [r7, #0]
3419d83c:	69db      	ldr	r3, [r3, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d83e:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d842:	d809      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d844:	683b      	ldr	r3, [r7, #0]
3419d846:	6a1b      	ldr	r3, [r3, #32]
3419d848:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d84c:	d804      	bhi.n	3419d858 <ISP_SVC_ISP_SetContrast+0x70>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
3419d84e:	683b      	ldr	r3, [r7, #0]
3419d850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3419d852:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3419d856:	d901      	bls.n	3419d85c <ISP_SVC_ISP_SetContrast+0x74>
  {
    return ISP_ERR_CONTRAST_EINVAL;
3419d858:	2328      	movs	r3, #40	@ 0x28
3419d85a:	e078      	b.n	3419d94e <ISP_SVC_ISP_SetContrast+0x166>
  }

  if (pConfig->enable == 0)
3419d85c:	683b      	ldr	r3, [r7, #0]
3419d85e:	781b      	ldrb	r3, [r3, #0]
3419d860:	2b00      	cmp	r3, #0
3419d862:	d108      	bne.n	3419d876 <ISP_SVC_ISP_SetContrast+0x8e>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d864:	687b      	ldr	r3, [r7, #4]
3419d866:	681b      	ldr	r3, [r3, #0]
3419d868:	2101      	movs	r1, #1
3419d86a:	4618      	mov	r0, r3
3419d86c:	f7ea f8c8 	bl	34187a00 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
3419d870:	4603      	mov	r3, r0
3419d872:	75fb      	strb	r3, [r7, #23]
3419d874:	e065      	b.n	3419d942 <ISP_SVC_ISP_SetContrast+0x15a>
  }
  else
  {
    /* Concert coefficient unit from "percentage" to "6 bit" */
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
3419d876:	683b      	ldr	r3, [r7, #0]
3419d878:	685b      	ldr	r3, [r3, #4]
3419d87a:	011b      	lsls	r3, r3, #4
3419d87c:	4a36      	ldr	r2, [pc, #216]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d87e:	fba2 2303 	umull	r2, r3, r2, r3
3419d882:	095b      	lsrs	r3, r3, #5
3419d884:	b2db      	uxtb	r3, r3
3419d886:	733b      	strb	r3, [r7, #12]
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
3419d888:	683b      	ldr	r3, [r7, #0]
3419d88a:	689b      	ldr	r3, [r3, #8]
3419d88c:	011b      	lsls	r3, r3, #4
3419d88e:	4a32      	ldr	r2, [pc, #200]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d890:	fba2 2303 	umull	r2, r3, r2, r3
3419d894:	095b      	lsrs	r3, r3, #5
3419d896:	b2db      	uxtb	r3, r3
3419d898:	737b      	strb	r3, [r7, #13]
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
3419d89a:	683b      	ldr	r3, [r7, #0]
3419d89c:	68db      	ldr	r3, [r3, #12]
3419d89e:	011b      	lsls	r3, r3, #4
3419d8a0:	4a2d      	ldr	r2, [pc, #180]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8a2:	fba2 2303 	umull	r2, r3, r2, r3
3419d8a6:	095b      	lsrs	r3, r3, #5
3419d8a8:	b2db      	uxtb	r3, r3
3419d8aa:	73bb      	strb	r3, [r7, #14]
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
3419d8ac:	683b      	ldr	r3, [r7, #0]
3419d8ae:	691b      	ldr	r3, [r3, #16]
3419d8b0:	011b      	lsls	r3, r3, #4
3419d8b2:	4a29      	ldr	r2, [pc, #164]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8b4:	fba2 2303 	umull	r2, r3, r2, r3
3419d8b8:	095b      	lsrs	r3, r3, #5
3419d8ba:	b2db      	uxtb	r3, r3
3419d8bc:	73fb      	strb	r3, [r7, #15]
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
3419d8be:	683b      	ldr	r3, [r7, #0]
3419d8c0:	695b      	ldr	r3, [r3, #20]
3419d8c2:	011b      	lsls	r3, r3, #4
3419d8c4:	4a24      	ldr	r2, [pc, #144]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8c6:	fba2 2303 	umull	r2, r3, r2, r3
3419d8ca:	095b      	lsrs	r3, r3, #5
3419d8cc:	b2db      	uxtb	r3, r3
3419d8ce:	743b      	strb	r3, [r7, #16]
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
3419d8d0:	683b      	ldr	r3, [r7, #0]
3419d8d2:	699b      	ldr	r3, [r3, #24]
3419d8d4:	011b      	lsls	r3, r3, #4
3419d8d6:	4a20      	ldr	r2, [pc, #128]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8d8:	fba2 2303 	umull	r2, r3, r2, r3
3419d8dc:	095b      	lsrs	r3, r3, #5
3419d8de:	b2db      	uxtb	r3, r3
3419d8e0:	747b      	strb	r3, [r7, #17]
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
3419d8e2:	683b      	ldr	r3, [r7, #0]
3419d8e4:	69db      	ldr	r3, [r3, #28]
3419d8e6:	011b      	lsls	r3, r3, #4
3419d8e8:	4a1b      	ldr	r2, [pc, #108]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8ea:	fba2 2303 	umull	r2, r3, r2, r3
3419d8ee:	095b      	lsrs	r3, r3, #5
3419d8f0:	b2db      	uxtb	r3, r3
3419d8f2:	74bb      	strb	r3, [r7, #18]
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
3419d8f4:	683b      	ldr	r3, [r7, #0]
3419d8f6:	6a1b      	ldr	r3, [r3, #32]
3419d8f8:	011b      	lsls	r3, r3, #4
3419d8fa:	4a17      	ldr	r2, [pc, #92]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d8fc:	fba2 2303 	umull	r2, r3, r2, r3
3419d900:	095b      	lsrs	r3, r3, #5
3419d902:	b2db      	uxtb	r3, r3
3419d904:	74fb      	strb	r3, [r7, #19]
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
3419d906:	683b      	ldr	r3, [r7, #0]
3419d908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419d90a:	011b      	lsls	r3, r3, #4
3419d90c:	4a12      	ldr	r2, [pc, #72]	@ (3419d958 <ISP_SVC_ISP_SetContrast+0x170>)
3419d90e:	fba2 2303 	umull	r2, r3, r2, r3
3419d912:	095b      	lsrs	r3, r3, #5
3419d914:	b2db      	uxtb	r3, r3
3419d916:	753b      	strb	r3, [r7, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
3419d918:	687b      	ldr	r3, [r7, #4]
3419d91a:	681b      	ldr	r3, [r3, #0]
3419d91c:	f107 020c 	add.w	r2, r7, #12
3419d920:	2101      	movs	r1, #1
3419d922:	4618      	mov	r0, r3
3419d924:	f7e9 ff8e 	bl	34187844 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
3419d928:	4603      	mov	r3, r0
3419d92a:	75fb      	strb	r3, [r7, #23]

    if (halStatus == HAL_OK)
3419d92c:	7dfb      	ldrb	r3, [r7, #23]
3419d92e:	2b00      	cmp	r3, #0
3419d930:	d107      	bne.n	3419d942 <ISP_SVC_ISP_SetContrast+0x15a>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3419d932:	687b      	ldr	r3, [r7, #4]
3419d934:	681b      	ldr	r3, [r3, #0]
3419d936:	2101      	movs	r1, #1
3419d938:	4618      	mov	r0, r3
3419d93a:	f7ea f833 	bl	341879a4 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
3419d93e:	4603      	mov	r3, r0
3419d940:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (halStatus != HAL_OK)
3419d942:	7dfb      	ldrb	r3, [r7, #23]
3419d944:	2b00      	cmp	r3, #0
3419d946:	d001      	beq.n	3419d94c <ISP_SVC_ISP_SetContrast+0x164>
  {
    return ISP_ERR_CONTRAST_HAL;
3419d948:	2329      	movs	r3, #41	@ 0x29
3419d94a:	e000      	b.n	3419d94e <ISP_SVC_ISP_SetContrast+0x166>
  }

  return ISP_OK;
3419d94c:	2300      	movs	r3, #0
}
3419d94e:	4618      	mov	r0, r3
3419d950:	3718      	adds	r7, #24
3419d952:	46bd      	mov	sp, r7
3419d954:	bd80      	pop	{r7, pc}
3419d956:	bf00      	nop
3419d958:	51eb851f 	.word	0x51eb851f

3419d95c <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
3419d95c:	b590      	push	{r4, r7, lr}
3419d95e:	b089      	sub	sp, #36	@ 0x24
3419d960:	af00      	add	r7, sp, #0
3419d962:	6078      	str	r0, [r7, #4]
3419d964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;
3419d966:	2300      	movs	r3, #0
3419d968:	77fb      	strb	r3, [r7, #31]

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d96a:	687b      	ldr	r3, [r7, #4]
3419d96c:	2b00      	cmp	r3, #0
3419d96e:	d034      	beq.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
3419d970:	683b      	ldr	r3, [r7, #0]
3419d972:	2b00      	cmp	r3, #0
3419d974:	d031      	beq.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
3419d976:	683b      	ldr	r3, [r7, #0]
3419d978:	681b      	ldr	r3, [r3, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419d97a:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419d97e:	4293      	cmp	r3, r2
3419d980:	d82b      	bhi.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3419d982:	683b      	ldr	r3, [r7, #0]
3419d984:	685b      	ldr	r3, [r3, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
3419d986:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419d98a:	4293      	cmp	r3, r2
3419d98c:	d825      	bhi.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3419d98e:	683b      	ldr	r3, [r7, #0]
3419d990:	689b      	ldr	r3, [r3, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3419d992:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419d996:	4293      	cmp	r3, r2
3419d998:	d81f      	bhi.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3419d99a:	683b      	ldr	r3, [r7, #0]
3419d99c:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3419d99e:	f640 72fe 	movw	r2, #4094	@ 0xffe
3419d9a2:	4293      	cmp	r3, r2
3419d9a4:	d819      	bhi.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
3419d9a6:	683b      	ldr	r3, [r7, #0]
3419d9a8:	689b      	ldr	r3, [r3, #8]
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3419d9aa:	2b03      	cmp	r3, #3
3419d9ac:	d915      	bls.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3419d9ae:	683b      	ldr	r3, [r7, #0]
3419d9b0:	68db      	ldr	r3, [r3, #12]
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
3419d9b2:	2b03      	cmp	r3, #3
3419d9b4:	d911      	bls.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3419d9b6:	683b      	ldr	r3, [r7, #0]
3419d9b8:	681a      	ldr	r2, [r3, #0]
3419d9ba:	683b      	ldr	r3, [r7, #0]
3419d9bc:	689b      	ldr	r3, [r3, #8]
3419d9be:	441a      	add	r2, r3
3419d9c0:	687b      	ldr	r3, [r7, #4]
3419d9c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3419d9c4:	429a      	cmp	r2, r3
3419d9c6:	d808      	bhi.n	3419d9da <ISP_SVC_ISP_SetStatArea+0x7e>
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
3419d9c8:	683b      	ldr	r3, [r7, #0]
3419d9ca:	685a      	ldr	r2, [r3, #4]
3419d9cc:	683b      	ldr	r3, [r7, #0]
3419d9ce:	68db      	ldr	r3, [r3, #12]
3419d9d0:	441a      	add	r2, r3
3419d9d2:	687b      	ldr	r3, [r7, #4]
3419d9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3419d9d6:	429a      	cmp	r2, r3
3419d9d8:	d901      	bls.n	3419d9de <ISP_SVC_ISP_SetStatArea+0x82>
  {
    return ISP_ERR_STATAREA_EINVAL;
3419d9da:	2332      	movs	r3, #50	@ 0x32
3419d9dc:	e03e      	b.n	3419da5c <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
3419d9de:	683b      	ldr	r3, [r7, #0]
3419d9e0:	681b      	ldr	r3, [r3, #0]
3419d9e2:	4a20      	ldr	r2, [pc, #128]	@ (3419da64 <ISP_SVC_ISP_SetStatArea+0x108>)
3419d9e4:	7812      	ldrb	r2, [r2, #0]
3419d9e6:	fbb3 f3f2 	udiv	r3, r3, r2
3419d9ea:	613b      	str	r3, [r7, #16]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
3419d9ec:	683b      	ldr	r3, [r7, #0]
3419d9ee:	685b      	ldr	r3, [r3, #4]
3419d9f0:	4a1c      	ldr	r2, [pc, #112]	@ (3419da64 <ISP_SVC_ISP_SetStatArea+0x108>)
3419d9f2:	7812      	ldrb	r2, [r2, #0]
3419d9f4:	fbb3 f3f2 	udiv	r3, r3, r2
3419d9f8:	60fb      	str	r3, [r7, #12]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
3419d9fa:	683b      	ldr	r3, [r7, #0]
3419d9fc:	689b      	ldr	r3, [r3, #8]
3419d9fe:	4a19      	ldr	r2, [pc, #100]	@ (3419da64 <ISP_SVC_ISP_SetStatArea+0x108>)
3419da00:	7812      	ldrb	r2, [r2, #0]
3419da02:	fbb3 f3f2 	udiv	r3, r3, r2
3419da06:	61bb      	str	r3, [r7, #24]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
3419da08:	683b      	ldr	r3, [r7, #0]
3419da0a:	68db      	ldr	r3, [r3, #12]
3419da0c:	4a15      	ldr	r2, [pc, #84]	@ (3419da64 <ISP_SVC_ISP_SetStatArea+0x108>)
3419da0e:	7812      	ldrb	r2, [r2, #0]
3419da10:	fbb3 f3f2 	udiv	r3, r3, r2
3419da14:	617b      	str	r3, [r7, #20]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
3419da16:	687b      	ldr	r3, [r7, #4]
3419da18:	681b      	ldr	r3, [r3, #0]
3419da1a:	f107 020c 	add.w	r2, r7, #12
3419da1e:	2101      	movs	r1, #1
3419da20:	4618      	mov	r0, r3
3419da22:	f7e9 fd4b 	bl	341874bc <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
3419da26:	4603      	mov	r3, r0
3419da28:	2b00      	cmp	r3, #0
3419da2a:	d001      	beq.n	3419da30 <ISP_SVC_ISP_SetStatArea+0xd4>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
3419da2c:	2333      	movs	r3, #51	@ 0x33
3419da2e:	e015      	b.n	3419da5c <ISP_SVC_ISP_SetStatArea+0x100>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
3419da30:	687b      	ldr	r3, [r7, #4]
3419da32:	681b      	ldr	r3, [r3, #0]
3419da34:	2101      	movs	r1, #1
3419da36:	4618      	mov	r0, r3
3419da38:	f7e9 fe0e 	bl	34187658 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
3419da3c:	4603      	mov	r3, r0
3419da3e:	77bb      	strb	r3, [r7, #30]
  }

  if (halStatus != HAL_OK)
3419da40:	7fbb      	ldrb	r3, [r7, #30]
3419da42:	2b00      	cmp	r3, #0
3419da44:	d001      	beq.n	3419da4a <ISP_SVC_ISP_SetStatArea+0xee>
  {
    return ISP_ERR_STATAREA_HAL;
3419da46:	2333      	movs	r3, #51	@ 0x33
3419da48:	e008      	b.n	3419da5c <ISP_SVC_ISP_SetStatArea+0x100>
  }

  /* Update internal state */
  hIsp->statArea = *pConfig;
3419da4a:	687b      	ldr	r3, [r7, #4]
3419da4c:	683a      	ldr	r2, [r7, #0]
3419da4e:	f103 0408 	add.w	r4, r3, #8
3419da52:	4613      	mov	r3, r2
3419da54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3419da56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return ret;
3419da5a:	7ffb      	ldrb	r3, [r7, #31]
}
3419da5c:	4618      	mov	r0, r3
3419da5e:	3724      	adds	r7, #36	@ 0x24
3419da60:	46bd      	mov	sp, r7
3419da62:	bd90      	pop	{r4, r7, pc}
3419da64:	341c0134 	.word	0x341c0134

3419da68 <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3419da68:	b580      	push	{r7, lr}
3419da6a:	b084      	sub	sp, #16
3419da6c:	af00      	add	r7, sp, #0
3419da6e:	6078      	str	r0, [r7, #4]
3419da70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
3419da72:	687b      	ldr	r3, [r7, #4]
3419da74:	2b00      	cmp	r3, #0
3419da76:	d006      	beq.n	3419da86 <ISP_SVC_ISP_SetBadPixel+0x1e>
3419da78:	683b      	ldr	r3, [r7, #0]
3419da7a:	2b00      	cmp	r3, #0
3419da7c:	d003      	beq.n	3419da86 <ISP_SVC_ISP_SetBadPixel+0x1e>
3419da7e:	683b      	ldr	r3, [r7, #0]
3419da80:	785b      	ldrb	r3, [r3, #1]
3419da82:	2b07      	cmp	r3, #7
3419da84:	d901      	bls.n	3419da8a <ISP_SVC_ISP_SetBadPixel+0x22>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
3419da86:	233c      	movs	r3, #60	@ 0x3c
3419da88:	e029      	b.n	3419dade <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  if (pConfig->enable == 0)
3419da8a:	683b      	ldr	r3, [r7, #0]
3419da8c:	781b      	ldrb	r3, [r3, #0]
3419da8e:	2b00      	cmp	r3, #0
3419da90:	d108      	bne.n	3419daa4 <ISP_SVC_ISP_SetBadPixel+0x3c>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3419da92:	687b      	ldr	r3, [r7, #4]
3419da94:	681b      	ldr	r3, [r3, #0]
3419da96:	2101      	movs	r1, #1
3419da98:	4618      	mov	r0, r3
3419da9a:	f7e9 f819 	bl	34186ad0 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
3419da9e:	4603      	mov	r3, r0
3419daa0:	73fb      	strb	r3, [r7, #15]
3419daa2:	e016      	b.n	3419dad2 <ISP_SVC_ISP_SetBadPixel+0x6a>
  }
  else
  {
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
3419daa4:	687b      	ldr	r3, [r7, #4]
3419daa6:	6818      	ldr	r0, [r3, #0]
3419daa8:	683b      	ldr	r3, [r7, #0]
3419daaa:	785b      	ldrb	r3, [r3, #1]
3419daac:	461a      	mov	r2, r3
3419daae:	2101      	movs	r1, #1
3419dab0:	f7e8 ff90 	bl	341869d4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
3419dab4:	4603      	mov	r3, r0
3419dab6:	73fb      	strb	r3, [r7, #15]

    if (halStatus != HAL_OK)
3419dab8:	7bfb      	ldrb	r3, [r7, #15]
3419daba:	2b00      	cmp	r3, #0
3419dabc:	d001      	beq.n	3419dac2 <ISP_SVC_ISP_SetBadPixel+0x5a>
    {
      return ISP_ERR_BADPIXEL_HAL;
3419dabe:	233d      	movs	r3, #61	@ 0x3d
3419dac0:	e00d      	b.n	3419dade <ISP_SVC_ISP_SetBadPixel+0x76>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dac2:	687b      	ldr	r3, [r7, #4]
3419dac4:	681b      	ldr	r3, [r3, #0]
3419dac6:	2101      	movs	r1, #1
3419dac8:	4618      	mov	r0, r3
3419daca:	f7e8 ffd3 	bl	34186a74 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
3419dace:	4603      	mov	r3, r0
3419dad0:	73fb      	strb	r3, [r7, #15]
  }

  if (halStatus != HAL_OK)
3419dad2:	7bfb      	ldrb	r3, [r7, #15]
3419dad4:	2b00      	cmp	r3, #0
3419dad6:	d001      	beq.n	3419dadc <ISP_SVC_ISP_SetBadPixel+0x74>
  {
    return ISP_ERR_BADPIXEL_HAL;
3419dad8:	233d      	movs	r3, #61	@ 0x3d
3419dada:	e000      	b.n	3419dade <ISP_SVC_ISP_SetBadPixel+0x76>
  }

  return ISP_OK;
3419dadc:	2300      	movs	r3, #0
}
3419dade:	4618      	mov	r0, r3
3419dae0:	3710      	adds	r7, #16
3419dae2:	46bd      	mov	sp, r7
3419dae4:	bd80      	pop	{r7, pc}

3419dae6 <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3419dae6:	b580      	push	{r7, lr}
3419dae8:	b084      	sub	sp, #16
3419daea:	af00      	add	r7, sp, #0
3419daec:	6078      	str	r0, [r7, #4]
3419daee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419daf0:	687b      	ldr	r3, [r7, #4]
3419daf2:	2b00      	cmp	r3, #0
3419daf4:	d002      	beq.n	3419dafc <ISP_SVC_ISP_GetBadPixel+0x16>
3419daf6:	683b      	ldr	r3, [r7, #0]
3419daf8:	2b00      	cmp	r3, #0
3419dafa:	d101      	bne.n	3419db00 <ISP_SVC_ISP_GetBadPixel+0x1a>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
3419dafc:	233c      	movs	r3, #60	@ 0x3c
3419dafe:	e023      	b.n	3419db48 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3419db00:	687b      	ldr	r3, [r7, #4]
3419db02:	681b      	ldr	r3, [r3, #0]
3419db04:	2101      	movs	r1, #1
3419db06:	4618      	mov	r0, r3
3419db08:	f7e9 f830 	bl	34186b6c <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
3419db0c:	4603      	mov	r3, r0
3419db0e:	b2da      	uxtb	r2, r3
3419db10:	683b      	ldr	r3, [r7, #0]
3419db12:	701a      	strb	r2, [r3, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
3419db14:	687b      	ldr	r3, [r7, #4]
3419db16:	681b      	ldr	r3, [r3, #0]
3419db18:	2101      	movs	r1, #1
3419db1a:	4618      	mov	r0, r3
3419db1c:	f7e9 f806 	bl	34186b2c <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
3419db20:	4603      	mov	r3, r0
3419db22:	b2da      	uxtb	r2, r3
3419db24:	683b      	ldr	r3, [r7, #0]
3419db26:	705a      	strb	r2, [r3, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
3419db28:	687b      	ldr	r3, [r7, #4]
3419db2a:	6818      	ldr	r0, [r3, #0]
3419db2c:	683b      	ldr	r3, [r7, #0]
3419db2e:	3304      	adds	r3, #4
3419db30:	461a      	mov	r2, r3
3419db32:	2101      	movs	r1, #1
3419db34:	f7e9 f856 	bl	34186be4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>
3419db38:	4603      	mov	r3, r0
3419db3a:	73fb      	strb	r3, [r7, #15]

  if (halStatus != HAL_OK)
3419db3c:	7bfb      	ldrb	r3, [r7, #15]
3419db3e:	2b00      	cmp	r3, #0
3419db40:	d001      	beq.n	3419db46 <ISP_SVC_ISP_GetBadPixel+0x60>
  {
    return ISP_ERR_BADPIXEL_HAL;
3419db42:	233d      	movs	r3, #61	@ 0x3d
3419db44:	e000      	b.n	3419db48 <ISP_SVC_ISP_GetBadPixel+0x62>
  }

  return ISP_OK;
3419db46:	2300      	movs	r3, #0
}
3419db48:	4618      	mov	r0, r3
3419db4a:	3710      	adds	r7, #16
3419db4c:	46bd      	mov	sp, r7
3419db4e:	bd80      	pop	{r7, pc}

3419db50 <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
3419db50:	b580      	push	{r7, lr}
3419db52:	b084      	sub	sp, #16
3419db54:	af00      	add	r7, sp, #0
3419db56:	6078      	str	r0, [r7, #4]
3419db58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419db5a:	687b      	ldr	r3, [r7, #4]
3419db5c:	2b00      	cmp	r3, #0
3419db5e:	d002      	beq.n	3419db66 <ISP_SVC_ISP_SetBlackLevel+0x16>
3419db60:	683b      	ldr	r3, [r7, #0]
3419db62:	2b00      	cmp	r3, #0
3419db64:	d101      	bne.n	3419db6a <ISP_SVC_ISP_SetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
3419db66:	2346      	movs	r3, #70	@ 0x46
3419db68:	e030      	b.n	3419dbcc <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  if (pConfig->enable == 0)
3419db6a:	683b      	ldr	r3, [r7, #0]
3419db6c:	781b      	ldrb	r3, [r3, #0]
3419db6e:	2b00      	cmp	r3, #0
3419db70:	d108      	bne.n	3419db84 <ISP_SVC_ISP_SetBlackLevel+0x34>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3419db72:	687b      	ldr	r3, [r7, #4]
3419db74:	681b      	ldr	r3, [r3, #0]
3419db76:	2101      	movs	r1, #1
3419db78:	4618      	mov	r0, r3
3419db7a:	f7e9 fb3d 	bl	341871f8 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
3419db7e:	4603      	mov	r3, r0
3419db80:	73fb      	strb	r3, [r7, #15]
3419db82:	e01d      	b.n	3419dbc0 <ISP_SVC_ISP_SetBlackLevel+0x70>
  }
  else
  {
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
3419db84:	683b      	ldr	r3, [r7, #0]
3419db86:	785b      	ldrb	r3, [r3, #1]
3419db88:	733b      	strb	r3, [r7, #12]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
3419db8a:	683b      	ldr	r3, [r7, #0]
3419db8c:	789b      	ldrb	r3, [r3, #2]
3419db8e:	737b      	strb	r3, [r7, #13]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
3419db90:	683b      	ldr	r3, [r7, #0]
3419db92:	78db      	ldrb	r3, [r3, #3]
3419db94:	73bb      	strb	r3, [r7, #14]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3419db96:	687b      	ldr	r3, [r7, #4]
3419db98:	681b      	ldr	r3, [r3, #0]
3419db9a:	f107 020c 	add.w	r2, r7, #12
3419db9e:	2101      	movs	r1, #1
3419dba0:	4618      	mov	r0, r3
3419dba2:	f7e9 fabd 	bl	34187120 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
3419dba6:	4603      	mov	r3, r0
3419dba8:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3419dbaa:	7bfb      	ldrb	r3, [r7, #15]
3419dbac:	2b00      	cmp	r3, #0
3419dbae:	d107      	bne.n	3419dbc0 <ISP_SVC_ISP_SetBlackLevel+0x70>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dbb0:	687b      	ldr	r3, [r7, #4]
3419dbb2:	681b      	ldr	r3, [r3, #0]
3419dbb4:	2101      	movs	r1, #1
3419dbb6:	4618      	mov	r0, r3
3419dbb8:	f7e9 faf0 	bl	3418719c <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
3419dbbc:	4603      	mov	r3, r0
3419dbbe:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3419dbc0:	7bfb      	ldrb	r3, [r7, #15]
3419dbc2:	2b00      	cmp	r3, #0
3419dbc4:	d001      	beq.n	3419dbca <ISP_SVC_ISP_SetBlackLevel+0x7a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
3419dbc6:	2347      	movs	r3, #71	@ 0x47
3419dbc8:	e000      	b.n	3419dbcc <ISP_SVC_ISP_SetBlackLevel+0x7c>
  }

  return ISP_OK;
3419dbca:	2300      	movs	r3, #0
}
3419dbcc:	4618      	mov	r0, r3
3419dbce:	3710      	adds	r7, #16
3419dbd0:	46bd      	mov	sp, r7
3419dbd2:	bd80      	pop	{r7, pc}

3419dbd4 <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
3419dbd4:	b580      	push	{r7, lr}
3419dbd6:	b084      	sub	sp, #16
3419dbd8:	af00      	add	r7, sp, #0
3419dbda:	6078      	str	r0, [r7, #4]
3419dbdc:	6039      	str	r1, [r7, #0]
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419dbde:	687b      	ldr	r3, [r7, #4]
3419dbe0:	2b00      	cmp	r3, #0
3419dbe2:	d002      	beq.n	3419dbea <ISP_SVC_ISP_GetBlackLevel+0x16>
3419dbe4:	683b      	ldr	r3, [r7, #0]
3419dbe6:	2b00      	cmp	r3, #0
3419dbe8:	d101      	bne.n	3419dbee <ISP_SVC_ISP_GetBlackLevel+0x1a>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
3419dbea:	2346      	movs	r3, #70	@ 0x46
3419dbec:	e01b      	b.n	3419dc26 <ISP_SVC_ISP_GetBlackLevel+0x52>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dbee:	687b      	ldr	r3, [r7, #4]
3419dbf0:	681b      	ldr	r3, [r3, #0]
3419dbf2:	2101      	movs	r1, #1
3419dbf4:	4618      	mov	r0, r3
3419dbf6:	f7e9 fb5f 	bl	341872b8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
3419dbfa:	4603      	mov	r3, r0
3419dbfc:	b2da      	uxtb	r2, r3
3419dbfe:	683b      	ldr	r3, [r7, #0]
3419dc00:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3419dc02:	687b      	ldr	r3, [r7, #4]
3419dc04:	681b      	ldr	r3, [r3, #0]
3419dc06:	f107 020c 	add.w	r2, r7, #12
3419dc0a:	2101      	movs	r1, #1
3419dc0c:	4618      	mov	r0, r3
3419dc0e:	f7e9 fb21 	bl	34187254 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
3419dc12:	7b3a      	ldrb	r2, [r7, #12]
3419dc14:	683b      	ldr	r3, [r7, #0]
3419dc16:	705a      	strb	r2, [r3, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
3419dc18:	7b7a      	ldrb	r2, [r7, #13]
3419dc1a:	683b      	ldr	r3, [r7, #0]
3419dc1c:	709a      	strb	r2, [r3, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
3419dc1e:	7bba      	ldrb	r2, [r7, #14]
3419dc20:	683b      	ldr	r3, [r7, #0]
3419dc22:	70da      	strb	r2, [r3, #3]

  return ISP_OK;
3419dc24:	2300      	movs	r3, #0
}
3419dc26:	4618      	mov	r0, r3
3419dc28:	3710      	adds	r7, #16
3419dc2a:	46bd      	mov	sp, r7
3419dc2c:	bd80      	pop	{r7, pc}
	...

3419dc30 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
3419dc30:	b580      	push	{r7, lr}
3419dc32:	b084      	sub	sp, #16
3419dc34:	af00      	add	r7, sp, #0
3419dc36:	6078      	str	r0, [r7, #4]
3419dc38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3419dc3a:	687b      	ldr	r3, [r7, #4]
3419dc3c:	2b00      	cmp	r3, #0
3419dc3e:	d011      	beq.n	3419dc64 <ISP_SVC_ISP_SetGain+0x34>
3419dc40:	683b      	ldr	r3, [r7, #0]
3419dc42:	2b00      	cmp	r3, #0
3419dc44:	d00e      	beq.n	3419dc64 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3419dc46:	683b      	ldr	r3, [r7, #0]
3419dc48:	685b      	ldr	r3, [r3, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3419dc4a:	4a2d      	ldr	r2, [pc, #180]	@ (3419dd00 <ISP_SVC_ISP_SetGain+0xd0>)
3419dc4c:	4293      	cmp	r3, r2
3419dc4e:	d809      	bhi.n	3419dc64 <ISP_SVC_ISP_SetGain+0x34>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3419dc50:	683b      	ldr	r3, [r7, #0]
3419dc52:	689b      	ldr	r3, [r3, #8]
3419dc54:	4a2a      	ldr	r2, [pc, #168]	@ (3419dd00 <ISP_SVC_ISP_SetGain+0xd0>)
3419dc56:	4293      	cmp	r3, r2
3419dc58:	d804      	bhi.n	3419dc64 <ISP_SVC_ISP_SetGain+0x34>
3419dc5a:	683b      	ldr	r3, [r7, #0]
3419dc5c:	68db      	ldr	r3, [r3, #12]
3419dc5e:	4a28      	ldr	r2, [pc, #160]	@ (3419dd00 <ISP_SVC_ISP_SetGain+0xd0>)
3419dc60:	4293      	cmp	r3, r2
3419dc62:	d901      	bls.n	3419dc68 <ISP_SVC_ISP_SetGain+0x38>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
3419dc64:	2350      	movs	r3, #80	@ 0x50
3419dc66:	e047      	b.n	3419dcf8 <ISP_SVC_ISP_SetGain+0xc8>
  }

  if (pConfig->enable == 0)
3419dc68:	683b      	ldr	r3, [r7, #0]
3419dc6a:	781b      	ldrb	r3, [r3, #0]
3419dc6c:	2b00      	cmp	r3, #0
3419dc6e:	d108      	bne.n	3419dc82 <ISP_SVC_ISP_SetGain+0x52>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dc70:	687b      	ldr	r3, [r7, #4]
3419dc72:	681b      	ldr	r3, [r3, #0]
3419dc74:	2101      	movs	r1, #1
3419dc76:	4618      	mov	r0, r3
3419dc78:	f7e9 fdb6 	bl	341877e8 <HAL_DCMIPP_PIPE_DisableISPExposure>
3419dc7c:	4603      	mov	r3, r0
3419dc7e:	73fb      	strb	r3, [r7, #15]
3419dc80:	e034      	b.n	3419dcec <ISP_SVC_ISP_SetGain+0xbc>
  }
  else
  {
    To_Shift_Multiplier(pConfig->ispGainR, &exposureConfig.ShiftRed, &exposureConfig.MultiplierRed);
3419dc82:	683b      	ldr	r3, [r7, #0]
3419dc84:	6858      	ldr	r0, [r3, #4]
3419dc86:	f107 0308 	add.w	r3, r7, #8
3419dc8a:	1c5a      	adds	r2, r3, #1
3419dc8c:	f107 0308 	add.w	r3, r7, #8
3419dc90:	4619      	mov	r1, r3
3419dc92:	f7ff f989 	bl	3419cfa8 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainG, &exposureConfig.ShiftGreen, &exposureConfig.MultiplierGreen);
3419dc96:	683b      	ldr	r3, [r7, #0]
3419dc98:	6898      	ldr	r0, [r3, #8]
3419dc9a:	f107 0308 	add.w	r3, r7, #8
3419dc9e:	1cda      	adds	r2, r3, #3
3419dca0:	f107 0308 	add.w	r3, r7, #8
3419dca4:	3302      	adds	r3, #2
3419dca6:	4619      	mov	r1, r3
3419dca8:	f7ff f97e 	bl	3419cfa8 <To_Shift_Multiplier>
    To_Shift_Multiplier(pConfig->ispGainB, &exposureConfig.ShiftBlue, &exposureConfig.MultiplierBlue);
3419dcac:	683b      	ldr	r3, [r7, #0]
3419dcae:	68d8      	ldr	r0, [r3, #12]
3419dcb0:	f107 0308 	add.w	r3, r7, #8
3419dcb4:	1d5a      	adds	r2, r3, #5
3419dcb6:	f107 0308 	add.w	r3, r7, #8
3419dcba:	3304      	adds	r3, #4
3419dcbc:	4619      	mov	r1, r3
3419dcbe:	f7ff f973 	bl	3419cfa8 <To_Shift_Multiplier>
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3419dcc2:	687b      	ldr	r3, [r7, #4]
3419dcc4:	681b      	ldr	r3, [r3, #0]
3419dcc6:	f107 0208 	add.w	r2, r7, #8
3419dcca:	2101      	movs	r1, #1
3419dccc:	4618      	mov	r0, r3
3419dcce:	f7e9 fcf1 	bl	341876b4 <HAL_DCMIPP_PIPE_SetISPExposureConfig>
3419dcd2:	4603      	mov	r3, r0
3419dcd4:	73fb      	strb	r3, [r7, #15]

    if (halStatus == HAL_OK)
3419dcd6:	7bfb      	ldrb	r3, [r7, #15]
3419dcd8:	2b00      	cmp	r3, #0
3419dcda:	d107      	bne.n	3419dcec <ISP_SVC_ISP_SetGain+0xbc>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dcdc:	687b      	ldr	r3, [r7, #4]
3419dcde:	681b      	ldr	r3, [r3, #0]
3419dce0:	2101      	movs	r1, #1
3419dce2:	4618      	mov	r0, r3
3419dce4:	f7e9 fd52 	bl	3418778c <HAL_DCMIPP_PIPE_EnableISPExposure>
3419dce8:	4603      	mov	r3, r0
3419dcea:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (halStatus != HAL_OK)
3419dcec:	7bfb      	ldrb	r3, [r7, #15]
3419dcee:	2b00      	cmp	r3, #0
3419dcf0:	d001      	beq.n	3419dcf6 <ISP_SVC_ISP_SetGain+0xc6>
  {
    return ISP_ERR_ISPGAIN_HAL;
3419dcf2:	2351      	movs	r3, #81	@ 0x51
3419dcf4:	e000      	b.n	3419dcf8 <ISP_SVC_ISP_SetGain+0xc8>
  }

  return ISP_OK;
3419dcf6:	2300      	movs	r3, #0
}
3419dcf8:	4618      	mov	r0, r3
3419dcfa:	3710      	adds	r7, #16
3419dcfc:	46bd      	mov	sp, r7
3419dcfe:	bd80      	pop	{r7, pc}
3419dd00:	5f5e1000 	.word	0x5f5e1000

3419dd04 <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
3419dd04:	b580      	push	{r7, lr}
3419dd06:	b084      	sub	sp, #16
3419dd08:	af00      	add	r7, sp, #0
3419dd0a:	6078      	str	r0, [r7, #4]
3419dd0c:	6039      	str	r1, [r7, #0]
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419dd0e:	687b      	ldr	r3, [r7, #4]
3419dd10:	2b00      	cmp	r3, #0
3419dd12:	d002      	beq.n	3419dd1a <ISP_SVC_ISP_GetGain+0x16>
3419dd14:	683b      	ldr	r3, [r7, #0]
3419dd16:	2b00      	cmp	r3, #0
3419dd18:	d101      	bne.n	3419dd1e <ISP_SVC_ISP_GetGain+0x1a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
3419dd1a:	2350      	movs	r3, #80	@ 0x50
3419dd1c:	e02d      	b.n	3419dd7a <ISP_SVC_ISP_GetGain+0x76>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dd1e:	687b      	ldr	r3, [r7, #4]
3419dd20:	681b      	ldr	r3, [r3, #0]
3419dd22:	2101      	movs	r1, #1
3419dd24:	4618      	mov	r0, r3
3419dd26:	f7ea f8a9 	bl	34187e7c <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
3419dd2a:	4603      	mov	r3, r0
3419dd2c:	b2da      	uxtb	r2, r3
3419dd2e:	683b      	ldr	r3, [r7, #0]
3419dd30:	701a      	strb	r2, [r3, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3419dd32:	687b      	ldr	r3, [r7, #4]
3419dd34:	681b      	ldr	r3, [r3, #0]
3419dd36:	f107 0208 	add.w	r2, r7, #8
3419dd3a:	2101      	movs	r1, #1
3419dd3c:	4618      	mov	r0, r3
3419dd3e:	f7e9 feeb 	bl	34187b18 <HAL_DCMIPP_PIPE_GetISPExposureConfig>

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
3419dd42:	7a3b      	ldrb	r3, [r7, #8]
3419dd44:	7a7a      	ldrb	r2, [r7, #9]
3419dd46:	4611      	mov	r1, r2
3419dd48:	4618      	mov	r0, r3
3419dd4a:	f7ff f96d 	bl	3419d028 <From_Shift_Multiplier>
3419dd4e:	4602      	mov	r2, r0
3419dd50:	683b      	ldr	r3, [r7, #0]
3419dd52:	605a      	str	r2, [r3, #4]
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
3419dd54:	7abb      	ldrb	r3, [r7, #10]
3419dd56:	7afa      	ldrb	r2, [r7, #11]
3419dd58:	4611      	mov	r1, r2
3419dd5a:	4618      	mov	r0, r3
3419dd5c:	f7ff f964 	bl	3419d028 <From_Shift_Multiplier>
3419dd60:	4602      	mov	r2, r0
3419dd62:	683b      	ldr	r3, [r7, #0]
3419dd64:	609a      	str	r2, [r3, #8]
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);
3419dd66:	7b3b      	ldrb	r3, [r7, #12]
3419dd68:	7b7a      	ldrb	r2, [r7, #13]
3419dd6a:	4611      	mov	r1, r2
3419dd6c:	4618      	mov	r0, r3
3419dd6e:	f7ff f95b 	bl	3419d028 <From_Shift_Multiplier>
3419dd72:	4602      	mov	r2, r0
3419dd74:	683b      	ldr	r3, [r7, #0]
3419dd76:	60da      	str	r2, [r3, #12]

  return ISP_OK;
3419dd78:	2300      	movs	r3, #0
}
3419dd7a:	4618      	mov	r0, r3
3419dd7c:	3710      	adds	r7, #16
3419dd7e:	46bd      	mov	sp, r7
3419dd80:	bd80      	pop	{r7, pc}
	...

3419dd84 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
3419dd84:	b580      	push	{r7, lr}
3419dd86:	b08c      	sub	sp, #48	@ 0x30
3419dd88:	af00      	add	r7, sp, #0
3419dd8a:	6078      	str	r0, [r7, #4]
3419dd8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
3419dd8e:	f107 0308 	add.w	r3, r7, #8
3419dd92:	221a      	movs	r2, #26
3419dd94:	2100      	movs	r1, #0
3419dd96:	4618      	mov	r0, r3
3419dd98:	f005 fa84 	bl	341a32a4 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419dd9c:	687b      	ldr	r3, [r7, #4]
3419dd9e:	2b00      	cmp	r3, #0
3419dda0:	d002      	beq.n	3419dda8 <ISP_SVC_ISP_SetColorConv+0x24>
3419dda2:	683b      	ldr	r3, [r7, #0]
3419dda4:	2b00      	cmp	r3, #0
3419dda6:	d101      	bne.n	3419ddac <ISP_SVC_ISP_SetColorConv+0x28>
  {
    return ISP_ERR_COLORCONV_EINVAL;
3419dda8:	235a      	movs	r3, #90	@ 0x5a
3419ddaa:	e099      	b.n	3419dee0 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  for (i = 0; i < 3; i++)
3419ddac:	2300      	movs	r3, #0
3419ddae:	62bb      	str	r3, [r7, #40]	@ 0x28
3419ddb0:	e027      	b.n	3419de02 <ISP_SVC_ISP_SetColorConv+0x7e>
  {
    for (j = 0; j < 3; j++)
3419ddb2:	2300      	movs	r3, #0
3419ddb4:	627b      	str	r3, [r7, #36]	@ 0x24
3419ddb6:	e01e      	b.n	3419ddf6 <ISP_SVC_ISP_SetColorConv+0x72>
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
3419ddb8:	6839      	ldr	r1, [r7, #0]
3419ddba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3419ddbc:	4613      	mov	r3, r2
3419ddbe:	005b      	lsls	r3, r3, #1
3419ddc0:	4413      	add	r3, r2
3419ddc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3419ddc4:	4413      	add	r3, r2
3419ddc6:	009b      	lsls	r3, r3, #2
3419ddc8:	440b      	add	r3, r1
3419ddca:	685b      	ldr	r3, [r3, #4]
3419ddcc:	4a46      	ldr	r2, [pc, #280]	@ (3419dee8 <ISP_SVC_ISP_SetColorConv+0x164>)
3419ddce:	4293      	cmp	r3, r2
3419ddd0:	dc0c      	bgt.n	3419ddec <ISP_SVC_ISP_SetColorConv+0x68>
3419ddd2:	6839      	ldr	r1, [r7, #0]
3419ddd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
3419ddd6:	4613      	mov	r3, r2
3419ddd8:	005b      	lsls	r3, r3, #1
3419ddda:	4413      	add	r3, r2
3419dddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3419ddde:	4413      	add	r3, r2
3419dde0:	009b      	lsls	r3, r3, #2
3419dde2:	440b      	add	r3, r1
3419dde4:	685b      	ldr	r3, [r3, #4]
3419dde6:	4a41      	ldr	r2, [pc, #260]	@ (3419deec <ISP_SVC_ISP_SetColorConv+0x168>)
3419dde8:	4293      	cmp	r3, r2
3419ddea:	da01      	bge.n	3419ddf0 <ISP_SVC_ISP_SetColorConv+0x6c>
      {
        return ISP_ERR_COLORCONV_EINVAL;
3419ddec:	235a      	movs	r3, #90	@ 0x5a
3419ddee:	e077      	b.n	3419dee0 <ISP_SVC_ISP_SetColorConv+0x15c>
    for (j = 0; j < 3; j++)
3419ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419ddf2:	3301      	adds	r3, #1
3419ddf4:	627b      	str	r3, [r7, #36]	@ 0x24
3419ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419ddf8:	2b02      	cmp	r3, #2
3419ddfa:	d9dd      	bls.n	3419ddb8 <ISP_SVC_ISP_SetColorConv+0x34>
  for (i = 0; i < 3; i++)
3419ddfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419ddfe:	3301      	adds	r3, #1
3419de00:	62bb      	str	r3, [r7, #40]	@ 0x28
3419de02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419de04:	2b02      	cmp	r3, #2
3419de06:	d9d4      	bls.n	3419ddb2 <ISP_SVC_ISP_SetColorConv+0x2e>
      }
    }
  }

  if (pConfig->enable == 0)
3419de08:	683b      	ldr	r3, [r7, #0]
3419de0a:	781b      	ldrb	r3, [r3, #0]
3419de0c:	2b00      	cmp	r3, #0
3419de0e:	d109      	bne.n	3419de24 <ISP_SVC_ISP_SetColorConv+0xa0>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3419de10:	687b      	ldr	r3, [r7, #4]
3419de12:	681b      	ldr	r3, [r3, #0]
3419de14:	2101      	movs	r1, #1
3419de16:	4618      	mov	r0, r3
3419de18:	f7e9 f954 	bl	341870c4 <HAL_DCMIPP_PIPE_DisableISPColorConversion>
3419de1c:	4603      	mov	r3, r0
3419de1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3419de22:	e056      	b.n	3419ded2 <ISP_SVC_ISP_SetColorConv+0x14e>
  }
  else
  {
    colorConvConfig.RR = To_CConv_Reg(pConfig->coeff[0][0]);
3419de24:	683b      	ldr	r3, [r7, #0]
3419de26:	685b      	ldr	r3, [r3, #4]
3419de28:	4618      	mov	r0, r3
3419de2a:	f7ff f93b 	bl	3419d0a4 <To_CConv_Reg>
3419de2e:	4603      	mov	r3, r0
3419de30:	817b      	strh	r3, [r7, #10]
    colorConvConfig.RG = To_CConv_Reg(pConfig->coeff[0][1]);
3419de32:	683b      	ldr	r3, [r7, #0]
3419de34:	689b      	ldr	r3, [r3, #8]
3419de36:	4618      	mov	r0, r3
3419de38:	f7ff f934 	bl	3419d0a4 <To_CConv_Reg>
3419de3c:	4603      	mov	r3, r0
3419de3e:	81bb      	strh	r3, [r7, #12]
    colorConvConfig.RB = To_CConv_Reg(pConfig->coeff[0][2]);
3419de40:	683b      	ldr	r3, [r7, #0]
3419de42:	68db      	ldr	r3, [r3, #12]
3419de44:	4618      	mov	r0, r3
3419de46:	f7ff f92d 	bl	3419d0a4 <To_CConv_Reg>
3419de4a:	4603      	mov	r3, r0
3419de4c:	81fb      	strh	r3, [r7, #14]
    colorConvConfig.GR = To_CConv_Reg(pConfig->coeff[1][0]);
3419de4e:	683b      	ldr	r3, [r7, #0]
3419de50:	691b      	ldr	r3, [r3, #16]
3419de52:	4618      	mov	r0, r3
3419de54:	f7ff f926 	bl	3419d0a4 <To_CConv_Reg>
3419de58:	4603      	mov	r3, r0
3419de5a:	827b      	strh	r3, [r7, #18]
    colorConvConfig.GG = To_CConv_Reg(pConfig->coeff[1][1]);
3419de5c:	683b      	ldr	r3, [r7, #0]
3419de5e:	695b      	ldr	r3, [r3, #20]
3419de60:	4618      	mov	r0, r3
3419de62:	f7ff f91f 	bl	3419d0a4 <To_CConv_Reg>
3419de66:	4603      	mov	r3, r0
3419de68:	82bb      	strh	r3, [r7, #20]
    colorConvConfig.GB = To_CConv_Reg(pConfig->coeff[1][2]);
3419de6a:	683b      	ldr	r3, [r7, #0]
3419de6c:	699b      	ldr	r3, [r3, #24]
3419de6e:	4618      	mov	r0, r3
3419de70:	f7ff f918 	bl	3419d0a4 <To_CConv_Reg>
3419de74:	4603      	mov	r3, r0
3419de76:	82fb      	strh	r3, [r7, #22]
    colorConvConfig.BR = To_CConv_Reg(pConfig->coeff[2][0]);
3419de78:	683b      	ldr	r3, [r7, #0]
3419de7a:	69db      	ldr	r3, [r3, #28]
3419de7c:	4618      	mov	r0, r3
3419de7e:	f7ff f911 	bl	3419d0a4 <To_CConv_Reg>
3419de82:	4603      	mov	r3, r0
3419de84:	837b      	strh	r3, [r7, #26]
    colorConvConfig.BG = To_CConv_Reg(pConfig->coeff[2][1]);
3419de86:	683b      	ldr	r3, [r7, #0]
3419de88:	6a1b      	ldr	r3, [r3, #32]
3419de8a:	4618      	mov	r0, r3
3419de8c:	f7ff f90a 	bl	3419d0a4 <To_CConv_Reg>
3419de90:	4603      	mov	r3, r0
3419de92:	83bb      	strh	r3, [r7, #28]
    colorConvConfig.BB = To_CConv_Reg(pConfig->coeff[2][2]);
3419de94:	683b      	ldr	r3, [r7, #0]
3419de96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3419de98:	4618      	mov	r0, r3
3419de9a:	f7ff f903 	bl	3419d0a4 <To_CConv_Reg>
3419de9e:	4603      	mov	r3, r0
3419dea0:	83fb      	strh	r3, [r7, #30]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3419dea2:	687b      	ldr	r3, [r7, #4]
3419dea4:	681b      	ldr	r3, [r3, #0]
3419dea6:	f107 0208 	add.w	r2, r7, #8
3419deaa:	2101      	movs	r1, #1
3419deac:	4618      	mov	r0, r3
3419deae:	f7e8 fecb 	bl	34186c48 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
3419deb2:	4603      	mov	r3, r0
3419deb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (halStatus == HAL_OK)
3419deb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
3419debc:	2b00      	cmp	r3, #0
3419debe:	d108      	bne.n	3419ded2 <ISP_SVC_ISP_SetColorConv+0x14e>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3419dec0:	687b      	ldr	r3, [r7, #4]
3419dec2:	681b      	ldr	r3, [r3, #0]
3419dec4:	2101      	movs	r1, #1
3419dec6:	4618      	mov	r0, r3
3419dec8:	f7e9 f8ce 	bl	34187068 <HAL_DCMIPP_PIPE_EnableISPColorConversion>
3419decc:	4603      	mov	r3, r0
3419dece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  if (halStatus != HAL_OK)
3419ded2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
3419ded6:	2b00      	cmp	r3, #0
3419ded8:	d001      	beq.n	3419dede <ISP_SVC_ISP_SetColorConv+0x15a>
  {
    return ISP_ERR_COLORCONV_HAL;
3419deda:	235b      	movs	r3, #91	@ 0x5b
3419dedc:	e000      	b.n	3419dee0 <ISP_SVC_ISP_SetColorConv+0x15c>
  }

  return ISP_OK;
3419dede:	2300      	movs	r3, #0
}
3419dee0:	4618      	mov	r0, r3
3419dee2:	3730      	adds	r7, #48	@ 0x30
3419dee4:	46bd      	mov	sp, r7
3419dee6:	bd80      	pop	{r7, pc}
3419dee8:	17c841c0 	.word	0x17c841c0
3419deec:	e837be40 	.word	0xe837be40

3419def0 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
3419def0:	b580      	push	{r7, lr}
3419def2:	b08a      	sub	sp, #40	@ 0x28
3419def4:	af00      	add	r7, sp, #0
3419def6:	6078      	str	r0, [r7, #4]
3419def8:	6039      	str	r1, [r7, #0]
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419defa:	687b      	ldr	r3, [r7, #4]
3419defc:	2b00      	cmp	r3, #0
3419defe:	d002      	beq.n	3419df06 <ISP_SVC_ISP_GetColorConv+0x16>
3419df00:	683b      	ldr	r3, [r7, #0]
3419df02:	2b00      	cmp	r3, #0
3419df04:	d101      	bne.n	3419df0a <ISP_SVC_ISP_GetColorConv+0x1a>
  {
    return ISP_ERR_COLORCONV_EINVAL;
3419df06:	235a      	movs	r3, #90	@ 0x5a
3419df08:	e05a      	b.n	3419dfc0 <ISP_SVC_ISP_GetColorConv+0xd0>
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3419df0a:	687b      	ldr	r3, [r7, #4]
3419df0c:	681b      	ldr	r3, [r3, #0]
3419df0e:	2101      	movs	r1, #1
3419df10:	4618      	mov	r0, r3
3419df12:	f7e9 ffef 	bl	34187ef4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
3419df16:	4603      	mov	r3, r0
3419df18:	b2da      	uxtb	r2, r3
3419df1a:	683b      	ldr	r3, [r7, #0]
3419df1c:	701a      	strb	r2, [r3, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3419df1e:	687b      	ldr	r3, [r7, #4]
3419df20:	681b      	ldr	r3, [r3, #0]
3419df22:	f107 020c 	add.w	r2, r7, #12
3419df26:	2101      	movs	r1, #1
3419df28:	4618      	mov	r0, r3
3419df2a:	f7e9 fe43 	bl	34187bb4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>

  pConfig->coeff[0][0] = From_CConv_Reg(colorConvConfig.RR);
3419df2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3419df32:	4618      	mov	r0, r3
3419df34:	f7ff f8d4 	bl	3419d0e0 <From_CConv_Reg>
3419df38:	4602      	mov	r2, r0
3419df3a:	683b      	ldr	r3, [r7, #0]
3419df3c:	605a      	str	r2, [r3, #4]
  pConfig->coeff[0][1] = From_CConv_Reg(colorConvConfig.RG);
3419df3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
3419df42:	4618      	mov	r0, r3
3419df44:	f7ff f8cc 	bl	3419d0e0 <From_CConv_Reg>
3419df48:	4602      	mov	r2, r0
3419df4a:	683b      	ldr	r3, [r7, #0]
3419df4c:	609a      	str	r2, [r3, #8]
  pConfig->coeff[0][2] = From_CConv_Reg(colorConvConfig.RB);
3419df4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
3419df52:	4618      	mov	r0, r3
3419df54:	f7ff f8c4 	bl	3419d0e0 <From_CConv_Reg>
3419df58:	4602      	mov	r2, r0
3419df5a:	683b      	ldr	r3, [r7, #0]
3419df5c:	60da      	str	r2, [r3, #12]
  pConfig->coeff[1][0] = From_CConv_Reg(colorConvConfig.GR);
3419df5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
3419df62:	4618      	mov	r0, r3
3419df64:	f7ff f8bc 	bl	3419d0e0 <From_CConv_Reg>
3419df68:	4602      	mov	r2, r0
3419df6a:	683b      	ldr	r3, [r7, #0]
3419df6c:	611a      	str	r2, [r3, #16]
  pConfig->coeff[1][1] = From_CConv_Reg(colorConvConfig.GG);
3419df6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
3419df72:	4618      	mov	r0, r3
3419df74:	f7ff f8b4 	bl	3419d0e0 <From_CConv_Reg>
3419df78:	4602      	mov	r2, r0
3419df7a:	683b      	ldr	r3, [r7, #0]
3419df7c:	615a      	str	r2, [r3, #20]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
3419df7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
3419df82:	4618      	mov	r0, r3
3419df84:	f7ff f8ac 	bl	3419d0e0 <From_CConv_Reg>
3419df88:	4602      	mov	r2, r0
3419df8a:	683b      	ldr	r3, [r7, #0]
3419df8c:	619a      	str	r2, [r3, #24]
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
3419df8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
3419df92:	4618      	mov	r0, r3
3419df94:	f7ff f8a4 	bl	3419d0e0 <From_CConv_Reg>
3419df98:	4602      	mov	r2, r0
3419df9a:	683b      	ldr	r3, [r7, #0]
3419df9c:	61da      	str	r2, [r3, #28]
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
3419df9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
3419dfa2:	4618      	mov	r0, r3
3419dfa4:	f7ff f89c 	bl	3419d0e0 <From_CConv_Reg>
3419dfa8:	4602      	mov	r2, r0
3419dfaa:	683b      	ldr	r3, [r7, #0]
3419dfac:	621a      	str	r2, [r3, #32]
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);
3419dfae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
3419dfb2:	4618      	mov	r0, r3
3419dfb4:	f7ff f894 	bl	3419d0e0 <From_CConv_Reg>
3419dfb8:	4602      	mov	r2, r0
3419dfba:	683b      	ldr	r3, [r7, #0]
3419dfbc:	625a      	str	r2, [r3, #36]	@ 0x24

  return ISP_OK;
3419dfbe:	2300      	movs	r3, #0
}
3419dfc0:	4618      	mov	r0, r3
3419dfc2:	3728      	adds	r7, #40	@ 0x28
3419dfc4:	46bd      	mov	sp, r7
3419dfc6:	bd80      	pop	{r7, pc}

3419dfc8 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
3419dfc8:	b580      	push	{r7, lr}
3419dfca:	b082      	sub	sp, #8
3419dfcc:	af00      	add	r7, sp, #0
3419dfce:	6078      	str	r0, [r7, #4]
3419dfd0:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419dfd2:	687b      	ldr	r3, [r7, #4]
3419dfd4:	2b00      	cmp	r3, #0
3419dfd6:	d002      	beq.n	3419dfde <ISP_SVC_Sensor_GetInfo+0x16>
3419dfd8:	683b      	ldr	r3, [r7, #0]
3419dfda:	2b00      	cmp	r3, #0
3419dfdc:	d101      	bne.n	3419dfe2 <ISP_SVC_Sensor_GetInfo+0x1a>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
3419dfde:	236e      	movs	r3, #110	@ 0x6e
3419dfe0:	e010      	b.n	3419e004 <ISP_SVC_Sensor_GetInfo+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
3419dfe2:	687b      	ldr	r3, [r7, #4]
3419dfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419dfe6:	2b00      	cmp	r3, #0
3419dfe8:	d00b      	beq.n	3419e002 <ISP_SVC_Sensor_GetInfo+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
3419dfea:	687b      	ldr	r3, [r7, #4]
3419dfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3419dfee:	687a      	ldr	r2, [r7, #4]
3419dff0:	6852      	ldr	r2, [r2, #4]
3419dff2:	6839      	ldr	r1, [r7, #0]
3419dff4:	4610      	mov	r0, r2
3419dff6:	4798      	blx	r3
3419dff8:	4603      	mov	r3, r0
3419dffa:	2b00      	cmp	r3, #0
3419dffc:	d001      	beq.n	3419e002 <ISP_SVC_Sensor_GetInfo+0x3a>
    {
      return ISP_ERR_SENSORINFO;
3419dffe:	236f      	movs	r3, #111	@ 0x6f
3419e000:	e000      	b.n	3419e004 <ISP_SVC_Sensor_GetInfo+0x3c>
    }
  }

  return ISP_OK;
3419e002:	2300      	movs	r3, #0
}
3419e004:	4618      	mov	r0, r3
3419e006:	3708      	adds	r7, #8
3419e008:	46bd      	mov	sp, r7
3419e00a:	bd80      	pop	{r7, pc}

3419e00c <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
3419e00c:	b580      	push	{r7, lr}
3419e00e:	b082      	sub	sp, #8
3419e010:	af00      	add	r7, sp, #0
3419e012:	6078      	str	r0, [r7, #4]
3419e014:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419e016:	687b      	ldr	r3, [r7, #4]
3419e018:	2b00      	cmp	r3, #0
3419e01a:	d002      	beq.n	3419e022 <ISP_SVC_Sensor_SetGain+0x16>
3419e01c:	683b      	ldr	r3, [r7, #0]
3419e01e:	2b00      	cmp	r3, #0
3419e020:	d101      	bne.n	3419e026 <ISP_SVC_Sensor_SetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
3419e022:	2378      	movs	r3, #120	@ 0x78
3419e024:	e015      	b.n	3419e052 <ISP_SVC_Sensor_SetGain+0x46>
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
3419e026:	687b      	ldr	r3, [r7, #4]
3419e028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419e02a:	2b00      	cmp	r3, #0
3419e02c:	d00c      	beq.n	3419e048 <ISP_SVC_Sensor_SetGain+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
3419e02e:	687b      	ldr	r3, [r7, #4]
3419e030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419e032:	687a      	ldr	r2, [r7, #4]
3419e034:	6850      	ldr	r0, [r2, #4]
3419e036:	683a      	ldr	r2, [r7, #0]
3419e038:	6812      	ldr	r2, [r2, #0]
3419e03a:	4611      	mov	r1, r2
3419e03c:	4798      	blx	r3
3419e03e:	4603      	mov	r3, r0
3419e040:	2b00      	cmp	r3, #0
3419e042:	d001      	beq.n	3419e048 <ISP_SVC_Sensor_SetGain+0x3c>
    {
      return ISP_ERR_SENSORGAIN;
3419e044:	2379      	movs	r3, #121	@ 0x79
3419e046:	e004      	b.n	3419e052 <ISP_SVC_Sensor_SetGain+0x46>
    }
  }

  Meta.gain = pConfig->gain;
3419e048:	683b      	ldr	r3, [r7, #0]
3419e04a:	681b      	ldr	r3, [r3, #0]
3419e04c:	4a03      	ldr	r2, [pc, #12]	@ (3419e05c <ISP_SVC_Sensor_SetGain+0x50>)
3419e04e:	6093      	str	r3, [r2, #8]

  return ISP_OK;
3419e050:	2300      	movs	r3, #0
}
3419e052:	4618      	mov	r0, r3
3419e054:	3708      	adds	r7, #8
3419e056:	46bd      	mov	sp, r7
3419e058:	bd80      	pop	{r7, pc}
3419e05a:	bf00      	nop
3419e05c:	341c21bc 	.word	0x341c21bc

3419e060 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
3419e060:	b580      	push	{r7, lr}
3419e062:	b082      	sub	sp, #8
3419e064:	af00      	add	r7, sp, #0
3419e066:	6078      	str	r0, [r7, #4]
3419e068:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419e06a:	687b      	ldr	r3, [r7, #4]
3419e06c:	2b00      	cmp	r3, #0
3419e06e:	d002      	beq.n	3419e076 <ISP_SVC_Sensor_GetGain+0x16>
3419e070:	683b      	ldr	r3, [r7, #0]
3419e072:	2b00      	cmp	r3, #0
3419e074:	d101      	bne.n	3419e07a <ISP_SVC_Sensor_GetGain+0x1a>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
3419e076:	2378      	movs	r3, #120	@ 0x78
3419e078:	e010      	b.n	3419e09c <ISP_SVC_Sensor_GetGain+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
3419e07a:	687b      	ldr	r3, [r7, #4]
3419e07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419e07e:	2b00      	cmp	r3, #0
3419e080:	d00b      	beq.n	3419e09a <ISP_SVC_Sensor_GetGain+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
3419e082:	687b      	ldr	r3, [r7, #4]
3419e084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419e086:	687a      	ldr	r2, [r7, #4]
3419e088:	6852      	ldr	r2, [r2, #4]
3419e08a:	6839      	ldr	r1, [r7, #0]
3419e08c:	4610      	mov	r0, r2
3419e08e:	4798      	blx	r3
3419e090:	4603      	mov	r3, r0
3419e092:	2b00      	cmp	r3, #0
3419e094:	d001      	beq.n	3419e09a <ISP_SVC_Sensor_GetGain+0x3a>
    {
      return ISP_ERR_SENSORGAIN;
3419e096:	2379      	movs	r3, #121	@ 0x79
3419e098:	e000      	b.n	3419e09c <ISP_SVC_Sensor_GetGain+0x3c>
    }
  }

  return ISP_OK;
3419e09a:	2300      	movs	r3, #0
}
3419e09c:	4618      	mov	r0, r3
3419e09e:	3708      	adds	r7, #8
3419e0a0:	46bd      	mov	sp, r7
3419e0a2:	bd80      	pop	{r7, pc}

3419e0a4 <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
3419e0a4:	b580      	push	{r7, lr}
3419e0a6:	b082      	sub	sp, #8
3419e0a8:	af00      	add	r7, sp, #0
3419e0aa:	6078      	str	r0, [r7, #4]
3419e0ac:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419e0ae:	687b      	ldr	r3, [r7, #4]
3419e0b0:	2b00      	cmp	r3, #0
3419e0b2:	d002      	beq.n	3419e0ba <ISP_SVC_Sensor_SetExposure+0x16>
3419e0b4:	683b      	ldr	r3, [r7, #0]
3419e0b6:	2b00      	cmp	r3, #0
3419e0b8:	d101      	bne.n	3419e0be <ISP_SVC_Sensor_SetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3419e0ba:	2382      	movs	r3, #130	@ 0x82
3419e0bc:	e015      	b.n	3419e0ea <ISP_SVC_Sensor_SetExposure+0x46>
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
3419e0be:	687b      	ldr	r3, [r7, #4]
3419e0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419e0c2:	2b00      	cmp	r3, #0
3419e0c4:	d00c      	beq.n	3419e0e0 <ISP_SVC_Sensor_SetExposure+0x3c>
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
3419e0c6:	687b      	ldr	r3, [r7, #4]
3419e0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419e0ca:	687a      	ldr	r2, [r7, #4]
3419e0cc:	6850      	ldr	r0, [r2, #4]
3419e0ce:	683a      	ldr	r2, [r7, #0]
3419e0d0:	6812      	ldr	r2, [r2, #0]
3419e0d2:	4611      	mov	r1, r2
3419e0d4:	4798      	blx	r3
3419e0d6:	4603      	mov	r3, r0
3419e0d8:	2b00      	cmp	r3, #0
3419e0da:	d001      	beq.n	3419e0e0 <ISP_SVC_Sensor_SetExposure+0x3c>
    {
      return ISP_ERR_SENSOREXPOSURE;
3419e0dc:	2383      	movs	r3, #131	@ 0x83
3419e0de:	e004      	b.n	3419e0ea <ISP_SVC_Sensor_SetExposure+0x46>
    }
  }

  Meta.exposure = pConfig->exposure;
3419e0e0:	683b      	ldr	r3, [r7, #0]
3419e0e2:	681b      	ldr	r3, [r3, #0]
3419e0e4:	4a03      	ldr	r2, [pc, #12]	@ (3419e0f4 <ISP_SVC_Sensor_SetExposure+0x50>)
3419e0e6:	60d3      	str	r3, [r2, #12]

  return ISP_OK;
3419e0e8:	2300      	movs	r3, #0
}
3419e0ea:	4618      	mov	r0, r3
3419e0ec:	3708      	adds	r7, #8
3419e0ee:	46bd      	mov	sp, r7
3419e0f0:	bd80      	pop	{r7, pc}
3419e0f2:	bf00      	nop
3419e0f4:	341c21bc 	.word	0x341c21bc

3419e0f8 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
3419e0f8:	b580      	push	{r7, lr}
3419e0fa:	b082      	sub	sp, #8
3419e0fc:	af00      	add	r7, sp, #0
3419e0fe:	6078      	str	r0, [r7, #4]
3419e100:	6039      	str	r1, [r7, #0]
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3419e102:	687b      	ldr	r3, [r7, #4]
3419e104:	2b00      	cmp	r3, #0
3419e106:	d002      	beq.n	3419e10e <ISP_SVC_Sensor_GetExposure+0x16>
3419e108:	683b      	ldr	r3, [r7, #0]
3419e10a:	2b00      	cmp	r3, #0
3419e10c:	d101      	bne.n	3419e112 <ISP_SVC_Sensor_GetExposure+0x1a>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3419e10e:	2382      	movs	r3, #130	@ 0x82
3419e110:	e010      	b.n	3419e134 <ISP_SVC_Sensor_GetExposure+0x3c>
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
3419e112:	687b      	ldr	r3, [r7, #4]
3419e114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419e116:	2b00      	cmp	r3, #0
3419e118:	d00b      	beq.n	3419e132 <ISP_SVC_Sensor_GetExposure+0x3a>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
3419e11a:	687b      	ldr	r3, [r7, #4]
3419e11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419e11e:	687a      	ldr	r2, [r7, #4]
3419e120:	6852      	ldr	r2, [r2, #4]
3419e122:	6839      	ldr	r1, [r7, #0]
3419e124:	4610      	mov	r0, r2
3419e126:	4798      	blx	r3
3419e128:	4603      	mov	r3, r0
3419e12a:	2b00      	cmp	r3, #0
3419e12c:	d001      	beq.n	3419e132 <ISP_SVC_Sensor_GetExposure+0x3a>
    {
      return ISP_ERR_SENSOREXPOSURE;
3419e12e:	2383      	movs	r3, #131	@ 0x83
3419e130:	e000      	b.n	3419e134 <ISP_SVC_Sensor_GetExposure+0x3c>
    }
  }

  return ISP_OK;
3419e132:	2300      	movs	r3, #0
}
3419e134:	4618      	mov	r0, r3
3419e136:	3708      	adds	r7, #8
3419e138:	46bd      	mov	sp, r7
3419e13a:	bd80      	pop	{r7, pc}

3419e13c <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
3419e13c:	b580      	push	{r7, lr}
3419e13e:	b082      	sub	sp, #8
3419e140:	af00      	add	r7, sp, #0
3419e142:	6078      	str	r0, [r7, #4]
  /* Check handle validity */
  if (hIsp == NULL)
3419e144:	687b      	ldr	r3, [r7, #4]
3419e146:	2b00      	cmp	r3, #0
3419e148:	d101      	bne.n	3419e14e <ISP_SVC_Misc_IsDCMIPPReady+0x12>
  {
    return ISP_ERR_EINVAL;
3419e14a:	2301      	movs	r3, #1
3419e14c:	e00a      	b.n	3419e164 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
3419e14e:	687b      	ldr	r3, [r7, #4]
3419e150:	681b      	ldr	r3, [r3, #0]
3419e152:	4618      	mov	r0, r3
3419e154:	f7e9 ff0a 	bl	34187f6c <HAL_DCMIPP_GetState>
3419e158:	4603      	mov	r3, r0
3419e15a:	2b02      	cmp	r3, #2
3419e15c:	d001      	beq.n	3419e162 <ISP_SVC_Misc_IsDCMIPPReady+0x26>
  {
    return ISP_ERR_DCMIPP_STATE;
3419e15e:	238c      	movs	r3, #140	@ 0x8c
3419e160:	e000      	b.n	3419e164 <ISP_SVC_Misc_IsDCMIPPReady+0x28>
  }

  return ISP_OK;
3419e162:	2300      	movs	r3, #0
}
3419e164:	4618      	mov	r0, r3
3419e166:	3708      	adds	r7, #8
3419e168:	46bd      	mov	sp, r7
3419e16a:	bd80      	pop	{r7, pc}

3419e16c <ISP_SVC_Misc_IncMainFrameId>:
  *         Increment the id of the frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
3419e16c:	b480      	push	{r7}
3419e16e:	b083      	sub	sp, #12
3419e170:	af00      	add	r7, sp, #0
3419e172:	6078      	str	r0, [r7, #4]
  hIsp->MainPipe_FrameCount++;
3419e174:	687b      	ldr	r3, [r7, #4]
3419e176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419e178:	1c5a      	adds	r2, r3, #1
3419e17a:	687b      	ldr	r3, [r7, #4]
3419e17c:	641a      	str	r2, [r3, #64]	@ 0x40
}
3419e17e:	bf00      	nop
3419e180:	370c      	adds	r7, #12
3419e182:	46bd      	mov	sp, r7
3419e184:	f85d 7b04 	ldr.w	r7, [sp], #4
3419e188:	4770      	bx	lr

3419e18a <ISP_SVC_Misc_GetMainFrameId>:
  *         Return the id of the last frame output on the main pipe
  * @param  hIsp: ISP device handle
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
3419e18a:	b480      	push	{r7}
3419e18c:	b083      	sub	sp, #12
3419e18e:	af00      	add	r7, sp, #0
3419e190:	6078      	str	r0, [r7, #4]
  return hIsp->MainPipe_FrameCount;
3419e192:	687b      	ldr	r3, [r7, #4]
3419e194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
3419e196:	4618      	mov	r0, r3
3419e198:	370c      	adds	r7, #12
3419e19a:	46bd      	mov	sp, r7
3419e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
3419e1a0:	4770      	bx	lr

3419e1a2 <ISP_SVC_Misc_IncAncillaryFrameId>:
  *         Increment the id of the frame output on the ancillary pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
3419e1a2:	b480      	push	{r7}
3419e1a4:	b083      	sub	sp, #12
3419e1a6:	af00      	add	r7, sp, #0
3419e1a8:	6078      	str	r0, [r7, #4]
  hIsp->AncillaryPipe_FrameCount++;
3419e1aa:	687b      	ldr	r3, [r7, #4]
3419e1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419e1ae:	1c5a      	adds	r2, r3, #1
3419e1b0:	687b      	ldr	r3, [r7, #4]
3419e1b2:	645a      	str	r2, [r3, #68]	@ 0x44
}
3419e1b4:	bf00      	nop
3419e1b6:	370c      	adds	r7, #12
3419e1b8:	46bd      	mov	sp, r7
3419e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
3419e1be:	4770      	bx	lr

3419e1c0 <ISP_SVC_Misc_IncDumpFrameId>:
  *         Increment the id of the frame output on the dump pipe
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
3419e1c0:	b480      	push	{r7}
3419e1c2:	b083      	sub	sp, #12
3419e1c4:	af00      	add	r7, sp, #0
3419e1c6:	6078      	str	r0, [r7, #4]
  hIsp->DumpPipe_FrameCount++;
3419e1c8:	687b      	ldr	r3, [r7, #4]
3419e1ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419e1cc:	1c5a      	adds	r2, r3, #1
3419e1ce:	687b      	ldr	r3, [r7, #4]
3419e1d0:	649a      	str	r2, [r3, #72]	@ 0x48
}
3419e1d2:	bf00      	nop
3419e1d4:	370c      	adds	r7, #12
3419e1d6:	46bd      	mov	sp, r7
3419e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
3419e1dc:	4770      	bx	lr

3419e1de <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
3419e1de:	b580      	push	{r7, lr}
3419e1e0:	b084      	sub	sp, #16
3419e1e2:	af00      	add	r7, sp, #0
3419e1e4:	6078      	str	r0, [r7, #4]
3419e1e6:	6039      	str	r1, [r7, #0]
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
3419e1e8:	687b      	ldr	r3, [r7, #4]
3419e1ea:	2b00      	cmp	r3, #0
3419e1ec:	d101      	bne.n	3419e1f2 <ISP_SVC_Misc_IsGammaEnabled+0x14>
  {
    return ISP_ERR_EINVAL;
3419e1ee:	2301      	movs	r3, #1
3419e1f0:	e020      	b.n	3419e234 <ISP_SVC_Misc_IsGammaEnabled+0x56>
  }

  switch(Pipe)
3419e1f2:	683b      	ldr	r3, [r7, #0]
3419e1f4:	2b01      	cmp	r3, #1
3419e1f6:	d003      	beq.n	3419e200 <ISP_SVC_Misc_IsGammaEnabled+0x22>
3419e1f8:	683b      	ldr	r3, [r7, #0]
3419e1fa:	2b02      	cmp	r3, #2
3419e1fc:	d009      	beq.n	3419e212 <ISP_SVC_Misc_IsGammaEnabled+0x34>
3419e1fe:	e011      	b.n	3419e224 <ISP_SVC_Misc_IsGammaEnabled+0x46>
  {
  case 1:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3419e200:	687b      	ldr	r3, [r7, #4]
3419e202:	681b      	ldr	r3, [r3, #0]
3419e204:	2101      	movs	r1, #1
3419e206:	4618      	mov	r0, r3
3419e208:	f7e8 f9c0 	bl	3418658c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
3419e20c:	4603      	mov	r3, r0
3419e20e:	73fb      	strb	r3, [r7, #15]
    break;
3419e210:	e00a      	b.n	3419e228 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  case 2:
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
3419e212:	687b      	ldr	r3, [r7, #4]
3419e214:	681b      	ldr	r3, [r3, #0]
3419e216:	2102      	movs	r1, #2
3419e218:	4618      	mov	r0, r3
3419e21a:	f7e8 f9b7 	bl	3418658c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
3419e21e:	4603      	mov	r3, r0
3419e220:	73fb      	strb	r3, [r7, #15]
    break;
3419e222:	e001      	b.n	3419e228 <ISP_SVC_Misc_IsGammaEnabled+0x4a>
  default:
    ret = 0; /*  No gamma on pipe 0 */
3419e224:	2300      	movs	r3, #0
3419e226:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
3419e228:	7bfb      	ldrb	r3, [r7, #15]
3419e22a:	2b00      	cmp	r3, #0
3419e22c:	bf14      	ite	ne
3419e22e:	2301      	movne	r3, #1
3419e230:	2300      	moveq	r3, #0
3419e232:	b2db      	uxtb	r3, r3
}
3419e234:	4618      	mov	r0, r3
3419e236:	3710      	adds	r7, #16
3419e238:	46bd      	mov	sp, r7
3419e23a:	bd80      	pop	{r7, pc}

3419e23c <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
3419e23c:	b580      	push	{r7, lr}
3419e23e:	b082      	sub	sp, #8
3419e240:	af00      	add	r7, sp, #0
3419e242:	6078      	str	r0, [r7, #4]
3419e244:	6039      	str	r1, [r7, #0]
  if ((hIsp == NULL) || (pConfig == NULL))
3419e246:	687b      	ldr	r3, [r7, #4]
3419e248:	2b00      	cmp	r3, #0
3419e24a:	d002      	beq.n	3419e252 <ISP_SVC_ISP_SetGamma+0x16>
3419e24c:	683b      	ldr	r3, [r7, #0]
3419e24e:	2b00      	cmp	r3, #0
3419e250:	d101      	bne.n	3419e256 <ISP_SVC_ISP_SetGamma+0x1a>
  {
    return ISP_ERR_DCMIPP_GAMMA;
3419e252:	2395      	movs	r3, #149	@ 0x95
3419e254:	e034      	b.n	3419e2c0 <ISP_SVC_ISP_SetGamma+0x84>
  }

  if (pConfig->enablePipe1 == 0)
3419e256:	683b      	ldr	r3, [r7, #0]
3419e258:	781b      	ldrb	r3, [r3, #0]
3419e25a:	2b00      	cmp	r3, #0
3419e25c:	d10a      	bne.n	3419e274 <ISP_SVC_ISP_SetGamma+0x38>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3419e25e:	687b      	ldr	r3, [r7, #4]
3419e260:	681b      	ldr	r3, [r3, #0]
3419e262:	2101      	movs	r1, #1
3419e264:	4618      	mov	r0, r3
3419e266:	f7e8 f953 	bl	34186510 <HAL_DCMIPP_PIPE_DisableGammaConversion>
3419e26a:	4603      	mov	r3, r0
3419e26c:	2b00      	cmp	r3, #0
3419e26e:	d00c      	beq.n	3419e28a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3419e270:	2395      	movs	r3, #149	@ 0x95
3419e272:	e025      	b.n	3419e2c0 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3419e274:	687b      	ldr	r3, [r7, #4]
3419e276:	681b      	ldr	r3, [r3, #0]
3419e278:	2101      	movs	r1, #1
3419e27a:	4618      	mov	r0, r3
3419e27c:	f7e8 f90a 	bl	34186494 <HAL_DCMIPP_PIPE_EnableGammaConversion>
3419e280:	4603      	mov	r3, r0
3419e282:	2b00      	cmp	r3, #0
3419e284:	d001      	beq.n	3419e28a <ISP_SVC_ISP_SetGamma+0x4e>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3419e286:	2395      	movs	r3, #149	@ 0x95
3419e288:	e01a      	b.n	3419e2c0 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  if (pConfig->enablePipe2 == 0)
3419e28a:	683b      	ldr	r3, [r7, #0]
3419e28c:	785b      	ldrb	r3, [r3, #1]
3419e28e:	2b00      	cmp	r3, #0
3419e290:	d10a      	bne.n	3419e2a8 <ISP_SVC_ISP_SetGamma+0x6c>
  {
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3419e292:	687b      	ldr	r3, [r7, #4]
3419e294:	681b      	ldr	r3, [r3, #0]
3419e296:	2102      	movs	r1, #2
3419e298:	4618      	mov	r0, r3
3419e29a:	f7e8 f939 	bl	34186510 <HAL_DCMIPP_PIPE_DisableGammaConversion>
3419e29e:	4603      	mov	r3, r0
3419e2a0:	2b00      	cmp	r3, #0
3419e2a2:	d00c      	beq.n	3419e2be <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3419e2a4:	2395      	movs	r3, #149	@ 0x95
3419e2a6:	e00b      	b.n	3419e2c0 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }
  else
  {
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3419e2a8:	687b      	ldr	r3, [r7, #4]
3419e2aa:	681b      	ldr	r3, [r3, #0]
3419e2ac:	2102      	movs	r1, #2
3419e2ae:	4618      	mov	r0, r3
3419e2b0:	f7e8 f8f0 	bl	34186494 <HAL_DCMIPP_PIPE_EnableGammaConversion>
3419e2b4:	4603      	mov	r3, r0
3419e2b6:	2b00      	cmp	r3, #0
3419e2b8:	d001      	beq.n	3419e2be <ISP_SVC_ISP_SetGamma+0x82>
    {
      return ISP_ERR_DCMIPP_GAMMA;
3419e2ba:	2395      	movs	r3, #149	@ 0x95
3419e2bc:	e000      	b.n	3419e2c0 <ISP_SVC_ISP_SetGamma+0x84>
    }
  }

  return ISP_OK;
3419e2be:	2300      	movs	r3, #0
}
3419e2c0:	4618      	mov	r0, r3
3419e2c2:	3708      	adds	r7, #8
3419e2c4:	46bd      	mov	sp, r7
3419e2c6:	bd80      	pop	{r7, pc}

3419e2c8 <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3419e2c8:	b580      	push	{r7, lr}
3419e2ca:	b082      	sub	sp, #8
3419e2cc:	af00      	add	r7, sp, #0
3419e2ce:	6078      	str	r0, [r7, #4]
3419e2d0:	6039      	str	r1, [r7, #0]
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
3419e2d2:	4a07      	ldr	r2, [pc, #28]	@ (3419e2f0 <ISP_SVC_IQParam_Init+0x28>)
3419e2d4:	683b      	ldr	r3, [r7, #0]
3419e2d6:	4610      	mov	r0, r2
3419e2d8:	4619      	mov	r1, r3
3419e2da:	f44f 7315 	mov.w	r3, #596	@ 0x254
3419e2de:	461a      	mov	r2, r3
3419e2e0:	f005 f85d 	bl	341a339e <memcpy>
  return ISP_OK;
3419e2e4:	2300      	movs	r3, #0
}
3419e2e6:	4618      	mov	r0, r3
3419e2e8:	3708      	adds	r7, #8
3419e2ea:	46bd      	mov	sp, r7
3419e2ec:	bd80      	pop	{r7, pc}
3419e2ee:	bf00      	nop
3419e2f0:	341c2464 	.word	0x341c2464

3419e2f4 <ISP_SVC_IQParam_Get>:
  *         Get the pointer to the IQ parameters cache
  * @param  hIsp: ISP device handle
  * @retval Pointer to the IQ Param config
  */
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
3419e2f4:	b480      	push	{r7}
3419e2f6:	b083      	sub	sp, #12
3419e2f8:	af00      	add	r7, sp, #0
3419e2fa:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
3419e2fc:	4b03      	ldr	r3, [pc, #12]	@ (3419e30c <ISP_SVC_IQParam_Get+0x18>)
}
3419e2fe:	4618      	mov	r0, r3
3419e300:	370c      	adds	r7, #12
3419e302:	46bd      	mov	sp, r7
3419e304:	f85d 7b04 	ldr.w	r7, [sp], #4
3419e308:	4770      	bx	lr
3419e30a:	bf00      	nop
3419e30c:	341c2464 	.word	0x341c2464

3419e310 <ISP_SVC_Stats_Init>:
  *         Initialize the statistic engine
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
3419e310:	b580      	push	{r7, lr}
3419e312:	b082      	sub	sp, #8
3419e314:	af00      	add	r7, sp, #0
3419e316:	6078      	str	r0, [r7, #4]
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
3419e318:	f44f 72b0 	mov.w	r2, #352	@ 0x160
3419e31c:	2100      	movs	r1, #0
3419e31e:	4803      	ldr	r0, [pc, #12]	@ (3419e32c <ISP_SVC_Stats_Init+0x1c>)
3419e320:	f004 ffc0 	bl	341a32a4 <memset>
}
3419e324:	bf00      	nop
3419e326:	3708      	adds	r7, #8
3419e328:	46bd      	mov	sp, r7
3419e32a:	bd80      	pop	{r7, pc}
3419e32c:	341c26b8 	.word	0x341c26b8

3419e330 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
3419e330:	b5b0      	push	{r4, r5, r7, lr}
3419e332:	b092      	sub	sp, #72	@ 0x48
3419e334:	af00      	add	r7, sp, #0
3419e336:	6078      	str	r0, [r7, #4]
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t i, avgR, avgG, avgB, frameId;

  /* Check handle validity */
  if (hIsp == NULL)
3419e338:	687b      	ldr	r3, [r7, #4]
3419e33a:	2b00      	cmp	r3, #0
3419e33c:	d103      	bne.n	3419e346 <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
3419e33e:	48ba      	ldr	r0, [pc, #744]	@ (3419e628 <ISP_SVC_Stats_Gather+0x2f8>)
3419e340:	f004 fe9a 	bl	341a3078 <puts>
    return;
3419e344:	e2a7      	b.n	3419e896 <ISP_SVC_Stats_Gather+0x566>
  }

  if (hIsp->hDcmipp == NULL)
3419e346:	687b      	ldr	r3, [r7, #4]
3419e348:	681b      	ldr	r3, [r3, #0]
3419e34a:	2b00      	cmp	r3, #0
3419e34c:	f000 82a2 	beq.w	3419e894 <ISP_SVC_Stats_Gather+0x564>
  }

  /* Read the stats according to the configuration applied 2 VSYNC (shadow register + stat computation)
   * stages earlier.
   */
  ongoing = &ISP_SVC_StatEngine.ongoing;
3419e350:	4bb6      	ldr	r3, [pc, #728]	@ (3419e62c <ISP_SVC_Stats_Gather+0x2fc>)
3419e352:	643b      	str	r3, [r7, #64]	@ 0x40
  switch(stagePrevious2)
3419e354:	4bb6      	ldr	r3, [pc, #728]	@ (3419e630 <ISP_SVC_Stats_Gather+0x300>)
3419e356:	781b      	ldrb	r3, [r3, #0]
3419e358:	2b09      	cmp	r3, #9
3419e35a:	f200 80fd 	bhi.w	3419e558 <ISP_SVC_Stats_Gather+0x228>
3419e35e:	a201      	add	r2, pc, #4	@ (adr r2, 3419e364 <ISP_SVC_Stats_Gather+0x34>)
3419e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419e364:	3419e38d 	.word	0x3419e38d
3419e368:	3419e415 	.word	0x3419e415
3419e36c:	3419e423 	.word	0x3419e423
3419e370:	3419e431 	.word	0x3419e431
3419e374:	3419e43f 	.word	0x3419e43f
3419e378:	3419e44d 	.word	0x3419e44d
3419e37c:	3419e521 	.word	0x3419e521
3419e380:	3419e52f 	.word	0x3419e52f
3419e384:	3419e53d 	.word	0x3419e53d
3419e388:	3419e54b 	.word	0x3419e54b
  {
  case ISP_STAT_CFG_UP_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3419e38c:	687b      	ldr	r3, [r7, #4]
3419e38e:	6818      	ldr	r0, [r3, #0]
3419e390:	f107 0310 	add.w	r3, r7, #16
3419e394:	2201      	movs	r2, #1
3419e396:	2101      	movs	r1, #1
3419e398:	f7e9 fb60 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
3419e39c:	687b      	ldr	r3, [r7, #4]
3419e39e:	6818      	ldr	r0, [r3, #0]
3419e3a0:	f107 030c 	add.w	r3, r7, #12
3419e3a4:	2202      	movs	r2, #2
3419e3a6:	2101      	movs	r1, #1
3419e3a8:	f7e9 fb58 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
3419e3ac:	687b      	ldr	r3, [r7, #4]
3419e3ae:	6818      	ldr	r0, [r3, #0]
3419e3b0:	f107 0308 	add.w	r3, r7, #8
3419e3b4:	2203      	movs	r2, #3
3419e3b6:	2101      	movs	r1, #1
3419e3b8:	f7e9 fb50 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
3419e3bc:	693b      	ldr	r3, [r7, #16]
3419e3be:	2200      	movs	r2, #0
3419e3c0:	2101      	movs	r1, #1
3419e3c2:	6878      	ldr	r0, [r7, #4]
3419e3c4:	f7fe feb4 	bl	3419d130 <GetAvgStats>
3419e3c8:	4603      	mov	r3, r0
3419e3ca:	461a      	mov	r2, r3
3419e3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e3ce:	701a      	strb	r2, [r3, #0]
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
3419e3d0:	68fb      	ldr	r3, [r7, #12]
3419e3d2:	2201      	movs	r2, #1
3419e3d4:	2101      	movs	r1, #1
3419e3d6:	6878      	ldr	r0, [r7, #4]
3419e3d8:	f7fe feaa 	bl	3419d130 <GetAvgStats>
3419e3dc:	4603      	mov	r3, r0
3419e3de:	461a      	mov	r2, r3
3419e3e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e3e2:	705a      	strb	r2, [r3, #1]
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
3419e3e4:	68bb      	ldr	r3, [r7, #8]
3419e3e6:	2202      	movs	r2, #2
3419e3e8:	2101      	movs	r1, #1
3419e3ea:	6878      	ldr	r0, [r7, #4]
3419e3ec:	f7fe fea0 	bl	3419d130 <GetAvgStats>
3419e3f0:	4603      	mov	r3, r0
3419e3f2:	461a      	mov	r2, r3
3419e3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e3f6:	709a      	strb	r2, [r3, #2]
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
3419e3f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e3fa:	7818      	ldrb	r0, [r3, #0]
3419e3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e3fe:	7859      	ldrb	r1, [r3, #1]
3419e400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e402:	789b      	ldrb	r3, [r3, #2]
3419e404:	461a      	mov	r2, r3
3419e406:	f7ff f87b 	bl	3419d500 <LuminanceFromRGB>
3419e40a:	4603      	mov	r3, r0
3419e40c:	461a      	mov	r2, r3
3419e40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e410:	70da      	strb	r2, [r3, #3]
    break;
3419e412:	e0a2      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
3419e414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e416:	3304      	adds	r3, #4
3419e418:	4619      	mov	r1, r3
3419e41a:	6878      	ldr	r0, [r7, #4]
3419e41c:	f7fe fecc 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e420:	e09b      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
3419e422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e424:	3310      	adds	r3, #16
3419e426:	4619      	mov	r1, r3
3419e428:	6878      	ldr	r0, [r7, #4]
3419e42a:	f7fe fec5 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e42e:	e094      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
3419e430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e432:	331c      	adds	r3, #28
3419e434:	4619      	mov	r1, r3
3419e436:	6878      	ldr	r0, [r7, #4]
3419e438:	f7fe febe 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e43c:	e08d      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_UP_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
3419e43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e440:	3328      	adds	r3, #40	@ 0x28
3419e442:	4619      	mov	r1, r3
3419e444:	6878      	ldr	r0, [r7, #4]
3419e446:	f7fe feb7 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e44a:	e086      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_AVG:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3419e44c:	687b      	ldr	r3, [r7, #4]
3419e44e:	6818      	ldr	r0, [r3, #0]
3419e450:	f107 0310 	add.w	r3, r7, #16
3419e454:	2201      	movs	r2, #1
3419e456:	2101      	movs	r1, #1
3419e458:	f7e9 fb00 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
3419e45c:	687b      	ldr	r3, [r7, #4]
3419e45e:	6818      	ldr	r0, [r3, #0]
3419e460:	f107 030c 	add.w	r3, r7, #12
3419e464:	2202      	movs	r2, #2
3419e466:	2101      	movs	r1, #1
3419e468:	f7e9 faf8 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
3419e46c:	687b      	ldr	r3, [r7, #4]
3419e46e:	6818      	ldr	r0, [r3, #0]
3419e470:	f107 0308 	add.w	r3, r7, #8
3419e474:	2203      	movs	r2, #3
3419e476:	2101      	movs	r1, #1
3419e478:	f7e9 faf0 	bl	34187a5c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>

    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
3419e47c:	693b      	ldr	r3, [r7, #16]
3419e47e:	2200      	movs	r2, #0
3419e480:	2102      	movs	r1, #2
3419e482:	6878      	ldr	r0, [r7, #4]
3419e484:	f7fe fe54 	bl	3419d130 <GetAvgStats>
3419e488:	4603      	mov	r3, r0
3419e48a:	461a      	mov	r2, r3
3419e48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e48e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
3419e492:	68fb      	ldr	r3, [r7, #12]
3419e494:	2201      	movs	r2, #1
3419e496:	2102      	movs	r1, #2
3419e498:	6878      	ldr	r0, [r7, #4]
3419e49a:	f7fe fe49 	bl	3419d130 <GetAvgStats>
3419e49e:	4603      	mov	r3, r0
3419e4a0:	461a      	mov	r2, r3
3419e4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
3419e4a8:	68bb      	ldr	r3, [r7, #8]
3419e4aa:	2202      	movs	r2, #2
3419e4ac:	2102      	movs	r1, #2
3419e4ae:	6878      	ldr	r0, [r7, #4]
3419e4b0:	f7fe fe3e 	bl	3419d130 <GetAvgStats>
3419e4b4:	4603      	mov	r3, r0
3419e4b6:	461a      	mov	r2, r3
3419e4b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3419e4be:	6878      	ldr	r0, [r7, #4]
3419e4c0:	f7ff ff18 	bl	3419e2f4 <ISP_SVC_IQParam_Get>
3419e4c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
3419e4c6:	687b      	ldr	r3, [r7, #4]
3419e4c8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3419e4cc:	2b04      	cmp	r3, #4
3419e4ce:	d003      	beq.n	3419e4d8 <ISP_SVC_Stats_Gather+0x1a8>
3419e4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3419e4d2:	7b1b      	ldrb	r3, [r3, #12]
3419e4d4:	2b00      	cmp	r3, #0
3419e4d6:	d111      	bne.n	3419e4fc <ISP_SVC_Stats_Gather+0x1cc>
    {
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3419e4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4da:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
3419e4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4e0:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
3419e4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3419e4ea:	461a      	mov	r2, r3
3419e4ec:	f7ff f848 	bl	3419d580 <LuminanceFromRGBMono>
3419e4f0:	4603      	mov	r3, r0
3419e4f2:	461a      	mov	r2, r3
3419e4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4f6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    }
    else
    {
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
    }
    break;
3419e4fa:	e02e      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3419e4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e4fe:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
3419e502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e504:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
3419e508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e50a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
3419e50e:	461a      	mov	r2, r3
3419e510:	f7fe fff6 	bl	3419d500 <LuminanceFromRGB>
3419e514:	4603      	mov	r3, r0
3419e516:	461a      	mov	r2, r3
3419e518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e51a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    break;
3419e51e:	e01c      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
3419e520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e522:	3338      	adds	r3, #56	@ 0x38
3419e524:	4619      	mov	r1, r3
3419e526:	6878      	ldr	r0, [r7, #4]
3419e528:	f7fe fe46 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e52c:	e015      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
3419e52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e530:	3344      	adds	r3, #68	@ 0x44
3419e532:	4619      	mov	r1, r3
3419e534:	6878      	ldr	r0, [r7, #4]
3419e536:	f7fe fe3f 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e53a:	e00e      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
3419e53c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e53e:	3350      	adds	r3, #80	@ 0x50
3419e540:	4619      	mov	r1, r3
3419e542:	6878      	ldr	r0, [r7, #4]
3419e544:	f7fe fe38 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e548:	e007      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
3419e54a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e54c:	335c      	adds	r3, #92	@ 0x5c
3419e54e:	4619      	mov	r1, r3
3419e550:	6878      	ldr	r0, [r7, #4]
3419e552:	f7fe fe31 	bl	3419d1b8 <ReadStatHistogram>
    break;
3419e556:	e000      	b.n	3419e55a <ISP_SVC_Stats_Gather+0x22a>

  default:
    /* No Read */
    break;
3419e558:	bf00      	nop
  }

  /* Configure stat for a new stage */
  switch(ISP_SVC_StatEngine.stage)
3419e55a:	4b36      	ldr	r3, [pc, #216]	@ (3419e634 <ISP_SVC_Stats_Gather+0x304>)
3419e55c:	781b      	ldrb	r3, [r3, #0]
3419e55e:	2b09      	cmp	r3, #9
3419e560:	f200 80b8 	bhi.w	3419e6d4 <ISP_SVC_Stats_Gather+0x3a4>
3419e564:	a201      	add	r2, pc, #4	@ (adr r2, 3419e56c <ISP_SVC_Stats_Gather+0x23c>)
3419e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419e56a:	bf00      	nop
3419e56c:	3419e595 	.word	0x3419e595
3419e570:	3419e5eb 	.word	0x3419e5eb
3419e574:	3419e5f9 	.word	0x3419e5f9
3419e578:	3419e607 	.word	0x3419e607
3419e57c:	3419e615 	.word	0x3419e615
3419e580:	3419e623 	.word	0x3419e623
3419e584:	3419e69d 	.word	0x3419e69d
3419e588:	3419e6ab 	.word	0x3419e6ab
3419e58c:	3419e6b9 	.word	0x3419e6b9
3419e590:	3419e6c7 	.word	0x3419e6c7
  {
  case ISP_STAT_CFG_UP_AVG:
    for (i = 0; i < 3; i++)
3419e594:	2300      	movs	r3, #0
3419e596:	647b      	str	r3, [r7, #68]	@ 0x44
3419e598:	e023      	b.n	3419e5e2 <ISP_SVC_Stats_Gather+0x2b2>
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
3419e59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e59c:	4613      	mov	r3, r2
3419e59e:	005b      	lsls	r3, r3, #1
3419e5a0:	4413      	add	r3, r2
3419e5a2:	009b      	lsls	r3, r3, #2
3419e5a4:	3348      	adds	r3, #72	@ 0x48
3419e5a6:	443b      	add	r3, r7
3419e5a8:	3b34      	subs	r3, #52	@ 0x34
3419e5aa:	2200      	movs	r2, #0
3419e5ac:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBUp[i];
3419e5ae:	4a22      	ldr	r2, [pc, #136]	@ (3419e638 <ISP_SVC_Stats_Gather+0x308>)
3419e5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e5b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
3419e5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e5b8:	4613      	mov	r3, r2
3419e5ba:	005b      	lsls	r3, r3, #1
3419e5bc:	4413      	add	r3, r2
3419e5be:	009b      	lsls	r3, r3, #2
3419e5c0:	3348      	adds	r3, #72	@ 0x48
3419e5c2:	443b      	add	r3, r7
3419e5c4:	3b30      	subs	r3, #48	@ 0x30
3419e5c6:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
3419e5c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e5ca:	4613      	mov	r3, r2
3419e5cc:	005b      	lsls	r3, r3, #1
3419e5ce:	4413      	add	r3, r2
3419e5d0:	009b      	lsls	r3, r3, #2
3419e5d2:	3348      	adds	r3, #72	@ 0x48
3419e5d4:	443b      	add	r3, r7
3419e5d6:	3b2c      	subs	r3, #44	@ 0x2c
3419e5d8:	2200      	movs	r2, #0
3419e5da:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
3419e5dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e5de:	3301      	adds	r3, #1
3419e5e0:	647b      	str	r3, [r7, #68]	@ 0x44
3419e5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e5e4:	2b02      	cmp	r3, #2
3419e5e6:	d9d8      	bls.n	3419e59a <ISP_SVC_Stats_Gather+0x26a>
    }
    break;
3419e5e8:	e075      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_0_2:
    SetStatConfig(statConf, &statConfUpBins_0_2);
3419e5ea:	f107 0314 	add.w	r3, r7, #20
3419e5ee:	4913      	ldr	r1, [pc, #76]	@ (3419e63c <ISP_SVC_Stats_Gather+0x30c>)
3419e5f0:	4618      	mov	r0, r3
3419e5f2:	f7fe fe03 	bl	3419d1fc <SetStatConfig>
    break;
3419e5f6:	e06e      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_3_5:
    SetStatConfig(statConf, &statConfUpBins_3_5);
3419e5f8:	f107 0314 	add.w	r3, r7, #20
3419e5fc:	4910      	ldr	r1, [pc, #64]	@ (3419e640 <ISP_SVC_Stats_Gather+0x310>)
3419e5fe:	4618      	mov	r0, r3
3419e600:	f7fe fdfc 	bl	3419d1fc <SetStatConfig>
    break;
3419e604:	e067      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_6_8:
    SetStatConfig(statConf, &statConfUpBins_6_8);
3419e606:	f107 0314 	add.w	r3, r7, #20
3419e60a:	490e      	ldr	r1, [pc, #56]	@ (3419e644 <ISP_SVC_Stats_Gather+0x314>)
3419e60c:	4618      	mov	r0, r3
3419e60e:	f7fe fdf5 	bl	3419d1fc <SetStatConfig>
    break;
3419e612:	e060      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_UP_BINS_9_11:
    SetStatConfig(statConf, &statConfUpBins_9_11);
3419e614:	f107 0314 	add.w	r3, r7, #20
3419e618:	490b      	ldr	r1, [pc, #44]	@ (3419e648 <ISP_SVC_Stats_Gather+0x318>)
3419e61a:	4618      	mov	r0, r3
3419e61c:	f7fe fdee 	bl	3419d1fc <SetStatConfig>
    break;
3419e620:	e059      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_AVG:
    for (i = 0; i < 3; i++)
3419e622:	2300      	movs	r3, #0
3419e624:	647b      	str	r3, [r7, #68]	@ 0x44
3419e626:	e035      	b.n	3419e694 <ISP_SVC_Stats_Gather+0x364>
3419e628:	341a55e8 	.word	0x341a55e8
3419e62c:	341c2734 	.word	0x341c2734
3419e630:	341c0135 	.word	0x341c0135
3419e634:	341c26b8 	.word	0x341c26b8
3419e638:	341a6524 	.word	0x341a6524
3419e63c:	341a653c 	.word	0x341a653c
3419e640:	341a6548 	.word	0x341a6548
3419e644:	341a6554 	.word	0x341a6554
3419e648:	341a6560 	.word	0x341a6560
    {
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
3419e64c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e64e:	4613      	mov	r3, r2
3419e650:	005b      	lsls	r3, r3, #1
3419e652:	4413      	add	r3, r2
3419e654:	009b      	lsls	r3, r3, #2
3419e656:	3348      	adds	r3, #72	@ 0x48
3419e658:	443b      	add	r3, r7
3419e65a:	3b34      	subs	r3, #52	@ 0x34
3419e65c:	2200      	movs	r2, #0
3419e65e:	601a      	str	r2, [r3, #0]
      statConf[i].Source = avgRGBDown[i];
3419e660:	4a8e      	ldr	r2, [pc, #568]	@ (3419e89c <ISP_SVC_Stats_Gather+0x56c>)
3419e662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e664:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
3419e668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e66a:	4613      	mov	r3, r2
3419e66c:	005b      	lsls	r3, r3, #1
3419e66e:	4413      	add	r3, r2
3419e670:	009b      	lsls	r3, r3, #2
3419e672:	3348      	adds	r3, #72	@ 0x48
3419e674:	443b      	add	r3, r7
3419e676:	3b30      	subs	r3, #48	@ 0x30
3419e678:	6019      	str	r1, [r3, #0]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
3419e67a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e67c:	4613      	mov	r3, r2
3419e67e:	005b      	lsls	r3, r3, #1
3419e680:	4413      	add	r3, r2
3419e682:	009b      	lsls	r3, r3, #2
3419e684:	3348      	adds	r3, #72	@ 0x48
3419e686:	443b      	add	r3, r7
3419e688:	3b2c      	subs	r3, #44	@ 0x2c
3419e68a:	2200      	movs	r2, #0
3419e68c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
3419e68e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e690:	3301      	adds	r3, #1
3419e692:	647b      	str	r3, [r7, #68]	@ 0x44
3419e694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e696:	2b02      	cmp	r3, #2
3419e698:	d9d8      	bls.n	3419e64c <ISP_SVC_Stats_Gather+0x31c>
    }
    break;
3419e69a:	e01c      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_0_2:
    SetStatConfig(statConf, &statConfDownBins_0_2);
3419e69c:	f107 0314 	add.w	r3, r7, #20
3419e6a0:	497f      	ldr	r1, [pc, #508]	@ (3419e8a0 <ISP_SVC_Stats_Gather+0x570>)
3419e6a2:	4618      	mov	r0, r3
3419e6a4:	f7fe fdaa 	bl	3419d1fc <SetStatConfig>
    break;
3419e6a8:	e015      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_3_5:
    SetStatConfig(statConf, &statConfDownBins_3_5);
3419e6aa:	f107 0314 	add.w	r3, r7, #20
3419e6ae:	497d      	ldr	r1, [pc, #500]	@ (3419e8a4 <ISP_SVC_Stats_Gather+0x574>)
3419e6b0:	4618      	mov	r0, r3
3419e6b2:	f7fe fda3 	bl	3419d1fc <SetStatConfig>
    break;
3419e6b6:	e00e      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_6_8:
    SetStatConfig(statConf, &statConfDownBins_6_8);
3419e6b8:	f107 0314 	add.w	r3, r7, #20
3419e6bc:	497a      	ldr	r1, [pc, #488]	@ (3419e8a8 <ISP_SVC_Stats_Gather+0x578>)
3419e6be:	4618      	mov	r0, r3
3419e6c0:	f7fe fd9c 	bl	3419d1fc <SetStatConfig>
    break;
3419e6c4:	e007      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  case ISP_STAT_CFG_DOWN_BINS_9_11:
    SetStatConfig(statConf, &statConfDownBins_9_11);
3419e6c6:	f107 0314 	add.w	r3, r7, #20
3419e6ca:	4978      	ldr	r1, [pc, #480]	@ (3419e8ac <ISP_SVC_Stats_Gather+0x57c>)
3419e6cc:	4618      	mov	r0, r3
3419e6ce:	f7fe fd95 	bl	3419d1fc <SetStatConfig>
    break;
3419e6d2:	e000      	b.n	3419e6d6 <ISP_SVC_Stats_Gather+0x3a6>

  default:
    /* Configure Unchanged */
    break;
3419e6d4:	bf00      	nop
  }

  /* Apply configuration (for an output result available 2 VSYNC later) */
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3419e6d6:	2301      	movs	r3, #1
3419e6d8:	647b      	str	r3, [r7, #68]	@ 0x44
3419e6da:	e029      	b.n	3419e730 <ISP_SVC_Stats_Gather+0x400>
  {
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
3419e6dc:	687b      	ldr	r3, [r7, #4]
3419e6de:	6818      	ldr	r0, [r3, #0]
3419e6e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e6e2:	b2dc      	uxtb	r4, r3
3419e6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e6e6:	1e5a      	subs	r2, r3, #1
3419e6e8:	f107 0114 	add.w	r1, r7, #20
3419e6ec:	4613      	mov	r3, r2
3419e6ee:	005b      	lsls	r3, r3, #1
3419e6f0:	4413      	add	r3, r2
3419e6f2:	009b      	lsls	r3, r3, #2
3419e6f4:	440b      	add	r3, r1
3419e6f6:	4622      	mov	r2, r4
3419e6f8:	2101      	movs	r1, #1
3419e6fa:	f7e8 fe19 	bl	34187330 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
3419e6fe:	4603      	mov	r3, r0
3419e700:	2b00      	cmp	r3, #0
3419e702:	d003      	beq.n	3419e70c <ISP_SVC_Stats_Gather+0x3dc>
    {
      printf("ERROR: can't set Statistic Extraction config\r\n");
3419e704:	486a      	ldr	r0, [pc, #424]	@ (3419e8b0 <ISP_SVC_Stats_Gather+0x580>)
3419e706:	f004 fcb7 	bl	341a3078 <puts>
      return;
3419e70a:	e0c4      	b.n	3419e896 <ISP_SVC_Stats_Gather+0x566>
    }

    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
3419e70c:	687b      	ldr	r3, [r7, #4]
3419e70e:	681b      	ldr	r3, [r3, #0]
3419e710:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3419e712:	b2d2      	uxtb	r2, r2
3419e714:	2101      	movs	r1, #1
3419e716:	4618      	mov	r0, r3
3419e718:	f7e8 ff42 	bl	341875a0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
3419e71c:	4603      	mov	r3, r0
3419e71e:	2b00      	cmp	r3, #0
3419e720:	d003      	beq.n	3419e72a <ISP_SVC_Stats_Gather+0x3fa>
    {
      printf("ERROR: can't enable Statistic Extraction config\r\n");
3419e722:	4864      	ldr	r0, [pc, #400]	@ (3419e8b4 <ISP_SVC_Stats_Gather+0x584>)
3419e724:	f004 fca8 	bl	341a3078 <puts>
      return;
3419e728:	e0b5      	b.n	3419e896 <ISP_SVC_Stats_Gather+0x566>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3419e72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e72c:	3301      	adds	r3, #1
3419e72e:	647b      	str	r3, [r7, #68]	@ 0x44
3419e730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3419e732:	2b03      	cmp	r3, #3
3419e734:	d9d2      	bls.n	3419e6dc <ISP_SVC_Stats_Gather+0x3ac>
    }
  }

  /* Cycle start / end */
  frameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
3419e736:	6878      	ldr	r0, [r7, #4]
3419e738:	f7ff fd27 	bl	3419e18a <ISP_SVC_Misc_GetMainFrameId>
3419e73c:	63b8      	str	r0, [r7, #56]	@ 0x38

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
3419e73e:	2001      	movs	r0, #1
3419e740:	f7fe fe6e 	bl	3419d420 <GetStatCycleStart>
3419e744:	4603      	mov	r3, r0
3419e746:	461a      	mov	r2, r3
3419e748:	4b5b      	ldr	r3, [pc, #364]	@ (3419e8b8 <ISP_SVC_Stats_Gather+0x588>)
3419e74a:	781b      	ldrb	r3, [r3, #0]
3419e74c:	429a      	cmp	r2, r3
3419e74e:	d102      	bne.n	3419e756 <ISP_SVC_Stats_Gather+0x426>
  {
    ongoing->upFrameIdStart = frameId;
3419e750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e752:	6bba      	ldr	r2, [r7, #56]	@ 0x38
3419e754:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
3419e756:	2002      	movs	r0, #2
3419e758:	f7fe fe62 	bl	3419d420 <GetStatCycleStart>
3419e75c:	4603      	mov	r3, r0
3419e75e:	461a      	mov	r2, r3
3419e760:	4b55      	ldr	r3, [pc, #340]	@ (3419e8b8 <ISP_SVC_Stats_Gather+0x588>)
3419e762:	781b      	ldrb	r3, [r3, #0]
3419e764:	429a      	cmp	r2, r3
3419e766:	d102      	bne.n	3419e76e <ISP_SVC_Stats_Gather+0x43e>
  {
    ongoing->downFrameIdStart = frameId;
3419e768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e76a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
3419e76c:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
3419e76e:	2001      	movs	r0, #1
3419e770:	f7fe fe8e 	bl	3419d490 <GetStatCycleEnd>
3419e774:	4603      	mov	r3, r0
3419e776:	461a      	mov	r2, r3
3419e778:	4b4f      	ldr	r3, [pc, #316]	@ (3419e8b8 <ISP_SVC_Stats_Gather+0x588>)
3419e77a:	781b      	ldrb	r3, [r3, #0]
3419e77c:	429a      	cmp	r2, r3
3419e77e:	d122      	bne.n	3419e7c6 <ISP_SVC_Stats_Gather+0x496>
3419e780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419e784:	2b00      	cmp	r3, #0
3419e786:	d01e      	beq.n	3419e7c6 <ISP_SVC_Stats_Gather+0x496>
  {
    /* Last measure of the up cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.up = ongoing->up;
3419e788:	4b4c      	ldr	r3, [pc, #304]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e78a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3419e78c:	1d1c      	adds	r4, r3, #4
3419e78e:	4615      	mov	r5, r2
3419e790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e79a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e79c:	682b      	ldr	r3, [r5, #0]
3419e79e:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.upFrameIdEnd = frameId;
3419e7a0:	4a46      	ldr	r2, [pc, #280]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3419e7a4:	6713      	str	r3, [r2, #112]	@ 0x70
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
3419e7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419e7aa:	4a44      	ldr	r2, [pc, #272]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e7ac:	66d3      	str	r3, [r2, #108]	@ 0x6c

    memset(&ongoing->up, 0, sizeof(ongoing->up));
3419e7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7b0:	2234      	movs	r2, #52	@ 0x34
3419e7b2:	2100      	movs	r1, #0
3419e7b4:	4618      	mov	r0, r3
3419e7b6:	f004 fd75 	bl	341a32a4 <memset>
    ongoing->upFrameIdStart = 0;
3419e7ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7bc:	2200      	movs	r2, #0
3419e7be:	669a      	str	r2, [r3, #104]	@ 0x68
    ongoing->upFrameIdEnd = 0;
3419e7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7c2:	2200      	movs	r2, #0
3419e7c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
3419e7c6:	2002      	movs	r0, #2
3419e7c8:	f7fe fe62 	bl	3419d490 <GetStatCycleEnd>
3419e7cc:	4603      	mov	r3, r0
3419e7ce:	461a      	mov	r2, r3
3419e7d0:	4b39      	ldr	r3, [pc, #228]	@ (3419e8b8 <ISP_SVC_Stats_Gather+0x588>)
3419e7d2:	781b      	ldrb	r3, [r3, #0]
3419e7d4:	429a      	cmp	r2, r3
3419e7d6:	d125      	bne.n	3419e824 <ISP_SVC_Stats_Gather+0x4f4>
3419e7d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419e7dc:	2b00      	cmp	r3, #0
3419e7de:	d021      	beq.n	3419e824 <ISP_SVC_Stats_Gather+0x4f4>
  {
    /* Last measure of the down cycle : update the 'last' struct */
    ISP_SVC_StatEngine.last.down = ongoing->down;
3419e7e0:	4a36      	ldr	r2, [pc, #216]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e7e4:	f102 0438 	add.w	r4, r2, #56	@ 0x38
3419e7e8:	f103 0534 	add.w	r5, r3, #52	@ 0x34
3419e7ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e7f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3419e7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3419e7f8:	682b      	ldr	r3, [r5, #0]
3419e7fa:	6023      	str	r3, [r4, #0]
    ISP_SVC_StatEngine.last.downFrameIdEnd = frameId;
3419e7fc:	4a2f      	ldr	r2, [pc, #188]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3419e800:	6793      	str	r3, [r2, #120]	@ 0x78
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
3419e802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419e806:	4a2d      	ldr	r2, [pc, #180]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e808:	6753      	str	r3, [r2, #116]	@ 0x74

    memset(&ongoing->down, 0, sizeof(ongoing->down));
3419e80a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e80c:	3334      	adds	r3, #52	@ 0x34
3419e80e:	2234      	movs	r2, #52	@ 0x34
3419e810:	2100      	movs	r1, #0
3419e812:	4618      	mov	r0, r3
3419e814:	f004 fd46 	bl	341a32a4 <memset>
    ongoing->downFrameIdStart = 0;
3419e818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e81a:	2200      	movs	r2, #0
3419e81c:	671a      	str	r2, [r3, #112]	@ 0x70
    ongoing->downFrameIdEnd = 0;
3419e81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3419e820:	2200      	movs	r2, #0
3419e822:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3419e824:	4b25      	ldr	r3, [pc, #148]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e826:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419e82a:	f003 0304 	and.w	r3, r3, #4
3419e82e:	2b00      	cmp	r3, #0
3419e830:	d106      	bne.n	3419e840 <ISP_SVC_Stats_Gather+0x510>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
3419e832:	4b22      	ldr	r3, [pc, #136]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e834:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419e838:	f003 0304 	and.w	r3, r3, #4
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3419e83c:	2b00      	cmp	r3, #0
3419e83e:	d017      	beq.n	3419e870 <ISP_SVC_Stats_Gather+0x540>
      (frameId > ISP_SVC_StatEngine.requestAllCounter))
3419e840:	4b1e      	ldr	r3, [pc, #120]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e842:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
3419e846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
3419e848:	429a      	cmp	r2, r3
3419e84a:	d911      	bls.n	3419e870 <ISP_SVC_Stats_Gather+0x540>
  {
    /* Stop the special temporary mode "request all stats" when its delay expires */
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
3419e84c:	4b1b      	ldr	r3, [pc, #108]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e84e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
3419e852:	f023 0304 	bic.w	r3, r3, #4
3419e856:	b2da      	uxtb	r2, r3
3419e858:	4b18      	ldr	r3, [pc, #96]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e85a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
3419e85e:	4b17      	ldr	r3, [pc, #92]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e860:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
3419e864:	f023 0304 	bic.w	r3, r3, #4
3419e868:	b2da      	uxtb	r2, r3
3419e86a:	4b14      	ldr	r3, [pc, #80]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e86c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
3419e870:	4b13      	ldr	r3, [pc, #76]	@ (3419e8c0 <ISP_SVC_Stats_Gather+0x590>)
3419e872:	781a      	ldrb	r2, [r3, #0]
3419e874:	4b10      	ldr	r3, [pc, #64]	@ (3419e8b8 <ISP_SVC_Stats_Gather+0x588>)
3419e876:	701a      	strb	r2, [r3, #0]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
3419e878:	4b10      	ldr	r3, [pc, #64]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e87a:	781a      	ldrb	r2, [r3, #0]
3419e87c:	4b10      	ldr	r3, [pc, #64]	@ (3419e8c0 <ISP_SVC_Stats_Gather+0x590>)
3419e87e:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
3419e880:	4b0e      	ldr	r3, [pc, #56]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e882:	781b      	ldrb	r3, [r3, #0]
3419e884:	4618      	mov	r0, r3
3419e886:	f7fe fcdb 	bl	3419d240 <GetNextStatStage>
3419e88a:	4603      	mov	r3, r0
3419e88c:	461a      	mov	r2, r3
3419e88e:	4b0b      	ldr	r3, [pc, #44]	@ (3419e8bc <ISP_SVC_Stats_Gather+0x58c>)
3419e890:	701a      	strb	r2, [r3, #0]
3419e892:	e000      	b.n	3419e896 <ISP_SVC_Stats_Gather+0x566>
    return;
3419e894:	bf00      	nop
}
3419e896:	3748      	adds	r7, #72	@ 0x48
3419e898:	46bd      	mov	sp, r7
3419e89a:	bdb0      	pop	{r4, r5, r7, pc}
3419e89c:	341a6530 	.word	0x341a6530
3419e8a0:	341a656c 	.word	0x341a656c
3419e8a4:	341a6578 	.word	0x341a6578
3419e8a8:	341a6584 	.word	0x341a6584
3419e8ac:	341a6590 	.word	0x341a6590
3419e8b0:	341a5604 	.word	0x341a5604
3419e8b4:	341a5634 	.word	0x341a5634
3419e8b8:	341c0135 	.word	0x341c0135
3419e8bc:	341c26b8 	.word	0x341c26b8
3419e8c0:	341c0136 	.word	0x341c0136

3419e8c4 <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
3419e8c4:	b580      	push	{r7, lr}
3419e8c6:	b088      	sub	sp, #32
3419e8c8:	af00      	add	r7, sp, #0
3419e8ca:	6078      	str	r0, [r7, #4]
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
3419e8cc:	2300      	movs	r3, #0
3419e8ce:	77fb      	strb	r3, [r7, #31]

  pLastStat = &ISP_SVC_StatEngine.last;
3419e8d0:	4b2e      	ldr	r3, [pc, #184]	@ (3419e98c <ISP_SVC_Stats_ProcessCallbacks+0xc8>)
3419e8d2:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419e8d4:	2300      	movs	r3, #0
3419e8d6:	61bb      	str	r3, [r7, #24]
3419e8d8:	e04f      	b.n	3419e97a <ISP_SVC_Stats_ProcessCallbacks+0xb6>
  {
    client = &ISP_SVC_StatEngine.client[i];
3419e8da:	69ba      	ldr	r2, [r7, #24]
3419e8dc:	4613      	mov	r3, r2
3419e8de:	009b      	lsls	r3, r3, #2
3419e8e0:	4413      	add	r3, r2
3419e8e2:	009b      	lsls	r3, r3, #2
3419e8e4:	33f0      	adds	r3, #240	@ 0xf0
3419e8e6:	4a2a      	ldr	r2, [pc, #168]	@ (3419e990 <ISP_SVC_Stats_ProcessCallbacks+0xcc>)
3419e8e8:	4413      	add	r3, r2
3419e8ea:	3304      	adds	r3, #4
3419e8ec:	613b      	str	r3, [r7, #16]

    if (client->callback == NULL)
3419e8ee:	693b      	ldr	r3, [r7, #16]
3419e8f0:	681b      	ldr	r3, [r3, #0]
3419e8f2:	2b00      	cmp	r3, #0
3419e8f4:	d03d      	beq.n	3419e972 <ISP_SVC_Stats_ProcessCallbacks+0xae>
      continue;

    /* Check if stats are available for a client, comparing the location and the specified frameId */
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
3419e8f6:	693b      	ldr	r3, [r7, #16]
3419e8f8:	7c1b      	ldrb	r3, [r3, #16]
3419e8fa:	2b02      	cmp	r3, #2
3419e8fc:	d105      	bne.n	3419e90a <ISP_SVC_Stats_ProcessCallbacks+0x46>
3419e8fe:	693b      	ldr	r3, [r7, #16]
3419e900:	68da      	ldr	r2, [r3, #12]
3419e902:	697b      	ldr	r3, [r7, #20]
3419e904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419e906:	429a      	cmp	r2, r3
3419e908:	d919      	bls.n	3419e93e <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
3419e90a:	693b      	ldr	r3, [r7, #16]
3419e90c:	7c1b      	ldrb	r3, [r3, #16]
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
3419e90e:	2b01      	cmp	r3, #1
3419e910:	d105      	bne.n	3419e91e <ISP_SVC_Stats_ProcessCallbacks+0x5a>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
3419e912:	693b      	ldr	r3, [r7, #16]
3419e914:	68da      	ldr	r2, [r3, #12]
3419e916:	697b      	ldr	r3, [r7, #20]
3419e918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419e91a:	429a      	cmp	r2, r3
3419e91c:	d90f      	bls.n	3419e93e <ISP_SVC_Stats_ProcessCallbacks+0x7a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
3419e91e:	693b      	ldr	r3, [r7, #16]
3419e920:	7c1b      	ldrb	r3, [r3, #16]
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
3419e922:	2b03      	cmp	r3, #3
3419e924:	d126      	bne.n	3419e974 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
3419e926:	693b      	ldr	r3, [r7, #16]
3419e928:	68da      	ldr	r2, [r3, #12]
3419e92a:	697b      	ldr	r3, [r7, #20]
3419e92c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3419e92e:	429a      	cmp	r2, r3
3419e930:	d820      	bhi.n	3419e974 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
3419e932:	693b      	ldr	r3, [r7, #16]
3419e934:	68da      	ldr	r2, [r3, #12]
3419e936:	697b      	ldr	r3, [r7, #20]
3419e938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3419e93a:	429a      	cmp	r2, r3
3419e93c:	d81a      	bhi.n	3419e974 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
    {
      /* Copy the stats into the client buffer */
      *(client->pStats) = *pLastStat;
3419e93e:	693b      	ldr	r3, [r7, #16]
3419e940:	689a      	ldr	r2, [r3, #8]
3419e942:	697b      	ldr	r3, [r7, #20]
3419e944:	4610      	mov	r0, r2
3419e946:	4619      	mov	r1, r3
3419e948:	2378      	movs	r3, #120	@ 0x78
3419e94a:	461a      	mov	r2, r3
3419e94c:	f004 fd27 	bl	341a339e <memcpy>

      /* Call its callback */
      retcb = client->callback(client->pAlgo);
3419e950:	693b      	ldr	r3, [r7, #16]
3419e952:	681b      	ldr	r3, [r3, #0]
3419e954:	693a      	ldr	r2, [r7, #16]
3419e956:	6852      	ldr	r2, [r2, #4]
3419e958:	4610      	mov	r0, r2
3419e95a:	4798      	blx	r3
3419e95c:	4603      	mov	r3, r0
3419e95e:	73fb      	strb	r3, [r7, #15]
      if (retcb != ISP_OK)
3419e960:	7bfb      	ldrb	r3, [r7, #15]
3419e962:	2b00      	cmp	r3, #0
3419e964:	d001      	beq.n	3419e96a <ISP_SVC_Stats_ProcessCallbacks+0xa6>
      {
        ret = retcb;
3419e966:	7bfb      	ldrb	r3, [r7, #15]
3419e968:	77fb      	strb	r3, [r7, #31]
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
3419e96a:	693b      	ldr	r3, [r7, #16]
3419e96c:	2200      	movs	r2, #0
3419e96e:	601a      	str	r2, [r3, #0]
3419e970:	e000      	b.n	3419e974 <ISP_SVC_Stats_ProcessCallbacks+0xb0>
      continue;
3419e972:	bf00      	nop
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419e974:	69bb      	ldr	r3, [r7, #24]
3419e976:	3301      	adds	r3, #1
3419e978:	61bb      	str	r3, [r7, #24]
3419e97a:	69bb      	ldr	r3, [r7, #24]
3419e97c:	2b04      	cmp	r3, #4
3419e97e:	d9ac      	bls.n	3419e8da <ISP_SVC_Stats_ProcessCallbacks+0x16>
    }
  }

  return ret;
3419e980:	7ffb      	ldrb	r3, [r7, #31]
}
3419e982:	4618      	mov	r0, r3
3419e984:	3720      	adds	r7, #32
3419e986:	46bd      	mov	sp, r7
3419e988:	bd80      	pop	{r7, pc}
3419e98a:	bf00      	nop
3419e98c:	341c26bc 	.word	0x341c26bc
3419e990:	341c26b8 	.word	0x341c26b8

3419e994 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
3419e994:	b580      	push	{r7, lr}
3419e996:	b086      	sub	sp, #24
3419e998:	af00      	add	r7, sp, #0
3419e99a:	60f8      	str	r0, [r7, #12]
3419e99c:	60b9      	str	r1, [r7, #8]
3419e99e:	607a      	str	r2, [r7, #4]
3419e9a0:	603b      	str	r3, [r7, #0]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
3419e9a2:	68fb      	ldr	r3, [r7, #12]
3419e9a4:	2b00      	cmp	r3, #0
3419e9a6:	d002      	beq.n	3419e9ae <ISP_SVC_Stats_GetNext+0x1a>
3419e9a8:	683b      	ldr	r3, [r7, #0]
3419e9aa:	2b00      	cmp	r3, #0
3419e9ac:	d101      	bne.n	3419e9b2 <ISP_SVC_Stats_GetNext+0x1e>
  {
    return ISP_ERR_EINVAL;
3419e9ae:	2301      	movs	r3, #1
3419e9b0:	e08f      	b.n	3419ead2 <ISP_SVC_Stats_GetNext+0x13e>
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
3419e9b2:	68f8      	ldr	r0, [r7, #12]
3419e9b4:	f7ff fbe9 	bl	3419e18a <ISP_SVC_Misc_GetMainFrameId>
3419e9b8:	4602      	mov	r2, r0
3419e9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419e9bc:	4413      	add	r3, r2
3419e9be:	613b      	str	r3, [r7, #16]

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419e9c0:	2300      	movs	r3, #0
3419e9c2:	617b      	str	r3, [r7, #20]
3419e9c4:	e00d      	b.n	3419e9e2 <ISP_SVC_Stats_GetNext+0x4e>
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
3419e9c6:	4945      	ldr	r1, [pc, #276]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419e9c8:	697a      	ldr	r2, [r7, #20]
3419e9ca:	4613      	mov	r3, r2
3419e9cc:	009b      	lsls	r3, r3, #2
3419e9ce:	4413      	add	r3, r2
3419e9d0:	009b      	lsls	r3, r3, #2
3419e9d2:	440b      	add	r3, r1
3419e9d4:	33f4      	adds	r3, #244	@ 0xf4
3419e9d6:	681b      	ldr	r3, [r3, #0]
3419e9d8:	2b00      	cmp	r3, #0
3419e9da:	d006      	beq.n	3419e9ea <ISP_SVC_Stats_GetNext+0x56>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3419e9dc:	697b      	ldr	r3, [r7, #20]
3419e9de:	3301      	adds	r3, #1
3419e9e0:	617b      	str	r3, [r7, #20]
3419e9e2:	697b      	ldr	r3, [r7, #20]
3419e9e4:	2b04      	cmp	r3, #4
3419e9e6:	d9ee      	bls.n	3419e9c6 <ISP_SVC_Stats_GetNext+0x32>
3419e9e8:	e000      	b.n	3419e9ec <ISP_SVC_Stats_GetNext+0x58>
      break;
3419e9ea:	bf00      	nop
  }

  if (i == ISP_SVC_STAT_MAX_CB)
3419e9ec:	697b      	ldr	r3, [r7, #20]
3419e9ee:	2b05      	cmp	r3, #5
3419e9f0:	d101      	bne.n	3419e9f6 <ISP_SVC_Stats_GetNext+0x62>
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
3419e9f2:	23ac      	movs	r3, #172	@ 0xac
3419e9f4:	e06d      	b.n	3419ead2 <ISP_SVC_Stats_GetNext+0x13e>
  }

  /* Add this requested stat to the list of requested stats */
  if (location & ISP_STAT_LOC_UP)
3419e9f6:	f897 3020 	ldrb.w	r3, [r7, #32]
3419e9fa:	f003 0301 	and.w	r3, r3, #1
3419e9fe:	2b00      	cmp	r3, #0
3419ea00:	d009      	beq.n	3419ea16 <ISP_SVC_Stats_GetNext+0x82>
  {
    ISP_SVC_StatEngine.upRequest |= type;
3419ea02:	4b36      	ldr	r3, [pc, #216]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea04:	f893 2158 	ldrb.w	r2, [r3, #344]	@ 0x158
3419ea08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
3419ea0c:	4313      	orrs	r3, r2
3419ea0e:	b2da      	uxtb	r2, r3
3419ea10:	4b32      	ldr	r3, [pc, #200]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea12:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
  }
  if (location & ISP_STAT_LOC_DOWN)
3419ea16:	f897 3020 	ldrb.w	r3, [r7, #32]
3419ea1a:	f003 0302 	and.w	r3, r3, #2
3419ea1e:	2b00      	cmp	r3, #0
3419ea20:	d009      	beq.n	3419ea36 <ISP_SVC_Stats_GetNext+0xa2>
  {
    ISP_SVC_StatEngine.downRequest |= type;
3419ea22:	4b2e      	ldr	r3, [pc, #184]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea24:	f893 2159 	ldrb.w	r2, [r3, #345]	@ 0x159
3419ea28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
3419ea2c:	4313      	orrs	r3, r2
3419ea2e:	b2da      	uxtb	r2, r3
3419ea30:	4b2a      	ldr	r3, [pc, #168]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea32:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
  }

  if (type == ISP_STAT_TYPE_ALL_TMP)
3419ea36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
3419ea3a:	2b04      	cmp	r3, #4
3419ea3c:	d107      	bne.n	3419ea4e <ISP_SVC_Stats_GetNext+0xba>
  {
    /* Special case: request all stats for a short time (3 cycle) */
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
3419ea3e:	68f8      	ldr	r0, [r7, #12]
3419ea40:	f7ff fba3 	bl	3419e18a <ISP_SVC_Misc_GetMainFrameId>
3419ea44:	4603      	mov	r3, r0
3419ea46:	331e      	adds	r3, #30
3419ea48:	4a24      	ldr	r2, [pc, #144]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea4a:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  }

  /* Register client */
  ISP_SVC_StatEngine.client[i].callback = callback;
3419ea4e:	4923      	ldr	r1, [pc, #140]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea50:	697a      	ldr	r2, [r7, #20]
3419ea52:	4613      	mov	r3, r2
3419ea54:	009b      	lsls	r3, r3, #2
3419ea56:	4413      	add	r3, r2
3419ea58:	009b      	lsls	r3, r3, #2
3419ea5a:	440b      	add	r3, r1
3419ea5c:	33f4      	adds	r3, #244	@ 0xf4
3419ea5e:	68ba      	ldr	r2, [r7, #8]
3419ea60:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
3419ea62:	491e      	ldr	r1, [pc, #120]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea64:	697a      	ldr	r2, [r7, #20]
3419ea66:	4613      	mov	r3, r2
3419ea68:	009b      	lsls	r3, r3, #2
3419ea6a:	4413      	add	r3, r2
3419ea6c:	009b      	lsls	r3, r3, #2
3419ea6e:	440b      	add	r3, r1
3419ea70:	33f8      	adds	r3, #248	@ 0xf8
3419ea72:	687a      	ldr	r2, [r7, #4]
3419ea74:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].pStats = pStats;
3419ea76:	4919      	ldr	r1, [pc, #100]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea78:	697a      	ldr	r2, [r7, #20]
3419ea7a:	4613      	mov	r3, r2
3419ea7c:	009b      	lsls	r3, r3, #2
3419ea7e:	4413      	add	r3, r2
3419ea80:	009b      	lsls	r3, r3, #2
3419ea82:	440b      	add	r3, r1
3419ea84:	33fc      	adds	r3, #252	@ 0xfc
3419ea86:	683a      	ldr	r2, [r7, #0]
3419ea88:	601a      	str	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].location = location;
3419ea8a:	4914      	ldr	r1, [pc, #80]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419ea8c:	697a      	ldr	r2, [r7, #20]
3419ea8e:	4613      	mov	r3, r2
3419ea90:	009b      	lsls	r3, r3, #2
3419ea92:	4413      	add	r3, r2
3419ea94:	009b      	lsls	r3, r3, #2
3419ea96:	440b      	add	r3, r1
3419ea98:	f503 7382 	add.w	r3, r3, #260	@ 0x104
3419ea9c:	f897 2020 	ldrb.w	r2, [r7, #32]
3419eaa0:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].type = type;
3419eaa2:	490e      	ldr	r1, [pc, #56]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419eaa4:	697a      	ldr	r2, [r7, #20]
3419eaa6:	4613      	mov	r3, r2
3419eaa8:	009b      	lsls	r3, r3, #2
3419eaaa:	4413      	add	r3, r2
3419eaac:	009b      	lsls	r3, r3, #2
3419eaae:	440b      	add	r3, r1
3419eab0:	f203 1305 	addw	r3, r3, #261	@ 0x105
3419eab4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
3419eab8:	701a      	strb	r2, [r3, #0]
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
3419eaba:	4908      	ldr	r1, [pc, #32]	@ (3419eadc <ISP_SVC_Stats_GetNext+0x148>)
3419eabc:	697a      	ldr	r2, [r7, #20]
3419eabe:	4613      	mov	r3, r2
3419eac0:	009b      	lsls	r3, r3, #2
3419eac2:	4413      	add	r3, r2
3419eac4:	009b      	lsls	r3, r3, #2
3419eac6:	440b      	add	r3, r1
3419eac8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3419eacc:	693a      	ldr	r2, [r7, #16]
3419eace:	601a      	str	r2, [r3, #0]

  return ISP_OK;
3419ead0:	2300      	movs	r3, #0
}
3419ead2:	4618      	mov	r0, r3
3419ead4:	3718      	adds	r7, #24
3419ead6:	46bd      	mov	sp, r7
3419ead8:	bd80      	pop	{r7, pc}
3419eada:	bf00      	nop
3419eadc:	341c26b8 	.word	0x341c26b8

3419eae0 <start_system>:
 * Start System
 *	Start each subsystem and each device driver.
 *	Return from function after starting.
 */
LOCAL ER start_system( void )
{
3419eae0:	b580      	push	{r7, lr}
3419eae2:	b082      	sub	sp, #8
3419eae4:	af00      	add	r7, sp, #0
	ER	ercd;

#if USE_DEVICE
	/* Initialize Device manager */
	ercd = knl_initialize_devmgr();
3419eae6:	f000 f925 	bl	3419ed34 <knl_initialize_devmgr>
3419eaea:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) return ercd;
3419eaec:	687b      	ldr	r3, [r7, #4]
3419eaee:	2b00      	cmp	r3, #0
3419eaf0:	da01      	bge.n	3419eaf6 <start_system+0x16>
3419eaf2:	687b      	ldr	r3, [r7, #4]
3419eaf4:	e003      	b.n	3419eafe <start_system+0x1e>
#endif

	/* Start system dependent sequence */
	ercd = knl_start_device();
3419eaf6:	f003 ff51 	bl	341a299c <knl_start_device>
3419eafa:	6078      	str	r0, [r7, #4]

	return ercd;
3419eafc:	687b      	ldr	r3, [r7, #4]
}
3419eafe:	4618      	mov	r0, r3
3419eb00:	3708      	adds	r7, #8
3419eb02:	46bd      	mov	sp, r7
3419eb04:	bd80      	pop	{r7, pc}
	...

3419eb08 <shutdown_system>:
 *		-3 : Normal re-start		(Boot -> Start)
 *
 *	fin are not always supported.
 */
LOCAL void shutdown_system( INT fin )
{
3419eb08:	b580      	push	{r7, lr}
3419eb0a:	b082      	sub	sp, #8
3419eb0c:	af00      	add	r7, sp, #0
3419eb0e:	6078      	str	r0, [r7, #4]
#if USE_SHUTDOWN
	/* Platform dependent finalize sequence */
	knl_finish_device();
3419eb10:	f003 ff50 	bl	341a29b4 <knl_finish_device>

	/* Shutdown message output */
	if ( fin >= 0 ) {
3419eb14:	687b      	ldr	r3, [r7, #4]
3419eb16:	2b00      	cmp	r3, #0
3419eb18:	db02      	blt.n	3419eb20 <shutdown_system+0x18>
		SYSTEM_MESSAGE("\n<< SYSTEM SHUTDOWN >>\n");
3419eb1a:	4807      	ldr	r0, [pc, #28]	@ (3419eb38 <shutdown_system+0x30>)
3419eb1c:	f003 f97c 	bl	341a1e18 <tm_putstring>
	}

	if ( fin < 0 ) {
3419eb20:	687b      	ldr	r3, [r7, #4]
3419eb22:	2b00      	cmp	r3, #0
3419eb24:	da02      	bge.n	3419eb2c <shutdown_system+0x24>
		/* Re-start sequence (platform dependent) */
		knl_restart_hw(fin);
3419eb26:	6878      	ldr	r0, [r7, #4]
3419eb28:	f003 ff5a 	bl	341a29e0 <knl_restart_hw>
	}

	knl_tkernel_exit();		/* Stop system */
3419eb2c:	f000 f894 	bl	3419ec58 <knl_tkernel_exit>
	DISABLE_INTERRUPT;
	for(;;) {
		;
	}
#endif /* USE_SHUTDOWN */
}
3419eb30:	bf00      	nop
3419eb32:	3708      	adds	r7, #8
3419eb34:	46bd      	mov	sp, r7
3419eb36:	bd80      	pop	{r7, pc}
3419eb38:	341a5668 	.word	0x341a5668

3419eb3c <init_task_main>:

/*
 * Initial task main
 */
LOCAL void init_task_main(void)
{
3419eb3c:	b580      	push	{r7, lr}
3419eb3e:	b082      	sub	sp, #8
3419eb40:	af00      	add	r7, sp, #0
	INT	fin = 1;
3419eb42:	2301      	movs	r3, #1
3419eb44:	607b      	str	r3, [r7, #4]
	ER	ercd;

	ercd = start_system();		/* Start Sub-system & device driver */
3419eb46:	f7ff ffcb 	bl	3419eae0 <start_system>
3419eb4a:	6038      	str	r0, [r7, #0]
	if(ercd  >= E_OK) {
3419eb4c:	683b      	ldr	r3, [r7, #0]
3419eb4e:	2b00      	cmp	r3, #0
3419eb50:	db0b      	blt.n	3419eb6a <init_task_main+0x2e>

#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)
		tm_printf((UB*)"\n\nmicroT-Kernel Version %x.%02x\n\n", VER_MAJOR, VER_MINOR);
3419eb52:	2200      	movs	r2, #0
3419eb54:	2103      	movs	r1, #3
3419eb56:	480a      	ldr	r0, [pc, #40]	@ (3419eb80 <init_task_main+0x44>)
3419eb58:	f003 fcfe 	bl	341a2558 <tm_printf>

#if USE_USERINIT
		/* Perform user defined initialization sequence */
		fin = (*(MAIN_FP)RI_USERINIT)(0, NULL);
#endif
		if ( fin > 0 ) {
3419eb5c:	687b      	ldr	r3, [r7, #4]
3419eb5e:	2b00      	cmp	r3, #0
3419eb60:	dd06      	ble.n	3419eb70 <init_task_main+0x34>
			fin = usermain();	/* User Main Program */
3419eb62:	f7e2 ffff 	bl	34181b64 <usermain>
3419eb66:	6078      	str	r0, [r7, #4]
3419eb68:	e002      	b.n	3419eb70 <init_task_main+0x34>
		/* Perform user defined finalization sequence */
		(*(MAIN_FP)RI_USERINIT)(-1, NULL);
#endif

	} else {
		SYSTEM_MESSAGE("!ERROR! Init Task start\n");	/* Start message */
3419eb6a:	4806      	ldr	r0, [pc, #24]	@ (3419eb84 <init_task_main+0x48>)
3419eb6c:	f003 f954 	bl	341a1e18 <tm_putstring>
	}

	shutdown_system(fin);	/* Never return */
3419eb70:	6878      	ldr	r0, [r7, #4]
3419eb72:	f7ff ffc9 	bl	3419eb08 <shutdown_system>
}
3419eb76:	bf00      	nop
3419eb78:	3708      	adds	r7, #8
3419eb7a:	46bd      	mov	sp, r7
3419eb7c:	bd80      	pop	{r7, pc}
3419eb7e:	bf00      	nop
3419eb80:	341a5680 	.word	0x341a5680
3419eb84:	341a56a4 	.word	0x341a56a4

3419eb88 <knl_main>:
#ifndef ADD_PREFIX_KNL_TO_GLOBAL_NAME
EXPORT INT main( void )
#else
EXPORT INT knl_main( void )
#endif	/* ADD_PREFIX_KNL_TO_GLOBAL_NAME */
{
3419eb88:	b580      	push	{r7, lr}
3419eb8a:	b082      	sub	sp, #8
3419eb8c:	af00      	add	r7, sp, #0
	ER	ercd;

	DISABLE_INTERRUPT;
3419eb8e:	f003 ff7c 	bl	341a2a8a <disint>

#if USE_TMONITOR
	/* Initialize T-Monitor Compatible Library */
	libtm_init();
3419eb92:	f003 f917 	bl	341a1dc4 <libtm_init>
#endif

#if USE_IMALLOC
	/* Initialize Internal memory allocation (Imalloc) */
	ercd = knl_init_Imalloc();
3419eb96:	f001 f963 	bl	3419fe60 <knl_init_Imalloc>
3419eb9a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419eb9c:	687b      	ldr	r3, [r7, #4]
3419eb9e:	2b00      	cmp	r3, #0
3419eba0:	da03      	bge.n	3419ebaa <knl_main+0x22>
		SYSTEM_MESSAGE("!ERROR! init_Imalloc\n");
3419eba2:	4825      	ldr	r0, [pc, #148]	@ (3419ec38 <knl_main+0xb0>)
3419eba4:	f003 f938 	bl	341a1e18 <tm_putstring>
		goto err_ret;
3419eba8:	e044      	b.n	3419ec34 <knl_main+0xac>
	}
#endif /* USE_IMALLOC */

	/* Initialize Device before micro T-Kernel starts */
	ercd = knl_init_device();
3419ebaa:	f003 feef 	bl	341a298c <knl_init_device>
3419ebae:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ebb0:	687b      	ldr	r3, [r7, #4]
3419ebb2:	2b00      	cmp	r3, #0
3419ebb4:	da03      	bge.n	3419ebbe <knl_main+0x36>
		SYSTEM_MESSAGE("!ERROR! init_device\n");
3419ebb6:	4821      	ldr	r0, [pc, #132]	@ (3419ec3c <knl_main+0xb4>)
3419ebb8:	f003 f92e 	bl	341a1e18 <tm_putstring>
		goto err_ret;
3419ebbc:	e03a      	b.n	3419ec34 <knl_main+0xac>
	}

	/* Interrupt initialize */
	ercd = knl_init_interrupt();
3419ebbe:	f003 fe09 	bl	341a27d4 <knl_init_interrupt>
3419ebc2:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ebc4:	687b      	ldr	r3, [r7, #4]
3419ebc6:	2b00      	cmp	r3, #0
3419ebc8:	da03      	bge.n	3419ebd2 <knl_main+0x4a>
		SYSTEM_MESSAGE("!ERROR! init_initialize\n");
3419ebca:	481d      	ldr	r0, [pc, #116]	@ (3419ec40 <knl_main+0xb8>)
3419ebcc:	f003 f924 	bl	341a1e18 <tm_putstring>
		goto err_ret;
3419ebd0:	e030      	b.n	3419ec34 <knl_main+0xac>
	}

	/* Initialize Kernel-objects  */
	ercd = knl_init_object();
3419ebd2:	f002 fd71 	bl	341a16b8 <knl_init_object>
3419ebd6:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ebd8:	687b      	ldr	r3, [r7, #4]
3419ebda:	2b00      	cmp	r3, #0
3419ebdc:	da03      	bge.n	3419ebe6 <knl_main+0x5e>
		SYSTEM_MESSAGE("!ERROR! kernel object initialize\n");
3419ebde:	4819      	ldr	r0, [pc, #100]	@ (3419ec44 <knl_main+0xbc>)
3419ebe0:	f003 f91a 	bl	341a1e18 <tm_putstring>
		goto err_ret1;
3419ebe4:	e024      	b.n	3419ec30 <knl_main+0xa8>
	}

	/* Start System Timer */
	ercd = knl_timer_startup();
3419ebe6:	f002 fc6f 	bl	341a14c8 <knl_timer_startup>
3419ebea:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ebec:	687b      	ldr	r3, [r7, #4]
3419ebee:	2b00      	cmp	r3, #0
3419ebf0:	da03      	bge.n	3419ebfa <knl_main+0x72>
		SYSTEM_MESSAGE("!ERROR! System timer startup\n");
3419ebf2:	4815      	ldr	r0, [pc, #84]	@ (3419ec48 <knl_main+0xc0>)
3419ebf4:	f003 f910 	bl	341a1e18 <tm_putstring>
		goto err_ret1;
3419ebf8:	e01a      	b.n	3419ec30 <knl_main+0xa8>
	}

	/* Create & start initial task */
	ercd = tk_cre_tsk((CONST T_CTSK *)&knl_init_ctsk);
3419ebfa:	4814      	ldr	r0, [pc, #80]	@ (3419ec4c <knl_main+0xc4>)
3419ebfc:	f001 fff0 	bl	341a0be0 <tk_cre_tsk>
3419ec00:	6078      	str	r0, [r7, #4]
	if ( ercd >= E_OK ) {
3419ec02:	687b      	ldr	r3, [r7, #4]
3419ec04:	2b00      	cmp	r3, #0
3419ec06:	db0e      	blt.n	3419ec26 <knl_main+0x9e>
		ercd = tk_sta_tsk((ID)ercd, 0);
3419ec08:	2100      	movs	r1, #0
3419ec0a:	6878      	ldr	r0, [r7, #4]
3419ec0c:	f002 f896 	bl	341a0d3c <tk_sta_tsk>
3419ec10:	6078      	str	r0, [r7, #4]
		if ( ercd >= E_OK ) {
3419ec12:	687b      	ldr	r3, [r7, #4]
3419ec14:	2b00      	cmp	r3, #0
3419ec16:	db02      	blt.n	3419ec1e <knl_main+0x96>
			knl_force_dispatch();
3419ec18:	f003 fcc6 	bl	341a25a8 <knl_force_dispatch>
3419ec1c:	e006      	b.n	3419ec2c <knl_main+0xa4>
			/**** Start Initial Task. ****/
			/**** No return ****/
		} else {
			SYSTEM_MESSAGE("!ERROR! Initial Task can not start\n");
3419ec1e:	480c      	ldr	r0, [pc, #48]	@ (3419ec50 <knl_main+0xc8>)
3419ec20:	f003 f8fa 	bl	341a1e18 <tm_putstring>
3419ec24:	e002      	b.n	3419ec2c <knl_main+0xa4>
		}
	} else {
		SYSTEM_MESSAGE("!ERROR! Initial Task can not creat\n");
3419ec26:	480b      	ldr	r0, [pc, #44]	@ (3419ec54 <knl_main+0xcc>)
3419ec28:	f003 f8f6 	bl	341a1e18 <tm_putstring>
	}

	/* After this, Error handling */

#if USE_SHUTDOWN
	knl_timer_shutdown();	/* Stop System timer */
3419ec2c:	f002 fc6a 	bl	341a1504 <knl_timer_shutdown>
err_ret1:
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
3419ec30:	f003 fecf 	bl	341a29d2 <knl_shutdown_hw>
#else
err_ret1:
#endif /* USE_SHUTDOWN */

err_ret:
	while(1);
3419ec34:	bf00      	nop
3419ec36:	e7fd      	b.n	3419ec34 <knl_main+0xac>
3419ec38:	341a56c0 	.word	0x341a56c0
3419ec3c:	341a56d8 	.word	0x341a56d8
3419ec40:	341a56f0 	.word	0x341a56f0
3419ec44:	341a570c 	.word	0x341a570c
3419ec48:	341a5730 	.word	0x341a5730
3419ec4c:	341a659c 	.word	0x341a659c
3419ec50:	341a5750 	.word	0x341a5750
3419ec54:	341a5774 	.word	0x341a5774

3419ec58 <knl_tkernel_exit>:
/*
 * Exit micro T-Kernel from Initial Task.
 */
#if USE_SHUTDOWN
EXPORT void knl_tkernel_exit( void )
{
3419ec58:	b580      	push	{r7, lr}
3419ec5a:	af00      	add	r7, sp, #0
	knl_timer_shutdown();	/* Stop System timer */
3419ec5c:	f002 fc52 	bl	341a1504 <knl_timer_shutdown>
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
3419ec60:	f003 feb7 	bl	341a29d2 <knl_shutdown_hw>
	/**** No return ****/

	while(1);
3419ec64:	bf00      	nop
3419ec66:	e7fd      	b.n	3419ec64 <knl_tkernel_exit+0xc>

3419ec68 <QueInit>:

/*
 * Queue initialization 
 */
Inline void QueInit( QUEUE *que )
{
3419ec68:	b480      	push	{r7}
3419ec6a:	b083      	sub	sp, #12
3419ec6c:	af00      	add	r7, sp, #0
3419ec6e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419ec70:	687b      	ldr	r3, [r7, #4]
3419ec72:	687a      	ldr	r2, [r7, #4]
3419ec74:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419ec76:	687b      	ldr	r3, [r7, #4]
3419ec78:	687a      	ldr	r2, [r7, #4]
3419ec7a:	605a      	str	r2, [r3, #4]
}
3419ec7c:	bf00      	nop
3419ec7e:	370c      	adds	r7, #12
3419ec80:	46bd      	mov	sp, r7
3419ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ec86:	4770      	bx	lr

3419ec88 <QueInsert>:
/*
 * Insert in queue 
 *	Inserts entry directly prior to que 
 */
Inline void QueInsert( QUEUE *entry, QUEUE *que )
{
3419ec88:	b480      	push	{r7}
3419ec8a:	b083      	sub	sp, #12
3419ec8c:	af00      	add	r7, sp, #0
3419ec8e:	6078      	str	r0, [r7, #4]
3419ec90:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419ec92:	683b      	ldr	r3, [r7, #0]
3419ec94:	685a      	ldr	r2, [r3, #4]
3419ec96:	687b      	ldr	r3, [r7, #4]
3419ec98:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419ec9a:	687b      	ldr	r3, [r7, #4]
3419ec9c:	683a      	ldr	r2, [r7, #0]
3419ec9e:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419eca0:	683b      	ldr	r3, [r7, #0]
3419eca2:	685b      	ldr	r3, [r3, #4]
3419eca4:	687a      	ldr	r2, [r7, #4]
3419eca6:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419eca8:	683b      	ldr	r3, [r7, #0]
3419ecaa:	687a      	ldr	r2, [r7, #4]
3419ecac:	605a      	str	r2, [r3, #4]
}
3419ecae:	bf00      	nop
3419ecb0:	370c      	adds	r7, #12
3419ecb2:	46bd      	mov	sp, r7
3419ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ecb8:	4770      	bx	lr
	...

3419ecbc <initDevCB>:

/*
 * Initialization of device registration information table
 */
LOCAL ER initDevCB( void )
{
3419ecbc:	b580      	push	{r7, lr}
3419ecbe:	b082      	sub	sp, #8
3419ecc0:	af00      	add	r7, sp, #0
	DevCB	*devcb;
	INT	num = MAX_REGDEV;
3419ecc2:	2308      	movs	r3, #8
3419ecc4:	603b      	str	r3, [r7, #0]

	QueInit(&knl_UsedDevCB);
3419ecc6:	480f      	ldr	r0, [pc, #60]	@ (3419ed04 <initDevCB+0x48>)
3419ecc8:	f7ff ffce 	bl	3419ec68 <QueInit>
	QueInit(&knl_FreeDevCB);
3419eccc:	480e      	ldr	r0, [pc, #56]	@ (3419ed08 <initDevCB+0x4c>)
3419ecce:	f7ff ffcb 	bl	3419ec68 <QueInit>

	devcb = knl_DevCBtbl;
3419ecd2:	4b0e      	ldr	r3, [pc, #56]	@ (3419ed0c <initDevCB+0x50>)
3419ecd4:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
3419ecd6:	e00a      	b.n	3419ecee <initDevCB+0x32>
		QueInsert(&devcb->q, &knl_FreeDevCB);
3419ecd8:	687b      	ldr	r3, [r7, #4]
3419ecda:	490b      	ldr	r1, [pc, #44]	@ (3419ed08 <initDevCB+0x4c>)
3419ecdc:	4618      	mov	r0, r3
3419ecde:	f7ff ffd3 	bl	3419ec88 <QueInsert>
		devcb->devnm[0] = '\0';
3419ece2:	687b      	ldr	r3, [r7, #4]
3419ece4:	2200      	movs	r2, #0
3419ece6:	721a      	strb	r2, [r3, #8]
		devcb++;
3419ece8:	687b      	ldr	r3, [r7, #4]
3419ecea:	3348      	adds	r3, #72	@ 0x48
3419ecec:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
3419ecee:	683b      	ldr	r3, [r7, #0]
3419ecf0:	1e5a      	subs	r2, r3, #1
3419ecf2:	603a      	str	r2, [r7, #0]
3419ecf4:	2b00      	cmp	r3, #0
3419ecf6:	dcef      	bgt.n	3419ecd8 <initDevCB+0x1c>
	}

	return E_OK;
3419ecf8:	2300      	movs	r3, #0
}
3419ecfa:	4618      	mov	r0, r3
3419ecfc:	3708      	adds	r7, #8
3419ecfe:	46bd      	mov	sp, r7
3419ed00:	bd80      	pop	{r7, pc}
3419ed02:	bf00      	nop
3419ed04:	341c391c 	.word	0x341c391c
3419ed08:	341c3924 	.word	0x341c3924
3419ed0c:	341c36dc 	.word	0x341c36dc

3419ed10 <initIDev>:

/*
 * Initialization of device initial setting information
 */
LOCAL ER initIDev( void )
{
3419ed10:	b480      	push	{r7}
3419ed12:	b083      	sub	sp, #12
3419ed14:	af00      	add	r7, sp, #0
	if ( ercd < E_OK ) {
		knl_DefaultIDev.evtmbfid = 0;
		goto err_ret;
	}
#else	/* Do not use message buffer for event notification */
	ercd = E_OK;
3419ed16:	2300      	movs	r3, #0
3419ed18:	607b      	str	r3, [r7, #4]
#endif
	knl_DefaultIDev.evtmbfid = ercd;
3419ed1a:	4a05      	ldr	r2, [pc, #20]	@ (3419ed30 <initIDev+0x20>)
3419ed1c:	687b      	ldr	r3, [r7, #4]
3419ed1e:	6013      	str	r3, [r2, #0]

#if DEVT_MBFSZ0 >= 0
err_ret:
#endif
	return ercd;
3419ed20:	687b      	ldr	r3, [r7, #4]
}
3419ed22:	4618      	mov	r0, r3
3419ed24:	370c      	adds	r7, #12
3419ed26:	46bd      	mov	sp, r7
3419ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ed2c:	4770      	bx	lr
3419ed2e:	bf00      	nop
3419ed30:	341c36d8 	.word	0x341c36d8

3419ed34 <knl_initialize_devmgr>:

/*
 * Initialization of Device management
 */
EXPORT ER knl_initialize_devmgr( void )
{
3419ed34:	b580      	push	{r7, lr}
3419ed36:	b082      	sub	sp, #8
3419ed38:	af00      	add	r7, sp, #0
	ER	ercd;

	/* Generate lock for device management exclusive control */
	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);
3419ed3a:	4916      	ldr	r1, [pc, #88]	@ (3419ed94 <knl_initialize_devmgr+0x60>)
3419ed3c:	4816      	ldr	r0, [pc, #88]	@ (3419ed98 <knl_initialize_devmgr+0x64>)
3419ed3e:	f002 ffe5 	bl	341a1d0c <CreateMLock>
3419ed42:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ed44:	687b      	ldr	r3, [r7, #4]
3419ed46:	2b00      	cmp	r3, #0
3419ed48:	db15      	blt.n	3419ed76 <knl_initialize_devmgr+0x42>
		goto err_ret;
	}

	/* Generate device registration information table */
	ercd = initDevCB();
3419ed4a:	f7ff ffb7 	bl	3419ecbc <initDevCB>
3419ed4e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ed50:	687b      	ldr	r3, [r7, #4]
3419ed52:	2b00      	cmp	r3, #0
3419ed54:	db11      	blt.n	3419ed7a <knl_initialize_devmgr+0x46>
		goto err_ret;
	}

	/* Initialization of device input/output-related */
	ercd = knl_initDevIO();
3419ed56:	f000 fabf 	bl	3419f2d8 <knl_initDevIO>
3419ed5a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ed5c:	687b      	ldr	r3, [r7, #4]
3419ed5e:	2b00      	cmp	r3, #0
3419ed60:	db0d      	blt.n	3419ed7e <knl_initialize_devmgr+0x4a>
		goto err_ret;
	}

	/* Initialization of device initial setting information */
	ercd = initIDev();
3419ed62:	f7ff ffd5 	bl	3419ed10 <initIDev>
3419ed66:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
3419ed68:	687b      	ldr	r3, [r7, #4]
3419ed6a:	2b00      	cmp	r3, #0
3419ed6c:	db09      	blt.n	3419ed82 <knl_initialize_devmgr+0x4e>
		goto err_ret;
	}

	knl_devmgr_startup();
3419ed6e:	f000 fa5f 	bl	3419f230 <knl_devmgr_startup>

	return E_OK;
3419ed72:	2300      	movs	r3, #0
3419ed74:	e009      	b.n	3419ed8a <knl_initialize_devmgr+0x56>
		goto err_ret;
3419ed76:	bf00      	nop
3419ed78:	e004      	b.n	3419ed84 <knl_initialize_devmgr+0x50>
		goto err_ret;
3419ed7a:	bf00      	nop
3419ed7c:	e002      	b.n	3419ed84 <knl_initialize_devmgr+0x50>
		goto err_ret;
3419ed7e:	bf00      	nop
3419ed80:	e000      	b.n	3419ed84 <knl_initialize_devmgr+0x50>
		goto err_ret;
3419ed82:	bf00      	nop

err_ret:
	knl_finish_devmgr();
3419ed84:	f000 f816 	bl	3419edb4 <knl_finish_devmgr>
	return ercd;
3419ed88:	687b      	ldr	r3, [r7, #4]
}
3419ed8a:	4618      	mov	r0, r3
3419ed8c:	3708      	adds	r7, #8
3419ed8e:	46bd      	mov	sp, r7
3419ed90:	bd80      	pop	{r7, pc}
3419ed92:	bf00      	nop
3419ed94:	341a5798 	.word	0x341a5798
3419ed98:	341c36c8 	.word	0x341c36c8

3419ed9c <delIDev>:

/*
 * Unregister device initial setting information
 */
LOCAL ER delIDev( void )
{
3419ed9c:	b480      	push	{r7}
3419ed9e:	b083      	sub	sp, #12
3419eda0:	af00      	add	r7, sp, #0
	ER	ercd = E_OK;
3419eda2:	2300      	movs	r3, #0
3419eda4:	607b      	str	r3, [r7, #4]
	}


#endif /* DEVT_MBFSZ0 >= 0 */

	return ercd;
3419eda6:	687b      	ldr	r3, [r7, #4]
}
3419eda8:	4618      	mov	r0, r3
3419edaa:	370c      	adds	r7, #12
3419edac:	46bd      	mov	sp, r7
3419edae:	f85d 7b04 	ldr.w	r7, [sp], #4
3419edb2:	4770      	bx	lr

3419edb4 <knl_finish_devmgr>:

/*
 * Finalization sequence of system management 
 */
EXPORT ER knl_finish_devmgr( void )
{
3419edb4:	b580      	push	{r7, lr}
3419edb6:	b082      	sub	sp, #8
3419edb8:	af00      	add	r7, sp, #0
	ER	ercd;

	knl_devmgr_cleanup();
3419edba:	f000 fa4f 	bl	3419f25c <knl_devmgr_cleanup>

	/* Unregister device initial setting information */
	ercd = delIDev();
3419edbe:	f7ff ffed 	bl	3419ed9c <delIDev>
3419edc2:	6078      	str	r0, [r7, #4]

	/* Finalization sequence of device input/output-related */
	ercd = knl_finishDevIO();
3419edc4:	f000 fad2 	bl	3419f36c <knl_finishDevIO>
3419edc8:	6078      	str	r0, [r7, #4]

	/* Delete lock for device management exclusive control */
	DeleteMLock(&knl_DevMgrLock);
3419edca:	4804      	ldr	r0, [pc, #16]	@ (3419eddc <knl_finish_devmgr+0x28>)
3419edcc:	f002 ffdc 	bl	341a1d88 <DeleteMLock>

	return ercd;
3419edd0:	687b      	ldr	r3, [r7, #4]
}
3419edd2:	4618      	mov	r0, r3
3419edd4:	3708      	adds	r7, #8
3419edd6:	46bd      	mov	sp, r7
3419edd8:	bd80      	pop	{r7, pc}
3419edda:	bf00      	nop
3419eddc:	341c36c8 	.word	0x341c36c8

3419ede0 <QueInit>:
{
3419ede0:	b480      	push	{r7}
3419ede2:	b083      	sub	sp, #12
3419ede4:	af00      	add	r7, sp, #0
3419ede6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419ede8:	687b      	ldr	r3, [r7, #4]
3419edea:	687a      	ldr	r2, [r7, #4]
3419edec:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419edee:	687b      	ldr	r3, [r7, #4]
3419edf0:	687a      	ldr	r2, [r7, #4]
3419edf2:	605a      	str	r2, [r3, #4]
}
3419edf4:	bf00      	nop
3419edf6:	370c      	adds	r7, #12
3419edf8:	46bd      	mov	sp, r7
3419edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
3419edfe:	4770      	bx	lr

3419ee00 <isQueEmpty>:
{
3419ee00:	b480      	push	{r7}
3419ee02:	b083      	sub	sp, #12
3419ee04:	af00      	add	r7, sp, #0
3419ee06:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
3419ee08:	687b      	ldr	r3, [r7, #4]
3419ee0a:	681b      	ldr	r3, [r3, #0]
3419ee0c:	687a      	ldr	r2, [r7, #4]
3419ee0e:	429a      	cmp	r2, r3
3419ee10:	bf0c      	ite	eq
3419ee12:	2301      	moveq	r3, #1
3419ee14:	2300      	movne	r3, #0
3419ee16:	b2db      	uxtb	r3, r3
}
3419ee18:	4618      	mov	r0, r3
3419ee1a:	370c      	adds	r7, #12
3419ee1c:	46bd      	mov	sp, r7
3419ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ee22:	4770      	bx	lr

3419ee24 <QueInsert>:
{
3419ee24:	b480      	push	{r7}
3419ee26:	b083      	sub	sp, #12
3419ee28:	af00      	add	r7, sp, #0
3419ee2a:	6078      	str	r0, [r7, #4]
3419ee2c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419ee2e:	683b      	ldr	r3, [r7, #0]
3419ee30:	685a      	ldr	r2, [r3, #4]
3419ee32:	687b      	ldr	r3, [r7, #4]
3419ee34:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419ee36:	687b      	ldr	r3, [r7, #4]
3419ee38:	683a      	ldr	r2, [r7, #0]
3419ee3a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419ee3c:	683b      	ldr	r3, [r7, #0]
3419ee3e:	685b      	ldr	r3, [r3, #4]
3419ee40:	687a      	ldr	r2, [r7, #4]
3419ee42:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419ee44:	683b      	ldr	r3, [r7, #0]
3419ee46:	687a      	ldr	r2, [r7, #4]
3419ee48:	605a      	str	r2, [r3, #4]
}
3419ee4a:	bf00      	nop
3419ee4c:	370c      	adds	r7, #12
3419ee4e:	46bd      	mov	sp, r7
3419ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ee54:	4770      	bx	lr

3419ee56 <QueRemove>:
 * Delete from queue 
 *	Deletes entry from queue 
 *	No action is performed if entry is empty. 
 */
Inline void QueRemove( QUEUE *entry )
{
3419ee56:	b480      	push	{r7}
3419ee58:	b083      	sub	sp, #12
3419ee5a:	af00      	add	r7, sp, #0
3419ee5c:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
3419ee5e:	687b      	ldr	r3, [r7, #4]
3419ee60:	681b      	ldr	r3, [r3, #0]
3419ee62:	687a      	ldr	r2, [r7, #4]
3419ee64:	429a      	cmp	r2, r3
3419ee66:	d009      	beq.n	3419ee7c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
3419ee68:	687b      	ldr	r3, [r7, #4]
3419ee6a:	685b      	ldr	r3, [r3, #4]
3419ee6c:	687a      	ldr	r2, [r7, #4]
3419ee6e:	6812      	ldr	r2, [r2, #0]
3419ee70:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
3419ee72:	687b      	ldr	r3, [r7, #4]
3419ee74:	681b      	ldr	r3, [r3, #0]
3419ee76:	687a      	ldr	r2, [r7, #4]
3419ee78:	6852      	ldr	r2, [r2, #4]
3419ee7a:	605a      	str	r2, [r3, #4]
	}
}
3419ee7c:	bf00      	nop
3419ee7e:	370c      	adds	r7, #12
3419ee80:	46bd      	mov	sp, r7
3419ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ee86:	4770      	bx	lr

3419ee88 <knl_delOpnCB>:

/*
 * Free open management block
 */
EXPORT void knl_delOpnCB( OpnCB *opncb, BOOL free )
{
3419ee88:	b580      	push	{r7, lr}
3419ee8a:	b082      	sub	sp, #8
3419ee8c:	af00      	add	r7, sp, #0
3419ee8e:	6078      	str	r0, [r7, #4]
3419ee90:	6039      	str	r1, [r7, #0]
	QueRemove(&opncb->q);
3419ee92:	687b      	ldr	r3, [r7, #4]
3419ee94:	4618      	mov	r0, r3
3419ee96:	f7ff ffde 	bl	3419ee56 <QueRemove>
	QueRemove(&opncb->resq);
3419ee9a:	687b      	ldr	r3, [r7, #4]
3419ee9c:	3308      	adds	r3, #8
3419ee9e:	4618      	mov	r0, r3
3419eea0:	f7ff ffd9 	bl	3419ee56 <QueRemove>

	if ( free ) {
3419eea4:	683b      	ldr	r3, [r7, #0]
3419eea6:	2b00      	cmp	r3, #0
3419eea8:	d004      	beq.n	3419eeb4 <knl_delOpnCB+0x2c>
		QueInsert(&opncb->q, &knl_FreeOpnCB);
3419eeaa:	687b      	ldr	r3, [r7, #4]
3419eeac:	4905      	ldr	r1, [pc, #20]	@ (3419eec4 <knl_delOpnCB+0x3c>)
3419eeae:	4618      	mov	r0, r3
3419eeb0:	f7ff ffb8 	bl	3419ee24 <QueInsert>
	}
	opncb->resid = 0;
3419eeb4:	687b      	ldr	r3, [r7, #4]
3419eeb6:	2200      	movs	r2, #0
3419eeb8:	611a      	str	r2, [r3, #16]
}
3419eeba:	bf00      	nop
3419eebc:	3708      	adds	r7, #8
3419eebe:	46bd      	mov	sp, r7
3419eec0:	bd80      	pop	{r7, pc}
3419eec2:	bf00      	nop
3419eec4:	341c3d2c 	.word	0x341c3d2c

3419eec8 <knl_delReqCB>:

/*
 * Free request management block
 */
EXPORT void knl_delReqCB( ReqCB *reqcb )
{
3419eec8:	b580      	push	{r7, lr}
3419eeca:	b082      	sub	sp, #8
3419eecc:	af00      	add	r7, sp, #0
3419eece:	6078      	str	r0, [r7, #4]
	QueRemove(&reqcb->q);
3419eed0:	687b      	ldr	r3, [r7, #4]
3419eed2:	4618      	mov	r0, r3
3419eed4:	f7ff ffbf 	bl	3419ee56 <QueRemove>

	QueInsert(&reqcb->q, &knl_FreeReqCB);
3419eed8:	687b      	ldr	r3, [r7, #4]
3419eeda:	4905      	ldr	r1, [pc, #20]	@ (3419eef0 <knl_delReqCB+0x28>)
3419eedc:	4618      	mov	r0, r3
3419eede:	f7ff ffa1 	bl	3419ee24 <QueInsert>
	reqcb->opncb = NULL;
3419eee2:	687b      	ldr	r3, [r7, #4]
3419eee4:	2200      	movs	r2, #0
3419eee6:	609a      	str	r2, [r3, #8]
}
3419eee8:	bf00      	nop
3419eeea:	3708      	adds	r7, #8
3419eeec:	46bd      	mov	sp, r7
3419eeee:	bd80      	pop	{r7, pc}
3419eef0:	341c4074 	.word	0x341c4074

3419eef4 <knl_chkopen>:

/*
 * TRUE if specified device is open.
 */
EXPORT BOOL knl_chkopen( DevCB *devcb, INT unitno )
{
3419eef4:	b480      	push	{r7}
3419eef6:	b085      	sub	sp, #20
3419eef8:	af00      	add	r7, sp, #0
3419eefa:	6078      	str	r0, [r7, #4]
3419eefc:	6039      	str	r1, [r7, #0]
	QUEUE	*q;

	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
3419eefe:	687b      	ldr	r3, [r7, #4]
3419ef00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419ef02:	60fb      	str	r3, [r7, #12]
3419ef04:	e009      	b.n	3419ef1a <knl_chkopen+0x26>
		if ( ((OpnCB*)q)->unitno == unitno ) {
3419ef06:	68fb      	ldr	r3, [r7, #12]
3419ef08:	699b      	ldr	r3, [r3, #24]
3419ef0a:	683a      	ldr	r2, [r7, #0]
3419ef0c:	429a      	cmp	r2, r3
3419ef0e:	d101      	bne.n	3419ef14 <knl_chkopen+0x20>
			return TRUE;
3419ef10:	2301      	movs	r3, #1
3419ef12:	e008      	b.n	3419ef26 <knl_chkopen+0x32>
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
3419ef14:	68fb      	ldr	r3, [r7, #12]
3419ef16:	681b      	ldr	r3, [r3, #0]
3419ef18:	60fb      	str	r3, [r7, #12]
3419ef1a:	687b      	ldr	r3, [r7, #4]
3419ef1c:	3340      	adds	r3, #64	@ 0x40
3419ef1e:	68fa      	ldr	r2, [r7, #12]
3419ef20:	429a      	cmp	r2, r3
3419ef22:	d1f0      	bne.n	3419ef06 <knl_chkopen+0x12>
		}
	}
	return FALSE;
3419ef24:	2300      	movs	r3, #0
}
3419ef26:	4618      	mov	r0, r3
3419ef28:	3714      	adds	r7, #20
3419ef2a:	46bd      	mov	sp, r7
3419ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ef30:	4770      	bx	lr
	...

3419ef34 <abort_allrequest>:

/*
 * Abort all requests
 */
LOCAL void abort_allrequest( OpnCB *opncb )
{
3419ef34:	b590      	push	{r4, r7, lr}
3419ef36:	b089      	sub	sp, #36	@ 0x24
3419ef38:	af00      	add	r7, sp, #0
3419ef3a:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;
	ReqCB	*reqcb;
	QUEUE	*q;

	/* If 'execfn' and 'waitfn' are called, execute abort request. */
	LockDM();
3419ef3c:	2100      	movs	r1, #0
3419ef3e:	4876      	ldr	r0, [pc, #472]	@ (3419f118 <abort_allrequest+0x1e4>)
3419ef40:	f002 feb1 	bl	341a1ca6 <MLock>

	devcb = opncb->devcb;
3419ef44:	687b      	ldr	r3, [r7, #4]
3419ef46:	695b      	ldr	r3, [r3, #20]
3419ef48:	61bb      	str	r3, [r7, #24]
	abortfn = (ABTFN)devcb->ddev.abortfn;
3419ef4a:	69bb      	ldr	r3, [r7, #24]
3419ef4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419ef4e:	617b      	str	r3, [r7, #20]
	waitfn  = (WAIFN)devcb->ddev.waitfn;
3419ef50:	69bb      	ldr	r3, [r7, #24]
3419ef52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3419ef54:	613b      	str	r3, [r7, #16]
	exinf   = devcb->ddev.exinf;
3419ef56:	69bb      	ldr	r3, [r7, #24]
3419ef58:	695b      	ldr	r3, [r3, #20]
3419ef5a:	60fb      	str	r3, [r7, #12]

	opncb->abort_tskid = tk_get_tid();
3419ef5c:	f001 ffd0 	bl	341a0f00 <tk_get_tid>
3419ef60:	4602      	mov	r2, r0
3419ef62:	687b      	ldr	r3, [r7, #4]
3419ef64:	635a      	str	r2, [r3, #52]	@ 0x34
	opncb->abort_cnt = 0;
3419ef66:	687b      	ldr	r3, [r7, #4]
3419ef68:	2200      	movs	r2, #0
3419ef6a:	639a      	str	r2, [r3, #56]	@ 0x38

	if ( opncb->nwaireq > 0 ) {
3419ef6c:	687b      	ldr	r3, [r7, #4]
3419ef6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419ef70:	2b00      	cmp	r3, #0
3419ef72:	dd2e      	ble.n	3419efd2 <abort_allrequest+0x9e>
		/* Multiple requests wait */
		reqcb = DEVREQ_REQCB(opncb->waireqlst);
3419ef74:	687b      	ldr	r3, [r7, #4]
3419ef76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419ef78:	3b10      	subs	r3, #16
3419ef7a:	60bb      	str	r3, [r7, #8]

		/* Device driver call */
		DISABLE_INTERRUPT;
3419ef7c:	f003 fd85 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode++;
3419ef80:	4b66      	ldr	r3, [pc, #408]	@ (3419f11c <abort_allrequest+0x1e8>)
3419ef82:	681b      	ldr	r3, [r3, #0]
3419ef84:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419ef88:	b292      	uxth	r2, r2
3419ef8a:	3201      	adds	r2, #1
3419ef8c:	b292      	uxth	r2, r2
3419ef8e:	b212      	sxth	r2, r2
3419ef90:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419ef92:	2000      	movs	r0, #0
3419ef94:	f003 fd5d 	bl	341a2a52 <set_basepri>
		(*abortfn)(reqcb->tskid, opncb->waireqlst, opncb->nwaireq, exinf);
3419ef98:	68bb      	ldr	r3, [r7, #8]
3419ef9a:	68d8      	ldr	r0, [r3, #12]
3419ef9c:	687b      	ldr	r3, [r7, #4]
3419ef9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3419efa0:	687b      	ldr	r3, [r7, #4]
3419efa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3419efa4:	697c      	ldr	r4, [r7, #20]
3419efa6:	68fb      	ldr	r3, [r7, #12]
3419efa8:	47a0      	blx	r4
		DISABLE_INTERRUPT;
3419efaa:	f003 fd6e 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode--;
3419efae:	4b5b      	ldr	r3, [pc, #364]	@ (3419f11c <abort_allrequest+0x1e8>)
3419efb0:	681b      	ldr	r3, [r3, #0]
3419efb2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419efb6:	b292      	uxth	r2, r2
3419efb8:	3a01      	subs	r2, #1
3419efba:	b292      	uxth	r2, r2
3419efbc:	b212      	sxth	r2, r2
3419efbe:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419efc0:	2000      	movs	r0, #0
3419efc2:	f003 fd46 	bl	341a2a52 <set_basepri>

		opncb->abort_cnt++;
3419efc6:	687b      	ldr	r3, [r7, #4]
3419efc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419efca:	1c5a      	adds	r2, r3, #1
3419efcc:	687b      	ldr	r3, [r7, #4]
3419efce:	639a      	str	r2, [r3, #56]	@ 0x38
3419efd0:	e042      	b.n	3419f058 <abort_allrequest+0x124>
	} else {
		/* Start request or single request wait */
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
3419efd2:	687b      	ldr	r3, [r7, #4]
3419efd4:	6a1b      	ldr	r3, [r3, #32]
3419efd6:	61fb      	str	r3, [r7, #28]
3419efd8:	e039      	b.n	3419f04e <abort_allrequest+0x11a>
			reqcb = (ReqCB*)q;
3419efda:	69fb      	ldr	r3, [r7, #28]
3419efdc:	60bb      	str	r3, [r7, #8]
			if ( reqcb->tskid == 0 ) {
3419efde:	68bb      	ldr	r3, [r7, #8]
3419efe0:	68db      	ldr	r3, [r3, #12]
3419efe2:	2b00      	cmp	r3, #0
3419efe4:	d02f      	beq.n	3419f046 <abort_allrequest+0x112>
				continue;
			}

			reqcb->req.abort = TRUE;
3419efe6:	68ba      	ldr	r2, [r7, #8]
3419efe8:	7f13      	ldrb	r3, [r2, #28]
3419efea:	f043 0310 	orr.w	r3, r3, #16
3419efee:	7713      	strb	r3, [r2, #28]

			/* Device driver call */
			DISABLE_INTERRUPT;
3419eff0:	f003 fd4b 	bl	341a2a8a <disint>
			knl_ctxtsk->sysmode++;
3419eff4:	4b49      	ldr	r3, [pc, #292]	@ (3419f11c <abort_allrequest+0x1e8>)
3419eff6:	681b      	ldr	r3, [r3, #0]
3419eff8:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419effc:	b292      	uxth	r2, r2
3419effe:	3201      	adds	r2, #1
3419f000:	b292      	uxth	r2, r2
3419f002:	b212      	sxth	r2, r2
3419f004:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
3419f006:	2000      	movs	r0, #0
3419f008:	f003 fd23 	bl	341a2a52 <set_basepri>
			(*abortfn)(reqcb->tskid, &reqcb->req, 1, exinf);
3419f00c:	68bb      	ldr	r3, [r7, #8]
3419f00e:	68d8      	ldr	r0, [r3, #12]
3419f010:	68bb      	ldr	r3, [r7, #8]
3419f012:	f103 0110 	add.w	r1, r3, #16
3419f016:	697c      	ldr	r4, [r7, #20]
3419f018:	68fb      	ldr	r3, [r7, #12]
3419f01a:	2201      	movs	r2, #1
3419f01c:	47a0      	blx	r4
			DISABLE_INTERRUPT;
3419f01e:	f003 fd34 	bl	341a2a8a <disint>
			knl_ctxtsk->sysmode--;
3419f022:	4b3e      	ldr	r3, [pc, #248]	@ (3419f11c <abort_allrequest+0x1e8>)
3419f024:	681b      	ldr	r3, [r3, #0]
3419f026:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419f02a:	b292      	uxth	r2, r2
3419f02c:	3a01      	subs	r2, #1
3419f02e:	b292      	uxth	r2, r2
3419f030:	b212      	sxth	r2, r2
3419f032:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
3419f034:	2000      	movs	r0, #0
3419f036:	f003 fd0c 	bl	341a2a52 <set_basepri>

			opncb->abort_cnt++;
3419f03a:	687b      	ldr	r3, [r7, #4]
3419f03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419f03e:	1c5a      	adds	r2, r3, #1
3419f040:	687b      	ldr	r3, [r7, #4]
3419f042:	639a      	str	r2, [r3, #56]	@ 0x38
3419f044:	e000      	b.n	3419f048 <abort_allrequest+0x114>
				continue;
3419f046:	bf00      	nop
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
3419f048:	69fb      	ldr	r3, [r7, #28]
3419f04a:	681b      	ldr	r3, [r3, #0]
3419f04c:	61fb      	str	r3, [r7, #28]
3419f04e:	687b      	ldr	r3, [r7, #4]
3419f050:	3320      	adds	r3, #32
3419f052:	69fa      	ldr	r2, [r7, #28]
3419f054:	429a      	cmp	r2, r3
3419f056:	d1c0      	bne.n	3419efda <abort_allrequest+0xa6>
		}
	}

	UnlockDM();
3419f058:	2100      	movs	r1, #0
3419f05a:	482f      	ldr	r0, [pc, #188]	@ (3419f118 <abort_allrequest+0x1e4>)
3419f05c:	f002 fe33 	bl	341a1cc6 <MUnlock>

	if ( opncb->abort_cnt > 0 ) {
3419f060:	687b      	ldr	r3, [r7, #4]
3419f062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419f064:	2b00      	cmp	r3, #0
3419f066:	dd07      	ble.n	3419f078 <abort_allrequest+0x144>
		/* Wait for completion of abort request processing */
		tk_wai_sem(opncb->abort_semid, 1, TMO_FEVR);
3419f068:	687b      	ldr	r3, [r7, #4]
3419f06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419f06c:	f04f 32ff 	mov.w	r2, #4294967295
3419f070:	2101      	movs	r1, #1
3419f072:	4618      	mov	r0, r3
3419f074:	f001 f9fe 	bl	341a0474 <tk_wai_sem>
	}
	opncb->abort_tskid = 0;
3419f078:	687b      	ldr	r3, [r7, #4]
3419f07a:	2200      	movs	r2, #0
3419f07c:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Abort remaining requests and wait for completion */
	LockDM();
3419f07e:	2100      	movs	r1, #0
3419f080:	4825      	ldr	r0, [pc, #148]	@ (3419f118 <abort_allrequest+0x1e4>)
3419f082:	f002 fe10 	bl	341a1ca6 <MLock>
	while ( !isQueEmpty(&opncb->requestq) ) {
3419f086:	e037      	b.n	3419f0f8 <abort_allrequest+0x1c4>
		reqcb = (ReqCB*)opncb->requestq.next;
3419f088:	687b      	ldr	r3, [r7, #4]
3419f08a:	6a1b      	ldr	r3, [r3, #32]
3419f08c:	60bb      	str	r3, [r7, #8]
		reqcb->req.abort = TRUE;
3419f08e:	68ba      	ldr	r2, [r7, #8]
3419f090:	7f13      	ldrb	r3, [r2, #28]
3419f092:	f043 0310 	orr.w	r3, r3, #16
3419f096:	7713      	strb	r3, [r2, #28]

		UnlockDM();
3419f098:	2100      	movs	r1, #0
3419f09a:	481f      	ldr	r0, [pc, #124]	@ (3419f118 <abort_allrequest+0x1e4>)
3419f09c:	f002 fe13 	bl	341a1cc6 <MUnlock>

		/* Device driver call */
		DISABLE_INTERRUPT;
3419f0a0:	f003 fcf3 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode++;
3419f0a4:	4b1d      	ldr	r3, [pc, #116]	@ (3419f11c <abort_allrequest+0x1e8>)
3419f0a6:	681b      	ldr	r3, [r3, #0]
3419f0a8:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419f0ac:	b292      	uxth	r2, r2
3419f0ae:	3201      	adds	r2, #1
3419f0b0:	b292      	uxth	r2, r2
3419f0b2:	b212      	sxth	r2, r2
3419f0b4:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419f0b6:	2000      	movs	r0, #0
3419f0b8:	f003 fccb 	bl	341a2a52 <set_basepri>
		(*waitfn)(&reqcb->req, 1, TMO_FEVR, exinf);
3419f0bc:	68bb      	ldr	r3, [r7, #8]
3419f0be:	f103 0010 	add.w	r0, r3, #16
3419f0c2:	693c      	ldr	r4, [r7, #16]
3419f0c4:	68fb      	ldr	r3, [r7, #12]
3419f0c6:	f04f 32ff 	mov.w	r2, #4294967295
3419f0ca:	2101      	movs	r1, #1
3419f0cc:	47a0      	blx	r4
		DISABLE_INTERRUPT;
3419f0ce:	f003 fcdc 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode--;
3419f0d2:	4b12      	ldr	r3, [pc, #72]	@ (3419f11c <abort_allrequest+0x1e8>)
3419f0d4:	681b      	ldr	r3, [r3, #0]
3419f0d6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419f0da:	b292      	uxth	r2, r2
3419f0dc:	3a01      	subs	r2, #1
3419f0de:	b292      	uxth	r2, r2
3419f0e0:	b212      	sxth	r2, r2
3419f0e2:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419f0e4:	2000      	movs	r0, #0
3419f0e6:	f003 fcb4 	bl	341a2a52 <set_basepri>

		LockDM();
3419f0ea:	2100      	movs	r1, #0
3419f0ec:	480a      	ldr	r0, [pc, #40]	@ (3419f118 <abort_allrequest+0x1e4>)
3419f0ee:	f002 fdda 	bl	341a1ca6 <MLock>

		/* Unregister completed request */
		knl_delReqCB(reqcb);
3419f0f2:	68b8      	ldr	r0, [r7, #8]
3419f0f4:	f7ff fee8 	bl	3419eec8 <knl_delReqCB>
	while ( !isQueEmpty(&opncb->requestq) ) {
3419f0f8:	687b      	ldr	r3, [r7, #4]
3419f0fa:	3320      	adds	r3, #32
3419f0fc:	4618      	mov	r0, r3
3419f0fe:	f7ff fe7f 	bl	3419ee00 <isQueEmpty>
3419f102:	4603      	mov	r3, r0
3419f104:	2b00      	cmp	r3, #0
3419f106:	d0bf      	beq.n	3419f088 <abort_allrequest+0x154>
	}
	UnlockDM();
3419f108:	2100      	movs	r1, #0
3419f10a:	4803      	ldr	r0, [pc, #12]	@ (3419f118 <abort_allrequest+0x1e4>)
3419f10c:	f002 fddb 	bl	341a1cc6 <MUnlock>
}
3419f110:	bf00      	nop
3419f112:	3724      	adds	r7, #36	@ 0x24
3419f114:	46bd      	mov	sp, r7
3419f116:	bd90      	pop	{r4, r7, pc}
3419f118:	341c36c8 	.word	0x341c36c8
3419f11c:	341c4998 	.word	0x341c4998

3419f120 <knl_close_device>:

/*
 * Device close processing
 */
EXPORT ER knl_close_device( OpnCB *opncb, UINT option )
{
3419f120:	b580      	push	{r7, lr}
3419f122:	b088      	sub	sp, #32
3419f124:	af00      	add	r7, sp, #0
3419f126:	6078      	str	r0, [r7, #4]
3419f128:	6039      	str	r1, [r7, #0]
	CLSFN	closefn;
	void	*exinf;
	ID	devid;
	DevCB	*devcb;
	INT	unitno;
	ER	ercd = E_OK;
3419f12a:	2300      	movs	r3, #0
3419f12c:	61bb      	str	r3, [r7, #24]

	/* Abort all requests during processing */
	abort_allrequest(opncb);
3419f12e:	6878      	ldr	r0, [r7, #4]
3419f130:	f7ff ff00 	bl	3419ef34 <abort_allrequest>

	LockDM();
3419f134:	2100      	movs	r1, #0
3419f136:	4839      	ldr	r0, [pc, #228]	@ (3419f21c <knl_close_device+0xfc>)
3419f138:	f002 fdb5 	bl	341a1ca6 <MLock>

	devcb  = opncb->devcb;
3419f13c:	687b      	ldr	r3, [r7, #4]
3419f13e:	695b      	ldr	r3, [r3, #20]
3419f140:	617b      	str	r3, [r7, #20]
	unitno = opncb->unitno;
3419f142:	687b      	ldr	r3, [r7, #4]
3419f144:	699b      	ldr	r3, [r3, #24]
3419f146:	613b      	str	r3, [r7, #16]
	closefn = (CLSFN)devcb->ddev.closefn;
3419f148:	697b      	ldr	r3, [r7, #20]
3419f14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419f14c:	61fb      	str	r3, [r7, #28]
	exinf = devcb->ddev.exinf;
3419f14e:	697b      	ldr	r3, [r7, #20]
3419f150:	695b      	ldr	r3, [r3, #20]
3419f152:	60fb      	str	r3, [r7, #12]
	devid = DEVID(devcb, unitno);
3419f154:	697b      	ldr	r3, [r7, #20]
3419f156:	4a32      	ldr	r2, [pc, #200]	@ (3419f220 <knl_close_device+0x100>)
3419f158:	1a9b      	subs	r3, r3, r2
3419f15a:	10db      	asrs	r3, r3, #3
3419f15c:	4a31      	ldr	r2, [pc, #196]	@ (3419f224 <knl_close_device+0x104>)
3419f15e:	fb02 f303 	mul.w	r3, r2, r3
3419f162:	3301      	adds	r3, #1
3419f164:	021b      	lsls	r3, r3, #8
3419f166:	693a      	ldr	r2, [r7, #16]
3419f168:	4413      	add	r3, r2
3419f16a:	60bb      	str	r3, [r7, #8]

	/* Delete semaphore for completion check of abortion */
	tk_del_sem(opncb->abort_semid);
3419f16c:	687b      	ldr	r3, [r7, #4]
3419f16e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3419f170:	4618      	mov	r0, r3
3419f172:	f001 f8df 	bl	341a0334 <tk_del_sem>

	/* Free open management block */
	knl_delOpnCB(opncb, FALSE);
3419f176:	2100      	movs	r1, #0
3419f178:	6878      	ldr	r0, [r7, #4]
3419f17a:	f7ff fe85 	bl	3419ee88 <knl_delOpnCB>

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) ) {
3419f17e:	6939      	ldr	r1, [r7, #16]
3419f180:	6978      	ldr	r0, [r7, #20]
3419f182:	f7ff feb7 	bl	3419eef4 <knl_chkopen>
3419f186:	4603      	mov	r3, r0
3419f188:	2b00      	cmp	r3, #0
3419f18a:	d00b      	beq.n	3419f1a4 <knl_close_device+0x84>
		option &= ~TD_EJECT;
3419f18c:	683b      	ldr	r3, [r7, #0]
3419f18e:	f023 0301 	bic.w	r3, r3, #1
3419f192:	603b      	str	r3, [r7, #0]
		if ( (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
3419f194:	697b      	ldr	r3, [r7, #20]
3419f196:	699b      	ldr	r3, [r3, #24]
3419f198:	f003 0301 	and.w	r3, r3, #1
3419f19c:	2b00      	cmp	r3, #0
3419f19e:	d101      	bne.n	3419f1a4 <knl_close_device+0x84>
			closefn = NULL;
3419f1a0:	2300      	movs	r3, #0
3419f1a2:	61fb      	str	r3, [r7, #28]
		}
	}

	UnlockDM();
3419f1a4:	2100      	movs	r1, #0
3419f1a6:	481d      	ldr	r0, [pc, #116]	@ (3419f21c <knl_close_device+0xfc>)
3419f1a8:	f002 fd8d 	bl	341a1cc6 <MUnlock>

	if ( closefn != NULL ) {
3419f1ac:	69fb      	ldr	r3, [r7, #28]
3419f1ae:	2b00      	cmp	r3, #0
3419f1b0:	d021      	beq.n	3419f1f6 <knl_close_device+0xd6>
		/* Device driver call */
		DISABLE_INTERRUPT;
3419f1b2:	f003 fc6a 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode++;
3419f1b6:	4b1c      	ldr	r3, [pc, #112]	@ (3419f228 <knl_close_device+0x108>)
3419f1b8:	681b      	ldr	r3, [r3, #0]
3419f1ba:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419f1be:	b292      	uxth	r2, r2
3419f1c0:	3201      	adds	r2, #1
3419f1c2:	b292      	uxth	r2, r2
3419f1c4:	b212      	sxth	r2, r2
3419f1c6:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419f1c8:	2000      	movs	r0, #0
3419f1ca:	f003 fc42 	bl	341a2a52 <set_basepri>
		ercd = (*closefn)(devid, option, exinf);
3419f1ce:	69fb      	ldr	r3, [r7, #28]
3419f1d0:	68fa      	ldr	r2, [r7, #12]
3419f1d2:	6839      	ldr	r1, [r7, #0]
3419f1d4:	68b8      	ldr	r0, [r7, #8]
3419f1d6:	4798      	blx	r3
3419f1d8:	61b8      	str	r0, [r7, #24]
		DISABLE_INTERRUPT;
3419f1da:	f003 fc56 	bl	341a2a8a <disint>
		knl_ctxtsk->sysmode--;
3419f1de:	4b12      	ldr	r3, [pc, #72]	@ (3419f228 <knl_close_device+0x108>)
3419f1e0:	681b      	ldr	r3, [r3, #0]
3419f1e2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
3419f1e6:	b292      	uxth	r2, r2
3419f1e8:	3a01      	subs	r2, #1
3419f1ea:	b292      	uxth	r2, r2
3419f1ec:	b212      	sxth	r2, r2
3419f1ee:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
3419f1f0:	2000      	movs	r0, #0
3419f1f2:	f003 fc2e 	bl	341a2a52 <set_basepri>
	}

	LockDM();
3419f1f6:	2100      	movs	r1, #0
3419f1f8:	4808      	ldr	r0, [pc, #32]	@ (3419f21c <knl_close_device+0xfc>)
3419f1fa:	f002 fd54 	bl	341a1ca6 <MLock>
	/* Return open management block to FreeQue */
	QueInsert(&opncb->q, &knl_FreeOpnCB);
3419f1fe:	687b      	ldr	r3, [r7, #4]
3419f200:	490a      	ldr	r1, [pc, #40]	@ (3419f22c <knl_close_device+0x10c>)
3419f202:	4618      	mov	r0, r3
3419f204:	f7ff fe0e 	bl	3419ee24 <QueInsert>
	UnlockDM();
3419f208:	2100      	movs	r1, #0
3419f20a:	4804      	ldr	r0, [pc, #16]	@ (3419f21c <knl_close_device+0xfc>)
3419f20c:	f002 fd5b 	bl	341a1cc6 <MUnlock>

	return ercd;
3419f210:	69bb      	ldr	r3, [r7, #24]
}
3419f212:	4618      	mov	r0, r3
3419f214:	3720      	adds	r7, #32
3419f216:	46bd      	mov	sp, r7
3419f218:	bd80      	pop	{r7, pc}
3419f21a:	bf00      	nop
3419f21c:	341c36c8 	.word	0x341c36c8
3419f220:	341c36dc 	.word	0x341c36dc
3419f224:	38e38e39 	.word	0x38e38e39
3419f228:	341c4998 	.word	0x341c4998
3419f22c:	341c3d2c 	.word	0x341c3d2c

3419f230 <knl_devmgr_startup>:

/*
 * Device management startup function
 */
EXPORT void knl_devmgr_startup( void )
{
3419f230:	b580      	push	{r7, lr}
3419f232:	af00      	add	r7, sp, #0
	LockDM();
3419f234:	2100      	movs	r1, #0
3419f236:	4807      	ldr	r0, [pc, #28]	@ (3419f254 <knl_devmgr_startup+0x24>)
3419f238:	f002 fd35 	bl	341a1ca6 <MLock>

	/* Initialization of open device management queue */
	QueInit(&(knl_resource_control_block.openq));
3419f23c:	4806      	ldr	r0, [pc, #24]	@ (3419f258 <knl_devmgr_startup+0x28>)
3419f23e:	f7ff fdcf 	bl	3419ede0 <QueInit>
	knl_resource_control_block.dissus = 0;
3419f242:	4b05      	ldr	r3, [pc, #20]	@ (3419f258 <knl_devmgr_startup+0x28>)
3419f244:	2200      	movs	r2, #0
3419f246:	609a      	str	r2, [r3, #8]
	
	UnlockDM();
3419f248:	2100      	movs	r1, #0
3419f24a:	4802      	ldr	r0, [pc, #8]	@ (3419f254 <knl_devmgr_startup+0x24>)
3419f24c:	f002 fd3b 	bl	341a1cc6 <MUnlock>

	return;
3419f250:	bf00      	nop
}
3419f252:	bd80      	pop	{r7, pc}
3419f254:	341c36c8 	.word	0x341c36c8
3419f258:	341c407c 	.word	0x341c407c

3419f25c <knl_devmgr_cleanup>:

/*
 * Device management cleanup function
 */
EXPORT void knl_devmgr_cleanup( void )
{
3419f25c:	b580      	push	{r7, lr}
3419f25e:	b082      	sub	sp, #8
3419f260:	af00      	add	r7, sp, #0
	OpnCB	*opncb;

	/* Do nothing if it is not used even once */
	if ( knl_resource_control_block.openq.next == NULL ) {
3419f262:	4b1a      	ldr	r3, [pc, #104]	@ (3419f2cc <knl_devmgr_cleanup+0x70>)
3419f264:	681b      	ldr	r3, [r3, #0]
3419f266:	2b00      	cmp	r3, #0
3419f268:	d02c      	beq.n	3419f2c4 <knl_devmgr_cleanup+0x68>
		return;
	}

	LockDM();
3419f26a:	2100      	movs	r1, #0
3419f26c:	4818      	ldr	r0, [pc, #96]	@ (3419f2d0 <knl_devmgr_cleanup+0x74>)
3419f26e:	f002 fd1a 	bl	341a1ca6 <MLock>

	/* Free suspend disable request */
	knl_DisSusCnt -= knl_resource_control_block.dissus;
3419f272:	4b18      	ldr	r3, [pc, #96]	@ (3419f2d4 <knl_devmgr_cleanup+0x78>)
3419f274:	681a      	ldr	r2, [r3, #0]
3419f276:	4b15      	ldr	r3, [pc, #84]	@ (3419f2cc <knl_devmgr_cleanup+0x70>)
3419f278:	689b      	ldr	r3, [r3, #8]
3419f27a:	1ad3      	subs	r3, r2, r3
3419f27c:	4a15      	ldr	r2, [pc, #84]	@ (3419f2d4 <knl_devmgr_cleanup+0x78>)
3419f27e:	6013      	str	r3, [r2, #0]
	knl_resource_control_block.dissus = 0;
3419f280:	4b12      	ldr	r3, [pc, #72]	@ (3419f2cc <knl_devmgr_cleanup+0x70>)
3419f282:	2200      	movs	r2, #0
3419f284:	609a      	str	r2, [r3, #8]

	/* Close all open devices */
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
3419f286:	e012      	b.n	3419f2ae <knl_devmgr_cleanup+0x52>
		opncb = RESQ_OPNCB(knl_resource_control_block.openq.next);
3419f288:	4b10      	ldr	r3, [pc, #64]	@ (3419f2cc <knl_devmgr_cleanup+0x70>)
3419f28a:	681b      	ldr	r3, [r3, #0]
3419f28c:	3b08      	subs	r3, #8
3419f28e:	607b      	str	r3, [r7, #4]

		/* Indicate that it is during close processing */
		opncb->resid = 0;
3419f290:	687b      	ldr	r3, [r7, #4]
3419f292:	2200      	movs	r2, #0
3419f294:	611a      	str	r2, [r3, #16]

		UnlockDM();
3419f296:	2100      	movs	r1, #0
3419f298:	480d      	ldr	r0, [pc, #52]	@ (3419f2d0 <knl_devmgr_cleanup+0x74>)
3419f29a:	f002 fd14 	bl	341a1cc6 <MUnlock>

		/* Device close processing */
		knl_close_device(opncb, 0);
3419f29e:	2100      	movs	r1, #0
3419f2a0:	6878      	ldr	r0, [r7, #4]
3419f2a2:	f7ff ff3d 	bl	3419f120 <knl_close_device>

		LockDM();
3419f2a6:	2100      	movs	r1, #0
3419f2a8:	4809      	ldr	r0, [pc, #36]	@ (3419f2d0 <knl_devmgr_cleanup+0x74>)
3419f2aa:	f002 fcfc 	bl	341a1ca6 <MLock>
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
3419f2ae:	4807      	ldr	r0, [pc, #28]	@ (3419f2cc <knl_devmgr_cleanup+0x70>)
3419f2b0:	f7ff fda6 	bl	3419ee00 <isQueEmpty>
3419f2b4:	4603      	mov	r3, r0
3419f2b6:	2b00      	cmp	r3, #0
3419f2b8:	d0e6      	beq.n	3419f288 <knl_devmgr_cleanup+0x2c>
	}
	UnlockDM();
3419f2ba:	2100      	movs	r1, #0
3419f2bc:	4804      	ldr	r0, [pc, #16]	@ (3419f2d0 <knl_devmgr_cleanup+0x74>)
3419f2be:	f002 fd02 	bl	341a1cc6 <MUnlock>

	return;
3419f2c2:	e000      	b.n	3419f2c6 <knl_devmgr_cleanup+0x6a>
		return;
3419f2c4:	bf00      	nop
}
3419f2c6:	3708      	adds	r7, #8
3419f2c8:	46bd      	mov	sp, r7
3419f2ca:	bd80      	pop	{r7, pc}
3419f2cc:	341c407c 	.word	0x341c407c
3419f2d0:	341c36c8 	.word	0x341c36c8
3419f2d4:	341c2818 	.word	0x341c2818

3419f2d8 <knl_initDevIO>:

/*
 * Initialization sequence of device input/output-related
 */
EXPORT ER knl_initDevIO( void )
{
3419f2d8:	b580      	push	{r7, lr}
3419f2da:	b082      	sub	sp, #8
3419f2dc:	af00      	add	r7, sp, #0
	INT	i;

	QueInit(&knl_FreeOpnCB);
3419f2de:	481f      	ldr	r0, [pc, #124]	@ (3419f35c <knl_initDevIO+0x84>)
3419f2e0:	f7ff fd7e 	bl	3419ede0 <QueInit>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
3419f2e4:	2300      	movs	r3, #0
3419f2e6:	607b      	str	r3, [r7, #4]
3419f2e8:	e011      	b.n	3419f30e <knl_initDevIO+0x36>
		knl_OpnCBtbl[i].resid = 0;
3419f2ea:	4a1d      	ldr	r2, [pc, #116]	@ (3419f360 <knl_initDevIO+0x88>)
3419f2ec:	687b      	ldr	r3, [r7, #4]
3419f2ee:	019b      	lsls	r3, r3, #6
3419f2f0:	4413      	add	r3, r2
3419f2f2:	3310      	adds	r3, #16
3419f2f4:	2200      	movs	r2, #0
3419f2f6:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_OpnCBtbl[i].q, &knl_FreeOpnCB);
3419f2f8:	687b      	ldr	r3, [r7, #4]
3419f2fa:	019b      	lsls	r3, r3, #6
3419f2fc:	4a18      	ldr	r2, [pc, #96]	@ (3419f360 <knl_initDevIO+0x88>)
3419f2fe:	4413      	add	r3, r2
3419f300:	4916      	ldr	r1, [pc, #88]	@ (3419f35c <knl_initDevIO+0x84>)
3419f302:	4618      	mov	r0, r3
3419f304:	f7ff fd8e 	bl	3419ee24 <QueInsert>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
3419f308:	687b      	ldr	r3, [r7, #4]
3419f30a:	3301      	adds	r3, #1
3419f30c:	607b      	str	r3, [r7, #4]
3419f30e:	687b      	ldr	r3, [r7, #4]
3419f310:	2b0f      	cmp	r3, #15
3419f312:	ddea      	ble.n	3419f2ea <knl_initDevIO+0x12>
	}

	QueInit(&knl_FreeReqCB);
3419f314:	4813      	ldr	r0, [pc, #76]	@ (3419f364 <knl_initDevIO+0x8c>)
3419f316:	f7ff fd63 	bl	3419ede0 <QueInit>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
3419f31a:	2300      	movs	r3, #0
3419f31c:	607b      	str	r3, [r7, #4]
3419f31e:	e015      	b.n	3419f34c <knl_initDevIO+0x74>
		knl_ReqCBtbl[i].opncb = NULL;
3419f320:	4a11      	ldr	r2, [pc, #68]	@ (3419f368 <knl_initDevIO+0x90>)
3419f322:	687b      	ldr	r3, [r7, #4]
3419f324:	2134      	movs	r1, #52	@ 0x34
3419f326:	fb01 f303 	mul.w	r3, r1, r3
3419f32a:	4413      	add	r3, r2
3419f32c:	3308      	adds	r3, #8
3419f32e:	2200      	movs	r2, #0
3419f330:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_ReqCBtbl[i].q, &knl_FreeReqCB);
3419f332:	687b      	ldr	r3, [r7, #4]
3419f334:	2234      	movs	r2, #52	@ 0x34
3419f336:	fb02 f303 	mul.w	r3, r2, r3
3419f33a:	4a0b      	ldr	r2, [pc, #44]	@ (3419f368 <knl_initDevIO+0x90>)
3419f33c:	4413      	add	r3, r2
3419f33e:	4909      	ldr	r1, [pc, #36]	@ (3419f364 <knl_initDevIO+0x8c>)
3419f340:	4618      	mov	r0, r3
3419f342:	f7ff fd6f 	bl	3419ee24 <QueInsert>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
3419f346:	687b      	ldr	r3, [r7, #4]
3419f348:	3301      	adds	r3, #1
3419f34a:	607b      	str	r3, [r7, #4]
3419f34c:	687b      	ldr	r3, [r7, #4]
3419f34e:	2b0f      	cmp	r3, #15
3419f350:	dde6      	ble.n	3419f320 <knl_initDevIO+0x48>
	}

	return E_OK;
3419f352:	2300      	movs	r3, #0
}
3419f354:	4618      	mov	r0, r3
3419f356:	3708      	adds	r7, #8
3419f358:	46bd      	mov	sp, r7
3419f35a:	bd80      	pop	{r7, pc}
3419f35c:	341c3d2c 	.word	0x341c3d2c
3419f360:	341c392c 	.word	0x341c392c
3419f364:	341c4074 	.word	0x341c4074
3419f368:	341c3d34 	.word	0x341c3d34

3419f36c <knl_finishDevIO>:

/*
 * Finalization sequence of device input/output-related
 */
EXPORT ER knl_finishDevIO( void )
{
3419f36c:	b480      	push	{r7}
3419f36e:	af00      	add	r7, sp, #0
	return E_OK;
3419f370:	2300      	movs	r3, #0
}
3419f372:	4618      	mov	r0, r3
3419f374:	46bd      	mov	sp, r7
3419f376:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f37a:	4770      	bx	lr

3419f37c <QueInit>:
{
3419f37c:	b480      	push	{r7}
3419f37e:	b083      	sub	sp, #12
3419f380:	af00      	add	r7, sp, #0
3419f382:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419f384:	687b      	ldr	r3, [r7, #4]
3419f386:	687a      	ldr	r2, [r7, #4]
3419f388:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419f38a:	687b      	ldr	r3, [r7, #4]
3419f38c:	687a      	ldr	r2, [r7, #4]
3419f38e:	605a      	str	r2, [r3, #4]
}
3419f390:	bf00      	nop
3419f392:	370c      	adds	r7, #12
3419f394:	46bd      	mov	sp, r7
3419f396:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f39a:	4770      	bx	lr

3419f39c <isQueEmpty>:
{
3419f39c:	b480      	push	{r7}
3419f39e:	b083      	sub	sp, #12
3419f3a0:	af00      	add	r7, sp, #0
3419f3a2:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
3419f3a4:	687b      	ldr	r3, [r7, #4]
3419f3a6:	681b      	ldr	r3, [r3, #0]
3419f3a8:	687a      	ldr	r2, [r7, #4]
3419f3aa:	429a      	cmp	r2, r3
3419f3ac:	bf0c      	ite	eq
3419f3ae:	2301      	moveq	r3, #1
3419f3b0:	2300      	movne	r3, #0
3419f3b2:	b2db      	uxtb	r3, r3
}
3419f3b4:	4618      	mov	r0, r3
3419f3b6:	370c      	adds	r7, #12
3419f3b8:	46bd      	mov	sp, r7
3419f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f3be:	4770      	bx	lr

3419f3c0 <QueInsert>:
{
3419f3c0:	b480      	push	{r7}
3419f3c2:	b083      	sub	sp, #12
3419f3c4:	af00      	add	r7, sp, #0
3419f3c6:	6078      	str	r0, [r7, #4]
3419f3c8:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419f3ca:	683b      	ldr	r3, [r7, #0]
3419f3cc:	685a      	ldr	r2, [r3, #4]
3419f3ce:	687b      	ldr	r3, [r7, #4]
3419f3d0:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419f3d2:	687b      	ldr	r3, [r7, #4]
3419f3d4:	683a      	ldr	r2, [r7, #0]
3419f3d6:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419f3d8:	683b      	ldr	r3, [r7, #0]
3419f3da:	685b      	ldr	r3, [r3, #4]
3419f3dc:	687a      	ldr	r2, [r7, #4]
3419f3de:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419f3e0:	683b      	ldr	r3, [r7, #0]
3419f3e2:	687a      	ldr	r2, [r7, #4]
3419f3e4:	605a      	str	r2, [r3, #4]
}
3419f3e6:	bf00      	nop
3419f3e8:	370c      	adds	r7, #12
3419f3ea:	46bd      	mov	sp, r7
3419f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f3f0:	4770      	bx	lr

3419f3f2 <QueRemoveNext>:
 *	Deletes the entry directly after que from the queue,
 *	and returns the deleted entry.
 *	Returns NULL if que is empty.
 */
Inline QUEUE* QueRemoveNext( QUEUE *que )
{
3419f3f2:	b480      	push	{r7}
3419f3f4:	b085      	sub	sp, #20
3419f3f6:	af00      	add	r7, sp, #0
3419f3f8:	6078      	str	r0, [r7, #4]
	QUEUE	*entry;

	if ( que->next == que ) {
3419f3fa:	687b      	ldr	r3, [r7, #4]
3419f3fc:	681b      	ldr	r3, [r3, #0]
3419f3fe:	687a      	ldr	r2, [r7, #4]
3419f400:	429a      	cmp	r2, r3
3419f402:	d101      	bne.n	3419f408 <QueRemoveNext+0x16>
		return NULL;
3419f404:	2300      	movs	r3, #0
3419f406:	e00b      	b.n	3419f420 <QueRemoveNext+0x2e>
	}

	entry = que->next;
3419f408:	687b      	ldr	r3, [r7, #4]
3419f40a:	681b      	ldr	r3, [r3, #0]
3419f40c:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
3419f40e:	68fb      	ldr	r3, [r7, #12]
3419f410:	681a      	ldr	r2, [r3, #0]
3419f412:	687b      	ldr	r3, [r7, #4]
3419f414:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
3419f416:	68fb      	ldr	r3, [r7, #12]
3419f418:	681b      	ldr	r3, [r3, #0]
3419f41a:	687a      	ldr	r2, [r7, #4]
3419f41c:	605a      	str	r2, [r3, #4]

	return entry;
3419f41e:	68fb      	ldr	r3, [r7, #12]
}
3419f420:	4618      	mov	r0, r3
3419f422:	3714      	adds	r7, #20
3419f424:	46bd      	mov	sp, r7
3419f426:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f42a:	4770      	bx	lr

3419f42c <knl_isTaskIndependent>:

/*
 * If it is the task-independent part, TRUE
 */
Inline BOOL knl_isTaskIndependent( void )
{
3419f42c:	b480      	push	{r7}
3419f42e:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
3419f430:	4b05      	ldr	r3, [pc, #20]	@ (3419f448 <knl_isTaskIndependent+0x1c>)
3419f432:	681b      	ldr	r3, [r3, #0]
3419f434:	2b00      	cmp	r3, #0
3419f436:	bfcc      	ite	gt
3419f438:	2301      	movgt	r3, #1
3419f43a:	2300      	movle	r3, #0
3419f43c:	b2db      	uxtb	r3, r3
}
3419f43e:	4618      	mov	r0, r3
3419f440:	46bd      	mov	sp, r7
3419f442:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f446:	4770      	bx	lr
3419f448:	341c2920 	.word	0x341c2920

3419f44c <knl_eventflag_cond>:

/*
 * Check for event flag wait release condition
 */
Inline BOOL knl_eventflag_cond( FLGCB *flgcb, UINT waiptn, UINT wfmode )
{
3419f44c:	b480      	push	{r7}
3419f44e:	b085      	sub	sp, #20
3419f450:	af00      	add	r7, sp, #0
3419f452:	60f8      	str	r0, [r7, #12]
3419f454:	60b9      	str	r1, [r7, #8]
3419f456:	607a      	str	r2, [r7, #4]
	if ( (wfmode & TWF_ORW) != 0 ) {
3419f458:	687b      	ldr	r3, [r7, #4]
3419f45a:	f003 0301 	and.w	r3, r3, #1
3419f45e:	2b00      	cmp	r3, #0
3419f460:	d009      	beq.n	3419f476 <knl_eventflag_cond+0x2a>
		return ( (flgcb->flgptn & waiptn) != 0 );
3419f462:	68fb      	ldr	r3, [r7, #12]
3419f464:	695a      	ldr	r2, [r3, #20]
3419f466:	68bb      	ldr	r3, [r7, #8]
3419f468:	4013      	ands	r3, r2
3419f46a:	2b00      	cmp	r3, #0
3419f46c:	bf14      	ite	ne
3419f46e:	2301      	movne	r3, #1
3419f470:	2300      	moveq	r3, #0
3419f472:	b2db      	uxtb	r3, r3
3419f474:	e009      	b.n	3419f48a <knl_eventflag_cond+0x3e>
	} else {
		return ( (flgcb->flgptn & waiptn) == waiptn );
3419f476:	68fb      	ldr	r3, [r7, #12]
3419f478:	695a      	ldr	r2, [r3, #20]
3419f47a:	68bb      	ldr	r3, [r7, #8]
3419f47c:	4013      	ands	r3, r2
3419f47e:	68ba      	ldr	r2, [r7, #8]
3419f480:	429a      	cmp	r2, r3
3419f482:	bf0c      	ite	eq
3419f484:	2301      	moveq	r3, #1
3419f486:	2300      	movne	r3, #0
3419f488:	b2db      	uxtb	r3, r3
	}
}
3419f48a:	4618      	mov	r0, r3
3419f48c:	3714      	adds	r7, #20
3419f48e:	46bd      	mov	sp, r7
3419f490:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f494:	4770      	bx	lr
	...

3419f498 <knl_eventflag_initialize>:

/*
 * Initialization of event flag control block 
 */
EXPORT ER knl_eventflag_initialize( void )
{
3419f498:	b580      	push	{r7, lr}
3419f49a:	b082      	sub	sp, #8
3419f49c:	af00      	add	r7, sp, #0
	if ( NUM_FLGID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_flgcb);
3419f49e:	480e      	ldr	r0, [pc, #56]	@ (3419f4d8 <knl_eventflag_initialize+0x40>)
3419f4a0:	f7ff ff6c 	bl	3419f37c <QueInit>
	end = knl_flgcb_table + NUM_FLGID;
3419f4a4:	4b0d      	ldr	r3, [pc, #52]	@ (3419f4dc <knl_eventflag_initialize+0x44>)
3419f4a6:	603b      	str	r3, [r7, #0]
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
3419f4a8:	4b0d      	ldr	r3, [pc, #52]	@ (3419f4e0 <knl_eventflag_initialize+0x48>)
3419f4aa:	607b      	str	r3, [r7, #4]
3419f4ac:	e00a      	b.n	3419f4c4 <knl_eventflag_initialize+0x2c>
		flgcb->flgid = 0;
3419f4ae:	687b      	ldr	r3, [r7, #4]
3419f4b0:	2200      	movs	r2, #0
3419f4b2:	609a      	str	r2, [r3, #8]
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
3419f4b4:	687b      	ldr	r3, [r7, #4]
3419f4b6:	4908      	ldr	r1, [pc, #32]	@ (3419f4d8 <knl_eventflag_initialize+0x40>)
3419f4b8:	4618      	mov	r0, r3
3419f4ba:	f7ff ff81 	bl	3419f3c0 <QueInsert>
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
3419f4be:	687b      	ldr	r3, [r7, #4]
3419f4c0:	3318      	adds	r3, #24
3419f4c2:	607b      	str	r3, [r7, #4]
3419f4c4:	687a      	ldr	r2, [r7, #4]
3419f4c6:	683b      	ldr	r3, [r7, #0]
3419f4c8:	429a      	cmp	r2, r3
3419f4ca:	d3f0      	bcc.n	3419f4ae <knl_eventflag_initialize+0x16>
	}

	return E_OK;
3419f4cc:	2300      	movs	r3, #0
}
3419f4ce:	4618      	mov	r0, r3
3419f4d0:	3708      	adds	r7, #8
3419f4d2:	46bd      	mov	sp, r7
3419f4d4:	bd80      	pop	{r7, pc}
3419f4d6:	bf00      	nop
3419f4d8:	341c4208 	.word	0x341c4208
3419f4dc:	341c4208 	.word	0x341c4208
3419f4e0:	341c4088 	.word	0x341c4088

3419f4e4 <tk_cre_flg>:

/*
 * Create event flag
 */
SYSCALL ID tk_cre_flg( CONST T_CFLG *pk_cflg )
{
3419f4e4:	b580      	push	{r7, lr}
3419f4e6:	b088      	sub	sp, #32
3419f4e8:	af00      	add	r7, sp, #0
3419f4ea:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_FLGATR = {
3419f4ec:	2309      	movs	r3, #9
3419f4ee:	61bb      	str	r3, [r7, #24]
#endif
	FLGCB	*flgcb;
	ID	flgid;
	ER	ercd;

	CHECK_RSATR(pk_cflg->flgatr, VALID_FLGATR);
3419f4f0:	687b      	ldr	r3, [r7, #4]
3419f4f2:	685a      	ldr	r2, [r3, #4]
3419f4f4:	69bb      	ldr	r3, [r7, #24]
3419f4f6:	43db      	mvns	r3, r3
3419f4f8:	4013      	ands	r3, r2
3419f4fa:	2b00      	cmp	r3, #0
3419f4fc:	d002      	beq.n	3419f504 <tk_cre_flg+0x20>
3419f4fe:	f06f 030a 	mvn.w	r3, #10
3419f502:	e03e      	b.n	3419f582 <tk_cre_flg+0x9e>

	BEGIN_CRITICAL_SECTION;
3419f504:	f003 fac1 	bl	341a2a8a <disint>
3419f508:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	flgcb = (FLGCB*)QueRemoveNext(&knl_free_flgcb);
3419f50a:	4820      	ldr	r0, [pc, #128]	@ (3419f58c <tk_cre_flg+0xa8>)
3419f50c:	f7ff ff71 	bl	3419f3f2 <QueRemoveNext>
3419f510:	6138      	str	r0, [r7, #16]
	if ( flgcb == NULL ) {
3419f512:	693b      	ldr	r3, [r7, #16]
3419f514:	2b00      	cmp	r3, #0
3419f516:	d103      	bne.n	3419f520 <tk_cre_flg+0x3c>
		ercd = E_LIMIT;
3419f518:	f06f 0321 	mvn.w	r3, #33	@ 0x21
3419f51c:	61fb      	str	r3, [r7, #28]
3419f51e:	e01d      	b.n	3419f55c <tk_cre_flg+0x78>
	} else {
		flgid = ID_FLG(flgcb - knl_flgcb_table);
3419f520:	693b      	ldr	r3, [r7, #16]
3419f522:	4a1b      	ldr	r2, [pc, #108]	@ (3419f590 <tk_cre_flg+0xac>)
3419f524:	1a9b      	subs	r3, r3, r2
3419f526:	10db      	asrs	r3, r3, #3
3419f528:	4a1a      	ldr	r2, [pc, #104]	@ (3419f594 <tk_cre_flg+0xb0>)
3419f52a:	fb02 f303 	mul.w	r3, r2, r3
3419f52e:	3301      	adds	r3, #1
3419f530:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&flgcb->wait_queue);
3419f532:	693b      	ldr	r3, [r7, #16]
3419f534:	4618      	mov	r0, r3
3419f536:	f7ff ff21 	bl	3419f37c <QueInit>
		flgcb->flgid = flgid;
3419f53a:	693b      	ldr	r3, [r7, #16]
3419f53c:	68fa      	ldr	r2, [r7, #12]
3419f53e:	609a      	str	r2, [r3, #8]
		flgcb->exinf = pk_cflg->exinf;
3419f540:	687b      	ldr	r3, [r7, #4]
3419f542:	681a      	ldr	r2, [r3, #0]
3419f544:	693b      	ldr	r3, [r7, #16]
3419f546:	60da      	str	r2, [r3, #12]
		flgcb->flgatr = pk_cflg->flgatr;
3419f548:	687b      	ldr	r3, [r7, #4]
3419f54a:	685a      	ldr	r2, [r3, #4]
3419f54c:	693b      	ldr	r3, [r7, #16]
3419f54e:	611a      	str	r2, [r3, #16]
		flgcb->flgptn = pk_cflg->iflgptn;
3419f550:	687b      	ldr	r3, [r7, #4]
3419f552:	689a      	ldr	r2, [r3, #8]
3419f554:	693b      	ldr	r3, [r7, #16]
3419f556:	615a      	str	r2, [r3, #20]
		if ( (pk_cflg->flgatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)flgcb->name, (char*)pk_cflg->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = flgid;
3419f558:	68fb      	ldr	r3, [r7, #12]
3419f55a:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
3419f55c:	697b      	ldr	r3, [r7, #20]
3419f55e:	2b00      	cmp	r3, #0
3419f560:	d10b      	bne.n	3419f57a <tk_cre_flg+0x96>
3419f562:	4b0d      	ldr	r3, [pc, #52]	@ (3419f598 <tk_cre_flg+0xb4>)
3419f564:	681a      	ldr	r2, [r3, #0]
3419f566:	4b0d      	ldr	r3, [pc, #52]	@ (3419f59c <tk_cre_flg+0xb8>)
3419f568:	681b      	ldr	r3, [r3, #0]
3419f56a:	429a      	cmp	r2, r3
3419f56c:	d005      	beq.n	3419f57a <tk_cre_flg+0x96>
3419f56e:	4b0c      	ldr	r3, [pc, #48]	@ (3419f5a0 <tk_cre_flg+0xbc>)
3419f570:	681b      	ldr	r3, [r3, #0]
3419f572:	2b00      	cmp	r3, #0
3419f574:	d101      	bne.n	3419f57a <tk_cre_flg+0x96>
3419f576:	f003 f82f 	bl	341a25d8 <knl_dispatch>
3419f57a:	6978      	ldr	r0, [r7, #20]
3419f57c:	f003 fa69 	bl	341a2a52 <set_basepri>

	return ercd;
3419f580:	69fb      	ldr	r3, [r7, #28]
}
3419f582:	4618      	mov	r0, r3
3419f584:	3720      	adds	r7, #32
3419f586:	46bd      	mov	sp, r7
3419f588:	bd80      	pop	{r7, pc}
3419f58a:	bf00      	nop
3419f58c:	341c4208 	.word	0x341c4208
3419f590:	341c4088 	.word	0x341c4088
3419f594:	aaaaaaab 	.word	0xaaaaaaab
3419f598:	341c4998 	.word	0x341c4998
3419f59c:	341c499c 	.word	0x341c499c
3419f5a0:	341c4994 	.word	0x341c4994

3419f5a4 <tk_del_flg>:
#ifdef USE_FUNC_TK_DEL_FLG
/*
 * Delete event flag
 */
SYSCALL ER tk_del_flg( ID flgid )
{
3419f5a4:	b580      	push	{r7, lr}
3419f5a6:	b086      	sub	sp, #24
3419f5a8:	af00      	add	r7, sp, #0
3419f5aa:	6078      	str	r0, [r7, #4]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
3419f5ac:	2300      	movs	r3, #0
3419f5ae:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
3419f5b0:	687b      	ldr	r3, [r7, #4]
3419f5b2:	2b00      	cmp	r3, #0
3419f5b4:	dd02      	ble.n	3419f5bc <tk_del_flg+0x18>
3419f5b6:	687b      	ldr	r3, [r7, #4]
3419f5b8:	2b10      	cmp	r3, #16
3419f5ba:	dd02      	ble.n	3419f5c2 <tk_del_flg+0x1e>
3419f5bc:	f06f 0311 	mvn.w	r3, #17
3419f5c0:	e032      	b.n	3419f628 <tk_del_flg+0x84>

	flgcb = get_flgcb(flgid);
3419f5c2:	687b      	ldr	r3, [r7, #4]
3419f5c4:	1e5a      	subs	r2, r3, #1
3419f5c6:	4613      	mov	r3, r2
3419f5c8:	005b      	lsls	r3, r3, #1
3419f5ca:	4413      	add	r3, r2
3419f5cc:	00db      	lsls	r3, r3, #3
3419f5ce:	4a18      	ldr	r2, [pc, #96]	@ (3419f630 <tk_del_flg+0x8c>)
3419f5d0:	4413      	add	r3, r2
3419f5d2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
3419f5d4:	f003 fa59 	bl	341a2a8a <disint>
3419f5d8:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
3419f5da:	693b      	ldr	r3, [r7, #16]
3419f5dc:	689b      	ldr	r3, [r3, #8]
3419f5de:	2b00      	cmp	r3, #0
3419f5e0:	d103      	bne.n	3419f5ea <tk_del_flg+0x46>
		ercd = E_NOEXS;
3419f5e2:	f06f 0329 	mvn.w	r3, #41	@ 0x29
3419f5e6:	617b      	str	r3, [r7, #20]
3419f5e8:	e00b      	b.n	3419f602 <tk_del_flg+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&flgcb->wait_queue);
3419f5ea:	693b      	ldr	r3, [r7, #16]
3419f5ec:	4618      	mov	r0, r3
3419f5ee:	f002 f9ed 	bl	341a19cc <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
3419f5f2:	693b      	ldr	r3, [r7, #16]
3419f5f4:	490f      	ldr	r1, [pc, #60]	@ (3419f634 <tk_del_flg+0x90>)
3419f5f6:	4618      	mov	r0, r3
3419f5f8:	f7ff fee2 	bl	3419f3c0 <QueInsert>
		flgcb->flgid = 0;
3419f5fc:	693b      	ldr	r3, [r7, #16]
3419f5fe:	2200      	movs	r2, #0
3419f600:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
3419f602:	68fb      	ldr	r3, [r7, #12]
3419f604:	2b00      	cmp	r3, #0
3419f606:	d10b      	bne.n	3419f620 <tk_del_flg+0x7c>
3419f608:	4b0b      	ldr	r3, [pc, #44]	@ (3419f638 <tk_del_flg+0x94>)
3419f60a:	681a      	ldr	r2, [r3, #0]
3419f60c:	4b0b      	ldr	r3, [pc, #44]	@ (3419f63c <tk_del_flg+0x98>)
3419f60e:	681b      	ldr	r3, [r3, #0]
3419f610:	429a      	cmp	r2, r3
3419f612:	d005      	beq.n	3419f620 <tk_del_flg+0x7c>
3419f614:	4b0a      	ldr	r3, [pc, #40]	@ (3419f640 <tk_del_flg+0x9c>)
3419f616:	681b      	ldr	r3, [r3, #0]
3419f618:	2b00      	cmp	r3, #0
3419f61a:	d101      	bne.n	3419f620 <tk_del_flg+0x7c>
3419f61c:	f002 ffdc 	bl	341a25d8 <knl_dispatch>
3419f620:	68f8      	ldr	r0, [r7, #12]
3419f622:	f003 fa16 	bl	341a2a52 <set_basepri>

	return ercd;
3419f626:	697b      	ldr	r3, [r7, #20]
}
3419f628:	4618      	mov	r0, r3
3419f62a:	3718      	adds	r7, #24
3419f62c:	46bd      	mov	sp, r7
3419f62e:	bd80      	pop	{r7, pc}
3419f630:	341c4088 	.word	0x341c4088
3419f634:	341c4208 	.word	0x341c4208
3419f638:	341c4998 	.word	0x341c4998
3419f63c:	341c499c 	.word	0x341c499c
3419f640:	341c4994 	.word	0x341c4994

3419f644 <tk_set_flg>:

/*
 * Event flag set
 */
SYSCALL ER tk_set_flg( ID flgid, UINT setptn )
{
3419f644:	b580      	push	{r7, lr}
3419f646:	b08a      	sub	sp, #40	@ 0x28
3419f648:	af00      	add	r7, sp, #0
3419f64a:	6078      	str	r0, [r7, #4]
3419f64c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	TCB	*tcb;
	QUEUE	*queue;
	UINT	wfmode, waiptn;
	ER	ercd = E_OK;
3419f64e:	2300      	movs	r3, #0
3419f650:	623b      	str	r3, [r7, #32]

	CHECK_FLGID(flgid);
3419f652:	687b      	ldr	r3, [r7, #4]
3419f654:	2b00      	cmp	r3, #0
3419f656:	dd02      	ble.n	3419f65e <tk_set_flg+0x1a>
3419f658:	687b      	ldr	r3, [r7, #4]
3419f65a:	2b10      	cmp	r3, #16
3419f65c:	dd02      	ble.n	3419f664 <tk_set_flg+0x20>
3419f65e:	f06f 0311 	mvn.w	r3, #17
3419f662:	e06a      	b.n	3419f73a <tk_set_flg+0xf6>

	flgcb = get_flgcb(flgid);
3419f664:	687b      	ldr	r3, [r7, #4]
3419f666:	1e5a      	subs	r2, r3, #1
3419f668:	4613      	mov	r3, r2
3419f66a:	005b      	lsls	r3, r3, #1
3419f66c:	4413      	add	r3, r2
3419f66e:	00db      	lsls	r3, r3, #3
3419f670:	4a34      	ldr	r2, [pc, #208]	@ (3419f744 <tk_set_flg+0x100>)
3419f672:	4413      	add	r3, r2
3419f674:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
3419f676:	f003 fa08 	bl	341a2a8a <disint>
3419f67a:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
3419f67c:	69fb      	ldr	r3, [r7, #28]
3419f67e:	689b      	ldr	r3, [r3, #8]
3419f680:	2b00      	cmp	r3, #0
3419f682:	d103      	bne.n	3419f68c <tk_set_flg+0x48>
		ercd = E_NOEXS;
3419f684:	f06f 0329 	mvn.w	r3, #41	@ 0x29
3419f688:	623b      	str	r3, [r7, #32]
		goto error_exit;
3419f68a:	e043      	b.n	3419f714 <tk_set_flg+0xd0>
	}

	/* Set event flag */
	flgcb->flgptn |= setptn;
3419f68c:	69fb      	ldr	r3, [r7, #28]
3419f68e:	695a      	ldr	r2, [r3, #20]
3419f690:	683b      	ldr	r3, [r7, #0]
3419f692:	431a      	orrs	r2, r3
3419f694:	69fb      	ldr	r3, [r7, #28]
3419f696:	615a      	str	r2, [r3, #20]

	/* Search task which should be released */
	queue = flgcb->wait_queue.next;
3419f698:	69fb      	ldr	r3, [r7, #28]
3419f69a:	681b      	ldr	r3, [r3, #0]
3419f69c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( queue != &flgcb->wait_queue ) {
3419f69e:	e033      	b.n	3419f708 <tk_set_flg+0xc4>
		tcb = (TCB*)queue;
3419f6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419f6a2:	617b      	str	r3, [r7, #20]
		queue = queue->next;
3419f6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3419f6a6:	681b      	ldr	r3, [r3, #0]
3419f6a8:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Meet condition for release wait? */
		waiptn = tcb->winfo.flg.waiptn;
3419f6aa:	697b      	ldr	r3, [r7, #20]
3419f6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3419f6ae:	613b      	str	r3, [r7, #16]
		wfmode = tcb->winfo.flg.wfmode;
3419f6b0:	697b      	ldr	r3, [r7, #20]
3419f6b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3419f6b4:	60fb      	str	r3, [r7, #12]
		if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
3419f6b6:	68fa      	ldr	r2, [r7, #12]
3419f6b8:	6939      	ldr	r1, [r7, #16]
3419f6ba:	69f8      	ldr	r0, [r7, #28]
3419f6bc:	f7ff fec6 	bl	3419f44c <knl_eventflag_cond>
3419f6c0:	4603      	mov	r3, r0
3419f6c2:	2b00      	cmp	r3, #0
3419f6c4:	d020      	beq.n	3419f708 <tk_set_flg+0xc4>

			/* Release wait */
			*tcb->winfo.flg.p_flgptn = flgcb->flgptn;
3419f6c6:	697b      	ldr	r3, [r7, #20]
3419f6c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3419f6ca:	69fa      	ldr	r2, [r7, #28]
3419f6cc:	6952      	ldr	r2, [r2, #20]
3419f6ce:	601a      	str	r2, [r3, #0]
			knl_wait_release_ok(tcb);
3419f6d0:	6978      	ldr	r0, [r7, #20]
3419f6d2:	f002 f8ee 	bl	341a18b2 <knl_wait_release_ok>

			/* Clear event flag */
			if ( (wfmode & TWF_BITCLR) != 0 ) {
3419f6d6:	68fb      	ldr	r3, [r7, #12]
3419f6d8:	f003 0320 	and.w	r3, r3, #32
3419f6dc:	2b00      	cmp	r3, #0
3419f6de:	d00a      	beq.n	3419f6f6 <tk_set_flg+0xb2>
				if ( (flgcb->flgptn &= ~waiptn) == 0 ) {
3419f6e0:	69fb      	ldr	r3, [r7, #28]
3419f6e2:	695a      	ldr	r2, [r3, #20]
3419f6e4:	693b      	ldr	r3, [r7, #16]
3419f6e6:	43db      	mvns	r3, r3
3419f6e8:	401a      	ands	r2, r3
3419f6ea:	69fb      	ldr	r3, [r7, #28]
3419f6ec:	615a      	str	r2, [r3, #20]
3419f6ee:	69fb      	ldr	r3, [r7, #28]
3419f6f0:	695b      	ldr	r3, [r3, #20]
3419f6f2:	2b00      	cmp	r3, #0
3419f6f4:	d00d      	beq.n	3419f712 <tk_set_flg+0xce>
					break;
				}
			}
			if ( (wfmode & TWF_CLR) != 0 ) {
3419f6f6:	68fb      	ldr	r3, [r7, #12]
3419f6f8:	f003 0310 	and.w	r3, r3, #16
3419f6fc:	2b00      	cmp	r3, #0
3419f6fe:	d003      	beq.n	3419f708 <tk_set_flg+0xc4>
				flgcb->flgptn = 0;
3419f700:	69fb      	ldr	r3, [r7, #28]
3419f702:	2200      	movs	r2, #0
3419f704:	615a      	str	r2, [r3, #20]
				break;
3419f706:	e005      	b.n	3419f714 <tk_set_flg+0xd0>
	while ( queue != &flgcb->wait_queue ) {
3419f708:	69fb      	ldr	r3, [r7, #28]
3419f70a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3419f70c:	429a      	cmp	r2, r3
3419f70e:	d1c7      	bne.n	3419f6a0 <tk_set_flg+0x5c>
			}
		}
	}

    error_exit:
3419f710:	e000      	b.n	3419f714 <tk_set_flg+0xd0>
					break;
3419f712:	bf00      	nop
	END_CRITICAL_SECTION;
3419f714:	69bb      	ldr	r3, [r7, #24]
3419f716:	2b00      	cmp	r3, #0
3419f718:	d10b      	bne.n	3419f732 <tk_set_flg+0xee>
3419f71a:	4b0b      	ldr	r3, [pc, #44]	@ (3419f748 <tk_set_flg+0x104>)
3419f71c:	681a      	ldr	r2, [r3, #0]
3419f71e:	4b0b      	ldr	r3, [pc, #44]	@ (3419f74c <tk_set_flg+0x108>)
3419f720:	681b      	ldr	r3, [r3, #0]
3419f722:	429a      	cmp	r2, r3
3419f724:	d005      	beq.n	3419f732 <tk_set_flg+0xee>
3419f726:	4b0a      	ldr	r3, [pc, #40]	@ (3419f750 <tk_set_flg+0x10c>)
3419f728:	681b      	ldr	r3, [r3, #0]
3419f72a:	2b00      	cmp	r3, #0
3419f72c:	d101      	bne.n	3419f732 <tk_set_flg+0xee>
3419f72e:	f002 ff53 	bl	341a25d8 <knl_dispatch>
3419f732:	69b8      	ldr	r0, [r7, #24]
3419f734:	f003 f98d 	bl	341a2a52 <set_basepri>

	return ercd;
3419f738:	6a3b      	ldr	r3, [r7, #32]
}
3419f73a:	4618      	mov	r0, r3
3419f73c:	3728      	adds	r7, #40	@ 0x28
3419f73e:	46bd      	mov	sp, r7
3419f740:	bd80      	pop	{r7, pc}
3419f742:	bf00      	nop
3419f744:	341c4088 	.word	0x341c4088
3419f748:	341c4998 	.word	0x341c4998
3419f74c:	341c499c 	.word	0x341c499c
3419f750:	341c4994 	.word	0x341c4994

3419f754 <flg_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void flg_chg_pri( TCB *tcb, INT oldpri )
{
3419f754:	b580      	push	{r7, lr}
3419f756:	b084      	sub	sp, #16
3419f758:	af00      	add	r7, sp, #0
3419f75a:	6078      	str	r0, [r7, #4]
3419f75c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;

	flgcb = get_flgcb(tcb->wid);
3419f75e:	687b      	ldr	r3, [r7, #4]
3419f760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419f762:	1e5a      	subs	r2, r3, #1
3419f764:	4613      	mov	r3, r2
3419f766:	005b      	lsls	r3, r3, #1
3419f768:	4413      	add	r3, r2
3419f76a:	00db      	lsls	r3, r3, #3
3419f76c:	4a05      	ldr	r2, [pc, #20]	@ (3419f784 <flg_chg_pri+0x30>)
3419f76e:	4413      	add	r3, r2
3419f770:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)flgcb, tcb);
3419f772:	6879      	ldr	r1, [r7, #4]
3419f774:	68f8      	ldr	r0, [r7, #12]
3419f776:	f002 f97b 	bl	341a1a70 <knl_gcb_change_priority>
}
3419f77a:	bf00      	nop
3419f77c:	3710      	adds	r7, #16
3419f77e:	46bd      	mov	sp, r7
3419f780:	bd80      	pop	{r7, pc}
3419f782:	bf00      	nop
3419f784:	341c4088 	.word	0x341c4088

3419f788 <tk_wai_flg>:

/*
 * Event flag wait
 */
SYSCALL ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout )
{
3419f788:	b580      	push	{r7, lr}
3419f78a:	b088      	sub	sp, #32
3419f78c:	af00      	add	r7, sp, #0
3419f78e:	60f8      	str	r0, [r7, #12]
3419f790:	60b9      	str	r1, [r7, #8]
3419f792:	607a      	str	r2, [r7, #4]
3419f794:	603b      	str	r3, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
3419f796:	2300      	movs	r3, #0
3419f798:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
3419f79a:	68fb      	ldr	r3, [r7, #12]
3419f79c:	2b00      	cmp	r3, #0
3419f79e:	dd02      	ble.n	3419f7a6 <tk_wai_flg+0x1e>
3419f7a0:	68fb      	ldr	r3, [r7, #12]
3419f7a2:	2b10      	cmp	r3, #16
3419f7a4:	dd02      	ble.n	3419f7ac <tk_wai_flg+0x24>
3419f7a6:	f06f 0311 	mvn.w	r3, #17
3419f7aa:	e0a3      	b.n	3419f8f4 <tk_wai_flg+0x16c>
	CHECK_PAR(waiptn != 0);
3419f7ac:	68bb      	ldr	r3, [r7, #8]
3419f7ae:	2b00      	cmp	r3, #0
3419f7b0:	d102      	bne.n	3419f7b8 <tk_wai_flg+0x30>
3419f7b2:	f06f 0310 	mvn.w	r3, #16
3419f7b6:	e09d      	b.n	3419f8f4 <tk_wai_flg+0x16c>
	CHECK_PAR((wfmode & ~(TWF_ORW|TWF_CLR|TWF_BITCLR)) == 0);
3419f7b8:	687b      	ldr	r3, [r7, #4]
3419f7ba:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
3419f7be:	2b00      	cmp	r3, #0
3419f7c0:	d002      	beq.n	3419f7c8 <tk_wai_flg+0x40>
3419f7c2:	f06f 0310 	mvn.w	r3, #16
3419f7c6:	e095      	b.n	3419f8f4 <tk_wai_flg+0x16c>
	CHECK_TMOUT(tmout);
3419f7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3419f7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
3419f7ce:	da02      	bge.n	3419f7d6 <tk_wai_flg+0x4e>
3419f7d0:	f06f 0310 	mvn.w	r3, #16
3419f7d4:	e08e      	b.n	3419f8f4 <tk_wai_flg+0x16c>
	CHECK_DISPATCH();
3419f7d6:	4b49      	ldr	r3, [pc, #292]	@ (3419f8fc <tk_wai_flg+0x174>)
3419f7d8:	681b      	ldr	r3, [r3, #0]
3419f7da:	2b00      	cmp	r3, #0
3419f7dc:	d10d      	bne.n	3419f7fa <tk_wai_flg+0x72>
3419f7de:	f7ff fe25 	bl	3419f42c <knl_isTaskIndependent>
3419f7e2:	4603      	mov	r3, r0
3419f7e4:	2b00      	cmp	r3, #0
3419f7e6:	d108      	bne.n	3419f7fa <tk_wai_flg+0x72>
3419f7e8:	4b45      	ldr	r3, [pc, #276]	@ (3419f900 <tk_wai_flg+0x178>)
3419f7ea:	681b      	ldr	r3, [r3, #0]
3419f7ec:	2b00      	cmp	r3, #0
3419f7ee:	d004      	beq.n	3419f7fa <tk_wai_flg+0x72>
3419f7f0:	f003 f93e 	bl	341a2a70 <get_basepri>
3419f7f4:	4603      	mov	r3, r0
3419f7f6:	2b00      	cmp	r3, #0
3419f7f8:	d002      	beq.n	3419f800 <tk_wai_flg+0x78>
3419f7fa:	f06f 0318 	mvn.w	r3, #24
3419f7fe:	e079      	b.n	3419f8f4 <tk_wai_flg+0x16c>

	flgcb = get_flgcb(flgid);
3419f800:	68fb      	ldr	r3, [r7, #12]
3419f802:	1e5a      	subs	r2, r3, #1
3419f804:	4613      	mov	r3, r2
3419f806:	005b      	lsls	r3, r3, #1
3419f808:	4413      	add	r3, r2
3419f80a:	00db      	lsls	r3, r3, #3
3419f80c:	4a3d      	ldr	r2, [pc, #244]	@ (3419f904 <tk_wai_flg+0x17c>)
3419f80e:	4413      	add	r3, r2
3419f810:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
3419f812:	f003 f93a 	bl	341a2a8a <disint>
3419f816:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
3419f818:	69fb      	ldr	r3, [r7, #28]
3419f81a:	689b      	ldr	r3, [r3, #8]
3419f81c:	2b00      	cmp	r3, #0
3419f81e:	d103      	bne.n	3419f828 <tk_wai_flg+0xa0>
		ercd = E_NOEXS;
3419f820:	f06f 0329 	mvn.w	r3, #41	@ 0x29
3419f824:	617b      	str	r3, [r7, #20]
		goto error_exit;
3419f826:	e052      	b.n	3419f8ce <tk_wai_flg+0x146>
	}
	if ( (flgcb->flgatr & TA_WMUL) == 0 && !isQueEmpty(&flgcb->wait_queue) ) {
3419f828:	69fb      	ldr	r3, [r7, #28]
3419f82a:	691b      	ldr	r3, [r3, #16]
3419f82c:	f003 0308 	and.w	r3, r3, #8
3419f830:	2b00      	cmp	r3, #0
3419f832:	d10a      	bne.n	3419f84a <tk_wai_flg+0xc2>
3419f834:	69fb      	ldr	r3, [r7, #28]
3419f836:	4618      	mov	r0, r3
3419f838:	f7ff fdb0 	bl	3419f39c <isQueEmpty>
3419f83c:	4603      	mov	r3, r0
3419f83e:	2b00      	cmp	r3, #0
3419f840:	d103      	bne.n	3419f84a <tk_wai_flg+0xc2>
		/* Disable multiple tasks wait */
		ercd = E_OBJ;
3419f842:	f06f 0328 	mvn.w	r3, #40	@ 0x28
3419f846:	617b      	str	r3, [r7, #20]
		goto error_exit;
3419f848:	e041      	b.n	3419f8ce <tk_wai_flg+0x146>
	}

	/* Meet condition for release wait? */
	if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
3419f84a:	687a      	ldr	r2, [r7, #4]
3419f84c:	68b9      	ldr	r1, [r7, #8]
3419f84e:	69f8      	ldr	r0, [r7, #28]
3419f850:	f7ff fdfc 	bl	3419f44c <knl_eventflag_cond>
3419f854:	4603      	mov	r3, r0
3419f856:	2b00      	cmp	r3, #0
3419f858:	d018      	beq.n	3419f88c <tk_wai_flg+0x104>
		*p_flgptn = flgcb->flgptn;
3419f85a:	69fb      	ldr	r3, [r7, #28]
3419f85c:	695a      	ldr	r2, [r3, #20]
3419f85e:	683b      	ldr	r3, [r7, #0]
3419f860:	601a      	str	r2, [r3, #0]

		/* Clear event flag */
		if ( (wfmode & TWF_BITCLR) != 0 ) {
3419f862:	687b      	ldr	r3, [r7, #4]
3419f864:	f003 0320 	and.w	r3, r3, #32
3419f868:	2b00      	cmp	r3, #0
3419f86a:	d006      	beq.n	3419f87a <tk_wai_flg+0xf2>
			flgcb->flgptn &= ~waiptn;
3419f86c:	69fb      	ldr	r3, [r7, #28]
3419f86e:	695a      	ldr	r2, [r3, #20]
3419f870:	68bb      	ldr	r3, [r7, #8]
3419f872:	43db      	mvns	r3, r3
3419f874:	401a      	ands	r2, r3
3419f876:	69fb      	ldr	r3, [r7, #28]
3419f878:	615a      	str	r2, [r3, #20]
		}
		if ( (wfmode & TWF_CLR) != 0 ) {
3419f87a:	687b      	ldr	r3, [r7, #4]
3419f87c:	f003 0310 	and.w	r3, r3, #16
3419f880:	2b00      	cmp	r3, #0
3419f882:	d024      	beq.n	3419f8ce <tk_wai_flg+0x146>
			flgcb->flgptn = 0;
3419f884:	69fb      	ldr	r3, [r7, #28]
3419f886:	2200      	movs	r2, #0
3419f888:	615a      	str	r2, [r3, #20]
3419f88a:	e020      	b.n	3419f8ce <tk_wai_flg+0x146>
		}
	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
3419f88c:	69fb      	ldr	r3, [r7, #28]
3419f88e:	691b      	ldr	r3, [r3, #16]
3419f890:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_flg_tpri: &knl_wspec_flg_tfifo;
3419f894:	2b00      	cmp	r3, #0
3419f896:	d001      	beq.n	3419f89c <tk_wai_flg+0x114>
3419f898:	4a1b      	ldr	r2, [pc, #108]	@ (3419f908 <tk_wai_flg+0x180>)
3419f89a:	e000      	b.n	3419f89e <tk_wai_flg+0x116>
3419f89c:	4a1b      	ldr	r2, [pc, #108]	@ (3419f90c <tk_wai_flg+0x184>)
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
3419f89e:	4b18      	ldr	r3, [pc, #96]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8a0:	681b      	ldr	r3, [r3, #0]
3419f8a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
3419f8a4:	4b16      	ldr	r3, [pc, #88]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8a6:	681b      	ldr	r3, [r3, #0]
3419f8a8:	f107 0214 	add.w	r2, r7, #20
3419f8ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.flg.waiptn = waiptn;
3419f8ae:	4b14      	ldr	r3, [pc, #80]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8b0:	681b      	ldr	r3, [r3, #0]
3419f8b2:	68ba      	ldr	r2, [r7, #8]
3419f8b4:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_ctxtsk->winfo.flg.wfmode = wfmode;
3419f8b6:	4b12      	ldr	r3, [pc, #72]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8b8:	681b      	ldr	r3, [r3, #0]
3419f8ba:	687a      	ldr	r2, [r7, #4]
3419f8bc:	645a      	str	r2, [r3, #68]	@ 0x44
		knl_ctxtsk->winfo.flg.p_flgptn = p_flgptn;
3419f8be:	4b10      	ldr	r3, [pc, #64]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8c0:	681b      	ldr	r3, [r3, #0]
3419f8c2:	683a      	ldr	r2, [r7, #0]
3419f8c4:	649a      	str	r2, [r3, #72]	@ 0x48
		knl_gcb_make_wait((GCB*)flgcb, tmout);
3419f8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3419f8c8:	69f8      	ldr	r0, [r7, #28]
3419f8ca:	f002 f89b 	bl	341a1a04 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
3419f8ce:	69bb      	ldr	r3, [r7, #24]
3419f8d0:	2b00      	cmp	r3, #0
3419f8d2:	d10b      	bne.n	3419f8ec <tk_wai_flg+0x164>
3419f8d4:	4b0a      	ldr	r3, [pc, #40]	@ (3419f900 <tk_wai_flg+0x178>)
3419f8d6:	681a      	ldr	r2, [r3, #0]
3419f8d8:	4b0d      	ldr	r3, [pc, #52]	@ (3419f910 <tk_wai_flg+0x188>)
3419f8da:	681b      	ldr	r3, [r3, #0]
3419f8dc:	429a      	cmp	r2, r3
3419f8de:	d005      	beq.n	3419f8ec <tk_wai_flg+0x164>
3419f8e0:	4b06      	ldr	r3, [pc, #24]	@ (3419f8fc <tk_wai_flg+0x174>)
3419f8e2:	681b      	ldr	r3, [r3, #0]
3419f8e4:	2b00      	cmp	r3, #0
3419f8e6:	d101      	bne.n	3419f8ec <tk_wai_flg+0x164>
3419f8e8:	f002 fe76 	bl	341a25d8 <knl_dispatch>
3419f8ec:	69b8      	ldr	r0, [r7, #24]
3419f8ee:	f003 f8b0 	bl	341a2a52 <set_basepri>

	return ercd;
3419f8f2:	697b      	ldr	r3, [r7, #20]
}
3419f8f4:	4618      	mov	r0, r3
3419f8f6:	3720      	adds	r7, #32
3419f8f8:	46bd      	mov	sp, r7
3419f8fa:	bd80      	pop	{r7, pc}
3419f8fc:	341c4994 	.word	0x341c4994
3419f900:	341c4998 	.word	0x341c4998
3419f904:	341c4088 	.word	0x341c4088
3419f908:	341a65c0 	.word	0x341a65c0
3419f90c:	341a65b4 	.word	0x341a65b4
3419f910:	341c499c 	.word	0x341c499c

3419f914 <tk_def_int>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt handler definition
 */
SYSCALL ER tk_def_int( UINT intno, CONST T_DINT *pk_dint )
{
3419f914:	b580      	push	{r7, lr}
3419f916:	b086      	sub	sp, #24
3419f918:	af00      	add	r7, sp, #0
3419f91a:	6078      	str	r0, [r7, #4]
3419f91c:	6039      	str	r1, [r7, #0]
#else
	ATR	intatr;
	FP	inthdr;
	ER	ercd;

	CHECK_PAR(intno < N_INTVEC);
3419f91e:	687b      	ldr	r3, [r7, #4]
3419f920:	2bc3      	cmp	r3, #195	@ 0xc3
3419f922:	d902      	bls.n	3419f92a <tk_def_int+0x16>
3419f924:	f06f 0310 	mvn.w	r3, #16
3419f928:	e031      	b.n	3419f98e <tk_def_int+0x7a>
	if(pk_dint != NULL) {
3419f92a:	683b      	ldr	r3, [r7, #0]
3419f92c:	2b00      	cmp	r3, #0
3419f92e:	d00d      	beq.n	3419f94c <tk_def_int+0x38>
		CHECK_RSATR(pk_dint->intatr, TA_HLNG|TA_ASM);
3419f930:	683b      	ldr	r3, [r7, #0]
3419f932:	681b      	ldr	r3, [r3, #0]
3419f934:	2b01      	cmp	r3, #1
3419f936:	d902      	bls.n	3419f93e <tk_def_int+0x2a>
3419f938:	f06f 030a 	mvn.w	r3, #10
3419f93c:	e027      	b.n	3419f98e <tk_def_int+0x7a>
		intatr	= pk_dint->intatr;
3419f93e:	683b      	ldr	r3, [r7, #0]
3419f940:	681b      	ldr	r3, [r3, #0]
3419f942:	617b      	str	r3, [r7, #20]
		inthdr	= pk_dint->inthdr;
3419f944:	683b      	ldr	r3, [r7, #0]
3419f946:	685b      	ldr	r3, [r3, #4]
3419f948:	613b      	str	r3, [r7, #16]
3419f94a:	e003      	b.n	3419f954 <tk_def_int+0x40>
	} else {
		intatr	= 0;
3419f94c:	2300      	movs	r3, #0
3419f94e:	617b      	str	r3, [r7, #20]
		inthdr	= NULL;
3419f950:	2300      	movs	r3, #0
3419f952:	613b      	str	r3, [r7, #16]
	}

	BEGIN_CRITICAL_SECTION;
3419f954:	f003 f899 	bl	341a2a8a <disint>
3419f958:	60f8      	str	r0, [r7, #12]
	ercd = knl_define_inthdr(intno, intatr, inthdr);
3419f95a:	687b      	ldr	r3, [r7, #4]
3419f95c:	693a      	ldr	r2, [r7, #16]
3419f95e:	6979      	ldr	r1, [r7, #20]
3419f960:	4618      	mov	r0, r3
3419f962:	f002 ff01 	bl	341a2768 <knl_define_inthdr>
3419f966:	60b8      	str	r0, [r7, #8]
	END_CRITICAL_SECTION;
3419f968:	68fb      	ldr	r3, [r7, #12]
3419f96a:	2b00      	cmp	r3, #0
3419f96c:	d10b      	bne.n	3419f986 <tk_def_int+0x72>
3419f96e:	4b0a      	ldr	r3, [pc, #40]	@ (3419f998 <tk_def_int+0x84>)
3419f970:	681a      	ldr	r2, [r3, #0]
3419f972:	4b0a      	ldr	r3, [pc, #40]	@ (3419f99c <tk_def_int+0x88>)
3419f974:	681b      	ldr	r3, [r3, #0]
3419f976:	429a      	cmp	r2, r3
3419f978:	d005      	beq.n	3419f986 <tk_def_int+0x72>
3419f97a:	4b09      	ldr	r3, [pc, #36]	@ (3419f9a0 <tk_def_int+0x8c>)
3419f97c:	681b      	ldr	r3, [r3, #0]
3419f97e:	2b00      	cmp	r3, #0
3419f980:	d101      	bne.n	3419f986 <tk_def_int+0x72>
3419f982:	f002 fe29 	bl	341a25d8 <knl_dispatch>
3419f986:	68f8      	ldr	r0, [r7, #12]
3419f988:	f003 f863 	bl	341a2a52 <set_basepri>

	return ercd;
3419f98c:	68bb      	ldr	r3, [r7, #8]
#endif
}
3419f98e:	4618      	mov	r0, r3
3419f990:	3718      	adds	r7, #24
3419f992:	46bd      	mov	sp, r7
3419f994:	bd80      	pop	{r7, pc}
3419f996:	bf00      	nop
3419f998:	341c4998 	.word	0x341c4998
3419f99c:	341c499c 	.word	0x341c499c
3419f9a0:	341c4994 	.word	0x341c4994

3419f9a4 <QueInit>:
{
3419f9a4:	b480      	push	{r7}
3419f9a6:	b083      	sub	sp, #12
3419f9a8:	af00      	add	r7, sp, #0
3419f9aa:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419f9ac:	687b      	ldr	r3, [r7, #4]
3419f9ae:	687a      	ldr	r2, [r7, #4]
3419f9b0:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419f9b2:	687b      	ldr	r3, [r7, #4]
3419f9b4:	687a      	ldr	r2, [r7, #4]
3419f9b6:	605a      	str	r2, [r3, #4]
}
3419f9b8:	bf00      	nop
3419f9ba:	370c      	adds	r7, #12
3419f9bc:	46bd      	mov	sp, r7
3419f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f9c2:	4770      	bx	lr

3419f9c4 <QueInsert>:
{
3419f9c4:	b480      	push	{r7}
3419f9c6:	b083      	sub	sp, #12
3419f9c8:	af00      	add	r7, sp, #0
3419f9ca:	6078      	str	r0, [r7, #4]
3419f9cc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419f9ce:	683b      	ldr	r3, [r7, #0]
3419f9d0:	685a      	ldr	r2, [r3, #4]
3419f9d2:	687b      	ldr	r3, [r7, #4]
3419f9d4:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419f9d6:	687b      	ldr	r3, [r7, #4]
3419f9d8:	683a      	ldr	r2, [r7, #0]
3419f9da:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419f9dc:	683b      	ldr	r3, [r7, #0]
3419f9de:	685b      	ldr	r3, [r3, #4]
3419f9e0:	687a      	ldr	r2, [r7, #4]
3419f9e2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419f9e4:	683b      	ldr	r3, [r7, #0]
3419f9e6:	687a      	ldr	r2, [r7, #4]
3419f9e8:	605a      	str	r2, [r3, #4]
}
3419f9ea:	bf00      	nop
3419f9ec:	370c      	adds	r7, #12
3419f9ee:	46bd      	mov	sp, r7
3419f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
3419f9f4:	4770      	bx	lr
	...

3419f9f8 <knl_mailbox_initialize>:

/*
 * Initialization of mailbox control block 
 */
EXPORT ER knl_mailbox_initialize( void )
{
3419f9f8:	b580      	push	{r7, lr}
3419f9fa:	b082      	sub	sp, #8
3419f9fc:	af00      	add	r7, sp, #0
	if ( NUM_MBXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbxcb);
3419f9fe:	480e      	ldr	r0, [pc, #56]	@ (3419fa38 <knl_mailbox_initialize+0x40>)
3419fa00:	f7ff ffd0 	bl	3419f9a4 <QueInit>
	end = knl_mbxcb_table + NUM_MBXID;
3419fa04:	4b0d      	ldr	r3, [pc, #52]	@ (3419fa3c <knl_mailbox_initialize+0x44>)
3419fa06:	603b      	str	r3, [r7, #0]
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
3419fa08:	4b0d      	ldr	r3, [pc, #52]	@ (3419fa40 <knl_mailbox_initialize+0x48>)
3419fa0a:	607b      	str	r3, [r7, #4]
3419fa0c:	e00a      	b.n	3419fa24 <knl_mailbox_initialize+0x2c>
		mbxcb->mbxid = 0;
3419fa0e:	687b      	ldr	r3, [r7, #4]
3419fa10:	2200      	movs	r2, #0
3419fa12:	609a      	str	r2, [r3, #8]
		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);
3419fa14:	687b      	ldr	r3, [r7, #4]
3419fa16:	4908      	ldr	r1, [pc, #32]	@ (3419fa38 <knl_mailbox_initialize+0x40>)
3419fa18:	4618      	mov	r0, r3
3419fa1a:	f7ff ffd3 	bl	3419f9c4 <QueInsert>
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
3419fa1e:	687b      	ldr	r3, [r7, #4]
3419fa20:	331c      	adds	r3, #28
3419fa22:	607b      	str	r3, [r7, #4]
3419fa24:	687a      	ldr	r2, [r7, #4]
3419fa26:	683b      	ldr	r3, [r7, #0]
3419fa28:	429a      	cmp	r2, r3
3419fa2a:	d3f0      	bcc.n	3419fa0e <knl_mailbox_initialize+0x16>
	}

	return E_OK;
3419fa2c:	2300      	movs	r3, #0
}
3419fa2e:	4618      	mov	r0, r3
3419fa30:	3708      	adds	r7, #8
3419fa32:	46bd      	mov	sp, r7
3419fa34:	bd80      	pop	{r7, pc}
3419fa36:	bf00      	nop
3419fa38:	341c42f0 	.word	0x341c42f0
3419fa3c:	341c42f0 	.word	0x341c42f0
3419fa40:	341c4210 	.word	0x341c4210

3419fa44 <QueInit>:
{
3419fa44:	b480      	push	{r7}
3419fa46:	b083      	sub	sp, #12
3419fa48:	af00      	add	r7, sp, #0
3419fa4a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419fa4c:	687b      	ldr	r3, [r7, #4]
3419fa4e:	687a      	ldr	r2, [r7, #4]
3419fa50:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419fa52:	687b      	ldr	r3, [r7, #4]
3419fa54:	687a      	ldr	r2, [r7, #4]
3419fa56:	605a      	str	r2, [r3, #4]
}
3419fa58:	bf00      	nop
3419fa5a:	370c      	adds	r7, #12
3419fa5c:	46bd      	mov	sp, r7
3419fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fa62:	4770      	bx	lr

3419fa64 <QueInsert>:
{
3419fa64:	b480      	push	{r7}
3419fa66:	b083      	sub	sp, #12
3419fa68:	af00      	add	r7, sp, #0
3419fa6a:	6078      	str	r0, [r7, #4]
3419fa6c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419fa6e:	683b      	ldr	r3, [r7, #0]
3419fa70:	685a      	ldr	r2, [r3, #4]
3419fa72:	687b      	ldr	r3, [r7, #4]
3419fa74:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419fa76:	687b      	ldr	r3, [r7, #4]
3419fa78:	683a      	ldr	r2, [r7, #0]
3419fa7a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419fa7c:	683b      	ldr	r3, [r7, #0]
3419fa7e:	685b      	ldr	r3, [r3, #4]
3419fa80:	687a      	ldr	r2, [r7, #4]
3419fa82:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419fa84:	683b      	ldr	r3, [r7, #0]
3419fa86:	687a      	ldr	r2, [r7, #4]
3419fa88:	605a      	str	r2, [r3, #4]
}
3419fa8a:	bf00      	nop
3419fa8c:	370c      	adds	r7, #12
3419fa8e:	46bd      	mov	sp, r7
3419fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fa94:	4770      	bx	lr

3419fa96 <QueRemove>:
{
3419fa96:	b480      	push	{r7}
3419fa98:	b083      	sub	sp, #12
3419fa9a:	af00      	add	r7, sp, #0
3419fa9c:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
3419fa9e:	687b      	ldr	r3, [r7, #4]
3419faa0:	681b      	ldr	r3, [r3, #0]
3419faa2:	687a      	ldr	r2, [r7, #4]
3419faa4:	429a      	cmp	r2, r3
3419faa6:	d009      	beq.n	3419fabc <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
3419faa8:	687b      	ldr	r3, [r7, #4]
3419faaa:	685b      	ldr	r3, [r3, #4]
3419faac:	687a      	ldr	r2, [r7, #4]
3419faae:	6812      	ldr	r2, [r2, #0]
3419fab0:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
3419fab2:	687b      	ldr	r3, [r7, #4]
3419fab4:	681b      	ldr	r3, [r3, #0]
3419fab6:	687a      	ldr	r2, [r7, #4]
3419fab8:	6852      	ldr	r2, [r2, #4]
3419faba:	605a      	str	r2, [r3, #4]
}
3419fabc:	bf00      	nop
3419fabe:	370c      	adds	r7, #12
3419fac0:	46bd      	mov	sp, r7
3419fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fac6:	4770      	bx	lr

3419fac8 <knl_searchFreeArea>:
 *	or larger than
 *      'blksz' but closest.
 *	If it does not exist, return '&imacb->freeque'.
 */
EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )
{
3419fac8:	b480      	push	{r7}
3419faca:	b085      	sub	sp, #20
3419facc:	af00      	add	r7, sp, #0
3419face:	6078      	str	r0, [r7, #4]
3419fad0:	6039      	str	r1, [r7, #0]
	QUEUE	*q = &imacb->freeque;
3419fad2:	687b      	ldr	r3, [r7, #4]
3419fad4:	330c      	adds	r3, #12
3419fad6:	60fb      	str	r3, [r7, #12]

	/* For area whose memory pool size is less than 1/4,
	   search from smaller size.
	   Otherwise, search from larger size. */
	if ( blksz > imacb->memsz / 4 ) {
3419fad8:	687b      	ldr	r3, [r7, #4]
3419fada:	681b      	ldr	r3, [r3, #0]
3419fadc:	2b00      	cmp	r3, #0
3419fade:	da00      	bge.n	3419fae2 <knl_searchFreeArea+0x1a>
3419fae0:	3303      	adds	r3, #3
3419fae2:	109b      	asrs	r3, r3, #2
3419fae4:	461a      	mov	r2, r3
3419fae6:	683b      	ldr	r3, [r7, #0]
3419fae8:	4293      	cmp	r3, r2
3419faea:	dd2b      	ble.n	3419fb44 <knl_searchFreeArea+0x7c>
		/* Search from larger size. */
		W fsz = 0;
3419faec:	2300      	movs	r3, #0
3419faee:	60bb      	str	r3, [r7, #8]
		while ( (q = q->prev) != &imacb->freeque ) {
3419faf0:	e010      	b.n	3419fb14 <knl_searchFreeArea+0x4c>
			fsz = FreeSize(q);
3419faf2:	68fb      	ldr	r3, [r7, #12]
3419faf4:	3308      	adds	r3, #8
3419faf6:	685b      	ldr	r3, [r3, #4]
3419faf8:	60bb      	str	r3, [r7, #8]
			if ( fsz <= blksz ) {
3419fafa:	68ba      	ldr	r2, [r7, #8]
3419fafc:	683b      	ldr	r3, [r7, #0]
3419fafe:	429a      	cmp	r2, r3
3419fb00:	dc08      	bgt.n	3419fb14 <knl_searchFreeArea+0x4c>
				return ( fsz < blksz )? q->next: q;
3419fb02:	68ba      	ldr	r2, [r7, #8]
3419fb04:	683b      	ldr	r3, [r7, #0]
3419fb06:	429a      	cmp	r2, r3
3419fb08:	da02      	bge.n	3419fb10 <knl_searchFreeArea+0x48>
3419fb0a:	68fb      	ldr	r3, [r7, #12]
3419fb0c:	681b      	ldr	r3, [r3, #0]
3419fb0e:	e024      	b.n	3419fb5a <knl_searchFreeArea+0x92>
3419fb10:	68fb      	ldr	r3, [r7, #12]
3419fb12:	e022      	b.n	3419fb5a <knl_searchFreeArea+0x92>
		while ( (q = q->prev) != &imacb->freeque ) {
3419fb14:	68fb      	ldr	r3, [r7, #12]
3419fb16:	685b      	ldr	r3, [r3, #4]
3419fb18:	60fb      	str	r3, [r7, #12]
3419fb1a:	687b      	ldr	r3, [r7, #4]
3419fb1c:	330c      	adds	r3, #12
3419fb1e:	68fa      	ldr	r2, [r7, #12]
3419fb20:	429a      	cmp	r2, r3
3419fb22:	d1e6      	bne.n	3419faf2 <knl_searchFreeArea+0x2a>
			}
		}
		return ( fsz >= blksz )? q->next: q;
3419fb24:	68ba      	ldr	r2, [r7, #8]
3419fb26:	683b      	ldr	r3, [r7, #0]
3419fb28:	429a      	cmp	r2, r3
3419fb2a:	db02      	blt.n	3419fb32 <knl_searchFreeArea+0x6a>
3419fb2c:	68fb      	ldr	r3, [r7, #12]
3419fb2e:	681b      	ldr	r3, [r3, #0]
3419fb30:	e013      	b.n	3419fb5a <knl_searchFreeArea+0x92>
3419fb32:	68fb      	ldr	r3, [r7, #12]
3419fb34:	e011      	b.n	3419fb5a <knl_searchFreeArea+0x92>
	} else {
		/* Search from smaller size. */
		while ( (q = q->next) != &imacb->freeque ) {
			if ( FreeSize(q) >= blksz ) {
3419fb36:	68fb      	ldr	r3, [r7, #12]
3419fb38:	3308      	adds	r3, #8
3419fb3a:	685b      	ldr	r3, [r3, #4]
3419fb3c:	461a      	mov	r2, r3
3419fb3e:	683b      	ldr	r3, [r7, #0]
3419fb40:	4293      	cmp	r3, r2
3419fb42:	dd08      	ble.n	3419fb56 <knl_searchFreeArea+0x8e>
		while ( (q = q->next) != &imacb->freeque ) {
3419fb44:	68fb      	ldr	r3, [r7, #12]
3419fb46:	681b      	ldr	r3, [r3, #0]
3419fb48:	60fb      	str	r3, [r7, #12]
3419fb4a:	687b      	ldr	r3, [r7, #4]
3419fb4c:	330c      	adds	r3, #12
3419fb4e:	68fa      	ldr	r2, [r7, #12]
3419fb50:	429a      	cmp	r2, r3
3419fb52:	d1f0      	bne.n	3419fb36 <knl_searchFreeArea+0x6e>
3419fb54:	e000      	b.n	3419fb58 <knl_searchFreeArea+0x90>
				break;
3419fb56:	bf00      	nop
			}
		}
		return q;
3419fb58:	68fb      	ldr	r3, [r7, #12]
	}
}
3419fb5a:	4618      	mov	r0, r3
3419fb5c:	3714      	adds	r7, #20
3419fb5e:	46bd      	mov	sp, r7
3419fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fb64:	4770      	bx	lr

3419fb66 <knl_appendFreeArea>:
 *	|   +-----------------------+	    +-----------------------+
 *	|   | AreaQue		    |	    | AreaQue		    |
 *	v   +-----------------------+	    +-----------------------+
 */
EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )
{
3419fb66:	b580      	push	{r7, lr}
3419fb68:	b084      	sub	sp, #16
3419fb6a:	af00      	add	r7, sp, #0
3419fb6c:	6078      	str	r0, [r7, #4]
3419fb6e:	6039      	str	r1, [r7, #0]
	QUEUE	*fq;
	W	size = AreaSize(aq);
3419fb70:	683b      	ldr	r3, [r7, #0]
3419fb72:	681a      	ldr	r2, [r3, #0]
3419fb74:	683b      	ldr	r3, [r7, #0]
3419fb76:	3308      	adds	r3, #8
3419fb78:	1ad3      	subs	r3, r2, r3
3419fb7a:	60fb      	str	r3, [r7, #12]
	/* Registration position search */
	/*  Search the free area whose size is equal to 'blksz',
	 *  or larger than 'blksz' but closest.
	 *  If it does not exist, return '&imacb->freeque'.
	 */
	fq = knl_searchFreeArea(imacb, size);
3419fb7c:	68f9      	ldr	r1, [r7, #12]
3419fb7e:	6878      	ldr	r0, [r7, #4]
3419fb80:	f7ff ffa2 	bl	3419fac8 <knl_searchFreeArea>
3419fb84:	60b8      	str	r0, [r7, #8]

	/* Register */
	clrAreaFlag(aq, AREA_USE);
3419fb86:	683b      	ldr	r3, [r7, #0]
3419fb88:	685b      	ldr	r3, [r3, #4]
3419fb8a:	f023 0301 	bic.w	r3, r3, #1
3419fb8e:	461a      	mov	r2, r3
3419fb90:	683b      	ldr	r3, [r7, #0]
3419fb92:	605a      	str	r2, [r3, #4]
	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
3419fb94:	687b      	ldr	r3, [r7, #4]
3419fb96:	330c      	adds	r3, #12
3419fb98:	68ba      	ldr	r2, [r7, #8]
3419fb9a:	429a      	cmp	r2, r3
3419fb9c:	d027      	beq.n	3419fbee <knl_appendFreeArea+0x88>
3419fb9e:	68bb      	ldr	r3, [r7, #8]
3419fba0:	3308      	adds	r3, #8
3419fba2:	685b      	ldr	r3, [r3, #4]
3419fba4:	461a      	mov	r2, r3
3419fba6:	68fb      	ldr	r3, [r7, #12]
3419fba8:	4293      	cmp	r3, r2
3419fbaa:	d120      	bne.n	3419fbee <knl_appendFreeArea+0x88>
		/* FreeQue Same size */
		(aq + 2)->next = (fq + 1)->next;
3419fbac:	68bb      	ldr	r3, [r7, #8]
3419fbae:	f103 0208 	add.w	r2, r3, #8
3419fbb2:	683b      	ldr	r3, [r7, #0]
3419fbb4:	3310      	adds	r3, #16
3419fbb6:	6812      	ldr	r2, [r2, #0]
3419fbb8:	601a      	str	r2, [r3, #0]
		(fq + 1)->next = aq + 2;
3419fbba:	68bb      	ldr	r3, [r7, #8]
3419fbbc:	3308      	adds	r3, #8
3419fbbe:	683a      	ldr	r2, [r7, #0]
3419fbc0:	3210      	adds	r2, #16
3419fbc2:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = fq + 1;
3419fbc4:	683b      	ldr	r3, [r7, #0]
3419fbc6:	3310      	adds	r3, #16
3419fbc8:	68ba      	ldr	r2, [r7, #8]
3419fbca:	3208      	adds	r2, #8
3419fbcc:	605a      	str	r2, [r3, #4]
		if( (aq + 2)->next != NULL ) {
3419fbce:	683b      	ldr	r3, [r7, #0]
3419fbd0:	3310      	adds	r3, #16
3419fbd2:	681b      	ldr	r3, [r3, #0]
3419fbd4:	2b00      	cmp	r3, #0
3419fbd6:	d005      	beq.n	3419fbe4 <knl_appendFreeArea+0x7e>
			(aq + 2)->next->prev = aq + 2;
3419fbd8:	683b      	ldr	r3, [r7, #0]
3419fbda:	3310      	adds	r3, #16
3419fbdc:	681b      	ldr	r3, [r3, #0]
3419fbde:	683a      	ldr	r2, [r7, #0]
3419fbe0:	3210      	adds	r2, #16
3419fbe2:	605a      	str	r2, [r3, #4]
		}
		(aq + 1)->next = NULL;
3419fbe4:	683b      	ldr	r3, [r7, #0]
3419fbe6:	3308      	adds	r3, #8
3419fbe8:	2200      	movs	r2, #0
3419fbea:	601a      	str	r2, [r3, #0]
3419fbec:	e00e      	b.n	3419fc0c <knl_appendFreeArea+0xa6>
	} else {
		/* FreeQue Size order */
		QueInsert(aq + 1, fq);
3419fbee:	683b      	ldr	r3, [r7, #0]
3419fbf0:	3308      	adds	r3, #8
3419fbf2:	68b9      	ldr	r1, [r7, #8]
3419fbf4:	4618      	mov	r0, r3
3419fbf6:	f7ff ff35 	bl	3419fa64 <QueInsert>
		(aq + 2)->next = NULL;
3419fbfa:	683b      	ldr	r3, [r7, #0]
3419fbfc:	3310      	adds	r3, #16
3419fbfe:	2200      	movs	r2, #0
3419fc00:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = (QUEUE*)size;
3419fc02:	683b      	ldr	r3, [r7, #0]
3419fc04:	3310      	adds	r3, #16
3419fc06:	68fa      	ldr	r2, [r7, #12]
3419fc08:	605a      	str	r2, [r3, #4]
	}
}
3419fc0a:	bf00      	nop
3419fc0c:	bf00      	nop
3419fc0e:	3710      	adds	r7, #16
3419fc10:	46bd      	mov	sp, r7
3419fc12:	bd80      	pop	{r7, pc}

3419fc14 <knl_removeFreeQue>:

/*
 * Delete from FreeQue
 */
EXPORT void knl_removeFreeQue( QUEUE *fq )
{
3419fc14:	b580      	push	{r7, lr}
3419fc16:	b082      	sub	sp, #8
3419fc18:	af00      	add	r7, sp, #0
3419fc1a:	6078      	str	r0, [r7, #4]
	if ( fq->next == NULL ) {	/* FreeQue Same size */
3419fc1c:	687b      	ldr	r3, [r7, #4]
3419fc1e:	681b      	ldr	r3, [r3, #0]
3419fc20:	2b00      	cmp	r3, #0
3419fc22:	d115      	bne.n	3419fc50 <knl_removeFreeQue+0x3c>
		(fq + 1)->prev->next = (fq + 1)->next;
3419fc24:	687b      	ldr	r3, [r7, #4]
3419fc26:	f103 0208 	add.w	r2, r3, #8
3419fc2a:	687b      	ldr	r3, [r7, #4]
3419fc2c:	3308      	adds	r3, #8
3419fc2e:	685b      	ldr	r3, [r3, #4]
3419fc30:	6812      	ldr	r2, [r2, #0]
3419fc32:	601a      	str	r2, [r3, #0]
		if ( (fq + 1)->next != NULL ) {
3419fc34:	687b      	ldr	r3, [r7, #4]
3419fc36:	3308      	adds	r3, #8
3419fc38:	681b      	ldr	r3, [r3, #0]
3419fc3a:	2b00      	cmp	r3, #0
3419fc3c:	d020      	beq.n	3419fc80 <knl_removeFreeQue+0x6c>
			(fq + 1)->next->prev = (fq + 1)->prev;
3419fc3e:	687b      	ldr	r3, [r7, #4]
3419fc40:	f103 0208 	add.w	r2, r3, #8
3419fc44:	687b      	ldr	r3, [r7, #4]
3419fc46:	3308      	adds	r3, #8
3419fc48:	681b      	ldr	r3, [r3, #0]
3419fc4a:	6852      	ldr	r2, [r2, #4]
3419fc4c:	605a      	str	r2, [r3, #4]
			QueInsert((fq + 1)->next - 1, fq);
			(fq + 1)->next->prev = (fq + 1)->prev;
		}
		QueRemove(fq);
	}
}
3419fc4e:	e017      	b.n	3419fc80 <knl_removeFreeQue+0x6c>
		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */
3419fc50:	687b      	ldr	r3, [r7, #4]
3419fc52:	3308      	adds	r3, #8
3419fc54:	681b      	ldr	r3, [r3, #0]
3419fc56:	2b00      	cmp	r3, #0
3419fc58:	d00f      	beq.n	3419fc7a <knl_removeFreeQue+0x66>
			QueInsert((fq + 1)->next - 1, fq);
3419fc5a:	687b      	ldr	r3, [r7, #4]
3419fc5c:	3308      	adds	r3, #8
3419fc5e:	681b      	ldr	r3, [r3, #0]
3419fc60:	3b08      	subs	r3, #8
3419fc62:	6879      	ldr	r1, [r7, #4]
3419fc64:	4618      	mov	r0, r3
3419fc66:	f7ff fefd 	bl	3419fa64 <QueInsert>
			(fq + 1)->next->prev = (fq + 1)->prev;
3419fc6a:	687b      	ldr	r3, [r7, #4]
3419fc6c:	f103 0208 	add.w	r2, r3, #8
3419fc70:	687b      	ldr	r3, [r7, #4]
3419fc72:	3308      	adds	r3, #8
3419fc74:	681b      	ldr	r3, [r3, #0]
3419fc76:	6852      	ldr	r2, [r2, #4]
3419fc78:	605a      	str	r2, [r3, #4]
		QueRemove(fq);
3419fc7a:	6878      	ldr	r0, [r7, #4]
3419fc7c:	f7ff ff0b 	bl	3419fa96 <QueRemove>
}
3419fc80:	bf00      	nop
3419fc82:	3708      	adds	r7, #8
3419fc84:	46bd      	mov	sp, r7
3419fc86:	bd80      	pop	{r7, pc}

3419fc88 <knl_insertAreaQue>:
/*
 * Register area
 *	Insert 'ent' just after 'que.'
 */
EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )
{
3419fc88:	b480      	push	{r7}
3419fc8a:	b083      	sub	sp, #12
3419fc8c:	af00      	add	r7, sp, #0
3419fc8e:	6078      	str	r0, [r7, #4]
3419fc90:	6039      	str	r1, [r7, #0]
	ent->prev = que;
3419fc92:	683b      	ldr	r3, [r7, #0]
3419fc94:	687a      	ldr	r2, [r7, #4]
3419fc96:	605a      	str	r2, [r3, #4]
	ent->next = que->next;
3419fc98:	687b      	ldr	r3, [r7, #4]
3419fc9a:	681a      	ldr	r2, [r3, #0]
3419fc9c:	683b      	ldr	r3, [r7, #0]
3419fc9e:	601a      	str	r2, [r3, #0]
	Assign(que->next->prev, ent);
3419fca0:	687b      	ldr	r3, [r7, #4]
3419fca2:	681b      	ldr	r3, [r3, #0]
3419fca4:	685b      	ldr	r3, [r3, #4]
3419fca6:	f003 0201 	and.w	r2, r3, #1
3419fcaa:	683b      	ldr	r3, [r7, #0]
3419fcac:	431a      	orrs	r2, r3
3419fcae:	687b      	ldr	r3, [r7, #4]
3419fcb0:	681b      	ldr	r3, [r3, #0]
3419fcb2:	605a      	str	r2, [r3, #4]
	que->next = ent;
3419fcb4:	687b      	ldr	r3, [r7, #4]
3419fcb6:	683a      	ldr	r2, [r7, #0]
3419fcb8:	601a      	str	r2, [r3, #0]
}
3419fcba:	bf00      	nop
3419fcbc:	370c      	adds	r7, #12
3419fcbe:	46bd      	mov	sp, r7
3419fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fcc4:	4770      	bx	lr

3419fcc6 <knl_removeAreaQue>:

/*
 * Delete area
 */
EXPORT void knl_removeAreaQue( QUEUE *aq )
{
3419fcc6:	b480      	push	{r7}
3419fcc8:	b083      	sub	sp, #12
3419fcca:	af00      	add	r7, sp, #0
3419fccc:	6078      	str	r0, [r7, #4]
	Mask(aq->prev)->next = aq->next;
3419fcce:	687b      	ldr	r3, [r7, #4]
3419fcd0:	685b      	ldr	r3, [r3, #4]
3419fcd2:	f023 0301 	bic.w	r3, r3, #1
3419fcd6:	461a      	mov	r2, r3
3419fcd8:	687b      	ldr	r3, [r7, #4]
3419fcda:	681b      	ldr	r3, [r3, #0]
3419fcdc:	6013      	str	r3, [r2, #0]
	Assign(aq->next->prev, Mask(aq->prev));
3419fcde:	687b      	ldr	r3, [r7, #4]
3419fce0:	681b      	ldr	r3, [r3, #0]
3419fce2:	685b      	ldr	r3, [r3, #4]
3419fce4:	f003 0201 	and.w	r2, r3, #1
3419fce8:	687b      	ldr	r3, [r7, #4]
3419fcea:	685b      	ldr	r3, [r3, #4]
3419fcec:	f023 0301 	bic.w	r3, r3, #1
3419fcf0:	431a      	orrs	r2, r3
3419fcf2:	687b      	ldr	r3, [r7, #4]
3419fcf4:	681b      	ldr	r3, [r3, #0]
3419fcf6:	605a      	str	r2, [r3, #4]
}
3419fcf8:	bf00      	nop
3419fcfa:	370c      	adds	r7, #12
3419fcfc:	46bd      	mov	sp, r7
3419fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
3419fd02:	4770      	bx	lr

3419fd04 <knl_Imalloc>:

/*
 * Memory allocate
 */
EXPORT void* knl_Imalloc( SZ size )
{
3419fd04:	b580      	push	{r7, lr}
3419fd06:	b086      	sub	sp, #24
3419fd08:	af00      	add	r7, sp, #0
3419fd0a:	6078      	str	r0, [r7, #4]
	QUEUE	*q, *aq, *aq2;
	UINT	imask;

	/* If it is smaller than the minimum fragment size,
	   allocate the minimum size to it. */
	if( size <= 0 ) {
3419fd0c:	687b      	ldr	r3, [r7, #4]
3419fd0e:	2b00      	cmp	r3, #0
3419fd10:	dc01      	bgt.n	3419fd16 <knl_Imalloc+0x12>
		return (void *)NULL;
3419fd12:	2300      	movs	r3, #0
3419fd14:	e045      	b.n	3419fda2 <knl_Imalloc+0x9e>
	} else 	if ( size < MIN_FRAGMENT ) {
3419fd16:	687b      	ldr	r3, [r7, #4]
3419fd18:	2b0f      	cmp	r3, #15
3419fd1a:	d802      	bhi.n	3419fd22 <knl_Imalloc+0x1e>
		size = MIN_FRAGMENT;
3419fd1c:	2310      	movs	r3, #16
3419fd1e:	607b      	str	r3, [r7, #4]
3419fd20:	e004      	b.n	3419fd2c <knl_Imalloc+0x28>
	} else {
		size = ROUND(size);
3419fd22:	687b      	ldr	r3, [r7, #4]
3419fd24:	3307      	adds	r3, #7
3419fd26:	f023 0307 	bic.w	r3, r3, #7
3419fd2a:	607b      	str	r3, [r7, #4]
	}

	DI(imask);  /* Exclusive control by interrupt disable */
3419fd2c:	f002 fead 	bl	341a2a8a <disint>
3419fd30:	6138      	str	r0, [r7, #16]

	/* Search FreeQue */
	q = knl_searchFreeArea(knl_imacb, size);
3419fd32:	4b1e      	ldr	r3, [pc, #120]	@ (3419fdac <knl_Imalloc+0xa8>)
3419fd34:	681b      	ldr	r3, [r3, #0]
3419fd36:	6879      	ldr	r1, [r7, #4]
3419fd38:	4618      	mov	r0, r3
3419fd3a:	f7ff fec5 	bl	3419fac8 <knl_searchFreeArea>
3419fd3e:	6178      	str	r0, [r7, #20]
	if ( q == &(knl_imacb->freeque) ) {
3419fd40:	4b1a      	ldr	r3, [pc, #104]	@ (3419fdac <knl_Imalloc+0xa8>)
3419fd42:	681b      	ldr	r3, [r3, #0]
3419fd44:	330c      	adds	r3, #12
3419fd46:	697a      	ldr	r2, [r7, #20]
3419fd48:	429a      	cmp	r2, r3
3419fd4a:	d102      	bne.n	3419fd52 <knl_Imalloc+0x4e>
		q = NULL; /* Insufficient memory */
3419fd4c:	2300      	movs	r3, #0
3419fd4e:	617b      	str	r3, [r7, #20]
		goto err_ret;
3419fd50:	e023      	b.n	3419fd9a <knl_Imalloc+0x96>
	}

	/* There is free area: Split from FreeQue once */
	knl_removeFreeQue(q);
3419fd52:	6978      	ldr	r0, [r7, #20]
3419fd54:	f7ff ff5e 	bl	3419fc14 <knl_removeFreeQue>

	aq = q - 1;
3419fd58:	697b      	ldr	r3, [r7, #20]
3419fd5a:	3b08      	subs	r3, #8
3419fd5c:	60fb      	str	r3, [r7, #12]

	/* If there are fragments smaller than the minimum fragment size,
	   allocate them also */
	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {
3419fd5e:	697b      	ldr	r3, [r7, #20]
3419fd60:	3308      	adds	r3, #8
3419fd62:	685b      	ldr	r3, [r3, #4]
3419fd64:	461a      	mov	r2, r3
3419fd66:	687b      	ldr	r3, [r7, #4]
3419fd68:	1ad3      	subs	r3, r2, r3
3419fd6a:	2b17      	cmp	r3, #23
3419fd6c:	d90e      	bls.n	3419fd8c <knl_Imalloc+0x88>

		/* Divide area into 2 */
		aq2 = (QUEUE*)((VB*)(aq + 1) + size);
3419fd6e:	687b      	ldr	r3, [r7, #4]
3419fd70:	3308      	adds	r3, #8
3419fd72:	68fa      	ldr	r2, [r7, #12]
3419fd74:	4413      	add	r3, r2
3419fd76:	60bb      	str	r3, [r7, #8]
		knl_insertAreaQue(aq, aq2);
3419fd78:	68b9      	ldr	r1, [r7, #8]
3419fd7a:	68f8      	ldr	r0, [r7, #12]
3419fd7c:	f7ff ff84 	bl	3419fc88 <knl_insertAreaQue>

		/* Register remaining area to FreeQue */
		knl_appendFreeArea(knl_imacb, aq2);
3419fd80:	4b0a      	ldr	r3, [pc, #40]	@ (3419fdac <knl_Imalloc+0xa8>)
3419fd82:	681b      	ldr	r3, [r3, #0]
3419fd84:	68b9      	ldr	r1, [r7, #8]
3419fd86:	4618      	mov	r0, r3
3419fd88:	f7ff feed 	bl	3419fb66 <knl_appendFreeArea>
	}
	setAreaFlag(aq, AREA_USE);
3419fd8c:	68fb      	ldr	r3, [r7, #12]
3419fd8e:	685b      	ldr	r3, [r3, #4]
3419fd90:	f043 0301 	orr.w	r3, r3, #1
3419fd94:	461a      	mov	r2, r3
3419fd96:	68fb      	ldr	r3, [r7, #12]
3419fd98:	605a      	str	r2, [r3, #4]

err_ret:
	EI(imask);
3419fd9a:	6938      	ldr	r0, [r7, #16]
3419fd9c:	f002 fe59 	bl	341a2a52 <set_basepri>

	return (void *)q;
3419fda0:	697b      	ldr	r3, [r7, #20]
}
3419fda2:	4618      	mov	r0, r3
3419fda4:	3718      	adds	r7, #24
3419fda6:	46bd      	mov	sp, r7
3419fda8:	bd80      	pop	{r7, pc}
3419fdaa:	bf00      	nop
3419fdac:	341c42f8 	.word	0x341c42f8

3419fdb0 <knl_Ifree>:

/*
 * Free memory
 */
EXPORT void  knl_Ifree( void *ptr )
{
3419fdb0:	b580      	push	{r7, lr}
3419fdb2:	b084      	sub	sp, #16
3419fdb4:	af00      	add	r7, sp, #0
3419fdb6:	6078      	str	r0, [r7, #4]
	QUEUE	*aq;
	UINT	imask;

	DI(imask);  /* Exclusive control by interrupt disable */
3419fdb8:	f002 fe67 	bl	341a2a8a <disint>
3419fdbc:	60b8      	str	r0, [r7, #8]

	aq = (QUEUE*)ptr - 1;
3419fdbe:	687b      	ldr	r3, [r7, #4]
3419fdc0:	3b08      	subs	r3, #8
3419fdc2:	60fb      	str	r3, [r7, #12]
	clrAreaFlag(aq, AREA_USE);
3419fdc4:	68fb      	ldr	r3, [r7, #12]
3419fdc6:	685b      	ldr	r3, [r3, #4]
3419fdc8:	f023 0301 	bic.w	r3, r3, #1
3419fdcc:	461a      	mov	r2, r3
3419fdce:	68fb      	ldr	r3, [r7, #12]
3419fdd0:	605a      	str	r2, [r3, #4]

	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
3419fdd2:	68fb      	ldr	r3, [r7, #12]
3419fdd4:	681b      	ldr	r3, [r3, #0]
3419fdd6:	685b      	ldr	r3, [r3, #4]
3419fdd8:	f003 0301 	and.w	r3, r3, #1
3419fddc:	2b00      	cmp	r3, #0
3419fdde:	d10a      	bne.n	3419fdf6 <knl_Ifree+0x46>
		/* Merge with free area in after location */
		knl_removeFreeQue(aq->next + 1);
3419fde0:	68fb      	ldr	r3, [r7, #12]
3419fde2:	681b      	ldr	r3, [r3, #0]
3419fde4:	3308      	adds	r3, #8
3419fde6:	4618      	mov	r0, r3
3419fde8:	f7ff ff14 	bl	3419fc14 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
3419fdec:	68fb      	ldr	r3, [r7, #12]
3419fdee:	681b      	ldr	r3, [r3, #0]
3419fdf0:	4618      	mov	r0, r3
3419fdf2:	f7ff ff68 	bl	3419fcc6 <knl_removeAreaQue>
	}

	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
3419fdf6:	68fb      	ldr	r3, [r7, #12]
3419fdf8:	685b      	ldr	r3, [r3, #4]
3419fdfa:	685b      	ldr	r3, [r3, #4]
3419fdfc:	f003 0301 	and.w	r3, r3, #1
3419fe00:	2b00      	cmp	r3, #0
3419fe02:	d10c      	bne.n	3419fe1e <knl_Ifree+0x6e>
		/* Merge with free area in front location */
		aq = aq->prev;
3419fe04:	68fb      	ldr	r3, [r7, #12]
3419fe06:	685b      	ldr	r3, [r3, #4]
3419fe08:	60fb      	str	r3, [r7, #12]
		knl_removeFreeQue(aq + 1);
3419fe0a:	68fb      	ldr	r3, [r7, #12]
3419fe0c:	3308      	adds	r3, #8
3419fe0e:	4618      	mov	r0, r3
3419fe10:	f7ff ff00 	bl	3419fc14 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
3419fe14:	68fb      	ldr	r3, [r7, #12]
3419fe16:	681b      	ldr	r3, [r3, #0]
3419fe18:	4618      	mov	r0, r3
3419fe1a:	f7ff ff54 	bl	3419fcc6 <knl_removeAreaQue>
	}

	knl_appendFreeArea(knl_imacb, aq);
3419fe1e:	4b06      	ldr	r3, [pc, #24]	@ (3419fe38 <knl_Ifree+0x88>)
3419fe20:	681b      	ldr	r3, [r3, #0]
3419fe22:	68f9      	ldr	r1, [r7, #12]
3419fe24:	4618      	mov	r0, r3
3419fe26:	f7ff fe9e 	bl	3419fb66 <knl_appendFreeArea>

	EI(imask);
3419fe2a:	68b8      	ldr	r0, [r7, #8]
3419fe2c:	f002 fe11 	bl	341a2a52 <set_basepri>
}
3419fe30:	bf00      	nop
3419fe32:	3710      	adds	r7, #16
3419fe34:	46bd      	mov	sp, r7
3419fe36:	bd80      	pop	{r7, pc}
3419fe38:	341c42f8 	.word	0x341c42f8

3419fe3c <initIMACB>:

/*
 * IMACB Initialization 
 */
LOCAL void initIMACB( void )
{
3419fe3c:	b580      	push	{r7, lr}
3419fe3e:	af00      	add	r7, sp, #0
	QueInit(&(knl_imacb->areaque));
3419fe40:	4b06      	ldr	r3, [pc, #24]	@ (3419fe5c <initIMACB+0x20>)
3419fe42:	681b      	ldr	r3, [r3, #0]
3419fe44:	3304      	adds	r3, #4
3419fe46:	4618      	mov	r0, r3
3419fe48:	f7ff fdfc 	bl	3419fa44 <QueInit>
	QueInit(&(knl_imacb->freeque));
3419fe4c:	4b03      	ldr	r3, [pc, #12]	@ (3419fe5c <initIMACB+0x20>)
3419fe4e:	681b      	ldr	r3, [r3, #0]
3419fe50:	330c      	adds	r3, #12
3419fe52:	4618      	mov	r0, r3
3419fe54:	f7ff fdf6 	bl	3419fa44 <QueInit>
}
3419fe58:	bf00      	nop
3419fe5a:	bd80      	pop	{r7, pc}
3419fe5c:	341c42f8 	.word	0x341c42f8

3419fe60 <knl_init_Imalloc>:

/*
 * Imalloc initial setting 
 */
EXPORT ER knl_init_Imalloc( void )
{
3419fe60:	b580      	push	{r7, lr}
3419fe62:	b082      	sub	sp, #8
3419fe64:	af00      	add	r7, sp, #0
	QUEUE	*top, *end;

	/* Align top with 4 byte unit alignment for IMACB */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);
3419fe66:	4b2e      	ldr	r3, [pc, #184]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe68:	681b      	ldr	r3, [r3, #0]
3419fe6a:	3303      	adds	r3, #3
3419fe6c:	f023 0303 	bic.w	r3, r3, #3
3419fe70:	461a      	mov	r2, r3
3419fe72:	4b2b      	ldr	r3, [pc, #172]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe74:	601a      	str	r2, [r3, #0]
	knl_imacb = (IMACB*)knl_lowmem_top;
3419fe76:	4b2a      	ldr	r3, [pc, #168]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe78:	681b      	ldr	r3, [r3, #0]
3419fe7a:	4a2a      	ldr	r2, [pc, #168]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419fe7c:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));
3419fe7e:	4b28      	ldr	r3, [pc, #160]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe80:	681b      	ldr	r3, [r3, #0]
3419fe82:	3314      	adds	r3, #20
3419fe84:	461a      	mov	r2, r3
3419fe86:	4b26      	ldr	r3, [pc, #152]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe88:	601a      	str	r2, [r3, #0]

	/* Align top with 8 byte unit alignment */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);
3419fe8a:	4b25      	ldr	r3, [pc, #148]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe8c:	681b      	ldr	r3, [r3, #0]
3419fe8e:	3307      	adds	r3, #7
3419fe90:	f023 0307 	bic.w	r3, r3, #7
3419fe94:	461a      	mov	r2, r3
3419fe96:	4b22      	ldr	r3, [pc, #136]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe98:	601a      	str	r2, [r3, #0]
	top = (QUEUE*)knl_lowmem_top;
3419fe9a:	4b21      	ldr	r3, [pc, #132]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fe9c:	681b      	ldr	r3, [r3, #0]
3419fe9e:	607b      	str	r3, [r7, #4]
	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);
3419fea0:	4b21      	ldr	r3, [pc, #132]	@ (3419ff28 <knl_init_Imalloc+0xc8>)
3419fea2:	681b      	ldr	r3, [r3, #0]
3419fea4:	461a      	mov	r2, r3
3419fea6:	4b1e      	ldr	r3, [pc, #120]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419fea8:	681b      	ldr	r3, [r3, #0]
3419feaa:	1ad3      	subs	r3, r2, r3
3419feac:	f1a3 0210 	sub.w	r2, r3, #16
3419feb0:	4b1c      	ldr	r3, [pc, #112]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419feb2:	681b      	ldr	r3, [r3, #0]
3419feb4:	601a      	str	r2, [r3, #0]

	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */
3419feb6:	4b1c      	ldr	r3, [pc, #112]	@ (3419ff28 <knl_init_Imalloc+0xc8>)
3419feb8:	681b      	ldr	r3, [r3, #0]
3419feba:	4a19      	ldr	r2, [pc, #100]	@ (3419ff20 <knl_init_Imalloc+0xc0>)
3419febc:	6013      	str	r3, [r2, #0]

	initIMACB();
3419febe:	f7ff ffbd 	bl	3419fe3c <initIMACB>

	/* Register on AreaQue */
	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;
3419fec2:	4b18      	ldr	r3, [pc, #96]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419fec4:	681b      	ldr	r3, [r3, #0]
3419fec6:	681b      	ldr	r3, [r3, #0]
3419fec8:	3308      	adds	r3, #8
3419feca:	687a      	ldr	r2, [r7, #4]
3419fecc:	4413      	add	r3, r2
3419fece:	603b      	str	r3, [r7, #0]
	knl_insertAreaQue(&knl_imacb->areaque, end);
3419fed0:	4b14      	ldr	r3, [pc, #80]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419fed2:	681b      	ldr	r3, [r3, #0]
3419fed4:	3304      	adds	r3, #4
3419fed6:	6839      	ldr	r1, [r7, #0]
3419fed8:	4618      	mov	r0, r3
3419feda:	f7ff fed5 	bl	3419fc88 <knl_insertAreaQue>
	knl_insertAreaQue(&knl_imacb->areaque, top);
3419fede:	4b11      	ldr	r3, [pc, #68]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419fee0:	681b      	ldr	r3, [r3, #0]
3419fee2:	3304      	adds	r3, #4
3419fee4:	6879      	ldr	r1, [r7, #4]
3419fee6:	4618      	mov	r0, r3
3419fee8:	f7ff fece 	bl	3419fc88 <knl_insertAreaQue>
	setAreaFlag(end, AREA_USE);
3419feec:	683b      	ldr	r3, [r7, #0]
3419feee:	685b      	ldr	r3, [r3, #4]
3419fef0:	f043 0301 	orr.w	r3, r3, #1
3419fef4:	461a      	mov	r2, r3
3419fef6:	683b      	ldr	r3, [r7, #0]
3419fef8:	605a      	str	r2, [r3, #4]
	setAreaFlag(&knl_imacb->areaque, AREA_USE);
3419fefa:	4b0a      	ldr	r3, [pc, #40]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419fefc:	681b      	ldr	r3, [r3, #0]
3419fefe:	689b      	ldr	r3, [r3, #8]
3419ff00:	f043 0201 	orr.w	r2, r3, #1
3419ff04:	4b07      	ldr	r3, [pc, #28]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419ff06:	681b      	ldr	r3, [r3, #0]
3419ff08:	609a      	str	r2, [r3, #8]

	knl_appendFreeArea(knl_imacb, top);
3419ff0a:	4b06      	ldr	r3, [pc, #24]	@ (3419ff24 <knl_init_Imalloc+0xc4>)
3419ff0c:	681b      	ldr	r3, [r3, #0]
3419ff0e:	6879      	ldr	r1, [r7, #4]
3419ff10:	4618      	mov	r0, r3
3419ff12:	f7ff fe28 	bl	3419fb66 <knl_appendFreeArea>

	return E_OK;
3419ff16:	2300      	movs	r3, #0
}
3419ff18:	4618      	mov	r0, r3
3419ff1a:	3708      	adds	r7, #8
3419ff1c:	46bd      	mov	sp, r7
3419ff1e:	bd80      	pop	{r7, pc}
3419ff20:	341c356c 	.word	0x341c356c
3419ff24:	341c42f8 	.word	0x341c42f8
3419ff28:	341c3570 	.word	0x341c3570

3419ff2c <QueInit>:
{
3419ff2c:	b480      	push	{r7}
3419ff2e:	b083      	sub	sp, #12
3419ff30:	af00      	add	r7, sp, #0
3419ff32:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419ff34:	687b      	ldr	r3, [r7, #4]
3419ff36:	687a      	ldr	r2, [r7, #4]
3419ff38:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419ff3a:	687b      	ldr	r3, [r7, #4]
3419ff3c:	687a      	ldr	r2, [r7, #4]
3419ff3e:	605a      	str	r2, [r3, #4]
}
3419ff40:	bf00      	nop
3419ff42:	370c      	adds	r7, #12
3419ff44:	46bd      	mov	sp, r7
3419ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ff4a:	4770      	bx	lr

3419ff4c <QueInsert>:
{
3419ff4c:	b480      	push	{r7}
3419ff4e:	b083      	sub	sp, #12
3419ff50:	af00      	add	r7, sp, #0
3419ff52:	6078      	str	r0, [r7, #4]
3419ff54:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
3419ff56:	683b      	ldr	r3, [r7, #0]
3419ff58:	685a      	ldr	r2, [r3, #4]
3419ff5a:	687b      	ldr	r3, [r7, #4]
3419ff5c:	605a      	str	r2, [r3, #4]
	entry->next = que;
3419ff5e:	687b      	ldr	r3, [r7, #4]
3419ff60:	683a      	ldr	r2, [r7, #0]
3419ff62:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
3419ff64:	683b      	ldr	r3, [r7, #0]
3419ff66:	685b      	ldr	r3, [r3, #4]
3419ff68:	687a      	ldr	r2, [r7, #4]
3419ff6a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
3419ff6c:	683b      	ldr	r3, [r7, #0]
3419ff6e:	687a      	ldr	r2, [r7, #4]
3419ff70:	605a      	str	r2, [r3, #4]
}
3419ff72:	bf00      	nop
3419ff74:	370c      	adds	r7, #12
3419ff76:	46bd      	mov	sp, r7
3419ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ff7c:	4770      	bx	lr

3419ff7e <knl_InitOBJLOCK>:
typedef struct objlock {
	QUEUE		wtskq;		/* Wait task queue */
} OBJLOCK;

Inline void knl_InitOBJLOCK( OBJLOCK *loc )
{
3419ff7e:	b480      	push	{r7}
3419ff80:	b083      	sub	sp, #12
3419ff82:	af00      	add	r7, sp, #0
3419ff84:	6078      	str	r0, [r7, #4]
	loc->wtskq.next = NULL;
3419ff86:	687b      	ldr	r3, [r7, #4]
3419ff88:	2200      	movs	r2, #0
3419ff8a:	601a      	str	r2, [r3, #0]
}
3419ff8c:	bf00      	nop
3419ff8e:	370c      	adds	r7, #12
3419ff90:	46bd      	mov	sp, r7
3419ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
3419ff96:	4770      	bx	lr

3419ff98 <knl_fix_memorypool_initialize>:

/*
 * Initialization of fixed size memory pool control block
 */
EXPORT ER knl_fix_memorypool_initialize( void )
{
3419ff98:	b580      	push	{r7, lr}
3419ff9a:	b082      	sub	sp, #8
3419ff9c:	af00      	add	r7, sp, #0
	if ( NUM_MPFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mpfcb);
3419ff9e:	4810      	ldr	r0, [pc, #64]	@ (3419ffe0 <knl_fix_memorypool_initialize+0x48>)
3419ffa0:	f7ff ffc4 	bl	3419ff2c <QueInit>
	end = knl_mpfcb_table + NUM_MPFID;
3419ffa4:	4b0f      	ldr	r3, [pc, #60]	@ (3419ffe4 <knl_fix_memorypool_initialize+0x4c>)
3419ffa6:	603b      	str	r3, [r7, #0]
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
3419ffa8:	4b0f      	ldr	r3, [pc, #60]	@ (3419ffe8 <knl_fix_memorypool_initialize+0x50>)
3419ffaa:	607b      	str	r3, [r7, #4]
3419ffac:	e00f      	b.n	3419ffce <knl_fix_memorypool_initialize+0x36>
		mpfcb->mpfid = 0;
3419ffae:	687b      	ldr	r3, [r7, #4]
3419ffb0:	2200      	movs	r2, #0
3419ffb2:	609a      	str	r2, [r3, #8]
		knl_InitOBJLOCK(&mpfcb->lock);
3419ffb4:	687b      	ldr	r3, [r7, #4]
3419ffb6:	3330      	adds	r3, #48	@ 0x30
3419ffb8:	4618      	mov	r0, r3
3419ffba:	f7ff ffe0 	bl	3419ff7e <knl_InitOBJLOCK>
		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
3419ffbe:	687b      	ldr	r3, [r7, #4]
3419ffc0:	4907      	ldr	r1, [pc, #28]	@ (3419ffe0 <knl_fix_memorypool_initialize+0x48>)
3419ffc2:	4618      	mov	r0, r3
3419ffc4:	f7ff ffc2 	bl	3419ff4c <QueInsert>
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
3419ffc8:	687b      	ldr	r3, [r7, #4]
3419ffca:	3338      	adds	r3, #56	@ 0x38
3419ffcc:	607b      	str	r3, [r7, #4]
3419ffce:	687a      	ldr	r2, [r7, #4]
3419ffd0:	683b      	ldr	r3, [r7, #0]
3419ffd2:	429a      	cmp	r2, r3
3419ffd4:	d3eb      	bcc.n	3419ffae <knl_fix_memorypool_initialize+0x16>
	}

	return E_OK;
3419ffd6:	2300      	movs	r3, #0
}
3419ffd8:	4618      	mov	r0, r3
3419ffda:	3708      	adds	r7, #8
3419ffdc:	46bd      	mov	sp, r7
3419ffde:	bd80      	pop	{r7, pc}
3419ffe0:	341c44bc 	.word	0x341c44bc
3419ffe4:	341c44bc 	.word	0x341c44bc
3419ffe8:	341c42fc 	.word	0x341c42fc

3419ffec <QueInit>:
{
3419ffec:	b480      	push	{r7}
3419ffee:	b083      	sub	sp, #12
3419fff0:	af00      	add	r7, sp, #0
3419fff2:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
3419fff4:	687b      	ldr	r3, [r7, #4]
3419fff6:	687a      	ldr	r2, [r7, #4]
3419fff8:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
3419fffa:	687b      	ldr	r3, [r7, #4]
3419fffc:	687a      	ldr	r2, [r7, #4]
3419fffe:	605a      	str	r2, [r3, #4]
}
341a0000:	bf00      	nop
341a0002:	370c      	adds	r7, #12
341a0004:	46bd      	mov	sp, r7
341a0006:	f85d 7b04 	ldr.w	r7, [sp], #4
341a000a:	4770      	bx	lr

341a000c <QueInsert>:
{
341a000c:	b480      	push	{r7}
341a000e:	b083      	sub	sp, #12
341a0010:	af00      	add	r7, sp, #0
341a0012:	6078      	str	r0, [r7, #4]
341a0014:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a0016:	683b      	ldr	r3, [r7, #0]
341a0018:	685a      	ldr	r2, [r3, #4]
341a001a:	687b      	ldr	r3, [r7, #4]
341a001c:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a001e:	687b      	ldr	r3, [r7, #4]
341a0020:	683a      	ldr	r2, [r7, #0]
341a0022:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a0024:	683b      	ldr	r3, [r7, #0]
341a0026:	685b      	ldr	r3, [r3, #4]
341a0028:	687a      	ldr	r2, [r7, #4]
341a002a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a002c:	683b      	ldr	r3, [r7, #0]
341a002e:	687a      	ldr	r2, [r7, #4]
341a0030:	605a      	str	r2, [r3, #4]
}
341a0032:	bf00      	nop
341a0034:	370c      	adds	r7, #12
341a0036:	46bd      	mov	sp, r7
341a0038:	f85d 7b04 	ldr.w	r7, [sp], #4
341a003c:	4770      	bx	lr
	...

341a0040 <knl_memorypool_initialize>:

/*
 * Initialization of variable size memory pool control block
 */
EXPORT ER knl_memorypool_initialize( void )
{
341a0040:	b580      	push	{r7, lr}
341a0042:	b082      	sub	sp, #8
341a0044:	af00      	add	r7, sp, #0
	if ( NUM_MPLID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mplcb);
341a0046:	480e      	ldr	r0, [pc, #56]	@ (341a0080 <knl_memorypool_initialize+0x40>)
341a0048:	f7ff ffd0 	bl	3419ffec <QueInit>
	end = knl_mplcb_table + NUM_MPLID;
341a004c:	4b0d      	ldr	r3, [pc, #52]	@ (341a0084 <knl_memorypool_initialize+0x44>)
341a004e:	603b      	str	r3, [r7, #0]
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
341a0050:	4b0d      	ldr	r3, [pc, #52]	@ (341a0088 <knl_memorypool_initialize+0x48>)
341a0052:	607b      	str	r3, [r7, #4]
341a0054:	e00a      	b.n	341a006c <knl_memorypool_initialize+0x2c>
		mplcb->mplid = 0;
341a0056:	687b      	ldr	r3, [r7, #4]
341a0058:	2200      	movs	r2, #0
341a005a:	609a      	str	r2, [r3, #8]
		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
341a005c:	687b      	ldr	r3, [r7, #4]
341a005e:	4908      	ldr	r1, [pc, #32]	@ (341a0080 <knl_memorypool_initialize+0x40>)
341a0060:	4618      	mov	r0, r3
341a0062:	f7ff ffd3 	bl	341a000c <QueInsert>
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
341a0066:	687b      	ldr	r3, [r7, #4]
341a0068:	3334      	adds	r3, #52	@ 0x34
341a006a:	607b      	str	r3, [r7, #4]
341a006c:	687a      	ldr	r2, [r7, #4]
341a006e:	683b      	ldr	r3, [r7, #0]
341a0070:	429a      	cmp	r2, r3
341a0072:	d3f0      	bcc.n	341a0056 <knl_memorypool_initialize+0x16>
	}

	return E_OK;
341a0074:	2300      	movs	r3, #0
}
341a0076:	4618      	mov	r0, r3
341a0078:	3708      	adds	r7, #8
341a007a:	46bd      	mov	sp, r7
341a007c:	bd80      	pop	{r7, pc}
341a007e:	bf00      	nop
341a0080:	341c4594 	.word	0x341c4594
341a0084:	341c4594 	.word	0x341c4594
341a0088:	341c44c4 	.word	0x341c44c4

341a008c <QueInit>:
{
341a008c:	b480      	push	{r7}
341a008e:	b083      	sub	sp, #12
341a0090:	af00      	add	r7, sp, #0
341a0092:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a0094:	687b      	ldr	r3, [r7, #4]
341a0096:	687a      	ldr	r2, [r7, #4]
341a0098:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a009a:	687b      	ldr	r3, [r7, #4]
341a009c:	687a      	ldr	r2, [r7, #4]
341a009e:	605a      	str	r2, [r3, #4]
}
341a00a0:	bf00      	nop
341a00a2:	370c      	adds	r7, #12
341a00a4:	46bd      	mov	sp, r7
341a00a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341a00aa:	4770      	bx	lr

341a00ac <QueInsert>:
{
341a00ac:	b480      	push	{r7}
341a00ae:	b083      	sub	sp, #12
341a00b0:	af00      	add	r7, sp, #0
341a00b2:	6078      	str	r0, [r7, #4]
341a00b4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a00b6:	683b      	ldr	r3, [r7, #0]
341a00b8:	685a      	ldr	r2, [r3, #4]
341a00ba:	687b      	ldr	r3, [r7, #4]
341a00bc:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a00be:	687b      	ldr	r3, [r7, #4]
341a00c0:	683a      	ldr	r2, [r7, #0]
341a00c2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a00c4:	683b      	ldr	r3, [r7, #0]
341a00c6:	685b      	ldr	r3, [r3, #4]
341a00c8:	687a      	ldr	r2, [r7, #4]
341a00ca:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a00cc:	683b      	ldr	r3, [r7, #0]
341a00ce:	687a      	ldr	r2, [r7, #4]
341a00d0:	605a      	str	r2, [r3, #4]
}
341a00d2:	bf00      	nop
341a00d4:	370c      	adds	r7, #12
341a00d6:	46bd      	mov	sp, r7
341a00d8:	f85d 7b04 	ldr.w	r7, [sp], #4
341a00dc:	4770      	bx	lr
	...

341a00e0 <knl_messagebuffer_initialize>:

/*
 * Initialization of message buffer control block 
 */
EXPORT ER knl_messagebuffer_initialize( void )
{
341a00e0:	b580      	push	{r7, lr}
341a00e2:	b082      	sub	sp, #8
341a00e4:	af00      	add	r7, sp, #0
	if ( NUM_MBFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbfcb);
341a00e6:	480e      	ldr	r0, [pc, #56]	@ (341a0120 <knl_messagebuffer_initialize+0x40>)
341a00e8:	f7ff ffd0 	bl	341a008c <QueInit>
	end = knl_mbfcb_table + NUM_MBFID;
341a00ec:	4b0d      	ldr	r3, [pc, #52]	@ (341a0124 <knl_messagebuffer_initialize+0x44>)
341a00ee:	603b      	str	r3, [r7, #0]
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
341a00f0:	4b0d      	ldr	r3, [pc, #52]	@ (341a0128 <knl_messagebuffer_initialize+0x48>)
341a00f2:	607b      	str	r3, [r7, #4]
341a00f4:	e00a      	b.n	341a010c <knl_messagebuffer_initialize+0x2c>
		mbfcb->mbfid = 0;
341a00f6:	687b      	ldr	r3, [r7, #4]
341a00f8:	2200      	movs	r2, #0
341a00fa:	609a      	str	r2, [r3, #8]
		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
341a00fc:	687b      	ldr	r3, [r7, #4]
341a00fe:	4908      	ldr	r1, [pc, #32]	@ (341a0120 <knl_messagebuffer_initialize+0x40>)
341a0100:	4618      	mov	r0, r3
341a0102:	f7ff ffd3 	bl	341a00ac <QueInsert>
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
341a0106:	687b      	ldr	r3, [r7, #4]
341a0108:	3334      	adds	r3, #52	@ 0x34
341a010a:	607b      	str	r3, [r7, #4]
341a010c:	687a      	ldr	r2, [r7, #4]
341a010e:	683b      	ldr	r3, [r7, #0]
341a0110:	429a      	cmp	r2, r3
341a0112:	d3f0      	bcc.n	341a00f6 <knl_messagebuffer_initialize+0x16>
	}

	return E_OK;
341a0114:	2300      	movs	r3, #0
}
341a0116:	4618      	mov	r0, r3
341a0118:	3708      	adds	r7, #8
341a011a:	46bd      	mov	sp, r7
341a011c:	bd80      	pop	{r7, pc}
341a011e:	bf00      	nop
341a0120:	341c473c 	.word	0x341c473c
341a0124:	341c473c 	.word	0x341c473c
341a0128:	341c459c 	.word	0x341c459c

341a012c <QueInit>:
{
341a012c:	b480      	push	{r7}
341a012e:	b083      	sub	sp, #12
341a0130:	af00      	add	r7, sp, #0
341a0132:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a0134:	687b      	ldr	r3, [r7, #4]
341a0136:	687a      	ldr	r2, [r7, #4]
341a0138:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a013a:	687b      	ldr	r3, [r7, #4]
341a013c:	687a      	ldr	r2, [r7, #4]
341a013e:	605a      	str	r2, [r3, #4]
}
341a0140:	bf00      	nop
341a0142:	370c      	adds	r7, #12
341a0144:	46bd      	mov	sp, r7
341a0146:	f85d 7b04 	ldr.w	r7, [sp], #4
341a014a:	4770      	bx	lr

341a014c <isQueEmpty>:
{
341a014c:	b480      	push	{r7}
341a014e:	b083      	sub	sp, #12
341a0150:	af00      	add	r7, sp, #0
341a0152:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
341a0154:	687b      	ldr	r3, [r7, #4]
341a0156:	681b      	ldr	r3, [r3, #0]
341a0158:	687a      	ldr	r2, [r7, #4]
341a015a:	429a      	cmp	r2, r3
341a015c:	bf0c      	ite	eq
341a015e:	2301      	moveq	r3, #1
341a0160:	2300      	movne	r3, #0
341a0162:	b2db      	uxtb	r3, r3
}
341a0164:	4618      	mov	r0, r3
341a0166:	370c      	adds	r7, #12
341a0168:	46bd      	mov	sp, r7
341a016a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a016e:	4770      	bx	lr

341a0170 <QueInsert>:
{
341a0170:	b480      	push	{r7}
341a0172:	b083      	sub	sp, #12
341a0174:	af00      	add	r7, sp, #0
341a0176:	6078      	str	r0, [r7, #4]
341a0178:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a017a:	683b      	ldr	r3, [r7, #0]
341a017c:	685a      	ldr	r2, [r3, #4]
341a017e:	687b      	ldr	r3, [r7, #4]
341a0180:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a0182:	687b      	ldr	r3, [r7, #4]
341a0184:	683a      	ldr	r2, [r7, #0]
341a0186:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a0188:	683b      	ldr	r3, [r7, #0]
341a018a:	685b      	ldr	r3, [r3, #4]
341a018c:	687a      	ldr	r2, [r7, #4]
341a018e:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a0190:	683b      	ldr	r3, [r7, #0]
341a0192:	687a      	ldr	r2, [r7, #4]
341a0194:	605a      	str	r2, [r3, #4]
}
341a0196:	bf00      	nop
341a0198:	370c      	adds	r7, #12
341a019a:	46bd      	mov	sp, r7
341a019c:	f85d 7b04 	ldr.w	r7, [sp], #4
341a01a0:	4770      	bx	lr
	...

341a01a4 <knl_mutex_initialize>:

/*
 * Initialization of mutex control block 
 */
EXPORT ER knl_mutex_initialize(void)
{
341a01a4:	b580      	push	{r7, lr}
341a01a6:	b082      	sub	sp, #8
341a01a8:	af00      	add	r7, sp, #0
	if ( NUM_MTXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mtxcb);
341a01aa:	480e      	ldr	r0, [pc, #56]	@ (341a01e4 <knl_mutex_initialize+0x40>)
341a01ac:	f7ff ffbe 	bl	341a012c <QueInit>
	end = knl_mtxcb_table + NUM_MTXID;
341a01b0:	4b0d      	ldr	r3, [pc, #52]	@ (341a01e8 <knl_mutex_initialize+0x44>)
341a01b2:	603b      	str	r3, [r7, #0]
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
341a01b4:	4b0d      	ldr	r3, [pc, #52]	@ (341a01ec <knl_mutex_initialize+0x48>)
341a01b6:	607b      	str	r3, [r7, #4]
341a01b8:	e00a      	b.n	341a01d0 <knl_mutex_initialize+0x2c>
		mtxcb->mtxid = 0;
341a01ba:	687b      	ldr	r3, [r7, #4]
341a01bc:	2200      	movs	r2, #0
341a01be:	609a      	str	r2, [r3, #8]
		QueInsert(&mtxcb->wait_queue, &knl_free_mtxcb);
341a01c0:	687b      	ldr	r3, [r7, #4]
341a01c2:	4908      	ldr	r1, [pc, #32]	@ (341a01e4 <knl_mutex_initialize+0x40>)
341a01c4:	4618      	mov	r0, r3
341a01c6:	f7ff ffd3 	bl	341a0170 <QueInsert>
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
341a01ca:	687b      	ldr	r3, [r7, #4]
341a01cc:	3320      	adds	r3, #32
341a01ce:	607b      	str	r3, [r7, #4]
341a01d0:	687a      	ldr	r2, [r7, #4]
341a01d2:	683b      	ldr	r3, [r7, #0]
341a01d4:	429a      	cmp	r2, r3
341a01d6:	d3f0      	bcc.n	341a01ba <knl_mutex_initialize+0x16>
	}

	return E_OK;
341a01d8:	2300      	movs	r3, #0
}
341a01da:	4618      	mov	r0, r3
341a01dc:	3708      	adds	r7, #8
341a01de:	46bd      	mov	sp, r7
341a01e0:	bd80      	pop	{r7, pc}
341a01e2:	bf00      	nop
341a01e4:	341c47c4 	.word	0x341c47c4
341a01e8:	341c47c4 	.word	0x341c47c4
341a01ec:	341c4744 	.word	0x341c4744

341a01f0 <knl_signal_all_mutex>:
 *	Free all mutexes which the task holds.
 *	Do not need to handle mutex list and priority of terminated task.
 *	
 */
EXPORT void knl_signal_all_mutex( TCB *tcb )
{
341a01f0:	b580      	push	{r7, lr}
341a01f2:	b086      	sub	sp, #24
341a01f4:	af00      	add	r7, sp, #0
341a01f6:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb, *next_mtxcb;
	TCB	*next_tcb;

	next_mtxcb = tcb->mtxlist;
341a01f8:	687b      	ldr	r3, [r7, #4]
341a01fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341a01fc:	617b      	str	r3, [r7, #20]
	while ( (mtxcb = next_mtxcb) != NULL ) {
341a01fe:	e030      	b.n	341a0262 <knl_signal_all_mutex+0x72>
		next_mtxcb = mtxcb->mtxlist;
341a0200:	693b      	ldr	r3, [r7, #16]
341a0202:	69db      	ldr	r3, [r3, #28]
341a0204:	617b      	str	r3, [r7, #20]

		if ( mtx_waited(mtxcb) ) {
341a0206:	693b      	ldr	r3, [r7, #16]
341a0208:	4618      	mov	r0, r3
341a020a:	f7ff ff9f 	bl	341a014c <isQueEmpty>
341a020e:	4603      	mov	r3, r0
341a0210:	2b00      	cmp	r3, #0
341a0212:	d123      	bne.n	341a025c <knl_signal_all_mutex+0x6c>
			next_tcb = (TCB*)mtxcb->wait_queue.next;
341a0214:	693b      	ldr	r3, [r7, #16]
341a0216:	681b      	ldr	r3, [r3, #0]
341a0218:	60fb      	str	r3, [r7, #12]

			/* Wake wait task */
			knl_wait_release_ok(next_tcb);
341a021a:	68f8      	ldr	r0, [r7, #12]
341a021c:	f001 fb49 	bl	341a18b2 <knl_wait_release_ok>

			/* Change mutex get task */
			mtxcb->mtxtsk = next_tcb;
341a0220:	693b      	ldr	r3, [r7, #16]
341a0222:	68fa      	ldr	r2, [r7, #12]
341a0224:	619a      	str	r2, [r3, #24]
			mtxcb->mtxlist = next_tcb->mtxlist;
341a0226:	68fb      	ldr	r3, [r7, #12]
341a0228:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
341a022a:	693b      	ldr	r3, [r7, #16]
341a022c:	61da      	str	r2, [r3, #28]
			next_tcb->mtxlist = mtxcb;
341a022e:	68fb      	ldr	r3, [r7, #12]
341a0230:	693a      	ldr	r2, [r7, #16]
341a0232:	665a      	str	r2, [r3, #100]	@ 0x64

			if ( (mtxcb->mtxatr & TA_CEILING) == TA_CEILING ) {
341a0234:	693b      	ldr	r3, [r7, #16]
341a0236:	691b      	ldr	r3, [r3, #16]
341a0238:	f003 0303 	and.w	r3, r3, #3
341a023c:	2b03      	cmp	r3, #3
341a023e:	d110      	bne.n	341a0262 <knl_signal_all_mutex+0x72>
				if ( next_tcb->priority > mtxcb->ceilpri ) {
341a0240:	68fb      	ldr	r3, [r7, #12]
341a0242:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
341a0246:	693b      	ldr	r3, [r7, #16]
341a0248:	7d1b      	ldrb	r3, [r3, #20]
341a024a:	429a      	cmp	r2, r3
341a024c:	d909      	bls.n	341a0262 <knl_signal_all_mutex+0x72>
					/* Raise the priority for the task
					   that got lock to the highest
					   priority limit */
					knl_change_task_priority(next_tcb,
							mtxcb->ceilpri);
341a024e:	693b      	ldr	r3, [r7, #16]
341a0250:	7d1b      	ldrb	r3, [r3, #20]
					knl_change_task_priority(next_tcb,
341a0252:	4619      	mov	r1, r3
341a0254:	68f8      	ldr	r0, [r7, #12]
341a0256:	f000 fbf1 	bl	341a0a3c <knl_change_task_priority>
341a025a:	e002      	b.n	341a0262 <knl_signal_all_mutex+0x72>
				}
			}
		} else {
			/* No wait task */
			mtxcb->mtxtsk = NULL;
341a025c:	693b      	ldr	r3, [r7, #16]
341a025e:	2200      	movs	r2, #0
341a0260:	619a      	str	r2, [r3, #24]
	while ( (mtxcb = next_mtxcb) != NULL ) {
341a0262:	697b      	ldr	r3, [r7, #20]
341a0264:	613b      	str	r3, [r7, #16]
341a0266:	693b      	ldr	r3, [r7, #16]
341a0268:	2b00      	cmp	r3, #0
341a026a:	d1c9      	bne.n	341a0200 <knl_signal_all_mutex+0x10>
		}
	}
}
341a026c:	bf00      	nop
341a026e:	bf00      	nop
341a0270:	3718      	adds	r7, #24
341a0272:	46bd      	mov	sp, r7
341a0274:	bd80      	pop	{r7, pc}

341a0276 <QueInit>:
{
341a0276:	b480      	push	{r7}
341a0278:	b083      	sub	sp, #12
341a027a:	af00      	add	r7, sp, #0
341a027c:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a027e:	687b      	ldr	r3, [r7, #4]
341a0280:	687a      	ldr	r2, [r7, #4]
341a0282:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a0284:	687b      	ldr	r3, [r7, #4]
341a0286:	687a      	ldr	r2, [r7, #4]
341a0288:	605a      	str	r2, [r3, #4]
}
341a028a:	bf00      	nop
341a028c:	370c      	adds	r7, #12
341a028e:	46bd      	mov	sp, r7
341a0290:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0294:	4770      	bx	lr

341a0296 <QueInsert>:
{
341a0296:	b480      	push	{r7}
341a0298:	b083      	sub	sp, #12
341a029a:	af00      	add	r7, sp, #0
341a029c:	6078      	str	r0, [r7, #4]
341a029e:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a02a0:	683b      	ldr	r3, [r7, #0]
341a02a2:	685a      	ldr	r2, [r3, #4]
341a02a4:	687b      	ldr	r3, [r7, #4]
341a02a6:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a02a8:	687b      	ldr	r3, [r7, #4]
341a02aa:	683a      	ldr	r2, [r7, #0]
341a02ac:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a02ae:	683b      	ldr	r3, [r7, #0]
341a02b0:	685b      	ldr	r3, [r3, #4]
341a02b2:	687a      	ldr	r2, [r7, #4]
341a02b4:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a02b6:	683b      	ldr	r3, [r7, #0]
341a02b8:	687a      	ldr	r2, [r7, #4]
341a02ba:	605a      	str	r2, [r3, #4]
}
341a02bc:	bf00      	nop
341a02be:	370c      	adds	r7, #12
341a02c0:	46bd      	mov	sp, r7
341a02c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341a02c6:	4770      	bx	lr

341a02c8 <knl_isTaskIndependent>:
{
341a02c8:	b480      	push	{r7}
341a02ca:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
341a02cc:	4b05      	ldr	r3, [pc, #20]	@ (341a02e4 <knl_isTaskIndependent+0x1c>)
341a02ce:	681b      	ldr	r3, [r3, #0]
341a02d0:	2b00      	cmp	r3, #0
341a02d2:	bfcc      	ite	gt
341a02d4:	2301      	movgt	r3, #1
341a02d6:	2300      	movle	r3, #0
341a02d8:	b2db      	uxtb	r3, r3
}
341a02da:	4618      	mov	r0, r3
341a02dc:	46bd      	mov	sp, r7
341a02de:	f85d 7b04 	ldr.w	r7, [sp], #4
341a02e2:	4770      	bx	lr
341a02e4:	341c2920 	.word	0x341c2920

341a02e8 <knl_semaphore_initialize>:

/* 
 * Initialization of semaphore control block 
 */
EXPORT ER knl_semaphore_initialize( void )
{
341a02e8:	b580      	push	{r7, lr}
341a02ea:	b082      	sub	sp, #8
341a02ec:	af00      	add	r7, sp, #0
	if ( NUM_SEMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_semcb);
341a02ee:	480e      	ldr	r0, [pc, #56]	@ (341a0328 <knl_semaphore_initialize+0x40>)
341a02f0:	f7ff ffc1 	bl	341a0276 <QueInit>
	end = knl_semcb_table + NUM_SEMID;
341a02f4:	4b0d      	ldr	r3, [pc, #52]	@ (341a032c <knl_semaphore_initialize+0x44>)
341a02f6:	603b      	str	r3, [r7, #0]
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
341a02f8:	4b0d      	ldr	r3, [pc, #52]	@ (341a0330 <knl_semaphore_initialize+0x48>)
341a02fa:	607b      	str	r3, [r7, #4]
341a02fc:	e00a      	b.n	341a0314 <knl_semaphore_initialize+0x2c>
		semcb->semid = 0;
341a02fe:	687b      	ldr	r3, [r7, #4]
341a0300:	2200      	movs	r2, #0
341a0302:	609a      	str	r2, [r3, #8]
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
341a0304:	687b      	ldr	r3, [r7, #4]
341a0306:	4908      	ldr	r1, [pc, #32]	@ (341a0328 <knl_semaphore_initialize+0x40>)
341a0308:	4618      	mov	r0, r3
341a030a:	f7ff ffc4 	bl	341a0296 <QueInsert>
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
341a030e:	687b      	ldr	r3, [r7, #4]
341a0310:	331c      	adds	r3, #28
341a0312:	607b      	str	r3, [r7, #4]
341a0314:	687a      	ldr	r2, [r7, #4]
341a0316:	683b      	ldr	r3, [r7, #0]
341a0318:	429a      	cmp	r2, r3
341a031a:	d3f0      	bcc.n	341a02fe <knl_semaphore_initialize+0x16>
	}

	return E_OK;
341a031c:	2300      	movs	r3, #0
}
341a031e:	4618      	mov	r0, r3
341a0320:	3708      	adds	r7, #8
341a0322:	46bd      	mov	sp, r7
341a0324:	bd80      	pop	{r7, pc}
341a0326:	bf00      	nop
341a0328:	341c498c 	.word	0x341c498c
341a032c:	341c498c 	.word	0x341c498c
341a0330:	341c47cc 	.word	0x341c47cc

341a0334 <tk_del_sem>:
#ifdef USE_FUNC_TK_DEL_SEM
/*
 * Delete semaphore
 */
SYSCALL ER tk_del_sem( ID semid )
{
341a0334:	b580      	push	{r7, lr}
341a0336:	b086      	sub	sp, #24
341a0338:	af00      	add	r7, sp, #0
341a033a:	6078      	str	r0, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
341a033c:	2300      	movs	r3, #0
341a033e:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
341a0340:	687b      	ldr	r3, [r7, #4]
341a0342:	2b00      	cmp	r3, #0
341a0344:	dd02      	ble.n	341a034c <tk_del_sem+0x18>
341a0346:	687b      	ldr	r3, [r7, #4]
341a0348:	2b10      	cmp	r3, #16
341a034a:	dd02      	ble.n	341a0352 <tk_del_sem+0x1e>
341a034c:	f06f 0311 	mvn.w	r3, #17
341a0350:	e032      	b.n	341a03b8 <tk_del_sem+0x84>

	semcb = get_semcb(semid);
341a0352:	687b      	ldr	r3, [r7, #4]
341a0354:	1e5a      	subs	r2, r3, #1
341a0356:	4613      	mov	r3, r2
341a0358:	00db      	lsls	r3, r3, #3
341a035a:	1a9b      	subs	r3, r3, r2
341a035c:	009b      	lsls	r3, r3, #2
341a035e:	4a18      	ldr	r2, [pc, #96]	@ (341a03c0 <tk_del_sem+0x8c>)
341a0360:	4413      	add	r3, r2
341a0362:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
341a0364:	f002 fb91 	bl	341a2a8a <disint>
341a0368:	60f8      	str	r0, [r7, #12]
	if ( semcb->semid == 0 ) {
341a036a:	693b      	ldr	r3, [r7, #16]
341a036c:	689b      	ldr	r3, [r3, #8]
341a036e:	2b00      	cmp	r3, #0
341a0370:	d103      	bne.n	341a037a <tk_del_sem+0x46>
		ercd = E_NOEXS;
341a0372:	f06f 0329 	mvn.w	r3, #41	@ 0x29
341a0376:	617b      	str	r3, [r7, #20]
341a0378:	e00b      	b.n	341a0392 <tk_del_sem+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&semcb->wait_queue);
341a037a:	693b      	ldr	r3, [r7, #16]
341a037c:	4618      	mov	r0, r3
341a037e:	f001 fb25 	bl	341a19cc <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
341a0382:	693b      	ldr	r3, [r7, #16]
341a0384:	490f      	ldr	r1, [pc, #60]	@ (341a03c4 <tk_del_sem+0x90>)
341a0386:	4618      	mov	r0, r3
341a0388:	f7ff ff85 	bl	341a0296 <QueInsert>
		semcb->semid = 0;
341a038c:	693b      	ldr	r3, [r7, #16]
341a038e:	2200      	movs	r2, #0
341a0390:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
341a0392:	68fb      	ldr	r3, [r7, #12]
341a0394:	2b00      	cmp	r3, #0
341a0396:	d10b      	bne.n	341a03b0 <tk_del_sem+0x7c>
341a0398:	4b0b      	ldr	r3, [pc, #44]	@ (341a03c8 <tk_del_sem+0x94>)
341a039a:	681a      	ldr	r2, [r3, #0]
341a039c:	4b0b      	ldr	r3, [pc, #44]	@ (341a03cc <tk_del_sem+0x98>)
341a039e:	681b      	ldr	r3, [r3, #0]
341a03a0:	429a      	cmp	r2, r3
341a03a2:	d005      	beq.n	341a03b0 <tk_del_sem+0x7c>
341a03a4:	4b0a      	ldr	r3, [pc, #40]	@ (341a03d0 <tk_del_sem+0x9c>)
341a03a6:	681b      	ldr	r3, [r3, #0]
341a03a8:	2b00      	cmp	r3, #0
341a03aa:	d101      	bne.n	341a03b0 <tk_del_sem+0x7c>
341a03ac:	f002 f914 	bl	341a25d8 <knl_dispatch>
341a03b0:	68f8      	ldr	r0, [r7, #12]
341a03b2:	f002 fb4e 	bl	341a2a52 <set_basepri>

	return ercd;
341a03b6:	697b      	ldr	r3, [r7, #20]
}
341a03b8:	4618      	mov	r0, r3
341a03ba:	3718      	adds	r7, #24
341a03bc:	46bd      	mov	sp, r7
341a03be:	bd80      	pop	{r7, pc}
341a03c0:	341c47cc 	.word	0x341c47cc
341a03c4:	341c498c 	.word	0x341c498c
341a03c8:	341c4998 	.word	0x341c4998
341a03cc:	341c499c 	.word	0x341c499c
341a03d0:	341c4994 	.word	0x341c4994

341a03d4 <sem_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void sem_chg_pri( TCB *tcb, INT oldpri )
{
341a03d4:	b580      	push	{r7, lr}
341a03d6:	b086      	sub	sp, #24
341a03d8:	af00      	add	r7, sp, #0
341a03da:	6078      	str	r0, [r7, #4]
341a03dc:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	QUEUE	*queue;
	TCB	*top;

	semcb = get_semcb(tcb->wid);
341a03de:	687b      	ldr	r3, [r7, #4]
341a03e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341a03e2:	1e5a      	subs	r2, r3, #1
341a03e4:	4613      	mov	r3, r2
341a03e6:	00db      	lsls	r3, r3, #3
341a03e8:	1a9b      	subs	r3, r3, r2
341a03ea:	009b      	lsls	r3, r3, #2
341a03ec:	4a19      	ldr	r2, [pc, #100]	@ (341a0454 <sem_chg_pri+0x80>)
341a03ee:	4413      	add	r3, r2
341a03f0:	613b      	str	r3, [r7, #16]
	if ( oldpri >= 0 ) {
341a03f2:	683b      	ldr	r3, [r7, #0]
341a03f4:	2b00      	cmp	r3, #0
341a03f6:	db03      	blt.n	341a0400 <sem_chg_pri+0x2c>
		/* Reorder wait line */
		knl_gcb_change_priority((GCB*)semcb, tcb);
341a03f8:	6879      	ldr	r1, [r7, #4]
341a03fa:	6938      	ldr	r0, [r7, #16]
341a03fc:	f001 fb38 	bl	341a1a70 <knl_gcb_change_priority>
	}

	if ( (semcb->sematr & TA_CNT) != 0 ) {
341a0400:	693b      	ldr	r3, [r7, #16]
341a0402:	691b      	ldr	r3, [r3, #16]
341a0404:	f003 0302 	and.w	r3, r3, #2
341a0408:	2b00      	cmp	r3, #0
341a040a:	d11d      	bne.n	341a0448 <sem_chg_pri+0x74>
		return;
	}

	/* From the head task in a wait queue, allocate semaphore counts
	   and release wait state as much as possible */
	queue = semcb->wait_queue.next;
341a040c:	693b      	ldr	r3, [r7, #16]
341a040e:	681b      	ldr	r3, [r3, #0]
341a0410:	617b      	str	r3, [r7, #20]
	while ( queue != &semcb->wait_queue ) {
341a0412:	e014      	b.n	341a043e <sem_chg_pri+0x6a>
		top = (TCB*)queue;
341a0414:	697b      	ldr	r3, [r7, #20]
341a0416:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
341a0418:	697b      	ldr	r3, [r7, #20]
341a041a:	681b      	ldr	r3, [r3, #0]
341a041c:	617b      	str	r3, [r7, #20]

		/* Meet condition for releasing wait? */
		if ( semcb->semcnt < top->winfo.sem.cnt ) {
341a041e:	693b      	ldr	r3, [r7, #16]
341a0420:	695a      	ldr	r2, [r3, #20]
341a0422:	68fb      	ldr	r3, [r7, #12]
341a0424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341a0426:	429a      	cmp	r2, r3
341a0428:	db10      	blt.n	341a044c <sem_chg_pri+0x78>
			break;
		}

		/* Release wait */
		knl_wait_release_ok(top);
341a042a:	68f8      	ldr	r0, [r7, #12]
341a042c:	f001 fa41 	bl	341a18b2 <knl_wait_release_ok>

		semcb->semcnt -= top->winfo.sem.cnt;
341a0430:	693b      	ldr	r3, [r7, #16]
341a0432:	695a      	ldr	r2, [r3, #20]
341a0434:	68fb      	ldr	r3, [r7, #12]
341a0436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341a0438:	1ad2      	subs	r2, r2, r3
341a043a:	693b      	ldr	r3, [r7, #16]
341a043c:	615a      	str	r2, [r3, #20]
	while ( queue != &semcb->wait_queue ) {
341a043e:	693b      	ldr	r3, [r7, #16]
341a0440:	697a      	ldr	r2, [r7, #20]
341a0442:	429a      	cmp	r2, r3
341a0444:	d1e6      	bne.n	341a0414 <sem_chg_pri+0x40>
341a0446:	e002      	b.n	341a044e <sem_chg_pri+0x7a>
		return;
341a0448:	bf00      	nop
341a044a:	e000      	b.n	341a044e <sem_chg_pri+0x7a>
			break;
341a044c:	bf00      	nop
	}
}
341a044e:	3718      	adds	r7, #24
341a0450:	46bd      	mov	sp, r7
341a0452:	bd80      	pop	{r7, pc}
341a0454:	341c47cc 	.word	0x341c47cc

341a0458 <sem_rel_wai>:

/*
 * Processing if the wait task is freed
 */
LOCAL void sem_rel_wai( TCB *tcb )
{
341a0458:	b580      	push	{r7, lr}
341a045a:	b082      	sub	sp, #8
341a045c:	af00      	add	r7, sp, #0
341a045e:	6078      	str	r0, [r7, #4]
	sem_chg_pri(tcb, -1);
341a0460:	f04f 31ff 	mov.w	r1, #4294967295
341a0464:	6878      	ldr	r0, [r7, #4]
341a0466:	f7ff ffb5 	bl	341a03d4 <sem_chg_pri>
}
341a046a:	bf00      	nop
341a046c:	3708      	adds	r7, #8
341a046e:	46bd      	mov	sp, r7
341a0470:	bd80      	pop	{r7, pc}
	...

341a0474 <tk_wai_sem>:

/*
 * Wait on semaphore
 */
SYSCALL ER tk_wai_sem( ID semid, INT cnt, TMO tmout )
{
341a0474:	b580      	push	{r7, lr}
341a0476:	b088      	sub	sp, #32
341a0478:	af00      	add	r7, sp, #0
341a047a:	60f8      	str	r0, [r7, #12]
341a047c:	60b9      	str	r1, [r7, #8]
341a047e:	607a      	str	r2, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
341a0480:	2300      	movs	r3, #0
341a0482:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
341a0484:	68fb      	ldr	r3, [r7, #12]
341a0486:	2b00      	cmp	r3, #0
341a0488:	dd02      	ble.n	341a0490 <tk_wai_sem+0x1c>
341a048a:	68fb      	ldr	r3, [r7, #12]
341a048c:	2b10      	cmp	r3, #16
341a048e:	dd02      	ble.n	341a0496 <tk_wai_sem+0x22>
341a0490:	f06f 0311 	mvn.w	r3, #17
341a0494:	e087      	b.n	341a05a6 <tk_wai_sem+0x132>
	CHECK_PAR(cnt > 0);
341a0496:	68bb      	ldr	r3, [r7, #8]
341a0498:	2b00      	cmp	r3, #0
341a049a:	dc02      	bgt.n	341a04a2 <tk_wai_sem+0x2e>
341a049c:	f06f 0310 	mvn.w	r3, #16
341a04a0:	e081      	b.n	341a05a6 <tk_wai_sem+0x132>
	CHECK_TMOUT(tmout);
341a04a2:	687b      	ldr	r3, [r7, #4]
341a04a4:	f1b3 3fff 	cmp.w	r3, #4294967295
341a04a8:	da02      	bge.n	341a04b0 <tk_wai_sem+0x3c>
341a04aa:	f06f 0310 	mvn.w	r3, #16
341a04ae:	e07a      	b.n	341a05a6 <tk_wai_sem+0x132>
	CHECK_DISPATCH();
341a04b0:	4b3f      	ldr	r3, [pc, #252]	@ (341a05b0 <tk_wai_sem+0x13c>)
341a04b2:	681b      	ldr	r3, [r3, #0]
341a04b4:	2b00      	cmp	r3, #0
341a04b6:	d10d      	bne.n	341a04d4 <tk_wai_sem+0x60>
341a04b8:	f7ff ff06 	bl	341a02c8 <knl_isTaskIndependent>
341a04bc:	4603      	mov	r3, r0
341a04be:	2b00      	cmp	r3, #0
341a04c0:	d108      	bne.n	341a04d4 <tk_wai_sem+0x60>
341a04c2:	4b3c      	ldr	r3, [pc, #240]	@ (341a05b4 <tk_wai_sem+0x140>)
341a04c4:	681b      	ldr	r3, [r3, #0]
341a04c6:	2b00      	cmp	r3, #0
341a04c8:	d004      	beq.n	341a04d4 <tk_wai_sem+0x60>
341a04ca:	f002 fad1 	bl	341a2a70 <get_basepri>
341a04ce:	4603      	mov	r3, r0
341a04d0:	2b00      	cmp	r3, #0
341a04d2:	d002      	beq.n	341a04da <tk_wai_sem+0x66>
341a04d4:	f06f 0318 	mvn.w	r3, #24
341a04d8:	e065      	b.n	341a05a6 <tk_wai_sem+0x132>

	semcb = get_semcb(semid);
341a04da:	68fb      	ldr	r3, [r7, #12]
341a04dc:	1e5a      	subs	r2, r3, #1
341a04de:	4613      	mov	r3, r2
341a04e0:	00db      	lsls	r3, r3, #3
341a04e2:	1a9b      	subs	r3, r3, r2
341a04e4:	009b      	lsls	r3, r3, #2
341a04e6:	4a34      	ldr	r2, [pc, #208]	@ (341a05b8 <tk_wai_sem+0x144>)
341a04e8:	4413      	add	r3, r2
341a04ea:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
341a04ec:	f002 facd 	bl	341a2a8a <disint>
341a04f0:	61b8      	str	r0, [r7, #24]
	if ( semcb->semid == 0 ) {
341a04f2:	69fb      	ldr	r3, [r7, #28]
341a04f4:	689b      	ldr	r3, [r3, #8]
341a04f6:	2b00      	cmp	r3, #0
341a04f8:	d103      	bne.n	341a0502 <tk_wai_sem+0x8e>
		ercd = E_NOEXS;
341a04fa:	f06f 0329 	mvn.w	r3, #41	@ 0x29
341a04fe:	617b      	str	r3, [r7, #20]
		goto error_exit;
341a0500:	e03e      	b.n	341a0580 <tk_wai_sem+0x10c>
	}
#if CHK_PAR
	if ( cnt > semcb->maxsem ) {
341a0502:	69fb      	ldr	r3, [r7, #28]
341a0504:	699b      	ldr	r3, [r3, #24]
341a0506:	68ba      	ldr	r2, [r7, #8]
341a0508:	429a      	cmp	r2, r3
341a050a:	dd03      	ble.n	341a0514 <tk_wai_sem+0xa0>
		ercd = E_PAR;
341a050c:	f06f 0310 	mvn.w	r3, #16
341a0510:	617b      	str	r3, [r7, #20]
		goto error_exit;
341a0512:	e035      	b.n	341a0580 <tk_wai_sem+0x10c>
	}
#endif

	if ( ((semcb->sematr & TA_CNT) != 0
341a0514:	69fb      	ldr	r3, [r7, #28]
341a0516:	691b      	ldr	r3, [r3, #16]
341a0518:	f003 0302 	and.w	r3, r3, #2
341a051c:	2b00      	cmp	r3, #0
341a051e:	d10a      	bne.n	341a0536 <tk_wai_sem+0xc2>
	      || knl_gcb_top_of_wait_queue((GCB*)semcb, knl_ctxtsk) == knl_ctxtsk)
341a0520:	4b24      	ldr	r3, [pc, #144]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0522:	681b      	ldr	r3, [r3, #0]
341a0524:	4619      	mov	r1, r3
341a0526:	69f8      	ldr	r0, [r7, #28]
341a0528:	f001 fab4 	bl	341a1a94 <knl_gcb_top_of_wait_queue>
341a052c:	4602      	mov	r2, r0
341a052e:	4b21      	ldr	r3, [pc, #132]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0530:	681b      	ldr	r3, [r3, #0]
341a0532:	429a      	cmp	r2, r3
341a0534:	d10b      	bne.n	341a054e <tk_wai_sem+0xda>
	  && semcb->semcnt >= cnt ) {
341a0536:	69fb      	ldr	r3, [r7, #28]
341a0538:	695b      	ldr	r3, [r3, #20]
341a053a:	68ba      	ldr	r2, [r7, #8]
341a053c:	429a      	cmp	r2, r3
341a053e:	dc06      	bgt.n	341a054e <tk_wai_sem+0xda>
		/* Get semaphore count */
		semcb->semcnt -= cnt;
341a0540:	69fb      	ldr	r3, [r7, #28]
341a0542:	695a      	ldr	r2, [r3, #20]
341a0544:	68bb      	ldr	r3, [r7, #8]
341a0546:	1ad2      	subs	r2, r2, r3
341a0548:	69fb      	ldr	r3, [r7, #28]
341a054a:	615a      	str	r2, [r3, #20]
341a054c:	e018      	b.n	341a0580 <tk_wai_sem+0x10c>

	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
341a054e:	69fb      	ldr	r3, [r7, #28]
341a0550:	691b      	ldr	r3, [r3, #16]
341a0552:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_sem_tpri: &knl_wspec_sem_tfifo;
341a0556:	2b00      	cmp	r3, #0
341a0558:	d001      	beq.n	341a055e <tk_wai_sem+0xea>
341a055a:	4a18      	ldr	r2, [pc, #96]	@ (341a05bc <tk_wai_sem+0x148>)
341a055c:	e000      	b.n	341a0560 <tk_wai_sem+0xec>
341a055e:	4a18      	ldr	r2, [pc, #96]	@ (341a05c0 <tk_wai_sem+0x14c>)
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
341a0560:	4b14      	ldr	r3, [pc, #80]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0562:	681b      	ldr	r3, [r3, #0]
341a0564:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
341a0566:	4b13      	ldr	r3, [pc, #76]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0568:	681b      	ldr	r3, [r3, #0]
341a056a:	f107 0214 	add.w	r2, r7, #20
341a056e:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.sem.cnt = cnt;
341a0570:	4b10      	ldr	r3, [pc, #64]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0572:	681b      	ldr	r3, [r3, #0]
341a0574:	68ba      	ldr	r2, [r7, #8]
341a0576:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_gcb_make_wait((GCB*)semcb, tmout);
341a0578:	6879      	ldr	r1, [r7, #4]
341a057a:	69f8      	ldr	r0, [r7, #28]
341a057c:	f001 fa42 	bl	341a1a04 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
341a0580:	69bb      	ldr	r3, [r7, #24]
341a0582:	2b00      	cmp	r3, #0
341a0584:	d10b      	bne.n	341a059e <tk_wai_sem+0x12a>
341a0586:	4b0b      	ldr	r3, [pc, #44]	@ (341a05b4 <tk_wai_sem+0x140>)
341a0588:	681a      	ldr	r2, [r3, #0]
341a058a:	4b0e      	ldr	r3, [pc, #56]	@ (341a05c4 <tk_wai_sem+0x150>)
341a058c:	681b      	ldr	r3, [r3, #0]
341a058e:	429a      	cmp	r2, r3
341a0590:	d005      	beq.n	341a059e <tk_wai_sem+0x12a>
341a0592:	4b07      	ldr	r3, [pc, #28]	@ (341a05b0 <tk_wai_sem+0x13c>)
341a0594:	681b      	ldr	r3, [r3, #0]
341a0596:	2b00      	cmp	r3, #0
341a0598:	d101      	bne.n	341a059e <tk_wai_sem+0x12a>
341a059a:	f002 f81d 	bl	341a25d8 <knl_dispatch>
341a059e:	69b8      	ldr	r0, [r7, #24]
341a05a0:	f002 fa57 	bl	341a2a52 <set_basepri>

	return ercd;
341a05a4:	697b      	ldr	r3, [r7, #20]
}
341a05a6:	4618      	mov	r0, r3
341a05a8:	3720      	adds	r7, #32
341a05aa:	46bd      	mov	sp, r7
341a05ac:	bd80      	pop	{r7, pc}
341a05ae:	bf00      	nop
341a05b0:	341c4994 	.word	0x341c4994
341a05b4:	341c4998 	.word	0x341c4998
341a05b8:	341c47cc 	.word	0x341c47cc
341a05bc:	341a65d8 	.word	0x341a65d8
341a05c0:	341a65cc 	.word	0x341a65cc
341a05c4:	341c499c 	.word	0x341c499c

341a05c8 <QueInit>:
{
341a05c8:	b480      	push	{r7}
341a05ca:	b083      	sub	sp, #12
341a05cc:	af00      	add	r7, sp, #0
341a05ce:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a05d0:	687b      	ldr	r3, [r7, #4]
341a05d2:	687a      	ldr	r2, [r7, #4]
341a05d4:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a05d6:	687b      	ldr	r3, [r7, #4]
341a05d8:	687a      	ldr	r2, [r7, #4]
341a05da:	605a      	str	r2, [r3, #4]
}
341a05dc:	bf00      	nop
341a05de:	370c      	adds	r7, #12
341a05e0:	46bd      	mov	sp, r7
341a05e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341a05e6:	4770      	bx	lr

341a05e8 <isQueEmpty>:
{
341a05e8:	b480      	push	{r7}
341a05ea:	b083      	sub	sp, #12
341a05ec:	af00      	add	r7, sp, #0
341a05ee:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
341a05f0:	687b      	ldr	r3, [r7, #4]
341a05f2:	681b      	ldr	r3, [r3, #0]
341a05f4:	687a      	ldr	r2, [r7, #4]
341a05f6:	429a      	cmp	r2, r3
341a05f8:	bf0c      	ite	eq
341a05fa:	2301      	moveq	r3, #1
341a05fc:	2300      	movne	r3, #0
341a05fe:	b2db      	uxtb	r3, r3
}
341a0600:	4618      	mov	r0, r3
341a0602:	370c      	adds	r7, #12
341a0604:	46bd      	mov	sp, r7
341a0606:	f85d 7b04 	ldr.w	r7, [sp], #4
341a060a:	4770      	bx	lr

341a060c <QueInsert>:
{
341a060c:	b480      	push	{r7}
341a060e:	b083      	sub	sp, #12
341a0610:	af00      	add	r7, sp, #0
341a0612:	6078      	str	r0, [r7, #4]
341a0614:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a0616:	683b      	ldr	r3, [r7, #0]
341a0618:	685a      	ldr	r2, [r3, #4]
341a061a:	687b      	ldr	r3, [r7, #4]
341a061c:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a061e:	687b      	ldr	r3, [r7, #4]
341a0620:	683a      	ldr	r2, [r7, #0]
341a0622:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a0624:	683b      	ldr	r3, [r7, #0]
341a0626:	685b      	ldr	r3, [r3, #4]
341a0628:	687a      	ldr	r2, [r7, #4]
341a062a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a062c:	683b      	ldr	r3, [r7, #0]
341a062e:	687a      	ldr	r2, [r7, #4]
341a0630:	605a      	str	r2, [r3, #4]
}
341a0632:	bf00      	nop
341a0634:	370c      	adds	r7, #12
341a0636:	46bd      	mov	sp, r7
341a0638:	f85d 7b04 	ldr.w	r7, [sp], #4
341a063c:	4770      	bx	lr

341a063e <QueRemove>:
{
341a063e:	b480      	push	{r7}
341a0640:	b083      	sub	sp, #12
341a0642:	af00      	add	r7, sp, #0
341a0644:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
341a0646:	687b      	ldr	r3, [r7, #4]
341a0648:	681b      	ldr	r3, [r3, #0]
341a064a:	687a      	ldr	r2, [r7, #4]
341a064c:	429a      	cmp	r2, r3
341a064e:	d009      	beq.n	341a0664 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
341a0650:	687b      	ldr	r3, [r7, #4]
341a0652:	685b      	ldr	r3, [r3, #4]
341a0654:	687a      	ldr	r2, [r7, #4]
341a0656:	6812      	ldr	r2, [r2, #0]
341a0658:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
341a065a:	687b      	ldr	r3, [r7, #4]
341a065c:	681b      	ldr	r3, [r3, #0]
341a065e:	687a      	ldr	r2, [r7, #4]
341a0660:	6852      	ldr	r2, [r2, #4]
341a0662:	605a      	str	r2, [r3, #4]
}
341a0664:	bf00      	nop
341a0666:	370c      	adds	r7, #12
341a0668:	46bd      	mov	sp, r7
341a066a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a066e:	4770      	bx	lr

341a0670 <knl_ready_queue_calc_top_priority>:

IMPORT RDYQUE	knl_ready_queue;

#if NUM_TSKPRI <= INT_BITWIDTH
Inline INT knl_ready_queue_calc_top_priority( UINT bitmap, INT pos )
{
341a0670:	b480      	push	{r7}
341a0672:	b083      	sub	sp, #12
341a0674:	af00      	add	r7, sp, #0
341a0676:	6078      	str	r0, [r7, #4]
341a0678:	6039      	str	r1, [r7, #0]
	for ( ; pos < NUM_TSKPRI; pos++ ) {
341a067a:	e00b      	b.n	341a0694 <knl_ready_queue_calc_top_priority+0x24>
		if ( bitmap & (1U << pos) ) {
341a067c:	2201      	movs	r2, #1
341a067e:	683b      	ldr	r3, [r7, #0]
341a0680:	409a      	lsls	r2, r3
341a0682:	687b      	ldr	r3, [r7, #4]
341a0684:	4013      	ands	r3, r2
341a0686:	2b00      	cmp	r3, #0
341a0688:	d001      	beq.n	341a068e <knl_ready_queue_calc_top_priority+0x1e>
			return pos;
341a068a:	683b      	ldr	r3, [r7, #0]
341a068c:	e006      	b.n	341a069c <knl_ready_queue_calc_top_priority+0x2c>
	for ( ; pos < NUM_TSKPRI; pos++ ) {
341a068e:	683b      	ldr	r3, [r7, #0]
341a0690:	3301      	adds	r3, #1
341a0692:	603b      	str	r3, [r7, #0]
341a0694:	683b      	ldr	r3, [r7, #0]
341a0696:	2b1f      	cmp	r3, #31
341a0698:	ddf0      	ble.n	341a067c <knl_ready_queue_calc_top_priority+0xc>
		}
	}
	return NUM_TSKPRI;
341a069a:	2320      	movs	r3, #32
}
341a069c:	4618      	mov	r0, r3
341a069e:	370c      	adds	r7, #12
341a06a0:	46bd      	mov	sp, r7
341a06a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341a06a6:	4770      	bx	lr

341a06a8 <knl_ready_queue_initialize>:

/*
 * Ready queue initialization
 */
Inline void knl_ready_queue_initialize( RDYQUE *rq )
{
341a06a8:	b580      	push	{r7, lr}
341a06aa:	b084      	sub	sp, #16
341a06ac:	af00      	add	r7, sp, #0
341a06ae:	6078      	str	r0, [r7, #4]
	INT	i;

	rq->top_priority = NUM_TSKPRI;
341a06b0:	687b      	ldr	r3, [r7, #4]
341a06b2:	2220      	movs	r2, #32
341a06b4:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
341a06b6:	2300      	movs	r3, #0
341a06b8:	60fb      	str	r3, [r7, #12]
341a06ba:	e00a      	b.n	341a06d2 <knl_ready_queue_initialize+0x2a>
		QueInit(&rq->tskque[i]);
341a06bc:	68fb      	ldr	r3, [r7, #12]
341a06be:	00db      	lsls	r3, r3, #3
341a06c0:	687a      	ldr	r2, [r7, #4]
341a06c2:	4413      	add	r3, r2
341a06c4:	3304      	adds	r3, #4
341a06c6:	4618      	mov	r0, r3
341a06c8:	f7ff ff7e 	bl	341a05c8 <QueInit>
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
341a06cc:	68fb      	ldr	r3, [r7, #12]
341a06ce:	3301      	adds	r3, #1
341a06d0:	60fb      	str	r3, [r7, #12]
341a06d2:	68fb      	ldr	r3, [r7, #12]
341a06d4:	2b1f      	cmp	r3, #31
341a06d6:	ddf1      	ble.n	341a06bc <knl_ready_queue_initialize+0x14>
	}
	rq->null = NULL;
341a06d8:	687b      	ldr	r3, [r7, #4]
341a06da:	2200      	movs	r2, #0
341a06dc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	rq->klocktsk = NULL;
341a06e0:	687b      	ldr	r3, [r7, #4]
341a06e2:	2200      	movs	r2, #0
341a06e4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	knl_memset(rq->bitmap, 0, sizeof(rq->bitmap));
341a06e8:	687b      	ldr	r3, [r7, #4]
341a06ea:	f503 7384 	add.w	r3, r3, #264	@ 0x108
341a06ee:	2204      	movs	r2, #4
341a06f0:	2100      	movs	r1, #0
341a06f2:	4618      	mov	r0, r3
341a06f4:	f001 f9f6 	bl	341a1ae4 <knl_memset>
}
341a06f8:	bf00      	nop
341a06fa:	3710      	adds	r7, #16
341a06fc:	46bd      	mov	sp, r7
341a06fe:	bd80      	pop	{r7, pc}

341a0700 <knl_ready_queue_top>:

/*
 * Return the highest priority task in ready queue
 */
Inline TCB* knl_ready_queue_top( RDYQUE *rq )
{
341a0700:	b480      	push	{r7}
341a0702:	b083      	sub	sp, #12
341a0704:	af00      	add	r7, sp, #0
341a0706:	6078      	str	r0, [r7, #4]
	/* If there is a task at kernel lock, that is the highest priority task */
	if ( rq->klocktsk != NULL ) {
341a0708:	687b      	ldr	r3, [r7, #4]
341a070a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341a070e:	2b00      	cmp	r3, #0
341a0710:	d003      	beq.n	341a071a <knl_ready_queue_top+0x1a>
		return rq->klocktsk;
341a0712:	687b      	ldr	r3, [r7, #4]
341a0714:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341a0718:	e005      	b.n	341a0726 <knl_ready_queue_top+0x26>
	}

	return (TCB*)rq->tskque[rq->top_priority].next;
341a071a:	687b      	ldr	r3, [r7, #4]
341a071c:	681b      	ldr	r3, [r3, #0]
341a071e:	687a      	ldr	r2, [r7, #4]
341a0720:	00db      	lsls	r3, r3, #3
341a0722:	4413      	add	r3, r2
341a0724:	685b      	ldr	r3, [r3, #4]
}
341a0726:	4618      	mov	r0, r3
341a0728:	370c      	adds	r7, #12
341a072a:	46bd      	mov	sp, r7
341a072c:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0730:	4770      	bx	lr

341a0732 <knl_ready_queue_insert>:
 *	indicated with 'tcb'. Set the applicable bit in the bitmap area and 
 *	update 'top_priority' if necessary. When updating 'top_priority,' 
 *	return TRUE, otherwise FALSE.
 */
Inline BOOL knl_ready_queue_insert( RDYQUE *rq, TCB *tcb )
{
341a0732:	b580      	push	{r7, lr}
341a0734:	b084      	sub	sp, #16
341a0736:	af00      	add	r7, sp, #0
341a0738:	6078      	str	r0, [r7, #4]
341a073a:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
341a073c:	683b      	ldr	r3, [r7, #0]
341a073e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
341a0742:	60fb      	str	r3, [r7, #12]

	QueInsert(&tcb->tskque, &rq->tskque[priority]);
341a0744:	6838      	ldr	r0, [r7, #0]
341a0746:	68fb      	ldr	r3, [r7, #12]
341a0748:	00db      	lsls	r3, r3, #3
341a074a:	687a      	ldr	r2, [r7, #4]
341a074c:	4413      	add	r3, r2
341a074e:	3304      	adds	r3, #4
341a0750:	4619      	mov	r1, r3
341a0752:	f7ff ff5b 	bl	341a060c <QueInsert>
#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] |= (1U << priority);
341a0756:	687b      	ldr	r3, [r7, #4]
341a0758:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341a075c:	2101      	movs	r1, #1
341a075e:	68fb      	ldr	r3, [r7, #12]
341a0760:	fa01 f303 	lsl.w	r3, r1, r3
341a0764:	431a      	orrs	r2, r3
341a0766:	687b      	ldr	r3, [r7, #4]
341a0768:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitset(rq->bitmap, priority);
#endif

	if ( tcb->klocked ) {
341a076c:	683b      	ldr	r3, [r7, #0]
341a076e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
341a0772:	f003 0302 	and.w	r3, r3, #2
341a0776:	b2db      	uxtb	r3, r3
341a0778:	2b00      	cmp	r3, #0
341a077a:	d003      	beq.n	341a0784 <knl_ready_queue_insert+0x52>
		rq->klocktsk = tcb;
341a077c:	687b      	ldr	r3, [r7, #4]
341a077e:	683a      	ldr	r2, [r7, #0]
341a0780:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	if ( priority < rq->top_priority ) {
341a0784:	687b      	ldr	r3, [r7, #4]
341a0786:	681b      	ldr	r3, [r3, #0]
341a0788:	68fa      	ldr	r2, [r7, #12]
341a078a:	429a      	cmp	r2, r3
341a078c:	da04      	bge.n	341a0798 <knl_ready_queue_insert+0x66>
		rq->top_priority = priority;
341a078e:	687b      	ldr	r3, [r7, #4]
341a0790:	68fa      	ldr	r2, [r7, #12]
341a0792:	601a      	str	r2, [r3, #0]
		return TRUE;
341a0794:	2301      	movs	r3, #1
341a0796:	e000      	b.n	341a079a <knl_ready_queue_insert+0x68>
	}
	return FALSE;
341a0798:	2300      	movs	r3, #0
}
341a079a:	4618      	mov	r0, r3
341a079c:	3710      	adds	r7, #16
341a079e:	46bd      	mov	sp, r7
341a07a0:	bd80      	pop	{r7, pc}

341a07a2 <knl_ready_queue_delete>:
 *	In addition, update 'top_priority' if the deleted task had the highest 
 *	priority. In such case, use the bitmap area to search the second
 *	highest priority task.
 */
Inline void knl_ready_queue_delete( RDYQUE *rq, TCB *tcb )
{
341a07a2:	b580      	push	{r7, lr}
341a07a4:	b084      	sub	sp, #16
341a07a6:	af00      	add	r7, sp, #0
341a07a8:	6078      	str	r0, [r7, #4]
341a07aa:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
341a07ac:	683b      	ldr	r3, [r7, #0]
341a07ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
341a07b2:	60fb      	str	r3, [r7, #12]
#if NUM_TSKPRI > INT_BITWIDTH
	INT	i;
#endif

	if ( rq->klocktsk == tcb ) {
341a07b4:	687b      	ldr	r3, [r7, #4]
341a07b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341a07ba:	683a      	ldr	r2, [r7, #0]
341a07bc:	429a      	cmp	r2, r3
341a07be:	d103      	bne.n	341a07c8 <knl_ready_queue_delete+0x26>
		rq->klocktsk = NULL;
341a07c0:	687b      	ldr	r3, [r7, #4]
341a07c2:	2200      	movs	r2, #0
341a07c4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	QueRemove(&tcb->tskque);
341a07c8:	683b      	ldr	r3, [r7, #0]
341a07ca:	4618      	mov	r0, r3
341a07cc:	f7ff ff37 	bl	341a063e <QueRemove>
	if ( tcb->klockwait ) {
341a07d0:	683b      	ldr	r3, [r7, #0]
341a07d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
341a07d6:	f003 0301 	and.w	r3, r3, #1
341a07da:	b2db      	uxtb	r3, r3
341a07dc:	2b00      	cmp	r3, #0
341a07de:	d007      	beq.n	341a07f0 <knl_ready_queue_delete+0x4e>
		/* Delete from kernel lock wait queue */
		tcb->klockwait = FALSE;
341a07e0:	683a      	ldr	r2, [r7, #0]
341a07e2:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
341a07e6:	f023 0301 	bic.w	r3, r3, #1
341a07ea:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		return;
341a07ee:	e029      	b.n	341a0844 <knl_ready_queue_delete+0xa2>
	}
	if ( !isQueEmpty(&rq->tskque[priority]) ) {
341a07f0:	68fb      	ldr	r3, [r7, #12]
341a07f2:	00db      	lsls	r3, r3, #3
341a07f4:	687a      	ldr	r2, [r7, #4]
341a07f6:	4413      	add	r3, r2
341a07f8:	3304      	adds	r3, #4
341a07fa:	4618      	mov	r0, r3
341a07fc:	f7ff fef4 	bl	341a05e8 <isQueEmpty>
341a0800:	4603      	mov	r3, r0
341a0802:	2b00      	cmp	r3, #0
341a0804:	d01b      	beq.n	341a083e <knl_ready_queue_delete+0x9c>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] &= ~(1U << priority);
341a0806:	687b      	ldr	r3, [r7, #4]
341a0808:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341a080c:	2101      	movs	r1, #1
341a080e:	68fb      	ldr	r3, [r7, #12]
341a0810:	fa01 f303 	lsl.w	r3, r1, r3
341a0814:	43db      	mvns	r3, r3
341a0816:	401a      	ands	r2, r3
341a0818:	687b      	ldr	r3, [r7, #4]
341a081a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitclr(rq->bitmap, priority);
#endif
	if ( priority != rq->top_priority ) {
341a081e:	687b      	ldr	r3, [r7, #4]
341a0820:	681b      	ldr	r3, [r3, #0]
341a0822:	68fa      	ldr	r2, [r7, #12]
341a0824:	429a      	cmp	r2, r3
341a0826:	d10c      	bne.n	341a0842 <knl_ready_queue_delete+0xa0>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->top_priority = knl_ready_queue_calc_top_priority(rq->bitmap[0], priority);
341a0828:	687b      	ldr	r3, [r7, #4]
341a082a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341a082e:	68f9      	ldr	r1, [r7, #12]
341a0830:	4618      	mov	r0, r3
341a0832:	f7ff ff1d 	bl	341a0670 <knl_ready_queue_calc_top_priority>
341a0836:	4602      	mov	r2, r0
341a0838:	687b      	ldr	r3, [r7, #4]
341a083a:	601a      	str	r2, [r3, #0]
341a083c:	e002      	b.n	341a0844 <knl_ready_queue_delete+0xa2>
		return;
341a083e:	bf00      	nop
341a0840:	e000      	b.n	341a0844 <knl_ready_queue_delete+0xa2>
		return;
341a0842:	bf00      	nop
		rq->top_priority = priority + i;
	} else {
		rq->top_priority = NUM_TSKPRI;
	}
#endif
}
341a0844:	3710      	adds	r7, #16
341a0846:	46bd      	mov	sp, r7
341a0848:	bd80      	pop	{r7, pc}
	...

341a084c <knl_reschedule>:
/*
 * Reselect task to execute
 *	Set 'schedtsk' to the head task at the ready queue.
 */
Inline void knl_reschedule( void )
{
341a084c:	b580      	push	{r7, lr}
341a084e:	b082      	sub	sp, #8
341a0850:	af00      	add	r7, sp, #0
	TCB	*toptsk;

	toptsk = knl_ready_queue_top(&knl_ready_queue);
341a0852:	4808      	ldr	r0, [pc, #32]	@ (341a0874 <knl_reschedule+0x28>)
341a0854:	f7ff ff54 	bl	341a0700 <knl_ready_queue_top>
341a0858:	6078      	str	r0, [r7, #4]
	if ( knl_schedtsk != toptsk ) {
341a085a:	4b07      	ldr	r3, [pc, #28]	@ (341a0878 <knl_reschedule+0x2c>)
341a085c:	681b      	ldr	r3, [r3, #0]
341a085e:	687a      	ldr	r2, [r7, #4]
341a0860:	429a      	cmp	r2, r3
341a0862:	d002      	beq.n	341a086a <knl_reschedule+0x1e>
		knl_schedtsk = toptsk;
341a0864:	4a04      	ldr	r2, [pc, #16]	@ (341a0878 <knl_reschedule+0x2c>)
341a0866:	687b      	ldr	r3, [r7, #4]
341a0868:	6013      	str	r3, [r2, #0]
	}
}
341a086a:	bf00      	nop
341a086c:	3708      	adds	r7, #8
341a086e:	46bd      	mov	sp, r7
341a0870:	bd80      	pop	{r7, pc}
341a0872:	bf00      	nop
341a0874:	341c49a0 	.word	0x341c49a0
341a0878:	341c499c 	.word	0x341c499c

341a087c <knl_setup_context>:
/*
 * Create stack frame for task startup
 *	Call from 'make_dormant()'
 */
Inline void knl_setup_context( TCB *tcb )
{
341a087c:	b480      	push	{r7}
341a087e:	b085      	sub	sp, #20
341a0880:	af00      	add	r7, sp, #0
341a0882:	6078      	str	r0, [r7, #4]
	SStackFrame	*ssp;

	ssp = tcb->isstack;
341a0884:	687b      	ldr	r3, [r7, #4]
341a0886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341a0888:	60fb      	str	r3, [r7, #12]
	ssp--;
341a088a:	68fb      	ldr	r3, [r7, #12]
341a088c:	3b44      	subs	r3, #68	@ 0x44
341a088e:	60fb      	str	r3, [r7, #12]

	/* CPU context initialization */
	ssp->exp_ret	= EXCRTN_CODE;
341a0890:	68fb      	ldr	r3, [r7, #12]
341a0892:	f06f 0206 	mvn.w	r2, #6
341a0896:	601a      	str	r2, [r3, #0]
	ssp->lr		= 0;
341a0898:	68fb      	ldr	r3, [r7, #12]
341a089a:	2200      	movs	r2, #0
341a089c:	639a      	str	r2, [r3, #56]	@ 0x38
	ssp->xpsr	= 0x01000000;		/* Initial SR */
341a089e:	68fb      	ldr	r3, [r7, #12]
341a08a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
341a08a4:	641a      	str	r2, [r3, #64]	@ 0x40
	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */
341a08a6:	687b      	ldr	r3, [r7, #4]
341a08a8:	695b      	ldr	r3, [r3, #20]
341a08aa:	f023 0301 	bic.w	r3, r3, #1
341a08ae:	461a      	mov	r2, r3
341a08b0:	68fb      	ldr	r3, [r7, #12]
341a08b2:	63da      	str	r2, [r3, #60]	@ 0x3c

	tcb->tskctxb.ssp = ssp;		/* System stack pointer */
341a08b4:	687b      	ldr	r3, [r7, #4]
341a08b6:	68fa      	ldr	r2, [r7, #12]
341a08b8:	619a      	str	r2, [r3, #24]
	tcb->tskctxb.spsa = tcb->isstack - tcb->sstksz;
	tcb->tskctxb.spea = tcb->isstack + sizeof(UW) - 1;
#endif

#if USE_FPU && ALWAYS_FPU_ATR
	tcb->tskatr |= TA_FPU;		/* Always set the TA_FPU attribute on all tasks */
341a08ba:	687b      	ldr	r3, [r7, #4]
341a08bc:	691b      	ldr	r3, [r3, #16]
341a08be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
341a08c2:	687b      	ldr	r3, [r7, #4]
341a08c4:	611a      	str	r2, [r3, #16]
#endif
}
341a08c6:	bf00      	nop
341a08c8:	3714      	adds	r7, #20
341a08ca:	46bd      	mov	sp, r7
341a08cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341a08d0:	4770      	bx	lr
	...

341a08d4 <knl_task_initialize>:

/*
 * TCB Initialization
 */
EXPORT ER knl_task_initialize( void )
{
341a08d4:	b580      	push	{r7, lr}
341a08d6:	b084      	sub	sp, #16
341a08d8:	af00      	add	r7, sp, #0
	if ( NUM_TSKID < 1 ) {
		return E_SYS;
	}

	/* Initialize task execution control information */
	knl_ctxtsk = knl_schedtsk = NULL;
341a08da:	4b19      	ldr	r3, [pc, #100]	@ (341a0940 <knl_task_initialize+0x6c>)
341a08dc:	2200      	movs	r2, #0
341a08de:	601a      	str	r2, [r3, #0]
341a08e0:	4b17      	ldr	r3, [pc, #92]	@ (341a0940 <knl_task_initialize+0x6c>)
341a08e2:	681b      	ldr	r3, [r3, #0]
341a08e4:	4a17      	ldr	r2, [pc, #92]	@ (341a0944 <knl_task_initialize+0x70>)
341a08e6:	6013      	str	r3, [r2, #0]
	knl_ready_queue_initialize(&knl_ready_queue);
341a08e8:	4817      	ldr	r0, [pc, #92]	@ (341a0948 <knl_task_initialize+0x74>)
341a08ea:	f7ff fedd 	bl	341a06a8 <knl_ready_queue_initialize>
	knl_dispatch_disabled = DDS_ENABLE;
341a08ee:	4b17      	ldr	r3, [pc, #92]	@ (341a094c <knl_task_initialize+0x78>)
341a08f0:	2200      	movs	r2, #0
341a08f2:	601a      	str	r2, [r3, #0]

	/* Register all TCBs onto FreeQue */
	QueInit(&knl_free_tcb);
341a08f4:	4816      	ldr	r0, [pc, #88]	@ (341a0950 <knl_task_initialize+0x7c>)
341a08f6:	f7ff fe67 	bl	341a05c8 <QueInit>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
341a08fa:	4b16      	ldr	r3, [pc, #88]	@ (341a0954 <knl_task_initialize+0x80>)
341a08fc:	60bb      	str	r3, [r7, #8]
341a08fe:	2300      	movs	r3, #0
341a0900:	60fb      	str	r3, [r7, #12]
341a0902:	e014      	b.n	341a092e <knl_task_initialize+0x5a>
		tskid = ID_TSK(i);
341a0904:	68fb      	ldr	r3, [r7, #12]
341a0906:	3301      	adds	r3, #1
341a0908:	607b      	str	r3, [r7, #4]
		tcb->tskid = tskid;
341a090a:	68bb      	ldr	r3, [r7, #8]
341a090c:	687a      	ldr	r2, [r7, #4]
341a090e:	609a      	str	r2, [r3, #8]
		tcb->state = TS_NONEXIST;
341a0910:	68bb      	ldr	r3, [r7, #8]
341a0912:	2200      	movs	r2, #0
341a0914:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
#if USE_LEGACY_API && USE_RENDEZVOUS
		tcb->wrdvno = tskid;
#endif

		QueInsert(&tcb->tskque, &knl_free_tcb);
341a0918:	68bb      	ldr	r3, [r7, #8]
341a091a:	490d      	ldr	r1, [pc, #52]	@ (341a0950 <knl_task_initialize+0x7c>)
341a091c:	4618      	mov	r0, r3
341a091e:	f7ff fe75 	bl	341a060c <QueInsert>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
341a0922:	68bb      	ldr	r3, [r7, #8]
341a0924:	3368      	adds	r3, #104	@ 0x68
341a0926:	60bb      	str	r3, [r7, #8]
341a0928:	68fb      	ldr	r3, [r7, #12]
341a092a:	3301      	adds	r3, #1
341a092c:	60fb      	str	r3, [r7, #12]
341a092e:	68fb      	ldr	r3, [r7, #12]
341a0930:	2b1f      	cmp	r3, #31
341a0932:	dde7      	ble.n	341a0904 <knl_task_initialize+0x30>
	}

	return E_OK;
341a0934:	2300      	movs	r3, #0
}
341a0936:	4618      	mov	r0, r3
341a0938:	3710      	adds	r7, #16
341a093a:	46bd      	mov	sp, r7
341a093c:	bd80      	pop	{r7, pc}
341a093e:	bf00      	nop
341a0940:	341c499c 	.word	0x341c499c
341a0944:	341c4998 	.word	0x341c4998
341a0948:	341c49a0 	.word	0x341c49a0
341a094c:	341c4994 	.word	0x341c4994
341a0950:	341c57b0 	.word	0x341c57b0
341a0954:	341c4ab0 	.word	0x341c4ab0

341a0958 <knl_make_dormant>:

/*
 * Prepare task execution.
 */
EXPORT void knl_make_dormant( TCB *tcb )
{
341a0958:	b580      	push	{r7, lr}
341a095a:	b082      	sub	sp, #8
341a095c:	af00      	add	r7, sp, #0
341a095e:	6078      	str	r0, [r7, #4]
	/* Initialize variables which should be reset at DORMANT state */
	tcb->state	= TS_DORMANT;
341a0960:	687b      	ldr	r3, [r7, #4]
341a0962:	2208      	movs	r2, #8
341a0964:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	tcb->priority	= tcb->bpriority = tcb->ipriority;
341a0968:	687b      	ldr	r3, [r7, #4]
341a096a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
341a096e:	687b      	ldr	r3, [r7, #4]
341a0970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
341a0974:	687b      	ldr	r3, [r7, #4]
341a0976:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
341a097a:	687b      	ldr	r3, [r7, #4]
341a097c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	tcb->sysmode	= tcb->isysmode;
341a0980:	687b      	ldr	r3, [r7, #4]
341a0982:	f993 3020 	ldrsb.w	r3, [r3, #32]
341a0986:	461a      	mov	r2, r3
341a0988:	687b      	ldr	r3, [r7, #4]
341a098a:	845a      	strh	r2, [r3, #34]	@ 0x22
	tcb->wupcnt	= 0;
341a098c:	687b      	ldr	r3, [r7, #4]
341a098e:	2200      	movs	r2, #0
341a0990:	635a      	str	r2, [r3, #52]	@ 0x34
	tcb->suscnt	= 0;
341a0992:	687b      	ldr	r3, [r7, #4]
341a0994:	2200      	movs	r2, #0
341a0996:	639a      	str	r2, [r3, #56]	@ 0x38

	tcb->klockwait	= FALSE;
341a0998:	687a      	ldr	r2, [r7, #4]
341a099a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
341a099e:	f023 0301 	bic.w	r3, r3, #1
341a09a2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	tcb->klocked	= FALSE;
341a09a6:	687a      	ldr	r2, [r7, #4]
341a09a8:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
341a09ac:	f023 0302 	bic.w	r3, r3, #2
341a09b0:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
#if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)
	tcb->stime	= 0;
	tcb->utime	= 0;
#endif

	tcb->wercd = NULL;
341a09b4:	687b      	ldr	r3, [r7, #4]
341a09b6:	2200      	movs	r2, #0
341a09b8:	63da      	str	r2, [r3, #60]	@ 0x3c

#if USE_MUTEX == 1
	tcb->mtxlist	= NULL;
341a09ba:	687b      	ldr	r3, [r7, #4]
341a09bc:	2200      	movs	r2, #0
341a09be:	665a      	str	r2, [r3, #100]	@ 0x64
#endif

	/* Set context to start task */
	knl_setup_context(tcb);
341a09c0:	6878      	ldr	r0, [r7, #4]
341a09c2:	f7ff ff5b 	bl	341a087c <knl_setup_context>
}
341a09c6:	bf00      	nop
341a09c8:	3708      	adds	r7, #8
341a09ca:	46bd      	mov	sp, r7
341a09cc:	bd80      	pop	{r7, pc}
	...

341a09d0 <knl_make_ready>:
 * Set task to READY state.
 *	Update the task state and insert in the ready queue. If necessary, 
 *	update 'knl_schedtsk' and request to start task dispatcher. 
 */
EXPORT void knl_make_ready( TCB *tcb )
{
341a09d0:	b580      	push	{r7, lr}
341a09d2:	b082      	sub	sp, #8
341a09d4:	af00      	add	r7, sp, #0
341a09d6:	6078      	str	r0, [r7, #4]
	tcb->state = TS_READY;
341a09d8:	687b      	ldr	r3, [r7, #4]
341a09da:	2201      	movs	r2, #1
341a09dc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ( knl_ready_queue_insert(&knl_ready_queue, tcb) ) {
341a09e0:	6879      	ldr	r1, [r7, #4]
341a09e2:	4806      	ldr	r0, [pc, #24]	@ (341a09fc <knl_make_ready+0x2c>)
341a09e4:	f7ff fea5 	bl	341a0732 <knl_ready_queue_insert>
341a09e8:	4603      	mov	r3, r0
341a09ea:	2b00      	cmp	r3, #0
341a09ec:	d002      	beq.n	341a09f4 <knl_make_ready+0x24>
		knl_schedtsk = tcb;
341a09ee:	4a04      	ldr	r2, [pc, #16]	@ (341a0a00 <knl_make_ready+0x30>)
341a09f0:	687b      	ldr	r3, [r7, #4]
341a09f2:	6013      	str	r3, [r2, #0]
	}
}
341a09f4:	bf00      	nop
341a09f6:	3708      	adds	r7, #8
341a09f8:	46bd      	mov	sp, r7
341a09fa:	bd80      	pop	{r7, pc}
341a09fc:	341c49a0 	.word	0x341c49a0
341a0a00:	341c499c 	.word	0x341c499c

341a0a04 <knl_make_non_ready>:
 *	If the deleted task is 'knl_schedtsk', set 'knl_schedtsk' to the
 *	highest priority task in the ready queue. 
 *	'tcb' task must be READY.
 */
EXPORT void knl_make_non_ready( TCB *tcb )
{
341a0a04:	b580      	push	{r7, lr}
341a0a06:	b082      	sub	sp, #8
341a0a08:	af00      	add	r7, sp, #0
341a0a0a:	6078      	str	r0, [r7, #4]
	knl_ready_queue_delete(&knl_ready_queue, tcb);
341a0a0c:	6879      	ldr	r1, [r7, #4]
341a0a0e:	4809      	ldr	r0, [pc, #36]	@ (341a0a34 <knl_make_non_ready+0x30>)
341a0a10:	f7ff fec7 	bl	341a07a2 <knl_ready_queue_delete>
	if ( knl_schedtsk == tcb ) {
341a0a14:	4b08      	ldr	r3, [pc, #32]	@ (341a0a38 <knl_make_non_ready+0x34>)
341a0a16:	681b      	ldr	r3, [r3, #0]
341a0a18:	687a      	ldr	r2, [r7, #4]
341a0a1a:	429a      	cmp	r2, r3
341a0a1c:	d105      	bne.n	341a0a2a <knl_make_non_ready+0x26>
		knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
341a0a1e:	4805      	ldr	r0, [pc, #20]	@ (341a0a34 <knl_make_non_ready+0x30>)
341a0a20:	f7ff fe6e 	bl	341a0700 <knl_ready_queue_top>
341a0a24:	4603      	mov	r3, r0
341a0a26:	4a04      	ldr	r2, [pc, #16]	@ (341a0a38 <knl_make_non_ready+0x34>)
341a0a28:	6013      	str	r3, [r2, #0]
	}
}
341a0a2a:	bf00      	nop
341a0a2c:	3708      	adds	r7, #8
341a0a2e:	46bd      	mov	sp, r7
341a0a30:	bd80      	pop	{r7, pc}
341a0a32:	bf00      	nop
341a0a34:	341c49a0 	.word	0x341c49a0
341a0a38:	341c499c 	.word	0x341c499c

341a0a3c <knl_change_task_priority>:

/*
 * Change task priority.
 */
EXPORT void knl_change_task_priority( TCB *tcb, INT priority )
{
341a0a3c:	b580      	push	{r7, lr}
341a0a3e:	b084      	sub	sp, #16
341a0a40:	af00      	add	r7, sp, #0
341a0a42:	6078      	str	r0, [r7, #4]
341a0a44:	6039      	str	r1, [r7, #0]
	INT	oldpri;

	if ( tcb->state == TS_READY ) {
341a0a46:	687b      	ldr	r3, [r7, #4]
341a0a48:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a0a4c:	2b01      	cmp	r3, #1
341a0a4e:	d10f      	bne.n	341a0a70 <knl_change_task_priority+0x34>
		 * When deleting a task from the ready queue, 
		 * a value in the 'priority' field in TCB is needed. 
		 * Therefore you need to delete the task from the
		 * ready queue before changing 'tcb->priority.'
		 */
		knl_ready_queue_delete(&knl_ready_queue, tcb);
341a0a50:	6879      	ldr	r1, [r7, #4]
341a0a52:	4817      	ldr	r0, [pc, #92]	@ (341a0ab0 <knl_change_task_priority+0x74>)
341a0a54:	f7ff fea5 	bl	341a07a2 <knl_ready_queue_delete>
		tcb->priority = (UB)priority;
341a0a58:	683b      	ldr	r3, [r7, #0]
341a0a5a:	b2da      	uxtb	r2, r3
341a0a5c:	687b      	ldr	r3, [r7, #4]
341a0a5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		knl_ready_queue_insert(&knl_ready_queue, tcb);
341a0a62:	6879      	ldr	r1, [r7, #4]
341a0a64:	4812      	ldr	r0, [pc, #72]	@ (341a0ab0 <knl_change_task_priority+0x74>)
341a0a66:	f7ff fe64 	bl	341a0732 <knl_ready_queue_insert>
		knl_reschedule();
341a0a6a:	f7ff feef 	bl	341a084c <knl_reschedule>
		   execute it */
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
		}
	}
}
341a0a6e:	e01a      	b.n	341a0aa6 <knl_change_task_priority+0x6a>
		oldpri = tcb->priority;
341a0a70:	687b      	ldr	r3, [r7, #4]
341a0a72:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
341a0a76:	60fb      	str	r3, [r7, #12]
		tcb->priority = (UB)priority;
341a0a78:	683b      	ldr	r3, [r7, #0]
341a0a7a:	b2da      	uxtb	r2, r3
341a0a7c:	687b      	ldr	r3, [r7, #4]
341a0a7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
341a0a82:	687b      	ldr	r3, [r7, #4]
341a0a84:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a0a88:	f003 0302 	and.w	r3, r3, #2
341a0a8c:	2b00      	cmp	r3, #0
341a0a8e:	d00a      	beq.n	341a0aa6 <knl_change_task_priority+0x6a>
341a0a90:	687b      	ldr	r3, [r7, #4]
341a0a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a0a94:	685b      	ldr	r3, [r3, #4]
341a0a96:	2b00      	cmp	r3, #0
341a0a98:	d005      	beq.n	341a0aa6 <knl_change_task_priority+0x6a>
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
341a0a9a:	687b      	ldr	r3, [r7, #4]
341a0a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a0a9e:	685b      	ldr	r3, [r3, #4]
341a0aa0:	68f9      	ldr	r1, [r7, #12]
341a0aa2:	6878      	ldr	r0, [r7, #4]
341a0aa4:	4798      	blx	r3
}
341a0aa6:	bf00      	nop
341a0aa8:	3710      	adds	r7, #16
341a0aaa:	46bd      	mov	sp, r7
341a0aac:	bd80      	pop	{r7, pc}
341a0aae:	bf00      	nop
341a0ab0:	341c49a0 	.word	0x341c49a0

341a0ab4 <QueRemove>:
{
341a0ab4:	b480      	push	{r7}
341a0ab6:	b083      	sub	sp, #12
341a0ab8:	af00      	add	r7, sp, #0
341a0aba:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
341a0abc:	687b      	ldr	r3, [r7, #4]
341a0abe:	681b      	ldr	r3, [r3, #0]
341a0ac0:	687a      	ldr	r2, [r7, #4]
341a0ac2:	429a      	cmp	r2, r3
341a0ac4:	d009      	beq.n	341a0ada <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
341a0ac6:	687b      	ldr	r3, [r7, #4]
341a0ac8:	685b      	ldr	r3, [r3, #4]
341a0aca:	687a      	ldr	r2, [r7, #4]
341a0acc:	6812      	ldr	r2, [r2, #0]
341a0ace:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
341a0ad0:	687b      	ldr	r3, [r7, #4]
341a0ad2:	681b      	ldr	r3, [r3, #0]
341a0ad4:	687a      	ldr	r2, [r7, #4]
341a0ad6:	6852      	ldr	r2, [r2, #4]
341a0ad8:	605a      	str	r2, [r3, #4]
}
341a0ada:	bf00      	nop
341a0adc:	370c      	adds	r7, #12
341a0ade:	46bd      	mov	sp, r7
341a0ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0ae4:	4770      	bx	lr

341a0ae6 <QueRemoveNext>:
{
341a0ae6:	b480      	push	{r7}
341a0ae8:	b085      	sub	sp, #20
341a0aea:	af00      	add	r7, sp, #0
341a0aec:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
341a0aee:	687b      	ldr	r3, [r7, #4]
341a0af0:	681b      	ldr	r3, [r3, #0]
341a0af2:	687a      	ldr	r2, [r7, #4]
341a0af4:	429a      	cmp	r2, r3
341a0af6:	d101      	bne.n	341a0afc <QueRemoveNext+0x16>
		return NULL;
341a0af8:	2300      	movs	r3, #0
341a0afa:	e00b      	b.n	341a0b14 <QueRemoveNext+0x2e>
	entry = que->next;
341a0afc:	687b      	ldr	r3, [r7, #4]
341a0afe:	681b      	ldr	r3, [r3, #0]
341a0b00:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
341a0b02:	68fb      	ldr	r3, [r7, #12]
341a0b04:	681a      	ldr	r2, [r3, #0]
341a0b06:	687b      	ldr	r3, [r7, #4]
341a0b08:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
341a0b0a:	68fb      	ldr	r3, [r7, #12]
341a0b0c:	681b      	ldr	r3, [r3, #0]
341a0b0e:	687a      	ldr	r2, [r7, #4]
341a0b10:	605a      	str	r2, [r3, #4]
	return entry;
341a0b12:	68fb      	ldr	r3, [r7, #12]
}
341a0b14:	4618      	mov	r0, r3
341a0b16:	3714      	adds	r7, #20
341a0b18:	46bd      	mov	sp, r7
341a0b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0b1e:	4770      	bx	lr

341a0b20 <knl_timer_delete>:

/*
 * Delete from time-event queue
 */
Inline void knl_timer_delete( TMEB *event )
{
341a0b20:	b580      	push	{r7, lr}
341a0b22:	b082      	sub	sp, #8
341a0b24:	af00      	add	r7, sp, #0
341a0b26:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
341a0b28:	687b      	ldr	r3, [r7, #4]
341a0b2a:	4618      	mov	r0, r3
341a0b2c:	f7ff ffc2 	bl	341a0ab4 <QueRemove>
}
341a0b30:	bf00      	nop
341a0b32:	3708      	adds	r7, #8
341a0b34:	46bd      	mov	sp, r7
341a0b36:	bd80      	pop	{r7, pc}

341a0b38 <knl_isTaskIndependent>:
{
341a0b38:	b480      	push	{r7}
341a0b3a:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
341a0b3c:	4b05      	ldr	r3, [pc, #20]	@ (341a0b54 <knl_isTaskIndependent+0x1c>)
341a0b3e:	681b      	ldr	r3, [r3, #0]
341a0b40:	2b00      	cmp	r3, #0
341a0b42:	bfcc      	ite	gt
341a0b44:	2301      	movgt	r3, #1
341a0b46:	2300      	movle	r3, #0
341a0b48:	b2db      	uxtb	r3, r3
}
341a0b4a:	4618      	mov	r0, r3
341a0b4c:	46bd      	mov	sp, r7
341a0b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0b52:	4770      	bx	lr
341a0b54:	341c2920 	.word	0x341c2920

341a0b58 <knl_wait_cancel>:
 * Cancel task wait state.
 *	Remove the task from the timer queue and the wait queue.
 *	Do not update the task state.
 */
Inline void knl_wait_cancel( TCB *tcb )
{
341a0b58:	b580      	push	{r7, lr}
341a0b5a:	b082      	sub	sp, #8
341a0b5c:	af00      	add	r7, sp, #0
341a0b5e:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
341a0b60:	687b      	ldr	r3, [r7, #4]
341a0b62:	334c      	adds	r3, #76	@ 0x4c
341a0b64:	4618      	mov	r0, r3
341a0b66:	f7ff ffdb 	bl	341a0b20 <knl_timer_delete>
	QueRemove(&tcb->tskque);
341a0b6a:	687b      	ldr	r3, [r7, #4]
341a0b6c:	4618      	mov	r0, r3
341a0b6e:	f7ff ffa1 	bl	341a0ab4 <QueRemove>
}
341a0b72:	bf00      	nop
341a0b74:	3708      	adds	r7, #8
341a0b76:	46bd      	mov	sp, r7
341a0b78:	bd80      	pop	{r7, pc}

341a0b7a <knl_setup_stacd>:
/*
 * Set task startup code
 *	Called by 'tk_sta_tsk()' processing.
 */
Inline void knl_setup_stacd( TCB *tcb, INT stacd )
{
341a0b7a:	b480      	push	{r7}
341a0b7c:	b085      	sub	sp, #20
341a0b7e:	af00      	add	r7, sp, #0
341a0b80:	6078      	str	r0, [r7, #4]
341a0b82:	6039      	str	r1, [r7, #0]
	SStackFrame	*ssp;
	
	ssp = tcb->tskctxb.ssp;
341a0b84:	687b      	ldr	r3, [r7, #4]
341a0b86:	699b      	ldr	r3, [r3, #24]
341a0b88:	60fb      	str	r3, [r7, #12]

	ssp->r[0] = stacd;
341a0b8a:	683a      	ldr	r2, [r7, #0]
341a0b8c:	68fb      	ldr	r3, [r7, #12]
341a0b8e:	625a      	str	r2, [r3, #36]	@ 0x24
	ssp->r[1] = (VW)tcb->exinf;
341a0b90:	687b      	ldr	r3, [r7, #4]
341a0b92:	68db      	ldr	r3, [r3, #12]
341a0b94:	461a      	mov	r2, r3
341a0b96:	68fb      	ldr	r3, [r7, #12]
341a0b98:	629a      	str	r2, [r3, #40]	@ 0x28
}
341a0b9a:	bf00      	nop
341a0b9c:	3714      	adds	r7, #20
341a0b9e:	46bd      	mov	sp, r7
341a0ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0ba4:	4770      	bx	lr
	...

341a0ba8 <knl_cleanup_context>:

/*
 * Delete task contexts
 */
Inline void knl_cleanup_context( TCB *tcb )
{
341a0ba8:	b480      	push	{r7}
341a0baa:	b085      	sub	sp, #20
341a0bac:	af00      	add	r7, sp, #0
341a0bae:	6078      	str	r0, [r7, #4]
#if USE_FPU		/* Clear CONTROL.FPCA */
	UW	control;

	if(tcb == knl_ctxtsk) {
341a0bb0:	4b0a      	ldr	r3, [pc, #40]	@ (341a0bdc <knl_cleanup_context+0x34>)
341a0bb2:	681b      	ldr	r3, [r3, #0]
341a0bb4:	687a      	ldr	r2, [r7, #4]
341a0bb6:	429a      	cmp	r2, r3
341a0bb8:	d109      	bne.n	341a0bce <knl_cleanup_context+0x26>
		/* Clear CONTROL.FPCA */
		Asm("mrs %0, control":"=r"(control));
341a0bba:	f3ef 8314 	mrs	r3, CONTROL
341a0bbe:	60fb      	str	r3, [r7, #12]
		control &= (1<<2);
341a0bc0:	68fb      	ldr	r3, [r7, #12]
341a0bc2:	f003 0304 	and.w	r3, r3, #4
341a0bc6:	60fb      	str	r3, [r7, #12]
		Asm("msr control, %0"::"r"(control));
341a0bc8:	68fb      	ldr	r3, [r7, #12]
341a0bca:	f383 8814 	msr	CONTROL, r3
	}
#endif
}
341a0bce:	bf00      	nop
341a0bd0:	3714      	adds	r7, #20
341a0bd2:	46bd      	mov	sp, r7
341a0bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0bd8:	4770      	bx	lr
341a0bda:	bf00      	nop
341a0bdc:	341c4998 	.word	0x341c4998

341a0be0 <tk_cre_tsk>:

/*
 * Create task
 */
SYSCALL ID tk_cre_tsk( CONST T_CTSK *pk_ctsk )
{
341a0be0:	b580      	push	{r7, lr}
341a0be2:	b088      	sub	sp, #32
341a0be4:	af00      	add	r7, sp, #0
341a0be6:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_TSKATR = {	/* Valid value of task attribute */
341a0be8:	f241 3321 	movw	r3, #4897	@ 0x1321
341a0bec:	613b      	str	r3, [r7, #16]
	TCB	*tcb;
	W	sstksz;
	void	*stack;
	ER	ercd;

	CHECK_RSATR(pk_ctsk->tskatr, VALID_TSKATR);
341a0bee:	687b      	ldr	r3, [r7, #4]
341a0bf0:	685a      	ldr	r2, [r3, #4]
341a0bf2:	693b      	ldr	r3, [r7, #16]
341a0bf4:	43db      	mvns	r3, r3
341a0bf6:	4013      	ands	r3, r2
341a0bf8:	2b00      	cmp	r3, #0
341a0bfa:	d002      	beq.n	341a0c02 <tk_cre_tsk+0x22>
341a0bfc:	f06f 030a 	mvn.w	r3, #10
341a0c00:	e090      	b.n	341a0d24 <tk_cre_tsk+0x144>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_ctsk->tskatr & TA_USERBUF) != 0);
#endif
	CHECK_PAR(pk_ctsk->stksz >= 0);
341a0c02:	687b      	ldr	r3, [r7, #4]
341a0c04:	691b      	ldr	r3, [r3, #16]
341a0c06:	2b00      	cmp	r3, #0
341a0c08:	da02      	bge.n	341a0c10 <tk_cre_tsk+0x30>
341a0c0a:	f06f 0310 	mvn.w	r3, #16
341a0c0e:	e089      	b.n	341a0d24 <tk_cre_tsk+0x144>
	CHECK_PRI(pk_ctsk->itskpri);
341a0c10:	687b      	ldr	r3, [r7, #4]
341a0c12:	68db      	ldr	r3, [r3, #12]
341a0c14:	2b00      	cmp	r3, #0
341a0c16:	dd03      	ble.n	341a0c20 <tk_cre_tsk+0x40>
341a0c18:	687b      	ldr	r3, [r7, #4]
341a0c1a:	68db      	ldr	r3, [r3, #12]
341a0c1c:	2b20      	cmp	r3, #32
341a0c1e:	dd02      	ble.n	341a0c26 <tk_cre_tsk+0x46>
341a0c20:	f06f 0310 	mvn.w	r3, #16
341a0c24:	e07e      	b.n	341a0d24 <tk_cre_tsk+0x144>

	if ( (pk_ctsk->tskatr & TA_USERBUF) != 0 ) {
341a0c26:	687b      	ldr	r3, [r7, #4]
341a0c28:	685b      	ldr	r3, [r3, #4]
341a0c2a:	f003 0320 	and.w	r3, r3, #32
341a0c2e:	2b00      	cmp	r3, #0
341a0c30:	d00c      	beq.n	341a0c4c <tk_cre_tsk+0x6c>
		/* Use user buffer */
		sstksz = pk_ctsk->stksz;
341a0c32:	687b      	ldr	r3, [r7, #4]
341a0c34:	691b      	ldr	r3, [r3, #16]
341a0c36:	61fb      	str	r3, [r7, #28]
		CHECK_PAR(sstksz >= MIN_SYS_STACK_SIZE);
341a0c38:	69fb      	ldr	r3, [r7, #28]
341a0c3a:	2b7f      	cmp	r3, #127	@ 0x7f
341a0c3c:	dc02      	bgt.n	341a0c44 <tk_cre_tsk+0x64>
341a0c3e:	f06f 0310 	mvn.w	r3, #16
341a0c42:	e06f      	b.n	341a0d24 <tk_cre_tsk+0x144>
		stack = pk_ctsk->bufptr;
341a0c44:	687b      	ldr	r3, [r7, #4]
341a0c46:	695b      	ldr	r3, [r3, #20]
341a0c48:	61bb      	str	r3, [r7, #24]
341a0c4a:	e015      	b.n	341a0c78 <tk_cre_tsk+0x98>
	} else {
#if USE_IMALLOC
		/* Allocate system stack area */
		sstksz = pk_ctsk->stksz + DEFAULT_SYS_STKSZ;
341a0c4c:	687b      	ldr	r3, [r7, #4]
341a0c4e:	691b      	ldr	r3, [r3, #16]
341a0c50:	3380      	adds	r3, #128	@ 0x80
341a0c52:	61fb      	str	r3, [r7, #28]
		sstksz  = (sstksz  + 7) / 8 * 8;	/* Align to a multiple of 8 */
341a0c54:	69fb      	ldr	r3, [r7, #28]
341a0c56:	3307      	adds	r3, #7
341a0c58:	2b00      	cmp	r3, #0
341a0c5a:	da00      	bge.n	341a0c5e <tk_cre_tsk+0x7e>
341a0c5c:	3307      	adds	r3, #7
341a0c5e:	10db      	asrs	r3, r3, #3
341a0c60:	00db      	lsls	r3, r3, #3
341a0c62:	61fb      	str	r3, [r7, #28]
		stack = knl_Imalloc((UW)sstksz);
341a0c64:	69f8      	ldr	r0, [r7, #28]
341a0c66:	f7ff f84d 	bl	3419fd04 <knl_Imalloc>
341a0c6a:	61b8      	str	r0, [r7, #24]
		if ( stack == NULL ) {
341a0c6c:	69bb      	ldr	r3, [r7, #24]
341a0c6e:	2b00      	cmp	r3, #0
341a0c70:	d102      	bne.n	341a0c78 <tk_cre_tsk+0x98>
			return E_NOMEM;
341a0c72:	f06f 0320 	mvn.w	r3, #32
341a0c76:	e055      	b.n	341a0d24 <tk_cre_tsk+0x144>
		}
#endif
	}

	BEGIN_CRITICAL_SECTION;
341a0c78:	f001 ff07 	bl	341a2a8a <disint>
341a0c7c:	60f8      	str	r0, [r7, #12]
	/* Get control block from FreeQue */
	tcb = (TCB*)QueRemoveNext(&knl_free_tcb);
341a0c7e:	482b      	ldr	r0, [pc, #172]	@ (341a0d2c <tk_cre_tsk+0x14c>)
341a0c80:	f7ff ff31 	bl	341a0ae6 <QueRemoveNext>
341a0c84:	60b8      	str	r0, [r7, #8]
	if ( tcb == NULL ) {
341a0c86:	68bb      	ldr	r3, [r7, #8]
341a0c88:	2b00      	cmp	r3, #0
341a0c8a:	d103      	bne.n	341a0c94 <tk_cre_tsk+0xb4>
		ercd = E_LIMIT;
341a0c8c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
341a0c90:	617b      	str	r3, [r7, #20]
		goto error_exit;
341a0c92:	e028      	b.n	341a0ce6 <tk_cre_tsk+0x106>
	}

	/* Initialize control block */
	tcb->exinf     = pk_ctsk->exinf;
341a0c94:	687b      	ldr	r3, [r7, #4]
341a0c96:	681a      	ldr	r2, [r3, #0]
341a0c98:	68bb      	ldr	r3, [r7, #8]
341a0c9a:	60da      	str	r2, [r3, #12]
	tcb->tskatr    = pk_ctsk->tskatr;
341a0c9c:	687b      	ldr	r3, [r7, #4]
341a0c9e:	685a      	ldr	r2, [r3, #4]
341a0ca0:	68bb      	ldr	r3, [r7, #8]
341a0ca2:	611a      	str	r2, [r3, #16]
	tcb->task      = pk_ctsk->task;
341a0ca4:	687b      	ldr	r3, [r7, #4]
341a0ca6:	689a      	ldr	r2, [r3, #8]
341a0ca8:	68bb      	ldr	r3, [r7, #8]
341a0caa:	615a      	str	r2, [r3, #20]
	tcb->ipriority = (UB)int_priority(pk_ctsk->itskpri);
341a0cac:	687b      	ldr	r3, [r7, #4]
341a0cae:	68db      	ldr	r3, [r3, #12]
341a0cb0:	b2db      	uxtb	r3, r3
341a0cb2:	3b01      	subs	r3, #1
341a0cb4:	b2da      	uxtb	r2, r3
341a0cb6:	68bb      	ldr	r3, [r7, #8]
341a0cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	tcb->sstksz    = sstksz;
341a0cbc:	68bb      	ldr	r3, [r7, #8]
341a0cbe:	69fa      	ldr	r2, [r7, #28]
341a0cc0:	61da      	str	r2, [r3, #28]
		knl_strncpy((char*)tcb->name, (char*)pk_ctsk->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	/* Set stack pointer */
	tcb->isstack = (VB*)stack + sstksz;
341a0cc2:	69fb      	ldr	r3, [r7, #28]
341a0cc4:	69ba      	ldr	r2, [r7, #24]
341a0cc6:	441a      	add	r2, r3
341a0cc8:	68bb      	ldr	r3, [r7, #8]
341a0cca:	661a      	str	r2, [r3, #96]	@ 0x60

	/* Set initial value of task operation mode */
	tcb->isysmode = 1;
341a0ccc:	68bb      	ldr	r3, [r7, #8]
341a0cce:	2201      	movs	r2, #1
341a0cd0:	f883 2020 	strb.w	r2, [r3, #32]
	tcb->sysmode  = 1;
341a0cd4:	68bb      	ldr	r3, [r7, #8]
341a0cd6:	2201      	movs	r2, #1
341a0cd8:	845a      	strh	r2, [r3, #34]	@ 0x22

	/* make it to DORMANT state */
	knl_make_dormant(tcb);
341a0cda:	68b8      	ldr	r0, [r7, #8]
341a0cdc:	f7ff fe3c 	bl	341a0958 <knl_make_dormant>

	ercd = tcb->tskid;
341a0ce0:	68bb      	ldr	r3, [r7, #8]
341a0ce2:	689b      	ldr	r3, [r3, #8]
341a0ce4:	617b      	str	r3, [r7, #20]

    error_exit:
	END_CRITICAL_SECTION;
341a0ce6:	68fb      	ldr	r3, [r7, #12]
341a0ce8:	2b00      	cmp	r3, #0
341a0cea:	d10b      	bne.n	341a0d04 <tk_cre_tsk+0x124>
341a0cec:	4b10      	ldr	r3, [pc, #64]	@ (341a0d30 <tk_cre_tsk+0x150>)
341a0cee:	681a      	ldr	r2, [r3, #0]
341a0cf0:	4b10      	ldr	r3, [pc, #64]	@ (341a0d34 <tk_cre_tsk+0x154>)
341a0cf2:	681b      	ldr	r3, [r3, #0]
341a0cf4:	429a      	cmp	r2, r3
341a0cf6:	d005      	beq.n	341a0d04 <tk_cre_tsk+0x124>
341a0cf8:	4b0f      	ldr	r3, [pc, #60]	@ (341a0d38 <tk_cre_tsk+0x158>)
341a0cfa:	681b      	ldr	r3, [r3, #0]
341a0cfc:	2b00      	cmp	r3, #0
341a0cfe:	d101      	bne.n	341a0d04 <tk_cre_tsk+0x124>
341a0d00:	f001 fc6a 	bl	341a25d8 <knl_dispatch>
341a0d04:	68f8      	ldr	r0, [r7, #12]
341a0d06:	f001 fea4 	bl	341a2a52 <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && ((pk_ctsk->tskatr & TA_USERBUF) == 0) ) {
341a0d0a:	697b      	ldr	r3, [r7, #20]
341a0d0c:	2b00      	cmp	r3, #0
341a0d0e:	da08      	bge.n	341a0d22 <tk_cre_tsk+0x142>
341a0d10:	687b      	ldr	r3, [r7, #4]
341a0d12:	685b      	ldr	r3, [r3, #4]
341a0d14:	f003 0320 	and.w	r3, r3, #32
341a0d18:	2b00      	cmp	r3, #0
341a0d1a:	d102      	bne.n	341a0d22 <tk_cre_tsk+0x142>
		knl_Ifree(stack);
341a0d1c:	69b8      	ldr	r0, [r7, #24]
341a0d1e:	f7ff f847 	bl	3419fdb0 <knl_Ifree>
	}
#endif

	return ercd;
341a0d22:	697b      	ldr	r3, [r7, #20]
}
341a0d24:	4618      	mov	r0, r3
341a0d26:	3720      	adds	r7, #32
341a0d28:	46bd      	mov	sp, r7
341a0d2a:	bd80      	pop	{r7, pc}
341a0d2c:	341c57b0 	.word	0x341c57b0
341a0d30:	341c4998 	.word	0x341c4998
341a0d34:	341c499c 	.word	0x341c499c
341a0d38:	341c4994 	.word	0x341c4994

341a0d3c <tk_sta_tsk>:

/*
 * Start task
 */
SYSCALL ER tk_sta_tsk( ID tskid, INT stacd )
{
341a0d3c:	b580      	push	{r7, lr}
341a0d3e:	b086      	sub	sp, #24
341a0d40:	af00      	add	r7, sp, #0
341a0d42:	6078      	str	r0, [r7, #4]
341a0d44:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
341a0d46:	2300      	movs	r3, #0
341a0d48:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
341a0d4a:	f7ff fef5 	bl	341a0b38 <knl_isTaskIndependent>
341a0d4e:	4603      	mov	r3, r0
341a0d50:	2b00      	cmp	r3, #0
341a0d52:	d109      	bne.n	341a0d68 <tk_sta_tsk+0x2c>
341a0d54:	4b2f      	ldr	r3, [pc, #188]	@ (341a0e14 <tk_sta_tsk+0xd8>)
341a0d56:	681b      	ldr	r3, [r3, #0]
341a0d58:	2b00      	cmp	r3, #0
341a0d5a:	d005      	beq.n	341a0d68 <tk_sta_tsk+0x2c>
341a0d5c:	687b      	ldr	r3, [r7, #4]
341a0d5e:	2b00      	cmp	r3, #0
341a0d60:	d102      	bne.n	341a0d68 <tk_sta_tsk+0x2c>
341a0d62:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a0d66:	e050      	b.n	341a0e0a <tk_sta_tsk+0xce>
341a0d68:	687b      	ldr	r3, [r7, #4]
341a0d6a:	2b00      	cmp	r3, #0
341a0d6c:	dd02      	ble.n	341a0d74 <tk_sta_tsk+0x38>
341a0d6e:	687b      	ldr	r3, [r7, #4]
341a0d70:	2b20      	cmp	r3, #32
341a0d72:	dd02      	ble.n	341a0d7a <tk_sta_tsk+0x3e>
341a0d74:	f06f 0311 	mvn.w	r3, #17
341a0d78:	e047      	b.n	341a0e0a <tk_sta_tsk+0xce>
	CHECK_NONSELF(tskid);
341a0d7a:	f7ff fedd 	bl	341a0b38 <knl_isTaskIndependent>
341a0d7e:	4603      	mov	r3, r0
341a0d80:	2b00      	cmp	r3, #0
341a0d82:	d10c      	bne.n	341a0d9e <tk_sta_tsk+0x62>
341a0d84:	4b23      	ldr	r3, [pc, #140]	@ (341a0e14 <tk_sta_tsk+0xd8>)
341a0d86:	681b      	ldr	r3, [r3, #0]
341a0d88:	2b00      	cmp	r3, #0
341a0d8a:	d008      	beq.n	341a0d9e <tk_sta_tsk+0x62>
341a0d8c:	4b21      	ldr	r3, [pc, #132]	@ (341a0e14 <tk_sta_tsk+0xd8>)
341a0d8e:	681b      	ldr	r3, [r3, #0]
341a0d90:	689b      	ldr	r3, [r3, #8]
341a0d92:	687a      	ldr	r2, [r7, #4]
341a0d94:	429a      	cmp	r2, r3
341a0d96:	d102      	bne.n	341a0d9e <tk_sta_tsk+0x62>
341a0d98:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a0d9c:	e035      	b.n	341a0e0a <tk_sta_tsk+0xce>

	tcb = get_tcb(tskid);
341a0d9e:	687b      	ldr	r3, [r7, #4]
341a0da0:	3b01      	subs	r3, #1
341a0da2:	2268      	movs	r2, #104	@ 0x68
341a0da4:	fb02 f303 	mul.w	r3, r2, r3
341a0da8:	4a1b      	ldr	r2, [pc, #108]	@ (341a0e18 <tk_sta_tsk+0xdc>)
341a0daa:	4413      	add	r3, r2
341a0dac:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
341a0dae:	f001 fe6c 	bl	341a2a8a <disint>
341a0db2:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
341a0db4:	693b      	ldr	r3, [r7, #16]
341a0db6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a0dba:	72fb      	strb	r3, [r7, #11]
	if ( state != TS_DORMANT ) {
341a0dbc:	7afb      	ldrb	r3, [r7, #11]
341a0dbe:	2b08      	cmp	r3, #8
341a0dc0:	d009      	beq.n	341a0dd6 <tk_sta_tsk+0x9a>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
341a0dc2:	7afb      	ldrb	r3, [r7, #11]
341a0dc4:	2b00      	cmp	r3, #0
341a0dc6:	d102      	bne.n	341a0dce <tk_sta_tsk+0x92>
341a0dc8:	f06f 0329 	mvn.w	r3, #41	@ 0x29
341a0dcc:	e001      	b.n	341a0dd2 <tk_sta_tsk+0x96>
341a0dce:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a0dd2:	617b      	str	r3, [r7, #20]
341a0dd4:	e006      	b.n	341a0de4 <tk_sta_tsk+0xa8>
	} else {
		knl_setup_stacd(tcb, stacd);
341a0dd6:	6839      	ldr	r1, [r7, #0]
341a0dd8:	6938      	ldr	r0, [r7, #16]
341a0dda:	f7ff fece 	bl	341a0b7a <knl_setup_stacd>
		knl_make_ready(tcb);
341a0dde:	6938      	ldr	r0, [r7, #16]
341a0de0:	f7ff fdf6 	bl	341a09d0 <knl_make_ready>
	}
	END_CRITICAL_SECTION;
341a0de4:	68fb      	ldr	r3, [r7, #12]
341a0de6:	2b00      	cmp	r3, #0
341a0de8:	d10b      	bne.n	341a0e02 <tk_sta_tsk+0xc6>
341a0dea:	4b0a      	ldr	r3, [pc, #40]	@ (341a0e14 <tk_sta_tsk+0xd8>)
341a0dec:	681a      	ldr	r2, [r3, #0]
341a0dee:	4b0b      	ldr	r3, [pc, #44]	@ (341a0e1c <tk_sta_tsk+0xe0>)
341a0df0:	681b      	ldr	r3, [r3, #0]
341a0df2:	429a      	cmp	r2, r3
341a0df4:	d005      	beq.n	341a0e02 <tk_sta_tsk+0xc6>
341a0df6:	4b0a      	ldr	r3, [pc, #40]	@ (341a0e20 <tk_sta_tsk+0xe4>)
341a0df8:	681b      	ldr	r3, [r3, #0]
341a0dfa:	2b00      	cmp	r3, #0
341a0dfc:	d101      	bne.n	341a0e02 <tk_sta_tsk+0xc6>
341a0dfe:	f001 fbeb 	bl	341a25d8 <knl_dispatch>
341a0e02:	68f8      	ldr	r0, [r7, #12]
341a0e04:	f001 fe25 	bl	341a2a52 <set_basepri>

	return ercd;
341a0e08:	697b      	ldr	r3, [r7, #20]
}
341a0e0a:	4618      	mov	r0, r3
341a0e0c:	3718      	adds	r7, #24
341a0e0e:	46bd      	mov	sp, r7
341a0e10:	bd80      	pop	{r7, pc}
341a0e12:	bf00      	nop
341a0e14:	341c4998 	.word	0x341c4998
341a0e18:	341c4ab0 	.word	0x341c4ab0
341a0e1c:	341c499c 	.word	0x341c499c
341a0e20:	341c4994 	.word	0x341c4994

341a0e24 <knl_ter_tsk>:
/*
 * Task finalization
 *	Call from critical section
 */
LOCAL void knl_ter_tsk( TCB *tcb )
{
341a0e24:	b580      	push	{r7, lr}
341a0e26:	b084      	sub	sp, #16
341a0e28:	af00      	add	r7, sp, #0
341a0e2a:	6078      	str	r0, [r7, #4]
	TSTAT	state;

	state = (TSTAT)tcb->state;
341a0e2c:	687b      	ldr	r3, [r7, #4]
341a0e2e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a0e32:	73fb      	strb	r3, [r7, #15]
	if ( state == TS_READY ) {
341a0e34:	7bfb      	ldrb	r3, [r7, #15]
341a0e36:	2b01      	cmp	r3, #1
341a0e38:	d103      	bne.n	341a0e42 <knl_ter_tsk+0x1e>
		knl_make_non_ready(tcb);
341a0e3a:	6878      	ldr	r0, [r7, #4]
341a0e3c:	f7ff fde2 	bl	341a0a04 <knl_make_non_ready>
341a0e40:	e011      	b.n	341a0e66 <knl_ter_tsk+0x42>

	} else if ( (state & TS_WAIT) != 0 ) {
341a0e42:	7bfb      	ldrb	r3, [r7, #15]
341a0e44:	f003 0302 	and.w	r3, r3, #2
341a0e48:	2b00      	cmp	r3, #0
341a0e4a:	d00c      	beq.n	341a0e66 <knl_ter_tsk+0x42>
		knl_wait_cancel(tcb);
341a0e4c:	6878      	ldr	r0, [r7, #4]
341a0e4e:	f7ff fe83 	bl	341a0b58 <knl_wait_cancel>
		if ( tcb->wspec->rel_wai_hook != NULL ) {
341a0e52:	687b      	ldr	r3, [r7, #4]
341a0e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a0e56:	689b      	ldr	r3, [r3, #8]
341a0e58:	2b00      	cmp	r3, #0
341a0e5a:	d004      	beq.n	341a0e66 <knl_ter_tsk+0x42>
			(*tcb->wspec->rel_wai_hook)(tcb);
341a0e5c:	687b      	ldr	r3, [r7, #4]
341a0e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a0e60:	689b      	ldr	r3, [r3, #8]
341a0e62:	6878      	ldr	r0, [r7, #4]
341a0e64:	4798      	blx	r3
		}
	}

#if USE_MUTEX == 1
	/* signal mutex */
	knl_signal_all_mutex(tcb);
341a0e66:	6878      	ldr	r0, [r7, #4]
341a0e68:	f7ff f9c2 	bl	341a01f0 <knl_signal_all_mutex>
#endif

	knl_cleanup_context(tcb);
341a0e6c:	6878      	ldr	r0, [r7, #4]
341a0e6e:	f7ff fe9b 	bl	341a0ba8 <knl_cleanup_context>
}
341a0e72:	bf00      	nop
341a0e74:	3710      	adds	r7, #16
341a0e76:	46bd      	mov	sp, r7
341a0e78:	bd80      	pop	{r7, pc}
	...

341a0e7c <tk_ext_tsk>:
#ifdef USE_FUNC_TK_EXT_TSK
/*
 * End its own task
 */
SYSCALL void tk_ext_tsk( void )
{
341a0e7c:	b580      	push	{r7, lr}
341a0e7e:	b092      	sub	sp, #72	@ 0x48
341a0e80:	af00      	add	r7, sp, #0
	volatile VB _dummy[DORMANT_STACK_SIZE];
#endif

	/* Check context error */
#if CHK_CTX2
	if ( in_indp() ) {
341a0e82:	f7ff fe59 	bl	341a0b38 <knl_isTaskIndependent>
341a0e86:	4603      	mov	r3, r0
341a0e88:	2b00      	cmp	r3, #0
341a0e8a:	d103      	bne.n	341a0e94 <tk_ext_tsk+0x18>
341a0e8c:	4b18      	ldr	r3, [pc, #96]	@ (341a0ef0 <tk_ext_tsk+0x74>)
341a0e8e:	681b      	ldr	r3, [r3, #0]
341a0e90:	2b00      	cmp	r3, #0
341a0e92:	d104      	bne.n	341a0e9e <tk_ext_tsk+0x22>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the task independent\n");
341a0e94:	4817      	ldr	r0, [pc, #92]	@ (341a0ef4 <tk_ext_tsk+0x78>)
341a0e96:	f000 ffbf 	bl	341a1e18 <tm_putstring>
		while(1);
341a0e9a:	bf00      	nop
341a0e9c:	e7fd      	b.n	341a0e9a <tk_ext_tsk+0x1e>
		return;
	}
#endif
#if CHK_CTX1
	if ( in_ddsp() ) {
341a0e9e:	4b16      	ldr	r3, [pc, #88]	@ (341a0ef8 <tk_ext_tsk+0x7c>)
341a0ea0:	681b      	ldr	r3, [r3, #0]
341a0ea2:	2b00      	cmp	r3, #0
341a0ea4:	d10d      	bne.n	341a0ec2 <tk_ext_tsk+0x46>
341a0ea6:	f7ff fe47 	bl	341a0b38 <knl_isTaskIndependent>
341a0eaa:	4603      	mov	r3, r0
341a0eac:	2b00      	cmp	r3, #0
341a0eae:	d108      	bne.n	341a0ec2 <tk_ext_tsk+0x46>
341a0eb0:	4b0f      	ldr	r3, [pc, #60]	@ (341a0ef0 <tk_ext_tsk+0x74>)
341a0eb2:	681b      	ldr	r3, [r3, #0]
341a0eb4:	2b00      	cmp	r3, #0
341a0eb6:	d004      	beq.n	341a0ec2 <tk_ext_tsk+0x46>
341a0eb8:	f001 fdda 	bl	341a2a70 <get_basepri>
341a0ebc:	4603      	mov	r3, r0
341a0ebe:	2b00      	cmp	r3, #0
341a0ec0:	d002      	beq.n	341a0ec8 <tk_ext_tsk+0x4c>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the dispatch disabled\n");
341a0ec2:	480e      	ldr	r0, [pc, #56]	@ (341a0efc <tk_ext_tsk+0x80>)
341a0ec4:	f000 ffa8 	bl	341a1e18 <tm_putstring>
	}
#endif

	DISABLE_INTERRUPT;
341a0ec8:	f001 fddf 	bl	341a2a8a <disint>
	knl_ter_tsk(knl_ctxtsk);
341a0ecc:	4b08      	ldr	r3, [pc, #32]	@ (341a0ef0 <tk_ext_tsk+0x74>)
341a0ece:	681b      	ldr	r3, [r3, #0]
341a0ed0:	4618      	mov	r0, r3
341a0ed2:	f7ff ffa7 	bl	341a0e24 <knl_ter_tsk>
	knl_make_dormant(knl_ctxtsk);
341a0ed6:	4b06      	ldr	r3, [pc, #24]	@ (341a0ef0 <tk_ext_tsk+0x74>)
341a0ed8:	681b      	ldr	r3, [r3, #0]
341a0eda:	4618      	mov	r0, r3
341a0edc:	f7ff fd3c 	bl	341a0958 <knl_make_dormant>

	knl_force_dispatch();
341a0ee0:	f001 fb62 	bl	341a25a8 <knl_force_dispatch>
	/* No return */

#ifdef DORMANT_STACK_SIZE
	/* Avoid WARNING (This code does not execute) */
	_dummy[0] = _dummy[0];
341a0ee4:	793b      	ldrb	r3, [r7, #4]
341a0ee6:	b25b      	sxtb	r3, r3
341a0ee8:	713b      	strb	r3, [r7, #4]
#endif
}
341a0eea:	3748      	adds	r7, #72	@ 0x48
341a0eec:	46bd      	mov	sp, r7
341a0eee:	bd80      	pop	{r7, pc}
341a0ef0:	341c4998 	.word	0x341c4998
341a0ef4:	341a57a0 	.word	0x341a57a0
341a0ef8:	341c4994 	.word	0x341c4994
341a0efc:	341a57d0 	.word	0x341a57d0

341a0f00 <tk_get_tid>:
#ifdef USE_FUNC_TK_GET_TID
/*
 * Refer task ID at execution
 */
SYSCALL ID tk_get_tid( void )
{
341a0f00:	b480      	push	{r7}
341a0f02:	af00      	add	r7, sp, #0
	return ( knl_ctxtsk == NULL )? 0: knl_ctxtsk->tskid;
341a0f04:	4b06      	ldr	r3, [pc, #24]	@ (341a0f20 <tk_get_tid+0x20>)
341a0f06:	681b      	ldr	r3, [r3, #0]
341a0f08:	2b00      	cmp	r3, #0
341a0f0a:	d003      	beq.n	341a0f14 <tk_get_tid+0x14>
341a0f0c:	4b04      	ldr	r3, [pc, #16]	@ (341a0f20 <tk_get_tid+0x20>)
341a0f0e:	681b      	ldr	r3, [r3, #0]
341a0f10:	689b      	ldr	r3, [r3, #8]
341a0f12:	e000      	b.n	341a0f16 <tk_get_tid+0x16>
341a0f14:	2300      	movs	r3, #0
}
341a0f16:	4618      	mov	r0, r3
341a0f18:	46bd      	mov	sp, r7
341a0f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0f1e:	4770      	bx	lr
341a0f20:	341c4998 	.word	0x341c4998

341a0f24 <QueInit>:
{
341a0f24:	b480      	push	{r7}
341a0f26:	b083      	sub	sp, #12
341a0f28:	af00      	add	r7, sp, #0
341a0f2a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a0f2c:	687b      	ldr	r3, [r7, #4]
341a0f2e:	687a      	ldr	r2, [r7, #4]
341a0f30:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a0f32:	687b      	ldr	r3, [r7, #4]
341a0f34:	687a      	ldr	r2, [r7, #4]
341a0f36:	605a      	str	r2, [r3, #4]
}
341a0f38:	bf00      	nop
341a0f3a:	370c      	adds	r7, #12
341a0f3c:	46bd      	mov	sp, r7
341a0f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0f42:	4770      	bx	lr

341a0f44 <knl_isTaskIndependent>:
{
341a0f44:	b480      	push	{r7}
341a0f46:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
341a0f48:	4b05      	ldr	r3, [pc, #20]	@ (341a0f60 <knl_isTaskIndependent+0x1c>)
341a0f4a:	681b      	ldr	r3, [r3, #0]
341a0f4c:	2b00      	cmp	r3, #0
341a0f4e:	bfcc      	ite	gt
341a0f50:	2301      	movgt	r3, #1
341a0f52:	2300      	movle	r3, #0
341a0f54:	b2db      	uxtb	r3, r3
}
341a0f56:	4618      	mov	r0, r3
341a0f58:	46bd      	mov	sp, r7
341a0f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0f5e:	4770      	bx	lr
341a0f60:	341c2920 	.word	0x341c2920

341a0f64 <knl_task_alive>:
{
341a0f64:	b480      	push	{r7}
341a0f66:	b083      	sub	sp, #12
341a0f68:	af00      	add	r7, sp, #0
341a0f6a:	4603      	mov	r3, r0
341a0f6c:	71fb      	strb	r3, [r7, #7]
	return ( (state & (TS_READY|TS_WAIT|TS_SUSPEND)) != 0 );
341a0f6e:	79fb      	ldrb	r3, [r7, #7]
341a0f70:	f003 0307 	and.w	r3, r3, #7
341a0f74:	2b00      	cmp	r3, #0
341a0f76:	bf14      	ite	ne
341a0f78:	2301      	movne	r3, #1
341a0f7a:	2300      	moveq	r3, #0
341a0f7c:	b2db      	uxtb	r3, r3
}
341a0f7e:	4618      	mov	r0, r3
341a0f80:	370c      	adds	r7, #12
341a0f82:	46bd      	mov	sp, r7
341a0f84:	f85d 7b04 	ldr.w	r7, [sp], #4
341a0f88:	4770      	bx	lr
	...

341a0f8c <tk_slp_tsk>:
#ifdef USE_FUNC_TK_SLP_TSK
/*
 * Move its own task state to wait state
 */
SYSCALL ER tk_slp_tsk( TMO tmout )
{
341a0f8c:	b580      	push	{r7, lr}
341a0f8e:	b084      	sub	sp, #16
341a0f90:	af00      	add	r7, sp, #0
341a0f92:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
341a0f94:	2300      	movs	r3, #0
341a0f96:	60bb      	str	r3, [r7, #8]

	CHECK_TMOUT(tmout);
341a0f98:	687b      	ldr	r3, [r7, #4]
341a0f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
341a0f9e:	da02      	bge.n	341a0fa6 <tk_slp_tsk+0x1a>
341a0fa0:	f06f 0310 	mvn.w	r3, #16
341a0fa4:	e051      	b.n	341a104a <tk_slp_tsk+0xbe>
	CHECK_DISPATCH();
341a0fa6:	4b2b      	ldr	r3, [pc, #172]	@ (341a1054 <tk_slp_tsk+0xc8>)
341a0fa8:	681b      	ldr	r3, [r3, #0]
341a0faa:	2b00      	cmp	r3, #0
341a0fac:	d10d      	bne.n	341a0fca <tk_slp_tsk+0x3e>
341a0fae:	f7ff ffc9 	bl	341a0f44 <knl_isTaskIndependent>
341a0fb2:	4603      	mov	r3, r0
341a0fb4:	2b00      	cmp	r3, #0
341a0fb6:	d108      	bne.n	341a0fca <tk_slp_tsk+0x3e>
341a0fb8:	4b27      	ldr	r3, [pc, #156]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a0fba:	681b      	ldr	r3, [r3, #0]
341a0fbc:	2b00      	cmp	r3, #0
341a0fbe:	d004      	beq.n	341a0fca <tk_slp_tsk+0x3e>
341a0fc0:	f001 fd56 	bl	341a2a70 <get_basepri>
341a0fc4:	4603      	mov	r3, r0
341a0fc6:	2b00      	cmp	r3, #0
341a0fc8:	d002      	beq.n	341a0fd0 <tk_slp_tsk+0x44>
341a0fca:	f06f 0318 	mvn.w	r3, #24
341a0fce:	e03c      	b.n	341a104a <tk_slp_tsk+0xbe>

	BEGIN_CRITICAL_SECTION;
341a0fd0:	f001 fd5b 	bl	341a2a8a <disint>
341a0fd4:	60f8      	str	r0, [r7, #12]

	if ( knl_ctxtsk->wupcnt > 0 ) {
341a0fd6:	4b20      	ldr	r3, [pc, #128]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a0fd8:	681b      	ldr	r3, [r3, #0]
341a0fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341a0fdc:	2b00      	cmp	r3, #0
341a0fde:	dd05      	ble.n	341a0fec <tk_slp_tsk+0x60>
		knl_ctxtsk->wupcnt--;
341a0fe0:	4b1d      	ldr	r3, [pc, #116]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a0fe2:	681b      	ldr	r3, [r3, #0]
341a0fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
341a0fe6:	3a01      	subs	r2, #1
341a0fe8:	635a      	str	r2, [r3, #52]	@ 0x34
341a0fea:	e01b      	b.n	341a1024 <tk_slp_tsk+0x98>
	} else {
		ercd = E_TMOUT;
341a0fec:	f06f 0331 	mvn.w	r3, #49	@ 0x31
341a0ff0:	60bb      	str	r3, [r7, #8]
		if ( tmout != TMO_POL ) {
341a0ff2:	687b      	ldr	r3, [r7, #4]
341a0ff4:	2b00      	cmp	r3, #0
341a0ff6:	d015      	beq.n	341a1024 <tk_slp_tsk+0x98>
			knl_ctxtsk->wspec = &knl_wspec_slp;
341a0ff8:	4b17      	ldr	r3, [pc, #92]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a0ffa:	681b      	ldr	r3, [r3, #0]
341a0ffc:	4a17      	ldr	r2, [pc, #92]	@ (341a105c <tk_slp_tsk+0xd0>)
341a0ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
			knl_ctxtsk->wid = 0;
341a1000:	4b15      	ldr	r3, [pc, #84]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a1002:	681b      	ldr	r3, [r3, #0]
341a1004:	2200      	movs	r2, #0
341a1006:	631a      	str	r2, [r3, #48]	@ 0x30
			knl_ctxtsk->wercd = &ercd;
341a1008:	4b13      	ldr	r3, [pc, #76]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a100a:	681b      	ldr	r3, [r3, #0]
341a100c:	f107 0208 	add.w	r2, r7, #8
341a1010:	63da      	str	r2, [r3, #60]	@ 0x3c
			knl_make_wait(tmout, TA_NULL);
341a1012:	2100      	movs	r1, #0
341a1014:	6878      	ldr	r0, [r7, #4]
341a1016:	f000 fc75 	bl	341a1904 <knl_make_wait>
			QueInit(&knl_ctxtsk->tskque);
341a101a:	4b0f      	ldr	r3, [pc, #60]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a101c:	681b      	ldr	r3, [r3, #0]
341a101e:	4618      	mov	r0, r3
341a1020:	f7ff ff80 	bl	341a0f24 <QueInit>
		}
	}

	END_CRITICAL_SECTION;
341a1024:	68fb      	ldr	r3, [r7, #12]
341a1026:	2b00      	cmp	r3, #0
341a1028:	d10b      	bne.n	341a1042 <tk_slp_tsk+0xb6>
341a102a:	4b0b      	ldr	r3, [pc, #44]	@ (341a1058 <tk_slp_tsk+0xcc>)
341a102c:	681a      	ldr	r2, [r3, #0]
341a102e:	4b0c      	ldr	r3, [pc, #48]	@ (341a1060 <tk_slp_tsk+0xd4>)
341a1030:	681b      	ldr	r3, [r3, #0]
341a1032:	429a      	cmp	r2, r3
341a1034:	d005      	beq.n	341a1042 <tk_slp_tsk+0xb6>
341a1036:	4b07      	ldr	r3, [pc, #28]	@ (341a1054 <tk_slp_tsk+0xc8>)
341a1038:	681b      	ldr	r3, [r3, #0]
341a103a:	2b00      	cmp	r3, #0
341a103c:	d101      	bne.n	341a1042 <tk_slp_tsk+0xb6>
341a103e:	f001 facb 	bl	341a25d8 <knl_dispatch>
341a1042:	68f8      	ldr	r0, [r7, #12]
341a1044:	f001 fd05 	bl	341a2a52 <set_basepri>

	return ercd;
341a1048:	68bb      	ldr	r3, [r7, #8]
}
341a104a:	4618      	mov	r0, r3
341a104c:	3710      	adds	r7, #16
341a104e:	46bd      	mov	sp, r7
341a1050:	bd80      	pop	{r7, pc}
341a1052:	bf00      	nop
341a1054:	341c4994 	.word	0x341c4994
341a1058:	341c4998 	.word	0x341c4998
341a105c:	341a65e4 	.word	0x341a65e4
341a1060:	341c499c 	.word	0x341c499c

341a1064 <tk_wup_tsk>:
#ifdef USE_FUNC_TK_WUP_TSK
/*
 * Wakeup task
 */
SYSCALL ER tk_wup_tsk( ID tskid )
{
341a1064:	b580      	push	{r7, lr}
341a1066:	b086      	sub	sp, #24
341a1068:	af00      	add	r7, sp, #0
341a106a:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
341a106c:	2300      	movs	r3, #0
341a106e:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
341a1070:	f7ff ff68 	bl	341a0f44 <knl_isTaskIndependent>
341a1074:	4603      	mov	r3, r0
341a1076:	2b00      	cmp	r3, #0
341a1078:	d109      	bne.n	341a108e <tk_wup_tsk+0x2a>
341a107a:	4b3c      	ldr	r3, [pc, #240]	@ (341a116c <tk_wup_tsk+0x108>)
341a107c:	681b      	ldr	r3, [r3, #0]
341a107e:	2b00      	cmp	r3, #0
341a1080:	d005      	beq.n	341a108e <tk_wup_tsk+0x2a>
341a1082:	687b      	ldr	r3, [r7, #4]
341a1084:	2b00      	cmp	r3, #0
341a1086:	d102      	bne.n	341a108e <tk_wup_tsk+0x2a>
341a1088:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a108c:	e06a      	b.n	341a1164 <tk_wup_tsk+0x100>
341a108e:	687b      	ldr	r3, [r7, #4]
341a1090:	2b00      	cmp	r3, #0
341a1092:	dd02      	ble.n	341a109a <tk_wup_tsk+0x36>
341a1094:	687b      	ldr	r3, [r7, #4]
341a1096:	2b20      	cmp	r3, #32
341a1098:	dd02      	ble.n	341a10a0 <tk_wup_tsk+0x3c>
341a109a:	f06f 0311 	mvn.w	r3, #17
341a109e:	e061      	b.n	341a1164 <tk_wup_tsk+0x100>
	CHECK_NONSELF(tskid);
341a10a0:	f7ff ff50 	bl	341a0f44 <knl_isTaskIndependent>
341a10a4:	4603      	mov	r3, r0
341a10a6:	2b00      	cmp	r3, #0
341a10a8:	d10c      	bne.n	341a10c4 <tk_wup_tsk+0x60>
341a10aa:	4b30      	ldr	r3, [pc, #192]	@ (341a116c <tk_wup_tsk+0x108>)
341a10ac:	681b      	ldr	r3, [r3, #0]
341a10ae:	2b00      	cmp	r3, #0
341a10b0:	d008      	beq.n	341a10c4 <tk_wup_tsk+0x60>
341a10b2:	4b2e      	ldr	r3, [pc, #184]	@ (341a116c <tk_wup_tsk+0x108>)
341a10b4:	681b      	ldr	r3, [r3, #0]
341a10b6:	689b      	ldr	r3, [r3, #8]
341a10b8:	687a      	ldr	r2, [r7, #4]
341a10ba:	429a      	cmp	r2, r3
341a10bc:	d102      	bne.n	341a10c4 <tk_wup_tsk+0x60>
341a10be:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a10c2:	e04f      	b.n	341a1164 <tk_wup_tsk+0x100>

	tcb = get_tcb(tskid);
341a10c4:	687b      	ldr	r3, [r7, #4]
341a10c6:	3b01      	subs	r3, #1
341a10c8:	2268      	movs	r2, #104	@ 0x68
341a10ca:	fb02 f303 	mul.w	r3, r2, r3
341a10ce:	4a28      	ldr	r2, [pc, #160]	@ (341a1170 <tk_wup_tsk+0x10c>)
341a10d0:	4413      	add	r3, r2
341a10d2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
341a10d4:	f001 fcd9 	bl	341a2a8a <disint>
341a10d8:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
341a10da:	693b      	ldr	r3, [r7, #16]
341a10dc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a10e0:	72fb      	strb	r3, [r7, #11]
	if ( !knl_task_alive(state) ) {
341a10e2:	7afb      	ldrb	r3, [r7, #11]
341a10e4:	4618      	mov	r0, r3
341a10e6:	f7ff ff3d 	bl	341a0f64 <knl_task_alive>
341a10ea:	4603      	mov	r3, r0
341a10ec:	2b00      	cmp	r3, #0
341a10ee:	d109      	bne.n	341a1104 <tk_wup_tsk+0xa0>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
341a10f0:	7afb      	ldrb	r3, [r7, #11]
341a10f2:	2b00      	cmp	r3, #0
341a10f4:	d102      	bne.n	341a10fc <tk_wup_tsk+0x98>
341a10f6:	f06f 0329 	mvn.w	r3, #41	@ 0x29
341a10fa:	e001      	b.n	341a1100 <tk_wup_tsk+0x9c>
341a10fc:	f06f 0328 	mvn.w	r3, #40	@ 0x28
341a1100:	617b      	str	r3, [r7, #20]
341a1102:	e01c      	b.n	341a113e <tk_wup_tsk+0xda>

	} else if ( (state & TS_WAIT) != 0 && tcb->wspec == &knl_wspec_slp ) {
341a1104:	7afb      	ldrb	r3, [r7, #11]
341a1106:	f003 0302 	and.w	r3, r3, #2
341a110a:	2b00      	cmp	r3, #0
341a110c:	d008      	beq.n	341a1120 <tk_wup_tsk+0xbc>
341a110e:	693b      	ldr	r3, [r7, #16]
341a1110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a1112:	4a18      	ldr	r2, [pc, #96]	@ (341a1174 <tk_wup_tsk+0x110>)
341a1114:	4293      	cmp	r3, r2
341a1116:	d103      	bne.n	341a1120 <tk_wup_tsk+0xbc>
		knl_wait_release_ok(tcb);
341a1118:	6938      	ldr	r0, [r7, #16]
341a111a:	f000 fbca 	bl	341a18b2 <knl_wait_release_ok>
341a111e:	e00e      	b.n	341a113e <tk_wup_tsk+0xda>

	} else if ( tcb->wupcnt == INT_MAX ) {
341a1120:	693b      	ldr	r3, [r7, #16]
341a1122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341a1124:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
341a1128:	4293      	cmp	r3, r2
341a112a:	d103      	bne.n	341a1134 <tk_wup_tsk+0xd0>
		ercd = E_QOVR;
341a112c:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
341a1130:	617b      	str	r3, [r7, #20]
341a1132:	e004      	b.n	341a113e <tk_wup_tsk+0xda>
	} else {
		++tcb->wupcnt;
341a1134:	693b      	ldr	r3, [r7, #16]
341a1136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341a1138:	1c5a      	adds	r2, r3, #1
341a113a:	693b      	ldr	r3, [r7, #16]
341a113c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	END_CRITICAL_SECTION;
341a113e:	68fb      	ldr	r3, [r7, #12]
341a1140:	2b00      	cmp	r3, #0
341a1142:	d10b      	bne.n	341a115c <tk_wup_tsk+0xf8>
341a1144:	4b09      	ldr	r3, [pc, #36]	@ (341a116c <tk_wup_tsk+0x108>)
341a1146:	681a      	ldr	r2, [r3, #0]
341a1148:	4b0b      	ldr	r3, [pc, #44]	@ (341a1178 <tk_wup_tsk+0x114>)
341a114a:	681b      	ldr	r3, [r3, #0]
341a114c:	429a      	cmp	r2, r3
341a114e:	d005      	beq.n	341a115c <tk_wup_tsk+0xf8>
341a1150:	4b0a      	ldr	r3, [pc, #40]	@ (341a117c <tk_wup_tsk+0x118>)
341a1152:	681b      	ldr	r3, [r3, #0]
341a1154:	2b00      	cmp	r3, #0
341a1156:	d101      	bne.n	341a115c <tk_wup_tsk+0xf8>
341a1158:	f001 fa3e 	bl	341a25d8 <knl_dispatch>
341a115c:	68f8      	ldr	r0, [r7, #12]
341a115e:	f001 fc78 	bl	341a2a52 <set_basepri>

	return ercd;
341a1162:	697b      	ldr	r3, [r7, #20]
}
341a1164:	4618      	mov	r0, r3
341a1166:	3718      	adds	r7, #24
341a1168:	46bd      	mov	sp, r7
341a116a:	bd80      	pop	{r7, pc}
341a116c:	341c4998 	.word	0x341c4998
341a1170:	341c4ab0 	.word	0x341c4ab0
341a1174:	341a65e4 	.word	0x341a65e4
341a1178:	341c499c 	.word	0x341c499c
341a117c:	341c4994 	.word	0x341c4994

341a1180 <tk_dly_tsk>:

/*
 * Task delay
 */
SYSCALL ER tk_dly_tsk( RELTIM dlytim )
{
341a1180:	b580      	push	{r7, lr}
341a1182:	b084      	sub	sp, #16
341a1184:	af00      	add	r7, sp, #0
341a1186:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
341a1188:	2300      	movs	r3, #0
341a118a:	60bb      	str	r3, [r7, #8]

	CHECK_RELTIM(dlytim);
341a118c:	687b      	ldr	r3, [r7, #4]
341a118e:	2b00      	cmp	r3, #0
341a1190:	da02      	bge.n	341a1198 <tk_dly_tsk+0x18>
341a1192:	f06f 0310 	mvn.w	r3, #16
341a1196:	e043      	b.n	341a1220 <tk_dly_tsk+0xa0>

	CHECK_DISPATCH();
341a1198:	4b23      	ldr	r3, [pc, #140]	@ (341a1228 <tk_dly_tsk+0xa8>)
341a119a:	681b      	ldr	r3, [r3, #0]
341a119c:	2b00      	cmp	r3, #0
341a119e:	d10d      	bne.n	341a11bc <tk_dly_tsk+0x3c>
341a11a0:	f7ff fed0 	bl	341a0f44 <knl_isTaskIndependent>
341a11a4:	4603      	mov	r3, r0
341a11a6:	2b00      	cmp	r3, #0
341a11a8:	d108      	bne.n	341a11bc <tk_dly_tsk+0x3c>
341a11aa:	4b20      	ldr	r3, [pc, #128]	@ (341a122c <tk_dly_tsk+0xac>)
341a11ac:	681b      	ldr	r3, [r3, #0]
341a11ae:	2b00      	cmp	r3, #0
341a11b0:	d004      	beq.n	341a11bc <tk_dly_tsk+0x3c>
341a11b2:	f001 fc5d 	bl	341a2a70 <get_basepri>
341a11b6:	4603      	mov	r3, r0
341a11b8:	2b00      	cmp	r3, #0
341a11ba:	d002      	beq.n	341a11c2 <tk_dly_tsk+0x42>
341a11bc:	f06f 0318 	mvn.w	r3, #24
341a11c0:	e02e      	b.n	341a1220 <tk_dly_tsk+0xa0>

	if ( dlytim > 0 ) {
341a11c2:	687b      	ldr	r3, [r7, #4]
341a11c4:	2b00      	cmp	r3, #0
341a11c6:	d02a      	beq.n	341a121e <tk_dly_tsk+0x9e>
		BEGIN_CRITICAL_SECTION;
341a11c8:	f001 fc5f 	bl	341a2a8a <disint>
341a11cc:	60f8      	str	r0, [r7, #12]
		knl_ctxtsk->wspec = &knl_wspec_dly;
341a11ce:	4b17      	ldr	r3, [pc, #92]	@ (341a122c <tk_dly_tsk+0xac>)
341a11d0:	681b      	ldr	r3, [r3, #0]
341a11d2:	4a17      	ldr	r2, [pc, #92]	@ (341a1230 <tk_dly_tsk+0xb0>)
341a11d4:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wid = 0;
341a11d6:	4b15      	ldr	r3, [pc, #84]	@ (341a122c <tk_dly_tsk+0xac>)
341a11d8:	681b      	ldr	r3, [r3, #0]
341a11da:	2200      	movs	r2, #0
341a11dc:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_ctxtsk->wercd = &ercd;
341a11de:	4b13      	ldr	r3, [pc, #76]	@ (341a122c <tk_dly_tsk+0xac>)
341a11e0:	681b      	ldr	r3, [r3, #0]
341a11e2:	f107 0208 	add.w	r2, r7, #8
341a11e6:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_make_wait_reltim(dlytim, TA_NULL);
341a11e8:	2100      	movs	r1, #0
341a11ea:	6878      	ldr	r0, [r7, #4]
341a11ec:	f000 fbbc 	bl	341a1968 <knl_make_wait_reltim>
		QueInit(&knl_ctxtsk->tskque);
341a11f0:	4b0e      	ldr	r3, [pc, #56]	@ (341a122c <tk_dly_tsk+0xac>)
341a11f2:	681b      	ldr	r3, [r3, #0]
341a11f4:	4618      	mov	r0, r3
341a11f6:	f7ff fe95 	bl	341a0f24 <QueInit>
		END_CRITICAL_SECTION;
341a11fa:	68fb      	ldr	r3, [r7, #12]
341a11fc:	2b00      	cmp	r3, #0
341a11fe:	d10b      	bne.n	341a1218 <tk_dly_tsk+0x98>
341a1200:	4b0a      	ldr	r3, [pc, #40]	@ (341a122c <tk_dly_tsk+0xac>)
341a1202:	681a      	ldr	r2, [r3, #0]
341a1204:	4b0b      	ldr	r3, [pc, #44]	@ (341a1234 <tk_dly_tsk+0xb4>)
341a1206:	681b      	ldr	r3, [r3, #0]
341a1208:	429a      	cmp	r2, r3
341a120a:	d005      	beq.n	341a1218 <tk_dly_tsk+0x98>
341a120c:	4b06      	ldr	r3, [pc, #24]	@ (341a1228 <tk_dly_tsk+0xa8>)
341a120e:	681b      	ldr	r3, [r3, #0]
341a1210:	2b00      	cmp	r3, #0
341a1212:	d101      	bne.n	341a1218 <tk_dly_tsk+0x98>
341a1214:	f001 f9e0 	bl	341a25d8 <knl_dispatch>
341a1218:	68f8      	ldr	r0, [r7, #12]
341a121a:	f001 fc1a 	bl	341a2a52 <set_basepri>
	}

	return ercd;
341a121e:	68bb      	ldr	r3, [r7, #8]
}
341a1220:	4618      	mov	r0, r3
341a1222:	3710      	adds	r7, #16
341a1224:	46bd      	mov	sp, r7
341a1226:	bd80      	pop	{r7, pc}
341a1228:	341c4994 	.word	0x341c4994
341a122c:	341c4998 	.word	0x341c4998
341a1230:	341a65f0 	.word	0x341a65f0
341a1234:	341c499c 	.word	0x341c499c

341a1238 <QueInit>:
{
341a1238:	b480      	push	{r7}
341a123a:	b083      	sub	sp, #12
341a123c:	af00      	add	r7, sp, #0
341a123e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a1240:	687b      	ldr	r3, [r7, #4]
341a1242:	687a      	ldr	r2, [r7, #4]
341a1244:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a1246:	687b      	ldr	r3, [r7, #4]
341a1248:	687a      	ldr	r2, [r7, #4]
341a124a:	605a      	str	r2, [r3, #4]
}
341a124c:	bf00      	nop
341a124e:	370c      	adds	r7, #12
341a1250:	46bd      	mov	sp, r7
341a1252:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1256:	4770      	bx	lr

341a1258 <QueInsert>:
{
341a1258:	b480      	push	{r7}
341a125a:	b083      	sub	sp, #12
341a125c:	af00      	add	r7, sp, #0
341a125e:	6078      	str	r0, [r7, #4]
341a1260:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a1262:	683b      	ldr	r3, [r7, #0]
341a1264:	685a      	ldr	r2, [r3, #4]
341a1266:	687b      	ldr	r3, [r7, #4]
341a1268:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a126a:	687b      	ldr	r3, [r7, #4]
341a126c:	683a      	ldr	r2, [r7, #0]
341a126e:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a1270:	683b      	ldr	r3, [r7, #0]
341a1272:	685b      	ldr	r3, [r3, #4]
341a1274:	687a      	ldr	r2, [r7, #4]
341a1276:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a1278:	683b      	ldr	r3, [r7, #0]
341a127a:	687a      	ldr	r2, [r7, #4]
341a127c:	605a      	str	r2, [r3, #4]
}
341a127e:	bf00      	nop
341a1280:	370c      	adds	r7, #12
341a1282:	46bd      	mov	sp, r7
341a1284:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1288:	4770      	bx	lr
	...

341a128c <knl_cyclichandler_initialize>:

/*
 * Initialization of cyclic handler control block
 */
EXPORT ER knl_cyclichandler_initialize( void )
{
341a128c:	b580      	push	{r7, lr}
341a128e:	b082      	sub	sp, #8
341a1290:	af00      	add	r7, sp, #0
	if ( NUM_CYCID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_cyccb);
341a1292:	480d      	ldr	r0, [pc, #52]	@ (341a12c8 <knl_cyclichandler_initialize+0x3c>)
341a1294:	f7ff ffd0 	bl	341a1238 <QueInit>
	end = knl_cyccb_table + NUM_CYCID;
341a1298:	4b0c      	ldr	r3, [pc, #48]	@ (341a12cc <knl_cyclichandler_initialize+0x40>)
341a129a:	603b      	str	r3, [r7, #0]
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
341a129c:	4b0c      	ldr	r3, [pc, #48]	@ (341a12d0 <knl_cyclichandler_initialize+0x44>)
341a129e:	607b      	str	r3, [r7, #4]
341a12a0:	e009      	b.n	341a12b6 <knl_cyclichandler_initialize+0x2a>
		cyccb->cychdr = NULL; /* Unregistered handler */
341a12a2:	687b      	ldr	r3, [r7, #4]
341a12a4:	2200      	movs	r2, #0
341a12a6:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
341a12a8:	4907      	ldr	r1, [pc, #28]	@ (341a12c8 <knl_cyclichandler_initialize+0x3c>)
341a12aa:	6878      	ldr	r0, [r7, #4]
341a12ac:	f7ff ffd4 	bl	341a1258 <QueInsert>
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
341a12b0:	687b      	ldr	r3, [r7, #4]
341a12b2:	3328      	adds	r3, #40	@ 0x28
341a12b4:	607b      	str	r3, [r7, #4]
341a12b6:	687a      	ldr	r2, [r7, #4]
341a12b8:	683b      	ldr	r3, [r7, #0]
341a12ba:	429a      	cmp	r2, r3
341a12bc:	d3f1      	bcc.n	341a12a2 <knl_cyclichandler_initialize+0x16>
	}

	return E_OK;
341a12be:	2300      	movs	r3, #0
}
341a12c0:	4618      	mov	r0, r3
341a12c2:	3708      	adds	r7, #8
341a12c4:	46bd      	mov	sp, r7
341a12c6:	bd80      	pop	{r7, pc}
341a12c8:	341c5858 	.word	0x341c5858
341a12cc:	341c5858 	.word	0x341c5858
341a12d0:	341c57b8 	.word	0x341c57b8

341a12d4 <knl_alarmhandler_initialize>:

/*
 * Initialization of alarm handler control block 
 */
EXPORT ER knl_alarmhandler_initialize( void )
{
341a12d4:	b580      	push	{r7, lr}
341a12d6:	b082      	sub	sp, #8
341a12d8:	af00      	add	r7, sp, #0
	if ( NUM_ALMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_almcb);
341a12da:	480d      	ldr	r0, [pc, #52]	@ (341a1310 <knl_alarmhandler_initialize+0x3c>)
341a12dc:	f7ff ffac 	bl	341a1238 <QueInit>
	end = knl_almcb_table + NUM_ALMID;
341a12e0:	4b0c      	ldr	r3, [pc, #48]	@ (341a1314 <knl_alarmhandler_initialize+0x40>)
341a12e2:	603b      	str	r3, [r7, #0]
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
341a12e4:	4b0c      	ldr	r3, [pc, #48]	@ (341a1318 <knl_alarmhandler_initialize+0x44>)
341a12e6:	607b      	str	r3, [r7, #4]
341a12e8:	e009      	b.n	341a12fe <knl_alarmhandler_initialize+0x2a>
		almcb->almhdr = NULL; /* Unregistered handler */
341a12ea:	687b      	ldr	r3, [r7, #4]
341a12ec:	2200      	movs	r2, #0
341a12ee:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)almcb, &knl_free_almcb);
341a12f0:	4907      	ldr	r1, [pc, #28]	@ (341a1310 <knl_alarmhandler_initialize+0x3c>)
341a12f2:	6878      	ldr	r0, [r7, #4]
341a12f4:	f7ff ffb0 	bl	341a1258 <QueInsert>
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
341a12f8:	687b      	ldr	r3, [r7, #4]
341a12fa:	3324      	adds	r3, #36	@ 0x24
341a12fc:	607b      	str	r3, [r7, #4]
341a12fe:	687a      	ldr	r2, [r7, #4]
341a1300:	683b      	ldr	r3, [r7, #0]
341a1302:	429a      	cmp	r2, r3
341a1304:	d3f1      	bcc.n	341a12ea <knl_alarmhandler_initialize+0x16>
	}

	return E_OK;
341a1306:	2300      	movs	r3, #0
}
341a1308:	4618      	mov	r0, r3
341a130a:	3708      	adds	r7, #8
341a130c:	46bd      	mov	sp, r7
341a130e:	bd80      	pop	{r7, pc}
341a1310:	341c5980 	.word	0x341c5980
341a1314:	341c5980 	.word	0x341c5980
341a1318:	341c5860 	.word	0x341c5860

341a131c <out_w>:
Inline void out_d( UW port, UD data )
{
	*(_UD*)port = data;
}
Inline void out_w( UW port, UW data )
{
341a131c:	b480      	push	{r7}
341a131e:	b083      	sub	sp, #12
341a1320:	af00      	add	r7, sp, #0
341a1322:	6078      	str	r0, [r7, #4]
341a1324:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
341a1326:	687b      	ldr	r3, [r7, #4]
341a1328:	683a      	ldr	r2, [r7, #0]
341a132a:	601a      	str	r2, [r3, #0]
}
341a132c:	bf00      	nop
341a132e:	370c      	adds	r7, #12
341a1330:	46bd      	mov	sp, r7
341a1332:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1336:	4770      	bx	lr

341a1338 <in_w>:
Inline UD in_d( UW port )
{
	return *(_UD*)port;
}
Inline UW in_w( UW port )
{
341a1338:	b480      	push	{r7}
341a133a:	b083      	sub	sp, #12
341a133c:	af00      	add	r7, sp, #0
341a133e:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
341a1340:	687b      	ldr	r3, [r7, #4]
341a1342:	681b      	ldr	r3, [r3, #0]
}
341a1344:	4618      	mov	r0, r3
341a1346:	370c      	adds	r7, #12
341a1348:	46bd      	mov	sp, r7
341a134a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a134e:	4770      	bx	lr

341a1350 <QueInit>:
{
341a1350:	b480      	push	{r7}
341a1352:	b083      	sub	sp, #12
341a1354:	af00      	add	r7, sp, #0
341a1356:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
341a1358:	687b      	ldr	r3, [r7, #4]
341a135a:	687a      	ldr	r2, [r7, #4]
341a135c:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
341a135e:	687b      	ldr	r3, [r7, #4]
341a1360:	687a      	ldr	r2, [r7, #4]
341a1362:	605a      	str	r2, [r3, #4]
}
341a1364:	bf00      	nop
341a1366:	370c      	adds	r7, #12
341a1368:	46bd      	mov	sp, r7
341a136a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a136e:	4770      	bx	lr

341a1370 <isQueEmpty>:
{
341a1370:	b480      	push	{r7}
341a1372:	b083      	sub	sp, #12
341a1374:	af00      	add	r7, sp, #0
341a1376:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
341a1378:	687b      	ldr	r3, [r7, #4]
341a137a:	681b      	ldr	r3, [r3, #0]
341a137c:	687a      	ldr	r2, [r7, #4]
341a137e:	429a      	cmp	r2, r3
341a1380:	bf0c      	ite	eq
341a1382:	2301      	moveq	r3, #1
341a1384:	2300      	movne	r3, #0
341a1386:	b2db      	uxtb	r3, r3
}
341a1388:	4618      	mov	r0, r3
341a138a:	370c      	adds	r7, #12
341a138c:	46bd      	mov	sp, r7
341a138e:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1392:	4770      	bx	lr

341a1394 <QueInsert>:
{
341a1394:	b480      	push	{r7}
341a1396:	b083      	sub	sp, #12
341a1398:	af00      	add	r7, sp, #0
341a139a:	6078      	str	r0, [r7, #4]
341a139c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a139e:	683b      	ldr	r3, [r7, #0]
341a13a0:	685a      	ldr	r2, [r3, #4]
341a13a2:	687b      	ldr	r3, [r7, #4]
341a13a4:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a13a6:	687b      	ldr	r3, [r7, #4]
341a13a8:	683a      	ldr	r2, [r7, #0]
341a13aa:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a13ac:	683b      	ldr	r3, [r7, #0]
341a13ae:	685b      	ldr	r3, [r3, #4]
341a13b0:	687a      	ldr	r2, [r7, #4]
341a13b2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a13b4:	683b      	ldr	r3, [r7, #0]
341a13b6:	687a      	ldr	r2, [r7, #4]
341a13b8:	605a      	str	r2, [r3, #4]
}
341a13ba:	bf00      	nop
341a13bc:	370c      	adds	r7, #12
341a13be:	46bd      	mov	sp, r7
341a13c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341a13c4:	4770      	bx	lr

341a13c6 <QueRemove>:
{
341a13c6:	b480      	push	{r7}
341a13c8:	b083      	sub	sp, #12
341a13ca:	af00      	add	r7, sp, #0
341a13cc:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
341a13ce:	687b      	ldr	r3, [r7, #4]
341a13d0:	681b      	ldr	r3, [r3, #0]
341a13d2:	687a      	ldr	r2, [r7, #4]
341a13d4:	429a      	cmp	r2, r3
341a13d6:	d009      	beq.n	341a13ec <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
341a13d8:	687b      	ldr	r3, [r7, #4]
341a13da:	685b      	ldr	r3, [r3, #4]
341a13dc:	687a      	ldr	r2, [r7, #4]
341a13de:	6812      	ldr	r2, [r2, #0]
341a13e0:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
341a13e2:	687b      	ldr	r3, [r7, #4]
341a13e4:	681b      	ldr	r3, [r3, #0]
341a13e6:	687a      	ldr	r2, [r7, #4]
341a13e8:	6852      	ldr	r2, [r2, #4]
341a13ea:	605a      	str	r2, [r3, #4]
}
341a13ec:	bf00      	nop
341a13ee:	370c      	adds	r7, #12
341a13f0:	46bd      	mov	sp, r7
341a13f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341a13f6:	4770      	bx	lr

341a13f8 <knl_abstim_reached>:
{
341a13f8:	b480      	push	{r7}
341a13fa:	b083      	sub	sp, #12
341a13fc:	af00      	add	r7, sp, #0
341a13fe:	6078      	str	r0, [r7, #4]
341a1400:	6039      	str	r1, [r7, #0]
	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
341a1402:	687a      	ldr	r2, [r7, #4]
341a1404:	683b      	ldr	r3, [r7, #0]
341a1406:	1ad3      	subs	r3, r2, r3
341a1408:	43db      	mvns	r3, r3
341a140a:	0fdb      	lsrs	r3, r3, #31
341a140c:	b2db      	uxtb	r3, r3
}
341a140e:	4618      	mov	r0, r3
341a1410:	370c      	adds	r7, #12
341a1412:	46bd      	mov	sp, r7
341a1414:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1418:	4770      	bx	lr
	...

341a141c <knl_start_hw_timer>:
/*
 * Timer start processing
 *	Initialize the timer and start the periodical timer interrupt.
 */
Inline void knl_start_hw_timer( void )
{
341a141c:	b580      	push	{r7, lr}
341a141e:	b082      	sub	sp, #8
341a1420:	af00      	add	r7, sp, #0
	UINT	n, imask;

	DI(imask);
341a1422:	f001 fb32 	bl	341a2a8a <disint>
341a1426:	6078      	str	r0, [r7, #4]

	/* Set System timer CLK source to Core, Systick exception enable */
	out_w(SYST_CSR, 0x00000006);
341a1428:	2106      	movs	r1, #6
341a142a:	4811      	ldr	r0, [pc, #68]	@ (341a1470 <knl_start_hw_timer+0x54>)
341a142c:	f7ff ff76 	bl	341a131c <out_w>

	/* Set counter: TMCLK(MHz) */
	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);
341a1430:	4b10      	ldr	r3, [pc, #64]	@ (341a1474 <knl_start_hw_timer+0x58>)
341a1432:	681b      	ldr	r3, [r3, #0]
341a1434:	4a10      	ldr	r2, [pc, #64]	@ (341a1478 <knl_start_hw_timer+0x5c>)
341a1436:	fba2 2303 	umull	r2, r3, r2, r3
341a143a:	099a      	lsrs	r2, r3, #6
341a143c:	4613      	mov	r3, r2
341a143e:	009b      	lsls	r3, r3, #2
341a1440:	4413      	add	r3, r2
341a1442:	005b      	lsls	r3, r3, #1
341a1444:	3b01      	subs	r3, #1
341a1446:	603b      	str	r3, [r7, #0]
	out_w(SYST_RVR, n);
341a1448:	6839      	ldr	r1, [r7, #0]
341a144a:	480c      	ldr	r0, [pc, #48]	@ (341a147c <knl_start_hw_timer+0x60>)
341a144c:	f7ff ff66 	bl	341a131c <out_w>
	out_w(SYST_CVR, 0);
341a1450:	2100      	movs	r1, #0
341a1452:	480b      	ldr	r0, [pc, #44]	@ (341a1480 <knl_start_hw_timer+0x64>)
341a1454:	f7ff ff62 	bl	341a131c <out_w>

	/* Start timer count */
	out_w(SYST_CSR, 0x00000007);
341a1458:	2107      	movs	r1, #7
341a145a:	4805      	ldr	r0, [pc, #20]	@ (341a1470 <knl_start_hw_timer+0x54>)
341a145c:	f7ff ff5e 	bl	341a131c <out_w>

	EI(imask);
341a1460:	6878      	ldr	r0, [r7, #4]
341a1462:	f001 faf6 	bl	341a2a52 <set_basepri>
}
341a1466:	bf00      	nop
341a1468:	3708      	adds	r7, #8
341a146a:	46bd      	mov	sp, r7
341a146c:	bd80      	pop	{r7, pc}
341a146e:	bf00      	nop
341a1470:	e000e010 	.word	0xe000e010
341a1474:	341c3564 	.word	0x341c3564
341a1478:	10624dd3 	.word	0x10624dd3
341a147c:	e000e014 	.word	0xe000e014
341a1480:	e000e018 	.word	0xe000e018

341a1484 <knl_clear_hw_timer_interrupt>:
 *	'end_of_hw_timer_interrupt()' is called at the end of the timer
 *	interrupt handler.
 *	Use either or both according to hardware.
 */
Inline void knl_clear_hw_timer_interrupt( void )
{
341a1484:	b580      	push	{r7, lr}
341a1486:	af00      	add	r7, sp, #0
	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */
341a1488:	4804      	ldr	r0, [pc, #16]	@ (341a149c <knl_clear_hw_timer_interrupt+0x18>)
341a148a:	f7ff ff55 	bl	341a1338 <in_w>
	out_w(SCB_ICSR, ICSR_PENDSTCLR);
341a148e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
341a1492:	4803      	ldr	r0, [pc, #12]	@ (341a14a0 <knl_clear_hw_timer_interrupt+0x1c>)
341a1494:	f7ff ff42 	bl	341a131c <out_w>
}
341a1498:	bf00      	nop
341a149a:	bd80      	pop	{r7, pc}
341a149c:	e000e010 	.word	0xe000e010
341a14a0:	e000ed04 	.word	0xe000ed04

341a14a4 <knl_end_of_hw_timer_interrupt>:

Inline void knl_end_of_hw_timer_interrupt( void )
{
341a14a4:	b480      	push	{r7}
341a14a6:	af00      	add	r7, sp, #0
	/* No processing */
}
341a14a8:	bf00      	nop
341a14aa:	46bd      	mov	sp, r7
341a14ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341a14b0:	4770      	bx	lr
	...

341a14b4 <knl_terminate_hw_timer>:
 * Timer stop processing
 *	Stop the timer operation.
 *	Called when system stops.
 */
Inline void knl_terminate_hw_timer( void )
{
341a14b4:	b580      	push	{r7, lr}
341a14b6:	af00      	add	r7, sp, #0
	/* Timer interrupt disable */
	out_w(SYST_CSR, 0x00000000);
341a14b8:	2100      	movs	r1, #0
341a14ba:	4802      	ldr	r0, [pc, #8]	@ (341a14c4 <knl_terminate_hw_timer+0x10>)
341a14bc:	f7ff ff2e 	bl	341a131c <out_w>
}
341a14c0:	bf00      	nop
341a14c2:	bd80      	pop	{r7, pc}
341a14c4:	e000e010 	.word	0xe000e010

341a14c8 <knl_timer_startup>:

/*
 * Start system timer
 */
EXPORT ER knl_timer_startup( void )
{
341a14c8:	b580      	push	{r7, lr}
341a14ca:	af00      	add	r7, sp, #0
	knl_current_time = knl_real_time_ofs = uitoll(0);
341a14cc:	490a      	ldr	r1, [pc, #40]	@ (341a14f8 <knl_timer_startup+0x30>)
341a14ce:	f04f 0200 	mov.w	r2, #0
341a14d2:	f04f 0300 	mov.w	r3, #0
341a14d6:	e9c1 2300 	strd	r2, r3, [r1]
341a14da:	4b07      	ldr	r3, [pc, #28]	@ (341a14f8 <knl_timer_startup+0x30>)
341a14dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341a14e0:	4906      	ldr	r1, [pc, #24]	@ (341a14fc <knl_timer_startup+0x34>)
341a14e2:	e9c1 2300 	strd	r2, r3, [r1]
	QueInit(&knl_timer_queue);
341a14e6:	4806      	ldr	r0, [pc, #24]	@ (341a1500 <knl_timer_startup+0x38>)
341a14e8:	f7ff ff32 	bl	341a1350 <QueInit>

	/* Start timer interrupt */
	knl_start_hw_timer();
341a14ec:	f7ff ff96 	bl	341a141c <knl_start_hw_timer>

	return E_OK;
341a14f0:	2300      	movs	r3, #0
}
341a14f2:	4618      	mov	r0, r3
341a14f4:	bd80      	pop	{r7, pc}
341a14f6:	bf00      	nop
341a14f8:	341c5990 	.word	0x341c5990
341a14fc:	341c5988 	.word	0x341c5988
341a1500:	341c5998 	.word	0x341c5998

341a1504 <knl_timer_shutdown>:
#if USE_SHUTDOWN
/*
 * Stop system timer
 */
EXPORT void knl_timer_shutdown( void )
{
341a1504:	b580      	push	{r7, lr}
341a1506:	af00      	add	r7, sp, #0
	knl_terminate_hw_timer();
341a1508:	f7ff ffd4 	bl	341a14b4 <knl_terminate_hw_timer>
}
341a150c:	bf00      	nop
341a150e:	bd80      	pop	{r7, pc}

341a1510 <knl_enqueue_tmeb>:

/*
 * Insert timer event to timer event queue
 */
LOCAL void knl_enqueue_tmeb( TMEB *event )
{
341a1510:	b580      	push	{r7, lr}
341a1512:	b084      	sub	sp, #16
341a1514:	af00      	add	r7, sp, #0
341a1516:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	ABSTIM	ofs = lltoul(knl_current_time) - ABSTIM_DIFF_MIN;
341a1518:	4b13      	ldr	r3, [pc, #76]	@ (341a1568 <knl_enqueue_tmeb+0x58>)
341a151a:	e9d3 2300 	ldrd	r2, r3, [r3]
341a151e:	4613      	mov	r3, r2
341a1520:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
341a1524:	3301      	adds	r3, #1
341a1526:	60bb      	str	r3, [r7, #8]

	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
341a1528:	4b10      	ldr	r3, [pc, #64]	@ (341a156c <knl_enqueue_tmeb+0x5c>)
341a152a:	681b      	ldr	r3, [r3, #0]
341a152c:	60fb      	str	r3, [r7, #12]
341a152e:	e00c      	b.n	341a154a <knl_enqueue_tmeb+0x3a>
		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
341a1530:	687b      	ldr	r3, [r7, #4]
341a1532:	689a      	ldr	r2, [r3, #8]
341a1534:	68bb      	ldr	r3, [r7, #8]
341a1536:	1ad2      	subs	r2, r2, r3
341a1538:	68fb      	ldr	r3, [r7, #12]
341a153a:	6899      	ldr	r1, [r3, #8]
341a153c:	68bb      	ldr	r3, [r7, #8]
341a153e:	1acb      	subs	r3, r1, r3
341a1540:	429a      	cmp	r2, r3
341a1542:	d307      	bcc.n	341a1554 <knl_enqueue_tmeb+0x44>
	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
341a1544:	68fb      	ldr	r3, [r7, #12]
341a1546:	681b      	ldr	r3, [r3, #0]
341a1548:	60fb      	str	r3, [r7, #12]
341a154a:	68fb      	ldr	r3, [r7, #12]
341a154c:	4a07      	ldr	r2, [pc, #28]	@ (341a156c <knl_enqueue_tmeb+0x5c>)
341a154e:	4293      	cmp	r3, r2
341a1550:	d1ee      	bne.n	341a1530 <knl_enqueue_tmeb+0x20>
341a1552:	e000      	b.n	341a1556 <knl_enqueue_tmeb+0x46>
			break;
341a1554:	bf00      	nop
		}
	}
	QueInsert(&event->queue, q);
341a1556:	687b      	ldr	r3, [r7, #4]
341a1558:	68f9      	ldr	r1, [r7, #12]
341a155a:	4618      	mov	r0, r3
341a155c:	f7ff ff1a 	bl	341a1394 <QueInsert>
}
341a1560:	bf00      	nop
341a1562:	3710      	adds	r7, #16
341a1564:	46bd      	mov	sp, r7
341a1566:	bd80      	pop	{r7, pc}
341a1568:	341c5988 	.word	0x341c5988
341a156c:	341c5998 	.word	0x341c5998

341a1570 <knl_timer_insert>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_timer_insert( TMEB *event, TMO tmout, CBACK callback, void *arg )
{
341a1570:	b580      	push	{r7, lr}
341a1572:	b084      	sub	sp, #16
341a1574:	af00      	add	r7, sp, #0
341a1576:	60f8      	str	r0, [r7, #12]
341a1578:	60b9      	str	r1, [r7, #8]
341a157a:	607a      	str	r2, [r7, #4]
341a157c:	603b      	str	r3, [r7, #0]
	event->callback = callback;
341a157e:	68fb      	ldr	r3, [r7, #12]
341a1580:	687a      	ldr	r2, [r7, #4]
341a1582:	60da      	str	r2, [r3, #12]
	event->arg = arg;
341a1584:	68fb      	ldr	r3, [r7, #12]
341a1586:	683a      	ldr	r2, [r7, #0]
341a1588:	611a      	str	r2, [r3, #16]

	if ( tmout == TMO_FEVR ) {
341a158a:	68bb      	ldr	r3, [r7, #8]
341a158c:	f1b3 3fff 	cmp.w	r3, #4294967295
341a1590:	d104      	bne.n	341a159c <knl_timer_insert+0x2c>
		QueInit(&event->queue);
341a1592:	68fb      	ldr	r3, [r7, #12]
341a1594:	4618      	mov	r0, r3
341a1596:	f7ff fedb 	bl	341a1350 <QueInit>
		/* To guarantee longer wait time specified by 'tmout',
		   add TIMER_PERIOD on wait time */
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
		knl_enqueue_tmeb(event);
	}
}
341a159a:	e00b      	b.n	341a15b4 <knl_timer_insert+0x44>
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
341a159c:	4b07      	ldr	r3, [pc, #28]	@ (341a15bc <knl_timer_insert+0x4c>)
341a159e:	e9d3 2300 	ldrd	r2, r3, [r3]
341a15a2:	68bb      	ldr	r3, [r7, #8]
341a15a4:	4413      	add	r3, r2
341a15a6:	f103 020a 	add.w	r2, r3, #10
341a15aa:	68fb      	ldr	r3, [r7, #12]
341a15ac:	609a      	str	r2, [r3, #8]
		knl_enqueue_tmeb(event);
341a15ae:	68f8      	ldr	r0, [r7, #12]
341a15b0:	f7ff ffae 	bl	341a1510 <knl_enqueue_tmeb>
}
341a15b4:	bf00      	nop
341a15b6:	3710      	adds	r7, #16
341a15b8:	46bd      	mov	sp, r7
341a15ba:	bd80      	pop	{r7, pc}
341a15bc:	341c5988 	.word	0x341c5988

341a15c0 <knl_timer_insert_reltim>:

EXPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg )
{
341a15c0:	b580      	push	{r7, lr}
341a15c2:	b084      	sub	sp, #16
341a15c4:	af00      	add	r7, sp, #0
341a15c6:	60f8      	str	r0, [r7, #12]
341a15c8:	60b9      	str	r1, [r7, #8]
341a15ca:	607a      	str	r2, [r7, #4]
341a15cc:	603b      	str	r3, [r7, #0]
	event->callback = callback;
341a15ce:	68fb      	ldr	r3, [r7, #12]
341a15d0:	687a      	ldr	r2, [r7, #4]
341a15d2:	60da      	str	r2, [r3, #12]
	event->arg = arg;
341a15d4:	68fb      	ldr	r3, [r7, #12]
341a15d6:	683a      	ldr	r2, [r7, #0]
341a15d8:	611a      	str	r2, [r3, #16]

	/* To guarantee longer wait time specified by 'tmout',
	   add TIMER_PERIOD on wait time */
	event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
341a15da:	4b08      	ldr	r3, [pc, #32]	@ (341a15fc <knl_timer_insert_reltim+0x3c>)
341a15dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341a15e0:	68bb      	ldr	r3, [r7, #8]
341a15e2:	4413      	add	r3, r2
341a15e4:	f103 020a 	add.w	r2, r3, #10
341a15e8:	68fb      	ldr	r3, [r7, #12]
341a15ea:	609a      	str	r2, [r3, #8]
	knl_enqueue_tmeb(event);
341a15ec:	68f8      	ldr	r0, [r7, #12]
341a15ee:	f7ff ff8f 	bl	341a1510 <knl_enqueue_tmeb>
}
341a15f2:	bf00      	nop
341a15f4:	3710      	adds	r7, #16
341a15f6:	46bd      	mov	sp, r7
341a15f8:	bd80      	pop	{r7, pc}
341a15fa:	bf00      	nop
341a15fc:	341c5988 	.word	0x341c5988

341a1600 <knl_timer_handler>:
 *	interval by hardware timer. Update the software clock and start the 
 *	timer event upon arriving at start time.
 */

EXPORT void knl_timer_handler( void )
{
341a1600:	b5b0      	push	{r4, r5, r7, lr}
341a1602:	b084      	sub	sp, #16
341a1604:	af00      	add	r7, sp, #0
	TMEB	*event;
	ABSTIM	cur;

	knl_clear_hw_timer_interrupt();		/* Clear timer interrupt */
341a1606:	f7ff ff3d 	bl	341a1484 <knl_clear_hw_timer_interrupt>

	BEGIN_CRITICAL_SECTION;
341a160a:	f001 fa3e 	bl	341a2a8a <disint>
341a160e:	60f8      	str	r0, [r7, #12]
	knl_current_time = ll_add(knl_current_time, uitoll(TIMER_PERIOD));
341a1610:	4b24      	ldr	r3, [pc, #144]	@ (341a16a4 <knl_timer_handler+0xa4>)
341a1612:	e9d3 2300 	ldrd	r2, r3, [r3]
341a1616:	f112 040a 	adds.w	r4, r2, #10
341a161a:	f143 0500 	adc.w	r5, r3, #0
341a161e:	4b21      	ldr	r3, [pc, #132]	@ (341a16a4 <knl_timer_handler+0xa4>)
341a1620:	e9c3 4500 	strd	r4, r5, [r3]
	cur = lltoul(knl_current_time);
341a1624:	4b1f      	ldr	r3, [pc, #124]	@ (341a16a4 <knl_timer_handler+0xa4>)
341a1626:	e9d3 2300 	ldrd	r2, r3, [r3]
341a162a:	4613      	mov	r3, r2
341a162c:	60bb      	str	r3, [r7, #8]
		}
	}
#endif

	/* Execute event that passed occurring time. */
	while ( !isQueEmpty(&knl_timer_queue) ) {
341a162e:	e019      	b.n	341a1664 <knl_timer_handler+0x64>
		event = (TMEB*)knl_timer_queue.next;
341a1630:	4b1d      	ldr	r3, [pc, #116]	@ (341a16a8 <knl_timer_handler+0xa8>)
341a1632:	681b      	ldr	r3, [r3, #0]
341a1634:	607b      	str	r3, [r7, #4]

		if ( !knl_abstim_reached(cur, event->time) ) {
341a1636:	687b      	ldr	r3, [r7, #4]
341a1638:	689b      	ldr	r3, [r3, #8]
341a163a:	4619      	mov	r1, r3
341a163c:	68b8      	ldr	r0, [r7, #8]
341a163e:	f7ff fedb 	bl	341a13f8 <knl_abstim_reached>
341a1642:	4603      	mov	r3, r0
341a1644:	2b00      	cmp	r3, #0
341a1646:	d014      	beq.n	341a1672 <knl_timer_handler+0x72>
			break;
		}

		QueRemove(&event->queue);
341a1648:	687b      	ldr	r3, [r7, #4]
341a164a:	4618      	mov	r0, r3
341a164c:	f7ff febb 	bl	341a13c6 <QueRemove>
		if ( event->callback != NULL ) {
341a1650:	687b      	ldr	r3, [r7, #4]
341a1652:	68db      	ldr	r3, [r3, #12]
341a1654:	2b00      	cmp	r3, #0
341a1656:	d005      	beq.n	341a1664 <knl_timer_handler+0x64>
			(*event->callback)(event->arg);
341a1658:	687b      	ldr	r3, [r7, #4]
341a165a:	68db      	ldr	r3, [r3, #12]
341a165c:	687a      	ldr	r2, [r7, #4]
341a165e:	6912      	ldr	r2, [r2, #16]
341a1660:	4610      	mov	r0, r2
341a1662:	4798      	blx	r3
	while ( !isQueEmpty(&knl_timer_queue) ) {
341a1664:	4810      	ldr	r0, [pc, #64]	@ (341a16a8 <knl_timer_handler+0xa8>)
341a1666:	f7ff fe83 	bl	341a1370 <isQueEmpty>
341a166a:	4603      	mov	r3, r0
341a166c:	2b00      	cmp	r3, #0
341a166e:	d0df      	beq.n	341a1630 <knl_timer_handler+0x30>
341a1670:	e000      	b.n	341a1674 <knl_timer_handler+0x74>
			break;
341a1672:	bf00      	nop
		}
	}

	END_CRITICAL_SECTION;
341a1674:	68fb      	ldr	r3, [r7, #12]
341a1676:	2b00      	cmp	r3, #0
341a1678:	d10b      	bne.n	341a1692 <knl_timer_handler+0x92>
341a167a:	4b0c      	ldr	r3, [pc, #48]	@ (341a16ac <knl_timer_handler+0xac>)
341a167c:	681a      	ldr	r2, [r3, #0]
341a167e:	4b0c      	ldr	r3, [pc, #48]	@ (341a16b0 <knl_timer_handler+0xb0>)
341a1680:	681b      	ldr	r3, [r3, #0]
341a1682:	429a      	cmp	r2, r3
341a1684:	d005      	beq.n	341a1692 <knl_timer_handler+0x92>
341a1686:	4b0b      	ldr	r3, [pc, #44]	@ (341a16b4 <knl_timer_handler+0xb4>)
341a1688:	681b      	ldr	r3, [r3, #0]
341a168a:	2b00      	cmp	r3, #0
341a168c:	d101      	bne.n	341a1692 <knl_timer_handler+0x92>
341a168e:	f000 ffa3 	bl	341a25d8 <knl_dispatch>
341a1692:	68f8      	ldr	r0, [r7, #12]
341a1694:	f001 f9dd 	bl	341a2a52 <set_basepri>

	knl_end_of_hw_timer_interrupt();		/* Clear timer interrupt */
341a1698:	f7ff ff04 	bl	341a14a4 <knl_end_of_hw_timer_interrupt>
}
341a169c:	bf00      	nop
341a169e:	3710      	adds	r7, #16
341a16a0:	46bd      	mov	sp, r7
341a16a2:	bdb0      	pop	{r4, r5, r7, pc}
341a16a4:	341c5988 	.word	0x341c5988
341a16a8:	341c5998 	.word	0x341c5998
341a16ac:	341c4998 	.word	0x341c4998
341a16b0:	341c499c 	.word	0x341c499c
341a16b4:	341c4994 	.word	0x341c4994

341a16b8 <knl_init_object>:

/*
 * Each kernel-object initialization
 */
EXPORT ER knl_init_object( void)
{	
341a16b8:	b580      	push	{r7, lr}
341a16ba:	b082      	sub	sp, #8
341a16bc:	af00      	add	r7, sp, #0
	ER	ercd;

	ercd = knl_task_initialize();
341a16be:	f7ff f909 	bl	341a08d4 <knl_task_initialize>
341a16c2:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a16c4:	687b      	ldr	r3, [r7, #4]
341a16c6:	2b00      	cmp	r3, #0
341a16c8:	da01      	bge.n	341a16ce <knl_init_object+0x16>
341a16ca:	687b      	ldr	r3, [r7, #4]
341a16cc:	e048      	b.n	341a1760 <knl_init_object+0xa8>

#if USE_SEMAPHORE
	ercd = knl_semaphore_initialize();
341a16ce:	f7fe fe0b 	bl	341a02e8 <knl_semaphore_initialize>
341a16d2:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a16d4:	687b      	ldr	r3, [r7, #4]
341a16d6:	2b00      	cmp	r3, #0
341a16d8:	da01      	bge.n	341a16de <knl_init_object+0x26>
341a16da:	687b      	ldr	r3, [r7, #4]
341a16dc:	e040      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_EVENTFLAG
	ercd = knl_eventflag_initialize();
341a16de:	f7fd fedb 	bl	3419f498 <knl_eventflag_initialize>
341a16e2:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a16e4:	687b      	ldr	r3, [r7, #4]
341a16e6:	2b00      	cmp	r3, #0
341a16e8:	da01      	bge.n	341a16ee <knl_init_object+0x36>
341a16ea:	687b      	ldr	r3, [r7, #4]
341a16ec:	e038      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_MAILBOX
	ercd = knl_mailbox_initialize();
341a16ee:	f7fe f983 	bl	3419f9f8 <knl_mailbox_initialize>
341a16f2:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a16f4:	687b      	ldr	r3, [r7, #4]
341a16f6:	2b00      	cmp	r3, #0
341a16f8:	da01      	bge.n	341a16fe <knl_init_object+0x46>
341a16fa:	687b      	ldr	r3, [r7, #4]
341a16fc:	e030      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_MESSAGEBUFFER
	ercd = knl_messagebuffer_initialize();
341a16fe:	f7fe fcef 	bl	341a00e0 <knl_messagebuffer_initialize>
341a1702:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1704:	687b      	ldr	r3, [r7, #4]
341a1706:	2b00      	cmp	r3, #0
341a1708:	da01      	bge.n	341a170e <knl_init_object+0x56>
341a170a:	687b      	ldr	r3, [r7, #4]
341a170c:	e028      	b.n	341a1760 <knl_init_object+0xa8>
#if USE_LEGACY_API && USE_RENDEZVOUS
	ercd = knl_rendezvous_initialize();
	if(ercd < E_OK) return ercd;
#endif
#if USE_MUTEX
	ercd = knl_mutex_initialize();
341a170e:	f7fe fd49 	bl	341a01a4 <knl_mutex_initialize>
341a1712:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1714:	687b      	ldr	r3, [r7, #4]
341a1716:	2b00      	cmp	r3, #0
341a1718:	da01      	bge.n	341a171e <knl_init_object+0x66>
341a171a:	687b      	ldr	r3, [r7, #4]
341a171c:	e020      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_MEMORYPOOL
	ercd = knl_memorypool_initialize();
341a171e:	f7fe fc8f 	bl	341a0040 <knl_memorypool_initialize>
341a1722:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1724:	687b      	ldr	r3, [r7, #4]
341a1726:	2b00      	cmp	r3, #0
341a1728:	da01      	bge.n	341a172e <knl_init_object+0x76>
341a172a:	687b      	ldr	r3, [r7, #4]
341a172c:	e018      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_FIX_MEMORYPOOL
	ercd = knl_fix_memorypool_initialize();
341a172e:	f7fe fc33 	bl	3419ff98 <knl_fix_memorypool_initialize>
341a1732:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1734:	687b      	ldr	r3, [r7, #4]
341a1736:	2b00      	cmp	r3, #0
341a1738:	da01      	bge.n	341a173e <knl_init_object+0x86>
341a173a:	687b      	ldr	r3, [r7, #4]
341a173c:	e010      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_CYCLICHANDLER
	ercd = knl_cyclichandler_initialize();
341a173e:	f7ff fda5 	bl	341a128c <knl_cyclichandler_initialize>
341a1742:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1744:	687b      	ldr	r3, [r7, #4]
341a1746:	2b00      	cmp	r3, #0
341a1748:	da01      	bge.n	341a174e <knl_init_object+0x96>
341a174a:	687b      	ldr	r3, [r7, #4]
341a174c:	e008      	b.n	341a1760 <knl_init_object+0xa8>
#endif
#if USE_ALARMHANDLER
	ercd = knl_alarmhandler_initialize();
341a174e:	f7ff fdc1 	bl	341a12d4 <knl_alarmhandler_initialize>
341a1752:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
341a1754:	687b      	ldr	r3, [r7, #4]
341a1756:	2b00      	cmp	r3, #0
341a1758:	da01      	bge.n	341a175e <knl_init_object+0xa6>
341a175a:	687b      	ldr	r3, [r7, #4]
341a175c:	e000      	b.n	341a1760 <knl_init_object+0xa8>
#endif

	return E_OK;
341a175e:	2300      	movs	r3, #0
}
341a1760:	4618      	mov	r0, r3
341a1762:	3708      	adds	r7, #8
341a1764:	46bd      	mov	sp, r7
341a1766:	bd80      	pop	{r7, pc}

341a1768 <isQueEmpty>:
{
341a1768:	b480      	push	{r7}
341a176a:	b083      	sub	sp, #12
341a176c:	af00      	add	r7, sp, #0
341a176e:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
341a1770:	687b      	ldr	r3, [r7, #4]
341a1772:	681b      	ldr	r3, [r3, #0]
341a1774:	687a      	ldr	r2, [r7, #4]
341a1776:	429a      	cmp	r2, r3
341a1778:	bf0c      	ite	eq
341a177a:	2301      	moveq	r3, #1
341a177c:	2300      	movne	r3, #0
341a177e:	b2db      	uxtb	r3, r3
}
341a1780:	4618      	mov	r0, r3
341a1782:	370c      	adds	r7, #12
341a1784:	46bd      	mov	sp, r7
341a1786:	f85d 7b04 	ldr.w	r7, [sp], #4
341a178a:	4770      	bx	lr

341a178c <QueInsert>:
{
341a178c:	b480      	push	{r7}
341a178e:	b083      	sub	sp, #12
341a1790:	af00      	add	r7, sp, #0
341a1792:	6078      	str	r0, [r7, #4]
341a1794:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
341a1796:	683b      	ldr	r3, [r7, #0]
341a1798:	685a      	ldr	r2, [r3, #4]
341a179a:	687b      	ldr	r3, [r7, #4]
341a179c:	605a      	str	r2, [r3, #4]
	entry->next = que;
341a179e:	687b      	ldr	r3, [r7, #4]
341a17a0:	683a      	ldr	r2, [r7, #0]
341a17a2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
341a17a4:	683b      	ldr	r3, [r7, #0]
341a17a6:	685b      	ldr	r3, [r3, #4]
341a17a8:	687a      	ldr	r2, [r7, #4]
341a17aa:	601a      	str	r2, [r3, #0]
	que->prev = entry;
341a17ac:	683b      	ldr	r3, [r7, #0]
341a17ae:	687a      	ldr	r2, [r7, #4]
341a17b0:	605a      	str	r2, [r3, #4]
}
341a17b2:	bf00      	nop
341a17b4:	370c      	adds	r7, #12
341a17b6:	46bd      	mov	sp, r7
341a17b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341a17bc:	4770      	bx	lr

341a17be <QueRemove>:
{
341a17be:	b480      	push	{r7}
341a17c0:	b083      	sub	sp, #12
341a17c2:	af00      	add	r7, sp, #0
341a17c4:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
341a17c6:	687b      	ldr	r3, [r7, #4]
341a17c8:	681b      	ldr	r3, [r3, #0]
341a17ca:	687a      	ldr	r2, [r7, #4]
341a17cc:	429a      	cmp	r2, r3
341a17ce:	d009      	beq.n	341a17e4 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
341a17d0:	687b      	ldr	r3, [r7, #4]
341a17d2:	685b      	ldr	r3, [r3, #4]
341a17d4:	687a      	ldr	r2, [r7, #4]
341a17d6:	6812      	ldr	r2, [r2, #0]
341a17d8:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
341a17da:	687b      	ldr	r3, [r7, #4]
341a17dc:	681b      	ldr	r3, [r3, #0]
341a17de:	687a      	ldr	r2, [r7, #4]
341a17e0:	6852      	ldr	r2, [r2, #4]
341a17e2:	605a      	str	r2, [r3, #4]
}
341a17e4:	bf00      	nop
341a17e6:	370c      	adds	r7, #12
341a17e8:	46bd      	mov	sp, r7
341a17ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341a17ee:	4770      	bx	lr

341a17f0 <knl_timer_delete>:
{
341a17f0:	b580      	push	{r7, lr}
341a17f2:	b082      	sub	sp, #8
341a17f4:	af00      	add	r7, sp, #0
341a17f6:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
341a17f8:	687b      	ldr	r3, [r7, #4]
341a17fa:	4618      	mov	r0, r3
341a17fc:	f7ff ffdf 	bl	341a17be <QueRemove>
}
341a1800:	bf00      	nop
341a1802:	3708      	adds	r7, #8
341a1804:	46bd      	mov	sp, r7
341a1806:	bd80      	pop	{r7, pc}

341a1808 <knl_queue_insert_tpri>:

/*
 * Connect the task to the prioritized wait queue.
 */
Inline void knl_queue_insert_tpri( TCB *tcb, QUEUE *queue )
{
341a1808:	b580      	push	{r7, lr}
341a180a:	b088      	sub	sp, #32
341a180c:	af00      	add	r7, sp, #0
341a180e:	6078      	str	r0, [r7, #4]
341a1810:	6039      	str	r1, [r7, #0]
	QUEUE *q;
	QUEUE *start, *end;
	UB val;
	W offset;

	start = end = queue;
341a1812:	683b      	ldr	r3, [r7, #0]
341a1814:	61bb      	str	r3, [r7, #24]
341a1816:	69bb      	ldr	r3, [r7, #24]
341a1818:	617b      	str	r3, [r7, #20]
	val = tcb->priority;
341a181a:	687b      	ldr	r3, [r7, #4]
341a181c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
341a1820:	74fb      	strb	r3, [r7, #19]
	offset = offsetof(TCB, priority);
341a1822:	2326      	movs	r3, #38	@ 0x26
341a1824:	60fb      	str	r3, [r7, #12]

	for ( q = start->next; q != end; q = q->next ) {
341a1826:	697b      	ldr	r3, [r7, #20]
341a1828:	681b      	ldr	r3, [r3, #0]
341a182a:	61fb      	str	r3, [r7, #28]
341a182c:	e009      	b.n	341a1842 <knl_queue_insert_tpri+0x3a>
		if ( *(UB*)((VB*)q + offset) > val ) {
341a182e:	68fb      	ldr	r3, [r7, #12]
341a1830:	69fa      	ldr	r2, [r7, #28]
341a1832:	4413      	add	r3, r2
341a1834:	781b      	ldrb	r3, [r3, #0]
341a1836:	7cfa      	ldrb	r2, [r7, #19]
341a1838:	429a      	cmp	r2, r3
341a183a:	d307      	bcc.n	341a184c <knl_queue_insert_tpri+0x44>
	for ( q = start->next; q != end; q = q->next ) {
341a183c:	69fb      	ldr	r3, [r7, #28]
341a183e:	681b      	ldr	r3, [r3, #0]
341a1840:	61fb      	str	r3, [r7, #28]
341a1842:	69fa      	ldr	r2, [r7, #28]
341a1844:	69bb      	ldr	r3, [r7, #24]
341a1846:	429a      	cmp	r2, r3
341a1848:	d1f1      	bne.n	341a182e <knl_queue_insert_tpri+0x26>
341a184a:	e000      	b.n	341a184e <knl_queue_insert_tpri+0x46>
			break;
341a184c:	bf00      	nop
		}
	}

	QueInsert(&tcb->tskque, q);
341a184e:	687b      	ldr	r3, [r7, #4]
341a1850:	69f9      	ldr	r1, [r7, #28]
341a1852:	4618      	mov	r0, r3
341a1854:	f7ff ff9a 	bl	341a178c <QueInsert>
}
341a1858:	bf00      	nop
341a185a:	3720      	adds	r7, #32
341a185c:	46bd      	mov	sp, r7
341a185e:	bd80      	pop	{r7, pc}

341a1860 <knl_make_non_wait>:
 * Update the task state to release wait. When it becomes ready state,
 * connect to the ready queue.
 * Call when the task is in the wait state (including double wait).
 */
Inline void knl_make_non_wait( TCB *tcb )
{
341a1860:	b580      	push	{r7, lr}
341a1862:	b082      	sub	sp, #8
341a1864:	af00      	add	r7, sp, #0
341a1866:	6078      	str	r0, [r7, #4]
	if ( tcb->state == TS_WAIT ) {
341a1868:	687b      	ldr	r3, [r7, #4]
341a186a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a186e:	2b02      	cmp	r3, #2
341a1870:	d103      	bne.n	341a187a <knl_make_non_wait+0x1a>
		knl_make_ready(tcb);
341a1872:	6878      	ldr	r0, [r7, #4]
341a1874:	f7ff f8ac 	bl	341a09d0 <knl_make_ready>
	} else {
		tcb->state = TS_SUSPEND;
	}
}
341a1878:	e003      	b.n	341a1882 <knl_make_non_wait+0x22>
		tcb->state = TS_SUSPEND;
341a187a:	687b      	ldr	r3, [r7, #4]
341a187c:	2204      	movs	r2, #4
341a187e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
341a1882:	bf00      	nop
341a1884:	3708      	adds	r7, #8
341a1886:	46bd      	mov	sp, r7
341a1888:	bd80      	pop	{r7, pc}

341a188a <knl_wait_release>:

/*
 * Release wait state of the task.
 */
Inline void knl_wait_release( TCB *tcb )
{
341a188a:	b580      	push	{r7, lr}
341a188c:	b082      	sub	sp, #8
341a188e:	af00      	add	r7, sp, #0
341a1890:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
341a1892:	687b      	ldr	r3, [r7, #4]
341a1894:	334c      	adds	r3, #76	@ 0x4c
341a1896:	4618      	mov	r0, r3
341a1898:	f7ff ffaa 	bl	341a17f0 <knl_timer_delete>
	QueRemove(&tcb->tskque);
341a189c:	687b      	ldr	r3, [r7, #4]
341a189e:	4618      	mov	r0, r3
341a18a0:	f7ff ff8d 	bl	341a17be <QueRemove>
	knl_make_non_wait(tcb);
341a18a4:	6878      	ldr	r0, [r7, #4]
341a18a6:	f7ff ffdb 	bl	341a1860 <knl_make_non_wait>
}
341a18aa:	bf00      	nop
341a18ac:	3708      	adds	r7, #8
341a18ae:	46bd      	mov	sp, r7
341a18b0:	bd80      	pop	{r7, pc}

341a18b2 <knl_wait_release_ok>:

#include "kernel.h"
#include "wait.h"

EXPORT void knl_wait_release_ok( TCB *tcb )
{
341a18b2:	b580      	push	{r7, lr}
341a18b4:	b082      	sub	sp, #8
341a18b6:	af00      	add	r7, sp, #0
341a18b8:	6078      	str	r0, [r7, #4]
	knl_wait_release(tcb);
341a18ba:	6878      	ldr	r0, [r7, #4]
341a18bc:	f7ff ffe5 	bl	341a188a <knl_wait_release>
	*tcb->wercd = E_OK;
341a18c0:	687b      	ldr	r3, [r7, #4]
341a18c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341a18c4:	2200      	movs	r2, #0
341a18c6:	601a      	str	r2, [r3, #0]
}
341a18c8:	bf00      	nop
341a18ca:	3708      	adds	r7, #8
341a18cc:	46bd      	mov	sp, r7
341a18ce:	bd80      	pop	{r7, pc}

341a18d0 <knl_wait_release_tmout>:
	}
	*tcb->wercd = ercd;
}

EXPORT void knl_wait_release_tmout( TCB *tcb )
{
341a18d0:	b580      	push	{r7, lr}
341a18d2:	b082      	sub	sp, #8
341a18d4:	af00      	add	r7, sp, #0
341a18d6:	6078      	str	r0, [r7, #4]
	QueRemove(&tcb->tskque);
341a18d8:	687b      	ldr	r3, [r7, #4]
341a18da:	4618      	mov	r0, r3
341a18dc:	f7ff ff6f 	bl	341a17be <QueRemove>
	knl_make_non_wait(tcb);
341a18e0:	6878      	ldr	r0, [r7, #4]
341a18e2:	f7ff ffbd 	bl	341a1860 <knl_make_non_wait>
	if ( tcb->wspec->rel_wai_hook != NULL ) {
341a18e6:	687b      	ldr	r3, [r7, #4]
341a18e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a18ea:	689b      	ldr	r3, [r3, #8]
341a18ec:	2b00      	cmp	r3, #0
341a18ee:	d004      	beq.n	341a18fa <knl_wait_release_tmout+0x2a>
		(*tcb->wspec->rel_wai_hook)(tcb);
341a18f0:	687b      	ldr	r3, [r7, #4]
341a18f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341a18f4:	689b      	ldr	r3, [r3, #8]
341a18f6:	6878      	ldr	r0, [r7, #4]
341a18f8:	4798      	blx	r3
	}
}
341a18fa:	bf00      	nop
341a18fc:	3708      	adds	r7, #8
341a18fe:	46bd      	mov	sp, r7
341a1900:	bd80      	pop	{r7, pc}
	...

341a1904 <knl_make_wait>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_make_wait( TMO tmout, ATR atr )
{
341a1904:	b580      	push	{r7, lr}
341a1906:	b082      	sub	sp, #8
341a1908:	af00      	add	r7, sp, #0
341a190a:	6078      	str	r0, [r7, #4]
341a190c:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
341a190e:	4b14      	ldr	r3, [pc, #80]	@ (341a1960 <knl_make_wait+0x5c>)
341a1910:	681b      	ldr	r3, [r3, #0]
341a1912:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a1916:	2b01      	cmp	r3, #1
341a1918:	d002      	beq.n	341a1920 <knl_make_wait+0x1c>
341a191a:	2b04      	cmp	r3, #4
341a191c:	d00b      	beq.n	341a1936 <knl_make_wait+0x32>
341a191e:	e010      	b.n	341a1942 <knl_make_wait+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
341a1920:	4b0f      	ldr	r3, [pc, #60]	@ (341a1960 <knl_make_wait+0x5c>)
341a1922:	681b      	ldr	r3, [r3, #0]
341a1924:	4618      	mov	r0, r3
341a1926:	f7ff f86d 	bl	341a0a04 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
341a192a:	4b0d      	ldr	r3, [pc, #52]	@ (341a1960 <knl_make_wait+0x5c>)
341a192c:	681b      	ldr	r3, [r3, #0]
341a192e:	2202      	movs	r2, #2
341a1930:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
341a1934:	e005      	b.n	341a1942 <knl_make_wait+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
341a1936:	4b0a      	ldr	r3, [pc, #40]	@ (341a1960 <knl_make_wait+0x5c>)
341a1938:	681b      	ldr	r3, [r3, #0]
341a193a:	2206      	movs	r2, #6
341a193c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
341a1940:	bf00      	nop
	}
	knl_timer_insert(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
341a1942:	4b07      	ldr	r3, [pc, #28]	@ (341a1960 <knl_make_wait+0x5c>)
341a1944:	681b      	ldr	r3, [r3, #0]
341a1946:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
341a194a:	4b05      	ldr	r3, [pc, #20]	@ (341a1960 <knl_make_wait+0x5c>)
341a194c:	681b      	ldr	r3, [r3, #0]
341a194e:	4a05      	ldr	r2, [pc, #20]	@ (341a1964 <knl_make_wait+0x60>)
341a1950:	6879      	ldr	r1, [r7, #4]
341a1952:	f7ff fe0d 	bl	341a1570 <knl_timer_insert>
}
341a1956:	bf00      	nop
341a1958:	3708      	adds	r7, #8
341a195a:	46bd      	mov	sp, r7
341a195c:	bd80      	pop	{r7, pc}
341a195e:	bf00      	nop
341a1960:	341c4998 	.word	0x341c4998
341a1964:	341a18d1 	.word	0x341a18d1

341a1968 <knl_make_wait_reltim>:

EXPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr )
{
341a1968:	b580      	push	{r7, lr}
341a196a:	b082      	sub	sp, #8
341a196c:	af00      	add	r7, sp, #0
341a196e:	6078      	str	r0, [r7, #4]
341a1970:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
341a1972:	4b14      	ldr	r3, [pc, #80]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a1974:	681b      	ldr	r3, [r3, #0]
341a1976:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
341a197a:	2b01      	cmp	r3, #1
341a197c:	d002      	beq.n	341a1984 <knl_make_wait_reltim+0x1c>
341a197e:	2b04      	cmp	r3, #4
341a1980:	d00b      	beq.n	341a199a <knl_make_wait_reltim+0x32>
341a1982:	e010      	b.n	341a19a6 <knl_make_wait_reltim+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
341a1984:	4b0f      	ldr	r3, [pc, #60]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a1986:	681b      	ldr	r3, [r3, #0]
341a1988:	4618      	mov	r0, r3
341a198a:	f7ff f83b 	bl	341a0a04 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
341a198e:	4b0d      	ldr	r3, [pc, #52]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a1990:	681b      	ldr	r3, [r3, #0]
341a1992:	2202      	movs	r2, #2
341a1994:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
341a1998:	e005      	b.n	341a19a6 <knl_make_wait_reltim+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
341a199a:	4b0a      	ldr	r3, [pc, #40]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a199c:	681b      	ldr	r3, [r3, #0]
341a199e:	2206      	movs	r2, #6
341a19a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
341a19a4:	bf00      	nop
	}
	knl_timer_insert_reltim(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
341a19a6:	4b07      	ldr	r3, [pc, #28]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a19a8:	681b      	ldr	r3, [r3, #0]
341a19aa:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
341a19ae:	4b05      	ldr	r3, [pc, #20]	@ (341a19c4 <knl_make_wait_reltim+0x5c>)
341a19b0:	681b      	ldr	r3, [r3, #0]
341a19b2:	4a05      	ldr	r2, [pc, #20]	@ (341a19c8 <knl_make_wait_reltim+0x60>)
341a19b4:	6879      	ldr	r1, [r7, #4]
341a19b6:	f7ff fe03 	bl	341a15c0 <knl_timer_insert_reltim>
}
341a19ba:	bf00      	nop
341a19bc:	3708      	adds	r7, #8
341a19be:	46bd      	mov	sp, r7
341a19c0:	bd80      	pop	{r7, pc}
341a19c2:	bf00      	nop
341a19c4:	341c4998 	.word	0x341c4998
341a19c8:	341a18d1 	.word	0x341a18d1

341a19cc <knl_wait_delete>:
/*
 * Release all tasks connected to the wait queue, and define it
 * as E_DLT error.
 */
EXPORT void knl_wait_delete( QUEUE *wait_queue )
{
341a19cc:	b580      	push	{r7, lr}
341a19ce:	b084      	sub	sp, #16
341a19d0:	af00      	add	r7, sp, #0
341a19d2:	6078      	str	r0, [r7, #4]
	TCB	*tcb;

	while ( !isQueEmpty(wait_queue) ) {
341a19d4:	e00a      	b.n	341a19ec <knl_wait_delete+0x20>
		tcb = (TCB*)wait_queue->next;
341a19d6:	687b      	ldr	r3, [r7, #4]
341a19d8:	681b      	ldr	r3, [r3, #0]
341a19da:	60fb      	str	r3, [r7, #12]
		knl_wait_release(tcb);
341a19dc:	68f8      	ldr	r0, [r7, #12]
341a19de:	f7ff ff54 	bl	341a188a <knl_wait_release>
		*tcb->wercd = E_DLT;
341a19e2:	68fb      	ldr	r3, [r7, #12]
341a19e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341a19e6:	f06f 0232 	mvn.w	r2, #50	@ 0x32
341a19ea:	601a      	str	r2, [r3, #0]
	while ( !isQueEmpty(wait_queue) ) {
341a19ec:	6878      	ldr	r0, [r7, #4]
341a19ee:	f7ff febb 	bl	341a1768 <isQueEmpty>
341a19f2:	4603      	mov	r3, r0
341a19f4:	2b00      	cmp	r3, #0
341a19f6:	d0ee      	beq.n	341a19d6 <knl_wait_delete+0xa>
	}
}
341a19f8:	bf00      	nop
341a19fa:	bf00      	nop
341a19fc:	3710      	adds	r7, #16
341a19fe:	46bd      	mov	sp, r7
341a1a00:	bd80      	pop	{r7, pc}
	...

341a1a04 <knl_gcb_make_wait>:
/*
 * Change the active task state to wait state and connect to the timer wait 
 * queue and the object wait queue. Also set 'wid' in 'knl_ctxtsk'.
 */
EXPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout )
{
341a1a04:	b580      	push	{r7, lr}
341a1a06:	b082      	sub	sp, #8
341a1a08:	af00      	add	r7, sp, #0
341a1a0a:	6078      	str	r0, [r7, #4]
341a1a0c:	6039      	str	r1, [r7, #0]
	*knl_ctxtsk->wercd = E_TMOUT;
341a1a0e:	4b17      	ldr	r3, [pc, #92]	@ (341a1a6c <knl_gcb_make_wait+0x68>)
341a1a10:	681b      	ldr	r3, [r3, #0]
341a1a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341a1a14:	f06f 0231 	mvn.w	r2, #49	@ 0x31
341a1a18:	601a      	str	r2, [r3, #0]
	if ( tmout != TMO_POL ) {
341a1a1a:	683b      	ldr	r3, [r7, #0]
341a1a1c:	2b00      	cmp	r3, #0
341a1a1e:	d020      	beq.n	341a1a62 <knl_gcb_make_wait+0x5e>
		knl_ctxtsk->wid = gcb->objid;
341a1a20:	4b12      	ldr	r3, [pc, #72]	@ (341a1a6c <knl_gcb_make_wait+0x68>)
341a1a22:	681b      	ldr	r3, [r3, #0]
341a1a24:	687a      	ldr	r2, [r7, #4]
341a1a26:	6892      	ldr	r2, [r2, #8]
341a1a28:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_make_wait(tmout, gcb->objatr);
341a1a2a:	687b      	ldr	r3, [r7, #4]
341a1a2c:	691b      	ldr	r3, [r3, #16]
341a1a2e:	4619      	mov	r1, r3
341a1a30:	6838      	ldr	r0, [r7, #0]
341a1a32:	f7ff ff67 	bl	341a1904 <knl_make_wait>
		if ( (gcb->objatr & TA_TPRI) != 0 ) {
341a1a36:	687b      	ldr	r3, [r7, #4]
341a1a38:	691b      	ldr	r3, [r3, #16]
341a1a3a:	f003 0301 	and.w	r3, r3, #1
341a1a3e:	2b00      	cmp	r3, #0
341a1a40:	d007      	beq.n	341a1a52 <knl_gcb_make_wait+0x4e>
			knl_queue_insert_tpri(knl_ctxtsk, &gcb->wait_queue);
341a1a42:	4b0a      	ldr	r3, [pc, #40]	@ (341a1a6c <knl_gcb_make_wait+0x68>)
341a1a44:	681b      	ldr	r3, [r3, #0]
341a1a46:	687a      	ldr	r2, [r7, #4]
341a1a48:	4611      	mov	r1, r2
341a1a4a:	4618      	mov	r0, r3
341a1a4c:	f7ff fedc 	bl	341a1808 <knl_queue_insert_tpri>
		} else {
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
		}
	}
}
341a1a50:	e007      	b.n	341a1a62 <knl_gcb_make_wait+0x5e>
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
341a1a52:	4b06      	ldr	r3, [pc, #24]	@ (341a1a6c <knl_gcb_make_wait+0x68>)
341a1a54:	681b      	ldr	r3, [r3, #0]
341a1a56:	461a      	mov	r2, r3
341a1a58:	687b      	ldr	r3, [r7, #4]
341a1a5a:	4619      	mov	r1, r3
341a1a5c:	4610      	mov	r0, r2
341a1a5e:	f7ff fe95 	bl	341a178c <QueInsert>
}
341a1a62:	bf00      	nop
341a1a64:	3708      	adds	r7, #8
341a1a66:	46bd      	mov	sp, r7
341a1a68:	bd80      	pop	{r7, pc}
341a1a6a:	bf00      	nop
341a1a6c:	341c4998 	.word	0x341c4998

341a1a70 <knl_gcb_change_priority>:
 * When the task priority changes, adjust the task position at the wait queue.
 * It is called only if the object attribute TA_TPRI is specified.
 *
 */
EXPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb )
{
341a1a70:	b580      	push	{r7, lr}
341a1a72:	b082      	sub	sp, #8
341a1a74:	af00      	add	r7, sp, #0
341a1a76:	6078      	str	r0, [r7, #4]
341a1a78:	6039      	str	r1, [r7, #0]
	QueRemove(&tcb->tskque);
341a1a7a:	683b      	ldr	r3, [r7, #0]
341a1a7c:	4618      	mov	r0, r3
341a1a7e:	f7ff fe9e 	bl	341a17be <QueRemove>
	knl_queue_insert_tpri(tcb, &gcb->wait_queue);
341a1a82:	687b      	ldr	r3, [r7, #4]
341a1a84:	4619      	mov	r1, r3
341a1a86:	6838      	ldr	r0, [r7, #0]
341a1a88:	f7ff febe 	bl	341a1808 <knl_queue_insert_tpri>
}
341a1a8c:	bf00      	nop
341a1a8e:	3708      	adds	r7, #8
341a1a90:	46bd      	mov	sp, r7
341a1a92:	bd80      	pop	{r7, pc}

341a1a94 <knl_gcb_top_of_wait_queue>:
 * Search the first task of wait queue include "tcb" with target.
 * (Not insert "tcb" into wait queue.)
 *
 */
EXPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb )
{
341a1a94:	b580      	push	{r7, lr}
341a1a96:	b084      	sub	sp, #16
341a1a98:	af00      	add	r7, sp, #0
341a1a9a:	6078      	str	r0, [r7, #4]
341a1a9c:	6039      	str	r1, [r7, #0]
	TCB	*q;

	if ( isQueEmpty(&gcb->wait_queue) ) {
341a1a9e:	687b      	ldr	r3, [r7, #4]
341a1aa0:	4618      	mov	r0, r3
341a1aa2:	f7ff fe61 	bl	341a1768 <isQueEmpty>
341a1aa6:	4603      	mov	r3, r0
341a1aa8:	2b00      	cmp	r3, #0
341a1aaa:	d001      	beq.n	341a1ab0 <knl_gcb_top_of_wait_queue+0x1c>
		return tcb;
341a1aac:	683b      	ldr	r3, [r7, #0]
341a1aae:	e015      	b.n	341a1adc <knl_gcb_top_of_wait_queue+0x48>
	}

	q = (TCB*)gcb->wait_queue.next;
341a1ab0:	687b      	ldr	r3, [r7, #4]
341a1ab2:	681b      	ldr	r3, [r3, #0]
341a1ab4:	60fb      	str	r3, [r7, #12]
	if ( (gcb->objatr & TA_TPRI) == 0 ) {
341a1ab6:	687b      	ldr	r3, [r7, #4]
341a1ab8:	691b      	ldr	r3, [r3, #16]
341a1aba:	f003 0301 	and.w	r3, r3, #1
341a1abe:	2b00      	cmp	r3, #0
341a1ac0:	d101      	bne.n	341a1ac6 <knl_gcb_top_of_wait_queue+0x32>
		return q;
341a1ac2:	68fb      	ldr	r3, [r7, #12]
341a1ac4:	e00a      	b.n	341a1adc <knl_gcb_top_of_wait_queue+0x48>
	}

	return ( tcb->priority < q->priority )? tcb: q;
341a1ac6:	683b      	ldr	r3, [r7, #0]
341a1ac8:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
341a1acc:	68fb      	ldr	r3, [r7, #12]
341a1ace:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
341a1ad2:	429a      	cmp	r2, r3
341a1ad4:	d201      	bcs.n	341a1ada <knl_gcb_top_of_wait_queue+0x46>
341a1ad6:	683b      	ldr	r3, [r7, #0]
341a1ad8:	e000      	b.n	341a1adc <knl_gcb_top_of_wait_queue+0x48>
341a1ada:	68fb      	ldr	r3, [r7, #12]
}
341a1adc:	4618      	mov	r0, r3
341a1ade:	3710      	adds	r7, #16
341a1ae0:	46bd      	mov	sp, r7
341a1ae2:	bd80      	pop	{r7, pc}

341a1ae4 <knl_memset>:
#include "kernel.h"

/*** binary operation ***/
/* memset : fill memory area */
void* knl_memset( void *s, int c, SZ n )
{
341a1ae4:	b4f0      	push	{r4, r5, r6, r7}
341a1ae6:	b084      	sub	sp, #16
341a1ae8:	af00      	add	r7, sp, #0
341a1aea:	60f8      	str	r0, [r7, #12]
341a1aec:	60b9      	str	r1, [r7, #8]
341a1aee:	607a      	str	r2, [r7, #4]
	register unsigned char *cp, cval;
	register unsigned long *lp, lval;

	cp = (unsigned char *)s;
341a1af0:	68fc      	ldr	r4, [r7, #12]
	cval = (unsigned char)c;
341a1af2:	68bb      	ldr	r3, [r7, #8]
341a1af4:	b2dd      	uxtb	r5, r3
	
	if (n < 8) {
341a1af6:	687b      	ldr	r3, [r7, #4]
341a1af8:	2b07      	cmp	r3, #7
341a1afa:	dc12      	bgt.n	341a1b22 <knl_memset+0x3e>
		while (n-- > 0) {
341a1afc:	e003      	b.n	341a1b06 <knl_memset+0x22>
			*cp++ = cval;
341a1afe:	4623      	mov	r3, r4
341a1b00:	1c5c      	adds	r4, r3, #1
341a1b02:	462a      	mov	r2, r5
341a1b04:	701a      	strb	r2, [r3, #0]
		while (n-- > 0) {
341a1b06:	687b      	ldr	r3, [r7, #4]
341a1b08:	1e5a      	subs	r2, r3, #1
341a1b0a:	607a      	str	r2, [r7, #4]
341a1b0c:	2b00      	cmp	r3, #0
341a1b0e:	dcf6      	bgt.n	341a1afe <knl_memset+0x1a>
		}
		return s;
341a1b10:	68fb      	ldr	r3, [r7, #12]
341a1b12:	e02e      	b.n	341a1b72 <knl_memset+0x8e>
	}

	while ((long)cp % 4) {
		--n;
341a1b14:	687b      	ldr	r3, [r7, #4]
341a1b16:	3b01      	subs	r3, #1
341a1b18:	607b      	str	r3, [r7, #4]
		*cp++ = cval;
341a1b1a:	4623      	mov	r3, r4
341a1b1c:	1c5c      	adds	r4, r3, #1
341a1b1e:	462a      	mov	r2, r5
341a1b20:	701a      	strb	r2, [r3, #0]
	while ((long)cp % 4) {
341a1b22:	4623      	mov	r3, r4
341a1b24:	f003 0303 	and.w	r3, r3, #3
341a1b28:	2b00      	cmp	r3, #0
341a1b2a:	d1f3      	bne.n	341a1b14 <knl_memset+0x30>
	}

	lp = (unsigned long *)cp;
341a1b2c:	4626      	mov	r6, r4
	lval = (unsigned long)cval |
341a1b2e:	462a      	mov	r2, r5
341a1b30:	4613      	mov	r3, r2
341a1b32:	021b      	lsls	r3, r3, #8
341a1b34:	441a      	add	r2, r3
		(unsigned long)cval << 8 |
		(unsigned long)cval << 16 |
341a1b36:	462b      	mov	r3, r5
341a1b38:	041b      	lsls	r3, r3, #16
		(unsigned long)cval << 8 |
341a1b3a:	431a      	orrs	r2, r3
		(unsigned long)cval << 24;
341a1b3c:	462b      	mov	r3, r5
341a1b3e:	061b      	lsls	r3, r3, #24
	lval = (unsigned long)cval |
341a1b40:	ea42 0403 	orr.w	r4, r2, r3

	while (n >= 4) {
341a1b44:	e005      	b.n	341a1b52 <knl_memset+0x6e>
		*lp++ = lval;
341a1b46:	4633      	mov	r3, r6
341a1b48:	1d1e      	adds	r6, r3, #4
341a1b4a:	601c      	str	r4, [r3, #0]
		n -= 4;
341a1b4c:	687b      	ldr	r3, [r7, #4]
341a1b4e:	3b04      	subs	r3, #4
341a1b50:	607b      	str	r3, [r7, #4]
	while (n >= 4) {
341a1b52:	687b      	ldr	r3, [r7, #4]
341a1b54:	2b03      	cmp	r3, #3
341a1b56:	dcf6      	bgt.n	341a1b46 <knl_memset+0x62>
	}

	cp = (unsigned char *)lp;
341a1b58:	4634      	mov	r4, r6
	while (n) {
341a1b5a:	e006      	b.n	341a1b6a <knl_memset+0x86>
		*cp++ = cval;
341a1b5c:	4623      	mov	r3, r4
341a1b5e:	1c5c      	adds	r4, r3, #1
341a1b60:	462a      	mov	r2, r5
341a1b62:	701a      	strb	r2, [r3, #0]
		--n;
341a1b64:	687b      	ldr	r3, [r7, #4]
341a1b66:	3b01      	subs	r3, #1
341a1b68:	607b      	str	r3, [r7, #4]
	while (n) {
341a1b6a:	687b      	ldr	r3, [r7, #4]
341a1b6c:	2b00      	cmp	r3, #0
341a1b6e:	d1f5      	bne.n	341a1b5c <knl_memset+0x78>
	}

	return s;
341a1b70:	68fb      	ldr	r3, [r7, #12]
}
341a1b72:	4618      	mov	r0, r3
341a1b74:	3710      	adds	r7, #16
341a1b76:	46bd      	mov	sp, r7
341a1b78:	bcf0      	pop	{r4, r5, r6, r7}
341a1b7a:	4770      	bx	lr

341a1b7c <INC>:
 *
 *	The above must be operated exclusively.
 */

Inline void INC( INT *val )
{
341a1b7c:	b580      	push	{r7, lr}
341a1b7e:	b084      	sub	sp, #16
341a1b80:	af00      	add	r7, sp, #0
341a1b82:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
341a1b84:	f000 ff81 	bl	341a2a8a <disint>
341a1b88:	60f8      	str	r0, [r7, #12]
	(*val)++;
341a1b8a:	687b      	ldr	r3, [r7, #4]
341a1b8c:	681b      	ldr	r3, [r3, #0]
341a1b8e:	1c5a      	adds	r2, r3, #1
341a1b90:	687b      	ldr	r3, [r7, #4]
341a1b92:	601a      	str	r2, [r3, #0]
	EI(imask);
341a1b94:	68f8      	ldr	r0, [r7, #12]
341a1b96:	f000 ff5c 	bl	341a2a52 <set_basepri>
}
341a1b9a:	bf00      	nop
341a1b9c:	3710      	adds	r7, #16
341a1b9e:	46bd      	mov	sp, r7
341a1ba0:	bd80      	pop	{r7, pc}

341a1ba2 <DEC>:

Inline void DEC( INT *val )
{
341a1ba2:	b580      	push	{r7, lr}
341a1ba4:	b084      	sub	sp, #16
341a1ba6:	af00      	add	r7, sp, #0
341a1ba8:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
341a1baa:	f000 ff6e 	bl	341a2a8a <disint>
341a1bae:	60f8      	str	r0, [r7, #12]
	(*val)--;
341a1bb0:	687b      	ldr	r3, [r7, #4]
341a1bb2:	681b      	ldr	r3, [r3, #0]
341a1bb4:	1e5a      	subs	r2, r3, #1
341a1bb6:	687b      	ldr	r3, [r7, #4]
341a1bb8:	601a      	str	r2, [r3, #0]
	EI(imask);
341a1bba:	68f8      	ldr	r0, [r7, #12]
341a1bbc:	f000 ff49 	bl	341a2a52 <set_basepri>
}
341a1bc0:	bf00      	nop
341a1bc2:	3710      	adds	r7, #16
341a1bc4:	46bd      	mov	sp, r7
341a1bc6:	bd80      	pop	{r7, pc}

341a1bc8 <BTS>:

Inline BOOL BTS( UINT *val, INT no )
{
341a1bc8:	b580      	push	{r7, lr}
341a1bca:	b086      	sub	sp, #24
341a1bcc:	af00      	add	r7, sp, #0
341a1bce:	6078      	str	r0, [r7, #4]
341a1bd0:	6039      	str	r1, [r7, #0]
	UINT	imask;
	UINT	b;
	UINT	bm = (UINT)(1 << no);
341a1bd2:	2201      	movs	r2, #1
341a1bd4:	683b      	ldr	r3, [r7, #0]
341a1bd6:	fa02 f303 	lsl.w	r3, r2, r3
341a1bda:	617b      	str	r3, [r7, #20]

	DI(imask);
341a1bdc:	f000 ff55 	bl	341a2a8a <disint>
341a1be0:	6138      	str	r0, [r7, #16]
	b = *val & bm;
341a1be2:	687b      	ldr	r3, [r7, #4]
341a1be4:	681b      	ldr	r3, [r3, #0]
341a1be6:	697a      	ldr	r2, [r7, #20]
341a1be8:	4013      	ands	r3, r2
341a1bea:	60fb      	str	r3, [r7, #12]
	*val |= bm;
341a1bec:	687b      	ldr	r3, [r7, #4]
341a1bee:	681a      	ldr	r2, [r3, #0]
341a1bf0:	697b      	ldr	r3, [r7, #20]
341a1bf2:	431a      	orrs	r2, r3
341a1bf4:	687b      	ldr	r3, [r7, #4]
341a1bf6:	601a      	str	r2, [r3, #0]
	EI(imask);
341a1bf8:	6938      	ldr	r0, [r7, #16]
341a1bfa:	f000 ff2a 	bl	341a2a52 <set_basepri>
	return (BOOL)b;
341a1bfe:	68fb      	ldr	r3, [r7, #12]
}
341a1c00:	4618      	mov	r0, r3
341a1c02:	3718      	adds	r7, #24
341a1c04:	46bd      	mov	sp, r7
341a1c06:	bd80      	pop	{r7, pc}

341a1c08 <BR>:

Inline void BR( UINT *val, INT no )
{
341a1c08:	b580      	push	{r7, lr}
341a1c0a:	b084      	sub	sp, #16
341a1c0c:	af00      	add	r7, sp, #0
341a1c0e:	6078      	str	r0, [r7, #4]
341a1c10:	6039      	str	r1, [r7, #0]
	UINT	imask;

	DI(imask);
341a1c12:	f000 ff3a 	bl	341a2a8a <disint>
341a1c16:	60f8      	str	r0, [r7, #12]
	*val &= ~(UINT)(1 << no);
341a1c18:	687b      	ldr	r3, [r7, #4]
341a1c1a:	681a      	ldr	r2, [r3, #0]
341a1c1c:	2101      	movs	r1, #1
341a1c1e:	683b      	ldr	r3, [r7, #0]
341a1c20:	fa01 f303 	lsl.w	r3, r1, r3
341a1c24:	43db      	mvns	r3, r3
341a1c26:	401a      	ands	r2, r3
341a1c28:	687b      	ldr	r3, [r7, #4]
341a1c2a:	601a      	str	r2, [r3, #0]
	EI(imask);
341a1c2c:	68f8      	ldr	r0, [r7, #12]
341a1c2e:	f000 ff10 	bl	341a2a52 <set_basepri>
}
341a1c32:	bf00      	nop
341a1c34:	3710      	adds	r7, #16
341a1c36:	46bd      	mov	sp, r7
341a1c38:	bd80      	pop	{r7, pc}

341a1c3a <MLockTmo>:
/*
 * Lock with wait time designation 
 *	no	lock number 0 - 31 
 */
EXPORT ER MLockTmo( FastMLock *lock, INT no, TMO tmo )
{
341a1c3a:	b580      	push	{r7, lr}
341a1c3c:	b08a      	sub	sp, #40	@ 0x28
341a1c3e:	af02      	add	r7, sp, #8
341a1c40:	60f8      	str	r0, [r7, #12]
341a1c42:	60b9      	str	r1, [r7, #8]
341a1c44:	607a      	str	r2, [r7, #4]
	UINT	ptn = (UINT)(1 << no);
341a1c46:	2201      	movs	r2, #1
341a1c48:	68bb      	ldr	r3, [r7, #8]
341a1c4a:	fa02 f303 	lsl.w	r3, r2, r3
341a1c4e:	61bb      	str	r3, [r7, #24]
	UINT	flg;
	ER	ercd;

	INC(&lock->wai);
341a1c50:	68fb      	ldr	r3, [r7, #12]
341a1c52:	3304      	adds	r3, #4
341a1c54:	4618      	mov	r0, r3
341a1c56:	f7ff ff91 	bl	341a1b7c <INC>
	for ( ;; ) {
		if ( !BTS(&lock->flg, no) ) {
341a1c5a:	68fb      	ldr	r3, [r7, #12]
341a1c5c:	68b9      	ldr	r1, [r7, #8]
341a1c5e:	4618      	mov	r0, r3
341a1c60:	f7ff ffb2 	bl	341a1bc8 <BTS>
341a1c64:	4603      	mov	r3, r0
341a1c66:	2b00      	cmp	r3, #0
341a1c68:	d102      	bne.n	341a1c70 <MLockTmo+0x36>
			ercd = E_OK;
341a1c6a:	2300      	movs	r3, #0
341a1c6c:	61fb      	str	r3, [r7, #28]
			break;
341a1c6e:	e010      	b.n	341a1c92 <MLockTmo+0x58>
		}

		ercd = tk_wai_flg(lock->id, ptn, TWF_ORW|TWF_BITCLR, &flg, tmo);
341a1c70:	68fb      	ldr	r3, [r7, #12]
341a1c72:	6898      	ldr	r0, [r3, #8]
341a1c74:	f107 0214 	add.w	r2, r7, #20
341a1c78:	687b      	ldr	r3, [r7, #4]
341a1c7a:	9300      	str	r3, [sp, #0]
341a1c7c:	4613      	mov	r3, r2
341a1c7e:	2221      	movs	r2, #33	@ 0x21
341a1c80:	69b9      	ldr	r1, [r7, #24]
341a1c82:	f7fd fd81 	bl	3419f788 <tk_wai_flg>
341a1c86:	61f8      	str	r0, [r7, #28]
		if ( ercd < E_OK ) {
341a1c88:	69fb      	ldr	r3, [r7, #28]
341a1c8a:	2b00      	cmp	r3, #0
341a1c8c:	db00      	blt.n	341a1c90 <MLockTmo+0x56>
		if ( !BTS(&lock->flg, no) ) {
341a1c8e:	e7e4      	b.n	341a1c5a <MLockTmo+0x20>
			break;
341a1c90:	bf00      	nop
		}
	}
	DEC(&lock->wai);
341a1c92:	68fb      	ldr	r3, [r7, #12]
341a1c94:	3304      	adds	r3, #4
341a1c96:	4618      	mov	r0, r3
341a1c98:	f7ff ff83 	bl	341a1ba2 <DEC>

	return ercd;
341a1c9c:	69fb      	ldr	r3, [r7, #28]
}
341a1c9e:	4618      	mov	r0, r3
341a1ca0:	3720      	adds	r7, #32
341a1ca2:	46bd      	mov	sp, r7
341a1ca4:	bd80      	pop	{r7, pc}

341a1ca6 <MLock>:
/*
 * Lock 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MLock( FastMLock *lock, INT no )
{
341a1ca6:	b580      	push	{r7, lr}
341a1ca8:	b082      	sub	sp, #8
341a1caa:	af00      	add	r7, sp, #0
341a1cac:	6078      	str	r0, [r7, #4]
341a1cae:	6039      	str	r1, [r7, #0]
	return MLockTmo(lock, no, TMO_FEVR);
341a1cb0:	f04f 32ff 	mov.w	r2, #4294967295
341a1cb4:	6839      	ldr	r1, [r7, #0]
341a1cb6:	6878      	ldr	r0, [r7, #4]
341a1cb8:	f7ff ffbf 	bl	341a1c3a <MLockTmo>
341a1cbc:	4603      	mov	r3, r0
}
341a1cbe:	4618      	mov	r0, r3
341a1cc0:	3708      	adds	r7, #8
341a1cc2:	46bd      	mov	sp, r7
341a1cc4:	bd80      	pop	{r7, pc}

341a1cc6 <MUnlock>:
/*
 * Lock release 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MUnlock( FastMLock *lock, INT no )
{
341a1cc6:	b580      	push	{r7, lr}
341a1cc8:	b084      	sub	sp, #16
341a1cca:	af00      	add	r7, sp, #0
341a1ccc:	6078      	str	r0, [r7, #4]
341a1cce:	6039      	str	r1, [r7, #0]
	UINT	ptn = (UINT)(1 << no);
341a1cd0:	2201      	movs	r2, #1
341a1cd2:	683b      	ldr	r3, [r7, #0]
341a1cd4:	fa02 f303 	lsl.w	r3, r2, r3
341a1cd8:	60fb      	str	r3, [r7, #12]
	ER	ercd;

	BR(&lock->flg, no);
341a1cda:	687b      	ldr	r3, [r7, #4]
341a1cdc:	6839      	ldr	r1, [r7, #0]
341a1cde:	4618      	mov	r0, r3
341a1ce0:	f7ff ff92 	bl	341a1c08 <BR>
	ercd = ( lock->wai == 0 )? E_OK: tk_set_flg(lock->id, ptn);
341a1ce4:	687b      	ldr	r3, [r7, #4]
341a1ce6:	685b      	ldr	r3, [r3, #4]
341a1ce8:	2b00      	cmp	r3, #0
341a1cea:	d007      	beq.n	341a1cfc <MUnlock+0x36>
341a1cec:	687b      	ldr	r3, [r7, #4]
341a1cee:	689b      	ldr	r3, [r3, #8]
341a1cf0:	68f9      	ldr	r1, [r7, #12]
341a1cf2:	4618      	mov	r0, r3
341a1cf4:	f7fd fca6 	bl	3419f644 <tk_set_flg>
341a1cf8:	4603      	mov	r3, r0
341a1cfa:	e000      	b.n	341a1cfe <MUnlock+0x38>
341a1cfc:	2300      	movs	r3, #0
341a1cfe:	60bb      	str	r3, [r7, #8]

	return ercd;
341a1d00:	68bb      	ldr	r3, [r7, #8]
}
341a1d02:	4618      	mov	r0, r3
341a1d04:	3710      	adds	r7, #16
341a1d06:	46bd      	mov	sp, r7
341a1d08:	bd80      	pop	{r7, pc}
	...

341a1d0c <CreateMLock>:

/*
 * Create multi-lock 
 */
EXPORT ER CreateMLock( FastMLock *lock, CONST UB *name )
{
341a1d0c:	b580      	push	{r7, lr}
341a1d0e:	b08a      	sub	sp, #40	@ 0x28
341a1d10:	af00      	add	r7, sp, #0
341a1d12:	6078      	str	r0, [r7, #4]
341a1d14:	6039      	str	r1, [r7, #0]
	T_CFLG	cflg;
	ER	ercd;

	cflg.flgatr  = TA_TPRI | TA_WMUL;
341a1d16:	2309      	movs	r3, #9
341a1d18:	613b      	str	r3, [r7, #16]
	cflg.iflgptn = 0;
341a1d1a:	2300      	movs	r3, #0
341a1d1c:	617b      	str	r3, [r7, #20]
	SetOBJNAME(cflg.exinf, "MLOC");
341a1d1e:	f107 030c 	add.w	r3, r7, #12
341a1d22:	627b      	str	r3, [r7, #36]	@ 0x24
341a1d24:	4b17      	ldr	r3, [pc, #92]	@ (341a1d84 <CreateMLock+0x78>)
341a1d26:	623b      	str	r3, [r7, #32]
341a1d28:	2300      	movs	r3, #0
341a1d2a:	61fb      	str	r3, [r7, #28]
341a1d2c:	e00a      	b.n	341a1d44 <CreateMLock+0x38>
341a1d2e:	6a3a      	ldr	r2, [r7, #32]
341a1d30:	1c53      	adds	r3, r2, #1
341a1d32:	623b      	str	r3, [r7, #32]
341a1d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341a1d36:	1c59      	adds	r1, r3, #1
341a1d38:	6279      	str	r1, [r7, #36]	@ 0x24
341a1d3a:	7812      	ldrb	r2, [r2, #0]
341a1d3c:	701a      	strb	r2, [r3, #0]
341a1d3e:	69fb      	ldr	r3, [r7, #28]
341a1d40:	3301      	adds	r3, #1
341a1d42:	61fb      	str	r3, [r7, #28]
341a1d44:	69fb      	ldr	r3, [r7, #28]
341a1d46:	2b03      	cmp	r3, #3
341a1d48:	ddf1      	ble.n	341a1d2e <CreateMLock+0x22>

	lock->id = ercd = tk_cre_flg(&cflg);
341a1d4a:	f107 030c 	add.w	r3, r7, #12
341a1d4e:	4618      	mov	r0, r3
341a1d50:	f7fd fbc8 	bl	3419f4e4 <tk_cre_flg>
341a1d54:	61b8      	str	r0, [r7, #24]
341a1d56:	687b      	ldr	r3, [r7, #4]
341a1d58:	69ba      	ldr	r2, [r7, #24]
341a1d5a:	609a      	str	r2, [r3, #8]
	if ( ercd < E_OK ) {
341a1d5c:	69bb      	ldr	r3, [r7, #24]
341a1d5e:	2b00      	cmp	r3, #0
341a1d60:	da01      	bge.n	341a1d66 <CreateMLock+0x5a>
		return ercd;
341a1d62:	69bb      	ldr	r3, [r7, #24]
341a1d64:	e009      	b.n	341a1d7a <CreateMLock+0x6e>
	}

	lock->wai = 0;
341a1d66:	687b      	ldr	r3, [r7, #4]
341a1d68:	2200      	movs	r2, #0
341a1d6a:	605a      	str	r2, [r3, #4]
	lock->flg = 0;
341a1d6c:	687b      	ldr	r3, [r7, #4]
341a1d6e:	2200      	movs	r2, #0
341a1d70:	601a      	str	r2, [r3, #0]
	lock->name = name;
341a1d72:	687b      	ldr	r3, [r7, #4]
341a1d74:	683a      	ldr	r2, [r7, #0]
341a1d76:	60da      	str	r2, [r3, #12]

	return E_OK;
341a1d78:	2300      	movs	r3, #0
}
341a1d7a:	4618      	mov	r0, r3
341a1d7c:	3728      	adds	r7, #40	@ 0x28
341a1d7e:	46bd      	mov	sp, r7
341a1d80:	bd80      	pop	{r7, pc}
341a1d82:	bf00      	nop
341a1d84:	341a5860 	.word	0x341a5860

341a1d88 <DeleteMLock>:

/*
 * Delete multi-lock 
 */
EXPORT ER DeleteMLock( FastMLock *lock )
{
341a1d88:	b580      	push	{r7, lr}
341a1d8a:	b084      	sub	sp, #16
341a1d8c:	af00      	add	r7, sp, #0
341a1d8e:	6078      	str	r0, [r7, #4]
	ER	ercd;

	if ( lock->id <= 0 ) {
341a1d90:	687b      	ldr	r3, [r7, #4]
341a1d92:	689b      	ldr	r3, [r3, #8]
341a1d94:	2b00      	cmp	r3, #0
341a1d96:	dc02      	bgt.n	341a1d9e <DeleteMLock+0x16>
		return E_PAR;
341a1d98:	f06f 0310 	mvn.w	r3, #16
341a1d9c:	e00e      	b.n	341a1dbc <DeleteMLock+0x34>
	}

	ercd = tk_del_flg(lock->id);
341a1d9e:	687b      	ldr	r3, [r7, #4]
341a1da0:	689b      	ldr	r3, [r3, #8]
341a1da2:	4618      	mov	r0, r3
341a1da4:	f7fd fbfe 	bl	3419f5a4 <tk_del_flg>
341a1da8:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
341a1daa:	68fb      	ldr	r3, [r7, #12]
341a1dac:	2b00      	cmp	r3, #0
341a1dae:	da01      	bge.n	341a1db4 <DeleteMLock+0x2c>
		return ercd;
341a1db0:	68fb      	ldr	r3, [r7, #12]
341a1db2:	e003      	b.n	341a1dbc <DeleteMLock+0x34>
	}

	lock->id = 0;
341a1db4:	687b      	ldr	r3, [r7, #4]
341a1db6:	2200      	movs	r2, #0
341a1db8:	609a      	str	r2, [r3, #8]

	return E_OK;
341a1dba:	2300      	movs	r3, #0
}
341a1dbc:	4618      	mov	r0, r3
341a1dbe:	3710      	adds	r7, #16
341a1dc0:	46bd      	mov	sp, r7
341a1dc2:	bd80      	pop	{r7, pc}

341a1dc4 <libtm_init>:
/*
 * libtm_init() - libtm Initialize
 * supported only on wait != 0 (polling not supported)
 */
EXPORT void libtm_init(void)
{
341a1dc4:	b580      	push	{r7, lr}
341a1dc6:	af00      	add	r7, sp, #0
	tm_com_init();
341a1dc8:	f001 f80c 	bl	341a2de4 <tm_com_init>
}
341a1dcc:	bf00      	nop
341a1dce:	bd80      	pop	{r7, pc}

341a1dd0 <tm_putchar>:
/*
 * tm_putchar()
 * Ctrl-C is not supported
 */
EXPORT INT tm_putchar( INT c )
{
341a1dd0:	b580      	push	{r7, lr}
341a1dd2:	b084      	sub	sp, #16
341a1dd4:	af00      	add	r7, sp, #0
341a1dd6:	6078      	str	r0, [r7, #4]
	static const char CR = CHR_CR;
	UB buf = (UB)c;
341a1dd8:	687b      	ldr	r3, [r7, #4]
341a1dda:	b2db      	uxtb	r3, r3
341a1ddc:	72fb      	strb	r3, [r7, #11]
	INT imask;

	DI(imask);
341a1dde:	f000 fe54 	bl	341a2a8a <disint>
341a1de2:	4603      	mov	r3, r0
341a1de4:	60fb      	str	r3, [r7, #12]
	if (buf == CHR_LF) {
341a1de6:	7afb      	ldrb	r3, [r7, #11]
341a1de8:	2b0a      	cmp	r3, #10
341a1dea:	d103      	bne.n	341a1df4 <tm_putchar+0x24>
		tm_snd_dat((const UB*)&CR, 1);
341a1dec:	2101      	movs	r1, #1
341a1dee:	4809      	ldr	r0, [pc, #36]	@ (341a1e14 <tm_putchar+0x44>)
341a1df0:	f000 ffca 	bl	341a2d88 <tm_snd_dat>
	}
	tm_snd_dat(&buf, 1);
341a1df4:	f107 030b 	add.w	r3, r7, #11
341a1df8:	2101      	movs	r1, #1
341a1dfa:	4618      	mov	r0, r3
341a1dfc:	f000 ffc4 	bl	341a2d88 <tm_snd_dat>
	EI(imask);
341a1e00:	68fb      	ldr	r3, [r7, #12]
341a1e02:	4618      	mov	r0, r3
341a1e04:	f000 fe25 	bl	341a2a52 <set_basepri>

	return 0;
341a1e08:	2300      	movs	r3, #0
}
341a1e0a:	4618      	mov	r0, r3
341a1e0c:	3710      	adds	r7, #16
341a1e0e:	46bd      	mov	sp, r7
341a1e10:	bd80      	pop	{r7, pc}
341a1e12:	bf00      	nop
341a1e14:	341a65fc 	.word	0x341a65fc

341a1e18 <tm_putstring>:
/*
 * tm_putstring() - Put String
 * Ctrl-C is not supported
 */
EXPORT INT tm_putstring( const UB *buff )
{
341a1e18:	b580      	push	{r7, lr}
341a1e1a:	b084      	sub	sp, #16
341a1e1c:	af00      	add	r7, sp, #0
341a1e1e:	6078      	str	r0, [r7, #4]
	const UB* p = buff;
341a1e20:	687b      	ldr	r3, [r7, #4]
341a1e22:	60fb      	str	r3, [r7, #12]
	INT imask;

	DI(imask);
341a1e24:	f000 fe31 	bl	341a2a8a <disint>
341a1e28:	4603      	mov	r3, r0
341a1e2a:	60bb      	str	r3, [r7, #8]
	while ( *p != (UB)'\0' ) {
341a1e2c:	e006      	b.n	341a1e3c <tm_putstring+0x24>
		tm_putchar(*p++);
341a1e2e:	68fb      	ldr	r3, [r7, #12]
341a1e30:	1c5a      	adds	r2, r3, #1
341a1e32:	60fa      	str	r2, [r7, #12]
341a1e34:	781b      	ldrb	r3, [r3, #0]
341a1e36:	4618      	mov	r0, r3
341a1e38:	f7ff ffca 	bl	341a1dd0 <tm_putchar>
	while ( *p != (UB)'\0' ) {
341a1e3c:	68fb      	ldr	r3, [r7, #12]
341a1e3e:	781b      	ldrb	r3, [r3, #0]
341a1e40:	2b00      	cmp	r3, #0
341a1e42:	d1f4      	bne.n	341a1e2e <tm_putstring+0x16>
	}
	EI(imask);
341a1e44:	68bb      	ldr	r3, [r7, #8]
341a1e46:	4618      	mov	r0, r3
341a1e48:	f000 fe03 	bl	341a2a52 <set_basepri>

	return 0;
341a1e4c:	2300      	movs	r3, #0
}
341a1e4e:	4618      	mov	r0, r3
341a1e50:	3710      	adds	r7, #16
341a1e52:	46bd      	mov	sp, r7
341a1e54:	bd80      	pop	{r7, pc}
	...

341a1e58 <outint>:

/*
 *	Output integer value
 */
LOCAL	UB	*outint( UB *ep, UW val, UB base )
{
341a1e58:	b480      	push	{r7}
341a1e5a:	b087      	sub	sp, #28
341a1e5c:	af00      	add	r7, sp, #0
341a1e5e:	60f8      	str	r0, [r7, #12]
341a1e60:	60b9      	str	r1, [r7, #8]
341a1e62:	4613      	mov	r3, r2
341a1e64:	71fb      	strb	r3, [r7, #7]
LOCAL const UB  digits[32] = "0123456789abcdef0123456789ABCDEF";
	UB	caps;

	caps = (base & 0x40) >> 2;		/* 'a' or 'A' */
341a1e66:	79fb      	ldrb	r3, [r7, #7]
341a1e68:	109b      	asrs	r3, r3, #2
341a1e6a:	b2db      	uxtb	r3, r3
341a1e6c:	f003 0310 	and.w	r3, r3, #16
341a1e70:	75fb      	strb	r3, [r7, #23]
	for (base &= 0x3F; val >= base; val /= base) {
341a1e72:	79fb      	ldrb	r3, [r7, #7]
341a1e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341a1e78:	71fb      	strb	r3, [r7, #7]
341a1e7a:	e014      	b.n	341a1ea6 <outint+0x4e>
		*--ep = digits[(val % base) + caps];
341a1e7c:	79fa      	ldrb	r2, [r7, #7]
341a1e7e:	68bb      	ldr	r3, [r7, #8]
341a1e80:	fbb3 f1f2 	udiv	r1, r3, r2
341a1e84:	fb01 f202 	mul.w	r2, r1, r2
341a1e88:	1a9a      	subs	r2, r3, r2
341a1e8a:	7dfb      	ldrb	r3, [r7, #23]
341a1e8c:	4413      	add	r3, r2
341a1e8e:	68fa      	ldr	r2, [r7, #12]
341a1e90:	3a01      	subs	r2, #1
341a1e92:	60fa      	str	r2, [r7, #12]
341a1e94:	4a0e      	ldr	r2, [pc, #56]	@ (341a1ed0 <outint+0x78>)
341a1e96:	5cd2      	ldrb	r2, [r2, r3]
341a1e98:	68fb      	ldr	r3, [r7, #12]
341a1e9a:	701a      	strb	r2, [r3, #0]
	for (base &= 0x3F; val >= base; val /= base) {
341a1e9c:	79fb      	ldrb	r3, [r7, #7]
341a1e9e:	68ba      	ldr	r2, [r7, #8]
341a1ea0:	fbb2 f3f3 	udiv	r3, r2, r3
341a1ea4:	60bb      	str	r3, [r7, #8]
341a1ea6:	79fb      	ldrb	r3, [r7, #7]
341a1ea8:	68ba      	ldr	r2, [r7, #8]
341a1eaa:	429a      	cmp	r2, r3
341a1eac:	d2e6      	bcs.n	341a1e7c <outint+0x24>
	}
	*--ep = digits[val + caps];
341a1eae:	7dfa      	ldrb	r2, [r7, #23]
341a1eb0:	68bb      	ldr	r3, [r7, #8]
341a1eb2:	4413      	add	r3, r2
341a1eb4:	68fa      	ldr	r2, [r7, #12]
341a1eb6:	3a01      	subs	r2, #1
341a1eb8:	60fa      	str	r2, [r7, #12]
341a1eba:	4a05      	ldr	r2, [pc, #20]	@ (341a1ed0 <outint+0x78>)
341a1ebc:	5cd2      	ldrb	r2, [r2, r3]
341a1ebe:	68fb      	ldr	r3, [r7, #12]
341a1ec0:	701a      	strb	r2, [r3, #0]
	return ep;				/* buffer top pointer */
341a1ec2:	68fb      	ldr	r3, [r7, #12]
}
341a1ec4:	4618      	mov	r0, r3
341a1ec6:	371c      	adds	r7, #28
341a1ec8:	46bd      	mov	sp, r7
341a1eca:	f85d 7b04 	ldr.w	r7, [sp], #4
341a1ece:	4770      	bx	lr
341a1ed0:	341a6600 	.word	0x341a6600

341a1ed4 <tm_vsprintf>:

/*
 *	Output with format (limited version)
 */
LOCAL	void	tm_vsprintf( OutFn ostr, OutPar *par, const UB *fmt, va_list ap )
{
341a1ed4:	b580      	push	{r7, lr}
341a1ed6:	b090      	sub	sp, #64	@ 0x40
341a1ed8:	af00      	add	r7, sp, #0
341a1eda:	60f8      	str	r0, [r7, #12]
341a1edc:	60b9      	str	r1, [r7, #8]
341a1ede:	607a      	str	r2, [r7, #4]
341a1ee0:	603b      	str	r3, [r7, #0]
#define	F_PLUS		0x02
#define	F_SPACE		0x04
#define	F_PREFIX	0x08
#define	F_ZERO		0x10

	for (fms = NULL; (c = *fmt++) != '\0'; ) {
341a1ee2:	2300      	movs	r3, #0
341a1ee4:	633b      	str	r3, [r7, #48]	@ 0x30
341a1ee6:	e2f1      	b.n	341a24cc <tm_vsprintf+0x5f8>

		if (c != '%') {	/* Fixed string */
341a1ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a1eec:	2b25      	cmp	r3, #37	@ 0x25
341a1eee:	d007      	beq.n	341a1f00 <tm_vsprintf+0x2c>
			if (fms == NULL) fms = (UB*)fmt - 1;
341a1ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341a1ef2:	2b00      	cmp	r3, #0
341a1ef4:	f040 82e9 	bne.w	341a24ca <tm_vsprintf+0x5f6>
341a1ef8:	687b      	ldr	r3, [r7, #4]
341a1efa:	3b01      	subs	r3, #1
341a1efc:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
341a1efe:	e2e4      	b.n	341a24ca <tm_vsprintf+0x5f6>
		}

		/* Output fix string */
		if (fms != NULL) {
341a1f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341a1f02:	2b00      	cmp	r3, #0
341a1f04:	d009      	beq.n	341a1f1a <tm_vsprintf+0x46>
			(*ostr)(fms, fmt - fms - 1, par);
341a1f06:	687a      	ldr	r2, [r7, #4]
341a1f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341a1f0a:	1ad3      	subs	r3, r2, r3
341a1f0c:	1e59      	subs	r1, r3, #1
341a1f0e:	68fb      	ldr	r3, [r7, #12]
341a1f10:	68ba      	ldr	r2, [r7, #8]
341a1f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
341a1f14:	4798      	blx	r3
			fms = NULL;
341a1f16:	2300      	movs	r3, #0
341a1f18:	633b      	str	r3, [r7, #48]	@ 0x30
		}

		/* Get flags */
		for (flg = 0; ; ) {
341a1f1a:	2300      	movs	r3, #0
341a1f1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			switch (c = *fmt++) {
341a1f20:	687b      	ldr	r3, [r7, #4]
341a1f22:	1c5a      	adds	r2, r3, #1
341a1f24:	607a      	str	r2, [r7, #4]
341a1f26:	781b      	ldrb	r3, [r3, #0]
341a1f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a1f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a1f30:	3b20      	subs	r3, #32
341a1f32:	2b10      	cmp	r3, #16
341a1f34:	d848      	bhi.n	341a1fc8 <tm_vsprintf+0xf4>
341a1f36:	a201      	add	r2, pc, #4	@ (adr r2, 341a1f3c <tm_vsprintf+0x68>)
341a1f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341a1f3c:	341a1f9d 	.word	0x341a1f9d
341a1f40:	341a1fc9 	.word	0x341a1fc9
341a1f44:	341a1fc9 	.word	0x341a1fc9
341a1f48:	341a1fab 	.word	0x341a1fab
341a1f4c:	341a1fc9 	.word	0x341a1fc9
341a1f50:	341a1fc9 	.word	0x341a1fc9
341a1f54:	341a1fc9 	.word	0x341a1fc9
341a1f58:	341a1fc9 	.word	0x341a1fc9
341a1f5c:	341a1fc9 	.word	0x341a1fc9
341a1f60:	341a1fc9 	.word	0x341a1fc9
341a1f64:	341a1fc9 	.word	0x341a1fc9
341a1f68:	341a1f8f 	.word	0x341a1f8f
341a1f6c:	341a1fc9 	.word	0x341a1fc9
341a1f70:	341a1f81 	.word	0x341a1f81
341a1f74:	341a1fc9 	.word	0x341a1fc9
341a1f78:	341a1fc9 	.word	0x341a1fc9
341a1f7c:	341a1fb9 	.word	0x341a1fb9
			case '-': flg |= F_LEFT;	continue;
341a1f80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1f84:	f043 0301 	orr.w	r3, r3, #1
341a1f88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
341a1f8c:	e01b      	b.n	341a1fc6 <tm_vsprintf+0xf2>
			case '+': flg |= F_PLUS;	continue;
341a1f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1f92:	f043 0302 	orr.w	r3, r3, #2
341a1f96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
341a1f9a:	e014      	b.n	341a1fc6 <tm_vsprintf+0xf2>
			case ' ': flg |= F_SPACE;	continue;
341a1f9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1fa0:	f043 0304 	orr.w	r3, r3, #4
341a1fa4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
341a1fa8:	e00d      	b.n	341a1fc6 <tm_vsprintf+0xf2>
			case '#': flg |= F_PREFIX;	continue;
341a1faa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1fae:	f043 0308 	orr.w	r3, r3, #8
341a1fb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
341a1fb6:	e006      	b.n	341a1fc6 <tm_vsprintf+0xf2>
			case '0': flg |= F_ZERO;	continue;
341a1fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1fbc:	f043 0310 	orr.w	r3, r3, #16
341a1fc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
341a1fc4:	bf00      	nop
			switch (c = *fmt++) {
341a1fc6:	e7ab      	b.n	341a1f20 <tm_vsprintf+0x4c>
			}
			break;
341a1fc8:	bf00      	nop
		}

		/* Get field width */
		if (c == '*') {
341a1fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a1fce:	2b2a      	cmp	r3, #42	@ 0x2a
341a1fd0:	d119      	bne.n	341a2006 <tm_vsprintf+0x132>
			wid = va_arg(ap, INT);
341a1fd2:	683b      	ldr	r3, [r7, #0]
341a1fd4:	1d1a      	adds	r2, r3, #4
341a1fd6:	603a      	str	r2, [r7, #0]
341a1fd8:	681b      	ldr	r3, [r3, #0]
341a1fda:	877b      	strh	r3, [r7, #58]	@ 0x3a
			if (wid < 0) {
341a1fdc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
341a1fe0:	2b00      	cmp	r3, #0
341a1fe2:	da09      	bge.n	341a1ff8 <tm_vsprintf+0x124>
				wid = -wid;
341a1fe4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a1fe6:	425b      	negs	r3, r3
341a1fe8:	b29b      	uxth	r3, r3
341a1fea:	877b      	strh	r3, [r7, #58]	@ 0x3a
				flg |= F_LEFT;
341a1fec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a1ff0:	f043 0301 	orr.w	r3, r3, #1
341a1ff4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			}
			c = *fmt++;
341a1ff8:	687b      	ldr	r3, [r7, #4]
341a1ffa:	1c5a      	adds	r2, r3, #1
341a1ffc:	607a      	str	r2, [r7, #4]
341a1ffe:	781b      	ldrb	r3, [r3, #0]
341a2000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a2004:	e01e      	b.n	341a2044 <tm_vsprintf+0x170>
		} else {
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
341a2006:	2300      	movs	r3, #0
341a2008:	877b      	strh	r3, [r7, #58]	@ 0x3a
341a200a:	e013      	b.n	341a2034 <tm_vsprintf+0x160>
				wid = wid * 10 + c - '0';
341a200c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a200e:	461a      	mov	r2, r3
341a2010:	0092      	lsls	r2, r2, #2
341a2012:	4413      	add	r3, r2
341a2014:	005b      	lsls	r3, r3, #1
341a2016:	b29a      	uxth	r2, r3
341a2018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a201c:	b29b      	uxth	r3, r3
341a201e:	4413      	add	r3, r2
341a2020:	b29b      	uxth	r3, r3
341a2022:	3b30      	subs	r3, #48	@ 0x30
341a2024:	b29b      	uxth	r3, r3
341a2026:	877b      	strh	r3, [r7, #58]	@ 0x3a
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
341a2028:	687b      	ldr	r3, [r7, #4]
341a202a:	1c5a      	adds	r2, r3, #1
341a202c:	607a      	str	r2, [r7, #4]
341a202e:	781b      	ldrb	r3, [r3, #0]
341a2030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a2034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a2038:	2b2f      	cmp	r3, #47	@ 0x2f
341a203a:	d903      	bls.n	341a2044 <tm_vsprintf+0x170>
341a203c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a2040:	2b39      	cmp	r3, #57	@ 0x39
341a2042:	d9e3      	bls.n	341a200c <tm_vsprintf+0x138>
		}

		/* Get precision */
		prec = -1;
341a2044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
341a2048:	873b      	strh	r3, [r7, #56]	@ 0x38
		if (c == '.') {
341a204a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a204e:	2b2e      	cmp	r3, #46	@ 0x2e
341a2050:	d140      	bne.n	341a20d4 <tm_vsprintf+0x200>
			c = *fmt++;
341a2052:	687b      	ldr	r3, [r7, #4]
341a2054:	1c5a      	adds	r2, r3, #1
341a2056:	607a      	str	r2, [r7, #4]
341a2058:	781b      	ldrb	r3, [r3, #0]
341a205a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (c == '*') {
341a205e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a2062:	2b2a      	cmp	r3, #42	@ 0x2a
341a2064:	d111      	bne.n	341a208a <tm_vsprintf+0x1b6>
				prec = va_arg(ap, INT);
341a2066:	683b      	ldr	r3, [r7, #0]
341a2068:	1d1a      	adds	r2, r3, #4
341a206a:	603a      	str	r2, [r7, #0]
341a206c:	681b      	ldr	r3, [r3, #0]
341a206e:	873b      	strh	r3, [r7, #56]	@ 0x38
				if (prec < 0) prec = 0;
341a2070:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
341a2074:	2b00      	cmp	r3, #0
341a2076:	da01      	bge.n	341a207c <tm_vsprintf+0x1a8>
341a2078:	2300      	movs	r3, #0
341a207a:	873b      	strh	r3, [r7, #56]	@ 0x38
				c = *fmt++;
341a207c:	687b      	ldr	r3, [r7, #4]
341a207e:	1c5a      	adds	r2, r3, #1
341a2080:	607a      	str	r2, [r7, #4]
341a2082:	781b      	ldrb	r3, [r3, #0]
341a2084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a2088:	e01e      	b.n	341a20c8 <tm_vsprintf+0x1f4>
			} else {
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
341a208a:	2300      	movs	r3, #0
341a208c:	873b      	strh	r3, [r7, #56]	@ 0x38
341a208e:	e013      	b.n	341a20b8 <tm_vsprintf+0x1e4>
					prec = prec * 10 + c - '0';
341a2090:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
341a2092:	461a      	mov	r2, r3
341a2094:	0092      	lsls	r2, r2, #2
341a2096:	4413      	add	r3, r2
341a2098:	005b      	lsls	r3, r3, #1
341a209a:	b29a      	uxth	r2, r3
341a209c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20a0:	b29b      	uxth	r3, r3
341a20a2:	4413      	add	r3, r2
341a20a4:	b29b      	uxth	r3, r3
341a20a6:	3b30      	subs	r3, #48	@ 0x30
341a20a8:	b29b      	uxth	r3, r3
341a20aa:	873b      	strh	r3, [r7, #56]	@ 0x38
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
341a20ac:	687b      	ldr	r3, [r7, #4]
341a20ae:	1c5a      	adds	r2, r3, #1
341a20b0:	607a      	str	r2, [r7, #4]
341a20b2:	781b      	ldrb	r3, [r3, #0]
341a20b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a20b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20bc:	2b2f      	cmp	r3, #47	@ 0x2f
341a20be:	d903      	bls.n	341a20c8 <tm_vsprintf+0x1f4>
341a20c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20c4:	2b39      	cmp	r3, #57	@ 0x39
341a20c6:	d9e3      	bls.n	341a2090 <tm_vsprintf+0x1bc>
			}
			flg &= ~F_ZERO;		/* No ZERO padding */
341a20c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a20cc:	f023 0310 	bic.w	r3, r3, #16
341a20d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		/* Get qualifier */
		qual = 0;
341a20d4:	2300      	movs	r3, #0
341a20d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (c == 'h' || c == 'l') {
341a20da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20de:	2b68      	cmp	r3, #104	@ 0x68
341a20e0:	d003      	beq.n	341a20ea <tm_vsprintf+0x216>
341a20e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20e6:	2b6c      	cmp	r3, #108	@ 0x6c
341a20e8:	d109      	bne.n	341a20fe <tm_vsprintf+0x22a>
			qual = c;
341a20ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a20ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			c = *fmt++;
341a20f2:	687b      	ldr	r3, [r7, #4]
341a20f4:	1c5a      	adds	r2, r3, #1
341a20f6:	607a      	str	r2, [r7, #4]
341a20f8:	781b      	ldrb	r3, [r3, #0]
341a20fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		/* Format items */
		base = 10;
341a20fe:	230a      	movs	r3, #10
341a2100:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		sign = 0;
341a2104:	2300      	movs	r3, #0
341a2106:	74fb      	strb	r3, [r7, #19]
		cbe = &cbuf[MAX_DIGITS];	/* buffer end pointer */
341a2108:	f107 0314 	add.w	r3, r7, #20
341a210c:	330e      	adds	r3, #14
341a210e:	62bb      	str	r3, [r7, #40]	@ 0x28

		switch (c) {
341a2110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a2114:	2b78      	cmp	r3, #120	@ 0x78
341a2116:	f300 814d 	bgt.w	341a23b4 <tm_vsprintf+0x4e0>
341a211a:	2b64      	cmp	r3, #100	@ 0x64
341a211c:	da0b      	bge.n	341a2136 <tm_vsprintf+0x262>
341a211e:	2b63      	cmp	r3, #99	@ 0x63
341a2120:	f000 8135 	beq.w	341a238e <tm_vsprintf+0x4ba>
341a2124:	2b63      	cmp	r3, #99	@ 0x63
341a2126:	f300 8145 	bgt.w	341a23b4 <tm_vsprintf+0x4e0>
341a212a:	2b00      	cmp	r3, #0
341a212c:	f000 813e 	beq.w	341a23ac <tm_vsprintf+0x4d8>
341a2130:	2b58      	cmp	r3, #88	@ 0x58
341a2132:	d022      	beq.n	341a217a <tm_vsprintf+0x2a6>
341a2134:	e13e      	b.n	341a23b4 <tm_vsprintf+0x4e0>
341a2136:	3b64      	subs	r3, #100	@ 0x64
341a2138:	2201      	movs	r2, #1
341a213a:	fa02 f303 	lsl.w	r3, r2, r3
341a213e:	4a9f      	ldr	r2, [pc, #636]	@ (341a23bc <tm_vsprintf+0x4e8>)
341a2140:	401a      	ands	r2, r3
341a2142:	2a00      	cmp	r2, #0
341a2144:	bf14      	ite	ne
341a2146:	2201      	movne	r2, #1
341a2148:	2200      	moveq	r2, #0
341a214a:	b2d2      	uxtb	r2, r2
341a214c:	2a00      	cmp	r2, #0
341a214e:	d114      	bne.n	341a217a <tm_vsprintf+0x2a6>
341a2150:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
341a2154:	2a00      	cmp	r2, #0
341a2156:	bf14      	ite	ne
341a2158:	2201      	movne	r2, #1
341a215a:	2200      	moveq	r2, #0
341a215c:	b2d2      	uxtb	r2, r2
341a215e:	2a00      	cmp	r2, #0
341a2160:	f040 80f1 	bne.w	341a2346 <tm_vsprintf+0x472>
341a2164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341a2168:	2b00      	cmp	r3, #0
341a216a:	bf14      	ite	ne
341a216c:	2301      	movne	r3, #1
341a216e:	2300      	moveq	r3, #0
341a2170:	b2db      	uxtb	r3, r3
341a2172:	2b00      	cmp	r3, #0
341a2174:	f040 80cf 	bne.w	341a2316 <tm_vsprintf+0x442>
341a2178:	e11c      	b.n	341a23b4 <tm_vsprintf+0x4e0>
		case 'd':
		case 'u':
		case 'X':
		case 'x':
		case 'o':
			if (qual == 'l') {
341a217a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341a217e:	2b6c      	cmp	r3, #108	@ 0x6c
341a2180:	d105      	bne.n	341a218e <tm_vsprintf+0x2ba>
				v = va_arg(ap, UW);
341a2182:	683b      	ldr	r3, [r7, #0]
341a2184:	1d1a      	adds	r2, r3, #4
341a2186:	603a      	str	r2, [r7, #0]
341a2188:	681b      	ldr	r3, [r3, #0]
341a218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
341a218c:	e016      	b.n	341a21bc <tm_vsprintf+0x2e8>
			} else {
				v = va_arg(ap, UINT);
341a218e:	683b      	ldr	r3, [r7, #0]
341a2190:	1d1a      	adds	r2, r3, #4
341a2192:	603a      	str	r2, [r7, #0]
341a2194:	681b      	ldr	r3, [r3, #0]
341a2196:	63fb      	str	r3, [r7, #60]	@ 0x3c
				if (qual == 'h') {
341a2198:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
341a219c:	2b68      	cmp	r3, #104	@ 0x68
341a219e:	d10d      	bne.n	341a21bc <tm_vsprintf+0x2e8>
					v = (c == 'i' || c == 'd') ?
						(H)v :(UH)v;
341a21a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a21a4:	2b69      	cmp	r3, #105	@ 0x69
341a21a6:	d003      	beq.n	341a21b0 <tm_vsprintf+0x2dc>
					v = (c == 'i' || c == 'd') ?
341a21a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a21ac:	2b64      	cmp	r3, #100	@ 0x64
341a21ae:	d102      	bne.n	341a21b6 <tm_vsprintf+0x2e2>
						(H)v :(UH)v;
341a21b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a21b2:	b21b      	sxth	r3, r3
341a21b4:	e001      	b.n	341a21ba <tm_vsprintf+0x2e6>
341a21b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a21b8:	b29b      	uxth	r3, r3
					v = (c == 'i' || c == 'd') ?
341a21ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
			}
			switch (c) {
341a21bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a21c0:	3b58      	subs	r3, #88	@ 0x58
341a21c2:	2b20      	cmp	r3, #32
341a21c4:	f200 8094 	bhi.w	341a22f0 <tm_vsprintf+0x41c>
341a21c8:	a201      	add	r2, pc, #4	@ (adr r2, 341a21d0 <tm_vsprintf+0x2fc>)
341a21ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341a21ce:	bf00      	nop
341a21d0:	341a2297 	.word	0x341a2297
341a21d4:	341a22f1 	.word	0x341a22f1
341a21d8:	341a22f1 	.word	0x341a22f1
341a21dc:	341a22f1 	.word	0x341a22f1
341a21e0:	341a22f1 	.word	0x341a22f1
341a21e4:	341a22f1 	.word	0x341a22f1
341a21e8:	341a22f1 	.word	0x341a22f1
341a21ec:	341a22f1 	.word	0x341a22f1
341a21f0:	341a22f1 	.word	0x341a22f1
341a21f4:	341a22f1 	.word	0x341a22f1
341a21f8:	341a22f1 	.word	0x341a22f1
341a21fc:	341a22f1 	.word	0x341a22f1
341a2200:	341a2255 	.word	0x341a2255
341a2204:	341a22f1 	.word	0x341a22f1
341a2208:	341a22f1 	.word	0x341a22f1
341a220c:	341a22f1 	.word	0x341a22f1
341a2210:	341a22f1 	.word	0x341a22f1
341a2214:	341a2255 	.word	0x341a2255
341a2218:	341a22f1 	.word	0x341a22f1
341a221c:	341a22f1 	.word	0x341a22f1
341a2220:	341a22f1 	.word	0x341a22f1
341a2224:	341a22f1 	.word	0x341a22f1
341a2228:	341a22f1 	.word	0x341a22f1
341a222c:	341a22ab 	.word	0x341a22ab
341a2230:	341a22f1 	.word	0x341a22f1
341a2234:	341a22f1 	.word	0x341a22f1
341a2238:	341a22f1 	.word	0x341a22f1
341a223c:	341a22f1 	.word	0x341a22f1
341a2240:	341a22f1 	.word	0x341a22f1
341a2244:	341a22f1 	.word	0x341a22f1
341a2248:	341a22f1 	.word	0x341a22f1
341a224c:	341a22f1 	.word	0x341a22f1
341a2250:	341a22a1 	.word	0x341a22a1
			case 'i':
			case 'd':
				if ((W)v < 0) {
341a2254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a2256:	2b00      	cmp	r3, #0
341a2258:	da05      	bge.n	341a2266 <tm_vsprintf+0x392>
					v = - (W)v;
341a225a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a225c:	425b      	negs	r3, r3
341a225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					sign = '-';
341a2260:	232d      	movs	r3, #45	@ 0x2d
341a2262:	74fb      	strb	r3, [r7, #19]
341a2264:	e010      	b.n	341a2288 <tm_vsprintf+0x3b4>
				} else if ((flg & F_PLUS) != 0) {
341a2266:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a226a:	f003 0302 	and.w	r3, r3, #2
341a226e:	2b00      	cmp	r3, #0
341a2270:	d002      	beq.n	341a2278 <tm_vsprintf+0x3a4>
					sign = '+';
341a2272:	232b      	movs	r3, #43	@ 0x2b
341a2274:	74fb      	strb	r3, [r7, #19]
341a2276:	e007      	b.n	341a2288 <tm_vsprintf+0x3b4>
				} else if ((flg & F_SPACE) != 0) {
341a2278:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a227c:	f003 0304 	and.w	r3, r3, #4
341a2280:	2b00      	cmp	r3, #0
341a2282:	d032      	beq.n	341a22ea <tm_vsprintf+0x416>
					sign = ' ';
341a2284:	2320      	movs	r3, #32
341a2286:	74fb      	strb	r3, [r7, #19]
				} else {
					break;
				}
				wid--;		/* for sign */
341a2288:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
341a228c:	b29b      	uxth	r3, r3
341a228e:	3b01      	subs	r3, #1
341a2290:	b29b      	uxth	r3, r3
341a2292:	877b      	strh	r3, [r7, #58]	@ 0x3a
			case 'u':
				break;
341a2294:	e02c      	b.n	341a22f0 <tm_vsprintf+0x41c>
			case 'X':
				base += 0x40;	/* base = 16 + 0x40 */
341a2296:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a229a:	3340      	adds	r3, #64	@ 0x40
341a229c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'x':
				base += 8;	/* base = 16 */
341a22a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a22a4:	3308      	adds	r3, #8
341a22a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'o':
				base -= 2;	/* base = 8 */
341a22aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a22ae:	3b02      	subs	r3, #2
341a22b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if ((flg & F_PREFIX) != 0 && v != 0) {
341a22b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a22b8:	f003 0308 	and.w	r3, r3, #8
341a22bc:	2b00      	cmp	r3, #0
341a22be:	d016      	beq.n	341a22ee <tm_vsprintf+0x41a>
341a22c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a22c2:	2b00      	cmp	r3, #0
341a22c4:	d013      	beq.n	341a22ee <tm_vsprintf+0x41a>
					wid -= (base == 8) ? 1 : 2;
341a22c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
341a22c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a22cc:	2b08      	cmp	r3, #8
341a22ce:	d101      	bne.n	341a22d4 <tm_vsprintf+0x400>
341a22d0:	2301      	movs	r3, #1
341a22d2:	e000      	b.n	341a22d6 <tm_vsprintf+0x402>
341a22d4:	2302      	movs	r3, #2
341a22d6:	1ad3      	subs	r3, r2, r3
341a22d8:	b29b      	uxth	r3, r3
341a22da:	877b      	strh	r3, [r7, #58]	@ 0x3a
					base |= 0x80;
341a22dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a22e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
341a22e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				}
				break;
341a22e8:	e001      	b.n	341a22ee <tm_vsprintf+0x41a>
					break;
341a22ea:	bf00      	nop
341a22ec:	e000      	b.n	341a22f0 <tm_vsprintf+0x41c>
				break;
341a22ee:	bf00      	nop
			}
			/* Note: None outputs when v == 0 && prec == 0 */
			cbs = (v == 0 && prec == 0) ?
						cbe : outint(cbe, v, base);
341a22f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a22f2:	2b00      	cmp	r3, #0
341a22f4:	d103      	bne.n	341a22fe <tm_vsprintf+0x42a>
			cbs = (v == 0 && prec == 0) ?
341a22f6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
341a22fa:	2b00      	cmp	r3, #0
341a22fc:	d008      	beq.n	341a2310 <tm_vsprintf+0x43c>
						cbe : outint(cbe, v, base);
341a22fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a2302:	461a      	mov	r2, r3
341a2304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
341a2306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
341a2308:	f7ff fda6 	bl	341a1e58 <outint>
341a230c:	4603      	mov	r3, r0
341a230e:	e000      	b.n	341a2312 <tm_vsprintf+0x43e>
341a2310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			cbs = (v == 0 && prec == 0) ?
341a2312:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
341a2314:	e055      	b.n	341a23c2 <tm_vsprintf+0x4ee>
		case 'p':
			v = (UW)va_arg(ap, void *);
341a2316:	683b      	ldr	r3, [r7, #0]
341a2318:	1d1a      	adds	r2, r3, #4
341a231a:	603a      	str	r2, [r7, #0]
341a231c:	681b      	ldr	r3, [r3, #0]
341a231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (v != 0) {
341a2320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
341a2322:	2b00      	cmp	r3, #0
341a2324:	d006      	beq.n	341a2334 <tm_vsprintf+0x460>
				base = 16 | 0x80;
341a2326:	2390      	movs	r3, #144	@ 0x90
341a2328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				wid -= 2;
341a232c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a232e:	3b02      	subs	r3, #2
341a2330:	b29b      	uxth	r3, r3
341a2332:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
			cbs = outint(cbe, v, base);
341a2334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a2338:	461a      	mov	r2, r3
341a233a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
341a233c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
341a233e:	f7ff fd8b 	bl	341a1e58 <outint>
341a2342:	62f8      	str	r0, [r7, #44]	@ 0x2c
			break;
341a2344:	e03d      	b.n	341a23c2 <tm_vsprintf+0x4ee>
		case 's':
			cbe = cbs = va_arg(ap, UB *);
341a2346:	683b      	ldr	r3, [r7, #0]
341a2348:	1d1a      	adds	r2, r3, #4
341a234a:	603a      	str	r2, [r7, #0]
341a234c:	681b      	ldr	r3, [r3, #0]
341a234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
341a2350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341a2352:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (prec < 0) {
341a2354:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
341a2358:	2b00      	cmp	r3, #0
341a235a:	da0b      	bge.n	341a2374 <tm_vsprintf+0x4a0>
				while (*cbe != '\0') cbe++;
341a235c:	e002      	b.n	341a2364 <tm_vsprintf+0x490>
341a235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341a2360:	3301      	adds	r3, #1
341a2362:	62bb      	str	r3, [r7, #40]	@ 0x28
341a2364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341a2366:	781b      	ldrb	r3, [r3, #0]
341a2368:	2b00      	cmp	r3, #0
341a236a:	d1f8      	bne.n	341a235e <tm_vsprintf+0x48a>
			} else {
				while (--prec >= 0 && *cbe != '\0') cbe++;
			}
			break;
341a236c:	e028      	b.n	341a23c0 <tm_vsprintf+0x4ec>
				while (--prec >= 0 && *cbe != '\0') cbe++;
341a236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341a2370:	3301      	adds	r3, #1
341a2372:	62bb      	str	r3, [r7, #40]	@ 0x28
341a2374:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
341a2376:	3b01      	subs	r3, #1
341a2378:	b29b      	uxth	r3, r3
341a237a:	873b      	strh	r3, [r7, #56]	@ 0x38
341a237c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
341a2380:	2b00      	cmp	r3, #0
341a2382:	db1d      	blt.n	341a23c0 <tm_vsprintf+0x4ec>
341a2384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341a2386:	781b      	ldrb	r3, [r3, #0]
341a2388:	2b00      	cmp	r3, #0
341a238a:	d1f0      	bne.n	341a236e <tm_vsprintf+0x49a>
			break;
341a238c:	e018      	b.n	341a23c0 <tm_vsprintf+0x4ec>
		case 'c':
			cbs = cbe;
341a238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341a2390:	62fb      	str	r3, [r7, #44]	@ 0x2c
			*--cbs = (UB)va_arg(ap, INT);
341a2392:	683b      	ldr	r3, [r7, #0]
341a2394:	1d1a      	adds	r2, r3, #4
341a2396:	603a      	str	r2, [r7, #0]
341a2398:	681a      	ldr	r2, [r3, #0]
341a239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341a239c:	3b01      	subs	r3, #1
341a239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
341a23a0:	b2d2      	uxtb	r2, r2
341a23a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341a23a4:	701a      	strb	r2, [r3, #0]
			prec = 0;
341a23a6:	2300      	movs	r3, #0
341a23a8:	873b      	strh	r3, [r7, #56]	@ 0x38
			break;
341a23aa:	e00a      	b.n	341a23c2 <tm_vsprintf+0x4ee>
		case '\0':
			fmt--;
341a23ac:	687b      	ldr	r3, [r7, #4]
341a23ae:	3b01      	subs	r3, #1
341a23b0:	607b      	str	r3, [r7, #4]
			continue;
341a23b2:	e08b      	b.n	341a24cc <tm_vsprintf+0x5f8>
		default:
			/* Output as fixed string */
			fms = (UB*)fmt - 1;
341a23b4:	687b      	ldr	r3, [r7, #4]
341a23b6:	3b01      	subs	r3, #1
341a23b8:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
341a23ba:	e087      	b.n	341a24cc <tm_vsprintf+0x5f8>
341a23bc:	00120821 	.word	0x00120821
			break;
341a23c0:	bf00      	nop
		}

		n = cbe - cbs;				/* item length */
341a23c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341a23c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341a23c6:	1ad3      	subs	r3, r2, r3
341a23c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
		if ((prec -= n) > 0) n += prec;
341a23ca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
341a23cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
341a23ce:	1ad3      	subs	r3, r2, r3
341a23d0:	b29b      	uxth	r3, r3
341a23d2:	873b      	strh	r3, [r7, #56]	@ 0x38
341a23d4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
341a23d8:	2b00      	cmp	r3, #0
341a23da:	dd04      	ble.n	341a23e6 <tm_vsprintf+0x512>
341a23dc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
341a23de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
341a23e0:	4413      	add	r3, r2
341a23e2:	b29b      	uxth	r3, r3
341a23e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		wid -= n;				/* pad length */
341a23e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
341a23e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
341a23ea:	1ad3      	subs	r3, r2, r3
341a23ec:	b29b      	uxth	r3, r3
341a23ee:	877b      	strh	r3, [r7, #58]	@ 0x3a

		/* Output preceding spaces */
		if ((flg & (F_LEFT | F_ZERO)) == 0 ) {
341a23f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a23f4:	f003 0311 	and.w	r3, r3, #17
341a23f8:	2b00      	cmp	r3, #0
341a23fa:	d10d      	bne.n	341a2418 <tm_vsprintf+0x544>
			while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
341a23fc:	e004      	b.n	341a2408 <tm_vsprintf+0x534>
341a23fe:	68fb      	ldr	r3, [r7, #12]
341a2400:	68ba      	ldr	r2, [r7, #8]
341a2402:	2101      	movs	r1, #1
341a2404:	483e      	ldr	r0, [pc, #248]	@ (341a2500 <tm_vsprintf+0x62c>)
341a2406:	4798      	blx	r3
341a2408:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a240a:	3b01      	subs	r3, #1
341a240c:	b29b      	uxth	r3, r3
341a240e:	877b      	strh	r3, [r7, #58]	@ 0x3a
341a2410:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
341a2414:	2b00      	cmp	r3, #0
341a2416:	daf2      	bge.n	341a23fe <tm_vsprintf+0x52a>
		}

		/* Output sign */
		if (sign != 0) {
341a2418:	7cfb      	ldrb	r3, [r7, #19]
341a241a:	2b00      	cmp	r3, #0
341a241c:	d005      	beq.n	341a242a <tm_vsprintf+0x556>
			(*ostr)(&sign, 1, par);
341a241e:	f107 0013 	add.w	r0, r7, #19
341a2422:	68fb      	ldr	r3, [r7, #12]
341a2424:	68ba      	ldr	r2, [r7, #8]
341a2426:	2101      	movs	r1, #1
341a2428:	4798      	blx	r3
		}

		/* Output prefix "0x", "0X" or "0" */
		if ((base & 0x80) != 0) {
341a242a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
341a242e:	2b00      	cmp	r3, #0
341a2430:	da17      	bge.n	341a2462 <tm_vsprintf+0x58e>
			(*ostr)((UB*)"0", 1, par);
341a2432:	68fb      	ldr	r3, [r7, #12]
341a2434:	68ba      	ldr	r2, [r7, #8]
341a2436:	2101      	movs	r1, #1
341a2438:	4832      	ldr	r0, [pc, #200]	@ (341a2504 <tm_vsprintf+0x630>)
341a243a:	4798      	blx	r3
			if ((base & 0x10) != 0) {
341a243c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a2440:	f003 0310 	and.w	r3, r3, #16
341a2444:	2b00      	cmp	r3, #0
341a2446:	d00c      	beq.n	341a2462 <tm_vsprintf+0x58e>
				(*ostr)((base & 0x40) ? (UB*)"X" : (UB*)"x", 1, par);
341a2448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341a244c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341a2450:	2b00      	cmp	r3, #0
341a2452:	d001      	beq.n	341a2458 <tm_vsprintf+0x584>
341a2454:	482c      	ldr	r0, [pc, #176]	@ (341a2508 <tm_vsprintf+0x634>)
341a2456:	e000      	b.n	341a245a <tm_vsprintf+0x586>
341a2458:	482c      	ldr	r0, [pc, #176]	@ (341a250c <tm_vsprintf+0x638>)
341a245a:	68fb      	ldr	r3, [r7, #12]
341a245c:	68ba      	ldr	r2, [r7, #8]
341a245e:	2101      	movs	r1, #1
341a2460:	4798      	blx	r3
			}
		}

		/* Output preceding zeros for precision or padding */
		if ((n = prec) <= 0) {
341a2462:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
341a2464:	86fb      	strh	r3, [r7, #54]	@ 0x36
341a2466:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
341a246a:	2b00      	cmp	r3, #0
341a246c:	dc0f      	bgt.n	341a248e <tm_vsprintf+0x5ba>
			if ((flg & (F_LEFT | F_ZERO)) == F_ZERO ) {
341a246e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
341a2472:	f003 0311 	and.w	r3, r3, #17
341a2476:	2b10      	cmp	r3, #16
341a2478:	d109      	bne.n	341a248e <tm_vsprintf+0x5ba>
				n = wid;
341a247a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a247c:	86fb      	strh	r3, [r7, #54]	@ 0x36
				wid = 0;
341a247e:	2300      	movs	r3, #0
341a2480:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
		}
		while (--n >= 0) (*ostr)((UB*)"0", 1, par);
341a2482:	e004      	b.n	341a248e <tm_vsprintf+0x5ba>
341a2484:	68fb      	ldr	r3, [r7, #12]
341a2486:	68ba      	ldr	r2, [r7, #8]
341a2488:	2101      	movs	r1, #1
341a248a:	481e      	ldr	r0, [pc, #120]	@ (341a2504 <tm_vsprintf+0x630>)
341a248c:	4798      	blx	r3
341a248e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
341a2490:	3b01      	subs	r3, #1
341a2492:	b29b      	uxth	r3, r3
341a2494:	86fb      	strh	r3, [r7, #54]	@ 0x36
341a2496:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
341a249a:	2b00      	cmp	r3, #0
341a249c:	daf2      	bge.n	341a2484 <tm_vsprintf+0x5b0>

		/* Output item string */
		(*ostr)(cbs, cbe - cbs, par);
341a249e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
341a24a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341a24a2:	1ad1      	subs	r1, r2, r3
341a24a4:	68fb      	ldr	r3, [r7, #12]
341a24a6:	68ba      	ldr	r2, [r7, #8]
341a24a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
341a24aa:	4798      	blx	r3

		/* Output tailing spaces */
		while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
341a24ac:	e004      	b.n	341a24b8 <tm_vsprintf+0x5e4>
341a24ae:	68fb      	ldr	r3, [r7, #12]
341a24b0:	68ba      	ldr	r2, [r7, #8]
341a24b2:	2101      	movs	r1, #1
341a24b4:	4812      	ldr	r0, [pc, #72]	@ (341a2500 <tm_vsprintf+0x62c>)
341a24b6:	4798      	blx	r3
341a24b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
341a24ba:	3b01      	subs	r3, #1
341a24bc:	b29b      	uxth	r3, r3
341a24be:	877b      	strh	r3, [r7, #58]	@ 0x3a
341a24c0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
341a24c4:	2b00      	cmp	r3, #0
341a24c6:	daf2      	bge.n	341a24ae <tm_vsprintf+0x5da>
341a24c8:	e000      	b.n	341a24cc <tm_vsprintf+0x5f8>
			continue;
341a24ca:	bf00      	nop
	for (fms = NULL; (c = *fmt++) != '\0'; ) {
341a24cc:	687b      	ldr	r3, [r7, #4]
341a24ce:	1c5a      	adds	r2, r3, #1
341a24d0:	607a      	str	r2, [r7, #4]
341a24d2:	781b      	ldrb	r3, [r3, #0]
341a24d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
341a24d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
341a24dc:	2b00      	cmp	r3, #0
341a24de:	f47f ad03 	bne.w	341a1ee8 <tm_vsprintf+0x14>
	}

	/* Output last fix string */
	if (fms != NULL) {
341a24e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341a24e4:	2b00      	cmp	r3, #0
341a24e6:	d007      	beq.n	341a24f8 <tm_vsprintf+0x624>
		(*ostr)(fms, fmt - fms - 1, par);
341a24e8:	687a      	ldr	r2, [r7, #4]
341a24ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341a24ec:	1ad3      	subs	r3, r2, r3
341a24ee:	1e59      	subs	r1, r3, #1
341a24f0:	68fb      	ldr	r3, [r7, #12]
341a24f2:	68ba      	ldr	r2, [r7, #8]
341a24f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
341a24f6:	4798      	blx	r3
	}
#if	TM_OUTBUF_SZ > 0
	/* Flush output */
	(*ostr)(NULL, 0, par);
#endif
}
341a24f8:	bf00      	nop
341a24fa:	3740      	adds	r7, #64	@ 0x40
341a24fc:	46bd      	mov	sp, r7
341a24fe:	bd80      	pop	{r7, pc}
341a2500:	341a5868 	.word	0x341a5868
341a2504:	341a586c 	.word	0x341a586c
341a2508:	341a5870 	.word	0x341a5870
341a250c:	341a5874 	.word	0x341a5874

341a2510 <out_cons>:

/*
 *	Output to console
 */
LOCAL	void	out_cons( UB *str, INT len,  OutPar *par )
{
341a2510:	b580      	push	{r7, lr}
341a2512:	b084      	sub	sp, #16
341a2514:	af00      	add	r7, sp, #0
341a2516:	60f8      	str	r0, [r7, #12]
341a2518:	60b9      	str	r1, [r7, #8]
341a251a:	607a      	str	r2, [r7, #4]
#if	TM_OUTBUF_SZ == 0
	/* Direct output to console */
	par->len += len;
341a251c:	687b      	ldr	r3, [r7, #4]
341a251e:	f9b3 3000 	ldrsh.w	r3, [r3]
341a2522:	b29a      	uxth	r2, r3
341a2524:	68bb      	ldr	r3, [r7, #8]
341a2526:	b29b      	uxth	r3, r3
341a2528:	4413      	add	r3, r2
341a252a:	b29b      	uxth	r3, r3
341a252c:	b21a      	sxth	r2, r3
341a252e:	687b      	ldr	r3, [r7, #4]
341a2530:	801a      	strh	r2, [r3, #0]
	while (--len >= 0) tm_putchar(*str++);
341a2532:	e006      	b.n	341a2542 <out_cons+0x32>
341a2534:	68fb      	ldr	r3, [r7, #12]
341a2536:	1c5a      	adds	r2, r3, #1
341a2538:	60fa      	str	r2, [r7, #12]
341a253a:	781b      	ldrb	r3, [r3, #0]
341a253c:	4618      	mov	r0, r3
341a253e:	f7ff fc47 	bl	341a1dd0 <tm_putchar>
341a2542:	68bb      	ldr	r3, [r7, #8]
341a2544:	3b01      	subs	r3, #1
341a2546:	60bb      	str	r3, [r7, #8]
341a2548:	68bb      	ldr	r3, [r7, #8]
341a254a:	2b00      	cmp	r3, #0
341a254c:	daf2      	bge.n	341a2534 <out_cons+0x24>
			}
			par->bufp[par->cnt++] = *str++;
		}
	}
#endif
}
341a254e:	bf00      	nop
341a2550:	bf00      	nop
341a2552:	3710      	adds	r7, #16
341a2554:	46bd      	mov	sp, r7
341a2556:	bd80      	pop	{r7, pc}

341a2558 <tm_printf>:

EXPORT INT	tm_printf( const UB *format, ... )
{
341a2558:	b40f      	push	{r0, r1, r2, r3}
341a255a:	b580      	push	{r7, lr}
341a255c:	b082      	sub	sp, #8
341a255e:	af00      	add	r7, sp, #0
	va_list	ap;

#if	TM_OUTBUF_SZ == 0
	H	len = 0;
341a2560:	2300      	movs	r3, #0
341a2562:	807b      	strh	r3, [r7, #2]

	va_start(ap, format);
341a2564:	f107 0314 	add.w	r3, r7, #20
341a2568:	607b      	str	r3, [r7, #4]
	tm_vsprintf(out_cons, (OutPar*)&len, format, ap);
341a256a:	1cb9      	adds	r1, r7, #2
341a256c:	687b      	ldr	r3, [r7, #4]
341a256e:	693a      	ldr	r2, [r7, #16]
341a2570:	4805      	ldr	r0, [pc, #20]	@ (341a2588 <tm_printf+0x30>)
341a2572:	f7ff fcaf 	bl	341a1ed4 <tm_vsprintf>
	va_end(ap);
	return len;
341a2576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	va_start(ap, format);
	tm_vsprintf(out_cons, (OutPar*)&par, format, ap);
	va_end(ap);
	return par.len;
#endif
}
341a257a:	4618      	mov	r0, r3
341a257c:	3708      	adds	r7, #8
341a257e:	46bd      	mov	sp, r7
341a2580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
341a2584:	b004      	add	sp, #16
341a2586:	4770      	bx	lr
341a2588:	341a2511 	.word	0x341a2511

341a258c <out_w>:
{
341a258c:	b480      	push	{r7}
341a258e:	b083      	sub	sp, #12
341a2590:	af00      	add	r7, sp, #0
341a2592:	6078      	str	r0, [r7, #4]
341a2594:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
341a2596:	687b      	ldr	r3, [r7, #4]
341a2598:	683a      	ldr	r2, [r7, #0]
341a259a:	601a      	str	r2, [r3, #0]
}
341a259c:	bf00      	nop
341a259e:	370c      	adds	r7, #12
341a25a0:	46bd      	mov	sp, r7
341a25a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341a25a6:	4770      	bx	lr

341a25a8 <knl_force_dispatch>:
/* ----------------------------------------------------------------------- */
/*
 *	Task dispatcher startup
 */
EXPORT void knl_force_dispatch( void )
{
341a25a8:	b580      	push	{r7, lr}
341a25aa:	af00      	add	r7, sp, #0
	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;
341a25ac:	4b07      	ldr	r3, [pc, #28]	@ (341a25cc <knl_force_dispatch+0x24>)
341a25ae:	2201      	movs	r2, #1
341a25b0:	601a      	str	r2, [r3, #0]
	knl_ctxtsk = NULL;
341a25b2:	4b07      	ldr	r3, [pc, #28]	@ (341a25d0 <knl_force_dispatch+0x28>)
341a25b4:	2200      	movs	r2, #0
341a25b6:	601a      	str	r2, [r3, #0]
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
341a25b8:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
341a25bc:	4805      	ldr	r0, [pc, #20]	@ (341a25d4 <knl_force_dispatch+0x2c>)
341a25be:	f7ff ffe5 	bl	341a258c <out_w>
	set_basepri(0);
341a25c2:	2000      	movs	r0, #0
341a25c4:	f000 fa45 	bl	341a2a52 <set_basepri>
}
341a25c8:	bf00      	nop
341a25ca:	bd80      	pop	{r7, pc}
341a25cc:	341c4994 	.word	0x341c4994
341a25d0:	341c4998 	.word	0x341c4998
341a25d4:	e000ed04 	.word	0xe000ed04

341a25d8 <knl_dispatch>:

EXPORT void knl_dispatch( void )
{
341a25d8:	b580      	push	{r7, lr}
341a25da:	af00      	add	r7, sp, #0
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
341a25dc:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
341a25e0:	4802      	ldr	r0, [pc, #8]	@ (341a25ec <knl_dispatch+0x14>)
341a25e2:	f7ff ffd3 	bl	341a258c <out_w>
}
341a25e6:	bf00      	nop
341a25e8:	bd80      	pop	{r7, pc}
341a25ea:	bf00      	nop
341a25ec:	e000ed04 	.word	0xe000ed04

341a25f0 <knl_nmi_handler>:

/*
 * NMI handler
 */
WEAK_FUNC EXPORT void knl_nmi_handler(void)
{
341a25f0:	b580      	push	{r7, lr}
341a25f2:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("NMI\n");
341a25f4:	4802      	ldr	r0, [pc, #8]	@ (341a2600 <knl_nmi_handler+0x10>)
341a25f6:	f7ff fc0f 	bl	341a1e18 <tm_putstring>
	while(1);
341a25fa:	bf00      	nop
341a25fc:	e7fd      	b.n	341a25fa <knl_nmi_handler+0xa>
341a25fe:	bf00      	nop
341a2600:	341a5878 	.word	0x341a5878

341a2604 <knl_hardfault_handler>:

/*
 * Hard fault handler
 */
WEAK_FUNC EXPORT void knl_hardfault_handler(void)
{
341a2604:	b580      	push	{r7, lr}
341a2606:	b084      	sub	sp, #16
341a2608:	af00      	add	r7, sp, #0
#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)

	UW	hfsr, cfsr;
	ID	ctskid;

	hfsr	= *(_UW *)SCB_HFSR;
341a260a:	4b12      	ldr	r3, [pc, #72]	@ (341a2654 <knl_hardfault_handler+0x50>)
341a260c:	681b      	ldr	r3, [r3, #0]
341a260e:	60bb      	str	r3, [r7, #8]
	if(knl_ctxtsk != NULL) {
341a2610:	4b11      	ldr	r3, [pc, #68]	@ (341a2658 <knl_hardfault_handler+0x54>)
341a2612:	681b      	ldr	r3, [r3, #0]
341a2614:	2b00      	cmp	r3, #0
341a2616:	d004      	beq.n	341a2622 <knl_hardfault_handler+0x1e>
		ctskid = knl_ctxtsk->tskid;
341a2618:	4b0f      	ldr	r3, [pc, #60]	@ (341a2658 <knl_hardfault_handler+0x54>)
341a261a:	681b      	ldr	r3, [r3, #0]
341a261c:	689b      	ldr	r3, [r3, #8]
341a261e:	60fb      	str	r3, [r7, #12]
341a2620:	e001      	b.n	341a2626 <knl_hardfault_handler+0x22>
	} else {
		ctskid = 0;
341a2622:	2300      	movs	r3, #0
341a2624:	60fb      	str	r3, [r7, #12]
	}

	if(hfsr & 0x40000000) {
341a2626:	68bb      	ldr	r3, [r7, #8]
341a2628:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341a262c:	2b00      	cmp	r3, #0
341a262e:	d009      	beq.n	341a2644 <knl_hardfault_handler+0x40>
		cfsr = *(_UW*)SCB_CFSR;
341a2630:	4b0a      	ldr	r3, [pc, #40]	@ (341a265c <knl_hardfault_handler+0x58>)
341a2632:	681b      	ldr	r3, [r3, #0]
341a2634:	607b      	str	r3, [r7, #4]
		tm_printf((UB*)"*** Hard fault ***  ctxtsk:%d  HFSR:%x  CFSR:%x\n", ctskid, hfsr, cfsr);
341a2636:	687b      	ldr	r3, [r7, #4]
341a2638:	68ba      	ldr	r2, [r7, #8]
341a263a:	68f9      	ldr	r1, [r7, #12]
341a263c:	4808      	ldr	r0, [pc, #32]	@ (341a2660 <knl_hardfault_handler+0x5c>)
341a263e:	f7ff ff8b 	bl	341a2558 <tm_printf>
341a2642:	e005      	b.n	341a2650 <knl_hardfault_handler+0x4c>
	} else {
		tm_printf((UB*)"*** Hard fault ***  ctxtsk:%d  HFSR:%x%x\n", ctskid, hfsr);
341a2644:	68ba      	ldr	r2, [r7, #8]
341a2646:	68f9      	ldr	r1, [r7, #12]
341a2648:	4806      	ldr	r0, [pc, #24]	@ (341a2664 <knl_hardfault_handler+0x60>)
341a264a:	f7ff ff85 	bl	341a2558 <tm_printf>
	}
#endif
	while(1);
341a264e:	bf00      	nop
341a2650:	bf00      	nop
341a2652:	e7fd      	b.n	341a2650 <knl_hardfault_handler+0x4c>
341a2654:	e000ed2c 	.word	0xe000ed2c
341a2658:	341c4998 	.word	0x341c4998
341a265c:	e000ed28 	.word	0xe000ed28
341a2660:	341a5880 	.word	0x341a5880
341a2664:	341a58b4 	.word	0x341a58b4

341a2668 <knl_memmanage_handler>:

/*
 * MPU Fault Handler
 */
WEAK_FUNC EXPORT void knl_memmanage_handler(void)
{
341a2668:	b580      	push	{r7, lr}
341a266a:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("MPU Fault\n");
341a266c:	4802      	ldr	r0, [pc, #8]	@ (341a2678 <knl_memmanage_handler+0x10>)
341a266e:	f7ff fbd3 	bl	341a1e18 <tm_putstring>
	while(1);
341a2672:	bf00      	nop
341a2674:	e7fd      	b.n	341a2672 <knl_memmanage_handler+0xa>
341a2676:	bf00      	nop
341a2678:	341a58e0 	.word	0x341a58e0

341a267c <knl_busfault_handler>:

/* 
 * Bus Fault Handler
 */
WEAK_FUNC EXPORT void knl_busfault_handler(void)
{
341a267c:	b580      	push	{r7, lr}
341a267e:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Bus Fault\n");
341a2680:	4802      	ldr	r0, [pc, #8]	@ (341a268c <knl_busfault_handler+0x10>)
341a2682:	f7ff fbc9 	bl	341a1e18 <tm_putstring>
	while(1);
341a2686:	bf00      	nop
341a2688:	e7fd      	b.n	341a2686 <knl_busfault_handler+0xa>
341a268a:	bf00      	nop
341a268c:	341a58ec 	.word	0x341a58ec

341a2690 <knl_usagefault_handler>:
/*
 * Usage Fault Handler
 */
//WEAK_FUNC EXPORT void knl_usagefault_handler(void)
EXPORT void knl_usagefault_handler(void)
{
341a2690:	b580      	push	{r7, lr}
341a2692:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Usage Fault\n");
341a2694:	4802      	ldr	r0, [pc, #8]	@ (341a26a0 <knl_usagefault_handler+0x10>)
341a2696:	f7ff fbbf 	bl	341a1e18 <tm_putstring>
	while(1);
341a269a:	bf00      	nop
341a269c:	e7fd      	b.n	341a269a <knl_usagefault_handler+0xa>
341a269e:	bf00      	nop
341a26a0:	341a58f8 	.word	0x341a58f8

341a26a4 <knl_svcall_handler>:

/*
 * Svcall
 */
WEAK_FUNC EXPORT void knl_svcall_handler(void)
{
341a26a4:	b580      	push	{r7, lr}
341a26a6:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("SVCall\n");
341a26a8:	4802      	ldr	r0, [pc, #8]	@ (341a26b4 <knl_svcall_handler+0x10>)
341a26aa:	f7ff fbb5 	bl	341a1e18 <tm_putstring>
	while(1);
341a26ae:	bf00      	nop
341a26b0:	e7fd      	b.n	341a26ae <knl_svcall_handler+0xa>
341a26b2:	bf00      	nop
341a26b4:	341a5908 	.word	0x341a5908

341a26b8 <knl_debugmon_handler>:

/* 
 * Debug Monitor
 */
WEAK_FUNC EXPORT void knl_debugmon_handler(void)
{
341a26b8:	b580      	push	{r7, lr}
341a26ba:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Debug Monitor\n");
341a26bc:	4802      	ldr	r0, [pc, #8]	@ (341a26c8 <knl_debugmon_handler+0x10>)
341a26be:	f7ff fbab 	bl	341a1e18 <tm_putstring>
	while(1);
341a26c2:	bf00      	nop
341a26c4:	e7fd      	b.n	341a26c2 <knl_debugmon_handler+0xa>
341a26c6:	bf00      	nop
341a26c8:	341a5910 	.word	0x341a5910

341a26cc <knl_EnterTaskIndependent>:
/*
 * Move to/Restore task independent part
 */
Inline void knl_EnterTaskIndependent( void )
{
341a26cc:	b480      	push	{r7}
341a26ce:	af00      	add	r7, sp, #0
	knl_taskindp++;
341a26d0:	4b04      	ldr	r3, [pc, #16]	@ (341a26e4 <knl_EnterTaskIndependent+0x18>)
341a26d2:	681b      	ldr	r3, [r3, #0]
341a26d4:	3301      	adds	r3, #1
341a26d6:	4a03      	ldr	r2, [pc, #12]	@ (341a26e4 <knl_EnterTaskIndependent+0x18>)
341a26d8:	6013      	str	r3, [r2, #0]
}
341a26da:	bf00      	nop
341a26dc:	46bd      	mov	sp, r7
341a26de:	f85d 7b04 	ldr.w	r7, [sp], #4
341a26e2:	4770      	bx	lr
341a26e4:	341c2920 	.word	0x341c2920

341a26e8 <knl_LeaveTaskIndependent>:
Inline void knl_LeaveTaskIndependent( void )
{
341a26e8:	b480      	push	{r7}
341a26ea:	af00      	add	r7, sp, #0
	knl_taskindp--;
341a26ec:	4b04      	ldr	r3, [pc, #16]	@ (341a2700 <knl_LeaveTaskIndependent+0x18>)
341a26ee:	681b      	ldr	r3, [r3, #0]
341a26f0:	3b01      	subs	r3, #1
341a26f2:	4a03      	ldr	r2, [pc, #12]	@ (341a2700 <knl_LeaveTaskIndependent+0x18>)
341a26f4:	6013      	str	r3, [r2, #0]
}
341a26f6:	bf00      	nop
341a26f8:	46bd      	mov	sp, r7
341a26fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341a26fe:	4770      	bx	lr
341a2700:	341c2920 	.word	0x341c2920

341a2704 <knl_get_ipsr>:
/*
 *	Control register operation
 */

Inline UW knl_get_ipsr(void)
{
341a2704:	b480      	push	{r7}
341a2706:	b083      	sub	sp, #12
341a2708:	af00      	add	r7, sp, #0
	UW	ipsr;
	Asm("mrs %0, ipsr": "=r"(ipsr));
341a270a:	f3ef 8305 	mrs	r3, IPSR
341a270e:	607b      	str	r3, [r7, #4]
	return ipsr;
341a2710:	687b      	ldr	r3, [r7, #4]
}
341a2712:	4618      	mov	r0, r3
341a2714:	370c      	adds	r7, #12
341a2716:	46bd      	mov	sp, r7
341a2718:	f85d 7b04 	ldr.w	r7, [sp], #4
341a271c:	4770      	bx	lr
	...

341a2720 <knl_hll_inthdr>:
/* ------------------------------------------------------------------------ */
/*
 * HLL(High level programming language) Interrupt Handler
 */
EXPORT void knl_hll_inthdr(void)
{
341a2720:	b580      	push	{r7, lr}
341a2722:	b082      	sub	sp, #8
341a2724:	af00      	add	r7, sp, #0
	FP	inthdr;
	UW	intno;

	ENTER_TASK_INDEPENDENT;
341a2726:	f7ff ffd1 	bl	341a26cc <knl_EnterTaskIndependent>

	intno	= knl_get_ipsr() - 16;
341a272a:	f7ff ffeb 	bl	341a2704 <knl_get_ipsr>
341a272e:	4603      	mov	r3, r0
341a2730:	3b10      	subs	r3, #16
341a2732:	607b      	str	r3, [r7, #4]
	inthdr	= (FP)hllint_tbl[intno];
341a2734:	4a06      	ldr	r2, [pc, #24]	@ (341a2750 <knl_hll_inthdr+0x30>)
341a2736:	687b      	ldr	r3, [r7, #4]
341a2738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341a273c:	603b      	str	r3, [r7, #0]

	(*inthdr)(intno);
341a273e:	683b      	ldr	r3, [r7, #0]
341a2740:	6878      	ldr	r0, [r7, #4]
341a2742:	4798      	blx	r3

	LEAVE_TASK_INDEPENDENT;
341a2744:	f7ff ffd0 	bl	341a26e8 <knl_LeaveTaskIndependent>
}
341a2748:	bf00      	nop
341a274a:	3708      	adds	r7, #8
341a274c:	46bd      	mov	sp, r7
341a274e:	bd80      	pop	{r7, pc}
341a2750:	341c2924 	.word	0x341c2924

341a2754 <knl_systim_inthdr>:
/* ------------------------------------------------------------------------ */
/*
 * System-timer Interrupt handler
 */
EXPORT void knl_systim_inthdr(void)
{
341a2754:	b580      	push	{r7, lr}
341a2756:	af00      	add	r7, sp, #0
	ENTER_TASK_INDEPENDENT;
341a2758:	f7ff ffb8 	bl	341a26cc <knl_EnterTaskIndependent>

	knl_timer_handler();
341a275c:	f7fe ff50 	bl	341a1600 <knl_timer_handler>

	LEAVE_TASK_INDEPENDENT;
341a2760:	f7ff ffc2 	bl	341a26e8 <knl_LeaveTaskIndependent>
}
341a2764:	bf00      	nop
341a2766:	bd80      	pop	{r7, pc}

341a2768 <knl_define_inthdr>:
/* ----------------------------------------------------------------------- */
/*
 * Set interrupt handler (Used in tk_def_int())
 */
EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )
{
341a2768:	b480      	push	{r7}
341a276a:	b087      	sub	sp, #28
341a276c:	af00      	add	r7, sp, #0
341a276e:	60f8      	str	r0, [r7, #12]
341a2770:	60b9      	str	r1, [r7, #8]
341a2772:	607a      	str	r2, [r7, #4]
	volatile FP	*intvet;

	if(inthdr != NULL) {
341a2774:	687b      	ldr	r3, [r7, #4]
341a2776:	2b00      	cmp	r3, #0
341a2778:	d00c      	beq.n	341a2794 <knl_define_inthdr+0x2c>
		if ( (intatr & TA_HLNG) != 0 ) {
341a277a:	68bb      	ldr	r3, [r7, #8]
341a277c:	f003 0301 	and.w	r3, r3, #1
341a2780:	2b00      	cmp	r3, #0
341a2782:	d00f      	beq.n	341a27a4 <knl_define_inthdr+0x3c>
			hllint_tbl[intno] = (UW)inthdr;
341a2784:	687a      	ldr	r2, [r7, #4]
341a2786:	490f      	ldr	r1, [pc, #60]	@ (341a27c4 <knl_define_inthdr+0x5c>)
341a2788:	68fb      	ldr	r3, [r7, #12]
341a278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			inthdr = knl_hll_inthdr;
341a278e:	4b0e      	ldr	r3, [pc, #56]	@ (341a27c8 <knl_define_inthdr+0x60>)
341a2790:	607b      	str	r3, [r7, #4]
341a2792:	e007      	b.n	341a27a4 <knl_define_inthdr+0x3c>
		}		
	} else 	{	/* Clear interrupt handler */
		inthdr = (FP)knl_exctbl_o[N_SYSVEC + intno];
341a2794:	4b0d      	ldr	r3, [pc, #52]	@ (341a27cc <knl_define_inthdr+0x64>)
341a2796:	681a      	ldr	r2, [r3, #0]
341a2798:	68fb      	ldr	r3, [r7, #12]
341a279a:	3310      	adds	r3, #16
341a279c:	009b      	lsls	r3, r3, #2
341a279e:	4413      	add	r3, r2
341a27a0:	681b      	ldr	r3, [r3, #0]
341a27a2:	607b      	str	r3, [r7, #4]
	}
	intvet = (FP*)(knl_exctbl + N_SYSVEC);
341a27a4:	4b0a      	ldr	r3, [pc, #40]	@ (341a27d0 <knl_define_inthdr+0x68>)
341a27a6:	617b      	str	r3, [r7, #20]
	intvet[intno] = inthdr;
341a27a8:	68fb      	ldr	r3, [r7, #12]
341a27aa:	009b      	lsls	r3, r3, #2
341a27ac:	697a      	ldr	r2, [r7, #20]
341a27ae:	4413      	add	r3, r2
341a27b0:	687a      	ldr	r2, [r7, #4]
341a27b2:	601a      	str	r2, [r3, #0]

	return E_OK;
341a27b4:	2300      	movs	r3, #0
}
341a27b6:	4618      	mov	r0, r3
341a27b8:	371c      	adds	r7, #28
341a27ba:	46bd      	mov	sp, r7
341a27bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341a27c0:	4770      	bx	lr
341a27c2:	bf00      	nop
341a27c4:	341c2924 	.word	0x341c2924
341a27c8:	341a2721 	.word	0x341a2721
341a27cc:	341c3568 	.word	0x341c3568
341a27d0:	341c0440 	.word	0x341c0440

341a27d4 <knl_init_interrupt>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt initialize
 */
EXPORT ER knl_init_interrupt( void )
{
341a27d4:	b480      	push	{r7}
341a27d6:	af00      	add	r7, sp, #0
	/* Set Exception handler */
	knl_exctbl[2]	= (UW)knl_nmi_handler;		/* 2: NMI Handler */
341a27d8:	4a10      	ldr	r2, [pc, #64]	@ (341a281c <knl_init_interrupt+0x48>)
341a27da:	4b11      	ldr	r3, [pc, #68]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27dc:	609a      	str	r2, [r3, #8]
	knl_exctbl[3]	= (UW)knl_hardfault_handler;	/* 3: Hard Fault Handler */
341a27de:	4a11      	ldr	r2, [pc, #68]	@ (341a2824 <knl_init_interrupt+0x50>)
341a27e0:	4b0f      	ldr	r3, [pc, #60]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27e2:	60da      	str	r2, [r3, #12]
	knl_exctbl[4]	= (UW)knl_memmanage_handler;	/* 4: MPU Fault Handler */
341a27e4:	4a10      	ldr	r2, [pc, #64]	@ (341a2828 <knl_init_interrupt+0x54>)
341a27e6:	4b0e      	ldr	r3, [pc, #56]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27e8:	611a      	str	r2, [r3, #16]
	knl_exctbl[5]	= (UW)knl_busfault_handler;	/* 5: Bus Fault Handler */
341a27ea:	4a10      	ldr	r2, [pc, #64]	@ (341a282c <knl_init_interrupt+0x58>)
341a27ec:	4b0c      	ldr	r3, [pc, #48]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27ee:	615a      	str	r2, [r3, #20]
	knl_exctbl[6]	= (UW)knl_usagefault_handler;	/* 6: Usage Fault Handler */
341a27f0:	4a0f      	ldr	r2, [pc, #60]	@ (341a2830 <knl_init_interrupt+0x5c>)
341a27f2:	4b0b      	ldr	r3, [pc, #44]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27f4:	619a      	str	r2, [r3, #24]

	knl_exctbl[11]	= (UW)knl_svcall_handler;	/* 11: Svcall */
341a27f6:	4a0f      	ldr	r2, [pc, #60]	@ (341a2834 <knl_init_interrupt+0x60>)
341a27f8:	4b09      	ldr	r3, [pc, #36]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a27fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	knl_exctbl[12]	= (UW)knl_debugmon_handler;	/* 12: Debug Monitor Handler */
341a27fc:	4a0e      	ldr	r2, [pc, #56]	@ (341a2838 <knl_init_interrupt+0x64>)
341a27fe:	4b08      	ldr	r3, [pc, #32]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a2800:	631a      	str	r2, [r3, #48]	@ 0x30

	knl_exctbl[14]	= (UW)knl_dispatch_entry;	/* 14: Pend SV */
341a2802:	4a0e      	ldr	r2, [pc, #56]	@ (341a283c <knl_init_interrupt+0x68>)
341a2804:	4b06      	ldr	r3, [pc, #24]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a2806:	639a      	str	r2, [r3, #56]	@ 0x38
	knl_exctbl[15]	= (UW)knl_systim_inthdr;	/* 15: Systick */
341a2808:	4a0d      	ldr	r2, [pc, #52]	@ (341a2840 <knl_init_interrupt+0x6c>)
341a280a:	4b05      	ldr	r3, [pc, #20]	@ (341a2820 <knl_init_interrupt+0x4c>)
341a280c:	63da      	str	r2, [r3, #60]	@ 0x3c

	return E_OK;
341a280e:	2300      	movs	r3, #0
}
341a2810:	4618      	mov	r0, r3
341a2812:	46bd      	mov	sp, r7
341a2814:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2818:	4770      	bx	lr
341a281a:	bf00      	nop
341a281c:	341a25f1 	.word	0x341a25f1
341a2820:	341c0400 	.word	0x341c0400
341a2824:	341a2605 	.word	0x341a2605
341a2828:	341a2669 	.word	0x341a2669
341a282c:	341a267d 	.word	0x341a267d
341a2830:	341a2691 	.word	0x341a2691
341a2834:	341a26a5 	.word	0x341a26a5
341a2838:	341a26b9 	.word	0x341a26b9
341a283c:	34180791 	.word	0x34180791
341a2840:	341a2755 	.word	0x341a2755

341a2844 <out_w>:
{
341a2844:	b480      	push	{r7}
341a2846:	b083      	sub	sp, #12
341a2848:	af00      	add	r7, sp, #0
341a284a:	6078      	str	r0, [r7, #4]
341a284c:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
341a284e:	687b      	ldr	r3, [r7, #4]
341a2850:	683a      	ldr	r2, [r7, #0]
341a2852:	601a      	str	r2, [r3, #0]
}
341a2854:	bf00      	nop
341a2856:	370c      	adds	r7, #12
341a2858:	46bd      	mov	sp, r7
341a285a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a285e:	4770      	bx	lr

341a2860 <in_w>:
{
341a2860:	b480      	push	{r7}
341a2862:	b083      	sub	sp, #12
341a2864:	af00      	add	r7, sp, #0
341a2866:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
341a2868:	687b      	ldr	r3, [r7, #4]
341a286a:	681b      	ldr	r3, [r3, #0]
}
341a286c:	4618      	mov	r0, r3
341a286e:	370c      	adds	r7, #12
341a2870:	46bd      	mov	sp, r7
341a2872:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2876:	4770      	bx	lr

341a2878 <knl_start_mtkernel>:
EXPORT void		*knl_sysmem_top	= 0;
EXPORT void		*knl_sysmem_end	= 0;
#endif

EXPORT void knl_start_mtkernel(void)
{
341a2878:	b580      	push	{r7, lr}
341a287a:	b084      	sub	sp, #16
341a287c:	af00      	add	r7, sp, #0
	UW	*src, *top;
	UW	reg;
	INT	i;

	disint();		// Disable Interrupt
341a287e:	f000 f904 	bl	341a2a8a <disint>

	knl_startup_hw();
341a2882:	f000 f89f 	bl	341a29c4 <knl_startup_hw>

	/* Copy exception handler (ROM -> RAM) */
	src = knl_exctbl_o = (UW*)in_w(SCB_VTOR);
341a2886:	4830      	ldr	r0, [pc, #192]	@ (341a2948 <knl_start_mtkernel+0xd0>)
341a2888:	f7ff ffea 	bl	341a2860 <in_w>
341a288c:	4603      	mov	r3, r0
341a288e:	461a      	mov	r2, r3
341a2890:	4b2e      	ldr	r3, [pc, #184]	@ (341a294c <knl_start_mtkernel+0xd4>)
341a2892:	601a      	str	r2, [r3, #0]
341a2894:	4b2d      	ldr	r3, [pc, #180]	@ (341a294c <knl_start_mtkernel+0xd4>)
341a2896:	681b      	ldr	r3, [r3, #0]
341a2898:	60fb      	str	r3, [r7, #12]
	top = (UW*)knl_exctbl;
341a289a:	4b2d      	ldr	r3, [pc, #180]	@ (341a2950 <knl_start_mtkernel+0xd8>)
341a289c:	60bb      	str	r3, [r7, #8]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
341a289e:	2300      	movs	r3, #0
341a28a0:	607b      	str	r3, [r7, #4]
341a28a2:	e00a      	b.n	341a28ba <knl_start_mtkernel+0x42>
		*top++ = *src++;
341a28a4:	68fa      	ldr	r2, [r7, #12]
341a28a6:	1d13      	adds	r3, r2, #4
341a28a8:	60fb      	str	r3, [r7, #12]
341a28aa:	68bb      	ldr	r3, [r7, #8]
341a28ac:	1d19      	adds	r1, r3, #4
341a28ae:	60b9      	str	r1, [r7, #8]
341a28b0:	6812      	ldr	r2, [r2, #0]
341a28b2:	601a      	str	r2, [r3, #0]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
341a28b4:	687b      	ldr	r3, [r7, #4]
341a28b6:	3301      	adds	r3, #1
341a28b8:	607b      	str	r3, [r7, #4]
341a28ba:	687b      	ldr	r3, [r7, #4]
341a28bc:	2bd3      	cmp	r3, #211	@ 0xd3
341a28be:	ddf1      	ble.n	341a28a4 <knl_start_mtkernel+0x2c>
	}
	out_w(SCB_VTOR, (UW)knl_exctbl);
341a28c0:	4b23      	ldr	r3, [pc, #140]	@ (341a2950 <knl_start_mtkernel+0xd8>)
341a28c2:	4619      	mov	r1, r3
341a28c4:	4820      	ldr	r0, [pc, #128]	@ (341a2948 <knl_start_mtkernel+0xd0>)
341a28c6:	f7ff ffbd 	bl	341a2844 <out_w>

	/* Configure exception priorities */
	reg = *(_UW*)SCB_AIRCR;
341a28ca:	4b22      	ldr	r3, [pc, #136]	@ (341a2954 <knl_start_mtkernel+0xdc>)
341a28cc:	681b      	ldr	r3, [r3, #0]
341a28ce:	603b      	str	r3, [r7, #0]
	reg = (reg & (~AIRCR_PRIGROUP3)) | AIRCR_PRIGROUP0;	// PRIGRP:SUBPRI = 4 : 4
341a28d0:	683b      	ldr	r3, [r7, #0]
341a28d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
341a28d6:	603b      	str	r3, [r7, #0]
	*(_UW*)SCB_AIRCR = (reg & 0x0000FFFF) | AIRCR_VECTKEY;
341a28d8:	683b      	ldr	r3, [r7, #0]
341a28da:	b29b      	uxth	r3, r3
341a28dc:	4a1d      	ldr	r2, [pc, #116]	@ (341a2954 <knl_start_mtkernel+0xdc>)
341a28de:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341a28e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341a28e6:	6013      	str	r3, [r2, #0]

	/* Enable UsageFault & BusFault & MemFault */
	out_w(SCB_SHCSR, SHCSR_USGFAULTENA | SHCSR_BUSFAULTENA | SHCSR_MEMFAULTENA);
341a28e8:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
341a28ec:	481a      	ldr	r0, [pc, #104]	@ (341a2958 <knl_start_mtkernel+0xe0>)
341a28ee:	f7ff ffa9 	bl	341a2844 <out_w>

	out_w(SCB_SHPR2, SCB_SHPR2_VAL);		// SVC pri = 0
341a28f2:	2100      	movs	r1, #0
341a28f4:	4819      	ldr	r0, [pc, #100]	@ (341a295c <knl_start_mtkernel+0xe4>)
341a28f6:	f7ff ffa5 	bl	341a2844 <out_w>
	out_w(SCB_SHPR3, SCB_SHPR3_VAL);		// SysTick = 1 , PendSV = 15
341a28fa:	4919      	ldr	r1, [pc, #100]	@ (341a2960 <knl_start_mtkernel+0xe8>)
341a28fc:	4819      	ldr	r0, [pc, #100]	@ (341a2964 <knl_start_mtkernel+0xec>)
341a28fe:	f7ff ffa1 	bl	341a2844 <out_w>

	knl_sysclk	= SystemCoreClock;		// Get System clock frequency
341a2902:	4b19      	ldr	r3, [pc, #100]	@ (341a2968 <knl_start_mtkernel+0xf0>)
341a2904:	681b      	ldr	r3, [r3, #0]
341a2906:	4a19      	ldr	r2, [pc, #100]	@ (341a296c <knl_start_mtkernel+0xf4>)
341a2908:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = knl_system_mem;
	knl_lowmem_limit = &knl_system_mem[SYSTEM_MEM_SIZE/sizeof(UW)];
#else
	/* Set System memory area */
	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {
		knl_lowmem_top = (UW*)INTERNAL_RAM_START;
341a290a:	4b19      	ldr	r3, [pc, #100]	@ (341a2970 <knl_start_mtkernel+0xf8>)
341a290c:	4a19      	ldr	r2, [pc, #100]	@ (341a2974 <knl_start_mtkernel+0xfc>)
341a290e:	601a      	str	r2, [r3, #0]
	} else {
		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;
	}
	if((UW)knl_lowmem_top < (UW)&_end) {
341a2910:	4b17      	ldr	r3, [pc, #92]	@ (341a2970 <knl_start_mtkernel+0xf8>)
341a2912:	681b      	ldr	r3, [r3, #0]
341a2914:	461a      	mov	r2, r3
341a2916:	4b18      	ldr	r3, [pc, #96]	@ (341a2978 <knl_start_mtkernel+0x100>)
341a2918:	429a      	cmp	r2, r3
341a291a:	d202      	bcs.n	341a2922 <knl_start_mtkernel+0xaa>
		knl_lowmem_top = (UW*)&_end;
341a291c:	4b14      	ldr	r3, [pc, #80]	@ (341a2970 <knl_start_mtkernel+0xf8>)
341a291e:	4a16      	ldr	r2, [pc, #88]	@ (341a2978 <knl_start_mtkernel+0x100>)
341a2920:	601a      	str	r2, [r3, #0]
	}

	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {
		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);
	} else {
		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);
341a2922:	4b16      	ldr	r3, [pc, #88]	@ (341a297c <knl_start_mtkernel+0x104>)
341a2924:	4a16      	ldr	r2, [pc, #88]	@ (341a2980 <knl_start_mtkernel+0x108>)
341a2926:	601a      	str	r2, [r3, #0]
	}
#endif

#if USE_DEBUG_SYSMEMINFO
	knl_sysmem_top	= knl_lowmem_top;
341a2928:	4b11      	ldr	r3, [pc, #68]	@ (341a2970 <knl_start_mtkernel+0xf8>)
341a292a:	681b      	ldr	r3, [r3, #0]
341a292c:	4a15      	ldr	r2, [pc, #84]	@ (341a2984 <knl_start_mtkernel+0x10c>)
341a292e:	6013      	str	r3, [r2, #0]
	knl_sysmem_end	= knl_lowmem_limit;
341a2930:	4b12      	ldr	r3, [pc, #72]	@ (341a297c <knl_start_mtkernel+0x104>)
341a2932:	681b      	ldr	r3, [r3, #0]
341a2934:	4a14      	ldr	r2, [pc, #80]	@ (341a2988 <knl_start_mtkernel+0x110>)
341a2936:	6013      	str	r3, [r2, #0]
#endif	// USE_DEBUG_MEMINFO
#endif	// USE_IMALLOC

	/* Temporarily disable stack pointer protection */
	// set_msplim((uint32_t)INTERNAL_RAM_START);
	Asm ("msr msplim, %0" : : "r" ((uint32_t)INTERNAL_RAM_START));
341a2938:	4b0e      	ldr	r3, [pc, #56]	@ (341a2974 <knl_start_mtkernel+0xfc>)
341a293a:	f383 880a 	msr	MSPLIM, r3

	/* Startup Kernel */
	knl_main();		// *** No return ****/
341a293e:	f7fc f923 	bl	3419eb88 <knl_main>
	while(1);		// guard - infinite loops
341a2942:	bf00      	nop
341a2944:	e7fd      	b.n	341a2942 <knl_start_mtkernel+0xca>
341a2946:	bf00      	nop
341a2948:	e000ed08 	.word	0xe000ed08
341a294c:	341c3568 	.word	0x341c3568
341a2950:	341c0400 	.word	0x341c0400
341a2954:	e000ed0c 	.word	0xe000ed0c
341a2958:	e000ed24 	.word	0xe000ed24
341a295c:	e000ed1c 	.word	0xe000ed1c
341a2960:	10f00000 	.word	0x10f00000
341a2964:	e000ed20 	.word	0xe000ed20
341a2968:	341c0064 	.word	0x341c0064
341a296c:	341c3564 	.word	0x341c3564
341a2970:	341c356c 	.word	0x341c356c
341a2974:	34000400 	.word	0x34000400
341a2978:	341c59a0 	.word	0x341c59a0
341a297c:	341c3570 	.word	0x341c3570
341a2980:	34200000 	.word	0x34200000
341a2984:	341c3574 	.word	0x341c3574
341a2988:	341c3578 	.word	0x341c3578

341a298c <knl_init_device>:
/*
 * Initialization before micro T-Kernel starts
 */

EXPORT ER knl_init_device( void )
{
341a298c:	b480      	push	{r7}
341a298e:	af00      	add	r7, sp, #0
	return E_OK;
341a2990:	2300      	movs	r3, #0
}
341a2992:	4618      	mov	r0, r3
341a2994:	46bd      	mov	sp, r7
341a2996:	f85d 7b04 	ldr.w	r7, [sp], #4
341a299a:	4770      	bx	lr

341a299c <knl_start_device>:
/*
 * Start processing after T-Kernel starts
 *	Called from the initial task contexts.
 */
EXPORT ER knl_start_device( void )
{
341a299c:	b480      	push	{r7}
341a299e:	b083      	sub	sp, #12
341a29a0:	af00      	add	r7, sp, #0
	ER	err	= E_OK;
341a29a2:	2300      	movs	r3, #0
341a29a4:	607b      	str	r3, [r7, #4]
	if(err < E_OK) return err;

#endif
#endif	/* DEVCNF_USE_HAL_ADC */

	return err;
341a29a6:	687b      	ldr	r3, [r7, #4]
}
341a29a8:	4618      	mov	r0, r3
341a29aa:	370c      	adds	r7, #12
341a29ac:	46bd      	mov	sp, r7
341a29ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341a29b2:	4770      	bx	lr

341a29b4 <knl_finish_device>:
 * System finalization
 *	Called just before system shutdown.
 *	Execute finalization that must be done before system shutdown.
 */
EXPORT ER knl_finish_device( void )
{
341a29b4:	b480      	push	{r7}
341a29b6:	af00      	add	r7, sp, #0
	return E_OK;
341a29b8:	2300      	movs	r3, #0
}
341a29ba:	4618      	mov	r0, r3
341a29bc:	46bd      	mov	sp, r7
341a29be:	f85d 7b04 	ldr.w	r7, [sp], #4
341a29c2:	4770      	bx	lr

341a29c4 <knl_startup_hw>:

/*
 * Startup Device
 */
EXPORT void knl_startup_hw(void)
{
341a29c4:	b480      	push	{r7}
341a29c6:	af00      	add	r7, sp, #0
#if USE_PTMR
	void knl_init_ptmr(void);
	knl_init_ptmr();
#endif
}
341a29c8:	bf00      	nop
341a29ca:	46bd      	mov	sp, r7
341a29cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341a29d0:	4770      	bx	lr

341a29d2 <knl_shutdown_hw>:
#if USE_SHUTDOWN
/*
 * Shutdown device
 */
EXPORT void knl_shutdown_hw( void )
{
341a29d2:	b580      	push	{r7, lr}
341a29d4:	af00      	add	r7, sp, #0
	disint();
341a29d6:	f000 f858 	bl	341a2a8a <disint>
	while(1);
341a29da:	bf00      	nop
341a29dc:	e7fd      	b.n	341a29da <knl_shutdown_hw+0x8>
	...

341a29e0 <knl_restart_hw>:
 *	mode = -1		reset and re-start	(Reset -> Boot -> Start)
 *	mode = -2		fast re-start		(Start)
 *	mode = -3		Normal re-start		(Boot -> Start)
 */
EXPORT ER knl_restart_hw( W mode )
{
341a29e0:	b580      	push	{r7, lr}
341a29e2:	b082      	sub	sp, #8
341a29e4:	af00      	add	r7, sp, #0
341a29e6:	6078      	str	r0, [r7, #4]
	switch(mode) {
341a29e8:	687b      	ldr	r3, [r7, #4]
341a29ea:	f1b3 3fff 	cmp.w	r3, #4294967295
341a29ee:	d00b      	beq.n	341a2a08 <knl_restart_hw+0x28>
341a29f0:	687b      	ldr	r3, [r7, #4]
341a29f2:	2b00      	cmp	r3, #0
341a29f4:	da1a      	bge.n	341a2a2c <knl_restart_hw+0x4c>
341a29f6:	687b      	ldr	r3, [r7, #4]
341a29f8:	f113 0f03 	cmn.w	r3, #3
341a29fc:	d010      	beq.n	341a2a20 <knl_restart_hw+0x40>
341a29fe:	687b      	ldr	r3, [r7, #4]
341a2a00:	f113 0f02 	cmn.w	r3, #2
341a2a04:	d006      	beq.n	341a2a14 <knl_restart_hw+0x34>
341a2a06:	e011      	b.n	341a2a2c <knl_restart_hw+0x4c>
	case -1: /* Reset and re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESET & RESTART >>\n");
341a2a08:	480b      	ldr	r0, [pc, #44]	@ (341a2a38 <knl_restart_hw+0x58>)
341a2a0a:	f7ff fa05 	bl	341a1e18 <tm_putstring>
		return E_NOSPT;
341a2a0e:	f06f 0308 	mvn.w	r3, #8
341a2a12:	e00d      	b.n	341a2a30 <knl_restart_hw+0x50>
	case -2: /* fast re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM FAST RESTART >>\n");
341a2a14:	4809      	ldr	r0, [pc, #36]	@ (341a2a3c <knl_restart_hw+0x5c>)
341a2a16:	f7ff f9ff 	bl	341a1e18 <tm_putstring>
		return E_NOSPT;
341a2a1a:	f06f 0308 	mvn.w	r3, #8
341a2a1e:	e007      	b.n	341a2a30 <knl_restart_hw+0x50>
	case -3: /* Normal re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESTART >>\n");
341a2a20:	4807      	ldr	r0, [pc, #28]	@ (341a2a40 <knl_restart_hw+0x60>)
341a2a22:	f7ff f9f9 	bl	341a1e18 <tm_putstring>
		return E_NOSPT;
341a2a26:	f06f 0308 	mvn.w	r3, #8
341a2a2a:	e001      	b.n	341a2a30 <knl_restart_hw+0x50>
	default:
		return E_PAR;
341a2a2c:	f06f 0310 	mvn.w	r3, #16
	}
}
341a2a30:	4618      	mov	r0, r3
341a2a32:	3708      	adds	r7, #8
341a2a34:	46bd      	mov	sp, r7
341a2a36:	bd80      	pop	{r7, pc}
341a2a38:	341a5944 	.word	0x341a5944
341a2a3c:	341a5964 	.word	0x341a5964
341a2a40:	341a5980 	.word	0x341a5980

341a2a44 <low_pow>:

/*
 * Switch to power-saving mode
 */
EXPORT void low_pow( void )
{
341a2a44:	b480      	push	{r7}
341a2a46:	af00      	add	r7, sp, #0
}
341a2a48:	bf00      	nop
341a2a4a:	46bd      	mov	sp, r7
341a2a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2a50:	4770      	bx	lr

341a2a52 <set_basepri>:

/*
 * Set Base Priority register
 */
EXPORT void set_basepri(UW intsts)
{	
341a2a52:	b480      	push	{r7}
341a2a54:	b083      	sub	sp, #12
341a2a56:	af00      	add	r7, sp, #0
341a2a58:	6078      	str	r0, [r7, #4]
	Asm("msr basepri, %0":: "r"(intsts));
341a2a5a:	687b      	ldr	r3, [r7, #4]
341a2a5c:	f383 8811 	msr	BASEPRI, r3
	Asm("isb");
341a2a60:	f3bf 8f6f 	isb	sy
}
341a2a64:	bf00      	nop
341a2a66:	370c      	adds	r7, #12
341a2a68:	46bd      	mov	sp, r7
341a2a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2a6e:	4770      	bx	lr

341a2a70 <get_basepri>:

/*
 * Get Base Priority register
 */
EXPORT UW get_basepri(void)
{
341a2a70:	b480      	push	{r7}
341a2a72:	b083      	sub	sp, #12
341a2a74:	af00      	add	r7, sp, #0
	UW	basepri;

	Asm("mrs %0, basepri": "=r"(basepri));
341a2a76:	f3ef 8311 	mrs	r3, BASEPRI
341a2a7a:	607b      	str	r3, [r7, #4]
	return basepri;
341a2a7c:	687b      	ldr	r3, [r7, #4]
}
341a2a7e:	4618      	mov	r0, r3
341a2a80:	370c      	adds	r7, #12
341a2a82:	46bd      	mov	sp, r7
341a2a84:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2a88:	4770      	bx	lr

341a2a8a <disint>:

/* 
 * Disable interrupt 
 */
EXPORT UW disint(void)
{
341a2a8a:	b480      	push	{r7}
341a2a8c:	b083      	sub	sp, #12
341a2a8e:	af00      	add	r7, sp, #0
	UW	intsts, maxint;

	maxint = INTPRI_VAL(INTPRI_MAX_EXTINT_PRI);
341a2a90:	2310      	movs	r3, #16
341a2a92:	607b      	str	r3, [r7, #4]
	Asm("mrs %0, basepri": "=r"(intsts));
341a2a94:	f3ef 8311 	mrs	r3, BASEPRI
341a2a98:	603b      	str	r3, [r7, #0]
	Asm("msr basepri, %0":: "r"(maxint));
341a2a9a:	687b      	ldr	r3, [r7, #4]
341a2a9c:	f383 8811 	msr	BASEPRI, r3

	return intsts;
341a2aa0:	683b      	ldr	r3, [r7, #0]
}
341a2aa2:	4618      	mov	r0, r3
341a2aa4:	370c      	adds	r7, #12
341a2aa6:	46bd      	mov	sp, r7
341a2aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2aac:	4770      	bx	lr

341a2aae <EnableInt_nvic>:

/*
 * Enable interrupt for NVIC
 */
EXPORT void EnableInt_nvic( UINT intno, INT level )
{
341a2aae:	b580      	push	{r7, lr}
341a2ab0:	b084      	sub	sp, #16
341a2ab2:	af00      	add	r7, sp, #0
341a2ab4:	6078      	str	r0, [r7, #4]
341a2ab6:	6039      	str	r1, [r7, #0]
	UINT	imask;
	
	DI(imask);
341a2ab8:	f7ff ffe7 	bl	341a2a8a <disint>
341a2abc:	60f8      	str	r0, [r7, #12]
	/* Set interrupt priority level. */
	*(_UB*)(NVIC_IPR(intno)) = (UB)INTPRI_GROUP(level, 0);
341a2abe:	683b      	ldr	r3, [r7, #0]
341a2ac0:	b2da      	uxtb	r2, r3
341a2ac2:	687b      	ldr	r3, [r7, #4]
341a2ac4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
341a2ac8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
341a2acc:	0112      	lsls	r2, r2, #4
341a2ace:	b2d2      	uxtb	r2, r2
341a2ad0:	701a      	strb	r2, [r3, #0]

	/* Enables the specified interrupt. */
	*(_UW*)(NVIC_ISER(intno)) = (0x01U << (intno % 32));
341a2ad2:	687b      	ldr	r3, [r7, #4]
341a2ad4:	f003 021f 	and.w	r2, r3, #31
341a2ad8:	687b      	ldr	r3, [r7, #4]
341a2ada:	095b      	lsrs	r3, r3, #5
341a2adc:	009b      	lsls	r3, r3, #2
341a2ade:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
341a2ae2:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
341a2ae6:	4619      	mov	r1, r3
341a2ae8:	2301      	movs	r3, #1
341a2aea:	4093      	lsls	r3, r2
341a2aec:	600b      	str	r3, [r1, #0]

	EI(imask);
341a2aee:	68f8      	ldr	r0, [r7, #12]
341a2af0:	f7ff ffaf 	bl	341a2a52 <set_basepri>
}
341a2af4:	bf00      	nop
341a2af6:	3710      	adds	r7, #16
341a2af8:	46bd      	mov	sp, r7
341a2afa:	bd80      	pop	{r7, pc}

341a2afc <ClearInt_nvic>:

/*
 * Clear interrupt for NVIC
 */
Inline void ClearInt_nvic( UINT intno )
{
341a2afc:	b480      	push	{r7}
341a2afe:	b083      	sub	sp, #12
341a2b00:	af00      	add	r7, sp, #0
341a2b02:	6078      	str	r0, [r7, #4]
	*(_UW*)(NVIC_ICPR(intno)) = (0x01U << (intno % 32));
341a2b04:	687b      	ldr	r3, [r7, #4]
341a2b06:	f003 021f 	and.w	r2, r3, #31
341a2b0a:	687b      	ldr	r3, [r7, #4]
341a2b0c:	095b      	lsrs	r3, r3, #5
341a2b0e:	0099      	lsls	r1, r3, #2
341a2b10:	4b05      	ldr	r3, [pc, #20]	@ (341a2b28 <ClearInt_nvic+0x2c>)
341a2b12:	440b      	add	r3, r1
341a2b14:	4619      	mov	r1, r3
341a2b16:	2301      	movs	r3, #1
341a2b18:	4093      	lsls	r3, r2
341a2b1a:	600b      	str	r3, [r1, #0]
}
341a2b1c:	bf00      	nop
341a2b1e:	370c      	adds	r7, #12
341a2b20:	46bd      	mov	sp, r7
341a2b22:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2b26:	4770      	bx	lr
341a2b28:	e000e280 	.word	0xe000e280

341a2b2c <EnableInt_exti>:
/*
 * EXTI (Extended interrupt controller) functions
 * 
 */
LOCAL void EnableInt_exti( UINT intno, INT level )
{
341a2b2c:	b480      	push	{r7}
341a2b2e:	b083      	sub	sp, #12
341a2b30:	af00      	add	r7, sp, #0
341a2b32:	6078      	str	r0, [r7, #4]
341a2b34:	6039      	str	r1, [r7, #0]
	*(_UW*)EXTI_IMR(intno>>5) |= (UW)(1<<(intno%32));
341a2b36:	687b      	ldr	r3, [r7, #4]
341a2b38:	095a      	lsrs	r2, r3, #5
341a2b3a:	4b0d      	ldr	r3, [pc, #52]	@ (341a2b70 <EnableInt_exti+0x44>)
341a2b3c:	4413      	add	r3, r2
341a2b3e:	011b      	lsls	r3, r3, #4
341a2b40:	681a      	ldr	r2, [r3, #0]
341a2b42:	687b      	ldr	r3, [r7, #4]
341a2b44:	f003 031f 	and.w	r3, r3, #31
341a2b48:	2101      	movs	r1, #1
341a2b4a:	fa01 f303 	lsl.w	r3, r1, r3
341a2b4e:	4618      	mov	r0, r3
341a2b50:	687b      	ldr	r3, [r7, #4]
341a2b52:	0959      	lsrs	r1, r3, #5
341a2b54:	4b06      	ldr	r3, [pc, #24]	@ (341a2b70 <EnableInt_exti+0x44>)
341a2b56:	440b      	add	r3, r1
341a2b58:	011b      	lsls	r3, r3, #4
341a2b5a:	4619      	mov	r1, r3
341a2b5c:	ea42 0300 	orr.w	r3, r2, r0
341a2b60:	600b      	str	r3, [r1, #0]
}
341a2b62:	bf00      	nop
341a2b64:	370c      	adds	r7, #12
341a2b66:	46bd      	mov	sp, r7
341a2b68:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2b6c:	4770      	bx	lr
341a2b6e:	bf00      	nop
341a2b70:	05602508 	.word	0x05602508

341a2b74 <ClearInt_exti>:
{
	*(_UW*)EXTI_IMR(intno>>5) &= ~(UW)(1<<(intno%32));
}

LOCAL void ClearInt_exti( UINT intno )
{
341a2b74:	b480      	push	{r7}
341a2b76:	b083      	sub	sp, #12
341a2b78:	af00      	add	r7, sp, #0
341a2b7a:	6078      	str	r0, [r7, #4]
	*(_UW*)EXTI_RPR(intno>>5) |= (UW)(1<<(intno%32));
341a2b7c:	687b      	ldr	r3, [r7, #4]
341a2b7e:	095b      	lsrs	r3, r3, #5
341a2b80:	015a      	lsls	r2, r3, #5
341a2b82:	4b17      	ldr	r3, [pc, #92]	@ (341a2be0 <ClearInt_exti+0x6c>)
341a2b84:	4413      	add	r3, r2
341a2b86:	681a      	ldr	r2, [r3, #0]
341a2b88:	687b      	ldr	r3, [r7, #4]
341a2b8a:	f003 031f 	and.w	r3, r3, #31
341a2b8e:	2101      	movs	r1, #1
341a2b90:	fa01 f303 	lsl.w	r3, r1, r3
341a2b94:	4618      	mov	r0, r3
341a2b96:	687b      	ldr	r3, [r7, #4]
341a2b98:	095b      	lsrs	r3, r3, #5
341a2b9a:	0159      	lsls	r1, r3, #5
341a2b9c:	4b10      	ldr	r3, [pc, #64]	@ (341a2be0 <ClearInt_exti+0x6c>)
341a2b9e:	440b      	add	r3, r1
341a2ba0:	4619      	mov	r1, r3
341a2ba2:	ea42 0300 	orr.w	r3, r2, r0
341a2ba6:	600b      	str	r3, [r1, #0]
	*(_UW*)EXTI_FPR(intno>>5) |= (UW)(1<<(intno%32));
341a2ba8:	687b      	ldr	r3, [r7, #4]
341a2baa:	095b      	lsrs	r3, r3, #5
341a2bac:	015a      	lsls	r2, r3, #5
341a2bae:	4b0d      	ldr	r3, [pc, #52]	@ (341a2be4 <ClearInt_exti+0x70>)
341a2bb0:	4413      	add	r3, r2
341a2bb2:	681a      	ldr	r2, [r3, #0]
341a2bb4:	687b      	ldr	r3, [r7, #4]
341a2bb6:	f003 031f 	and.w	r3, r3, #31
341a2bba:	2101      	movs	r1, #1
341a2bbc:	fa01 f303 	lsl.w	r3, r1, r3
341a2bc0:	4618      	mov	r0, r3
341a2bc2:	687b      	ldr	r3, [r7, #4]
341a2bc4:	095b      	lsrs	r3, r3, #5
341a2bc6:	0159      	lsls	r1, r3, #5
341a2bc8:	4b06      	ldr	r3, [pc, #24]	@ (341a2be4 <ClearInt_exti+0x70>)
341a2bca:	440b      	add	r3, r1
341a2bcc:	4619      	mov	r1, r3
341a2bce:	ea42 0300 	orr.w	r3, r2, r0
341a2bd2:	600b      	str	r3, [r1, #0]
}
341a2bd4:	bf00      	nop
341a2bd6:	370c      	adds	r7, #12
341a2bd8:	46bd      	mov	sp, r7
341a2bda:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2bde:	4770      	bx	lr
341a2be0:	5602500c 	.word	0x5602500c
341a2be4:	56025010 	.word	0x56025010

341a2be8 <SetIntMode_exti>:

	return pif?TRUE:FALSE;
}

LOCAL void SetIntMode_exti(UINT intno, UINT mode)
{
341a2be8:	b480      	push	{r7}
341a2bea:	b083      	sub	sp, #12
341a2bec:	af00      	add	r7, sp, #0
341a2bee:	6078      	str	r0, [r7, #4]
341a2bf0:	6039      	str	r1, [r7, #0]
	if(mode & IM_HI) {
341a2bf2:	683b      	ldr	r3, [r7, #0]
341a2bf4:	f003 0302 	and.w	r3, r3, #2
341a2bf8:	2b00      	cmp	r3, #0
341a2bfa:	d01a      	beq.n	341a2c32 <SetIntMode_exti+0x4a>
		*(_UW*)EXTI_RTSR(intno>>5) |= (UW)(1<<(intno%32));
341a2bfc:	687b      	ldr	r3, [r7, #4]
341a2bfe:	095b      	lsrs	r3, r3, #5
341a2c00:	f103 732c 	add.w	r3, r3, #45088768	@ 0x2b00000
341a2c04:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
341a2c08:	015b      	lsls	r3, r3, #5
341a2c0a:	681a      	ldr	r2, [r3, #0]
341a2c0c:	687b      	ldr	r3, [r7, #4]
341a2c0e:	f003 031f 	and.w	r3, r3, #31
341a2c12:	2101      	movs	r1, #1
341a2c14:	fa01 f303 	lsl.w	r3, r1, r3
341a2c18:	4618      	mov	r0, r3
341a2c1a:	687b      	ldr	r3, [r7, #4]
341a2c1c:	095b      	lsrs	r3, r3, #5
341a2c1e:	f103 732c 	add.w	r3, r3, #45088768	@ 0x2b00000
341a2c22:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
341a2c26:	015b      	lsls	r3, r3, #5
341a2c28:	4619      	mov	r1, r3
341a2c2a:	ea42 0300 	orr.w	r3, r2, r0
341a2c2e:	600b      	str	r3, [r1, #0]
341a2c30:	e019      	b.n	341a2c66 <SetIntMode_exti+0x7e>
	} else {
		*(_UW*)EXTI_RTSR(intno>>5) &= ~(UW)(1<<(intno%32));
341a2c32:	687b      	ldr	r3, [r7, #4]
341a2c34:	095b      	lsrs	r3, r3, #5
341a2c36:	f103 732c 	add.w	r3, r3, #45088768	@ 0x2b00000
341a2c3a:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
341a2c3e:	015b      	lsls	r3, r3, #5
341a2c40:	6819      	ldr	r1, [r3, #0]
341a2c42:	687b      	ldr	r3, [r7, #4]
341a2c44:	f003 031f 	and.w	r3, r3, #31
341a2c48:	2201      	movs	r2, #1
341a2c4a:	fa02 f303 	lsl.w	r3, r2, r3
341a2c4e:	43da      	mvns	r2, r3
341a2c50:	687b      	ldr	r3, [r7, #4]
341a2c52:	095b      	lsrs	r3, r3, #5
341a2c54:	f103 732c 	add.w	r3, r3, #45088768	@ 0x2b00000
341a2c58:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
341a2c5c:	015b      	lsls	r3, r3, #5
341a2c5e:	4618      	mov	r0, r3
341a2c60:	ea01 0302 	and.w	r3, r1, r2
341a2c64:	6003      	str	r3, [r0, #0]
	}

	if(mode & IM_LOW) {
341a2c66:	683b      	ldr	r3, [r7, #0]
341a2c68:	f003 0301 	and.w	r3, r3, #1
341a2c6c:	2b00      	cmp	r3, #0
341a2c6e:	d016      	beq.n	341a2c9e <SetIntMode_exti+0xb6>
		*(_UW*)EXTI_FTSR(intno>>5) |= (UW)(1<<(intno%32));
341a2c70:	687b      	ldr	r3, [r7, #4]
341a2c72:	095b      	lsrs	r3, r3, #5
341a2c74:	015a      	lsls	r2, r3, #5
341a2c76:	4b18      	ldr	r3, [pc, #96]	@ (341a2cd8 <SetIntMode_exti+0xf0>)
341a2c78:	4413      	add	r3, r2
341a2c7a:	681a      	ldr	r2, [r3, #0]
341a2c7c:	687b      	ldr	r3, [r7, #4]
341a2c7e:	f003 031f 	and.w	r3, r3, #31
341a2c82:	2101      	movs	r1, #1
341a2c84:	fa01 f303 	lsl.w	r3, r1, r3
341a2c88:	4618      	mov	r0, r3
341a2c8a:	687b      	ldr	r3, [r7, #4]
341a2c8c:	095b      	lsrs	r3, r3, #5
341a2c8e:	0159      	lsls	r1, r3, #5
341a2c90:	4b11      	ldr	r3, [pc, #68]	@ (341a2cd8 <SetIntMode_exti+0xf0>)
341a2c92:	440b      	add	r3, r1
341a2c94:	4619      	mov	r1, r3
341a2c96:	ea42 0300 	orr.w	r3, r2, r0
341a2c9a:	600b      	str	r3, [r1, #0]
	} else {
		*(_UW*)EXTI_FTSR(intno>>5) &= ~(UW)(1<<(intno%32));
	}
}
341a2c9c:	e015      	b.n	341a2cca <SetIntMode_exti+0xe2>
		*(_UW*)EXTI_FTSR(intno>>5) &= ~(UW)(1<<(intno%32));
341a2c9e:	687b      	ldr	r3, [r7, #4]
341a2ca0:	095b      	lsrs	r3, r3, #5
341a2ca2:	015a      	lsls	r2, r3, #5
341a2ca4:	4b0c      	ldr	r3, [pc, #48]	@ (341a2cd8 <SetIntMode_exti+0xf0>)
341a2ca6:	4413      	add	r3, r2
341a2ca8:	6819      	ldr	r1, [r3, #0]
341a2caa:	687b      	ldr	r3, [r7, #4]
341a2cac:	f003 031f 	and.w	r3, r3, #31
341a2cb0:	2201      	movs	r2, #1
341a2cb2:	fa02 f303 	lsl.w	r3, r2, r3
341a2cb6:	43da      	mvns	r2, r3
341a2cb8:	687b      	ldr	r3, [r7, #4]
341a2cba:	095b      	lsrs	r3, r3, #5
341a2cbc:	0158      	lsls	r0, r3, #5
341a2cbe:	4b06      	ldr	r3, [pc, #24]	@ (341a2cd8 <SetIntMode_exti+0xf0>)
341a2cc0:	4403      	add	r3, r0
341a2cc2:	4618      	mov	r0, r3
341a2cc4:	ea01 0302 	and.w	r3, r1, r2
341a2cc8:	6003      	str	r3, [r0, #0]
}
341a2cca:	bf00      	nop
341a2ccc:	370c      	adds	r7, #12
341a2cce:	46bd      	mov	sp, r7
341a2cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2cd4:	4770      	bx	lr
341a2cd6:	bf00      	nop
341a2cd8:	56025004 	.word	0x56025004

341a2cdc <EnableInt>:
 */
/*
 * Enable interrupt 
 */
EXPORT void EnableInt( UINT intno, INT level )
{
341a2cdc:	b580      	push	{r7, lr}
341a2cde:	b082      	sub	sp, #8
341a2ce0:	af00      	add	r7, sp, #0
341a2ce2:	6078      	str	r0, [r7, #4]
341a2ce4:	6039      	str	r1, [r7, #0]
	if( intno <= MAX_NVIC_INTNO) {
341a2ce6:	687b      	ldr	r3, [r7, #4]
341a2ce8:	2bc3      	cmp	r3, #195	@ 0xc3
341a2cea:	d804      	bhi.n	341a2cf6 <EnableInt+0x1a>
		EnableInt_nvic( intno, level);
341a2cec:	6839      	ldr	r1, [r7, #0]
341a2cee:	6878      	ldr	r0, [r7, #4]
341a2cf0:	f7ff fedd 	bl	341a2aae <EnableInt_nvic>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
		EnableInt_exti( intno - MIN_EXTI_INTNO, level);
	}
}
341a2cf4:	e00e      	b.n	341a2d14 <EnableInt+0x38>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
341a2cf6:	687b      	ldr	r3, [r7, #4]
341a2cf8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
341a2cfc:	d30a      	bcc.n	341a2d14 <EnableInt+0x38>
341a2cfe:	687b      	ldr	r3, [r7, #4]
341a2d00:	f5b3 7fbd 	cmp.w	r3, #378	@ 0x17a
341a2d04:	d206      	bcs.n	341a2d14 <EnableInt+0x38>
		EnableInt_exti( intno - MIN_EXTI_INTNO, level);
341a2d06:	687b      	ldr	r3, [r7, #4]
341a2d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
341a2d0c:	6839      	ldr	r1, [r7, #0]
341a2d0e:	4618      	mov	r0, r3
341a2d10:	f7ff ff0c 	bl	341a2b2c <EnableInt_exti>
}
341a2d14:	bf00      	nop
341a2d16:	3708      	adds	r7, #8
341a2d18:	46bd      	mov	sp, r7
341a2d1a:	bd80      	pop	{r7, pc}

341a2d1c <ClearInt>:

/*
 * Clear interrupt
 */
EXPORT void ClearInt(UINT intno)
{
341a2d1c:	b580      	push	{r7, lr}
341a2d1e:	b082      	sub	sp, #8
341a2d20:	af00      	add	r7, sp, #0
341a2d22:	6078      	str	r0, [r7, #4]
	if( intno <= MAX_NVIC_INTNO) {
341a2d24:	687b      	ldr	r3, [r7, #4]
341a2d26:	2bc3      	cmp	r3, #195	@ 0xc3
341a2d28:	d803      	bhi.n	341a2d32 <ClearInt+0x16>
		ClearInt_nvic( intno);
341a2d2a:	6878      	ldr	r0, [r7, #4]
341a2d2c:	f7ff fee6 	bl	341a2afc <ClearInt_nvic>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
		ClearInt_exti( intno - MIN_EXTI_INTNO);
	}
}
341a2d30:	e00d      	b.n	341a2d4e <ClearInt+0x32>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
341a2d32:	687b      	ldr	r3, [r7, #4]
341a2d34:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
341a2d38:	d309      	bcc.n	341a2d4e <ClearInt+0x32>
341a2d3a:	687b      	ldr	r3, [r7, #4]
341a2d3c:	f5b3 7fbd 	cmp.w	r3, #378	@ 0x17a
341a2d40:	d205      	bcs.n	341a2d4e <ClearInt+0x32>
		ClearInt_exti( intno - MIN_EXTI_INTNO);
341a2d42:	687b      	ldr	r3, [r7, #4]
341a2d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
341a2d48:	4618      	mov	r0, r3
341a2d4a:	f7ff ff13 	bl	341a2b74 <ClearInt_exti>
}
341a2d4e:	bf00      	nop
341a2d50:	3708      	adds	r7, #8
341a2d52:	46bd      	mov	sp, r7
341a2d54:	bd80      	pop	{r7, pc}

341a2d56 <SetIntMode>:

/*
 * Set interrupt mode
 */
EXPORT void SetIntMode(UINT intno, UINT mode)
{
341a2d56:	b580      	push	{r7, lr}
341a2d58:	b082      	sub	sp, #8
341a2d5a:	af00      	add	r7, sp, #0
341a2d5c:	6078      	str	r0, [r7, #4]
341a2d5e:	6039      	str	r1, [r7, #0]
	if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
341a2d60:	687b      	ldr	r3, [r7, #4]
341a2d62:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
341a2d66:	d30a      	bcc.n	341a2d7e <SetIntMode+0x28>
341a2d68:	687b      	ldr	r3, [r7, #4]
341a2d6a:	f5b3 7fbd 	cmp.w	r3, #378	@ 0x17a
341a2d6e:	d206      	bcs.n	341a2d7e <SetIntMode+0x28>
		SetIntMode_exti( intno - MIN_EXTI_INTNO, mode);
341a2d70:	687b      	ldr	r3, [r7, #4]
341a2d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
341a2d76:	6839      	ldr	r1, [r7, #0]
341a2d78:	4618      	mov	r0, r3
341a2d7a:	f7ff ff35 	bl	341a2be8 <SetIntMode_exti>
	}
}
341a2d7e:	bf00      	nop
341a2d80:	3708      	adds	r7, #8
341a2d82:	46bd      	mov	sp, r7
341a2d84:	bd80      	pop	{r7, pc}
	...

341a2d88 <tm_snd_dat>:

/* Communication speed */
#define UART_BAUD	(115200)			/* 115200 bps */

EXPORT	void	tm_snd_dat( const UB* buf, INT size )
{
341a2d88:	b480      	push	{r7}
341a2d8a:	b085      	sub	sp, #20
341a2d8c:	af00      	add	r7, sp, #0
341a2d8e:	6078      	str	r0, [r7, #4]
341a2d90:	6039      	str	r1, [r7, #0]
	UB	*b;

	for( b = (UB *)buf; size > 0; size--, b++ ){
341a2d92:	687b      	ldr	r3, [r7, #4]
341a2d94:	60fb      	str	r3, [r7, #12]
341a2d96:	e017      	b.n	341a2dc8 <tm_snd_dat+0x40>
		while ((UART_ISR & ISR_TXE) == 0 );
341a2d98:	bf00      	nop
341a2d9a:	4b10      	ldr	r3, [pc, #64]	@ (341a2ddc <tm_snd_dat+0x54>)
341a2d9c:	681b      	ldr	r3, [r3, #0]
341a2d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341a2da2:	2b00      	cmp	r3, #0
341a2da4:	d0f9      	beq.n	341a2d9a <tm_snd_dat+0x12>
		UART_TDR = *b;
341a2da6:	68fb      	ldr	r3, [r7, #12]
341a2da8:	781a      	ldrb	r2, [r3, #0]
341a2daa:	4b0d      	ldr	r3, [pc, #52]	@ (341a2de0 <tm_snd_dat+0x58>)
341a2dac:	601a      	str	r2, [r3, #0]
		while ((UART_ISR & ISR_TC) == 0 );
341a2dae:	bf00      	nop
341a2db0:	4b0a      	ldr	r3, [pc, #40]	@ (341a2ddc <tm_snd_dat+0x54>)
341a2db2:	681b      	ldr	r3, [r3, #0]
341a2db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341a2db8:	2b00      	cmp	r3, #0
341a2dba:	d0f9      	beq.n	341a2db0 <tm_snd_dat+0x28>
	for( b = (UB *)buf; size > 0; size--, b++ ){
341a2dbc:	683b      	ldr	r3, [r7, #0]
341a2dbe:	3b01      	subs	r3, #1
341a2dc0:	603b      	str	r3, [r7, #0]
341a2dc2:	68fb      	ldr	r3, [r7, #12]
341a2dc4:	3301      	adds	r3, #1
341a2dc6:	60fb      	str	r3, [r7, #12]
341a2dc8:	683b      	ldr	r3, [r7, #0]
341a2dca:	2b00      	cmp	r3, #0
341a2dcc:	dce4      	bgt.n	341a2d98 <tm_snd_dat+0x10>
	}
}
341a2dce:	bf00      	nop
341a2dd0:	bf00      	nop
341a2dd2:	3714      	adds	r7, #20
341a2dd4:	46bd      	mov	sp, r7
341a2dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2dda:	4770      	bx	lr
341a2ddc:	5200101c 	.word	0x5200101c
341a2de0:	52001028 	.word	0x52001028

341a2de4 <tm_com_init>:
}

UW get_pclk1(void);

EXPORT	void	tm_com_init(void)
{
341a2de4:	b480      	push	{r7}
341a2de6:	af00      	add	r7, sp, #0
	/* Initialize serial communication. Disable all interrupt. */
	UART_CR1 = 0;		/* 8bit, Non parity (Reset value) */
341a2de8:	4b0a      	ldr	r3, [pc, #40]	@ (341a2e14 <tm_com_init+0x30>)
341a2dea:	2200      	movs	r2, #0
341a2dec:	601a      	str	r2, [r3, #0]
	UART_CR2 = 0;		/* Stop bit 1 (Reset value) */
341a2dee:	4b0a      	ldr	r3, [pc, #40]	@ (341a2e18 <tm_com_init+0x34>)
341a2df0:	2200      	movs	r2, #0
341a2df2:	601a      	str	r2, [r3, #0]
	UART_CR3 = 0;		/* No hard flow control (Reset value) */
341a2df4:	4b09      	ldr	r3, [pc, #36]	@ (341a2e1c <tm_com_init+0x38>)
341a2df6:	2200      	movs	r2, #0
341a2df8:	601a      	str	r2, [r3, #0]
	UART_BRR = 0x022C;	/* Set baud rate */
341a2dfa:	4b09      	ldr	r3, [pc, #36]	@ (341a2e20 <tm_com_init+0x3c>)
341a2dfc:	f44f 720b 	mov.w	r2, #556	@ 0x22c
341a2e00:	601a      	str	r2, [r3, #0]

	UART_CR1 = CR1_UE | CR1_RE |CR1_TE;	/* Start UART */
341a2e02:	4b04      	ldr	r3, [pc, #16]	@ (341a2e14 <tm_com_init+0x30>)
341a2e04:	220d      	movs	r2, #13
341a2e06:	601a      	str	r2, [r3, #0]
}
341a2e08:	bf00      	nop
341a2e0a:	46bd      	mov	sp, r7
341a2e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
341a2e10:	4770      	bx	lr
341a2e12:	bf00      	nop
341a2e14:	52001000 	.word	0x52001000
341a2e18:	52001004 	.word	0x52001004
341a2e1c:	52001008 	.word	0x52001008
341a2e20:	5200100c 	.word	0x5200100c

341a2e24 <std>:
341a2e24:	2300      	movs	r3, #0
341a2e26:	b510      	push	{r4, lr}
341a2e28:	4604      	mov	r4, r0
341a2e2a:	6083      	str	r3, [r0, #8]
341a2e2c:	8181      	strh	r1, [r0, #12]
341a2e2e:	4619      	mov	r1, r3
341a2e30:	6643      	str	r3, [r0, #100]	@ 0x64
341a2e32:	81c2      	strh	r2, [r0, #14]
341a2e34:	2208      	movs	r2, #8
341a2e36:	6183      	str	r3, [r0, #24]
341a2e38:	e9c0 3300 	strd	r3, r3, [r0]
341a2e3c:	e9c0 3304 	strd	r3, r3, [r0, #16]
341a2e40:	305c      	adds	r0, #92	@ 0x5c
341a2e42:	f000 fa2f 	bl	341a32a4 <memset>
341a2e46:	4b0d      	ldr	r3, [pc, #52]	@ (341a2e7c <std+0x58>)
341a2e48:	6224      	str	r4, [r4, #32]
341a2e4a:	6263      	str	r3, [r4, #36]	@ 0x24
341a2e4c:	4b0c      	ldr	r3, [pc, #48]	@ (341a2e80 <std+0x5c>)
341a2e4e:	62a3      	str	r3, [r4, #40]	@ 0x28
341a2e50:	4b0c      	ldr	r3, [pc, #48]	@ (341a2e84 <std+0x60>)
341a2e52:	62e3      	str	r3, [r4, #44]	@ 0x2c
341a2e54:	4b0c      	ldr	r3, [pc, #48]	@ (341a2e88 <std+0x64>)
341a2e56:	6323      	str	r3, [r4, #48]	@ 0x30
341a2e58:	4b0c      	ldr	r3, [pc, #48]	@ (341a2e8c <std+0x68>)
341a2e5a:	429c      	cmp	r4, r3
341a2e5c:	d006      	beq.n	341a2e6c <std+0x48>
341a2e5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
341a2e62:	4294      	cmp	r4, r2
341a2e64:	d002      	beq.n	341a2e6c <std+0x48>
341a2e66:	33d0      	adds	r3, #208	@ 0xd0
341a2e68:	429c      	cmp	r4, r3
341a2e6a:	d105      	bne.n	341a2e78 <std+0x54>
341a2e6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
341a2e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341a2e74:	f000 ba8e 	b.w	341a3394 <__retarget_lock_init_recursive>
341a2e78:	bd10      	pop	{r4, pc}
341a2e7a:	bf00      	nop
341a2e7c:	341a30f5 	.word	0x341a30f5
341a2e80:	341a3117 	.word	0x341a3117
341a2e84:	341a314f 	.word	0x341a314f
341a2e88:	341a3173 	.word	0x341a3173
341a2e8c:	341c357c 	.word	0x341c357c

341a2e90 <stdio_exit_handler>:
341a2e90:	4a02      	ldr	r2, [pc, #8]	@ (341a2e9c <stdio_exit_handler+0xc>)
341a2e92:	4903      	ldr	r1, [pc, #12]	@ (341a2ea0 <stdio_exit_handler+0x10>)
341a2e94:	4803      	ldr	r0, [pc, #12]	@ (341a2ea4 <stdio_exit_handler+0x14>)
341a2e96:	f000 b869 	b.w	341a2f6c <_fwalk_sglue>
341a2e9a:	bf00      	nop
341a2e9c:	341c0138 	.word	0x341c0138
341a2ea0:	341a3f05 	.word	0x341a3f05
341a2ea4:	341c0148 	.word	0x341c0148

341a2ea8 <cleanup_stdio>:
341a2ea8:	6841      	ldr	r1, [r0, #4]
341a2eaa:	4b0c      	ldr	r3, [pc, #48]	@ (341a2edc <cleanup_stdio+0x34>)
341a2eac:	4299      	cmp	r1, r3
341a2eae:	b510      	push	{r4, lr}
341a2eb0:	4604      	mov	r4, r0
341a2eb2:	d001      	beq.n	341a2eb8 <cleanup_stdio+0x10>
341a2eb4:	f001 f826 	bl	341a3f04 <_fflush_r>
341a2eb8:	68a1      	ldr	r1, [r4, #8]
341a2eba:	4b09      	ldr	r3, [pc, #36]	@ (341a2ee0 <cleanup_stdio+0x38>)
341a2ebc:	4299      	cmp	r1, r3
341a2ebe:	d002      	beq.n	341a2ec6 <cleanup_stdio+0x1e>
341a2ec0:	4620      	mov	r0, r4
341a2ec2:	f001 f81f 	bl	341a3f04 <_fflush_r>
341a2ec6:	68e1      	ldr	r1, [r4, #12]
341a2ec8:	4b06      	ldr	r3, [pc, #24]	@ (341a2ee4 <cleanup_stdio+0x3c>)
341a2eca:	4299      	cmp	r1, r3
341a2ecc:	d004      	beq.n	341a2ed8 <cleanup_stdio+0x30>
341a2ece:	4620      	mov	r0, r4
341a2ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341a2ed4:	f001 b816 	b.w	341a3f04 <_fflush_r>
341a2ed8:	bd10      	pop	{r4, pc}
341a2eda:	bf00      	nop
341a2edc:	341c357c 	.word	0x341c357c
341a2ee0:	341c35e4 	.word	0x341c35e4
341a2ee4:	341c364c 	.word	0x341c364c

341a2ee8 <global_stdio_init.part.0>:
341a2ee8:	b510      	push	{r4, lr}
341a2eea:	4b0b      	ldr	r3, [pc, #44]	@ (341a2f18 <global_stdio_init.part.0+0x30>)
341a2eec:	2104      	movs	r1, #4
341a2eee:	4c0b      	ldr	r4, [pc, #44]	@ (341a2f1c <global_stdio_init.part.0+0x34>)
341a2ef0:	4a0b      	ldr	r2, [pc, #44]	@ (341a2f20 <global_stdio_init.part.0+0x38>)
341a2ef2:	4620      	mov	r0, r4
341a2ef4:	601a      	str	r2, [r3, #0]
341a2ef6:	2200      	movs	r2, #0
341a2ef8:	f7ff ff94 	bl	341a2e24 <std>
341a2efc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
341a2f00:	2201      	movs	r2, #1
341a2f02:	2109      	movs	r1, #9
341a2f04:	f7ff ff8e 	bl	341a2e24 <std>
341a2f08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
341a2f0c:	2202      	movs	r2, #2
341a2f0e:	2112      	movs	r1, #18
341a2f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341a2f14:	f7ff bf86 	b.w	341a2e24 <std>
341a2f18:	341c36b4 	.word	0x341c36b4
341a2f1c:	341c357c 	.word	0x341c357c
341a2f20:	341a2e91 	.word	0x341a2e91

341a2f24 <__sfp_lock_acquire>:
341a2f24:	4801      	ldr	r0, [pc, #4]	@ (341a2f2c <__sfp_lock_acquire+0x8>)
341a2f26:	f000 ba36 	b.w	341a3396 <__retarget_lock_acquire_recursive>
341a2f2a:	bf00      	nop
341a2f2c:	341c36bd 	.word	0x341c36bd

341a2f30 <__sfp_lock_release>:
341a2f30:	4801      	ldr	r0, [pc, #4]	@ (341a2f38 <__sfp_lock_release+0x8>)
341a2f32:	f000 ba31 	b.w	341a3398 <__retarget_lock_release_recursive>
341a2f36:	bf00      	nop
341a2f38:	341c36bd 	.word	0x341c36bd

341a2f3c <__sinit>:
341a2f3c:	b510      	push	{r4, lr}
341a2f3e:	4604      	mov	r4, r0
341a2f40:	f7ff fff0 	bl	341a2f24 <__sfp_lock_acquire>
341a2f44:	6a23      	ldr	r3, [r4, #32]
341a2f46:	b11b      	cbz	r3, 341a2f50 <__sinit+0x14>
341a2f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341a2f4c:	f7ff bff0 	b.w	341a2f30 <__sfp_lock_release>
341a2f50:	4b04      	ldr	r3, [pc, #16]	@ (341a2f64 <__sinit+0x28>)
341a2f52:	6223      	str	r3, [r4, #32]
341a2f54:	4b04      	ldr	r3, [pc, #16]	@ (341a2f68 <__sinit+0x2c>)
341a2f56:	681b      	ldr	r3, [r3, #0]
341a2f58:	2b00      	cmp	r3, #0
341a2f5a:	d1f5      	bne.n	341a2f48 <__sinit+0xc>
341a2f5c:	f7ff ffc4 	bl	341a2ee8 <global_stdio_init.part.0>
341a2f60:	e7f2      	b.n	341a2f48 <__sinit+0xc>
341a2f62:	bf00      	nop
341a2f64:	341a2ea9 	.word	0x341a2ea9
341a2f68:	341c36b4 	.word	0x341c36b4

341a2f6c <_fwalk_sglue>:
341a2f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
341a2f70:	4607      	mov	r7, r0
341a2f72:	4688      	mov	r8, r1
341a2f74:	4614      	mov	r4, r2
341a2f76:	2600      	movs	r6, #0
341a2f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
341a2f7c:	f1b9 0901 	subs.w	r9, r9, #1
341a2f80:	d505      	bpl.n	341a2f8e <_fwalk_sglue+0x22>
341a2f82:	6824      	ldr	r4, [r4, #0]
341a2f84:	2c00      	cmp	r4, #0
341a2f86:	d1f7      	bne.n	341a2f78 <_fwalk_sglue+0xc>
341a2f88:	4630      	mov	r0, r6
341a2f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
341a2f8e:	89ab      	ldrh	r3, [r5, #12]
341a2f90:	2b01      	cmp	r3, #1
341a2f92:	d907      	bls.n	341a2fa4 <_fwalk_sglue+0x38>
341a2f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
341a2f98:	3301      	adds	r3, #1
341a2f9a:	d003      	beq.n	341a2fa4 <_fwalk_sglue+0x38>
341a2f9c:	4629      	mov	r1, r5
341a2f9e:	4638      	mov	r0, r7
341a2fa0:	47c0      	blx	r8
341a2fa2:	4306      	orrs	r6, r0
341a2fa4:	3568      	adds	r5, #104	@ 0x68
341a2fa6:	e7e9      	b.n	341a2f7c <_fwalk_sglue+0x10>

341a2fa8 <iprintf>:
341a2fa8:	b40f      	push	{r0, r1, r2, r3}
341a2faa:	b507      	push	{r0, r1, r2, lr}
341a2fac:	4906      	ldr	r1, [pc, #24]	@ (341a2fc8 <iprintf+0x20>)
341a2fae:	ab04      	add	r3, sp, #16
341a2fb0:	6808      	ldr	r0, [r1, #0]
341a2fb2:	f853 2b04 	ldr.w	r2, [r3], #4
341a2fb6:	6881      	ldr	r1, [r0, #8]
341a2fb8:	9301      	str	r3, [sp, #4]
341a2fba:	f000 fc77 	bl	341a38ac <_vfiprintf_r>
341a2fbe:	b003      	add	sp, #12
341a2fc0:	f85d eb04 	ldr.w	lr, [sp], #4
341a2fc4:	b004      	add	sp, #16
341a2fc6:	4770      	bx	lr
341a2fc8:	341c0144 	.word	0x341c0144

341a2fcc <_puts_r>:
341a2fcc:	6a03      	ldr	r3, [r0, #32]
341a2fce:	b570      	push	{r4, r5, r6, lr}
341a2fd0:	4605      	mov	r5, r0
341a2fd2:	460e      	mov	r6, r1
341a2fd4:	6884      	ldr	r4, [r0, #8]
341a2fd6:	b90b      	cbnz	r3, 341a2fdc <_puts_r+0x10>
341a2fd8:	f7ff ffb0 	bl	341a2f3c <__sinit>
341a2fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341a2fde:	07db      	lsls	r3, r3, #31
341a2fe0:	d405      	bmi.n	341a2fee <_puts_r+0x22>
341a2fe2:	89a3      	ldrh	r3, [r4, #12]
341a2fe4:	0598      	lsls	r0, r3, #22
341a2fe6:	d402      	bmi.n	341a2fee <_puts_r+0x22>
341a2fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341a2fea:	f000 f9d4 	bl	341a3396 <__retarget_lock_acquire_recursive>
341a2fee:	89a3      	ldrh	r3, [r4, #12]
341a2ff0:	0719      	lsls	r1, r3, #28
341a2ff2:	d502      	bpl.n	341a2ffa <_puts_r+0x2e>
341a2ff4:	6923      	ldr	r3, [r4, #16]
341a2ff6:	2b00      	cmp	r3, #0
341a2ff8:	d135      	bne.n	341a3066 <_puts_r+0x9a>
341a2ffa:	4621      	mov	r1, r4
341a2ffc:	4628      	mov	r0, r5
341a2ffe:	f000 f8fb 	bl	341a31f8 <__swsetup_r>
341a3002:	b380      	cbz	r0, 341a3066 <_puts_r+0x9a>
341a3004:	f04f 35ff 	mov.w	r5, #4294967295
341a3008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341a300a:	07da      	lsls	r2, r3, #31
341a300c:	d405      	bmi.n	341a301a <_puts_r+0x4e>
341a300e:	89a3      	ldrh	r3, [r4, #12]
341a3010:	059b      	lsls	r3, r3, #22
341a3012:	d402      	bmi.n	341a301a <_puts_r+0x4e>
341a3014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341a3016:	f000 f9bf 	bl	341a3398 <__retarget_lock_release_recursive>
341a301a:	4628      	mov	r0, r5
341a301c:	bd70      	pop	{r4, r5, r6, pc}
341a301e:	2b00      	cmp	r3, #0
341a3020:	da04      	bge.n	341a302c <_puts_r+0x60>
341a3022:	69a2      	ldr	r2, [r4, #24]
341a3024:	429a      	cmp	r2, r3
341a3026:	dc17      	bgt.n	341a3058 <_puts_r+0x8c>
341a3028:	290a      	cmp	r1, #10
341a302a:	d015      	beq.n	341a3058 <_puts_r+0x8c>
341a302c:	6823      	ldr	r3, [r4, #0]
341a302e:	1c5a      	adds	r2, r3, #1
341a3030:	6022      	str	r2, [r4, #0]
341a3032:	7019      	strb	r1, [r3, #0]
341a3034:	68a3      	ldr	r3, [r4, #8]
341a3036:	f816 1f01 	ldrb.w	r1, [r6, #1]!
341a303a:	3b01      	subs	r3, #1
341a303c:	60a3      	str	r3, [r4, #8]
341a303e:	2900      	cmp	r1, #0
341a3040:	d1ed      	bne.n	341a301e <_puts_r+0x52>
341a3042:	2b00      	cmp	r3, #0
341a3044:	da11      	bge.n	341a306a <_puts_r+0x9e>
341a3046:	4622      	mov	r2, r4
341a3048:	210a      	movs	r1, #10
341a304a:	4628      	mov	r0, r5
341a304c:	f000 f895 	bl	341a317a <__swbuf_r>
341a3050:	3001      	adds	r0, #1
341a3052:	d0d7      	beq.n	341a3004 <_puts_r+0x38>
341a3054:	250a      	movs	r5, #10
341a3056:	e7d7      	b.n	341a3008 <_puts_r+0x3c>
341a3058:	4622      	mov	r2, r4
341a305a:	4628      	mov	r0, r5
341a305c:	f000 f88d 	bl	341a317a <__swbuf_r>
341a3060:	3001      	adds	r0, #1
341a3062:	d1e7      	bne.n	341a3034 <_puts_r+0x68>
341a3064:	e7ce      	b.n	341a3004 <_puts_r+0x38>
341a3066:	3e01      	subs	r6, #1
341a3068:	e7e4      	b.n	341a3034 <_puts_r+0x68>
341a306a:	6823      	ldr	r3, [r4, #0]
341a306c:	1c5a      	adds	r2, r3, #1
341a306e:	6022      	str	r2, [r4, #0]
341a3070:	220a      	movs	r2, #10
341a3072:	701a      	strb	r2, [r3, #0]
341a3074:	e7ee      	b.n	341a3054 <_puts_r+0x88>
	...

341a3078 <puts>:
341a3078:	4b02      	ldr	r3, [pc, #8]	@ (341a3084 <puts+0xc>)
341a307a:	4601      	mov	r1, r0
341a307c:	6818      	ldr	r0, [r3, #0]
341a307e:	f7ff bfa5 	b.w	341a2fcc <_puts_r>
341a3082:	bf00      	nop
341a3084:	341c0144 	.word	0x341c0144

341a3088 <sniprintf>:
341a3088:	b40c      	push	{r2, r3}
341a308a:	4b19      	ldr	r3, [pc, #100]	@ (341a30f0 <sniprintf+0x68>)
341a308c:	b530      	push	{r4, r5, lr}
341a308e:	1e0c      	subs	r4, r1, #0
341a3090:	b09d      	sub	sp, #116	@ 0x74
341a3092:	681d      	ldr	r5, [r3, #0]
341a3094:	da08      	bge.n	341a30a8 <sniprintf+0x20>
341a3096:	238b      	movs	r3, #139	@ 0x8b
341a3098:	f04f 30ff 	mov.w	r0, #4294967295
341a309c:	602b      	str	r3, [r5, #0]
341a309e:	b01d      	add	sp, #116	@ 0x74
341a30a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a30a4:	b002      	add	sp, #8
341a30a6:	4770      	bx	lr
341a30a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
341a30ac:	9002      	str	r0, [sp, #8]
341a30ae:	9006      	str	r0, [sp, #24]
341a30b0:	a902      	add	r1, sp, #8
341a30b2:	f8ad 3014 	strh.w	r3, [sp, #20]
341a30b6:	f04f 0300 	mov.w	r3, #0
341a30ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
341a30bc:	4628      	mov	r0, r5
341a30be:	931b      	str	r3, [sp, #108]	@ 0x6c
341a30c0:	bf14      	ite	ne
341a30c2:	f104 33ff 	addne.w	r3, r4, #4294967295
341a30c6:	4623      	moveq	r3, r4
341a30c8:	9304      	str	r3, [sp, #16]
341a30ca:	9307      	str	r3, [sp, #28]
341a30cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
341a30d0:	f8ad 3016 	strh.w	r3, [sp, #22]
341a30d4:	ab21      	add	r3, sp, #132	@ 0x84
341a30d6:	9301      	str	r3, [sp, #4]
341a30d8:	f000 fac2 	bl	341a3660 <_svfiprintf_r>
341a30dc:	1c43      	adds	r3, r0, #1
341a30de:	bfbc      	itt	lt
341a30e0:	238b      	movlt	r3, #139	@ 0x8b
341a30e2:	602b      	strlt	r3, [r5, #0]
341a30e4:	2c00      	cmp	r4, #0
341a30e6:	d0da      	beq.n	341a309e <sniprintf+0x16>
341a30e8:	9b02      	ldr	r3, [sp, #8]
341a30ea:	2200      	movs	r2, #0
341a30ec:	701a      	strb	r2, [r3, #0]
341a30ee:	e7d6      	b.n	341a309e <sniprintf+0x16>
341a30f0:	341c0144 	.word	0x341c0144

341a30f4 <__sread>:
341a30f4:	b510      	push	{r4, lr}
341a30f6:	460c      	mov	r4, r1
341a30f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341a30fc:	f000 f8fc 	bl	341a32f8 <_read_r>
341a3100:	2800      	cmp	r0, #0
341a3102:	bfab      	itete	ge
341a3104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
341a3106:	89a3      	ldrhlt	r3, [r4, #12]
341a3108:	181b      	addge	r3, r3, r0
341a310a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
341a310e:	bfac      	ite	ge
341a3110:	6563      	strge	r3, [r4, #84]	@ 0x54
341a3112:	81a3      	strhlt	r3, [r4, #12]
341a3114:	bd10      	pop	{r4, pc}

341a3116 <__swrite>:
341a3116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341a311a:	461f      	mov	r7, r3
341a311c:	898b      	ldrh	r3, [r1, #12]
341a311e:	4605      	mov	r5, r0
341a3120:	460c      	mov	r4, r1
341a3122:	05db      	lsls	r3, r3, #23
341a3124:	4616      	mov	r6, r2
341a3126:	d505      	bpl.n	341a3134 <__swrite+0x1e>
341a3128:	2302      	movs	r3, #2
341a312a:	2200      	movs	r2, #0
341a312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341a3130:	f000 f8d0 	bl	341a32d4 <_lseek_r>
341a3134:	89a3      	ldrh	r3, [r4, #12]
341a3136:	4632      	mov	r2, r6
341a3138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
341a313c:	4628      	mov	r0, r5
341a313e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
341a3142:	81a3      	strh	r3, [r4, #12]
341a3144:	463b      	mov	r3, r7
341a3146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
341a314a:	f000 b8e7 	b.w	341a331c <_write_r>

341a314e <__sseek>:
341a314e:	b510      	push	{r4, lr}
341a3150:	460c      	mov	r4, r1
341a3152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341a3156:	f000 f8bd 	bl	341a32d4 <_lseek_r>
341a315a:	1c43      	adds	r3, r0, #1
341a315c:	89a3      	ldrh	r3, [r4, #12]
341a315e:	bf15      	itete	ne
341a3160:	6560      	strne	r0, [r4, #84]	@ 0x54
341a3162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
341a3166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
341a316a:	81a3      	strheq	r3, [r4, #12]
341a316c:	bf18      	it	ne
341a316e:	81a3      	strhne	r3, [r4, #12]
341a3170:	bd10      	pop	{r4, pc}

341a3172 <__sclose>:
341a3172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341a3176:	f000 b89d 	b.w	341a32b4 <_close_r>

341a317a <__swbuf_r>:
341a317a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
341a317c:	460e      	mov	r6, r1
341a317e:	4614      	mov	r4, r2
341a3180:	4605      	mov	r5, r0
341a3182:	b118      	cbz	r0, 341a318c <__swbuf_r+0x12>
341a3184:	6a03      	ldr	r3, [r0, #32]
341a3186:	b90b      	cbnz	r3, 341a318c <__swbuf_r+0x12>
341a3188:	f7ff fed8 	bl	341a2f3c <__sinit>
341a318c:	69a3      	ldr	r3, [r4, #24]
341a318e:	60a3      	str	r3, [r4, #8]
341a3190:	89a3      	ldrh	r3, [r4, #12]
341a3192:	071a      	lsls	r2, r3, #28
341a3194:	d501      	bpl.n	341a319a <__swbuf_r+0x20>
341a3196:	6923      	ldr	r3, [r4, #16]
341a3198:	b943      	cbnz	r3, 341a31ac <__swbuf_r+0x32>
341a319a:	4621      	mov	r1, r4
341a319c:	4628      	mov	r0, r5
341a319e:	f000 f82b 	bl	341a31f8 <__swsetup_r>
341a31a2:	b118      	cbz	r0, 341a31ac <__swbuf_r+0x32>
341a31a4:	f04f 37ff 	mov.w	r7, #4294967295
341a31a8:	4638      	mov	r0, r7
341a31aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
341a31ac:	6823      	ldr	r3, [r4, #0]
341a31ae:	b2f6      	uxtb	r6, r6
341a31b0:	6922      	ldr	r2, [r4, #16]
341a31b2:	4637      	mov	r7, r6
341a31b4:	1a98      	subs	r0, r3, r2
341a31b6:	6963      	ldr	r3, [r4, #20]
341a31b8:	4283      	cmp	r3, r0
341a31ba:	dc05      	bgt.n	341a31c8 <__swbuf_r+0x4e>
341a31bc:	4621      	mov	r1, r4
341a31be:	4628      	mov	r0, r5
341a31c0:	f000 fea0 	bl	341a3f04 <_fflush_r>
341a31c4:	2800      	cmp	r0, #0
341a31c6:	d1ed      	bne.n	341a31a4 <__swbuf_r+0x2a>
341a31c8:	68a3      	ldr	r3, [r4, #8]
341a31ca:	3b01      	subs	r3, #1
341a31cc:	60a3      	str	r3, [r4, #8]
341a31ce:	6823      	ldr	r3, [r4, #0]
341a31d0:	1c5a      	adds	r2, r3, #1
341a31d2:	6022      	str	r2, [r4, #0]
341a31d4:	701e      	strb	r6, [r3, #0]
341a31d6:	1c43      	adds	r3, r0, #1
341a31d8:	6962      	ldr	r2, [r4, #20]
341a31da:	429a      	cmp	r2, r3
341a31dc:	d004      	beq.n	341a31e8 <__swbuf_r+0x6e>
341a31de:	89a3      	ldrh	r3, [r4, #12]
341a31e0:	07db      	lsls	r3, r3, #31
341a31e2:	d5e1      	bpl.n	341a31a8 <__swbuf_r+0x2e>
341a31e4:	2e0a      	cmp	r6, #10
341a31e6:	d1df      	bne.n	341a31a8 <__swbuf_r+0x2e>
341a31e8:	4621      	mov	r1, r4
341a31ea:	4628      	mov	r0, r5
341a31ec:	f000 fe8a 	bl	341a3f04 <_fflush_r>
341a31f0:	2800      	cmp	r0, #0
341a31f2:	d0d9      	beq.n	341a31a8 <__swbuf_r+0x2e>
341a31f4:	e7d6      	b.n	341a31a4 <__swbuf_r+0x2a>
	...

341a31f8 <__swsetup_r>:
341a31f8:	b538      	push	{r3, r4, r5, lr}
341a31fa:	4b29      	ldr	r3, [pc, #164]	@ (341a32a0 <__swsetup_r+0xa8>)
341a31fc:	4605      	mov	r5, r0
341a31fe:	460c      	mov	r4, r1
341a3200:	6818      	ldr	r0, [r3, #0]
341a3202:	b118      	cbz	r0, 341a320c <__swsetup_r+0x14>
341a3204:	6a03      	ldr	r3, [r0, #32]
341a3206:	b90b      	cbnz	r3, 341a320c <__swsetup_r+0x14>
341a3208:	f7ff fe98 	bl	341a2f3c <__sinit>
341a320c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341a3210:	0719      	lsls	r1, r3, #28
341a3212:	d422      	bmi.n	341a325a <__swsetup_r+0x62>
341a3214:	06da      	lsls	r2, r3, #27
341a3216:	d407      	bmi.n	341a3228 <__swsetup_r+0x30>
341a3218:	2209      	movs	r2, #9
341a321a:	602a      	str	r2, [r5, #0]
341a321c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341a3220:	f04f 30ff 	mov.w	r0, #4294967295
341a3224:	81a3      	strh	r3, [r4, #12]
341a3226:	e033      	b.n	341a3290 <__swsetup_r+0x98>
341a3228:	0758      	lsls	r0, r3, #29
341a322a:	d512      	bpl.n	341a3252 <__swsetup_r+0x5a>
341a322c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
341a322e:	b141      	cbz	r1, 341a3242 <__swsetup_r+0x4a>
341a3230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
341a3234:	4299      	cmp	r1, r3
341a3236:	d002      	beq.n	341a323e <__swsetup_r+0x46>
341a3238:	4628      	mov	r0, r5
341a323a:	f000 f8bd 	bl	341a33b8 <_free_r>
341a323e:	2300      	movs	r3, #0
341a3240:	6363      	str	r3, [r4, #52]	@ 0x34
341a3242:	89a3      	ldrh	r3, [r4, #12]
341a3244:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
341a3248:	81a3      	strh	r3, [r4, #12]
341a324a:	2300      	movs	r3, #0
341a324c:	6063      	str	r3, [r4, #4]
341a324e:	6923      	ldr	r3, [r4, #16]
341a3250:	6023      	str	r3, [r4, #0]
341a3252:	89a3      	ldrh	r3, [r4, #12]
341a3254:	f043 0308 	orr.w	r3, r3, #8
341a3258:	81a3      	strh	r3, [r4, #12]
341a325a:	6923      	ldr	r3, [r4, #16]
341a325c:	b94b      	cbnz	r3, 341a3272 <__swsetup_r+0x7a>
341a325e:	89a3      	ldrh	r3, [r4, #12]
341a3260:	f403 7320 	and.w	r3, r3, #640	@ 0x280
341a3264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341a3268:	d003      	beq.n	341a3272 <__swsetup_r+0x7a>
341a326a:	4621      	mov	r1, r4
341a326c:	4628      	mov	r0, r5
341a326e:	f000 fe96 	bl	341a3f9e <__smakebuf_r>
341a3272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341a3276:	f013 0201 	ands.w	r2, r3, #1
341a327a:	d00a      	beq.n	341a3292 <__swsetup_r+0x9a>
341a327c:	2200      	movs	r2, #0
341a327e:	60a2      	str	r2, [r4, #8]
341a3280:	6962      	ldr	r2, [r4, #20]
341a3282:	4252      	negs	r2, r2
341a3284:	61a2      	str	r2, [r4, #24]
341a3286:	6922      	ldr	r2, [r4, #16]
341a3288:	b942      	cbnz	r2, 341a329c <__swsetup_r+0xa4>
341a328a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
341a328e:	d1c5      	bne.n	341a321c <__swsetup_r+0x24>
341a3290:	bd38      	pop	{r3, r4, r5, pc}
341a3292:	0799      	lsls	r1, r3, #30
341a3294:	bf58      	it	pl
341a3296:	6962      	ldrpl	r2, [r4, #20]
341a3298:	60a2      	str	r2, [r4, #8]
341a329a:	e7f4      	b.n	341a3286 <__swsetup_r+0x8e>
341a329c:	2000      	movs	r0, #0
341a329e:	e7f7      	b.n	341a3290 <__swsetup_r+0x98>
341a32a0:	341c0144 	.word	0x341c0144

341a32a4 <memset>:
341a32a4:	4402      	add	r2, r0
341a32a6:	4603      	mov	r3, r0
341a32a8:	4293      	cmp	r3, r2
341a32aa:	d100      	bne.n	341a32ae <memset+0xa>
341a32ac:	4770      	bx	lr
341a32ae:	f803 1b01 	strb.w	r1, [r3], #1
341a32b2:	e7f9      	b.n	341a32a8 <memset+0x4>

341a32b4 <_close_r>:
341a32b4:	b538      	push	{r3, r4, r5, lr}
341a32b6:	2300      	movs	r3, #0
341a32b8:	4d05      	ldr	r5, [pc, #20]	@ (341a32d0 <_close_r+0x1c>)
341a32ba:	4604      	mov	r4, r0
341a32bc:	4608      	mov	r0, r1
341a32be:	602b      	str	r3, [r5, #0]
341a32c0:	f7df fb57 	bl	34182972 <_close>
341a32c4:	1c43      	adds	r3, r0, #1
341a32c6:	d102      	bne.n	341a32ce <_close_r+0x1a>
341a32c8:	682b      	ldr	r3, [r5, #0]
341a32ca:	b103      	cbz	r3, 341a32ce <_close_r+0x1a>
341a32cc:	6023      	str	r3, [r4, #0]
341a32ce:	bd38      	pop	{r3, r4, r5, pc}
341a32d0:	341c36b8 	.word	0x341c36b8

341a32d4 <_lseek_r>:
341a32d4:	b538      	push	{r3, r4, r5, lr}
341a32d6:	4604      	mov	r4, r0
341a32d8:	4d06      	ldr	r5, [pc, #24]	@ (341a32f4 <_lseek_r+0x20>)
341a32da:	4608      	mov	r0, r1
341a32dc:	4611      	mov	r1, r2
341a32de:	2200      	movs	r2, #0
341a32e0:	602a      	str	r2, [r5, #0]
341a32e2:	461a      	mov	r2, r3
341a32e4:	f7df fb6c 	bl	341829c0 <_lseek>
341a32e8:	1c43      	adds	r3, r0, #1
341a32ea:	d102      	bne.n	341a32f2 <_lseek_r+0x1e>
341a32ec:	682b      	ldr	r3, [r5, #0]
341a32ee:	b103      	cbz	r3, 341a32f2 <_lseek_r+0x1e>
341a32f0:	6023      	str	r3, [r4, #0]
341a32f2:	bd38      	pop	{r3, r4, r5, pc}
341a32f4:	341c36b8 	.word	0x341c36b8

341a32f8 <_read_r>:
341a32f8:	b538      	push	{r3, r4, r5, lr}
341a32fa:	4604      	mov	r4, r0
341a32fc:	4d06      	ldr	r5, [pc, #24]	@ (341a3318 <_read_r+0x20>)
341a32fe:	4608      	mov	r0, r1
341a3300:	4611      	mov	r1, r2
341a3302:	2200      	movs	r2, #0
341a3304:	602a      	str	r2, [r5, #0]
341a3306:	461a      	mov	r2, r3
341a3308:	f7df fafa 	bl	34182900 <_read>
341a330c:	1c43      	adds	r3, r0, #1
341a330e:	d102      	bne.n	341a3316 <_read_r+0x1e>
341a3310:	682b      	ldr	r3, [r5, #0]
341a3312:	b103      	cbz	r3, 341a3316 <_read_r+0x1e>
341a3314:	6023      	str	r3, [r4, #0]
341a3316:	bd38      	pop	{r3, r4, r5, pc}
341a3318:	341c36b8 	.word	0x341c36b8

341a331c <_write_r>:
341a331c:	b538      	push	{r3, r4, r5, lr}
341a331e:	4604      	mov	r4, r0
341a3320:	4d06      	ldr	r5, [pc, #24]	@ (341a333c <_write_r+0x20>)
341a3322:	4608      	mov	r0, r1
341a3324:	4611      	mov	r1, r2
341a3326:	2200      	movs	r2, #0
341a3328:	602a      	str	r2, [r5, #0]
341a332a:	461a      	mov	r2, r3
341a332c:	f7df fb05 	bl	3418293a <_write>
341a3330:	1c43      	adds	r3, r0, #1
341a3332:	d102      	bne.n	341a333a <_write_r+0x1e>
341a3334:	682b      	ldr	r3, [r5, #0]
341a3336:	b103      	cbz	r3, 341a333a <_write_r+0x1e>
341a3338:	6023      	str	r3, [r4, #0]
341a333a:	bd38      	pop	{r3, r4, r5, pc}
341a333c:	341c36b8 	.word	0x341c36b8

341a3340 <__errno>:
341a3340:	4b01      	ldr	r3, [pc, #4]	@ (341a3348 <__errno+0x8>)
341a3342:	6818      	ldr	r0, [r3, #0]
341a3344:	4770      	bx	lr
341a3346:	bf00      	nop
341a3348:	341c0144 	.word	0x341c0144

341a334c <__libc_init_array>:
341a334c:	b570      	push	{r4, r5, r6, lr}
341a334e:	4d0d      	ldr	r5, [pc, #52]	@ (341a3384 <__libc_init_array+0x38>)
341a3350:	2600      	movs	r6, #0
341a3352:	4c0d      	ldr	r4, [pc, #52]	@ (341a3388 <__libc_init_array+0x3c>)
341a3354:	1b64      	subs	r4, r4, r5
341a3356:	10a4      	asrs	r4, r4, #2
341a3358:	42a6      	cmp	r6, r4
341a335a:	d109      	bne.n	341a3370 <__libc_init_array+0x24>
341a335c:	4d0b      	ldr	r5, [pc, #44]	@ (341a338c <__libc_init_array+0x40>)
341a335e:	2600      	movs	r6, #0
341a3360:	4c0b      	ldr	r4, [pc, #44]	@ (341a3390 <__libc_init_array+0x44>)
341a3362:	f001 fd71 	bl	341a4e48 <_init>
341a3366:	1b64      	subs	r4, r4, r5
341a3368:	10a4      	asrs	r4, r4, #2
341a336a:	42a6      	cmp	r6, r4
341a336c:	d105      	bne.n	341a337a <__libc_init_array+0x2e>
341a336e:	bd70      	pop	{r4, r5, r6, pc}
341a3370:	f855 3b04 	ldr.w	r3, [r5], #4
341a3374:	3601      	adds	r6, #1
341a3376:	4798      	blx	r3
341a3378:	e7ee      	b.n	341a3358 <__libc_init_array+0xc>
341a337a:	f855 3b04 	ldr.w	r3, [r5], #4
341a337e:	3601      	adds	r6, #1
341a3380:	4798      	blx	r3
341a3382:	e7f2      	b.n	341a336a <__libc_init_array+0x1e>
341a3384:	341a8a28 	.word	0x341a8a28
341a3388:	341a8a28 	.word	0x341a8a28
341a338c:	341a8a28 	.word	0x341a8a28
341a3390:	341a8a2c 	.word	0x341a8a2c

341a3394 <__retarget_lock_init_recursive>:
341a3394:	4770      	bx	lr

341a3396 <__retarget_lock_acquire_recursive>:
341a3396:	4770      	bx	lr

341a3398 <__retarget_lock_release_recursive>:
341a3398:	4770      	bx	lr

341a339a <__aeabi_memcpy>:
341a339a:	f000 b800 	b.w	341a339e <memcpy>

341a339e <memcpy>:
341a339e:	440a      	add	r2, r1
341a33a0:	1e43      	subs	r3, r0, #1
341a33a2:	4291      	cmp	r1, r2
341a33a4:	d100      	bne.n	341a33a8 <memcpy+0xa>
341a33a6:	4770      	bx	lr
341a33a8:	b510      	push	{r4, lr}
341a33aa:	f811 4b01 	ldrb.w	r4, [r1], #1
341a33ae:	4291      	cmp	r1, r2
341a33b0:	f803 4f01 	strb.w	r4, [r3, #1]!
341a33b4:	d1f9      	bne.n	341a33aa <memcpy+0xc>
341a33b6:	bd10      	pop	{r4, pc}

341a33b8 <_free_r>:
341a33b8:	b538      	push	{r3, r4, r5, lr}
341a33ba:	4605      	mov	r5, r0
341a33bc:	2900      	cmp	r1, #0
341a33be:	d041      	beq.n	341a3444 <_free_r+0x8c>
341a33c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
341a33c4:	1f0c      	subs	r4, r1, #4
341a33c6:	2b00      	cmp	r3, #0
341a33c8:	bfb8      	it	lt
341a33ca:	18e4      	addlt	r4, r4, r3
341a33cc:	f000 f8e0 	bl	341a3590 <__malloc_lock>
341a33d0:	4a1d      	ldr	r2, [pc, #116]	@ (341a3448 <_free_r+0x90>)
341a33d2:	6813      	ldr	r3, [r2, #0]
341a33d4:	b933      	cbnz	r3, 341a33e4 <_free_r+0x2c>
341a33d6:	6063      	str	r3, [r4, #4]
341a33d8:	6014      	str	r4, [r2, #0]
341a33da:	4628      	mov	r0, r5
341a33dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
341a33e0:	f000 b8dc 	b.w	341a359c <__malloc_unlock>
341a33e4:	42a3      	cmp	r3, r4
341a33e6:	d908      	bls.n	341a33fa <_free_r+0x42>
341a33e8:	6820      	ldr	r0, [r4, #0]
341a33ea:	1821      	adds	r1, r4, r0
341a33ec:	428b      	cmp	r3, r1
341a33ee:	bf01      	itttt	eq
341a33f0:	6819      	ldreq	r1, [r3, #0]
341a33f2:	685b      	ldreq	r3, [r3, #4]
341a33f4:	1809      	addeq	r1, r1, r0
341a33f6:	6021      	streq	r1, [r4, #0]
341a33f8:	e7ed      	b.n	341a33d6 <_free_r+0x1e>
341a33fa:	461a      	mov	r2, r3
341a33fc:	685b      	ldr	r3, [r3, #4]
341a33fe:	b10b      	cbz	r3, 341a3404 <_free_r+0x4c>
341a3400:	42a3      	cmp	r3, r4
341a3402:	d9fa      	bls.n	341a33fa <_free_r+0x42>
341a3404:	6811      	ldr	r1, [r2, #0]
341a3406:	1850      	adds	r0, r2, r1
341a3408:	42a0      	cmp	r0, r4
341a340a:	d10b      	bne.n	341a3424 <_free_r+0x6c>
341a340c:	6820      	ldr	r0, [r4, #0]
341a340e:	4401      	add	r1, r0
341a3410:	1850      	adds	r0, r2, r1
341a3412:	6011      	str	r1, [r2, #0]
341a3414:	4283      	cmp	r3, r0
341a3416:	d1e0      	bne.n	341a33da <_free_r+0x22>
341a3418:	6818      	ldr	r0, [r3, #0]
341a341a:	685b      	ldr	r3, [r3, #4]
341a341c:	4408      	add	r0, r1
341a341e:	6053      	str	r3, [r2, #4]
341a3420:	6010      	str	r0, [r2, #0]
341a3422:	e7da      	b.n	341a33da <_free_r+0x22>
341a3424:	d902      	bls.n	341a342c <_free_r+0x74>
341a3426:	230c      	movs	r3, #12
341a3428:	602b      	str	r3, [r5, #0]
341a342a:	e7d6      	b.n	341a33da <_free_r+0x22>
341a342c:	6820      	ldr	r0, [r4, #0]
341a342e:	1821      	adds	r1, r4, r0
341a3430:	428b      	cmp	r3, r1
341a3432:	bf02      	ittt	eq
341a3434:	6819      	ldreq	r1, [r3, #0]
341a3436:	685b      	ldreq	r3, [r3, #4]
341a3438:	1809      	addeq	r1, r1, r0
341a343a:	6063      	str	r3, [r4, #4]
341a343c:	bf08      	it	eq
341a343e:	6021      	streq	r1, [r4, #0]
341a3440:	6054      	str	r4, [r2, #4]
341a3442:	e7ca      	b.n	341a33da <_free_r+0x22>
341a3444:	bd38      	pop	{r3, r4, r5, pc}
341a3446:	bf00      	nop
341a3448:	341c36c4 	.word	0x341c36c4

341a344c <sbrk_aligned>:
341a344c:	b570      	push	{r4, r5, r6, lr}
341a344e:	4e0f      	ldr	r6, [pc, #60]	@ (341a348c <sbrk_aligned+0x40>)
341a3450:	460c      	mov	r4, r1
341a3452:	4605      	mov	r5, r0
341a3454:	6831      	ldr	r1, [r6, #0]
341a3456:	b911      	cbnz	r1, 341a345e <sbrk_aligned+0x12>
341a3458:	f000 fe1a 	bl	341a4090 <_sbrk_r>
341a345c:	6030      	str	r0, [r6, #0]
341a345e:	4621      	mov	r1, r4
341a3460:	4628      	mov	r0, r5
341a3462:	f000 fe15 	bl	341a4090 <_sbrk_r>
341a3466:	1c43      	adds	r3, r0, #1
341a3468:	d103      	bne.n	341a3472 <sbrk_aligned+0x26>
341a346a:	f04f 34ff 	mov.w	r4, #4294967295
341a346e:	4620      	mov	r0, r4
341a3470:	bd70      	pop	{r4, r5, r6, pc}
341a3472:	1cc4      	adds	r4, r0, #3
341a3474:	f024 0403 	bic.w	r4, r4, #3
341a3478:	42a0      	cmp	r0, r4
341a347a:	d0f8      	beq.n	341a346e <sbrk_aligned+0x22>
341a347c:	1a21      	subs	r1, r4, r0
341a347e:	4628      	mov	r0, r5
341a3480:	f000 fe06 	bl	341a4090 <_sbrk_r>
341a3484:	3001      	adds	r0, #1
341a3486:	d1f2      	bne.n	341a346e <sbrk_aligned+0x22>
341a3488:	e7ef      	b.n	341a346a <sbrk_aligned+0x1e>
341a348a:	bf00      	nop
341a348c:	341c36c0 	.word	0x341c36c0

341a3490 <_malloc_r>:
341a3490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
341a3494:	1ccd      	adds	r5, r1, #3
341a3496:	4606      	mov	r6, r0
341a3498:	f025 0503 	bic.w	r5, r5, #3
341a349c:	3508      	adds	r5, #8
341a349e:	2d0c      	cmp	r5, #12
341a34a0:	bf38      	it	cc
341a34a2:	250c      	movcc	r5, #12
341a34a4:	2d00      	cmp	r5, #0
341a34a6:	db01      	blt.n	341a34ac <_malloc_r+0x1c>
341a34a8:	42a9      	cmp	r1, r5
341a34aa:	d904      	bls.n	341a34b6 <_malloc_r+0x26>
341a34ac:	230c      	movs	r3, #12
341a34ae:	6033      	str	r3, [r6, #0]
341a34b0:	2000      	movs	r0, #0
341a34b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
341a34b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 341a358c <_malloc_r+0xfc>
341a34ba:	f000 f869 	bl	341a3590 <__malloc_lock>
341a34be:	f8d8 3000 	ldr.w	r3, [r8]
341a34c2:	461c      	mov	r4, r3
341a34c4:	bb44      	cbnz	r4, 341a3518 <_malloc_r+0x88>
341a34c6:	4629      	mov	r1, r5
341a34c8:	4630      	mov	r0, r6
341a34ca:	f7ff ffbf 	bl	341a344c <sbrk_aligned>
341a34ce:	1c43      	adds	r3, r0, #1
341a34d0:	4604      	mov	r4, r0
341a34d2:	d158      	bne.n	341a3586 <_malloc_r+0xf6>
341a34d4:	f8d8 4000 	ldr.w	r4, [r8]
341a34d8:	4627      	mov	r7, r4
341a34da:	2f00      	cmp	r7, #0
341a34dc:	d143      	bne.n	341a3566 <_malloc_r+0xd6>
341a34de:	2c00      	cmp	r4, #0
341a34e0:	d04b      	beq.n	341a357a <_malloc_r+0xea>
341a34e2:	6823      	ldr	r3, [r4, #0]
341a34e4:	4639      	mov	r1, r7
341a34e6:	4630      	mov	r0, r6
341a34e8:	eb04 0903 	add.w	r9, r4, r3
341a34ec:	f000 fdd0 	bl	341a4090 <_sbrk_r>
341a34f0:	4581      	cmp	r9, r0
341a34f2:	d142      	bne.n	341a357a <_malloc_r+0xea>
341a34f4:	6821      	ldr	r1, [r4, #0]
341a34f6:	4630      	mov	r0, r6
341a34f8:	1a6d      	subs	r5, r5, r1
341a34fa:	4629      	mov	r1, r5
341a34fc:	f7ff ffa6 	bl	341a344c <sbrk_aligned>
341a3500:	3001      	adds	r0, #1
341a3502:	d03a      	beq.n	341a357a <_malloc_r+0xea>
341a3504:	6823      	ldr	r3, [r4, #0]
341a3506:	442b      	add	r3, r5
341a3508:	6023      	str	r3, [r4, #0]
341a350a:	f8d8 3000 	ldr.w	r3, [r8]
341a350e:	685a      	ldr	r2, [r3, #4]
341a3510:	bb62      	cbnz	r2, 341a356c <_malloc_r+0xdc>
341a3512:	f8c8 7000 	str.w	r7, [r8]
341a3516:	e00f      	b.n	341a3538 <_malloc_r+0xa8>
341a3518:	6822      	ldr	r2, [r4, #0]
341a351a:	1b52      	subs	r2, r2, r5
341a351c:	d420      	bmi.n	341a3560 <_malloc_r+0xd0>
341a351e:	2a0b      	cmp	r2, #11
341a3520:	d917      	bls.n	341a3552 <_malloc_r+0xc2>
341a3522:	1961      	adds	r1, r4, r5
341a3524:	42a3      	cmp	r3, r4
341a3526:	6025      	str	r5, [r4, #0]
341a3528:	bf18      	it	ne
341a352a:	6059      	strne	r1, [r3, #4]
341a352c:	6863      	ldr	r3, [r4, #4]
341a352e:	bf08      	it	eq
341a3530:	f8c8 1000 	streq.w	r1, [r8]
341a3534:	5162      	str	r2, [r4, r5]
341a3536:	604b      	str	r3, [r1, #4]
341a3538:	4630      	mov	r0, r6
341a353a:	f000 f82f 	bl	341a359c <__malloc_unlock>
341a353e:	f104 000b 	add.w	r0, r4, #11
341a3542:	1d23      	adds	r3, r4, #4
341a3544:	f020 0007 	bic.w	r0, r0, #7
341a3548:	1ac2      	subs	r2, r0, r3
341a354a:	bf1c      	itt	ne
341a354c:	1a1b      	subne	r3, r3, r0
341a354e:	50a3      	strne	r3, [r4, r2]
341a3550:	e7af      	b.n	341a34b2 <_malloc_r+0x22>
341a3552:	6862      	ldr	r2, [r4, #4]
341a3554:	42a3      	cmp	r3, r4
341a3556:	bf0c      	ite	eq
341a3558:	f8c8 2000 	streq.w	r2, [r8]
341a355c:	605a      	strne	r2, [r3, #4]
341a355e:	e7eb      	b.n	341a3538 <_malloc_r+0xa8>
341a3560:	4623      	mov	r3, r4
341a3562:	6864      	ldr	r4, [r4, #4]
341a3564:	e7ae      	b.n	341a34c4 <_malloc_r+0x34>
341a3566:	463c      	mov	r4, r7
341a3568:	687f      	ldr	r7, [r7, #4]
341a356a:	e7b6      	b.n	341a34da <_malloc_r+0x4a>
341a356c:	461a      	mov	r2, r3
341a356e:	685b      	ldr	r3, [r3, #4]
341a3570:	42a3      	cmp	r3, r4
341a3572:	d1fb      	bne.n	341a356c <_malloc_r+0xdc>
341a3574:	2300      	movs	r3, #0
341a3576:	6053      	str	r3, [r2, #4]
341a3578:	e7de      	b.n	341a3538 <_malloc_r+0xa8>
341a357a:	230c      	movs	r3, #12
341a357c:	4630      	mov	r0, r6
341a357e:	6033      	str	r3, [r6, #0]
341a3580:	f000 f80c 	bl	341a359c <__malloc_unlock>
341a3584:	e794      	b.n	341a34b0 <_malloc_r+0x20>
341a3586:	6005      	str	r5, [r0, #0]
341a3588:	e7d6      	b.n	341a3538 <_malloc_r+0xa8>
341a358a:	bf00      	nop
341a358c:	341c36c4 	.word	0x341c36c4

341a3590 <__malloc_lock>:
341a3590:	4801      	ldr	r0, [pc, #4]	@ (341a3598 <__malloc_lock+0x8>)
341a3592:	f7ff bf00 	b.w	341a3396 <__retarget_lock_acquire_recursive>
341a3596:	bf00      	nop
341a3598:	341c36bc 	.word	0x341c36bc

341a359c <__malloc_unlock>:
341a359c:	4801      	ldr	r0, [pc, #4]	@ (341a35a4 <__malloc_unlock+0x8>)
341a359e:	f7ff befb 	b.w	341a3398 <__retarget_lock_release_recursive>
341a35a2:	bf00      	nop
341a35a4:	341c36bc 	.word	0x341c36bc

341a35a8 <__ssputs_r>:
341a35a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341a35ac:	461f      	mov	r7, r3
341a35ae:	688e      	ldr	r6, [r1, #8]
341a35b0:	4682      	mov	sl, r0
341a35b2:	460c      	mov	r4, r1
341a35b4:	42be      	cmp	r6, r7
341a35b6:	4690      	mov	r8, r2
341a35b8:	680b      	ldr	r3, [r1, #0]
341a35ba:	d82d      	bhi.n	341a3618 <__ssputs_r+0x70>
341a35bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341a35c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
341a35c4:	d026      	beq.n	341a3614 <__ssputs_r+0x6c>
341a35c6:	6965      	ldr	r5, [r4, #20]
341a35c8:	6909      	ldr	r1, [r1, #16]
341a35ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
341a35ce:	eba3 0901 	sub.w	r9, r3, r1
341a35d2:	1c7b      	adds	r3, r7, #1
341a35d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
341a35d8:	444b      	add	r3, r9
341a35da:	106d      	asrs	r5, r5, #1
341a35dc:	429d      	cmp	r5, r3
341a35de:	bf38      	it	cc
341a35e0:	461d      	movcc	r5, r3
341a35e2:	0553      	lsls	r3, r2, #21
341a35e4:	d527      	bpl.n	341a3636 <__ssputs_r+0x8e>
341a35e6:	4629      	mov	r1, r5
341a35e8:	f7ff ff52 	bl	341a3490 <_malloc_r>
341a35ec:	4606      	mov	r6, r0
341a35ee:	b360      	cbz	r0, 341a364a <__ssputs_r+0xa2>
341a35f0:	464a      	mov	r2, r9
341a35f2:	6921      	ldr	r1, [r4, #16]
341a35f4:	f7ff fed3 	bl	341a339e <memcpy>
341a35f8:	89a3      	ldrh	r3, [r4, #12]
341a35fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
341a35fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341a3602:	81a3      	strh	r3, [r4, #12]
341a3604:	6126      	str	r6, [r4, #16]
341a3606:	444e      	add	r6, r9
341a3608:	6165      	str	r5, [r4, #20]
341a360a:	eba5 0509 	sub.w	r5, r5, r9
341a360e:	6026      	str	r6, [r4, #0]
341a3610:	463e      	mov	r6, r7
341a3612:	60a5      	str	r5, [r4, #8]
341a3614:	42be      	cmp	r6, r7
341a3616:	d900      	bls.n	341a361a <__ssputs_r+0x72>
341a3618:	463e      	mov	r6, r7
341a361a:	4632      	mov	r2, r6
341a361c:	4641      	mov	r1, r8
341a361e:	6820      	ldr	r0, [r4, #0]
341a3620:	f000 fcf9 	bl	341a4016 <memmove>
341a3624:	68a3      	ldr	r3, [r4, #8]
341a3626:	2000      	movs	r0, #0
341a3628:	1b9b      	subs	r3, r3, r6
341a362a:	60a3      	str	r3, [r4, #8]
341a362c:	6823      	ldr	r3, [r4, #0]
341a362e:	4433      	add	r3, r6
341a3630:	6023      	str	r3, [r4, #0]
341a3632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
341a3636:	462a      	mov	r2, r5
341a3638:	f000 fd48 	bl	341a40cc <_realloc_r>
341a363c:	4606      	mov	r6, r0
341a363e:	2800      	cmp	r0, #0
341a3640:	d1e0      	bne.n	341a3604 <__ssputs_r+0x5c>
341a3642:	6921      	ldr	r1, [r4, #16]
341a3644:	4650      	mov	r0, sl
341a3646:	f7ff feb7 	bl	341a33b8 <_free_r>
341a364a:	230c      	movs	r3, #12
341a364c:	f04f 30ff 	mov.w	r0, #4294967295
341a3650:	f8ca 3000 	str.w	r3, [sl]
341a3654:	89a3      	ldrh	r3, [r4, #12]
341a3656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341a365a:	81a3      	strh	r3, [r4, #12]
341a365c:	e7e9      	b.n	341a3632 <__ssputs_r+0x8a>
	...

341a3660 <_svfiprintf_r>:
341a3660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a3664:	4698      	mov	r8, r3
341a3666:	898b      	ldrh	r3, [r1, #12]
341a3668:	b09d      	sub	sp, #116	@ 0x74
341a366a:	4607      	mov	r7, r0
341a366c:	061b      	lsls	r3, r3, #24
341a366e:	460d      	mov	r5, r1
341a3670:	4614      	mov	r4, r2
341a3672:	d510      	bpl.n	341a3696 <_svfiprintf_r+0x36>
341a3674:	690b      	ldr	r3, [r1, #16]
341a3676:	b973      	cbnz	r3, 341a3696 <_svfiprintf_r+0x36>
341a3678:	2140      	movs	r1, #64	@ 0x40
341a367a:	f7ff ff09 	bl	341a3490 <_malloc_r>
341a367e:	6028      	str	r0, [r5, #0]
341a3680:	6128      	str	r0, [r5, #16]
341a3682:	b930      	cbnz	r0, 341a3692 <_svfiprintf_r+0x32>
341a3684:	230c      	movs	r3, #12
341a3686:	603b      	str	r3, [r7, #0]
341a3688:	f04f 30ff 	mov.w	r0, #4294967295
341a368c:	b01d      	add	sp, #116	@ 0x74
341a368e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341a3692:	2340      	movs	r3, #64	@ 0x40
341a3694:	616b      	str	r3, [r5, #20]
341a3696:	2300      	movs	r3, #0
341a3698:	f8cd 800c 	str.w	r8, [sp, #12]
341a369c:	f04f 0901 	mov.w	r9, #1
341a36a0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 341a3844 <_svfiprintf_r+0x1e4>
341a36a4:	9309      	str	r3, [sp, #36]	@ 0x24
341a36a6:	2320      	movs	r3, #32
341a36a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
341a36ac:	2330      	movs	r3, #48	@ 0x30
341a36ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
341a36b2:	4623      	mov	r3, r4
341a36b4:	469a      	mov	sl, r3
341a36b6:	f813 2b01 	ldrb.w	r2, [r3], #1
341a36ba:	b10a      	cbz	r2, 341a36c0 <_svfiprintf_r+0x60>
341a36bc:	2a25      	cmp	r2, #37	@ 0x25
341a36be:	d1f9      	bne.n	341a36b4 <_svfiprintf_r+0x54>
341a36c0:	ebba 0b04 	subs.w	fp, sl, r4
341a36c4:	d00b      	beq.n	341a36de <_svfiprintf_r+0x7e>
341a36c6:	465b      	mov	r3, fp
341a36c8:	4622      	mov	r2, r4
341a36ca:	4629      	mov	r1, r5
341a36cc:	4638      	mov	r0, r7
341a36ce:	f7ff ff6b 	bl	341a35a8 <__ssputs_r>
341a36d2:	3001      	adds	r0, #1
341a36d4:	f000 80a7 	beq.w	341a3826 <_svfiprintf_r+0x1c6>
341a36d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
341a36da:	445a      	add	r2, fp
341a36dc:	9209      	str	r2, [sp, #36]	@ 0x24
341a36de:	f89a 3000 	ldrb.w	r3, [sl]
341a36e2:	2b00      	cmp	r3, #0
341a36e4:	f000 809f 	beq.w	341a3826 <_svfiprintf_r+0x1c6>
341a36e8:	2300      	movs	r3, #0
341a36ea:	f04f 32ff 	mov.w	r2, #4294967295
341a36ee:	f10a 0a01 	add.w	sl, sl, #1
341a36f2:	9304      	str	r3, [sp, #16]
341a36f4:	9307      	str	r3, [sp, #28]
341a36f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
341a36fa:	931a      	str	r3, [sp, #104]	@ 0x68
341a36fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
341a3700:	4654      	mov	r4, sl
341a3702:	2205      	movs	r2, #5
341a3704:	484f      	ldr	r0, [pc, #316]	@ (341a3844 <_svfiprintf_r+0x1e4>)
341a3706:	f814 1b01 	ldrb.w	r1, [r4], #1
341a370a:	f000 fcd1 	bl	341a40b0 <memchr>
341a370e:	9a04      	ldr	r2, [sp, #16]
341a3710:	b9d8      	cbnz	r0, 341a374a <_svfiprintf_r+0xea>
341a3712:	06d0      	lsls	r0, r2, #27
341a3714:	bf44      	itt	mi
341a3716:	2320      	movmi	r3, #32
341a3718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
341a371c:	0711      	lsls	r1, r2, #28
341a371e:	bf44      	itt	mi
341a3720:	232b      	movmi	r3, #43	@ 0x2b
341a3722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
341a3726:	f89a 3000 	ldrb.w	r3, [sl]
341a372a:	2b2a      	cmp	r3, #42	@ 0x2a
341a372c:	d015      	beq.n	341a375a <_svfiprintf_r+0xfa>
341a372e:	9a07      	ldr	r2, [sp, #28]
341a3730:	4654      	mov	r4, sl
341a3732:	2000      	movs	r0, #0
341a3734:	f04f 0c0a 	mov.w	ip, #10
341a3738:	4621      	mov	r1, r4
341a373a:	f811 3b01 	ldrb.w	r3, [r1], #1
341a373e:	3b30      	subs	r3, #48	@ 0x30
341a3740:	2b09      	cmp	r3, #9
341a3742:	d94b      	bls.n	341a37dc <_svfiprintf_r+0x17c>
341a3744:	b1b0      	cbz	r0, 341a3774 <_svfiprintf_r+0x114>
341a3746:	9207      	str	r2, [sp, #28]
341a3748:	e014      	b.n	341a3774 <_svfiprintf_r+0x114>
341a374a:	eba0 0308 	sub.w	r3, r0, r8
341a374e:	46a2      	mov	sl, r4
341a3750:	fa09 f303 	lsl.w	r3, r9, r3
341a3754:	4313      	orrs	r3, r2
341a3756:	9304      	str	r3, [sp, #16]
341a3758:	e7d2      	b.n	341a3700 <_svfiprintf_r+0xa0>
341a375a:	9b03      	ldr	r3, [sp, #12]
341a375c:	1d19      	adds	r1, r3, #4
341a375e:	681b      	ldr	r3, [r3, #0]
341a3760:	2b00      	cmp	r3, #0
341a3762:	9103      	str	r1, [sp, #12]
341a3764:	bfbb      	ittet	lt
341a3766:	425b      	neglt	r3, r3
341a3768:	f042 0202 	orrlt.w	r2, r2, #2
341a376c:	9307      	strge	r3, [sp, #28]
341a376e:	9307      	strlt	r3, [sp, #28]
341a3770:	bfb8      	it	lt
341a3772:	9204      	strlt	r2, [sp, #16]
341a3774:	7823      	ldrb	r3, [r4, #0]
341a3776:	2b2e      	cmp	r3, #46	@ 0x2e
341a3778:	d10a      	bne.n	341a3790 <_svfiprintf_r+0x130>
341a377a:	7863      	ldrb	r3, [r4, #1]
341a377c:	2b2a      	cmp	r3, #42	@ 0x2a
341a377e:	d132      	bne.n	341a37e6 <_svfiprintf_r+0x186>
341a3780:	9b03      	ldr	r3, [sp, #12]
341a3782:	3402      	adds	r4, #2
341a3784:	1d1a      	adds	r2, r3, #4
341a3786:	681b      	ldr	r3, [r3, #0]
341a3788:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
341a378c:	9203      	str	r2, [sp, #12]
341a378e:	9305      	str	r3, [sp, #20]
341a3790:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 341a3854 <_svfiprintf_r+0x1f4>
341a3794:	2203      	movs	r2, #3
341a3796:	7821      	ldrb	r1, [r4, #0]
341a3798:	4650      	mov	r0, sl
341a379a:	f000 fc89 	bl	341a40b0 <memchr>
341a379e:	b138      	cbz	r0, 341a37b0 <_svfiprintf_r+0x150>
341a37a0:	eba0 000a 	sub.w	r0, r0, sl
341a37a4:	2240      	movs	r2, #64	@ 0x40
341a37a6:	9b04      	ldr	r3, [sp, #16]
341a37a8:	3401      	adds	r4, #1
341a37aa:	4082      	lsls	r2, r0
341a37ac:	4313      	orrs	r3, r2
341a37ae:	9304      	str	r3, [sp, #16]
341a37b0:	f814 1b01 	ldrb.w	r1, [r4], #1
341a37b4:	2206      	movs	r2, #6
341a37b6:	4824      	ldr	r0, [pc, #144]	@ (341a3848 <_svfiprintf_r+0x1e8>)
341a37b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
341a37bc:	f000 fc78 	bl	341a40b0 <memchr>
341a37c0:	2800      	cmp	r0, #0
341a37c2:	d036      	beq.n	341a3832 <_svfiprintf_r+0x1d2>
341a37c4:	4b21      	ldr	r3, [pc, #132]	@ (341a384c <_svfiprintf_r+0x1ec>)
341a37c6:	bb1b      	cbnz	r3, 341a3810 <_svfiprintf_r+0x1b0>
341a37c8:	9b03      	ldr	r3, [sp, #12]
341a37ca:	3307      	adds	r3, #7
341a37cc:	f023 0307 	bic.w	r3, r3, #7
341a37d0:	3308      	adds	r3, #8
341a37d2:	9303      	str	r3, [sp, #12]
341a37d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
341a37d6:	4433      	add	r3, r6
341a37d8:	9309      	str	r3, [sp, #36]	@ 0x24
341a37da:	e76a      	b.n	341a36b2 <_svfiprintf_r+0x52>
341a37dc:	fb0c 3202 	mla	r2, ip, r2, r3
341a37e0:	460c      	mov	r4, r1
341a37e2:	2001      	movs	r0, #1
341a37e4:	e7a8      	b.n	341a3738 <_svfiprintf_r+0xd8>
341a37e6:	2300      	movs	r3, #0
341a37e8:	3401      	adds	r4, #1
341a37ea:	f04f 0c0a 	mov.w	ip, #10
341a37ee:	4619      	mov	r1, r3
341a37f0:	9305      	str	r3, [sp, #20]
341a37f2:	4620      	mov	r0, r4
341a37f4:	f810 2b01 	ldrb.w	r2, [r0], #1
341a37f8:	3a30      	subs	r2, #48	@ 0x30
341a37fa:	2a09      	cmp	r2, #9
341a37fc:	d903      	bls.n	341a3806 <_svfiprintf_r+0x1a6>
341a37fe:	2b00      	cmp	r3, #0
341a3800:	d0c6      	beq.n	341a3790 <_svfiprintf_r+0x130>
341a3802:	9105      	str	r1, [sp, #20]
341a3804:	e7c4      	b.n	341a3790 <_svfiprintf_r+0x130>
341a3806:	fb0c 2101 	mla	r1, ip, r1, r2
341a380a:	4604      	mov	r4, r0
341a380c:	2301      	movs	r3, #1
341a380e:	e7f0      	b.n	341a37f2 <_svfiprintf_r+0x192>
341a3810:	ab03      	add	r3, sp, #12
341a3812:	462a      	mov	r2, r5
341a3814:	a904      	add	r1, sp, #16
341a3816:	4638      	mov	r0, r7
341a3818:	9300      	str	r3, [sp, #0]
341a381a:	4b0d      	ldr	r3, [pc, #52]	@ (341a3850 <_svfiprintf_r+0x1f0>)
341a381c:	f3af 8000 	nop.w
341a3820:	1c42      	adds	r2, r0, #1
341a3822:	4606      	mov	r6, r0
341a3824:	d1d6      	bne.n	341a37d4 <_svfiprintf_r+0x174>
341a3826:	89ab      	ldrh	r3, [r5, #12]
341a3828:	065b      	lsls	r3, r3, #25
341a382a:	f53f af2d 	bmi.w	341a3688 <_svfiprintf_r+0x28>
341a382e:	9809      	ldr	r0, [sp, #36]	@ 0x24
341a3830:	e72c      	b.n	341a368c <_svfiprintf_r+0x2c>
341a3832:	ab03      	add	r3, sp, #12
341a3834:	462a      	mov	r2, r5
341a3836:	a904      	add	r1, sp, #16
341a3838:	4638      	mov	r0, r7
341a383a:	9300      	str	r3, [sp, #0]
341a383c:	4b04      	ldr	r3, [pc, #16]	@ (341a3850 <_svfiprintf_r+0x1f0>)
341a383e:	f000 f9bf 	bl	341a3bc0 <_printf_i>
341a3842:	e7ed      	b.n	341a3820 <_svfiprintf_r+0x1c0>
341a3844:	341a6620 	.word	0x341a6620
341a3848:	341a662a 	.word	0x341a662a
341a384c:	00000000 	.word	0x00000000
341a3850:	341a35a9 	.word	0x341a35a9
341a3854:	341a6626 	.word	0x341a6626

341a3858 <__sfputc_r>:
341a3858:	6893      	ldr	r3, [r2, #8]
341a385a:	3b01      	subs	r3, #1
341a385c:	2b00      	cmp	r3, #0
341a385e:	b410      	push	{r4}
341a3860:	6093      	str	r3, [r2, #8]
341a3862:	da08      	bge.n	341a3876 <__sfputc_r+0x1e>
341a3864:	6994      	ldr	r4, [r2, #24]
341a3866:	42a3      	cmp	r3, r4
341a3868:	db01      	blt.n	341a386e <__sfputc_r+0x16>
341a386a:	290a      	cmp	r1, #10
341a386c:	d103      	bne.n	341a3876 <__sfputc_r+0x1e>
341a386e:	f85d 4b04 	ldr.w	r4, [sp], #4
341a3872:	f7ff bc82 	b.w	341a317a <__swbuf_r>
341a3876:	6813      	ldr	r3, [r2, #0]
341a3878:	1c58      	adds	r0, r3, #1
341a387a:	6010      	str	r0, [r2, #0]
341a387c:	4608      	mov	r0, r1
341a387e:	7019      	strb	r1, [r3, #0]
341a3880:	f85d 4b04 	ldr.w	r4, [sp], #4
341a3884:	4770      	bx	lr

341a3886 <__sfputs_r>:
341a3886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
341a3888:	4606      	mov	r6, r0
341a388a:	460f      	mov	r7, r1
341a388c:	4614      	mov	r4, r2
341a388e:	18d5      	adds	r5, r2, r3
341a3890:	42ac      	cmp	r4, r5
341a3892:	d101      	bne.n	341a3898 <__sfputs_r+0x12>
341a3894:	2000      	movs	r0, #0
341a3896:	e007      	b.n	341a38a8 <__sfputs_r+0x22>
341a3898:	463a      	mov	r2, r7
341a389a:	f814 1b01 	ldrb.w	r1, [r4], #1
341a389e:	4630      	mov	r0, r6
341a38a0:	f7ff ffda 	bl	341a3858 <__sfputc_r>
341a38a4:	1c43      	adds	r3, r0, #1
341a38a6:	d1f3      	bne.n	341a3890 <__sfputs_r+0xa>
341a38a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

341a38ac <_vfiprintf_r>:
341a38ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a38b0:	460d      	mov	r5, r1
341a38b2:	b09d      	sub	sp, #116	@ 0x74
341a38b4:	4614      	mov	r4, r2
341a38b6:	4698      	mov	r8, r3
341a38b8:	4606      	mov	r6, r0
341a38ba:	b118      	cbz	r0, 341a38c4 <_vfiprintf_r+0x18>
341a38bc:	6a03      	ldr	r3, [r0, #32]
341a38be:	b90b      	cbnz	r3, 341a38c4 <_vfiprintf_r+0x18>
341a38c0:	f7ff fb3c 	bl	341a2f3c <__sinit>
341a38c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341a38c6:	07d9      	lsls	r1, r3, #31
341a38c8:	d405      	bmi.n	341a38d6 <_vfiprintf_r+0x2a>
341a38ca:	89ab      	ldrh	r3, [r5, #12]
341a38cc:	059a      	lsls	r2, r3, #22
341a38ce:	d402      	bmi.n	341a38d6 <_vfiprintf_r+0x2a>
341a38d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341a38d2:	f7ff fd60 	bl	341a3396 <__retarget_lock_acquire_recursive>
341a38d6:	89ab      	ldrh	r3, [r5, #12]
341a38d8:	071b      	lsls	r3, r3, #28
341a38da:	d501      	bpl.n	341a38e0 <_vfiprintf_r+0x34>
341a38dc:	692b      	ldr	r3, [r5, #16]
341a38de:	b99b      	cbnz	r3, 341a3908 <_vfiprintf_r+0x5c>
341a38e0:	4629      	mov	r1, r5
341a38e2:	4630      	mov	r0, r6
341a38e4:	f7ff fc88 	bl	341a31f8 <__swsetup_r>
341a38e8:	b170      	cbz	r0, 341a3908 <_vfiprintf_r+0x5c>
341a38ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341a38ec:	07dc      	lsls	r4, r3, #31
341a38ee:	d504      	bpl.n	341a38fa <_vfiprintf_r+0x4e>
341a38f0:	f04f 30ff 	mov.w	r0, #4294967295
341a38f4:	b01d      	add	sp, #116	@ 0x74
341a38f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341a38fa:	89ab      	ldrh	r3, [r5, #12]
341a38fc:	0598      	lsls	r0, r3, #22
341a38fe:	d4f7      	bmi.n	341a38f0 <_vfiprintf_r+0x44>
341a3900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341a3902:	f7ff fd49 	bl	341a3398 <__retarget_lock_release_recursive>
341a3906:	e7f3      	b.n	341a38f0 <_vfiprintf_r+0x44>
341a3908:	2300      	movs	r3, #0
341a390a:	f8cd 800c 	str.w	r8, [sp, #12]
341a390e:	f04f 0901 	mov.w	r9, #1
341a3912:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 341a3ac8 <_vfiprintf_r+0x21c>
341a3916:	9309      	str	r3, [sp, #36]	@ 0x24
341a3918:	2320      	movs	r3, #32
341a391a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
341a391e:	2330      	movs	r3, #48	@ 0x30
341a3920:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
341a3924:	4623      	mov	r3, r4
341a3926:	469a      	mov	sl, r3
341a3928:	f813 2b01 	ldrb.w	r2, [r3], #1
341a392c:	b10a      	cbz	r2, 341a3932 <_vfiprintf_r+0x86>
341a392e:	2a25      	cmp	r2, #37	@ 0x25
341a3930:	d1f9      	bne.n	341a3926 <_vfiprintf_r+0x7a>
341a3932:	ebba 0b04 	subs.w	fp, sl, r4
341a3936:	d00b      	beq.n	341a3950 <_vfiprintf_r+0xa4>
341a3938:	465b      	mov	r3, fp
341a393a:	4622      	mov	r2, r4
341a393c:	4629      	mov	r1, r5
341a393e:	4630      	mov	r0, r6
341a3940:	f7ff ffa1 	bl	341a3886 <__sfputs_r>
341a3944:	3001      	adds	r0, #1
341a3946:	f000 80a7 	beq.w	341a3a98 <_vfiprintf_r+0x1ec>
341a394a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
341a394c:	445a      	add	r2, fp
341a394e:	9209      	str	r2, [sp, #36]	@ 0x24
341a3950:	f89a 3000 	ldrb.w	r3, [sl]
341a3954:	2b00      	cmp	r3, #0
341a3956:	f000 809f 	beq.w	341a3a98 <_vfiprintf_r+0x1ec>
341a395a:	2300      	movs	r3, #0
341a395c:	f04f 32ff 	mov.w	r2, #4294967295
341a3960:	f10a 0a01 	add.w	sl, sl, #1
341a3964:	9304      	str	r3, [sp, #16]
341a3966:	9307      	str	r3, [sp, #28]
341a3968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
341a396c:	931a      	str	r3, [sp, #104]	@ 0x68
341a396e:	e9cd 2305 	strd	r2, r3, [sp, #20]
341a3972:	4654      	mov	r4, sl
341a3974:	2205      	movs	r2, #5
341a3976:	4854      	ldr	r0, [pc, #336]	@ (341a3ac8 <_vfiprintf_r+0x21c>)
341a3978:	f814 1b01 	ldrb.w	r1, [r4], #1
341a397c:	f000 fb98 	bl	341a40b0 <memchr>
341a3980:	9a04      	ldr	r2, [sp, #16]
341a3982:	b9d8      	cbnz	r0, 341a39bc <_vfiprintf_r+0x110>
341a3984:	06d1      	lsls	r1, r2, #27
341a3986:	bf44      	itt	mi
341a3988:	2320      	movmi	r3, #32
341a398a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
341a398e:	0713      	lsls	r3, r2, #28
341a3990:	bf44      	itt	mi
341a3992:	232b      	movmi	r3, #43	@ 0x2b
341a3994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
341a3998:	f89a 3000 	ldrb.w	r3, [sl]
341a399c:	2b2a      	cmp	r3, #42	@ 0x2a
341a399e:	d015      	beq.n	341a39cc <_vfiprintf_r+0x120>
341a39a0:	9a07      	ldr	r2, [sp, #28]
341a39a2:	4654      	mov	r4, sl
341a39a4:	2000      	movs	r0, #0
341a39a6:	f04f 0c0a 	mov.w	ip, #10
341a39aa:	4621      	mov	r1, r4
341a39ac:	f811 3b01 	ldrb.w	r3, [r1], #1
341a39b0:	3b30      	subs	r3, #48	@ 0x30
341a39b2:	2b09      	cmp	r3, #9
341a39b4:	d94b      	bls.n	341a3a4e <_vfiprintf_r+0x1a2>
341a39b6:	b1b0      	cbz	r0, 341a39e6 <_vfiprintf_r+0x13a>
341a39b8:	9207      	str	r2, [sp, #28]
341a39ba:	e014      	b.n	341a39e6 <_vfiprintf_r+0x13a>
341a39bc:	eba0 0308 	sub.w	r3, r0, r8
341a39c0:	46a2      	mov	sl, r4
341a39c2:	fa09 f303 	lsl.w	r3, r9, r3
341a39c6:	4313      	orrs	r3, r2
341a39c8:	9304      	str	r3, [sp, #16]
341a39ca:	e7d2      	b.n	341a3972 <_vfiprintf_r+0xc6>
341a39cc:	9b03      	ldr	r3, [sp, #12]
341a39ce:	1d19      	adds	r1, r3, #4
341a39d0:	681b      	ldr	r3, [r3, #0]
341a39d2:	2b00      	cmp	r3, #0
341a39d4:	9103      	str	r1, [sp, #12]
341a39d6:	bfbb      	ittet	lt
341a39d8:	425b      	neglt	r3, r3
341a39da:	f042 0202 	orrlt.w	r2, r2, #2
341a39de:	9307      	strge	r3, [sp, #28]
341a39e0:	9307      	strlt	r3, [sp, #28]
341a39e2:	bfb8      	it	lt
341a39e4:	9204      	strlt	r2, [sp, #16]
341a39e6:	7823      	ldrb	r3, [r4, #0]
341a39e8:	2b2e      	cmp	r3, #46	@ 0x2e
341a39ea:	d10a      	bne.n	341a3a02 <_vfiprintf_r+0x156>
341a39ec:	7863      	ldrb	r3, [r4, #1]
341a39ee:	2b2a      	cmp	r3, #42	@ 0x2a
341a39f0:	d132      	bne.n	341a3a58 <_vfiprintf_r+0x1ac>
341a39f2:	9b03      	ldr	r3, [sp, #12]
341a39f4:	3402      	adds	r4, #2
341a39f6:	1d1a      	adds	r2, r3, #4
341a39f8:	681b      	ldr	r3, [r3, #0]
341a39fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
341a39fe:	9203      	str	r2, [sp, #12]
341a3a00:	9305      	str	r3, [sp, #20]
341a3a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 341a3ad8 <_vfiprintf_r+0x22c>
341a3a06:	2203      	movs	r2, #3
341a3a08:	7821      	ldrb	r1, [r4, #0]
341a3a0a:	4650      	mov	r0, sl
341a3a0c:	f000 fb50 	bl	341a40b0 <memchr>
341a3a10:	b138      	cbz	r0, 341a3a22 <_vfiprintf_r+0x176>
341a3a12:	eba0 000a 	sub.w	r0, r0, sl
341a3a16:	2240      	movs	r2, #64	@ 0x40
341a3a18:	9b04      	ldr	r3, [sp, #16]
341a3a1a:	3401      	adds	r4, #1
341a3a1c:	4082      	lsls	r2, r0
341a3a1e:	4313      	orrs	r3, r2
341a3a20:	9304      	str	r3, [sp, #16]
341a3a22:	f814 1b01 	ldrb.w	r1, [r4], #1
341a3a26:	2206      	movs	r2, #6
341a3a28:	4828      	ldr	r0, [pc, #160]	@ (341a3acc <_vfiprintf_r+0x220>)
341a3a2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
341a3a2e:	f000 fb3f 	bl	341a40b0 <memchr>
341a3a32:	2800      	cmp	r0, #0
341a3a34:	d03f      	beq.n	341a3ab6 <_vfiprintf_r+0x20a>
341a3a36:	4b26      	ldr	r3, [pc, #152]	@ (341a3ad0 <_vfiprintf_r+0x224>)
341a3a38:	bb1b      	cbnz	r3, 341a3a82 <_vfiprintf_r+0x1d6>
341a3a3a:	9b03      	ldr	r3, [sp, #12]
341a3a3c:	3307      	adds	r3, #7
341a3a3e:	f023 0307 	bic.w	r3, r3, #7
341a3a42:	3308      	adds	r3, #8
341a3a44:	9303      	str	r3, [sp, #12]
341a3a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
341a3a48:	443b      	add	r3, r7
341a3a4a:	9309      	str	r3, [sp, #36]	@ 0x24
341a3a4c:	e76a      	b.n	341a3924 <_vfiprintf_r+0x78>
341a3a4e:	fb0c 3202 	mla	r2, ip, r2, r3
341a3a52:	460c      	mov	r4, r1
341a3a54:	2001      	movs	r0, #1
341a3a56:	e7a8      	b.n	341a39aa <_vfiprintf_r+0xfe>
341a3a58:	2300      	movs	r3, #0
341a3a5a:	3401      	adds	r4, #1
341a3a5c:	f04f 0c0a 	mov.w	ip, #10
341a3a60:	4619      	mov	r1, r3
341a3a62:	9305      	str	r3, [sp, #20]
341a3a64:	4620      	mov	r0, r4
341a3a66:	f810 2b01 	ldrb.w	r2, [r0], #1
341a3a6a:	3a30      	subs	r2, #48	@ 0x30
341a3a6c:	2a09      	cmp	r2, #9
341a3a6e:	d903      	bls.n	341a3a78 <_vfiprintf_r+0x1cc>
341a3a70:	2b00      	cmp	r3, #0
341a3a72:	d0c6      	beq.n	341a3a02 <_vfiprintf_r+0x156>
341a3a74:	9105      	str	r1, [sp, #20]
341a3a76:	e7c4      	b.n	341a3a02 <_vfiprintf_r+0x156>
341a3a78:	fb0c 2101 	mla	r1, ip, r1, r2
341a3a7c:	4604      	mov	r4, r0
341a3a7e:	2301      	movs	r3, #1
341a3a80:	e7f0      	b.n	341a3a64 <_vfiprintf_r+0x1b8>
341a3a82:	ab03      	add	r3, sp, #12
341a3a84:	462a      	mov	r2, r5
341a3a86:	a904      	add	r1, sp, #16
341a3a88:	4630      	mov	r0, r6
341a3a8a:	9300      	str	r3, [sp, #0]
341a3a8c:	4b11      	ldr	r3, [pc, #68]	@ (341a3ad4 <_vfiprintf_r+0x228>)
341a3a8e:	f3af 8000 	nop.w
341a3a92:	4607      	mov	r7, r0
341a3a94:	1c78      	adds	r0, r7, #1
341a3a96:	d1d6      	bne.n	341a3a46 <_vfiprintf_r+0x19a>
341a3a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
341a3a9a:	07d9      	lsls	r1, r3, #31
341a3a9c:	d405      	bmi.n	341a3aaa <_vfiprintf_r+0x1fe>
341a3a9e:	89ab      	ldrh	r3, [r5, #12]
341a3aa0:	059a      	lsls	r2, r3, #22
341a3aa2:	d402      	bmi.n	341a3aaa <_vfiprintf_r+0x1fe>
341a3aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
341a3aa6:	f7ff fc77 	bl	341a3398 <__retarget_lock_release_recursive>
341a3aaa:	89ab      	ldrh	r3, [r5, #12]
341a3aac:	065b      	lsls	r3, r3, #25
341a3aae:	f53f af1f 	bmi.w	341a38f0 <_vfiprintf_r+0x44>
341a3ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
341a3ab4:	e71e      	b.n	341a38f4 <_vfiprintf_r+0x48>
341a3ab6:	ab03      	add	r3, sp, #12
341a3ab8:	462a      	mov	r2, r5
341a3aba:	a904      	add	r1, sp, #16
341a3abc:	4630      	mov	r0, r6
341a3abe:	9300      	str	r3, [sp, #0]
341a3ac0:	4b04      	ldr	r3, [pc, #16]	@ (341a3ad4 <_vfiprintf_r+0x228>)
341a3ac2:	f000 f87d 	bl	341a3bc0 <_printf_i>
341a3ac6:	e7e4      	b.n	341a3a92 <_vfiprintf_r+0x1e6>
341a3ac8:	341a6620 	.word	0x341a6620
341a3acc:	341a662a 	.word	0x341a662a
341a3ad0:	00000000 	.word	0x00000000
341a3ad4:	341a3887 	.word	0x341a3887
341a3ad8:	341a6626 	.word	0x341a6626

341a3adc <_printf_common>:
341a3adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341a3ae0:	4616      	mov	r6, r2
341a3ae2:	4698      	mov	r8, r3
341a3ae4:	688a      	ldr	r2, [r1, #8]
341a3ae6:	4607      	mov	r7, r0
341a3ae8:	690b      	ldr	r3, [r1, #16]
341a3aea:	460c      	mov	r4, r1
341a3aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
341a3af0:	4293      	cmp	r3, r2
341a3af2:	bfb8      	it	lt
341a3af4:	4613      	movlt	r3, r2
341a3af6:	6033      	str	r3, [r6, #0]
341a3af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
341a3afc:	b10a      	cbz	r2, 341a3b02 <_printf_common+0x26>
341a3afe:	3301      	adds	r3, #1
341a3b00:	6033      	str	r3, [r6, #0]
341a3b02:	6823      	ldr	r3, [r4, #0]
341a3b04:	0699      	lsls	r1, r3, #26
341a3b06:	bf42      	ittt	mi
341a3b08:	6833      	ldrmi	r3, [r6, #0]
341a3b0a:	3302      	addmi	r3, #2
341a3b0c:	6033      	strmi	r3, [r6, #0]
341a3b0e:	6825      	ldr	r5, [r4, #0]
341a3b10:	f015 0506 	ands.w	r5, r5, #6
341a3b14:	d106      	bne.n	341a3b24 <_printf_common+0x48>
341a3b16:	f104 0a19 	add.w	sl, r4, #25
341a3b1a:	68e3      	ldr	r3, [r4, #12]
341a3b1c:	6832      	ldr	r2, [r6, #0]
341a3b1e:	1a9b      	subs	r3, r3, r2
341a3b20:	42ab      	cmp	r3, r5
341a3b22:	dc2b      	bgt.n	341a3b7c <_printf_common+0xa0>
341a3b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
341a3b28:	6822      	ldr	r2, [r4, #0]
341a3b2a:	3b00      	subs	r3, #0
341a3b2c:	bf18      	it	ne
341a3b2e:	2301      	movne	r3, #1
341a3b30:	0692      	lsls	r2, r2, #26
341a3b32:	d430      	bmi.n	341a3b96 <_printf_common+0xba>
341a3b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
341a3b38:	4641      	mov	r1, r8
341a3b3a:	4638      	mov	r0, r7
341a3b3c:	47c8      	blx	r9
341a3b3e:	3001      	adds	r0, #1
341a3b40:	d023      	beq.n	341a3b8a <_printf_common+0xae>
341a3b42:	6823      	ldr	r3, [r4, #0]
341a3b44:	341a      	adds	r4, #26
341a3b46:	f854 2c0a 	ldr.w	r2, [r4, #-10]
341a3b4a:	f003 0306 	and.w	r3, r3, #6
341a3b4e:	2b04      	cmp	r3, #4
341a3b50:	bf0a      	itet	eq
341a3b52:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
341a3b56:	2500      	movne	r5, #0
341a3b58:	6833      	ldreq	r3, [r6, #0]
341a3b5a:	f04f 0600 	mov.w	r6, #0
341a3b5e:	bf08      	it	eq
341a3b60:	1aed      	subeq	r5, r5, r3
341a3b62:	f854 3c12 	ldr.w	r3, [r4, #-18]
341a3b66:	bf08      	it	eq
341a3b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
341a3b6c:	4293      	cmp	r3, r2
341a3b6e:	bfc4      	itt	gt
341a3b70:	1a9b      	subgt	r3, r3, r2
341a3b72:	18ed      	addgt	r5, r5, r3
341a3b74:	42b5      	cmp	r5, r6
341a3b76:	d11a      	bne.n	341a3bae <_printf_common+0xd2>
341a3b78:	2000      	movs	r0, #0
341a3b7a:	e008      	b.n	341a3b8e <_printf_common+0xb2>
341a3b7c:	2301      	movs	r3, #1
341a3b7e:	4652      	mov	r2, sl
341a3b80:	4641      	mov	r1, r8
341a3b82:	4638      	mov	r0, r7
341a3b84:	47c8      	blx	r9
341a3b86:	3001      	adds	r0, #1
341a3b88:	d103      	bne.n	341a3b92 <_printf_common+0xb6>
341a3b8a:	f04f 30ff 	mov.w	r0, #4294967295
341a3b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
341a3b92:	3501      	adds	r5, #1
341a3b94:	e7c1      	b.n	341a3b1a <_printf_common+0x3e>
341a3b96:	18e1      	adds	r1, r4, r3
341a3b98:	1c5a      	adds	r2, r3, #1
341a3b9a:	2030      	movs	r0, #48	@ 0x30
341a3b9c:	3302      	adds	r3, #2
341a3b9e:	4422      	add	r2, r4
341a3ba0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
341a3ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
341a3ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
341a3bac:	e7c2      	b.n	341a3b34 <_printf_common+0x58>
341a3bae:	2301      	movs	r3, #1
341a3bb0:	4622      	mov	r2, r4
341a3bb2:	4641      	mov	r1, r8
341a3bb4:	4638      	mov	r0, r7
341a3bb6:	47c8      	blx	r9
341a3bb8:	3001      	adds	r0, #1
341a3bba:	d0e6      	beq.n	341a3b8a <_printf_common+0xae>
341a3bbc:	3601      	adds	r6, #1
341a3bbe:	e7d9      	b.n	341a3b74 <_printf_common+0x98>

341a3bc0 <_printf_i>:
341a3bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
341a3bc4:	7e0f      	ldrb	r7, [r1, #24]
341a3bc6:	4691      	mov	r9, r2
341a3bc8:	4680      	mov	r8, r0
341a3bca:	460c      	mov	r4, r1
341a3bcc:	2f78      	cmp	r7, #120	@ 0x78
341a3bce:	469a      	mov	sl, r3
341a3bd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
341a3bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
341a3bd6:	d807      	bhi.n	341a3be8 <_printf_i+0x28>
341a3bd8:	2f62      	cmp	r7, #98	@ 0x62
341a3bda:	d80a      	bhi.n	341a3bf2 <_printf_i+0x32>
341a3bdc:	2f00      	cmp	r7, #0
341a3bde:	f000 80d1 	beq.w	341a3d84 <_printf_i+0x1c4>
341a3be2:	2f58      	cmp	r7, #88	@ 0x58
341a3be4:	f000 80b8 	beq.w	341a3d58 <_printf_i+0x198>
341a3be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
341a3bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
341a3bf0:	e03a      	b.n	341a3c68 <_printf_i+0xa8>
341a3bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
341a3bf6:	2b15      	cmp	r3, #21
341a3bf8:	d8f6      	bhi.n	341a3be8 <_printf_i+0x28>
341a3bfa:	a101      	add	r1, pc, #4	@ (adr r1, 341a3c00 <_printf_i+0x40>)
341a3bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
341a3c00:	341a3c59 	.word	0x341a3c59
341a3c04:	341a3c6d 	.word	0x341a3c6d
341a3c08:	341a3be9 	.word	0x341a3be9
341a3c0c:	341a3be9 	.word	0x341a3be9
341a3c10:	341a3be9 	.word	0x341a3be9
341a3c14:	341a3be9 	.word	0x341a3be9
341a3c18:	341a3c6d 	.word	0x341a3c6d
341a3c1c:	341a3be9 	.word	0x341a3be9
341a3c20:	341a3be9 	.word	0x341a3be9
341a3c24:	341a3be9 	.word	0x341a3be9
341a3c28:	341a3be9 	.word	0x341a3be9
341a3c2c:	341a3d6b 	.word	0x341a3d6b
341a3c30:	341a3c97 	.word	0x341a3c97
341a3c34:	341a3d25 	.word	0x341a3d25
341a3c38:	341a3be9 	.word	0x341a3be9
341a3c3c:	341a3be9 	.word	0x341a3be9
341a3c40:	341a3d8d 	.word	0x341a3d8d
341a3c44:	341a3be9 	.word	0x341a3be9
341a3c48:	341a3c97 	.word	0x341a3c97
341a3c4c:	341a3be9 	.word	0x341a3be9
341a3c50:	341a3be9 	.word	0x341a3be9
341a3c54:	341a3d2d 	.word	0x341a3d2d
341a3c58:	6833      	ldr	r3, [r6, #0]
341a3c5a:	1d1a      	adds	r2, r3, #4
341a3c5c:	681b      	ldr	r3, [r3, #0]
341a3c5e:	6032      	str	r2, [r6, #0]
341a3c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
341a3c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
341a3c68:	2301      	movs	r3, #1
341a3c6a:	e09c      	b.n	341a3da6 <_printf_i+0x1e6>
341a3c6c:	6833      	ldr	r3, [r6, #0]
341a3c6e:	6820      	ldr	r0, [r4, #0]
341a3c70:	1d19      	adds	r1, r3, #4
341a3c72:	6031      	str	r1, [r6, #0]
341a3c74:	0606      	lsls	r6, r0, #24
341a3c76:	d501      	bpl.n	341a3c7c <_printf_i+0xbc>
341a3c78:	681d      	ldr	r5, [r3, #0]
341a3c7a:	e003      	b.n	341a3c84 <_printf_i+0xc4>
341a3c7c:	0645      	lsls	r5, r0, #25
341a3c7e:	d5fb      	bpl.n	341a3c78 <_printf_i+0xb8>
341a3c80:	f9b3 5000 	ldrsh.w	r5, [r3]
341a3c84:	2d00      	cmp	r5, #0
341a3c86:	da03      	bge.n	341a3c90 <_printf_i+0xd0>
341a3c88:	232d      	movs	r3, #45	@ 0x2d
341a3c8a:	426d      	negs	r5, r5
341a3c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
341a3c90:	4858      	ldr	r0, [pc, #352]	@ (341a3df4 <_printf_i+0x234>)
341a3c92:	230a      	movs	r3, #10
341a3c94:	e011      	b.n	341a3cba <_printf_i+0xfa>
341a3c96:	6821      	ldr	r1, [r4, #0]
341a3c98:	6833      	ldr	r3, [r6, #0]
341a3c9a:	0608      	lsls	r0, r1, #24
341a3c9c:	f853 5b04 	ldr.w	r5, [r3], #4
341a3ca0:	d402      	bmi.n	341a3ca8 <_printf_i+0xe8>
341a3ca2:	0649      	lsls	r1, r1, #25
341a3ca4:	bf48      	it	mi
341a3ca6:	b2ad      	uxthmi	r5, r5
341a3ca8:	2f6f      	cmp	r7, #111	@ 0x6f
341a3caa:	6033      	str	r3, [r6, #0]
341a3cac:	4851      	ldr	r0, [pc, #324]	@ (341a3df4 <_printf_i+0x234>)
341a3cae:	bf14      	ite	ne
341a3cb0:	230a      	movne	r3, #10
341a3cb2:	2308      	moveq	r3, #8
341a3cb4:	2100      	movs	r1, #0
341a3cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
341a3cba:	6866      	ldr	r6, [r4, #4]
341a3cbc:	2e00      	cmp	r6, #0
341a3cbe:	60a6      	str	r6, [r4, #8]
341a3cc0:	db05      	blt.n	341a3cce <_printf_i+0x10e>
341a3cc2:	6821      	ldr	r1, [r4, #0]
341a3cc4:	432e      	orrs	r6, r5
341a3cc6:	f021 0104 	bic.w	r1, r1, #4
341a3cca:	6021      	str	r1, [r4, #0]
341a3ccc:	d04b      	beq.n	341a3d66 <_printf_i+0x1a6>
341a3cce:	4616      	mov	r6, r2
341a3cd0:	fbb5 f1f3 	udiv	r1, r5, r3
341a3cd4:	fb03 5711 	mls	r7, r3, r1, r5
341a3cd8:	5dc7      	ldrb	r7, [r0, r7]
341a3cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
341a3cde:	462f      	mov	r7, r5
341a3ce0:	460d      	mov	r5, r1
341a3ce2:	42bb      	cmp	r3, r7
341a3ce4:	d9f4      	bls.n	341a3cd0 <_printf_i+0x110>
341a3ce6:	2b08      	cmp	r3, #8
341a3ce8:	d10b      	bne.n	341a3d02 <_printf_i+0x142>
341a3cea:	6823      	ldr	r3, [r4, #0]
341a3cec:	07df      	lsls	r7, r3, #31
341a3cee:	d508      	bpl.n	341a3d02 <_printf_i+0x142>
341a3cf0:	6923      	ldr	r3, [r4, #16]
341a3cf2:	6861      	ldr	r1, [r4, #4]
341a3cf4:	4299      	cmp	r1, r3
341a3cf6:	bfde      	ittt	le
341a3cf8:	2330      	movle	r3, #48	@ 0x30
341a3cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
341a3cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
341a3d02:	1b92      	subs	r2, r2, r6
341a3d04:	6122      	str	r2, [r4, #16]
341a3d06:	464b      	mov	r3, r9
341a3d08:	aa03      	add	r2, sp, #12
341a3d0a:	4621      	mov	r1, r4
341a3d0c:	4640      	mov	r0, r8
341a3d0e:	f8cd a000 	str.w	sl, [sp]
341a3d12:	f7ff fee3 	bl	341a3adc <_printf_common>
341a3d16:	3001      	adds	r0, #1
341a3d18:	d14a      	bne.n	341a3db0 <_printf_i+0x1f0>
341a3d1a:	f04f 30ff 	mov.w	r0, #4294967295
341a3d1e:	b004      	add	sp, #16
341a3d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
341a3d24:	6823      	ldr	r3, [r4, #0]
341a3d26:	f043 0320 	orr.w	r3, r3, #32
341a3d2a:	6023      	str	r3, [r4, #0]
341a3d2c:	2778      	movs	r7, #120	@ 0x78
341a3d2e:	4832      	ldr	r0, [pc, #200]	@ (341a3df8 <_printf_i+0x238>)
341a3d30:	6823      	ldr	r3, [r4, #0]
341a3d32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
341a3d36:	061f      	lsls	r7, r3, #24
341a3d38:	6831      	ldr	r1, [r6, #0]
341a3d3a:	f851 5b04 	ldr.w	r5, [r1], #4
341a3d3e:	d402      	bmi.n	341a3d46 <_printf_i+0x186>
341a3d40:	065f      	lsls	r7, r3, #25
341a3d42:	bf48      	it	mi
341a3d44:	b2ad      	uxthmi	r5, r5
341a3d46:	6031      	str	r1, [r6, #0]
341a3d48:	07d9      	lsls	r1, r3, #31
341a3d4a:	bf44      	itt	mi
341a3d4c:	f043 0320 	orrmi.w	r3, r3, #32
341a3d50:	6023      	strmi	r3, [r4, #0]
341a3d52:	b11d      	cbz	r5, 341a3d5c <_printf_i+0x19c>
341a3d54:	2310      	movs	r3, #16
341a3d56:	e7ad      	b.n	341a3cb4 <_printf_i+0xf4>
341a3d58:	4826      	ldr	r0, [pc, #152]	@ (341a3df4 <_printf_i+0x234>)
341a3d5a:	e7e9      	b.n	341a3d30 <_printf_i+0x170>
341a3d5c:	6823      	ldr	r3, [r4, #0]
341a3d5e:	f023 0320 	bic.w	r3, r3, #32
341a3d62:	6023      	str	r3, [r4, #0]
341a3d64:	e7f6      	b.n	341a3d54 <_printf_i+0x194>
341a3d66:	4616      	mov	r6, r2
341a3d68:	e7bd      	b.n	341a3ce6 <_printf_i+0x126>
341a3d6a:	6833      	ldr	r3, [r6, #0]
341a3d6c:	6825      	ldr	r5, [r4, #0]
341a3d6e:	1d18      	adds	r0, r3, #4
341a3d70:	6961      	ldr	r1, [r4, #20]
341a3d72:	6030      	str	r0, [r6, #0]
341a3d74:	062e      	lsls	r6, r5, #24
341a3d76:	681b      	ldr	r3, [r3, #0]
341a3d78:	d501      	bpl.n	341a3d7e <_printf_i+0x1be>
341a3d7a:	6019      	str	r1, [r3, #0]
341a3d7c:	e002      	b.n	341a3d84 <_printf_i+0x1c4>
341a3d7e:	0668      	lsls	r0, r5, #25
341a3d80:	d5fb      	bpl.n	341a3d7a <_printf_i+0x1ba>
341a3d82:	8019      	strh	r1, [r3, #0]
341a3d84:	2300      	movs	r3, #0
341a3d86:	4616      	mov	r6, r2
341a3d88:	6123      	str	r3, [r4, #16]
341a3d8a:	e7bc      	b.n	341a3d06 <_printf_i+0x146>
341a3d8c:	6833      	ldr	r3, [r6, #0]
341a3d8e:	2100      	movs	r1, #0
341a3d90:	1d1a      	adds	r2, r3, #4
341a3d92:	6032      	str	r2, [r6, #0]
341a3d94:	681e      	ldr	r6, [r3, #0]
341a3d96:	6862      	ldr	r2, [r4, #4]
341a3d98:	4630      	mov	r0, r6
341a3d9a:	f000 f989 	bl	341a40b0 <memchr>
341a3d9e:	b108      	cbz	r0, 341a3da4 <_printf_i+0x1e4>
341a3da0:	1b80      	subs	r0, r0, r6
341a3da2:	6060      	str	r0, [r4, #4]
341a3da4:	6863      	ldr	r3, [r4, #4]
341a3da6:	6123      	str	r3, [r4, #16]
341a3da8:	2300      	movs	r3, #0
341a3daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
341a3dae:	e7aa      	b.n	341a3d06 <_printf_i+0x146>
341a3db0:	6923      	ldr	r3, [r4, #16]
341a3db2:	4632      	mov	r2, r6
341a3db4:	4649      	mov	r1, r9
341a3db6:	4640      	mov	r0, r8
341a3db8:	47d0      	blx	sl
341a3dba:	3001      	adds	r0, #1
341a3dbc:	d0ad      	beq.n	341a3d1a <_printf_i+0x15a>
341a3dbe:	6823      	ldr	r3, [r4, #0]
341a3dc0:	079b      	lsls	r3, r3, #30
341a3dc2:	d413      	bmi.n	341a3dec <_printf_i+0x22c>
341a3dc4:	68e0      	ldr	r0, [r4, #12]
341a3dc6:	9b03      	ldr	r3, [sp, #12]
341a3dc8:	4298      	cmp	r0, r3
341a3dca:	bfb8      	it	lt
341a3dcc:	4618      	movlt	r0, r3
341a3dce:	e7a6      	b.n	341a3d1e <_printf_i+0x15e>
341a3dd0:	2301      	movs	r3, #1
341a3dd2:	4632      	mov	r2, r6
341a3dd4:	4649      	mov	r1, r9
341a3dd6:	4640      	mov	r0, r8
341a3dd8:	47d0      	blx	sl
341a3dda:	3001      	adds	r0, #1
341a3ddc:	d09d      	beq.n	341a3d1a <_printf_i+0x15a>
341a3dde:	3501      	adds	r5, #1
341a3de0:	68e3      	ldr	r3, [r4, #12]
341a3de2:	9903      	ldr	r1, [sp, #12]
341a3de4:	1a5b      	subs	r3, r3, r1
341a3de6:	42ab      	cmp	r3, r5
341a3de8:	dcf2      	bgt.n	341a3dd0 <_printf_i+0x210>
341a3dea:	e7eb      	b.n	341a3dc4 <_printf_i+0x204>
341a3dec:	2500      	movs	r5, #0
341a3dee:	f104 0619 	add.w	r6, r4, #25
341a3df2:	e7f5      	b.n	341a3de0 <_printf_i+0x220>
341a3df4:	341a6631 	.word	0x341a6631
341a3df8:	341a6642 	.word	0x341a6642

341a3dfc <__sflush_r>:
341a3dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341a3e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341a3e04:	0716      	lsls	r6, r2, #28
341a3e06:	4605      	mov	r5, r0
341a3e08:	460c      	mov	r4, r1
341a3e0a:	d454      	bmi.n	341a3eb6 <__sflush_r+0xba>
341a3e0c:	684b      	ldr	r3, [r1, #4]
341a3e0e:	2b00      	cmp	r3, #0
341a3e10:	dc02      	bgt.n	341a3e18 <__sflush_r+0x1c>
341a3e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
341a3e14:	2b00      	cmp	r3, #0
341a3e16:	dd48      	ble.n	341a3eaa <__sflush_r+0xae>
341a3e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
341a3e1a:	2e00      	cmp	r6, #0
341a3e1c:	d045      	beq.n	341a3eaa <__sflush_r+0xae>
341a3e1e:	2300      	movs	r3, #0
341a3e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
341a3e24:	682f      	ldr	r7, [r5, #0]
341a3e26:	6a21      	ldr	r1, [r4, #32]
341a3e28:	602b      	str	r3, [r5, #0]
341a3e2a:	d030      	beq.n	341a3e8e <__sflush_r+0x92>
341a3e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
341a3e2e:	89a3      	ldrh	r3, [r4, #12]
341a3e30:	0759      	lsls	r1, r3, #29
341a3e32:	d505      	bpl.n	341a3e40 <__sflush_r+0x44>
341a3e34:	6863      	ldr	r3, [r4, #4]
341a3e36:	1ad2      	subs	r2, r2, r3
341a3e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
341a3e3a:	b10b      	cbz	r3, 341a3e40 <__sflush_r+0x44>
341a3e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341a3e3e:	1ad2      	subs	r2, r2, r3
341a3e40:	2300      	movs	r3, #0
341a3e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
341a3e44:	6a21      	ldr	r1, [r4, #32]
341a3e46:	4628      	mov	r0, r5
341a3e48:	47b0      	blx	r6
341a3e4a:	1c43      	adds	r3, r0, #1
341a3e4c:	89a3      	ldrh	r3, [r4, #12]
341a3e4e:	d106      	bne.n	341a3e5e <__sflush_r+0x62>
341a3e50:	6829      	ldr	r1, [r5, #0]
341a3e52:	291d      	cmp	r1, #29
341a3e54:	d82b      	bhi.n	341a3eae <__sflush_r+0xb2>
341a3e56:	4a2a      	ldr	r2, [pc, #168]	@ (341a3f00 <__sflush_r+0x104>)
341a3e58:	40ca      	lsrs	r2, r1
341a3e5a:	07d6      	lsls	r6, r2, #31
341a3e5c:	d527      	bpl.n	341a3eae <__sflush_r+0xb2>
341a3e5e:	2200      	movs	r2, #0
341a3e60:	04d9      	lsls	r1, r3, #19
341a3e62:	6062      	str	r2, [r4, #4]
341a3e64:	6922      	ldr	r2, [r4, #16]
341a3e66:	6022      	str	r2, [r4, #0]
341a3e68:	d504      	bpl.n	341a3e74 <__sflush_r+0x78>
341a3e6a:	1c42      	adds	r2, r0, #1
341a3e6c:	d101      	bne.n	341a3e72 <__sflush_r+0x76>
341a3e6e:	682b      	ldr	r3, [r5, #0]
341a3e70:	b903      	cbnz	r3, 341a3e74 <__sflush_r+0x78>
341a3e72:	6560      	str	r0, [r4, #84]	@ 0x54
341a3e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
341a3e76:	602f      	str	r7, [r5, #0]
341a3e78:	b1b9      	cbz	r1, 341a3eaa <__sflush_r+0xae>
341a3e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
341a3e7e:	4299      	cmp	r1, r3
341a3e80:	d002      	beq.n	341a3e88 <__sflush_r+0x8c>
341a3e82:	4628      	mov	r0, r5
341a3e84:	f7ff fa98 	bl	341a33b8 <_free_r>
341a3e88:	2300      	movs	r3, #0
341a3e8a:	6363      	str	r3, [r4, #52]	@ 0x34
341a3e8c:	e00d      	b.n	341a3eaa <__sflush_r+0xae>
341a3e8e:	2301      	movs	r3, #1
341a3e90:	4628      	mov	r0, r5
341a3e92:	47b0      	blx	r6
341a3e94:	4602      	mov	r2, r0
341a3e96:	1c50      	adds	r0, r2, #1
341a3e98:	d1c9      	bne.n	341a3e2e <__sflush_r+0x32>
341a3e9a:	682b      	ldr	r3, [r5, #0]
341a3e9c:	2b00      	cmp	r3, #0
341a3e9e:	d0c6      	beq.n	341a3e2e <__sflush_r+0x32>
341a3ea0:	2b1d      	cmp	r3, #29
341a3ea2:	d001      	beq.n	341a3ea8 <__sflush_r+0xac>
341a3ea4:	2b16      	cmp	r3, #22
341a3ea6:	d11d      	bne.n	341a3ee4 <__sflush_r+0xe8>
341a3ea8:	602f      	str	r7, [r5, #0]
341a3eaa:	2000      	movs	r0, #0
341a3eac:	e021      	b.n	341a3ef2 <__sflush_r+0xf6>
341a3eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341a3eb2:	b21b      	sxth	r3, r3
341a3eb4:	e01a      	b.n	341a3eec <__sflush_r+0xf0>
341a3eb6:	690f      	ldr	r7, [r1, #16]
341a3eb8:	2f00      	cmp	r7, #0
341a3eba:	d0f6      	beq.n	341a3eaa <__sflush_r+0xae>
341a3ebc:	0793      	lsls	r3, r2, #30
341a3ebe:	680e      	ldr	r6, [r1, #0]
341a3ec0:	600f      	str	r7, [r1, #0]
341a3ec2:	bf0c      	ite	eq
341a3ec4:	694b      	ldreq	r3, [r1, #20]
341a3ec6:	2300      	movne	r3, #0
341a3ec8:	eba6 0807 	sub.w	r8, r6, r7
341a3ecc:	608b      	str	r3, [r1, #8]
341a3ece:	f1b8 0f00 	cmp.w	r8, #0
341a3ed2:	ddea      	ble.n	341a3eaa <__sflush_r+0xae>
341a3ed4:	4643      	mov	r3, r8
341a3ed6:	463a      	mov	r2, r7
341a3ed8:	6a21      	ldr	r1, [r4, #32]
341a3eda:	4628      	mov	r0, r5
341a3edc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
341a3ede:	47b0      	blx	r6
341a3ee0:	2800      	cmp	r0, #0
341a3ee2:	dc08      	bgt.n	341a3ef6 <__sflush_r+0xfa>
341a3ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341a3ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341a3eec:	f04f 30ff 	mov.w	r0, #4294967295
341a3ef0:	81a3      	strh	r3, [r4, #12]
341a3ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
341a3ef6:	4407      	add	r7, r0
341a3ef8:	eba8 0800 	sub.w	r8, r8, r0
341a3efc:	e7e7      	b.n	341a3ece <__sflush_r+0xd2>
341a3efe:	bf00      	nop
341a3f00:	20400001 	.word	0x20400001

341a3f04 <_fflush_r>:
341a3f04:	b538      	push	{r3, r4, r5, lr}
341a3f06:	690b      	ldr	r3, [r1, #16]
341a3f08:	4605      	mov	r5, r0
341a3f0a:	460c      	mov	r4, r1
341a3f0c:	b913      	cbnz	r3, 341a3f14 <_fflush_r+0x10>
341a3f0e:	2500      	movs	r5, #0
341a3f10:	4628      	mov	r0, r5
341a3f12:	bd38      	pop	{r3, r4, r5, pc}
341a3f14:	b118      	cbz	r0, 341a3f1e <_fflush_r+0x1a>
341a3f16:	6a03      	ldr	r3, [r0, #32]
341a3f18:	b90b      	cbnz	r3, 341a3f1e <_fflush_r+0x1a>
341a3f1a:	f7ff f80f 	bl	341a2f3c <__sinit>
341a3f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341a3f22:	2b00      	cmp	r3, #0
341a3f24:	d0f3      	beq.n	341a3f0e <_fflush_r+0xa>
341a3f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
341a3f28:	07d0      	lsls	r0, r2, #31
341a3f2a:	d404      	bmi.n	341a3f36 <_fflush_r+0x32>
341a3f2c:	0599      	lsls	r1, r3, #22
341a3f2e:	d402      	bmi.n	341a3f36 <_fflush_r+0x32>
341a3f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341a3f32:	f7ff fa30 	bl	341a3396 <__retarget_lock_acquire_recursive>
341a3f36:	4628      	mov	r0, r5
341a3f38:	4621      	mov	r1, r4
341a3f3a:	f7ff ff5f 	bl	341a3dfc <__sflush_r>
341a3f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341a3f40:	4605      	mov	r5, r0
341a3f42:	07da      	lsls	r2, r3, #31
341a3f44:	d4e4      	bmi.n	341a3f10 <_fflush_r+0xc>
341a3f46:	89a3      	ldrh	r3, [r4, #12]
341a3f48:	059b      	lsls	r3, r3, #22
341a3f4a:	d4e1      	bmi.n	341a3f10 <_fflush_r+0xc>
341a3f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341a3f4e:	f7ff fa23 	bl	341a3398 <__retarget_lock_release_recursive>
341a3f52:	e7dd      	b.n	341a3f10 <_fflush_r+0xc>

341a3f54 <__swhatbuf_r>:
341a3f54:	b570      	push	{r4, r5, r6, lr}
341a3f56:	460c      	mov	r4, r1
341a3f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341a3f5c:	b096      	sub	sp, #88	@ 0x58
341a3f5e:	4615      	mov	r5, r2
341a3f60:	2900      	cmp	r1, #0
341a3f62:	461e      	mov	r6, r3
341a3f64:	da0c      	bge.n	341a3f80 <__swhatbuf_r+0x2c>
341a3f66:	89a3      	ldrh	r3, [r4, #12]
341a3f68:	2100      	movs	r1, #0
341a3f6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
341a3f6e:	bf14      	ite	ne
341a3f70:	2340      	movne	r3, #64	@ 0x40
341a3f72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
341a3f76:	2000      	movs	r0, #0
341a3f78:	6031      	str	r1, [r6, #0]
341a3f7a:	602b      	str	r3, [r5, #0]
341a3f7c:	b016      	add	sp, #88	@ 0x58
341a3f7e:	bd70      	pop	{r4, r5, r6, pc}
341a3f80:	466a      	mov	r2, sp
341a3f82:	f000 f863 	bl	341a404c <_fstat_r>
341a3f86:	2800      	cmp	r0, #0
341a3f88:	dbed      	blt.n	341a3f66 <__swhatbuf_r+0x12>
341a3f8a:	9901      	ldr	r1, [sp, #4]
341a3f8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
341a3f90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
341a3f94:	4259      	negs	r1, r3
341a3f96:	4159      	adcs	r1, r3
341a3f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
341a3f9c:	e7eb      	b.n	341a3f76 <__swhatbuf_r+0x22>

341a3f9e <__smakebuf_r>:
341a3f9e:	898b      	ldrh	r3, [r1, #12]
341a3fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
341a3fa2:	079d      	lsls	r5, r3, #30
341a3fa4:	4606      	mov	r6, r0
341a3fa6:	460c      	mov	r4, r1
341a3fa8:	d507      	bpl.n	341a3fba <__smakebuf_r+0x1c>
341a3faa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
341a3fae:	6023      	str	r3, [r4, #0]
341a3fb0:	6123      	str	r3, [r4, #16]
341a3fb2:	2301      	movs	r3, #1
341a3fb4:	6163      	str	r3, [r4, #20]
341a3fb6:	b003      	add	sp, #12
341a3fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
341a3fba:	ab01      	add	r3, sp, #4
341a3fbc:	466a      	mov	r2, sp
341a3fbe:	f7ff ffc9 	bl	341a3f54 <__swhatbuf_r>
341a3fc2:	9f00      	ldr	r7, [sp, #0]
341a3fc4:	4605      	mov	r5, r0
341a3fc6:	4630      	mov	r0, r6
341a3fc8:	4639      	mov	r1, r7
341a3fca:	f7ff fa61 	bl	341a3490 <_malloc_r>
341a3fce:	b948      	cbnz	r0, 341a3fe4 <__smakebuf_r+0x46>
341a3fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341a3fd4:	059a      	lsls	r2, r3, #22
341a3fd6:	d4ee      	bmi.n	341a3fb6 <__smakebuf_r+0x18>
341a3fd8:	f023 0303 	bic.w	r3, r3, #3
341a3fdc:	f043 0302 	orr.w	r3, r3, #2
341a3fe0:	81a3      	strh	r3, [r4, #12]
341a3fe2:	e7e2      	b.n	341a3faa <__smakebuf_r+0xc>
341a3fe4:	89a3      	ldrh	r3, [r4, #12]
341a3fe6:	6020      	str	r0, [r4, #0]
341a3fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341a3fec:	81a3      	strh	r3, [r4, #12]
341a3fee:	9b01      	ldr	r3, [sp, #4]
341a3ff0:	e9c4 0704 	strd	r0, r7, [r4, #16]
341a3ff4:	b15b      	cbz	r3, 341a400e <__smakebuf_r+0x70>
341a3ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
341a3ffa:	4630      	mov	r0, r6
341a3ffc:	f000 f838 	bl	341a4070 <_isatty_r>
341a4000:	b128      	cbz	r0, 341a400e <__smakebuf_r+0x70>
341a4002:	89a3      	ldrh	r3, [r4, #12]
341a4004:	f023 0303 	bic.w	r3, r3, #3
341a4008:	f043 0301 	orr.w	r3, r3, #1
341a400c:	81a3      	strh	r3, [r4, #12]
341a400e:	89a3      	ldrh	r3, [r4, #12]
341a4010:	431d      	orrs	r5, r3
341a4012:	81a5      	strh	r5, [r4, #12]
341a4014:	e7cf      	b.n	341a3fb6 <__smakebuf_r+0x18>

341a4016 <memmove>:
341a4016:	4288      	cmp	r0, r1
341a4018:	b510      	push	{r4, lr}
341a401a:	eb01 0402 	add.w	r4, r1, r2
341a401e:	d902      	bls.n	341a4026 <memmove+0x10>
341a4020:	4284      	cmp	r4, r0
341a4022:	4623      	mov	r3, r4
341a4024:	d807      	bhi.n	341a4036 <memmove+0x20>
341a4026:	1e43      	subs	r3, r0, #1
341a4028:	42a1      	cmp	r1, r4
341a402a:	d008      	beq.n	341a403e <memmove+0x28>
341a402c:	f811 2b01 	ldrb.w	r2, [r1], #1
341a4030:	f803 2f01 	strb.w	r2, [r3, #1]!
341a4034:	e7f8      	b.n	341a4028 <memmove+0x12>
341a4036:	4402      	add	r2, r0
341a4038:	4601      	mov	r1, r0
341a403a:	428a      	cmp	r2, r1
341a403c:	d100      	bne.n	341a4040 <memmove+0x2a>
341a403e:	bd10      	pop	{r4, pc}
341a4040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
341a4044:	f802 4d01 	strb.w	r4, [r2, #-1]!
341a4048:	e7f7      	b.n	341a403a <memmove+0x24>
	...

341a404c <_fstat_r>:
341a404c:	b538      	push	{r3, r4, r5, lr}
341a404e:	2300      	movs	r3, #0
341a4050:	4d06      	ldr	r5, [pc, #24]	@ (341a406c <_fstat_r+0x20>)
341a4052:	4604      	mov	r4, r0
341a4054:	4608      	mov	r0, r1
341a4056:	4611      	mov	r1, r2
341a4058:	602b      	str	r3, [r5, #0]
341a405a:	f7de fc96 	bl	3418298a <_fstat>
341a405e:	1c43      	adds	r3, r0, #1
341a4060:	d102      	bne.n	341a4068 <_fstat_r+0x1c>
341a4062:	682b      	ldr	r3, [r5, #0]
341a4064:	b103      	cbz	r3, 341a4068 <_fstat_r+0x1c>
341a4066:	6023      	str	r3, [r4, #0]
341a4068:	bd38      	pop	{r3, r4, r5, pc}
341a406a:	bf00      	nop
341a406c:	341c36b8 	.word	0x341c36b8

341a4070 <_isatty_r>:
341a4070:	b538      	push	{r3, r4, r5, lr}
341a4072:	2300      	movs	r3, #0
341a4074:	4d05      	ldr	r5, [pc, #20]	@ (341a408c <_isatty_r+0x1c>)
341a4076:	4604      	mov	r4, r0
341a4078:	4608      	mov	r0, r1
341a407a:	602b      	str	r3, [r5, #0]
341a407c:	f7de fc95 	bl	341829aa <_isatty>
341a4080:	1c43      	adds	r3, r0, #1
341a4082:	d102      	bne.n	341a408a <_isatty_r+0x1a>
341a4084:	682b      	ldr	r3, [r5, #0]
341a4086:	b103      	cbz	r3, 341a408a <_isatty_r+0x1a>
341a4088:	6023      	str	r3, [r4, #0]
341a408a:	bd38      	pop	{r3, r4, r5, pc}
341a408c:	341c36b8 	.word	0x341c36b8

341a4090 <_sbrk_r>:
341a4090:	b538      	push	{r3, r4, r5, lr}
341a4092:	2300      	movs	r3, #0
341a4094:	4d05      	ldr	r5, [pc, #20]	@ (341a40ac <_sbrk_r+0x1c>)
341a4096:	4604      	mov	r4, r0
341a4098:	4608      	mov	r0, r1
341a409a:	602b      	str	r3, [r5, #0]
341a409c:	f7de fc9e 	bl	341829dc <_sbrk>
341a40a0:	1c43      	adds	r3, r0, #1
341a40a2:	d102      	bne.n	341a40aa <_sbrk_r+0x1a>
341a40a4:	682b      	ldr	r3, [r5, #0]
341a40a6:	b103      	cbz	r3, 341a40aa <_sbrk_r+0x1a>
341a40a8:	6023      	str	r3, [r4, #0]
341a40aa:	bd38      	pop	{r3, r4, r5, pc}
341a40ac:	341c36b8 	.word	0x341c36b8

341a40b0 <memchr>:
341a40b0:	b2c9      	uxtb	r1, r1
341a40b2:	4603      	mov	r3, r0
341a40b4:	4402      	add	r2, r0
341a40b6:	b510      	push	{r4, lr}
341a40b8:	4293      	cmp	r3, r2
341a40ba:	4618      	mov	r0, r3
341a40bc:	d101      	bne.n	341a40c2 <memchr+0x12>
341a40be:	2000      	movs	r0, #0
341a40c0:	e003      	b.n	341a40ca <memchr+0x1a>
341a40c2:	7804      	ldrb	r4, [r0, #0]
341a40c4:	3301      	adds	r3, #1
341a40c6:	428c      	cmp	r4, r1
341a40c8:	d1f6      	bne.n	341a40b8 <memchr+0x8>
341a40ca:	bd10      	pop	{r4, pc}

341a40cc <_realloc_r>:
341a40cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341a40d0:	4607      	mov	r7, r0
341a40d2:	4614      	mov	r4, r2
341a40d4:	460d      	mov	r5, r1
341a40d6:	b921      	cbnz	r1, 341a40e2 <_realloc_r+0x16>
341a40d8:	4611      	mov	r1, r2
341a40da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
341a40de:	f7ff b9d7 	b.w	341a3490 <_malloc_r>
341a40e2:	b92a      	cbnz	r2, 341a40f0 <_realloc_r+0x24>
341a40e4:	4625      	mov	r5, r4
341a40e6:	f7ff f967 	bl	341a33b8 <_free_r>
341a40ea:	4628      	mov	r0, r5
341a40ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
341a40f0:	f000 f81a 	bl	341a4128 <_malloc_usable_size_r>
341a40f4:	4284      	cmp	r4, r0
341a40f6:	4606      	mov	r6, r0
341a40f8:	d802      	bhi.n	341a4100 <_realloc_r+0x34>
341a40fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
341a40fe:	d8f4      	bhi.n	341a40ea <_realloc_r+0x1e>
341a4100:	4621      	mov	r1, r4
341a4102:	4638      	mov	r0, r7
341a4104:	f7ff f9c4 	bl	341a3490 <_malloc_r>
341a4108:	4680      	mov	r8, r0
341a410a:	b908      	cbnz	r0, 341a4110 <_realloc_r+0x44>
341a410c:	4645      	mov	r5, r8
341a410e:	e7ec      	b.n	341a40ea <_realloc_r+0x1e>
341a4110:	42b4      	cmp	r4, r6
341a4112:	4622      	mov	r2, r4
341a4114:	4629      	mov	r1, r5
341a4116:	bf28      	it	cs
341a4118:	4632      	movcs	r2, r6
341a411a:	f7ff f940 	bl	341a339e <memcpy>
341a411e:	4629      	mov	r1, r5
341a4120:	4638      	mov	r0, r7
341a4122:	f7ff f949 	bl	341a33b8 <_free_r>
341a4126:	e7f1      	b.n	341a410c <_realloc_r+0x40>

341a4128 <_malloc_usable_size_r>:
341a4128:	f851 3c04 	ldr.w	r3, [r1, #-4]
341a412c:	1f18      	subs	r0, r3, #4
341a412e:	2b00      	cmp	r3, #0
341a4130:	bfbc      	itt	lt
341a4132:	580b      	ldrlt	r3, [r1, r0]
341a4134:	18c0      	addlt	r0, r0, r3
341a4136:	4770      	bx	lr

341a4138 <log10>:
341a4138:	b508      	push	{r3, lr}
341a413a:	ed2d 8b02 	vpush	{d8}
341a413e:	eeb0 8b40 	vmov.f64	d8, d0
341a4142:	f000 fca1 	bl	341a4a88 <__ieee754_log10>
341a4146:	eeb4 8b48 	vcmp.f64	d8, d8
341a414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a414e:	d60f      	bvs.n	341a4170 <log10+0x38>
341a4150:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
341a4154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4158:	d80a      	bhi.n	341a4170 <log10+0x38>
341a415a:	eeb5 8b40 	vcmp.f64	d8, #0.0
341a415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4162:	d108      	bne.n	341a4176 <log10+0x3e>
341a4164:	f7ff f8ec 	bl	341a3340 <__errno>
341a4168:	2322      	movs	r3, #34	@ 0x22
341a416a:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 341a4190 <log10+0x58>
341a416e:	6003      	str	r3, [r0, #0]
341a4170:	ecbd 8b02 	vpop	{d8}
341a4174:	bd08      	pop	{r3, pc}
341a4176:	f7ff f8e3 	bl	341a3340 <__errno>
341a417a:	2321      	movs	r3, #33	@ 0x21
341a417c:	ecbd 8b02 	vpop	{d8}
341a4180:	6003      	str	r3, [r0, #0]
341a4182:	4805      	ldr	r0, [pc, #20]	@ (341a4198 <log10+0x60>)
341a4184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
341a4188:	f000 b82a 	b.w	341a41e0 <nan>
341a418c:	f3af 8000 	nop.w
341a4190:	00000000 	.word	0x00000000
341a4194:	fff00000 	.word	0xfff00000
341a4198:	341a6625 	.word	0x341a6625
341a419c:	00000000 	.word	0x00000000

341a41a0 <sqrt>:
341a41a0:	b508      	push	{r3, lr}
341a41a2:	ed2d 8b04 	vpush	{d8-d9}
341a41a6:	eeb0 8b40 	vmov.f64	d8, d0
341a41aa:	f000 fc6a 	bl	341a4a82 <__ieee754_sqrt>
341a41ae:	eeb4 8b48 	vcmp.f64	d8, d8
341a41b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a41b6:	d60c      	bvs.n	341a41d2 <sqrt+0x32>
341a41b8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 341a41d8 <sqrt+0x38>
341a41bc:	eeb4 8bc9 	vcmpe.f64	d8, d9
341a41c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a41c4:	d505      	bpl.n	341a41d2 <sqrt+0x32>
341a41c6:	f7ff f8bb 	bl	341a3340 <__errno>
341a41ca:	ee89 0b09 	vdiv.f64	d0, d9, d9
341a41ce:	2321      	movs	r3, #33	@ 0x21
341a41d0:	6003      	str	r3, [r0, #0]
341a41d2:	ecbd 8b04 	vpop	{d8-d9}
341a41d6:	bd08      	pop	{r3, pc}
	...

341a41e0 <nan>:
341a41e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 341a41e8 <nan+0x8>
341a41e4:	4770      	bx	lr
341a41e6:	bf00      	nop
341a41e8:	00000000 	.word	0x00000000
341a41ec:	7ff80000 	.word	0x7ff80000

341a41f0 <checkint>:
341a41f0:	f3c1 520a 	ubfx	r2, r1, #20, #11
341a41f4:	f240 33fe 	movw	r3, #1022	@ 0x3fe
341a41f8:	429a      	cmp	r2, r3
341a41fa:	b570      	push	{r4, r5, r6, lr}
341a41fc:	dd2a      	ble.n	341a4254 <checkint+0x64>
341a41fe:	f240 4333 	movw	r3, #1075	@ 0x433
341a4202:	429a      	cmp	r2, r3
341a4204:	dc24      	bgt.n	341a4250 <checkint+0x60>
341a4206:	1a9b      	subs	r3, r3, r2
341a4208:	f04f 32ff 	mov.w	r2, #4294967295
341a420c:	f1a3 0620 	sub.w	r6, r3, #32
341a4210:	fa02 f403 	lsl.w	r4, r2, r3
341a4214:	f1c3 0520 	rsb	r5, r3, #32
341a4218:	fa02 f606 	lsl.w	r6, r2, r6
341a421c:	fa22 f505 	lsr.w	r5, r2, r5
341a4220:	409a      	lsls	r2, r3
341a4222:	4334      	orrs	r4, r6
341a4224:	ea20 0202 	bic.w	r2, r0, r2
341a4228:	432c      	orrs	r4, r5
341a422a:	ea21 0404 	bic.w	r4, r1, r4
341a422e:	4322      	orrs	r2, r4
341a4230:	f1a3 0420 	sub.w	r4, r3, #32
341a4234:	f1c3 0220 	rsb	r2, r3, #32
341a4238:	d10c      	bne.n	341a4254 <checkint+0x64>
341a423a:	40d8      	lsrs	r0, r3
341a423c:	fa01 f302 	lsl.w	r3, r1, r2
341a4240:	40e1      	lsrs	r1, r4
341a4242:	4318      	orrs	r0, r3
341a4244:	4308      	orrs	r0, r1
341a4246:	f000 0001 	and.w	r0, r0, #1
341a424a:	f1d0 0002 	rsbs	r0, r0, #2
341a424e:	bd70      	pop	{r4, r5, r6, pc}
341a4250:	2002      	movs	r0, #2
341a4252:	e7fc      	b.n	341a424e <checkint+0x5e>
341a4254:	2000      	movs	r0, #0
341a4256:	e7fa      	b.n	341a424e <checkint+0x5e>

341a4258 <pow>:
341a4258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a425c:	ee10 4a90 	vmov	r4, s1
341a4260:	f240 73fd 	movw	r3, #2045	@ 0x7fd
341a4264:	ee11 aa90 	vmov	sl, s3
341a4268:	ee10 5a10 	vmov	r5, s0
341a426c:	ea4f 5814 	mov.w	r8, r4, lsr #20
341a4270:	ee11 0a10 	vmov	r0, s2
341a4274:	ea4f 561a 	mov.w	r6, sl, lsr #20
341a4278:	f108 32ff 	add.w	r2, r8, #4294967295
341a427c:	46c4      	mov	ip, r8
341a427e:	429a      	cmp	r2, r3
341a4280:	ed2d 8b0a 	vpush	{d8-d12}
341a4284:	b087      	sub	sp, #28
341a4286:	d806      	bhi.n	341a4296 <pow+0x3e>
341a4288:	f3c6 030a 	ubfx	r3, r6, #0, #11
341a428c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
341a4290:	2b7f      	cmp	r3, #127	@ 0x7f
341a4292:	f240 8157 	bls.w	341a4544 <pow+0x2ec>
341a4296:	1802      	adds	r2, r0, r0
341a4298:	f06f 0b01 	mvn.w	fp, #1
341a429c:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
341a42a0:	eb4a 010a 	adc.w	r1, sl, sl
341a42a4:	1e57      	subs	r7, r2, #1
341a42a6:	f141 33ff 	adc.w	r3, r1, #4294967295
341a42aa:	45bb      	cmp	fp, r7
341a42ac:	eb7e 0303 	sbcs.w	r3, lr, r3
341a42b0:	d242      	bcs.n	341a4338 <pow+0xe0>
341a42b2:	ea52 0301 	orrs.w	r3, r2, r1
341a42b6:	f04f 0300 	mov.w	r3, #0
341a42ba:	d10c      	bne.n	341a42d6 <pow+0x7e>
341a42bc:	196d      	adds	r5, r5, r5
341a42be:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
341a42c2:	4164      	adcs	r4, r4
341a42c4:	42ab      	cmp	r3, r5
341a42c6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
341a42ca:	41a3      	sbcs	r3, r4
341a42cc:	f0c0 808f 	bcc.w	341a43ee <pow+0x196>
341a42d0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341a42d4:	e02b      	b.n	341a432e <pow+0xd6>
341a42d6:	4ed4      	ldr	r6, [pc, #848]	@ (341a4628 <pow+0x3d0>)
341a42d8:	42b4      	cmp	r4, r6
341a42da:	bf08      	it	eq
341a42dc:	429d      	cmpeq	r5, r3
341a42de:	d109      	bne.n	341a42f4 <pow+0x9c>
341a42e0:	1800      	adds	r0, r0, r0
341a42e2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
341a42e6:	eb4a 0a0a 	adc.w	sl, sl, sl
341a42ea:	4283      	cmp	r3, r0
341a42ec:	4bcf      	ldr	r3, [pc, #828]	@ (341a462c <pow+0x3d4>)
341a42ee:	eb73 030a 	sbcs.w	r3, r3, sl
341a42f2:	e7eb      	b.n	341a42cc <pow+0x74>
341a42f4:	196d      	adds	r5, r5, r5
341a42f6:	48ce      	ldr	r0, [pc, #824]	@ (341a4630 <pow+0x3d8>)
341a42f8:	4164      	adcs	r4, r4
341a42fa:	42ab      	cmp	r3, r5
341a42fc:	eb70 0604 	sbcs.w	r6, r0, r4
341a4300:	d375      	bcc.n	341a43ee <pow+0x196>
341a4302:	4281      	cmp	r1, r0
341a4304:	bf08      	it	eq
341a4306:	429a      	cmpeq	r2, r3
341a4308:	d171      	bne.n	341a43ee <pow+0x196>
341a430a:	4aca      	ldr	r2, [pc, #808]	@ (341a4634 <pow+0x3dc>)
341a430c:	4294      	cmp	r4, r2
341a430e:	bf08      	it	eq
341a4310:	429d      	cmpeq	r5, r3
341a4312:	d0dd      	beq.n	341a42d0 <pow+0x78>
341a4314:	4294      	cmp	r4, r2
341a4316:	ea6f 0a0a 	mvn.w	sl, sl
341a431a:	bf34      	ite	cc
341a431c:	2400      	movcc	r4, #0
341a431e:	2401      	movcs	r4, #1
341a4320:	ea4f 7ada 	mov.w	sl, sl, lsr #31
341a4324:	4554      	cmp	r4, sl
341a4326:	f040 81dc 	bne.w	341a46e2 <pow+0x48a>
341a432a:	ee21 0b01 	vmul.f64	d0, d1, d1
341a432e:	b007      	add	sp, #28
341a4330:	ecbd 8b0a 	vpop	{d8-d12}
341a4334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
341a4338:	196f      	adds	r7, r5, r5
341a433a:	eb44 0904 	adc.w	r9, r4, r4
341a433e:	1e7a      	subs	r2, r7, #1
341a4340:	f169 0300 	sbc.w	r3, r9, #0
341a4344:	4593      	cmp	fp, r2
341a4346:	eb7e 0303 	sbcs.w	r3, lr, r3
341a434a:	d225      	bcs.n	341a4398 <pow+0x140>
341a434c:	2c00      	cmp	r4, #0
341a434e:	ee20 0b00 	vmul.f64	d0, d0, d0
341a4352:	da13      	bge.n	341a437c <pow+0x124>
341a4354:	4651      	mov	r1, sl
341a4356:	f7ff ff4b 	bl	341a41f0 <checkint>
341a435a:	2801      	cmp	r0, #1
341a435c:	d10e      	bne.n	341a437c <pow+0x124>
341a435e:	eeb1 0b40 	vneg.f64	d0, d0
341a4362:	ea57 0909 	orrs.w	r9, r7, r9
341a4366:	d10b      	bne.n	341a4380 <pow+0x128>
341a4368:	f1ba 0f00 	cmp.w	sl, #0
341a436c:	dadf      	bge.n	341a432e <pow+0xd6>
341a436e:	b007      	add	sp, #28
341a4370:	ecbd 8b0a 	vpop	{d8-d12}
341a4374:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a4378:	f000 bc26 	b.w	341a4bc8 <__math_divzero>
341a437c:	2000      	movs	r0, #0
341a437e:	e7f0      	b.n	341a4362 <pow+0x10a>
341a4380:	f1ba 0f00 	cmp.w	sl, #0
341a4384:	dad3      	bge.n	341a432e <pow+0xd6>
341a4386:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
341a438a:	ee86 7b00 	vdiv.f64	d7, d6, d0
341a438e:	ed8d 7b00 	vstr	d7, [sp]
341a4392:	ed9d 0b00 	vldr	d0, [sp]
341a4396:	e7ca      	b.n	341a432e <pow+0xd6>
341a4398:	2c00      	cmp	r4, #0
341a439a:	da2b      	bge.n	341a43f4 <pow+0x19c>
341a439c:	4651      	mov	r1, sl
341a439e:	f7ff ff27 	bl	341a41f0 <checkint>
341a43a2:	b930      	cbnz	r0, 341a43b2 <pow+0x15a>
341a43a4:	b007      	add	sp, #28
341a43a6:	ecbd 8b0a 	vpop	{d8-d12}
341a43aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a43ae:	f000 bc27 	b.w	341a4c00 <__math_invalid>
341a43b2:	1e41      	subs	r1, r0, #1
341a43b4:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
341a43b8:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
341a43bc:	4248      	negs	r0, r1
341a43be:	4148      	adcs	r0, r1
341a43c0:	0480      	lsls	r0, r0, #18
341a43c2:	f3c6 020a 	ubfx	r2, r6, #0, #11
341a43c6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
341a43ca:	2b7f      	cmp	r3, #127	@ 0x7f
341a43cc:	d92d      	bls.n	341a442a <pow+0x1d2>
341a43ce:	2000      	movs	r0, #0
341a43d0:	4b95      	ldr	r3, [pc, #596]	@ (341a4628 <pow+0x3d0>)
341a43d2:	429c      	cmp	r4, r3
341a43d4:	bf08      	it	eq
341a43d6:	4285      	cmpeq	r5, r0
341a43d8:	f43f af7a 	beq.w	341a42d0 <pow+0x78>
341a43dc:	f240 31bd 	movw	r1, #957	@ 0x3bd
341a43e0:	428a      	cmp	r2, r1
341a43e2:	d80c      	bhi.n	341a43fe <pow+0x1a6>
341a43e4:	42a8      	cmp	r0, r5
341a43e6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341a43ea:	41a3      	sbcs	r3, r4
341a43ec:	d204      	bcs.n	341a43f8 <pow+0x1a0>
341a43ee:	ee31 0b00 	vadd.f64	d0, d1, d0
341a43f2:	e79c      	b.n	341a432e <pow+0xd6>
341a43f4:	2000      	movs	r0, #0
341a43f6:	e7e4      	b.n	341a43c2 <pow+0x16a>
341a43f8:	ee30 0b41 	vsub.f64	d0, d0, d1
341a43fc:	e797      	b.n	341a432e <pow+0xd6>
341a43fe:	2d01      	cmp	r5, #1
341a4400:	f240 72ff 	movw	r2, #2047	@ 0x7ff
341a4404:	eb74 0303 	sbcs.w	r3, r4, r3
341a4408:	bf34      	ite	cc
341a440a:	2301      	movcc	r3, #1
341a440c:	2300      	movcs	r3, #0
341a440e:	4296      	cmp	r6, r2
341a4410:	bf8c      	ite	hi
341a4412:	2600      	movhi	r6, #0
341a4414:	2601      	movls	r6, #1
341a4416:	42b3      	cmp	r3, r6
341a4418:	f000 809c 	beq.w	341a4554 <pow+0x2fc>
341a441c:	b007      	add	sp, #28
341a441e:	ecbd 8b0a 	vpop	{d8-d12}
341a4422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a4426:	f000 bbc7 	b.w	341a4bb8 <__math_oflow>
341a442a:	f1bc 0f00 	cmp.w	ip, #0
341a442e:	d10a      	bne.n	341a4446 <pow+0x1ee>
341a4430:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 341a4618 <pow+0x3c0>
341a4434:	ee20 7b07 	vmul.f64	d7, d0, d7
341a4438:	ec53 2b17 	vmov	r2, r3, d7
341a443c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
341a4440:	4615      	mov	r5, r2
341a4442:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
341a4446:	4a7c      	ldr	r2, [pc, #496]	@ (341a4638 <pow+0x3e0>)
341a4448:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
341a444c:	4422      	add	r2, r4
341a444e:	1513      	asrs	r3, r2, #20
341a4450:	f3c2 3146 	ubfx	r1, r2, #13, #7
341a4454:	f36f 0213 	bfc	r2, #0, #20
341a4458:	ee03 3a10 	vmov	s6, r3
341a445c:	4b77      	ldr	r3, [pc, #476]	@ (341a463c <pow+0x3e4>)
341a445e:	1aa7      	subs	r7, r4, r2
341a4460:	eb03 1641 	add.w	r6, r3, r1, lsl #5
341a4464:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
341a4468:	eb03 1241 	add.w	r2, r3, r1, lsl #5
341a446c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
341a4470:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
341a4474:	1e2e      	subs	r6, r5, #0
341a4476:	ec47 6b14 	vmov	d4, r6, r7
341a447a:	eea4 6b05 	vfma.f64	d6, d4, d5
341a447e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
341a4482:	ed93 5b00 	vldr	d5, [r3]
341a4486:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
341a448a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
341a448e:	eea3 2b05 	vfma.f64	d2, d3, d5
341a4492:	ed93 5b02 	vldr	d5, [r3, #8]
341a4496:	eea3 7b05 	vfma.f64	d7, d3, d5
341a449a:	ee36 4b02 	vadd.f64	d4, d6, d2
341a449e:	ed93 5b04 	vldr	d5, [r3, #16]
341a44a2:	ee32 2b44 	vsub.f64	d2, d2, d4
341a44a6:	ee26 5b05 	vmul.f64	d5, d6, d5
341a44aa:	ee32 2b06 	vadd.f64	d2, d2, d6
341a44ae:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
341a44b2:	ee26 0b05 	vmul.f64	d0, d6, d5
341a44b6:	ee37 7b02 	vadd.f64	d7, d7, d2
341a44ba:	ee34 8b00 	vadd.f64	d8, d4, d0
341a44be:	eeb0 9b40 	vmov.f64	d9, d0
341a44c2:	ee26 bb00 	vmul.f64	d11, d6, d0
341a44c6:	ee34 4b48 	vsub.f64	d4, d4, d8
341a44ca:	ee96 9b05 	vfnms.f64	d9, d6, d5
341a44ce:	ee34 ab00 	vadd.f64	d10, d4, d0
341a44d2:	ed93 5b06 	vldr	d5, [r3, #24]
341a44d6:	ed93 4b08 	vldr	d4, [r3, #32]
341a44da:	eea6 5b04 	vfma.f64	d5, d6, d4
341a44de:	ee37 7b09 	vadd.f64	d7, d7, d9
341a44e2:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
341a44e6:	ee37 7b0a 	vadd.f64	d7, d7, d10
341a44ea:	eea6 4b03 	vfma.f64	d4, d6, d3
341a44ee:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
341a44f2:	eea6 3b0c 	vfma.f64	d3, d6, d12
341a44f6:	eea0 4b03 	vfma.f64	d4, d0, d3
341a44fa:	eea0 5b04 	vfma.f64	d5, d0, d4
341a44fe:	eeab 7b05 	vfma.f64	d7, d11, d5
341a4502:	ee38 4b07 	vadd.f64	d4, d8, d7
341a4506:	ee21 6b04 	vmul.f64	d6, d1, d4
341a450a:	ee38 8b44 	vsub.f64	d8, d8, d4
341a450e:	eeb0 5b46 	vmov.f64	d5, d6
341a4512:	ee16 3a90 	vmov	r3, s13
341a4516:	ee38 8b07 	vadd.f64	d8, d8, d7
341a451a:	f3c3 560a 	ubfx	r6, r3, #20, #11
341a451e:	ee91 5b04 	vfnms.f64	d5, d1, d4
341a4522:	18b2      	adds	r2, r6, r2
341a4524:	2a3e      	cmp	r2, #62	@ 0x3e
341a4526:	eea1 5b08 	vfma.f64	d5, d1, d8
341a452a:	d91b      	bls.n	341a4564 <pow+0x30c>
341a452c:	2a00      	cmp	r2, #0
341a452e:	da0b      	bge.n	341a4548 <pow+0x2f0>
341a4530:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341a4534:	ee36 0b00 	vadd.f64	d0, d6, d0
341a4538:	2800      	cmp	r0, #0
341a453a:	f43f aef8 	beq.w	341a432e <pow+0xd6>
341a453e:	eeb1 0b40 	vneg.f64	d0, d0
341a4542:	e6f4      	b.n	341a432e <pow+0xd6>
341a4544:	2000      	movs	r0, #0
341a4546:	e77e      	b.n	341a4446 <pow+0x1ee>
341a4548:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
341a454c:	d909      	bls.n	341a4562 <pow+0x30a>
341a454e:	2b00      	cmp	r3, #0
341a4550:	f6bf af64 	bge.w	341a441c <pow+0x1c4>
341a4554:	b007      	add	sp, #28
341a4556:	ecbd 8b0a 	vpop	{d8-d12}
341a455a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a455e:	f000 bb23 	b.w	341a4ba8 <__math_uflow>
341a4562:	2600      	movs	r6, #0
341a4564:	4936      	ldr	r1, [pc, #216]	@ (341a4640 <pow+0x3e8>)
341a4566:	2700      	movs	r7, #0
341a4568:	ed91 4b02 	vldr	d4, [r1, #8]
341a456c:	ed91 3b00 	vldr	d3, [r1]
341a4570:	eeb0 7b44 	vmov.f64	d7, d4
341a4574:	eea6 7b03 	vfma.f64	d7, d6, d3
341a4578:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
341a457c:	ee17 5a10 	vmov	r5, s14
341a4580:	ee37 7b44 	vsub.f64	d7, d7, d4
341a4584:	ed91 4b04 	vldr	d4, [r1, #16]
341a4588:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
341a458c:	eea7 6b04 	vfma.f64	d6, d7, d4
341a4590:	18dc      	adds	r4, r3, r3
341a4592:	1940      	adds	r0, r0, r5
341a4594:	f104 030f 	add.w	r3, r4, #15
341a4598:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
341a459c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
341a45a0:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
341a45a4:	ed91 4b06 	vldr	d4, [r1, #24]
341a45a8:	f8d2 e004 	ldr.w	lr, [r2, #4]
341a45ac:	eb17 020c 	adds.w	r2, r7, ip
341a45b0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
341a45b4:	eea7 6b04 	vfma.f64	d6, d7, d4
341a45b8:	ed91 4b08 	vldr	d4, [r1, #32]
341a45bc:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
341a45c0:	ee35 5b06 	vadd.f64	d5, d5, d6
341a45c4:	eea5 4b03 	vfma.f64	d4, d5, d3
341a45c8:	ee25 6b05 	vmul.f64	d6, d5, d5
341a45cc:	ee35 7b07 	vadd.f64	d7, d5, d7
341a45d0:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
341a45d4:	eea6 7b04 	vfma.f64	d7, d6, d4
341a45d8:	ee26 6b06 	vmul.f64	d6, d6, d6
341a45dc:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
341a45e0:	eea5 4b03 	vfma.f64	d4, d5, d3
341a45e4:	eea6 7b04 	vfma.f64	d7, d6, d4
341a45e8:	2e00      	cmp	r6, #0
341a45ea:	d175      	bne.n	341a46d8 <pow+0x480>
341a45ec:	42bd      	cmp	r5, r7
341a45ee:	db29      	blt.n	341a4644 <pow+0x3ec>
341a45f0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
341a45f4:	4610      	mov	r0, r2
341a45f6:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
341a45fa:	ec41 0b10 	vmov	d0, r0, r1
341a45fe:	eea7 0b00 	vfma.f64	d0, d7, d0
341a4602:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 341a4620 <pow+0x3c8>
341a4606:	ee20 0b07 	vmul.f64	d0, d0, d7
341a460a:	b007      	add	sp, #28
341a460c:	ecbd 8b0a 	vpop	{d8-d12}
341a4610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a4614:	f000 bb0c 	b.w	341a4c30 <__math_check_oflow>
341a4618:	00000000 	.word	0x00000000
341a461c:	43300000 	.word	0x43300000
341a4620:	00000000 	.word	0x00000000
341a4624:	7f000000 	.word	0x7f000000
341a4628:	3ff00000 	.word	0x3ff00000
341a462c:	fff00000 	.word	0xfff00000
341a4630:	ffe00000 	.word	0xffe00000
341a4634:	7fe00000 	.word	0x7fe00000
341a4638:	c0196aab 	.word	0xc0196aab
341a463c:	341a6658 	.word	0x341a6658
341a4640:	341a76a0 	.word	0x341a76a0
341a4644:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
341a4648:	4610      	mov	r0, r2
341a464a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
341a464e:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
341a4652:	ec41 0b15 	vmov	d5, r0, r1
341a4656:	ee27 6b05 	vmul.f64	d6, d7, d5
341a465a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 341a46e8 <pow+0x490>
341a465e:	ee35 7b06 	vadd.f64	d7, d5, d6
341a4662:	eeb0 4bc7 	vabs.f64	d4, d7
341a4666:	eeb4 4bc3 	vcmpe.f64	d4, d3
341a466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a466e:	d52a      	bpl.n	341a46c6 <pow+0x46e>
341a4670:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
341a4674:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
341a4678:	ee35 5b47 	vsub.f64	d5, d5, d7
341a467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4680:	ee35 5b06 	vadd.f64	d5, d5, d6
341a4684:	bf58      	it	pl
341a4686:	eeb0 4b43 	vmovpl.f64	d4, d3
341a468a:	ee37 3b04 	vadd.f64	d3, d7, d4
341a468e:	ee34 6b43 	vsub.f64	d6, d4, d3
341a4692:	ee36 6b07 	vadd.f64	d6, d6, d7
341a4696:	ee36 6b05 	vadd.f64	d6, d6, d5
341a469a:	ee36 6b03 	vadd.f64	d6, d6, d3
341a469e:	ee36 7b44 	vsub.f64	d7, d6, d4
341a46a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
341a46a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a46aa:	d104      	bne.n	341a46b6 <pow+0x45e>
341a46ac:	4632      	mov	r2, r6
341a46ae:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
341a46b2:	ec43 2b17 	vmov	d7, r2, r3
341a46b6:	ed8d 0b02 	vstr	d0, [sp, #8]
341a46ba:	ed9d 6b02 	vldr	d6, [sp, #8]
341a46be:	ee26 6b00 	vmul.f64	d6, d6, d0
341a46c2:	ed8d 6b04 	vstr	d6, [sp, #16]
341a46c6:	ee27 0b00 	vmul.f64	d0, d7, d0
341a46ca:	b007      	add	sp, #28
341a46cc:	ecbd 8b0a 	vpop	{d8-d12}
341a46d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341a46d4:	f000 baa3 	b.w	341a4c1e <__math_check_uflow>
341a46d8:	ec43 2b10 	vmov	d0, r2, r3
341a46dc:	eea7 0b00 	vfma.f64	d0, d7, d0
341a46e0:	e625      	b.n	341a432e <pow+0xd6>
341a46e2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 341a46f0 <pow+0x498>
341a46e6:	e622      	b.n	341a432e <pow+0xd6>
341a46e8:	00000000 	.word	0x00000000
341a46ec:	00100000 	.word	0x00100000
	...

341a46f8 <checkint>:
341a46f8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
341a46fc:	2b7e      	cmp	r3, #126	@ 0x7e
341a46fe:	d910      	bls.n	341a4722 <checkint+0x2a>
341a4700:	2b96      	cmp	r3, #150	@ 0x96
341a4702:	d80c      	bhi.n	341a471e <checkint+0x26>
341a4704:	2201      	movs	r2, #1
341a4706:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
341a470a:	fa02 f303 	lsl.w	r3, r2, r3
341a470e:	1e5a      	subs	r2, r3, #1
341a4710:	4202      	tst	r2, r0
341a4712:	d106      	bne.n	341a4722 <checkint+0x2a>
341a4714:	4203      	tst	r3, r0
341a4716:	bf14      	ite	ne
341a4718:	2001      	movne	r0, #1
341a471a:	2002      	moveq	r0, #2
341a471c:	4770      	bx	lr
341a471e:	2002      	movs	r0, #2
341a4720:	4770      	bx	lr
341a4722:	2000      	movs	r0, #0
341a4724:	4770      	bx	lr
	...

341a4728 <powf>:
341a4728:	b537      	push	{r0, r1, r2, r4, r5, lr}
341a472a:	ee10 1a10 	vmov	r1, s0
341a472e:	ee10 4a90 	vmov	r4, s1
341a4732:	eef0 7a40 	vmov.f32	s15, s0
341a4736:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
341a473a:	0063      	lsls	r3, r4, #1
341a473c:	eeb0 7a60 	vmov.f32	s14, s1
341a4740:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
341a4744:	f103 30ff 	add.w	r0, r3, #4294967295
341a4748:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
341a474c:	d252      	bcs.n	341a47f4 <powf+0xcc>
341a474e:	4290      	cmp	r0, r2
341a4750:	d258      	bcs.n	341a4804 <powf+0xdc>
341a4752:	2000      	movs	r0, #0
341a4754:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
341a4758:	4a9f      	ldr	r2, [pc, #636]	@ (341a49d8 <powf+0x2b0>)
341a475a:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
341a475e:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
341a4762:	f3c3 44c3 	ubfx	r4, r3, #19, #4
341a4766:	f36f 0316 	bfc	r3, #0, #23
341a476a:	1ac9      	subs	r1, r1, r3
341a476c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
341a4770:	15db      	asrs	r3, r3, #23
341a4772:	ee07 1a90 	vmov	s15, r1
341a4776:	ed94 4b00 	vldr	d4, [r4]
341a477a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
341a477e:	ee07 3a90 	vmov	s15, r3
341a4782:	ed94 5b02 	vldr	d5, [r4, #8]
341a4786:	eea4 2b06 	vfma.f64	d2, d4, d6
341a478a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
341a478e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
341a4792:	ee36 6b05 	vadd.f64	d6, d6, d5
341a4796:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
341a479a:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
341a479e:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
341a47a2:	ee22 4b02 	vmul.f64	d4, d2, d2
341a47a6:	eea2 1b05 	vfma.f64	d1, d2, d5
341a47aa:	ee24 0b04 	vmul.f64	d0, d4, d4
341a47ae:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
341a47b2:	eea2 5b03 	vfma.f64	d5, d2, d3
341a47b6:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
341a47ba:	eea2 6b03 	vfma.f64	d6, d2, d3
341a47be:	eea4 6b05 	vfma.f64	d6, d4, d5
341a47c2:	eea1 6b00 	vfma.f64	d6, d1, d0
341a47c6:	ee27 7b06 	vmul.f64	d7, d7, d6
341a47ca:	ee17 3a90 	vmov	r3, s15
341a47ce:	f3c3 32cf 	ubfx	r2, r3, #15, #16
341a47d2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
341a47d6:	429a      	cmp	r2, r3
341a47d8:	f0c0 8098 	bcc.w	341a490c <powf+0x1e4>
341a47dc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 341a49b8 <powf+0x290>
341a47e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
341a47e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a47e8:	dd79      	ble.n	341a48de <powf+0x1b6>
341a47ea:	b003      	add	sp, #12
341a47ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a47f0:	f000 b920 	b.w	341a4a34 <__math_oflowf>
341a47f4:	4290      	cmp	r0, r2
341a47f6:	d330      	bcc.n	341a485a <powf+0x132>
341a47f8:	b12b      	cbz	r3, 341a4806 <powf+0xde>
341a47fa:	0049      	lsls	r1, r1, #1
341a47fc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
341a4800:	d808      	bhi.n	341a4814 <powf+0xec>
341a4802:	e015      	b.n	341a4830 <powf+0x108>
341a4804:	b953      	cbnz	r3, 341a481c <powf+0xf4>
341a4806:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
341a480a:	0049      	lsls	r1, r1, #1
341a480c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
341a4810:	f240 80ca 	bls.w	341a49a8 <powf+0x280>
341a4814:	ee37 0a87 	vadd.f32	s0, s15, s14
341a4818:	b003      	add	sp, #12
341a481a:	bd30      	pop	{r4, r5, pc}
341a481c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
341a4820:	d105      	bne.n	341a482e <powf+0x106>
341a4822:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
341a4826:	0064      	lsls	r4, r4, #1
341a4828:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
341a482c:	e7f0      	b.n	341a4810 <powf+0xe8>
341a482e:	0049      	lsls	r1, r1, #1
341a4830:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
341a4834:	d1ee      	bne.n	341a4814 <powf+0xec>
341a4836:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
341a483a:	f000 80b5 	beq.w	341a49a8 <powf+0x280>
341a483e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
341a4842:	ea6f 0404 	mvn.w	r4, r4
341a4846:	bf34      	ite	cc
341a4848:	2100      	movcc	r1, #0
341a484a:	2101      	movcs	r1, #1
341a484c:	0fe4      	lsrs	r4, r4, #31
341a484e:	42a1      	cmp	r1, r4
341a4850:	f040 80ad 	bne.w	341a49ae <powf+0x286>
341a4854:	ee27 0a07 	vmul.f32	s0, s14, s14
341a4858:	e7de      	b.n	341a4818 <powf+0xf0>
341a485a:	004d      	lsls	r5, r1, #1
341a485c:	1e6b      	subs	r3, r5, #1
341a485e:	4293      	cmp	r3, r2
341a4860:	d31b      	bcc.n	341a489a <powf+0x172>
341a4862:	2900      	cmp	r1, #0
341a4864:	ee20 0a00 	vmul.f32	s0, s0, s0
341a4868:	da0e      	bge.n	341a4888 <powf+0x160>
341a486a:	4620      	mov	r0, r4
341a486c:	f7ff ff44 	bl	341a46f8 <checkint>
341a4870:	2801      	cmp	r0, #1
341a4872:	d109      	bne.n	341a4888 <powf+0x160>
341a4874:	eeb1 0a40 	vneg.f32	s0, s0
341a4878:	b945      	cbnz	r5, 341a488c <powf+0x164>
341a487a:	2c00      	cmp	r4, #0
341a487c:	dacc      	bge.n	341a4818 <powf+0xf0>
341a487e:	b003      	add	sp, #12
341a4880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a4884:	f000 b8dc 	b.w	341a4a40 <__math_divzerof>
341a4888:	2000      	movs	r0, #0
341a488a:	e7f5      	b.n	341a4878 <powf+0x150>
341a488c:	2c00      	cmp	r4, #0
341a488e:	dac3      	bge.n	341a4818 <powf+0xf0>
341a4890:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
341a4894:	ee87 0a80 	vdiv.f32	s0, s15, s0
341a4898:	e7be      	b.n	341a4818 <powf+0xf0>
341a489a:	2900      	cmp	r1, #0
341a489c:	da1d      	bge.n	341a48da <powf+0x1b2>
341a489e:	4620      	mov	r0, r4
341a48a0:	f7ff ff2a 	bl	341a46f8 <checkint>
341a48a4:	b920      	cbnz	r0, 341a48b0 <powf+0x188>
341a48a6:	b003      	add	sp, #12
341a48a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a48ac:	f000 b8da 	b.w	341a4a64 <__math_invalidf>
341a48b0:	1e43      	subs	r3, r0, #1
341a48b2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
341a48b6:	4258      	negs	r0, r3
341a48b8:	4158      	adcs	r0, r3
341a48ba:	0400      	lsls	r0, r0, #16
341a48bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
341a48c0:	f4bf af48 	bcs.w	341a4754 <powf+0x2c>
341a48c4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 341a49dc <powf+0x2b4>
341a48c8:	ee27 0aa6 	vmul.f32	s0, s15, s13
341a48cc:	ee10 3a10 	vmov	r3, s0
341a48d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341a48d4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
341a48d8:	e73c      	b.n	341a4754 <powf+0x2c>
341a48da:	2000      	movs	r0, #0
341a48dc:	e7ee      	b.n	341a48bc <powf+0x194>
341a48de:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 341a49c0 <powf+0x298>
341a48e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
341a48e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a48ea:	dd45      	ble.n	341a4978 <powf+0x250>
341a48ec:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
341a48f0:	b3d0      	cbz	r0, 341a4968 <powf+0x240>
341a48f2:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
341a48f6:	9301      	str	r3, [sp, #4]
341a48f8:	eddd 6a01 	vldr	s13, [sp, #4]
341a48fc:	ee76 6a66 	vsub.f32	s13, s12, s13
341a4900:	eef4 6a46 	vcmp.f32	s13, s12
341a4904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4908:	f47f af6f 	bne.w	341a47ea <powf+0xc2>
341a490c:	4b34      	ldr	r3, [pc, #208]	@ (341a49e0 <powf+0x2b8>)
341a490e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
341a4912:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
341a4916:	ee37 6b05 	vadd.f64	d6, d7, d5
341a491a:	ee16 2a10 	vmov	r2, s12
341a491e:	ee36 6b45 	vsub.f64	d6, d6, d5
341a4922:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
341a4926:	ee37 7b46 	vsub.f64	d7, d7, d6
341a492a:	f002 011f 	and.w	r1, r2, #31
341a492e:	1880      	adds	r0, r0, r2
341a4930:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
341a4934:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
341a4938:	ee27 4b07 	vmul.f64	d4, d7, d7
341a493c:	2100      	movs	r1, #0
341a493e:	686d      	ldr	r5, [r5, #4]
341a4940:	190a      	adds	r2, r1, r4
341a4942:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
341a4946:	eea7 6b05 	vfma.f64	d6, d7, d5
341a494a:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
341a494e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
341a4952:	eea7 0b05 	vfma.f64	d0, d7, d5
341a4956:	ec43 2b17 	vmov	d7, r2, r3
341a495a:	eea6 0b04 	vfma.f64	d0, d6, d4
341a495e:	ee20 0b07 	vmul.f64	d0, d0, d7
341a4962:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
341a4966:	e757      	b.n	341a4818 <powf+0xf0>
341a4968:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
341a496c:	9300      	str	r3, [sp, #0]
341a496e:	eddd 6a00 	vldr	s13, [sp]
341a4972:	ee76 6a86 	vadd.f32	s13, s13, s12
341a4976:	e7c3      	b.n	341a4900 <powf+0x1d8>
341a4978:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 341a49c8 <powf+0x2a0>
341a497c:	eeb4 7bc6 	vcmpe.f64	d7, d6
341a4980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4984:	d804      	bhi.n	341a4990 <powf+0x268>
341a4986:	b003      	add	sp, #12
341a4988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a498c:	f000 b846 	b.w	341a4a1c <__math_uflowf>
341a4990:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 341a49d0 <powf+0x2a8>
341a4994:	eeb4 7bc6 	vcmpe.f64	d7, d6
341a4998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a499c:	d5b6      	bpl.n	341a490c <powf+0x1e4>
341a499e:	b003      	add	sp, #12
341a49a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
341a49a4:	f000 b840 	b.w	341a4a28 <__math_may_uflowf>
341a49a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
341a49ac:	e734      	b.n	341a4818 <powf+0xf0>
341a49ae:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 341a49e4 <powf+0x2bc>
341a49b2:	e731      	b.n	341a4818 <powf+0xf0>
341a49b4:	f3af 8000 	nop.w
341a49b8:	ffd1d571 	.word	0xffd1d571
341a49bc:	405fffff 	.word	0x405fffff
341a49c0:	ffa3aae2 	.word	0xffa3aae2
341a49c4:	405fffff 	.word	0x405fffff
341a49c8:	00000000 	.word	0x00000000
341a49cc:	c062c000 	.word	0xc062c000
341a49d0:	00000000 	.word	0x00000000
341a49d4:	c062a000 	.word	0xc062a000
341a49d8:	341a88e8 	.word	0x341a88e8
341a49dc:	4b000000 	.word	0x4b000000
341a49e0:	341a87a0 	.word	0x341a87a0
341a49e4:	00000000 	.word	0x00000000

341a49e8 <with_errnof>:
341a49e8:	b510      	push	{r4, lr}
341a49ea:	ed2d 8b02 	vpush	{d8}
341a49ee:	eeb0 8a40 	vmov.f32	s16, s0
341a49f2:	4604      	mov	r4, r0
341a49f4:	f7fe fca4 	bl	341a3340 <__errno>
341a49f8:	6004      	str	r4, [r0, #0]
341a49fa:	eeb0 0a48 	vmov.f32	s0, s16
341a49fe:	ecbd 8b02 	vpop	{d8}
341a4a02:	bd10      	pop	{r4, pc}

341a4a04 <xflowf>:
341a4a04:	b130      	cbz	r0, 341a4a14 <xflowf+0x10>
341a4a06:	eef1 7a40 	vneg.f32	s15, s0
341a4a0a:	ee27 0a80 	vmul.f32	s0, s15, s0
341a4a0e:	2022      	movs	r0, #34	@ 0x22
341a4a10:	f7ff bfea 	b.w	341a49e8 <with_errnof>
341a4a14:	eef0 7a40 	vmov.f32	s15, s0
341a4a18:	e7f7      	b.n	341a4a0a <xflowf+0x6>
	...

341a4a1c <__math_uflowf>:
341a4a1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341a4a24 <__math_uflowf+0x8>
341a4a20:	f7ff bff0 	b.w	341a4a04 <xflowf>
341a4a24:	10000000 	.word	0x10000000

341a4a28 <__math_may_uflowf>:
341a4a28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341a4a30 <__math_may_uflowf+0x8>
341a4a2c:	f7ff bfea 	b.w	341a4a04 <xflowf>
341a4a30:	1a200000 	.word	0x1a200000

341a4a34 <__math_oflowf>:
341a4a34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 341a4a3c <__math_oflowf+0x8>
341a4a38:	f7ff bfe4 	b.w	341a4a04 <xflowf>
341a4a3c:	70000000 	.word	0x70000000

341a4a40 <__math_divzerof>:
341a4a40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
341a4a44:	2800      	cmp	r0, #0
341a4a46:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
341a4a4a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 341a4a60 <__math_divzerof+0x20>
341a4a4e:	f04f 0022 	mov.w	r0, #34	@ 0x22
341a4a52:	fe47 7a87 	vseleq.f32	s15, s15, s14
341a4a56:	ee87 0a80 	vdiv.f32	s0, s15, s0
341a4a5a:	f7ff bfc5 	b.w	341a49e8 <with_errnof>
341a4a5e:	bf00      	nop
341a4a60:	00000000 	.word	0x00000000

341a4a64 <__math_invalidf>:
341a4a64:	eef0 7a40 	vmov.f32	s15, s0
341a4a68:	ee30 7a40 	vsub.f32	s14, s0, s0
341a4a6c:	eef4 7a67 	vcmp.f32	s15, s15
341a4a70:	ee87 0a07 	vdiv.f32	s0, s14, s14
341a4a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4a78:	d602      	bvs.n	341a4a80 <__math_invalidf+0x1c>
341a4a7a:	2021      	movs	r0, #33	@ 0x21
341a4a7c:	f7ff bfb4 	b.w	341a49e8 <with_errnof>
341a4a80:	4770      	bx	lr

341a4a82 <__ieee754_sqrt>:
341a4a82:	eeb1 0bc0 	vsqrt.f64	d0, d0
341a4a86:	4770      	bx	lr

341a4a88 <__ieee754_log10>:
341a4a88:	ee10 3a90 	vmov	r3, s1
341a4a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341a4a90:	b510      	push	{r4, lr}
341a4a92:	ed2d 8b02 	vpush	{d8}
341a4a96:	da21      	bge.n	341a4adc <__ieee754_log10+0x54>
341a4a98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
341a4a9c:	ee10 1a10 	vmov	r1, s0
341a4aa0:	430a      	orrs	r2, r1
341a4aa2:	d108      	bne.n	341a4ab6 <__ieee754_log10+0x2e>
341a4aa4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 341a4b30 <__ieee754_log10+0xa8>
341a4aa8:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 341a4b38 <__ieee754_log10+0xb0>
341a4aac:	ee86 0b07 	vdiv.f64	d0, d6, d7
341a4ab0:	ecbd 8b02 	vpop	{d8}
341a4ab4:	bd10      	pop	{r4, pc}
341a4ab6:	2b00      	cmp	r3, #0
341a4ab8:	da02      	bge.n	341a4ac0 <__ieee754_log10+0x38>
341a4aba:	ee30 6b40 	vsub.f64	d6, d0, d0
341a4abe:	e7f3      	b.n	341a4aa8 <__ieee754_log10+0x20>
341a4ac0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 341a4b40 <__ieee754_log10+0xb8>
341a4ac4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
341a4ac8:	ee20 0b07 	vmul.f64	d0, d0, d7
341a4acc:	ee10 3a90 	vmov	r3, s1
341a4ad0:	4923      	ldr	r1, [pc, #140]	@ (341a4b60 <__ieee754_log10+0xd8>)
341a4ad2:	428b      	cmp	r3, r1
341a4ad4:	dd04      	ble.n	341a4ae0 <__ieee754_log10+0x58>
341a4ad6:	ee30 0b00 	vadd.f64	d0, d0, d0
341a4ada:	e7e9      	b.n	341a4ab0 <__ieee754_log10+0x28>
341a4adc:	2200      	movs	r2, #0
341a4ade:	e7f7      	b.n	341a4ad0 <__ieee754_log10+0x48>
341a4ae0:	1518      	asrs	r0, r3, #20
341a4ae2:	f240 34ff 	movw	r4, #1023	@ 0x3ff
341a4ae6:	f3c3 0113 	ubfx	r1, r3, #0, #20
341a4aea:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
341a4aee:	4410      	add	r0, r2
341a4af0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
341a4af4:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
341a4af8:	ee08 3a10 	vmov	s16, r3
341a4afc:	ec53 2b10 	vmov	r2, r3, d0
341a4b00:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
341a4b04:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
341a4b08:	ec43 2b10 	vmov	d0, r2, r3
341a4b0c:	f000 f8a4 	bl	341a4c58 <log>
341a4b10:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 341a4b48 <__ieee754_log10+0xc0>
341a4b14:	ee20 0b07 	vmul.f64	d0, d0, d7
341a4b18:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 341a4b50 <__ieee754_log10+0xc8>
341a4b1c:	eea8 0b07 	vfma.f64	d0, d8, d7
341a4b20:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 341a4b58 <__ieee754_log10+0xd0>
341a4b24:	eea8 0b07 	vfma.f64	d0, d8, d7
341a4b28:	e7c2      	b.n	341a4ab0 <__ieee754_log10+0x28>
341a4b2a:	bf00      	nop
341a4b2c:	f3af 8000 	nop.w
341a4b30:	00000000 	.word	0x00000000
341a4b34:	c3500000 	.word	0xc3500000
	...
341a4b44:	43500000 	.word	0x43500000
341a4b48:	1526e50e 	.word	0x1526e50e
341a4b4c:	3fdbcb7b 	.word	0x3fdbcb7b
341a4b50:	11f12b36 	.word	0x11f12b36
341a4b54:	3d59fef3 	.word	0x3d59fef3
341a4b58:	509f6000 	.word	0x509f6000
341a4b5c:	3fd34413 	.word	0x3fd34413
341a4b60:	7fefffff 	.word	0x7fefffff

341a4b64 <with_errno>:
341a4b64:	b510      	push	{r4, lr}
341a4b66:	ed2d 8b02 	vpush	{d8}
341a4b6a:	eeb0 8b40 	vmov.f64	d8, d0
341a4b6e:	4604      	mov	r4, r0
341a4b70:	f7fe fbe6 	bl	341a3340 <__errno>
341a4b74:	6004      	str	r4, [r0, #0]
341a4b76:	eeb0 0b48 	vmov.f64	d0, d8
341a4b7a:	ecbd 8b02 	vpop	{d8}
341a4b7e:	bd10      	pop	{r4, pc}

341a4b80 <xflow>:
341a4b80:	b082      	sub	sp, #8
341a4b82:	b158      	cbz	r0, 341a4b9c <xflow+0x1c>
341a4b84:	eeb1 7b40 	vneg.f64	d7, d0
341a4b88:	2022      	movs	r0, #34	@ 0x22
341a4b8a:	ed8d 7b00 	vstr	d7, [sp]
341a4b8e:	ed9d 7b00 	vldr	d7, [sp]
341a4b92:	ee20 0b07 	vmul.f64	d0, d0, d7
341a4b96:	b002      	add	sp, #8
341a4b98:	f7ff bfe4 	b.w	341a4b64 <with_errno>
341a4b9c:	eeb0 7b40 	vmov.f64	d7, d0
341a4ba0:	e7f2      	b.n	341a4b88 <xflow+0x8>
341a4ba2:	0000      	movs	r0, r0
341a4ba4:	0000      	movs	r0, r0
	...

341a4ba8 <__math_uflow>:
341a4ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 341a4bb0 <__math_uflow+0x8>
341a4bac:	f7ff bfe8 	b.w	341a4b80 <xflow>
341a4bb0:	00000000 	.word	0x00000000
341a4bb4:	10000000 	.word	0x10000000

341a4bb8 <__math_oflow>:
341a4bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 341a4bc0 <__math_oflow+0x8>
341a4bbc:	f7ff bfe0 	b.w	341a4b80 <xflow>
341a4bc0:	00000000 	.word	0x00000000
341a4bc4:	70000000 	.word	0x70000000

341a4bc8 <__math_divzero>:
341a4bc8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
341a4bcc:	b082      	sub	sp, #8
341a4bce:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
341a4bd2:	2800      	cmp	r0, #0
341a4bd4:	f04f 0022 	mov.w	r0, #34	@ 0x22
341a4bd8:	fe07 7b06 	vseleq.f64	d7, d7, d6
341a4bdc:	ed8d 7b00 	vstr	d7, [sp]
341a4be0:	ed9d 0b00 	vldr	d0, [sp]
341a4be4:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 341a4bf8 <__math_divzero+0x30>
341a4be8:	ee80 0b07 	vdiv.f64	d0, d0, d7
341a4bec:	b002      	add	sp, #8
341a4bee:	f7ff bfb9 	b.w	341a4b64 <with_errno>
341a4bf2:	bf00      	nop
341a4bf4:	f3af 8000 	nop.w
	...

341a4c00 <__math_invalid>:
341a4c00:	eeb0 7b40 	vmov.f64	d7, d0
341a4c04:	ee30 6b40 	vsub.f64	d6, d0, d0
341a4c08:	eeb4 7b47 	vcmp.f64	d7, d7
341a4c0c:	ee86 0b06 	vdiv.f64	d0, d6, d6
341a4c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4c14:	d602      	bvs.n	341a4c1c <__math_invalid+0x1c>
341a4c16:	2021      	movs	r0, #33	@ 0x21
341a4c18:	f7ff bfa4 	b.w	341a4b64 <with_errno>
341a4c1c:	4770      	bx	lr

341a4c1e <__math_check_uflow>:
341a4c1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
341a4c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4c26:	d102      	bne.n	341a4c2e <__math_check_uflow+0x10>
341a4c28:	2022      	movs	r0, #34	@ 0x22
341a4c2a:	f7ff bf9b 	b.w	341a4b64 <with_errno>
341a4c2e:	4770      	bx	lr

341a4c30 <__math_check_oflow>:
341a4c30:	eeb0 7bc0 	vabs.f64	d7, d0
341a4c34:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 341a4c50 <__math_check_oflow+0x20>
341a4c38:	eeb4 7b46 	vcmp.f64	d7, d6
341a4c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341a4c40:	dd02      	ble.n	341a4c48 <__math_check_oflow+0x18>
341a4c42:	2022      	movs	r0, #34	@ 0x22
341a4c44:	f7ff bf8e 	b.w	341a4b64 <with_errno>
341a4c48:	4770      	bx	lr
341a4c4a:	bf00      	nop
341a4c4c:	f3af 8000 	nop.w
341a4c50:	ffffffff 	.word	0xffffffff
341a4c54:	7fefffff 	.word	0x7fefffff

341a4c58 <log>:
341a4c58:	ee10 0a90 	vmov	r0, s1
341a4c5c:	ee10 3a10 	vmov	r3, s0
341a4c60:	b4f0      	push	{r4, r5, r6, r7}
341a4c62:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
341a4c66:	f04f 34ff 	mov.w	r4, #4294967295
341a4c6a:	0c02      	lsrs	r2, r0, #16
341a4c6c:	429c      	cmp	r4, r3
341a4c6e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
341a4c72:	4c71      	ldr	r4, [pc, #452]	@ (341a4e38 <log+0x1e0>)
341a4c74:	418c      	sbcs	r4, r1
341a4c76:	ed2d 8b02 	vpush	{d8}
341a4c7a:	d35a      	bcc.n	341a4d32 <log+0xda>
341a4c7c:	4a6f      	ldr	r2, [pc, #444]	@ (341a4e3c <log+0x1e4>)
341a4c7e:	4290      	cmp	r0, r2
341a4c80:	bf08      	it	eq
341a4c82:	2b00      	cmpeq	r3, #0
341a4c84:	f000 80c7 	beq.w	341a4e16 <log+0x1be>
341a4c88:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
341a4c8c:	4b6c      	ldr	r3, [pc, #432]	@ (341a4e40 <log+0x1e8>)
341a4c8e:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
341a4c92:	ee30 0b47 	vsub.f64	d0, d0, d7
341a4c96:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
341a4c9a:	ee20 2b00 	vmul.f64	d2, d0, d0
341a4c9e:	eea6 7b00 	vfma.f64	d7, d6, d0
341a4ca2:	ee20 4b02 	vmul.f64	d4, d0, d2
341a4ca6:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
341a4caa:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
341a4cae:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
341a4cb2:	eea6 7b02 	vfma.f64	d7, d6, d2
341a4cb6:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
341a4cba:	eea5 6b00 	vfma.f64	d6, d5, d0
341a4cbe:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
341a4cc2:	eea5 6b02 	vfma.f64	d6, d5, d2
341a4cc6:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
341a4cca:	eea3 5b00 	vfma.f64	d5, d3, d0
341a4cce:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
341a4cd2:	eea3 5b02 	vfma.f64	d5, d3, d2
341a4cd6:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
341a4cda:	eea3 5b04 	vfma.f64	d5, d3, d4
341a4cde:	eeb0 3b40 	vmov.f64	d3, d0
341a4ce2:	eea5 6b04 	vfma.f64	d6, d5, d4
341a4ce6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
341a4cea:	eea6 7b04 	vfma.f64	d7, d6, d4
341a4cee:	eeb0 6b40 	vmov.f64	d6, d0
341a4cf2:	eeb0 2b47 	vmov.f64	d2, d7
341a4cf6:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 341a4e20 <log+0x1c8>
341a4cfa:	eea0 6b07 	vfma.f64	d6, d0, d7
341a4cfe:	eea0 6b47 	vfms.f64	d6, d0, d7
341a4d02:	ee26 1b06 	vmul.f64	d1, d6, d6
341a4d06:	ee30 8b46 	vsub.f64	d8, d0, d6
341a4d0a:	eea1 3b05 	vfma.f64	d3, d1, d5
341a4d0e:	ee30 7b43 	vsub.f64	d7, d0, d3
341a4d12:	ee30 0b06 	vadd.f64	d0, d0, d6
341a4d16:	eea1 7b05 	vfma.f64	d7, d1, d5
341a4d1a:	ee25 5b08 	vmul.f64	d5, d5, d8
341a4d1e:	eea5 7b00 	vfma.f64	d7, d5, d0
341a4d22:	eea2 7b04 	vfma.f64	d7, d2, d4
341a4d26:	ee33 0b07 	vadd.f64	d0, d3, d7
341a4d2a:	ecbd 8b02 	vpop	{d8}
341a4d2e:	bcf0      	pop	{r4, r5, r6, r7}
341a4d30:	4770      	bx	lr
341a4d32:	f1a2 0410 	sub.w	r4, r2, #16
341a4d36:	f647 71df 	movw	r1, #32735	@ 0x7fdf
341a4d3a:	428c      	cmp	r4, r1
341a4d3c:	d923      	bls.n	341a4d86 <log+0x12e>
341a4d3e:	18d9      	adds	r1, r3, r3
341a4d40:	eb40 0400 	adc.w	r4, r0, r0
341a4d44:	4321      	orrs	r1, r4
341a4d46:	d105      	bne.n	341a4d54 <log+0xfc>
341a4d48:	2001      	movs	r0, #1
341a4d4a:	ecbd 8b02 	vpop	{d8}
341a4d4e:	bcf0      	pop	{r4, r5, r6, r7}
341a4d50:	f7ff bf3a 	b.w	341a4bc8 <__math_divzero>
341a4d54:	493b      	ldr	r1, [pc, #236]	@ (341a4e44 <log+0x1ec>)
341a4d56:	4288      	cmp	r0, r1
341a4d58:	bf08      	it	eq
341a4d5a:	2b00      	cmpeq	r3, #0
341a4d5c:	d0e5      	beq.n	341a4d2a <log+0xd2>
341a4d5e:	0413      	lsls	r3, r2, #16
341a4d60:	d403      	bmi.n	341a4d6a <log+0x112>
341a4d62:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
341a4d66:	4393      	bics	r3, r2
341a4d68:	d104      	bne.n	341a4d74 <log+0x11c>
341a4d6a:	ecbd 8b02 	vpop	{d8}
341a4d6e:	bcf0      	pop	{r4, r5, r6, r7}
341a4d70:	f7ff bf46 	b.w	341a4c00 <__math_invalid>
341a4d74:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 341a4e28 <log+0x1d0>
341a4d78:	ee20 7b07 	vmul.f64	d7, d0, d7
341a4d7c:	ec53 2b17 	vmov	r2, r3, d7
341a4d80:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
341a4d84:	4613      	mov	r3, r2
341a4d86:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
341a4d8a:	492d      	ldr	r1, [pc, #180]	@ (341a4e40 <log+0x1e8>)
341a4d8c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
341a4d90:	1e1e      	subs	r6, r3, #0
341a4d92:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
341a4d96:	f3c2 3446 	ubfx	r4, r2, #13, #7
341a4d9a:	ea4f 5c12 	mov.w	ip, r2, lsr #20
341a4d9e:	1512      	asrs	r2, r2, #20
341a4da0:	eb01 1504 	add.w	r5, r1, r4, lsl #4
341a4da4:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
341a4da8:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
341a4dac:	eba0 070c 	sub.w	r7, r0, ip
341a4db0:	ec47 6b16 	vmov	d6, r6, r7
341a4db4:	eea7 5b06 	vfma.f64	d5, d7, d6
341a4db8:	ee07 2a90 	vmov	s15, r2
341a4dbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
341a4dc0:	ed91 4b00 	vldr	d4, [r1]
341a4dc4:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
341a4dc8:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
341a4dcc:	eea4 7b06 	vfma.f64	d7, d4, d6
341a4dd0:	ee25 2b05 	vmul.f64	d2, d5, d5
341a4dd4:	ee35 4b07 	vadd.f64	d4, d5, d7
341a4dd8:	ee25 1b02 	vmul.f64	d1, d5, d2
341a4ddc:	ee37 0b44 	vsub.f64	d0, d7, d4
341a4de0:	ed91 7b02 	vldr	d7, [r1, #8]
341a4de4:	ee30 0b05 	vadd.f64	d0, d0, d5
341a4de8:	eea7 0b06 	vfma.f64	d0, d7, d6
341a4dec:	ed91 7b04 	vldr	d7, [r1, #16]
341a4df0:	ed91 6b08 	vldr	d6, [r1, #32]
341a4df4:	eea7 0b02 	vfma.f64	d0, d7, d2
341a4df8:	ed91 7b06 	vldr	d7, [r1, #24]
341a4dfc:	eea6 7b05 	vfma.f64	d7, d6, d5
341a4e00:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
341a4e04:	eea3 6b05 	vfma.f64	d6, d3, d5
341a4e08:	eea6 7b02 	vfma.f64	d7, d6, d2
341a4e0c:	eea1 0b07 	vfma.f64	d0, d1, d7
341a4e10:	ee30 0b04 	vadd.f64	d0, d0, d4
341a4e14:	e789      	b.n	341a4d2a <log+0xd2>
341a4e16:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 341a4e30 <log+0x1d8>
341a4e1a:	e786      	b.n	341a4d2a <log+0xd2>
341a4e1c:	f3af 8000 	nop.w
341a4e20:	00000000 	.word	0x00000000
341a4e24:	41a00000 	.word	0x41a00000
341a4e28:	00000000 	.word	0x00000000
341a4e2c:	43300000 	.word	0x43300000
	...
341a4e38:	000308ff 	.word	0x000308ff
341a4e3c:	3ff00000 	.word	0x3ff00000
341a4e40:	341a7f10 	.word	0x341a7f10
341a4e44:	7ff00000 	.word	0x7ff00000

341a4e48 <_init>:
341a4e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
341a4e4a:	bf00      	nop
341a4e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
341a4e4e:	bc08      	pop	{r3}
341a4e50:	469e      	mov	lr, r3
341a4e52:	4770      	bx	lr

341a4e54 <_fini>:
341a4e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
341a4e56:	bf00      	nop
341a4e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
341a4e5a:	bc08      	pop	{r3}
341a4e5c:	469e      	mov	lr, r3
341a4e5e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

341a9920 <SECURE_SystemCoreClockUpdate>:
341a9920:	e97f e97f 	sg
341a9924:	f7da bd98 	b.w	34184458 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
